using System;

namespace GA.BDC.Core.ESubsGlobal.XFactor
{
	public enum PartnershipNames: int { LLUSERVICE = 0};

	/// <summary>
	/// PartnershipBaseService: An abstracr base class for partner service.
	/// </summary>
	public abstract class PartnershipBaseService
	{
	
		#region Sponsor
		public abstract ErrorCodes CreateGroup(
			string externalGroupID,  // mandatory
			int partnerID,   // mandatory
			string sponsorFirstName,  // mandatory
			string sponsorLastName,  // mandatory
			string email,    // mandatory
			string password,  // optional (autogenerated)
			int optInStatus,   // optional (Opt-In by default)
			string groupName,   // mandatory
			int numberOfGroupMembers,  // optional (15 by default)
			string groupUrl,   // optional (will be based on group name)
			string paymentFirstName,  // optional (default value sponsor name) 
			string paymentLastName,  // optional
			string paymentAddress,   // mandatory
			string paymentCity,   // mandatory
			string paymentState,   // mandatory
			string paymentZip,   // mandatory
			string paymentCountry,// mandatory
			string paymentPhone,// optional
			string groupCulture,// optional (en-US by default)
			BaseServiceStatus serviceStatus
			);  

		public abstract ErrorCodes UpdateGroup(string externalGroupID, 
			int partnerID, 
			string sponsorFirstName, 
			string sponsorLastName, 
			string email, 
			string password, 
			int optInStatus, 
			string groupName, 
			int numberOfGroupMembers, 
			string groupUrl, 
			string paymentFirstName,
			string paymentLastName,
			string paymentAddress, 
			string paymentCity, 
			string paymentState, 
			string paymentZip, 
			string paymentCountry,   
			string paymentPhone, 
			string groupCulture,
			BaseServiceStatus serviceStatus
			);
		#endregion

		#region Participant

		public abstract ErrorCodes CreateParticipant(
			string externalGroupID,
			int partnerID,   // mandatory
			string externalMemberID,  // mandatory
			string cultureCode,   // optional (en-US by default)
			int optInStatus,   // optional (Opt-In by default)
			string firstName,   // mandatory
			string lastName,   // mandatory
			string email,    // mandatory
			string password,  // optional (autogenerated)
			string comments,   // optional	
			BaseServiceStatus serviceStatus
			);

		public abstract ErrorCodes UpdateParticipant(
			string externalGroupID,
			int partnerID,   // mandatory
			string externalMemberID,  // mandatory
			string cultureCode,   // optional (en-US by default)
			int optInStatus,   // optional (Opt-In by default)
			string firstName,   // mandatory
			string lastName,   // mandatory
			string email,    // mandatory
			string password,  // optional (autogenerated)
			string comments,   // optional
			BaseServiceStatus serviceStatus
			);
		#endregion

		public bool IsValidString(string sValue)
		{
            if (sValue == null || sValue.Trim() == string.Empty || sValue.Trim() == "''")
				return false;
			return true;
		}

		private ESubsGlobal.Users.eSubsGlobalUser user = null;
		public ESubsGlobal.Users.eSubsGlobalUser GetUser() {
			return user;
		}

		public void SetUser(ESubsGlobal.Users.eSubsGlobalUser user) {
			this.user = user;
		}

		private eSubsGlobalEnvironment env = null;
		public eSubsGlobalEnvironment GetESubsGlobalEnvironment() {
			return env;
		}

		protected void SetESubsGlobalEnvironment(eSubsGlobalEnvironment env) {
			this.env = env;
		}
	}
}
