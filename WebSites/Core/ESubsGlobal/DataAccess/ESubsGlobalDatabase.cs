/* Title:	ESubs Global Database
 * Author:	Jean-Francois Buist
 * Summary:	Data access layer object to retreive/update/insert values in the database.
 * 
 * Create Date:	August 1, 2005
 * 
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Configuration;
using System.Data;
using System.Xml;
using System.Linq;
using GA.BDC.Core.BusinessBase;
using GA.BDC.Core.Data.Sql;
using GA.BDC.Core.ESubsGlobal.Common;
using GA.BDC.Core.ESubsGlobal.DirectMail.Object;
using GA.BDC.Core.ESubsGlobal.FlagPole;
using GA.BDC.Core.ESubsGlobal.Payment;
using GA.BDC.Core.ESubsGlobal.Promo;
using GA.BDC.Core.ESubsGlobal.Stats;
using GA.BDC.Core.ESubsGlobal.Touch;
using GA.BDC.Core.ESubsGlobal.Users;
namespace GA.BDC.Core.ESubsGlobal.DataAccess
{

    /// <summary>
    /// Summary description for ESubsGlobal.
    /// </summary>
     public partial class ESubsGlobalDatabase : GA.BDC.Core.Data.Sql.DatabaseObject
    {

        public ESubsGlobalDatabase()
        {
            var connectionString = ConfigurationManager.ConnectionStrings["ESubsGlobal"];
            if (connectionString == null)
            {
                throw new System.Data.DataException("Connection String not found");
            }
            SetConnectionString(connectionString.ConnectionString);
            SetDataProvider(connectionString.ProviderName);

            // LEGACY CODE
            //if (Config.IsProduction)
            //{
            //    SetConnectionString(Config.ConnectionStringRelease);
            //    SetDataProvider(Config.DataProviderRelease);
            //}
            //else
            //{
            //    SetConnectionString(Config.ConnectionStringDebug);
            //    SetDataProvider(Config.DataProviderDebug);
            //}
        }

        #region Controllers

        /*
		// insert a new group using transactions
		private int TBD_InsertGroupEventController(ref int eventParticipationID, Users.eSubsGlobalUser sponsor, Group group, Event _event, Payment.PaymentInfo paymentInformation) 
		{
			// declare our sql interface
			SqlInterface si = new SqlInterface(dataProvider, connectionString);

			try 
			{
				// open the connection
				si.Open();

				// begin the transaction
				si.BeginTransaction();

				// ids passed by reference to InsertMember as output values
				int hierarchyID = int.MinValue;
				int memberID = int.MinValue;

				// insert the member
				InsertMemberIntoDatabaseReturnValue insertMember;
				insertMember = InsertMember(si, sponsor.Culture.CultureCode,
					(int)sponsor.OptInStatusID, sponsor.FirstName,
					null, sponsor.LastName, sponsor.Gender,
					sponsor.EmailAddress.Email, sponsor.ParentFirstName,
					sponsor.ParentLastName, sponsor.ExternalMemberID,
					sponsor.PartnerID, sponsor.Password, sponsor.Bounced,
					sponsor.Comments, sponsor.HierarchyParentID,
					sponsor.CreationChannel.ID, sponsor.LeadID,
					ref hierarchyID, ref memberID);
				
				// assign new ids to the sponsor id
				sponsor.HierarchyID = hierarchyID;
				sponsor.ID = memberID;

				// analyse the resul
				switch(insertMember) 
				{
					case InsertMemberIntoDatabaseReturnValue.MEMBER_NAME_AND_EMAIL_ADDRESS_ALREADY_EXISTS:
					case InsertMemberIntoDatabaseReturnValue.OK:
						break;
					case InsertMemberIntoDatabaseReturnValue.EXTERNAL_MEMBER_ID_ALREADY_EXISTS:
					default:
						si.Rollback();
						return -1;	// External Member ID already exists
				}

				// set the group sponsor id
				group.SponsorID = sponsor.HierarchyID;

				int groupID = int.MinValue;

				// insert the group
				InsertGroupIntoDatabaseStatus groupStatus = 
					InsertGroup(si, group.GroupParentID, group.SponsorID, group.PartnerID,
					group.LeadID, group.ExternalGroupID, group.Name, group.TestGroup,
					group.ExpectedMembership, group.GroupURL, null, group.Comments,
					ref groupID);
				group.GroupID = groupID;

				switch(groupStatus) 
				{
					case InsertGroupIntoDatabaseStatus.OK:
						break;
					case InsertGroupIntoDatabaseStatus.EXTERNAL_ORGANIZATION_ID_ALREADY_EXISTS:
					case InsertGroupIntoDatabaseStatus.MEMBER_HIERARCHY_ALREADY_EXIST:
					case InsertGroupIntoDatabaseStatus.REDIRECT_URL_ALREADY_EXISTS:
					case InsertGroupIntoDatabaseStatus.UNKNOWN_ERROR:
				}

				// set the group id to the event object
				_event.GroupID = group.GroupID;

				int eventID = int.MinValue;

				// insert the event
				InsertUpdateEventStatus eventStatus =
					InsertEvent(si, _event.GroupID, _event.EventTypeID, _event.CultureCode,
					_event.Name, _event.StartDate, _event.EndDate, _event.Active,
					_event.Comments, _event.Redirect, ref eventID);
				if(eventStatus == InsertUpdateEventStatus.EVENT_NAME_OR_REDIRECT_ALREADY_EXISTS) {
					eventStatus =
						InsertEvent(si, _event.GroupID, _event.EventTypeID, _event.CultureCode,
						_event.Name, _event.StartDate, _event.EndDate, _event.Active,
						_event.Comments, _event.Redirect + "rd", ref eventID);
				}

				_event.EventID = eventID;

				switch(eventStatus) 
				{
					case InsertUpdateEventStatus.OK:
					case InsertUpdateEventStatus.EVENT_NAME_OR_REDIRECT_ALREADY_EXISTS:
					case InsertUpdateEventStatus.INTERNAL_ERROR:
						break;
				}

				// insert the event participation id
				InsertEventParticipation(si, _event.EventID, sponsor.HierarchyID,
					ParticipationChannel.SponsorCreated.ParticipationChannelID, sponsor.CompleteName, ref eventParticipationID);

				// set the group id to the payment information
				paymentInformation.GroupID = group.GroupID;

				int postalAddressID = int.MinValue;
				int phoneNumberID = int.MinValue;
				int paymentInfoID = int.MinValue;

				InsertPayment(si, paymentInformation.GroupID, _event.EventID, paymentInformation.PaymentName,
					paymentInformation.OnBehalfOfName, paymentInformation.ShipToName,
					paymentInformation.PhoneNumber.FormattedPhoneNumber, paymentInformation.Ssn, 
					paymentInformation.PostalAddress.Address1, 
					paymentInformation.PostalAddress.Address2,
					paymentInformation.PostalAddress.City, paymentInformation.PostalAddress.ZipCode,
					paymentInformation.PostalAddress.CountryCode.Code, 
					paymentInformation.PostalAddress.SubDivisionCode,
					ref postalAddressID, 
					ref phoneNumberID,
					ref paymentInfoID);

				paymentInformation.PostalAddress.Id = postalAddressID;
				paymentInformation.PhoneNumber.ID = phoneNumberID;
				paymentInformation.PaymentInfoID = paymentInfoID;

				// Commit our transaction.
				si.Commit();
			} 
			catch 
			{
				// Rollback on error.
				si.Rollback(); 

				// throw exception
				throw;
			} 
			finally 
			{
				// Always close connection.
				si.Close();
			}
			return 0;
		}
*/

        internal eSubsGlobalUser[] LoadByFacebookID(int facebookID)
        {
            eSubsGlobalUser[] _event = null;

            bool useTransaction = false;
            string storedProcName = "es_get_member_by_facebook_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@facebook_id", DbType.Int32, DBValue.ToDBInt32(facebookID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                _event = new UnknownUser[dt.Rows.Count];
                // fill our objects
                try
                {
                    int index = 0;
                    foreach (DataRow row in dt.Rows)
                    {
                        _event[index] = LoadESubsUser(row);
                        index++;
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return _event;
        }

        internal UnknownUser LoadByEmailAndPassword(SqlInterface si, string emailAddress,
            int partnerID, string password, params bool[] performUpdatePassword)
        {
            string storedProcName = "es_get_member_by_email";
            bool useLocalTransaction = false;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
                useLocalTransaction = true;
            }

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@email", DbType.String, DBValue.ToDBString(emailAddress)));
                paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32(partnerID)));

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

               
                if (dt == null || dt.Rows.Count < 1)
                    return null;
                if (!dt.Columns.Contains("member_hierarchy_created_date"))
                    throw new ESubsGlobalException("There is no member_hierarchy_created_date in es_get_member_by_email stored procedure");

                DataRow[] rows = null;

                if (password == null || password.Trim() == string.Empty)
                {
                    // If password is null, take the most recent created user
                    rows = dt.Select("", string.Format("member_hierarchy_created_date DESC"));
                    if (rows == null || rows.Length < 1)
                        throw new ESubsGlobalException("Internal error in LoadByEmailAndPassword");
                    return LoadESubsUser(rows[0]);
                }

                rows = dt.Select(string.Format("password='{0}'", password), "member_hierarchy_created_date DESC");
                if (rows != null && rows.Length > 0)
                    return LoadESubsUser(rows[0]);
                else
                {
                    // If not existing a user having such password, take the most recent created user
                    // and update the password
                    rows = dt.Select("", string.Format("member_hierarchy_created_date DESC"));
                    if (rows == null || rows.Length < 1)
                        throw new ESubsGlobalException("Internal error in LoadByEmailAndPassword");

                    UnknownUser theUser = LoadESubsUser(rows[0]);

                    if (performUpdatePassword.Length > 0 && performUpdatePassword[0])
                    {
                        if (useLocalTransaction)
                        {
                            si.Open();
                            si.BeginTransaction();
                        }
                        UpdatePassword(si, theUser.ID, password);
                        UpdateUserPassword(si, theUser.ID, password);
                        if (useLocalTransaction)
                        {
                            si.Commit();
                        }
                    }

                    return theUser;
                }
            }
            catch (Exception ex)
            {
                // throw exception
                throw new ESubsGlobalException(ex.ToString());
            }
            finally
            {
                if (useLocalTransaction)
                    si.Close();
            }
        }

        internal UnknownUser LoadByEmailAndPasswordAndParentMemberHierarchyID(SqlInterface si, string emailAddress,
           int partnerID, int parent_member_hierarchyID, string password, params bool[] performUpdatePassword)
        {
            string storedProcName = "es_get_member_by_email";
            bool useLocalTransaction = false;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
                useLocalTransaction = true;
            }

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@email", DbType.String, DBValue.ToDBString(emailAddress)));
                paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32(partnerID)));

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);
                if (dt == null || dt.Rows.Count < 1)
                    return null;
                if (!dt.Columns.Contains("member_hierarchy_created_date"))
                    throw new ESubsGlobalException("There is no member_hierarchy_created_date in LoadByEmailAndPasswordAndParentMemberHierarchyID stored procedure");

                DataRow[] rows = null;

                if (password == null || password.Trim() == string.Empty)
                {
                    // If password is null, take the most recent created user
                    rows = dt.Select(string.Format("parent_member_hierarchy_id='{0}'", parent_member_hierarchyID), string.Format("member_hierarchy_created_date DESC"));
                    if (rows == null || rows.Length < 1)
                        return null;
                    return LoadESubsUser(rows[0]);
                }

                rows = dt.Select(string.Format("password='{0}' and parent_member_hierarchy_id='{1}'", password, parent_member_hierarchyID), "member_hierarchy_created_date DESC");
                if (rows != null && rows.Length > 0)
                    return LoadESubsUser(rows[0]);
                else
                {
                    // If not existing a user having such password, take the most recent created user
                    // and update the password
                    rows = dt.Select(string.Format("parent_member_hierarchy_id='{0}'", parent_member_hierarchyID), string.Format("member_hierarchy_created_date DESC"));
                    if (rows == null || rows.Length < 1)
                        return null;

                    UnknownUser theUser = LoadESubsUser(rows[0]);

                    if (performUpdatePassword.Length > 0 && performUpdatePassword[0])
                    {
                        if (useLocalTransaction)
                        {
                            si.Open();
                            si.BeginTransaction();
                        }
                        UpdatePassword(si, theUser.ID, password);
                        UpdateUserPassword(si, theUser.ID, password);
                        if (useLocalTransaction)
                        {
                            si.Commit();
                        }
                    }

                    return theUser;
                }
            }
            catch (Exception ex)
            {
                // throw exception
                throw new ESubsGlobalException(ex.ToString());
            }
            finally
            {
                if (useLocalTransaction)
                    si.Close();
            }
        }

        internal UnknownUser LoadUserByEmailAndPassword(SqlInterface si, string emailAddress,
                    int partnerID, string password, params bool[] performUpdatePassword)
        {
            string storedProcName = "es_get_user_by_email";
            bool useLocalTransaction = false;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
                useLocalTransaction = true;
            }

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@email", DbType.String, DBValue.ToDBString(emailAddress)));
                paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32(partnerID)));

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);
                if (dt == null || dt.Rows.Count < 1)
                    return null;
                if (!dt.Columns.Contains("member_hierarchy_created_date"))
                    throw new ESubsGlobalException("There is no member_hierarchy_created_date in es_get_member_by_email stored procedure");

                DataRow[] rows = null;

                if (password == null || password.Trim() == string.Empty)
                {
                    // If password is null, take the most recent created user
                    rows = dt.Select("", string.Format("member_hierarchy_created_date DESC"));
                    if (rows == null || rows.Length < 1)
                        throw new ESubsGlobalException("Internal error in LoadByEmailAndPassword");
                    return LoadESubsUser(rows[0]);
                }

                rows = dt.Select(string.Format("password='{0}'", password), "member_hierarchy_created_date DESC");
                if (rows != null && rows.Length > 0)
                    return LoadESubsUser(rows[0]);
                else
                {
                    // If not existing a user having such password, take the most recent created user
                    // and update the password
                    rows = dt.Select("", string.Format("member_hierarchy_created_date DESC"));
                    if (rows == null || rows.Length < 1)
                        throw new ESubsGlobalException("Internal error in LoadByEmailAndPassword");

                    UnknownUser theUser = LoadESubsUser(rows[0]);

                    if (performUpdatePassword.Length > 0 && performUpdatePassword[0])
                    {
                        if (useLocalTransaction)
                        {
                            si.Open();
                            si.BeginTransaction();
                        }
                        UpdatePassword(si, theUser.ID, password);
                        UpdateUserPassword(si, theUser.ID, password);
                        if (useLocalTransaction)
                        {
                            si.Commit();
                        }
                    }

                    return theUser;
                }
            }
            catch (Exception ex)
            {
                // throw exception
                throw new ESubsGlobalException(ex.ToString());
            }
            finally
            {
                if (useLocalTransaction)
                    si.Close();
            }
        }


        internal CampaignStatus InsertMemberAndMemberHierachy(SqlInterface si, eSubsGlobalUser user, bool insertUser)
        {
            bool internalTransaction = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
                si.Open();
            }
            else
            {
                internalTransaction = false;
            }

            try
            {

                if (internalTransaction)
                {
                    si.BeginTransaction();
                }

                //BEGIN TO CREATE USER: IF USER ALREADY EXIST, RETRIEVE THE USER INFORMATION. OTHERWISE, INSERT THE NEW USER.
                InsertMemberIntoDatabaseReturnValue memberStatus = InsertMemberIntoDatabaseReturnValue.UNKNOWN_ERROR;
                UserIntoDatabaseReturnValue userStatus = UserIntoDatabaseReturnValue.UNKNOWN_ERROR;

                // Get User from ExternalMemberID.
                UnknownUser theUser = null;
                bool memberExisting = false;

                if (user.IsMemberIDRetrieved)
                {
                    memberStatus = InsertMemberIntoDatabaseReturnValue.OK;
                    memberExisting = true;
                    if (user.UserID != int.MinValue)
                        insertUser = false;
                }
                else
                {
                    if (user.ExternalMemberID != null)
                    {
                        theUser = eSubsGlobalUser.LoadByExternalMemberID(user.PartnerID, user.ExternalMemberID);
                        if (theUser != null)
                        {
                            memberStatus = InsertMemberIntoDatabaseReturnValue.OK;
                            user.ID = theUser.ID;
                            user.HierarchyID = theUser.HierarchyID;
                            memberExisting = true;
                            if (theUser.UserID != int.MinValue)
                            {
                                user.UserID = theUser.UserID;
                                insertUser = false;
                            }
                        }
                    }
                    // Cannot get User from ExternalMemberID.
                    // Using Email to get the User.
                    if (!memberExisting)
                    {
                        bool[] DoUpdatePassword = { true };
                        UnknownUser emailUser = LoadByEmailAndPasswordAndParentMemberHierarchyID(si, user.EmailAddress, user.PartnerID, user.HierarchyParentID, user.Password, DoUpdatePassword);
                        if (emailUser != null)
                        {
                            memberStatus = InsertMemberIntoDatabaseReturnValue.OK;
                            user.ID = emailUser.ID;
                            memberExisting = true;
                            if (emailUser.UserID != int.MinValue)
                            {
                                user.UserID = emailUser.UserID;
                                insertUser = false;
                            }
                        }
                    }

                    if (!memberExisting && insertUser)
                    {
                        bool[] DoUpdatePassword = { false };
                        UnknownUser emailUser = LoadByEmailAndPassword(si, user.EmailAddress, user.PartnerID, user.Password, DoUpdatePassword);
                        if (emailUser != null)
                        {
                            if (emailUser.UserID != int.MinValue)
                            {
                                user.UserID = emailUser.UserID;
                                insertUser = false;
                            }
                        }
                    }
                }

                // Cannot get User from ExternalMemberID neither from Email.
                // Create a new user
                if (insertUser)
                {
                    int user_id = int.MinValue;
                    userStatus = InsertOnlyUser(si, user.Culture.CultureCode, (int)user.OptInStatusID, user.EmailAddress, user.FirstName, user.LastName, user.EmailAddress,
                        user.PartnerID, user.Password, user.ID, user.CoppaMonth, user.CoppaYear, user.AgreeToTermServices, ref user_id);
                    if (userStatus != UserIntoDatabaseReturnValue.OK)
                    {
                        throw new Exception("Unable to create user");
                    }
                    user.UserID = user_id;
                }

                if (!memberExisting)
                {
                    int memberID = int.MinValue;
                    memberStatus = InsertOnlyMember(si, user.Culture.CultureCode, (int)user.OptInStatusID, user.FirstName, user.MiddleName,
                        user.LastName, user.Greeting, user.Gender, user.EmailAddress, user.ParentFirstName, user.ParentLastName, user.ExternalMemberID,
                        user.PartnerID, user.Password, user.Bounced, user.Comments, user.CreationChannel.ID, user.LeadID, user.FacebookID, user.UserID, ref memberID);
                    user.ID = memberID;
                }                

                int HierarchyID = int.MinValue;
                if (memberStatus != InsertMemberIntoDatabaseReturnValue.OK)
                {
                    // Cannot insert a member.
                    if (internalTransaction)
                        si.Rollback();

                    if (memberStatus == InsertMemberIntoDatabaseReturnValue.EMAIL_ADDRESS_PARTNER_ID_ALREADY_EXISTS)
                        return CampaignStatus.EMAIL_ADDRESS_PARTNER_ID_ALREADY_EXISTS;
                    else if (memberStatus == InsertMemberIntoDatabaseReturnValue.EXTERNAL_MEMBER_ID_ALREADY_EXISTS)
                        return CampaignStatus.EXTERNAL_MEMBER_ID_ALREADY_EXISTS;
                    else
                        return CampaignStatus.UNKNOWN_ERROR;
                }
                else
                {
                    // Insert new member hierachy.
                    memberStatus = InsertMemberHierachy(si, user.HierarchyParentID, user.CreationChannel.ID, user.ID, ref HierarchyID);
                    if (memberStatus != InsertMemberIntoDatabaseReturnValue.OK)
                    {
                        if (internalTransaction)
                            si.Rollback();

                        if (memberStatus == InsertMemberIntoDatabaseReturnValue.EXIST_MEMBER_HIERACHY_ID_WITH_MEMBER_ID_AND_PARENT_MEMBER_HIERARCHY_ID)
                        {
                            user.HierarchyID = HierarchyID;
                            return CampaignStatus.EXIST_MEMBER_HIERACHY_ID_WITH_MEMBER_ID_AND_PARENT_MEMBER_HIERARCHY_ID;
                        }

                        return CampaignStatus.UNKNOWN_ERROR;
                    }
                }

                if (memberStatus == InsertMemberIntoDatabaseReturnValue.OK)
                {
                    user.HierarchyID = HierarchyID;
                    if (internalTransaction)
                        si.Commit();
                }
                else
                {
                    if (internalTransaction)
                        si.Rollback();

                    if (memberStatus == InsertMemberIntoDatabaseReturnValue.EMAIL_ADDRESS_PARTNER_ID_ALREADY_EXISTS
                        || memberStatus == InsertMemberIntoDatabaseReturnValue.EXTERNAL_MEMBER_ID_ALREADY_EXISTS)
                        return CampaignStatus.EMAIL_ADDRESS_PARTNER_ID_ALREADY_EXISTS;
                    else
                        return CampaignStatus.UNKNOWN_ERROR;

                }
            }
            catch (Exception ex)
            {
                if (internalTransaction)
                    si.Rollback();

                throw new ESubsGlobalException("", ex, user);
            }
            finally
            {
                if (internalTransaction)
                    si.Close();
            }

            return CampaignStatus.OK;
        }

        internal CampaignStatus InsertCampaignTransactionController(eSubsGlobalUser eSubUser,
            Event evnt, Group grp, ESubsGlobal.Payment.PaymentInfo paymentInfo, ref EventParticipation eventParticipation)
        {
            return this.InsertCampaignTransactionController(eSubUser, evnt, grp, paymentInfo, int.MinValue, int.MinValue, false, ref eventParticipation);
        }


        internal CampaignStatus InsertCampaignTransactionController(eSubsGlobalUser eSubUser,
            Event evnt, Group grp, ESubsGlobal.Payment.PaymentInfo paymentInfo, int coppaMonth, int coppaYear, 
            bool agreeToTermsServices, ref EventParticipation eventParticipation)
        {
            Sponsor user = eSubUser as Sponsor;
            if (user == null || evnt == null || grp == null || paymentInfo == null)
            {
                return CampaignStatus.INTERNAL_ERROR;
            }


            SqlInterface si = null;
            try
            {
                si = new SqlInterface(dataProvider, connectionString);
                si.Open();
                si.BeginTransaction();

                //BEGIN TO CREATE USER: IF USER ALREADY EXIST, RETRIEVE THE USER INFORMATION. OTHERWISE, INSERT THE NEW USER.
                CampaignStatus campStatus = InsertMemberAndMemberHierachy(si, user, true);
                if (campStatus != CampaignStatus.OK)
                {
                    si.Rollback();
                    return campStatus;
                }

                // INSERT GROUP. IF GROUP ALREADY EXIST RETURN ERROR. OTHERWISE INSERT THE NEW GROUP.
                grp.SponsorID = user.HierarchyID;
                InsertGroupIntoDatabaseStatus groupStatus = InsertGroupIntoDatabaseStatus.UNKNOWN_ERROR;
                int groupID = int.MinValue;

                groupStatus = InsertGroup(si, grp.GroupParentID, grp.SponsorID, grp.PartnerID, grp.LeadID, grp.ExternalGroupID,
                    grp.Name, grp.TestGroup, grp.ExpectedMembership, grp.GroupURL, grp.GroupURL, grp.Comments, grp.ExternalURL,
                    ref groupID);

                if (groupStatus != InsertGroupIntoDatabaseStatus.OK)
                {
                    si.Rollback();

                    if (groupStatus == InsertGroupIntoDatabaseStatus.SPONSORID_ALREADY_EXISTS ||
                        groupStatus == InsertGroupIntoDatabaseStatus.EXTERNAL_ORGANIZATION_ID_ALREADY_EXISTS)
                    {
                        return CampaignStatus.GROUP_ALREADY_EXISTS;
                    }
                    else
                        return CampaignStatus.UNKNOWN_ERROR;
                }
                else
                    grp.GroupID = groupID;

                // INSERT EVENT.
                int eventID = int.MinValue;
                evnt.GroupID = grp.GroupID;
                //evnt.Redirect = grp.GroupURL;
                InsertUpdateEventStatus eventStatus = InsertUpdateEventStatus.INTERNAL_ERROR;//evnt.InsertEventInDatabase(si);
                eventStatus =
                    InsertEvent(si, evnt.GroupID, evnt.EventStatusID, evnt.CultureCode, evnt.Name, evnt.StartDate,
                    evnt.EndDate, evnt.Active, evnt.Comments, evnt.Redirect, evnt.SalesRep, evnt.ProfitGroupID, evnt.ProfitCalculated, evnt.EventTypeID, evnt.DateOfEvent, evnt.HumeurRepresentative, ref eventID);
                if (eventStatus != InsertUpdateEventStatus.OK)
                {
                    si.Rollback();
                    if (eventStatus == InsertUpdateEventStatus.EVENT_NAME_OR_REDIRECT_ALREADY_EXISTS)
                    {
                        return CampaignStatus.NAME_OR_REDIRECT_ALREADY_EXISTS;
                    }
                    else
                        return CampaignStatus.UNKNOWN_ERROR;
                }
                else
                {
                    evnt.EventID = eventID;
                    // CREATE EVENT PARTICIPATION
                    eventParticipation = new EventParticipation(evnt, user, ParticipationChannel.SponsorCreated, coppaYear, coppaMonth, agreeToTermsServices);
                    eventParticipation.Salutation = user.CompleteName;
                    int eventParticipationID = int.MinValue;

                    EventParticipationStatus eventParStatus =
                        InsertEventParticipation(si, eventParticipation.EventID, eventParticipation.MemberHierarchyID,
                        eventParticipation.ParticipationChannel.ParticipationChannelID, eventParticipation.Salutation,
                        eventParticipation.CoppaMonth, eventParticipation.CoppaYear, eventParticipation.AgreeToTermServices,
                        eventParticipation.HolidayReminders, ref eventParticipationID);

                    if (eventParStatus != EventParticipationStatus.OK)
                    {
                        si.Rollback();
                        if (eventParStatus == EventParticipationStatus.EVENT_PARTICIPATION_ALREADY_EXISTS)
                            return CampaignStatus.EVENT_PARTICIPATION_ALREADY_EXISTS;
                        else
                            return CampaignStatus.UNKNOWN_ERROR;
                    }
                    // Insert Payment Info.
                    eventParticipation.EventParticipationID = eventParticipationID;
                    paymentInfo.EventID = evnt.EventID;
                    paymentInfo.GroupID = grp.GroupID;
                    int postalAddID, phoneNumID, paymentInfoID;
                    postalAddID = phoneNumID = paymentInfoID = int.MinValue;

                    if (paymentInfo.PostalAddress != null)
                    {
                        if (InsertPayment(si, paymentInfo.GroupID, paymentInfo.EventID, paymentInfo.PaymentName, paymentInfo.OnBehalfOfName,
                            paymentInfo.ShipToName, paymentInfo.PhoneNumber.FormattedPhoneNumber, paymentInfo.Ssn, paymentInfo.PostalAddress.Address1,
                            paymentInfo.PostalAddress.Address2, paymentInfo.PostalAddress.City, paymentInfo.PostalAddress.ZipCode,
                            paymentInfo.PostalAddress.CountryCode.Code, paymentInfo.PostalAddress.SubDivisionCode, paymentInfo.PostalAddress.IsValidated, ref postalAddID, ref phoneNumID,
                            ref paymentInfoID) == false)
                        {
                            si.Rollback();
                            return CampaignStatus.INSERT_PAYMENT_INFO_ERROR;
                        }
                    }
                    else
                    {
                        if (InsertPayment(si, paymentInfo.GroupID, paymentInfo.EventID, paymentInfo.PaymentName, paymentInfo.PhoneNumber.FormattedPhoneNumber, ref postalAddID, ref phoneNumID,
                            ref paymentInfoID) == false)
                        {
                            si.Rollback();
                            return CampaignStatus.INSERT_PAYMENT_INFO_ERROR;
                        }
                    }

                    if (postalAddID != int.MinValue)
                        paymentInfo.PostalAddress.Id = postalAddID;
                    paymentInfo.PhoneNumber.ID = phoneNumID;
                    paymentInfo.PaymentInfoID = paymentInfoID;
                    si.Commit();
                }
            }
            catch (Exception ex)
            {
                si.Rollback();
                throw new SqlDataException("Error in InsertCampaignTransactionController", ex);
            }
            finally
            {
                si.Close();
            }

            return CampaignStatus.OK;
        }


        internal void InsertPaymentsTransactionController(
                ESubsGlobal.Payment.PaymentPeriod paymentPeriod,
                ArrayList payments
            )
        {

            SqlInterface si = null;
            try
            {
                si = new SqlInterface(dataProvider, connectionString);
                si.Open();
                si.BeginTransaction();

                InsertPaymentPeriod(paymentPeriod, si);

                foreach (object[] paymentObject in payments)
                {
                    Payment.Payment payment = (Payment.Payment)paymentObject[0];
                    ArrayList paymentItems = (ArrayList)paymentObject[1];

                    payment.PaymentPeriodId = paymentPeriod.PaymentPeriodId;
                    InsertPayment(payment, si);

                    foreach (PaymentItem paymentItem in paymentItems)
                    {
                        paymentItem.PaymentId = payment.PaymentId;
                        InsertPaymentItem(paymentItem, si);
                    }
                }

                si.Rollback();
                //si.Commit();

            }
            catch (Exception ex)
            {
                si.Rollback();
                throw new SqlDataException("Error in InsertCampaignTransactionController", ex);
            }
            finally
            {
                si.Close();
            }
        }



        internal Hashtable InsertPaymentsTransactionControllerFromCheckSystem(
            ESubsGlobal.Payment.PaymentPeriod paymentPeriod,
            ArrayList payments
            )
        {

            SqlInterface si = null;
            Hashtable listPayment = new Hashtable();
            try
            {
                si = new SqlInterface(dataProvider, connectionString);
                si.Open();
                si.BeginTransaction();

             /*  if (InsertPaymentPeriod(paymentPeriod, si) < 1)
                {
                    si.Rollback();
                    return null;
                }
                */
                foreach (object[] paymentObject in payments)
                {
                    Payment.Payment payment = (Payment.Payment)paymentObject[0];
                    ArrayList paymentItems = (ArrayList)paymentObject[1];
                    PaymentExceptionType[] paymentExceptionTypeCollection = (PaymentExceptionType[])paymentObject[2];
                    ESubsGlobal.Payment.PaymentPaymentStatus paymentPaymentStatus = (ESubsGlobal.Payment.PaymentPaymentStatus)paymentObject[3];
                    ArrayList pPaymentStatusList = (ArrayList)paymentObject[4];
                    int accountId = Convert.ToInt32(paymentObject[5]);
                    // Insert Payment and payment item
                    payment.PaymentPeriodId = Convert.ToInt32(System.Web.HttpContext.Current.Session["Period"]);
                    if (InsertPayment(payment, si) < 1)
                    {
                        si.Rollback();
                        return null;
                    }
                    listPayment[accountId] = payment.PaymentId;
                    foreach (PaymentItem paymentItem in paymentItems)
                    {
                        paymentItem.PaymentId = payment.PaymentId;
                        if (InsertPaymentItem(paymentItem, si) < 1)
                        {
                            si.Rollback();
                            return null;
                        }
                    }

                    // Insert new Payment_Payment_Status for previous payment whose the profit is less than $20
                    if (pPaymentStatusList != null && pPaymentStatusList.Count > 0)
                    {
                        for (int m = 0; m < pPaymentStatusList.Count; m++)
                        {
                            PaymentPaymentStatus ppaymentStatus = (PaymentPaymentStatus)pPaymentStatusList[m];
                            ppaymentStatus.CreateDate = DateTime.Now;
                            if (InsertPaymentPaymentStatus(ppaymentStatus, si) < 1)
                            {
                                si.Rollback();
                                return null;
                            }
                        }
                    }

                    paymentPaymentStatus.PaymentId = payment.PaymentId;
                    if (InsertPaymentPaymentStatus(paymentPaymentStatus, si) < 1)
                    {
                        si.Rollback();
                        return null;
                    }
                    // Insert Payment Exception
                    if (paymentExceptionTypeCollection != null && paymentExceptionTypeCollection.Length > 0)
                    {
                        for (int i = 0; i < paymentExceptionTypeCollection.Length; i++)
                        {
                            paymentExceptionTypeCollection[i].PaymentId = payment.PaymentId;
                            if (InsertPaymentExceptionType(paymentExceptionTypeCollection[i], si) < 1)
                            {
                                si.Rollback();
                                return null;
                            }
                        }
                    }

                }

                //si.Rollback();
                si.Commit();

            }
            catch (Exception ex)
            {
                si.Rollback();
                throw new SqlDataException("Error in InsertCampaignTransactionController", ex);
            }
            finally
            {
                si.Close();
            }
            return listPayment;
        }
        internal PaymentGroupPaymentInfoStatus UpdatePaymentGroupPaymentInfoBK(Payment.PaymentPaymentStatus pps, GroupGroupStatus ggs,
            Payment.PaymentInfo pi, Payment.Payment p, bool isPaymentToGroup)
        {
            SqlInterface si = null;
            try
            {
                si = new SqlInterface(dataProvider, connectionString);
                si.Open();
                si.BeginTransaction();
                if (pps != null && UpdatePaymentPaymentStatus(pps) != 1)
                {
                    si.Rollback();
                    return PaymentGroupPaymentInfoStatus.UPDATE_PAYMENT_STATUS_ERROR;
                }
                if (ggs != null && UpdateGroupGroupStatus(ggs) != 1)
                {
                    si.Rollback();
                    return PaymentGroupPaymentInfoStatus.UPDATE_GROUP_STATUS_ERROR;
                }
                int postalAddressID = 0;
                int phoneNumberID = 0;
                int paymentInfoID = int.MinValue;
                if (pi != null)
                {
                    if (isPaymentToGroup && pi.EventID != int.MinValue && pi.GroupID != int.MinValue)
                        InsertPayment(pi.GroupID, pi.EventID, pi.PaymentName, pi.OnBehalfOfName, pi.ShipToName, pi.PhoneNumber.ToString(), pi.Ssn, pi.PostalAddress.Address1, pi.PostalAddress.Address2, pi.PostalAddress.City, pi.PostalAddress.ZipCode, pi.PostalAddress.CountryCode.Code, pi.PostalAddress.SubDivisionCode, 1, ref postalAddressID, ref phoneNumberID, ref paymentInfoID);
                    else if (!isPaymentToGroup)
                    {
                        // es_create_partner_payment_info
                    }
                }

                if (paymentInfoID == int.MinValue)
                {
                    si.Rollback();
                    return PaymentGroupPaymentInfoStatus.UPDATE_PAYMENT_STATUS_ERROR;
                }
                p.PaymentInfoId = paymentInfoID;
                if (UpdatePayment(p, si) != 1)
                {
                    si.Rollback();
                    return PaymentGroupPaymentInfoStatus.UPDATE_PAYMENT_ERROR;
                }
                si.Commit();
                return PaymentGroupPaymentInfoStatus.OK;

            }
            catch (Exception ex)
            {
                si.Rollback();
                throw new SqlDataException("UpdatePaymentGroupPaymentInfo", ex);
            }
            finally
            {
                si.Close();
            }

        }



        internal PaymentGroupPaymentInfoStatus UpdatePaymentGroupPaymentInfo(Payment.PaymentPaymentStatus pps, GroupGroupStatus ggs,
            Payment.Payment p)
        {
            SqlInterface si = null;
            try
            {
                si = new SqlInterface(dataProvider, connectionString);
                si.Open();
                si.BeginTransaction();
                if (pps != null && UpdatePaymentPaymentStatus(pps) < 1)
                {
                    si.Rollback();
                    return PaymentGroupPaymentInfoStatus.UPDATE_PAYMENT_STATUS_ERROR;
                }
                if (ggs != null)
                {
                    if (UpdateGroupGroupStatus(ggs) < 1)
                    {
                        si.Rollback();
                        return PaymentGroupPaymentInfoStatus.UPDATE_GROUP_STATUS_ERROR;
                    }
                    switch (ggs.GroupStatusId)
                    {
                        case (int)ESubsGlobal.GroupStatusCategory.Fraud:
                        case (int)ESubsGlobal.GroupStatusCategory.Closed:
                        case (int)ESubsGlobal.GroupStatusCategory.OnHold:
                            ESubsGlobal.Payment.PaymentExceptionType pyExcType = new PaymentExceptionType(p.PaymentId, (int)ESubsGlobal.Payment.ExceptionTypeCategory.InvalidGroupsStatus, DateTime.Now);
                            if (InsertPaymentExceptionType(pyExcType, si) < 1)
                            {
                                si.Rollback();
                                return PaymentGroupPaymentInfoStatus.UPDATE_GROUP_STATUS_ERROR;
                            }
                            break;
                        default:
                            break;
                    }
                }
                if (UpdatePayment(p, si) < 1)
                {
                    si.Rollback();
                    return PaymentGroupPaymentInfoStatus.UPDATE_PAYMENT_ERROR;
                }
                si.Commit();
                return PaymentGroupPaymentInfoStatus.OK;

            }
            catch (Exception ex)
            {
                si.Rollback();
                throw new SqlDataException("UpdatePaymentGroupPaymentInfo", ex);
            }
            finally
            {
                si.Close();
            }

        }


        internal PaymentAddressInfoStatus UpdatePaymentAddressInfo(ESubsGlobal.Common.PostalAddress postalAddress, Payment.Payment payment, Payment.PaymentInfo paymentInfoOld, PaymentInfo paymentInfoNew)
        {
            SqlInterface si = null;
            try
            {
                si = new SqlInterface(dataProvider, connectionString);
                si.Open();
                si.BeginTransaction();


                ESubsGlobal.Common.PostalAddressStatus postalAddressStatus = (ESubsGlobal.Common.PostalAddressStatus)postalAddress.Insert();

                if (postalAddressStatus != PostalAddressStatus.Ok)
                {
                    si.Rollback();
                    return PaymentAddressInfoStatus.UPDATE_POSTAL_ADDRESS_STATUS_ERROR;
                }
                else
                {
                    paymentInfoNew.PostalAddressID = postalAddress.Id;
                }

                //UPDATE PAYMENT INFO By cretaing a New One
                ESubsGlobal.Payment.PaymentInfoStatus paymentInfoStatus = (ESubsGlobal.Payment.PaymentInfoStatus)paymentInfoNew.Insert();

                if (paymentInfoStatus != PaymentInfoStatus.Ok)
                {
                    si.Rollback();
                    return PaymentAddressInfoStatus.UPDATE_PAYMENT_INFO_NEW_ERROR;
                }
                else
                {
                    payment.PaymentInfoId = paymentInfoNew.PaymentInfoID;
                }

                //update payment with new payment info\
                Payment._PaymentStatus paymentStatus = (ESubsGlobal.Payment._PaymentStatus)payment.Update();

                if (paymentStatus != Payment._PaymentStatus.Ok)
                {
                    si.Rollback();
                    return PaymentAddressInfoStatus.UPDATE_PAYMENT_STATUS_ERROR;
                }

                //set old payment info to Inactive
                paymentInfoStatus = (ESubsGlobal.Payment.PaymentInfoStatus)paymentInfoOld.Update();

                if (paymentInfoStatus != PaymentInfoStatus.Ok)
                {
                    si.Rollback();
                    return PaymentAddressInfoStatus.UPDATE_PAYMENT_INFO_OLD_ERROR;
                }

                si.Commit();
                return PaymentAddressInfoStatus.OK;

            }
            catch (Exception ex)
            {
                si.Rollback();
                throw new SqlDataException("UpdatePaymentGroupPaymentInfo", ex);
            }
            finally
            {
                si.Close();
            }

        }


        #endregion

        #region Relaunch Campaign
        public int GetNewEventParticipationID(int eventParticipationID, int memberHierarchyID)
        {
            bool useTransaction = false;
            string storedProcName = "es_get_new_event_participation_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            int returnValue = int.MinValue;
            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_participation_id", DbType.Int32, DBValue.ToDBInt32(eventParticipationID)));
                paramCol.Add(new SqlDataParameter("@member_hierarchy_id", DbType.String, DBValue.ToDBInt32(memberHierarchyID)));
                paramCol.Add(new SqlDataParameter("@return", DbType.Int32, ParameterDirection.ReturnValue));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                returnValue = DBValue.ToInt32(paramCol["@return"].Value);

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return returnValue;

        }

        public int RelaunchCampaign(Int32 event_id, String culture_code)
        {
            bool useTransaction = false;
            string storedProcName = "es_relaunch_campaign";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            int returnValue = int.MinValue;
            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(event_id)));
                paramCol.Add(new SqlDataParameter("@culture_code", DbType.String, DBValue.ToDBString(culture_code)));
                paramCol.Add(new SqlDataParameter("@return", DbType.Int32, ParameterDirection.ReturnValue));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                returnValue = DBValue.ToInt32(paramCol["@return"].Value);

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return returnValue;
        }
        #endregion        

        #region PaymentPaymentStatus Methods

        private PaymentPaymentStatus LoadPaymentPaymentStatus(DataRow row)
        {
            PaymentPaymentStatus paymentPaymentStatus = new PaymentPaymentStatus();

            // Store database values into our business object
            paymentPaymentStatus.PaymentId = DBValue.ToInt32(row["payment_id"]);
            paymentPaymentStatus.PaymentStatusId = DBValue.ToInt32(row["payment_status_id"]);
            paymentPaymentStatus.CreateDate = DBValue.ToDateTime(row["create_date"]);

            // return the filled object
            return paymentPaymentStatus;
        }

        public PaymentPaymentStatus[] GetPaymentPaymentStatuss()
        {
            return GetPaymentPaymentStatuss(null);
        }

        private PaymentPaymentStatus[] GetPaymentPaymentStatuss(SqlInterface si)
        {
            PaymentPaymentStatus[] paymentPaymentStatuss = null;

            string storedProcName = "es_get_payment_payment_statuss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    paymentPaymentStatuss = new PaymentPaymentStatus[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            paymentPaymentStatuss[i] = LoadPaymentPaymentStatus(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return paymentPaymentStatuss;
        }

        public PaymentPaymentStatus GetPaymentPaymentStatusByID(int id)
        {
            return GetPaymentPaymentStatusByID(id, null);
        }

        private PaymentPaymentStatus GetPaymentPaymentStatusByID(int id, SqlInterface si)
        {
            PaymentPaymentStatus paymentPaymentStatus = null;

            string storedProcName = "es_get_payment_payment_status_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Payment_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        paymentPaymentStatus = LoadPaymentPaymentStatus(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return paymentPaymentStatus;
        }

        public PaymentPaymentStatus GetLastPaymentPaymentStatusByPaymentID(int id)
        {
            return GetLastPaymentPaymentStatusByPaymentID(id, null);
        }

        private PaymentPaymentStatus GetLastPaymentPaymentStatusByPaymentID(int id, SqlInterface si)
        {
            PaymentPaymentStatus paymentPaymentStatus = null;

            string storedProcName = "es_get_payment_payment_status_by_id_last";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Payment_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        paymentPaymentStatus = LoadPaymentPaymentStatus(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return paymentPaymentStatus;
        }

        public int InsertPaymentPaymentStatus(PaymentPaymentStatus paymentPaymentStatus)
        {
            return InsertPaymentPaymentStatus(paymentPaymentStatus, null);
        }

        private int InsertPaymentPaymentStatus(PaymentPaymentStatus paymentPaymentStatus, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_insert_payment_payment_status";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Payment_id", DbType.Int32, DBValue.ToDBInt32(paymentPaymentStatus.PaymentId)));
                paramCol.Add(new SqlDataParameter("@Payment_status_id", DbType.Int32, DBValue.ToDBInt32(paymentPaymentStatus.PaymentStatusId)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(paymentPaymentStatus.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    paymentPaymentStatus.PaymentId = DBValue.ToInt32(paramCol["@Payment_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }

        public int UpdatePaymentPaymentStatus(PaymentPaymentStatus paymentPaymentStatus)
        {
            return UpdatePaymentPaymentStatus(paymentPaymentStatus, null);
        }

        private int UpdatePaymentPaymentStatus(PaymentPaymentStatus paymentPaymentStatus, SqlInterface si)
        {
            int result = -1;

            PaymentPaymentStatus pps = PaymentPaymentStatus.GetLastPaymentPaymentStatusByPaymentID(paymentPaymentStatus.PaymentId);
            if (pps != null)
            {
                result = 1;
                if (pps.PaymentStatusId != paymentPaymentStatus.PaymentStatusId)
                {
                    paymentPaymentStatus.CreateDate = DateTime.Now;
                    result = InsertPaymentPaymentStatus(paymentPaymentStatus, si);
                }
            }

            //			string storedProcName = "es_update_payment_payment_status";
            //
            //			// if the SqlInterface is passed as argument it means that 
            //			// this call should be applied to an already open connection
            //			// and the method which call this method is using transaction
            //			bool newConnection = true;
            //			if (si == null) {
            //				si = new SqlInterface(dataProvider, connectionString);
            //			} else {
            //				newConnection = false;
            //			}
            //
            //			try {
            //				// declare stored procedure parameters
            //				SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
            //				paramCol.Add(new SqlDataParameter("@Payment_id", DbType.Int32, DBValue.ToDBInt32(paymentPaymentStatus.PaymentId)));
            //				paramCol.Add(new SqlDataParameter("@Payment_status_id", DbType.Int32, DBValue.ToDBInt32(paymentPaymentStatus.PaymentStatusId)));
            //				paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(paymentPaymentStatus.CreateDate)));
            //
            //		
            //				if (newConnection) {
            //					// open the connection
            //					si.Open();
            //				}
            //
            //				result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);
            //
            //				if (result > 0) {
            //					return result;
            //				}
            //				else {
            //					throw new SqlDataException("Error updating database calling " + storedProcName);
            //				}
            //
            //
            //			} finally {
            //				if(newConnection) {
            //					// Always close connection.
            //					si.Close();
            //				}
            //			}
            return result;
        }

        internal bool InsertPaymentPaymentStatusInCheckSystem(ESubsGlobal.Payment.PaymentPaymentStatus[] ppaymentStatus)
        {
            SqlInterface si = null;
            try
            {
                si = new SqlInterface(dataProvider, connectionString);
                si.Open();
                si.BeginTransaction();
                for (int i = 0; i < ppaymentStatus.Length; i++)
                {
                    if (InsertPaymentPaymentStatus(ppaymentStatus[i], si) < 1)
                    {
                        si.Rollback();
                        return false;
                    }
                }
                //si.Rollback();
                si.Commit();

            }
            catch (Exception ex)
            {
                si.Rollback();
                throw new SqlDataException("Error in InsertPaymentPaymentStatusInCheckSystem", ex);
            }
            finally
            {
                si.Close();
            }

            return true;
        }

        internal bool UpdatePaymentsAfterGenerateSolutranFile(ESubsGlobal.Payment.PaymentPaymentStatus[] ppaymentStatus, Payment.Payment[] pyms)
        {
            SqlInterface si = null;
            try
            {
                si = new SqlInterface(dataProvider, connectionString);
                si.Open();
                si.BeginTransaction();
                for (int i = 0; i < ppaymentStatus.Length; i++)
                {
                    if (InsertPaymentPaymentStatus(ppaymentStatus[i], si) < 1)
                    {
                        si.Rollback();
                        return false;
                    }
                }
                for (int i = 0; i < pyms.Length; i++)
                {
                    if (UpdatePayment(pyms[i], si) < 1)
                    {
                        si.Rollback();
                        return false;
                    }
                }
                si.Commit();

            }
            catch (Exception ex)
            {
                si.Rollback();
                throw new SqlDataException("Error in UpdatePaymentsAfterGenerateSolutranFile", ex);
            }
            finally
            {
                si.Close();
            }

            return true;
        }

        #endregion

        #region PaymentStatus Methods

        private PaymentStatus LoadPaymentStatus(DataRow row)
        {
            PaymentStatus paymentStatus = new PaymentStatus();

            // Store database values into our business object
            paymentStatus.PaymentStatusId = DBValue.ToInt32(row["payment_status_id"]);
            paymentStatus.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return paymentStatus;
        }

        public PaymentStatus[] GetPaymentStatuss()
        {
            return GetPaymentStatuss(null);
        }

        private PaymentStatus[] GetPaymentStatuss(SqlInterface si)
        {
            PaymentStatus[] paymentStatuss = null;

            string storedProcName = "es_get_payment_statuss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    paymentStatuss = new PaymentStatus[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            paymentStatuss[i] = LoadPaymentStatus(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return paymentStatuss;
        }


        public PaymentStatus GetPaymentStatusByID(int id)
        {
            return GetPaymentStatusByID(id, null);
        }

        private PaymentStatus GetPaymentStatusByID(int id, SqlInterface si)
        {
            PaymentStatus paymentStatus = null;

            string storedProcName = "es_get_payment_status_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Payment_status_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        paymentStatus = LoadPaymentStatus(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return paymentStatus;
        }

        public PaymentStatus GetPaymentStatusByPaymentID(int id)
        {
            return GetPaymentStatusByPaymentID(id, null);
        }

        private PaymentStatus GetPaymentStatusByPaymentID(int id, SqlInterface si)
        {
            PaymentStatus paymentStatus = null;

            string storedProcName = "es_get_payment_status_by_payment_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Payment_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        paymentStatus = LoadPaymentStatus(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return paymentStatus;
        }


        public int InsertPaymentStatus(PaymentStatus paymentStatus)
        {
            return InsertPaymentStatus(paymentStatus, null);
        }

        private int InsertPaymentStatus(PaymentStatus paymentStatus, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_insert_payment_status";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Payment_status_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(paymentStatus.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    paymentStatus.PaymentStatusId = DBValue.ToInt32(paramCol["@Payment_status_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdatePaymentStatus(PaymentStatus paymentStatus)
        {
            return UpdatePaymentStatus(paymentStatus, null);
        }

        private int UpdatePaymentStatus(PaymentStatus paymentStatus, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_update_payment_status";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Payment_status_id", DbType.Int32, DBValue.ToDBInt32(paymentStatus.PaymentStatusId)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(paymentStatus.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }

        #endregion

        #region GroupStatus Methods

        private GroupStatus LoadGroupStatus(DataRow row)
        {
            GroupStatus groupStatus = new GroupStatus();

            // Store database values into our business object
            groupStatus.GroupStatusId = DBValue.ToInt32(row["group_status_id"]);
            groupStatus.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return groupStatus;
        }

        public GroupStatus[] GetGroupStatuss()
        {
            return GetGroupStatuss(null);
        }

        private GroupStatus[] GetGroupStatuss(SqlInterface si)
        {
            GroupStatus[] groupStatuss = null;

            string storedProcName = "es_get_group_statuss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    groupStatuss = new GroupStatus[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            groupStatuss[i] = LoadGroupStatus(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return groupStatuss;
        }


        public GroupStatus GetGroupStatusByID(int id)
        {
            return GetGroupStatusByID(id, null);
        }

        private GroupStatus GetGroupStatusByID(int id, SqlInterface si)
        {
            GroupStatus groupStatus = null;

            string storedProcName = "es_get_group_status_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Group_status_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        groupStatus = LoadGroupStatus(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return groupStatus;
        }

        public GroupStatus GetGroupStatusByGroupID(int id)
        {
            return GetGroupStatusByGroupID(id, null);
        }

        private GroupStatus GetGroupStatusByGroupID(int id, SqlInterface si)
        {
            GroupStatus groupStatus = null;

            string storedProcName = "es_get_group_status_by_group_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Group_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        groupStatus = LoadGroupStatus(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return groupStatus;
        }

        public int InsertGroupStatus(GroupStatus groupStatus)
        {
            return InsertGroupStatus(groupStatus, null);
        }

        private int InsertGroupStatus(GroupStatus groupStatus, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_insert_group_status";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Group_status_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(groupStatus.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    groupStatus.GroupStatusId = DBValue.ToInt32(paramCol["@Group_status_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateGroupStatus(GroupStatus groupStatus)
        {
            return UpdateGroupStatus(groupStatus, null);
        }

        private int UpdateGroupStatus(GroupStatus groupStatus, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_update_group_status";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Group_status_id", DbType.Int32, DBValue.ToDBInt32(groupStatus.GroupStatusId)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(groupStatus.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }

        #endregion

        #region GroupGroupStatus Methods

        private GroupGroupStatus LoadGroupGroupStatus(DataRow row)
        {
            GroupGroupStatus groupGroupStatus = new GroupGroupStatus();

            // Store database values into our business object
            groupGroupStatus.GroupId = DBValue.ToInt32(row["group_id"]);
            groupGroupStatus.GroupStatusId = DBValue.ToInt32(row["group_status_id"]);
            groupGroupStatus.CreateDate = DBValue.ToDateTime(row["create_date"]);

            // return the filled object
            return groupGroupStatus;
        }

        public GroupGroupStatus[] GetGroupGroupStatuss()
        {
            return GetGroupGroupStatuss(null);
        }

        private GroupGroupStatus[] GetGroupGroupStatuss(SqlInterface si)
        {
            GroupGroupStatus[] groupGroupStatuss = null;

            string storedProcName = "es_get_group_group_statuss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    groupGroupStatuss = new GroupGroupStatus[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            groupGroupStatuss[i] = LoadGroupGroupStatus(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return groupGroupStatuss;
        }


        public GroupGroupStatus GetGroupGroupStatusByID(int id)
        {
            return GetGroupGroupStatusByID(id, null);
        }

        private GroupGroupStatus GetGroupGroupStatusByID(int id, SqlInterface si)
        {
            GroupGroupStatus groupGroupStatus = null;

            string storedProcName = "es_get_group_group_status_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Group_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        groupGroupStatus = LoadGroupGroupStatus(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return groupGroupStatus;
        }


        public int InsertGroupGroupStatus(GroupGroupStatus groupGroupStatus)
        {
            return InsertGroupGroupStatus(groupGroupStatus, null);
        }

        private int InsertGroupGroupStatus(GroupGroupStatus groupGroupStatus, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_insert_group_group_status";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Group_id", DbType.Int32, DBValue.ToDBInt32(groupGroupStatus.GroupId)));
                paramCol.Add(new SqlDataParameter("@Group_status_id", DbType.Int32, DBValue.ToDBInt32(groupGroupStatus.GroupStatusId)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(groupGroupStatus.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    groupGroupStatus.GroupId = DBValue.ToInt32(paramCol["@Group_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateGroupGroupStatus(GroupGroupStatus groupGroupStatus)
        {
            return UpdateGroupGroupStatus(groupGroupStatus, null);
        }

        private int UpdateGroupGroupStatus(GroupGroupStatus groupGroupStatus, SqlInterface si)
        {
            int result = int.MinValue;
            GroupGroupStatus ggStatus = GroupGroupStatus.GetGroupGroupStatusByID(groupGroupStatus.GroupId);
            if (ggStatus != null)
            {
                result = 1;
                if (ggStatus.GroupStatusId != groupGroupStatus.GroupStatusId)
                {
                    groupGroupStatus.CreateDate = DateTime.Now;
                    result = InsertGroupGroupStatus(groupGroupStatus, si);
                }
            }
            //			string storedProcName = "es_update_group_group_status";
            //
            //			// if the SqlInterface is passed as argument it means that 
            //			// this call should be applied to an already open connection
            //			// and the method which call this method is using transaction
            //			bool newConnection = true;
            //			if (si == null) {
            //				si = new SqlInterface(dataProvider, connectionString);
            //			} else {
            //				newConnection = false;
            //			}
            //
            //			try {
            //				// declare stored procedure parameters
            //				SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
            //				paramCol.Add(new SqlDataParameter("@Group_id", DbType.Int32, DBValue.ToDBInt32(groupGroupStatus.GroupId)));
            //				paramCol.Add(new SqlDataParameter("@Group_status_id", DbType.Int32, DBValue.ToDBInt32(groupGroupStatus.GroupStatusId)));
            //				paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(groupGroupStatus.CreateDate)));
            //
            //		
            //				if (newConnection) {
            //					// open the connection
            //					si.Open();
            //				}
            //
            //				result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);
            //
            //				if (result > 0) {
            //					return result;
            //				}
            //				else {
            //					throw new SqlDataException("Error updating database calling " + storedProcName);
            //				}
            //
            //
            //			} finally {
            //				if(newConnection) {
            //					// Always close connection.
            //					si.Close();
            //				}
            //			}
            return result;
        }

        #endregion

        #region PaymentExceptionType Methods

        private PaymentExceptionType LoadPaymentExceptionType(DataRow row)
        {
            PaymentExceptionType paymentExceptionType = new PaymentExceptionType();

            // Store database values into our business object
            paymentExceptionType.PaymentId = DBValue.ToInt32(row["payment_id"]);
            paymentExceptionType.ExceptionTypeId = DBValue.ToInt32(row["exception_type_id"]);
            paymentExceptionType.CreateDate = DBValue.ToDateTime(row["create_date"]);
            paymentExceptionType.ValidatedDate = DBValue.ToDateTime(row["validated_date"]);

            // return the filled object
            return paymentExceptionType;
        }

        public PaymentExceptionType[] GetPaymentExceptionTypes()
        {
            return GetPaymentExceptionTypes(null);
        }

        private PaymentExceptionType[] GetPaymentExceptionTypes(SqlInterface si)
        {
            PaymentExceptionType[] paymentExceptionTypes = null;

            string storedProcName = "es_get_payment_exception_types";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    paymentExceptionTypes = new PaymentExceptionType[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            paymentExceptionTypes[i] = LoadPaymentExceptionType(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return paymentExceptionTypes;
        }

        public PaymentExceptionType[] GetPaymentExceptionTypesByGroupID(int groupID)
        {
            return GetPaymentExceptionTypesByGroupID(groupID, null);
        }

        private PaymentExceptionType[] GetPaymentExceptionTypesByGroupID(int groupID, SqlInterface si)
        {
            PaymentExceptionType[] paymentExceptionTypes = null;

            string storedProcName = "es_get_payment_exception_types_by_group_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Group_id", DbType.Int32, DBValue.ToDBInt32(groupID)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    paymentExceptionTypes = new PaymentExceptionType[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            paymentExceptionTypes[i] = LoadPaymentExceptionType(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return paymentExceptionTypes;
        }

        public PaymentExceptionType[] GetPaymentExceptionTypesByCheckNo(int checkNo)
        {
            return GetPaymentExceptionTypesByCheckNo(checkNo, null);
        }

        private PaymentExceptionType[] GetPaymentExceptionTypesByCheckNo(int checkNo, SqlInterface si)
        {
            PaymentExceptionType[] paymentExceptionTypes = null;

            string storedProcName = "es_get_payment_exception_types_by_check_no";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Check_no", DbType.Int32, DBValue.ToDBInt32(checkNo)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    paymentExceptionTypes = new PaymentExceptionType[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            paymentExceptionTypes[i] = LoadPaymentExceptionType(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return paymentExceptionTypes;
        }


        public PaymentExceptionType[] GetPaymentExceptionTypesUncorrected(DateTime period)
        {
            return GetPaymentExceptionTypesUncorrected(period,null);
        }

        private PaymentExceptionType[] GetPaymentExceptionTypesUncorrected(DateTime period, SqlInterface si)
        {
            PaymentExceptionType[] paymentExceptionTypes = null;

            string storedProcName = "es_get_payment_exception_types_uncorrected";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {

                    int j = 0;
                 
                   // paymentExceptionTypes = new PaymentExceptionType[dt.Rows.Count];
            
                    ArrayList temp = new ArrayList();
                    
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            DateTime d = Convert.ToDateTime(dt.Rows[i]["create_date"]);
                           
                            if (d > period)
                            {
                                //paymentExceptionTypes[i] = LoadPaymentExceptionType(dt.Rows[i]);
                                temp.Add(LoadPaymentExceptionType(dt.Rows[i]));
                            }
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }

                    paymentExceptionTypes = new PaymentExceptionType[temp.Count];
                    temp.CopyTo(paymentExceptionTypes);

                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return paymentExceptionTypes;
        }



        public PaymentExceptionType GetPaymentExceptionTypeByID(int id, int paymentID)
        {
            return GetPaymentExceptionTypeByID(id, paymentID, null);
        }

        private PaymentExceptionType GetPaymentExceptionTypeByID(int id, int paymentID, SqlInterface si)
        {
            PaymentExceptionType paymentExceptionType = null;

            string storedProcName = "es_get_payment_exception_type_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Exception_Type_id", DbType.Int32, DBValue.ToDBInt32(id)));
                paramCol.Add(new SqlDataParameter("@Payment_id", DbType.Int32, DBValue.ToDBInt32(paymentID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        paymentExceptionType = LoadPaymentExceptionType(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return paymentExceptionType;
        }



        internal PaymentExceptionTypeCollection GetPaymentExceptionTypeByPaymentID(int paymentID)
        {
            return GetPaymentExceptionTypeByPaymentID(paymentID, int.MinValue, null);
        }
        private PaymentExceptionTypeCollection GetPaymentExceptionTypeByPaymentID(int paymentID, int exceptionTypeId, SqlInterface si)
        {
            PaymentExceptionTypeCollection result = new PaymentExceptionTypeCollection();

            string storedProcName = "es_get_payment_exception_type_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Exception_Type_id", DbType.Int32, DBValue.ToDBInt32(exceptionTypeId)));
                paramCol.Add(new SqlDataParameter("@Payment_id", DbType.Int32, DBValue.ToDBInt32(paymentID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                            result.Add(LoadPaymentExceptionType(dt.Rows[i]));
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int InsertPaymentExceptionType(PaymentExceptionType paymentExceptionType)
        {
            return InsertPaymentExceptionType(paymentExceptionType, null);
        }

        private int InsertPaymentExceptionType(PaymentExceptionType paymentExceptionType, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_insert_payment_exception_type";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Payment_id", DbType.Int32, DBValue.ToDBInt32(paymentExceptionType.PaymentId)));
                paramCol.Add(new SqlDataParameter("@Exception_type_id", DbType.Int32, DBValue.ToDBInt32(paymentExceptionType.ExceptionTypeId)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(paymentExceptionType.CreateDate)));
                paramCol.Add(new SqlDataParameter("@Validated_date", DbType.DateTime, DBValue.ToDBDateTime(paymentExceptionType.ValidatedDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    paymentExceptionType.PaymentId = DBValue.ToInt32(paramCol["@Payment_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdatePaymentExceptionType(PaymentExceptionType paymentExceptionType)
        {
            return UpdatePaymentExceptionType(paymentExceptionType, null);
        }

        private int UpdatePaymentExceptionType(PaymentExceptionType paymentExceptionType, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_update_payment_exception_type";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Payment_id", DbType.Int32, DBValue.ToDBInt32(paymentExceptionType.PaymentId)));
                paramCol.Add(new SqlDataParameter("@Exception_type_id", DbType.Int32, DBValue.ToDBInt32(paymentExceptionType.ExceptionTypeId)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(paymentExceptionType.CreateDate)));
                paramCol.Add(new SqlDataParameter("@Validated_date", DbType.DateTime, DBValue.ToDBDateTime(paymentExceptionType.ValidatedDate)));
                paramCol.Add(new SqlDataParameter("@Is_Corrected", DbType.Boolean, DBValue.ToDBBoolean(paymentExceptionType.IsCorrected)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }

        #endregion

        #region PaymentComment Methods

        private PaymentComment LoadPaymentComment(DataRow row)
        {
            PaymentComment paymentComment = new PaymentComment();

            // Store database values into our business object
            paymentComment.PaymentCommentId = DBValue.ToInt32(row["payment_comment_id"]);
            paymentComment.PaymentId = DBValue.ToInt32(row["payment_id"]);
            paymentComment.Comment = DBValue.ToString(row["comment"]);
            paymentComment.NtLogin = DBValue.ToString(row["nt_login"]);
            paymentComment.CreateDate = DBValue.ToDateTime(row["create_date"]);

            // return the filled object
            return paymentComment;
        }

        public PaymentComment[] GetPaymentComments()
        {
            return GetPaymentComments(null);
        }

        private PaymentComment[] GetPaymentComments(SqlInterface si)
        {
            PaymentComment[] paymentComments = null;

            string storedProcName = "es_get_payment_comments";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    paymentComments = new PaymentComment[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            paymentComments[i] = LoadPaymentComment(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return paymentComments;
        }

        public PaymentComment[] GetPaymentCommentsByPaymentID(int paymentID)
        {
            return GetPaymentCommentsByPaymentID(paymentID, null);
        }

        private PaymentComment[] GetPaymentCommentsByPaymentID(int paymentID, SqlInterface si)
        {
            PaymentComment[] paymentComments = null;

            string storedProcName = "es_get_payments_comment_by_payment_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Payment_id", DbType.Int32, ParameterDirection.Input, paymentID));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    paymentComments = new PaymentComment[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            paymentComments[i] = LoadPaymentComment(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return paymentComments;
        }

        public PaymentComment[] GetPaymentCommentsByNtLogin(string ntLogin)
        {
            return GetPaymentCommentsByNtLogin(ntLogin, null);
        }

        private PaymentComment[] GetPaymentCommentsByNtLogin(string ntLogin, SqlInterface si)
        {
            PaymentComment[] paymentComments = null;

            string storedProcName = "es_get_payments_comment_by_nt_login";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@nt_login", DbType.String, ParameterDirection.Input, ntLogin));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    paymentComments = new PaymentComment[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            paymentComments[i] = LoadPaymentComment(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return paymentComments;
        }

        public PaymentComment GetPaymentCommentByID(int id)
        {
            return GetPaymentCommentByID(id, null);
        }

        private PaymentComment GetPaymentCommentByID(int id, SqlInterface si)
        {
            PaymentComment paymentComment = null;

            string storedProcName = "es_get_payment_comment_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Payment_comment_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        paymentComment = LoadPaymentComment(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return paymentComment;
        }


        public int InsertPaymentComment(PaymentComment paymentComment)
        {
            return InsertPaymentComment(paymentComment, null);
        }

        private int InsertPaymentComment(PaymentComment paymentComment, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_insert_payment_comment";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Payment_comment_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Payment_id", DbType.Int32, DBValue.ToDBInt32(paymentComment.PaymentId)));
                paramCol.Add(new SqlDataParameter("@Comment", DbType.String, DBValue.ToDBString(paymentComment.Comment)));
                paramCol.Add(new SqlDataParameter("@Nt_login", DbType.String, DBValue.ToDBString(paymentComment.NtLogin)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(paymentComment.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    paymentComment.PaymentCommentId = DBValue.ToInt32(paramCol["@Payment_comment_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdatePaymentComment(PaymentComment paymentComment)
        {
            return UpdatePaymentComment(paymentComment, null);
        }

        private int UpdatePaymentComment(PaymentComment paymentComment, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_update_payment_comment";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Payment_comment_id", DbType.Int32, DBValue.ToDBInt32(paymentComment.PaymentCommentId)));
                paramCol.Add(new SqlDataParameter("@Payment_id", DbType.Int32, DBValue.ToDBInt32(paymentComment.PaymentId)));
                paramCol.Add(new SqlDataParameter("@Comment", DbType.String, DBValue.ToDBString(paymentComment.Comment)));
                paramCol.Add(new SqlDataParameter("@Nt_login", DbType.String, DBValue.ToDBString(paymentComment.NtLogin)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(paymentComment.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }

        #endregion

        #region ExceptionType Methods

        private ExceptionType LoadExceptionType(DataRow row)
        {
            ExceptionType exceptionType = new ExceptionType();

            // Store database values into our business object
            exceptionType.ExceptionTypeId = DBValue.ToInt32(row["exception_type_id"]);
            exceptionType.Description = DBValue.ToString(row["description"]);
            // return the filled object
            return exceptionType;
        }

        public ExceptionType[] GetExceptionTypes()
        {
            return GetExceptionTypes(null);
        }

        private ExceptionType[] GetExceptionTypes(SqlInterface si)
        {
            ExceptionType[] exceptionTypes = null;

            string storedProcName = "es_get_exception_types";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    exceptionTypes = new ExceptionType[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            exceptionTypes[i] = LoadExceptionType(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return exceptionTypes;
        }


        public ExceptionType GetExceptionTypeByID(int id)
        {
            return GetExceptionTypeByID(id, null);
        }

        private ExceptionType GetExceptionTypeByID(int id, SqlInterface si)
        {
            ExceptionType exceptionType = null;

            string storedProcName = "es_get_exception_type_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Exception_type_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        exceptionType = LoadExceptionType(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return exceptionType;
        }


        public int InsertExceptionType(ExceptionType exceptionType)
        {
            return InsertExceptionType(exceptionType, null);
        }

        private int InsertExceptionType(ExceptionType exceptionType, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_insert_exception_type";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Exception_type_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(exceptionType.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    exceptionType.ExceptionTypeId = DBValue.ToInt32(paramCol["@Exception_type_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateExceptionType(ExceptionType exceptionType)
        {
            return UpdateExceptionType(exceptionType, null);
        }

        private int UpdateExceptionType(ExceptionType exceptionType, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_update_exception_type";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Exception_type_id", DbType.Int32, DBValue.ToDBInt32(exceptionType.ExceptionTypeId)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(exceptionType.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }

        #endregion

        #region PartnerPaymentConfig Methods

        private PartnerPaymentConfig LoadPartnerPaymentConfig(DataRow row)
        {
            PartnerPaymentConfig partnerPaymentConfig = new PartnerPaymentConfig();

            // Store database values into our business object
            partnerPaymentConfig.PartnerId = DBValue.ToInt32(row["partner_id"]);
            partnerPaymentConfig.ProfitPercentage = DBValue.ToInt32(row["profit_percentage"]);
            partnerPaymentConfig.PaymentTo = DBValue.ToInt32(row["payment_to"]);
            partnerPaymentConfig.EmailTemplateId = DBValue.ToInt32(row["email_template_id"]);
            partnerPaymentConfig.FirstEmailTemplateId = DBValue.ToInt32(row["first_email_template_id"]);
            partnerPaymentConfig.IsDefault = DBValue.ToBoolean(row["is_default"]);
            partnerPaymentConfig.PartnerPaymentInfoId = DBValue.ToInt32(row["partner_payment_info_id"]);
            partnerPaymentConfig.ProfitId = DBValue.ToInt32(row["profit_id"]);
            // return the filled object
            return partnerPaymentConfig;
        }

        public PartnerPaymentConfig[] GetPartnerPaymentConfigs()
        {
            return GetPartnerPaymentConfigs(null);
        }

        private PartnerPaymentConfig[] GetPartnerPaymentConfigs(SqlInterface si)
        {
            PartnerPaymentConfig[] partnerPaymentConfigs = null;

            string storedProcName = "es_get_partner_payment_configs";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    partnerPaymentConfigs = new PartnerPaymentConfig[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            partnerPaymentConfigs[i] = LoadPartnerPaymentConfig(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return partnerPaymentConfigs;
        }

        internal PartnerPaymentConfig GetPartnerPaymentConfigByPaymentID(int paymentId)
        {
            return GetPartnerPaymentConfigByPaymentID(paymentId, null);
        }
        private PartnerPaymentConfig GetPartnerPaymentConfigByPaymentID(int paymentId, SqlInterface si)
        {
            PartnerPaymentConfig partnerPaymentConfig = null;

            string storedProcName = "es_get_partner_payment_config_by_payment_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Payment_id", DbType.Int32, DBValue.ToDBInt32(paymentId)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        partnerPaymentConfig = LoadPartnerPaymentConfig(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return partnerPaymentConfig;
        }


        public PartnerPaymentConfig GetPartnerPaymentConfigByID(int id)
        {
            return GetPartnerPaymentConfigByID(id, null);
        }

        private PartnerPaymentConfig GetPartnerPaymentConfigByID(int id, SqlInterface si)
        {
            PartnerPaymentConfig partnerPaymentConfig = null;

            string storedProcName = "es_get_partner_payment_config_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Partner_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        partnerPaymentConfig = LoadPartnerPaymentConfig(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return partnerPaymentConfig;
        }


        public PartnerPaymentConfig GetDefaultPartnerPaymentConfig()
        {
            return GetDefaultPartnerPaymentConfig(null);
        }

        private PartnerPaymentConfig GetDefaultPartnerPaymentConfig(SqlInterface si)
        {
            PartnerPaymentConfig partnerPaymentConfig = null;

            string storedProcName = "es_get_default_partner_payment_config";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        partnerPaymentConfig = LoadPartnerPaymentConfig(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return partnerPaymentConfig;
        }


        public int InsertPartnerPaymentConfig(PartnerPaymentConfig partnerPaymentConfig)
        {
            return InsertPartnerPaymentConfig(partnerPaymentConfig, null);
        }

        private int InsertPartnerPaymentConfig(PartnerPaymentConfig partnerPaymentConfig, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_insert_partner_payment_config";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Partner_id", DbType.Int32, DBValue.ToDBInt32(partnerPaymentConfig.PartnerId)));
                paramCol.Add(new SqlDataParameter("@Profit_percentage", DbType.Int32, DBValue.ToDBInt32(partnerPaymentConfig.ProfitPercentage)));
                paramCol.Add(new SqlDataParameter("@Payment_to", DbType.Int32, DBValue.ToDBInt32(partnerPaymentConfig.PaymentTo)));
                paramCol.Add(new SqlDataParameter("@Email_template_id", DbType.Int32, DBValue.ToDBInt32(partnerPaymentConfig.EmailTemplateId)));
                paramCol.Add(new SqlDataParameter("@First_email_template_id", DbType.Int32, DBValue.ToDBInt32(partnerPaymentConfig.FirstEmailTemplateId)));
                paramCol.Add(new SqlDataParameter("@Is_default", DbType.Boolean, DBValue.ToDBBoolean(partnerPaymentConfig.IsDefault)));
                paramCol.Add(new SqlDataParameter("@Partner_payment_info_id", DbType.Int32, DBValue.ToDBInt32(partnerPaymentConfig.PartnerPaymentInfoId)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    partnerPaymentConfig.PartnerId = DBValue.ToInt32(paramCol["@Partner_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdatePartnerPaymentConfig(PartnerPaymentConfig partnerPaymentConfig)
        {
            return UpdatePartnerPaymentConfig(partnerPaymentConfig, null);
        }

        private int UpdatePartnerPaymentConfig(PartnerPaymentConfig partnerPaymentConfig, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_update_partner_payment_config";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Partner_id", DbType.Int32, DBValue.ToDBInt32(partnerPaymentConfig.PartnerId)));
                paramCol.Add(new SqlDataParameter("@Profit_percentage", DbType.Int32, DBValue.ToDBInt32(partnerPaymentConfig.ProfitPercentage)));
                paramCol.Add(new SqlDataParameter("@Payment_to", DbType.Int32, DBValue.ToDBInt32(partnerPaymentConfig.PaymentTo)));
                paramCol.Add(new SqlDataParameter("@Email_template_id", DbType.Int32, DBValue.ToDBInt32(partnerPaymentConfig.EmailTemplateId)));
                paramCol.Add(new SqlDataParameter("@First_email_template_id", DbType.Int32, DBValue.ToDBInt32(partnerPaymentConfig.FirstEmailTemplateId)));
                paramCol.Add(new SqlDataParameter("@Is_default", DbType.Boolean, DBValue.ToDBBoolean(partnerPaymentConfig.IsDefault)));
                paramCol.Add(new SqlDataParameter("@Partner_payment_info_id", DbType.Int32, DBValue.ToDBInt32(partnerPaymentConfig.PartnerPaymentInfoId)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
        }

        #endregion

        #region Payments

        public Payment.PaymentInfo LoadPaymentInfoActiveOrNot(DataRow row)
        {
            Payment.PaymentInfo paymentInfo = new Payment.PaymentInfo();
            int _payment_info_id = DBValue.ToInt32(row["payment_info_id"]);
            int group_id = DBValue.ToInt32(row["group_id"]);
            int event_id = DBValue.ToInt32(row["event_id"]);
            string payment_name = DBValue.ToString(row["payment_name"]);
            string on_behalf_of_name = DBValue.ToString(row["on_behalf_of_name"]);
            string ship_to_name = DBValue.ToString(row["ship_to_name"]);
            string phone_number = DBValue.ToString(row["phone_number"]);
            string ssn = DBValue.ToString(row["ssn"]);
            bool active = DBValue.ToBoolean(row["active"]);
            DateTime create_date = DBValue.ToDateTime(row["create_date"]);
            int phone_number_id = DBValue.ToInt32(row["phone_number_id"]);
            int postal_address_id = DBValue.ToInt32(row["postal_address_id"]);
            string address_1 = DBValue.ToString(row["address_1"]);
            string address_2 = DBValue.ToString(row["address_2"]);
            string city = DBValue.ToString(row["city"]);
            string zip_code = DBValue.ToString(row["zip_code"]);
            string country_code = DBValue.ToString(row["country_code"]);
            string subdivision_code = DBValue.ToString(row["subdivision_code"]);
             paymentInfo.PaymentInfoID = _payment_info_id;
            paymentInfo.GroupID = group_id;
            paymentInfo.EventID = event_id;
            paymentInfo.PaymentName = payment_name;
            paymentInfo.OnBehalfOfName = on_behalf_of_name;
            paymentInfo.ShipToName = ship_to_name;
            paymentInfo.PhoneNumber = new Common.PhoneNumber();
            paymentInfo.PhoneNumber.ID = phone_number_id;
            if (phone_number_id != int.MinValue && phone_number != "")
            {
                // because the old data doesn't have
                paymentInfo.PhoneNumber.IsActive = true;
                paymentInfo.PhoneNumber.SetPhoneNumber(phone_number);
                paymentInfo.PhoneNumber.PhoneNumberTypeID = PhoneNumberType.DAY_PHONE;
            }
            paymentInfo.Ssn = ssn;
            paymentInfo.Active = active;
            paymentInfo.CreateDate = create_date;
            if (postal_address_id != int.MinValue)
            {
                paymentInfo.PostalAddress = new PostalAddress();
                paymentInfo.PostalAddress.Id = postal_address_id;
                paymentInfo.PostalAddress.Address1 = address_1;
                paymentInfo.PostalAddress.Address2 = address_2;
                paymentInfo.PostalAddress.City = city;
                paymentInfo.PostalAddress.ZipCode = zip_code;
                paymentInfo.PostalAddress.CountryCode = CountryCode.Create(country_code);
                paymentInfo.PostalAddress.SubDivisionCode = subdivision_code;
            }
            return paymentInfo;

        }

        public Payment.PaymentInfo LoadPaymentInfo(DataRowCollection rows)
        {
            Payment.PaymentInfo paymentInfo = new Payment.PaymentInfo();
            foreach (DataRow row in rows)
            {
                int _payment_info_id = DBValue.ToInt32(row["payment_info_id"]);
                int group_id = DBValue.ToInt32(row["group_id"]);
                int event_id = DBValue.ToInt32(row["event_id"]);
                string payment_name = DBValue.ToString(row["payment_name"]);
                string on_behalf_of_name = DBValue.ToString(row["on_behalf_of_name"]);
                string ship_to_name = DBValue.ToString(row["ship_to_name"]);
                string phone_number = DBValue.ToString(row["phone_number"]);
                string ssn = DBValue.ToString(row["ssn"]);
                bool active = DBValue.ToBoolean(row["active"]);
                DateTime create_date = DBValue.ToDateTime(row["create_date"]);
                int phone_number_id = DBValue.ToInt32(row["phone_number_id"]);
                int postal_address_id = DBValue.ToInt32(row["postal_address_id"]);
                string address_1 = DBValue.ToString(row["address_1"]);
                string address_2 = DBValue.ToString(row["address_2"]);
                string city = DBValue.ToString(row["city"]);
                string zip_code = DBValue.ToString(row["zip_code"]);
                string country_code = DBValue.ToString(row["country_code"]);
                string subdivision_code = DBValue.ToString(row["subdivision_code"]);

                //if (active)
                //{
                    paymentInfo.PaymentInfoID = _payment_info_id;
                    paymentInfo.GroupID = group_id;
                    paymentInfo.EventID = event_id;
                    paymentInfo.PaymentName = payment_name;
                    paymentInfo.OnBehalfOfName = on_behalf_of_name;
                    paymentInfo.ShipToName = ship_to_name;
                    paymentInfo.PhoneNumber = new Common.PhoneNumber();
                    paymentInfo.PhoneNumber.ID = phone_number_id;
                    if (phone_number_id != int.MinValue && phone_number != "")
                    {
                        // because the old data doesn't have
                        paymentInfo.PhoneNumber.IsActive = true;
                        paymentInfo.PhoneNumber.SetPhoneNumber(phone_number);
                        paymentInfo.PhoneNumber.PhoneNumberTypeID = PhoneNumberType.DAY_PHONE;
                    }
                    paymentInfo.Ssn = ssn;
                    paymentInfo.Active = active;
                    paymentInfo.CreateDate = create_date;
                    if (postal_address_id != int.MinValue)
                    {
                        paymentInfo.PostalAddress = new PostalAddress();
                        paymentInfo.PostalAddress.Id = postal_address_id;
                        paymentInfo.PostalAddress.Address1 = address_1;
                        paymentInfo.PostalAddress.Address2 = address_2;
                        paymentInfo.PostalAddress.City = city;
                        paymentInfo.PostalAddress.ZipCode = zip_code;
                        paymentInfo.PostalAddress.CountryCode = CountryCode.Create(country_code);
                        paymentInfo.PostalAddress.SubDivisionCode = subdivision_code;
                    }

                   // break;
                //}
            }

            return paymentInfo;
        }

        public Payment.PaymentInfo GetPaymentInfoBySponsorID(Int32 sponsorID)
        {
            Payment.PaymentInfo paymentInfo = null;

            bool useTransaction = false;
            string storedProcName = "es_get_payment_info_by_sponsor_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@sponsor_id", DbType.Int32, DBValue.ToDBInt32(sponsorID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    si.Close();
                    return null;
                }

                // fill our objects
                try
                {
                    paymentInfo = new Payment.PaymentInfo();
                    foreach (DataRow row in dt.Rows)
                    {

                        int _payment_info_id = DBValue.ToInt32(row["payment_info_id"]);
                        int group_id = DBValue.ToInt32(row["group_id"]);
                        int event_id = DBValue.ToInt32(row["event_id"]);
                        string payment_name = DBValue.ToString(row["payment_name"]);
                        string on_behalf_of_name = DBValue.ToString(row["on_behalf_of_name"]);
                        string ship_to_name = DBValue.ToString(row["ship_to_name"]);
                        int phone_number_id = DBValue.ToInt32(row["phone_number_id"]);
                        string phone_number = DBValue.ToString(row["phone_number"]);
                        string ssn = DBValue.ToString(row["ssn"]);
                        bool active = DBValue.ToBoolean(row["active"]);
                        DateTime create_date = DBValue.ToDateTime(row["create_date"]);
                        int postal_address_id = DBValue.ToInt32(row["postal_address_id"]);
                        string address_1 = DBValue.ToString(row["address_1"]);
                        string address_2 = DBValue.ToString(row["address_2"]);
                        string city = DBValue.ToString(row["city"]);
                        string zip_code = DBValue.ToString(row["zip_code"]);
                        string subdivision_code = DBValue.ToString(row["subdivision_code"]);
                        string country_code = DBValue.ToString(row["country_code"]);
                        
                        // if country code is null, try to correct it
                        if (country_code == "")
                        {
                            country_code = subdivision_code.Substring(0, 2);
                        }

                        if (active)
                        {
                            paymentInfo.PaymentInfoID = _payment_info_id;
                            paymentInfo.GroupID = group_id;
                            paymentInfo.EventID = event_id;
                            paymentInfo.PaymentName = payment_name;
                            paymentInfo.OnBehalfOfName = on_behalf_of_name;
                            paymentInfo.ShipToName = ship_to_name;
                            paymentInfo.PhoneNumber = new Common.PhoneNumber();
                            paymentInfo.PhoneNumber.ID = phone_number_id;
                            if (phone_number_id != int.MinValue && phone_number != "")
                            { // because the old data doesn't have
                                paymentInfo.PhoneNumber.IsActive = true;
                                paymentInfo.PhoneNumber.SetPhoneNumber(phone_number);
                                paymentInfo.PhoneNumber.PhoneNumberTypeID = PhoneNumberType.DAY_PHONE;
                            }
                            paymentInfo.Ssn = ssn;
                            paymentInfo.Active = active;
                            paymentInfo.CreateDate = create_date;                            
                            if (postal_address_id != int.MinValue)
                            {
                                paymentInfo.PostalAddress = new PostalAddress();
                                paymentInfo.PostalAddress.Id = postal_address_id;
                                paymentInfo.PostalAddress.Address1 = address_1;
                                paymentInfo.PostalAddress.Address2 = address_2;
                                paymentInfo.PostalAddress.City = city;
                                paymentInfo.PostalAddress.ZipCode = zip_code;
                                paymentInfo.PostalAddress.CountryCode = CountryCode.Create(country_code);
                                paymentInfo.PostalAddress.SubDivisionCode = subdivision_code;
                            }
                        }
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return paymentInfo;
        }

        // obsolete method since we have changed the link between payment from group to event
        public Payment.PaymentInfo TBD_GetPaymentInfoByGroupID(int groupID)
        {
            Payment.PaymentInfo paymentInfo = null;

            bool useTransaction = false;
            string storedProcName = "es_get_payment_info_by_group_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@group_id", DbType.Int32, DBValue.ToDBInt32(groupID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    si.Close();
                    return null;
                }

                // fill our objects
                try
                {
                    paymentInfo = LoadPaymentInfo(dt.Rows);
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return paymentInfo;
        }

        public Payment.PaymentInfo GetPaymentInfoByEventID(int groupID, int eventID)
        {
            Payment.PaymentInfo paymentInfo = null;

            bool useTransaction = false;
            string storedProcName = "es_get_payment_info_by_group_id_event_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@group_id", DbType.Int32, DBValue.ToDBInt32(groupID)));
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(eventID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    si.Close();
                    return null;
                }

                // fill our objects
                try
                {
                    paymentInfo = LoadPaymentInfo(dt.Rows);
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return paymentInfo;
        }

        public Payment.PaymentInfo GetPaymentInfo(Int32 payment_info_id)
        {
            Payment.PaymentInfo paymentInfo = null;

            bool useTransaction = false;
            string storedProcName = "es_get_payment_info";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@payment_info_id", DbType.Int32, DBValue.ToDBInt32(payment_info_id)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    paymentInfo = LoadPaymentInfo(dt.Rows);
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return paymentInfo;
        }

        public void InsertPayment(Int32 group_id, Int32 event_id, String payment_name, String on_behalf_of_name, String ship_to_name, String phone_number, String ssn, String address_1, String address_2, String city, String zip_code, String country_code, String subdivision_code, int addressIsValidated, ref Int32 postal_address_id, ref Int32 phone_number_id, ref Int32 payment_info_id)
        {
            InsertPayment(null, group_id, event_id, payment_name, on_behalf_of_name, ship_to_name, phone_number, ssn, address_1, address_2, city, zip_code, country_code, subdivision_code, addressIsValidated, ref postal_address_id, ref phone_number_id, ref payment_info_id);
        }

        public bool InsertPayment(SqlInterface si, Int32 group_id, Int32 event_id, String payment_name, String phone_number, ref Int32 postal_address_id, ref Int32 phone_number_id, ref Int32 payment_info_id)
        {
            return InsertPayment(si, group_id, event_id, payment_name, null, null, phone_number, null, null, null, null, null, null, null, 0, ref postal_address_id, ref phone_number_id, ref payment_info_id);
        }

        public bool InsertPayment(SqlInterface si, Int32 group_id, Int32 event_id, String payment_name, String on_behalf_of_name, String ship_to_name, String phone_number, String ssn, String address_1, String address_2, String city, String zip_code, String country_code, String subdivision_code, int addressIsValidated, ref Int32 postal_address_id, ref Int32 phone_number_id, ref Int32 payment_info_id)
        {
            bool internalTransaction = true;
            string storedProcName = "es_create_payment_info";

            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                internalTransaction = false;
            }

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@group_id", DbType.Int32, DBValue.ToDBInt32(group_id)));
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(event_id)));
                paramCol.Add(new SqlDataParameter("@payment_name", DbType.String, DBValue.ToDBString(payment_name)));
                paramCol.Add(new SqlDataParameter("@on_behalf_of_name", DbType.String, DBValue.ToDBString(on_behalf_of_name)));
                paramCol.Add(new SqlDataParameter("@ship_to_name", DbType.String, DBValue.ToDBString(ship_to_name)));
                paramCol.Add(new SqlDataParameter("@phone_number", DbType.String, DBValue.ToDBString(phone_number)));
                paramCol.Add(new SqlDataParameter("@ssn", DbType.String, DBValue.ToDBString(ssn)));
                paramCol.Add(new SqlDataParameter("@address_1", DbType.String, DBValue.ToDBString(address_1)));
                paramCol.Add(new SqlDataParameter("@address_2", DbType.String, DBValue.ToDBString(address_2)));
                paramCol.Add(new SqlDataParameter("@city", DbType.String, DBValue.ToDBString(city)));
                paramCol.Add(new SqlDataParameter("@zip_code", DbType.String, DBValue.ToDBString(zip_code)));
                paramCol.Add(new SqlDataParameter("@country_code", DbType.String, DBValue.ToDBString(country_code)));
                paramCol.Add(new SqlDataParameter("@subdivision_code", DbType.String, DBValue.ToDBString(subdivision_code)));
                paramCol.Add(new SqlDataParameter("@address_is_validated", DbType.Int16, DBValue.ToDBInt16(addressIsValidated)));
                paramCol.Add(new SqlDataParameter("@postal_address_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@phone_number_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@payment_info_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@return", DbType.Int32, ParameterDirection.ReturnValue));

                if (internalTransaction)
                {
                    si.Open();
                    si.BeginTransaction();
                }

                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);
                int returnValue = DBValue.ToInt32(paramCol["@return"].Value);

                postal_address_id = DBValue.ToInt32(paramCol["@postal_address_id"].Value);
                phone_number_id = DBValue.ToInt32(paramCol["@phone_number_id"].Value);
                payment_info_id = DBValue.ToInt32(paramCol["@payment_info_id"].Value);


                if (returnValue != 0)
                    return false;

                // Commit our transaction.
                if (internalTransaction)
                    si.Commit();


            }
            catch
            {
                // Rollback on error.
                if (internalTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                if (internalTransaction)
                    si.Close();
            }
            return true;
        }

        /*
        public void InsertPayment(Int32 group_id, String payment_name, String on_behalf_of_name, String ship_to_name, String ssn, String address_1, String address_2, String city, String zip_code, String country_code, String subdivision_code, ref Int32 postal_address_id, ref Int32 payment_info_id) {
            bool useTransaction = false;
            string storedProcName = "es_create_payment_info";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@group_id", DbType.Int32, DBValue.ToDBInt32(group_id)));
                paramCol.Add(new SqlDataParameter("@payment_name", DbType.String, DBValue.ToDBString(payment_name)));
                paramCol.Add(new SqlDataParameter("@on_behalf_of_name", DbType.String, DBValue.ToDBString(on_behalf_of_name)));
                paramCol.Add(new SqlDataParameter("@ship_to_name", DbType.String, DBValue.ToDBString(ship_to_name)));
                paramCol.Add(new SqlDataParameter("@ssn", DbType.String, DBValue.ToDBString(ssn)));
                paramCol.Add(new SqlDataParameter("@address_1", DbType.String, DBValue.ToDBString(address_1)));
                paramCol.Add(new SqlDataParameter("@address_2", DbType.String, DBValue.ToDBString(address_2)));
                paramCol.Add(new SqlDataParameter("@city", DbType.String, DBValue.ToDBString(city)));
                paramCol.Add(new SqlDataParameter("@zip_code", DbType.String, DBValue.ToDBString(zip_code)));
                paramCol.Add(new SqlDataParameter("@country_code", DbType.String, DBValue.ToDBString(country_code)));
                paramCol.Add(new SqlDataParameter("@subdivision_code", DbType.String, DBValue.ToDBString(subdivision_code)));
                paramCol.Add(new SqlDataParameter("@postal_address_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@payment_info_id", DbType.Int32, ParameterDirection.Output));

                si.Open();

                if(useTransaction)
                    si.BeginTransaction();
		
                // Fetch and store into database.
                si.ExecuteNonQuery( storedProcName, CommandType.StoredProcedure, paramCol);

                postal_address_id = DBValue.ToInt32(paramCol["@postal_address_id"].Value);
                payment_info_id = DBValue.ToInt32(paramCol["@payment_info_id"].Value);

                // Commit our transaction.
                if(useTransaction) 
                    si.Commit();
            } catch {
                // Rollback on error.
                if(useTransaction)
                    si.Rollback(); 

                // throw exception
                throw;
            } finally {
                // Always close connection.
                si.Close();
            }
        }*/

        public void UpdatePayment(Int32 paymentID, String payment_name, String on_behalf_of_name, String ship_to_name, String phone_number, String ssn, String address_1, String address_2, String city, String zip_code, String country_code, String subdivision_code, int addressIsValidated, ref Int32 postal_address_id, ref Int32 phone_number_id, ref Int32 new_payment_info_id)
        {
            bool useTransaction = false;
            string storedProcName = "es_update_payment_info";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@old_payment_info_id", DbType.Int32, DBValue.ToDBInt32(paymentID)));
                paramCol.Add(new SqlDataParameter("@payment_name", DbType.String, DBValue.ToDBString(payment_name)));
                paramCol.Add(new SqlDataParameter("@on_behalf_of_name", DbType.String, DBValue.ToDBString(on_behalf_of_name)));
                paramCol.Add(new SqlDataParameter("@ship_to_name", DbType.String, DBValue.ToDBString(ship_to_name)));
                paramCol.Add(new SqlDataParameter("@phone_number", DbType.String, DBValue.ToDBString(phone_number)));
                paramCol.Add(new SqlDataParameter("@ssn", DbType.String, DBValue.ToDBString(ssn)));
                paramCol.Add(new SqlDataParameter("@address_1", DbType.String, DBValue.ToDBString(address_1)));
                paramCol.Add(new SqlDataParameter("@address_2", DbType.String, DBValue.ToDBString(address_2)));
                paramCol.Add(new SqlDataParameter("@city", DbType.String, DBValue.ToDBString(city)));
                paramCol.Add(new SqlDataParameter("@zip_code", DbType.String, DBValue.ToDBString(zip_code)));
                paramCol.Add(new SqlDataParameter("@country_code", DbType.String, DBValue.ToDBString(country_code)));
                paramCol.Add(new SqlDataParameter("@subdivision_code", DbType.String, DBValue.ToDBString(subdivision_code)));
                //paramCol.Add(new SqlDataParameter("@address_is_validated", DbType.Int16, DBValue.ToDBInt16(addressIsValidated)));
                paramCol.Add(new SqlDataParameter("@postal_address_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@phone_number_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@new_payment_info_id", DbType.Int32, ParameterDirection.Output));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                postal_address_id = DBValue.ToInt32(paramCol["@postal_address_id"].Value);
                phone_number_id = DBValue.ToInt32(paramCol["@phone_number_id"].Value);
                new_payment_info_id = DBValue.ToInt32(paramCol["@new_payment_info_id"].Value);

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }



        public void UpdatePayment(SqlInterface si, Int32 paymentID, String payment_name, String on_behalf_of_name, String ship_to_name, String phone_number, String ssn, String address_1, String address_2, String city, String zip_code, String country_code, String subdivision_code, int addressIsValidated, ref Int32 postal_address_id, ref Int32 phone_number_id, ref Int32 new_payment_info_id)
        {
            bool internalTransaction = true;
            string storedProcName = "es_update_payment_info";
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                internalTransaction = false;
            }

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@old_payment_info_id", DbType.Int32, DBValue.ToDBInt32(paymentID)));
                paramCol.Add(new SqlDataParameter("@payment_name", DbType.String, DBValue.ToDBString(payment_name)));
                paramCol.Add(new SqlDataParameter("@on_behalf_of_name", DbType.String, DBValue.ToDBString(on_behalf_of_name)));
                paramCol.Add(new SqlDataParameter("@ship_to_name", DbType.String, DBValue.ToDBString(ship_to_name)));
                paramCol.Add(new SqlDataParameter("@phone_number", DbType.String, DBValue.ToDBString(phone_number)));
                paramCol.Add(new SqlDataParameter("@ssn", DbType.String, DBValue.ToDBString(ssn)));
                paramCol.Add(new SqlDataParameter("@address_1", DbType.String, DBValue.ToDBString(address_1)));
                paramCol.Add(new SqlDataParameter("@address_2", DbType.String, DBValue.ToDBString(address_2)));
                paramCol.Add(new SqlDataParameter("@city", DbType.String, DBValue.ToDBString(city)));
                paramCol.Add(new SqlDataParameter("@zip_code", DbType.String, DBValue.ToDBString(zip_code)));
                paramCol.Add(new SqlDataParameter("@country_code", DbType.String, DBValue.ToDBString(country_code)));
                paramCol.Add(new SqlDataParameter("@subdivision_code", DbType.String, DBValue.ToDBString(subdivision_code)));
                //paramCol.Add(new SqlDataParameter("@address_is_validated", DbType.Int16, DBValue.ToDBInt16(addressIsValidated)));
                paramCol.Add(new SqlDataParameter("@postal_address_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@phone_number_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@new_payment_info_id", DbType.Int32, ParameterDirection.Output));

                if (internalTransaction)
                {
                    si.Open();
                    si.BeginTransaction();
                }

                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                postal_address_id = DBValue.ToInt32(paramCol["@postal_address_id"].Value);
                phone_number_id = DBValue.ToInt32(paramCol["@phone_number_id"].Value);
                new_payment_info_id = DBValue.ToInt32(paramCol["@new_payment_info_id"].Value);

                // Commit our transaction.
                if (internalTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (internalTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                if (internalTransaction)
                    si.Close();
            }
        }

        public int UpdatePaymentInfo(PaymentInfo paymentInfo)
        {
            return UpdatePaymentInfo(paymentInfo, null);
        }

        private int UpdatePaymentInfo(PaymentInfo paymentInfo, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_update_payment_info_new";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@payment_info_id", DbType.Int32, DBValue.ToDBInt32(paymentInfo.PaymentInfoID)));
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(paymentInfo.EventID)));
                paramCol.Add(new SqlDataParameter("@group_id", DbType.Int32, DBValue.ToDBInt32(paymentInfo.GroupID)));
                paramCol.Add(new SqlDataParameter("@postal_address_id", DbType.Int32, DBValue.ToDBInt32(paymentInfo.PostalAddress.Id)));
                paramCol.Add(new SqlDataParameter("@phone_number_id", DbType.Int32, DBValue.ToDBInt32(paymentInfo.PhoneNumberID)));
                paramCol.Add(new SqlDataParameter("@payment_name", DbType.String, DBValue.ToDBString(paymentInfo.PaymentName)));
                paramCol.Add(new SqlDataParameter("@on_behalf_of_name", DbType.String, DBValue.ToDBString(paymentInfo.OnBehalfOfName)));
                paramCol.Add(new SqlDataParameter("@ship_to_name", DbType.String, DBValue.ToDBString(paymentInfo.ShipToName)));
                paramCol.Add(new SqlDataParameter("@ssn", DbType.String, DBValue.ToDBString(paymentInfo.Ssn)));
                paramCol.Add(new SqlDataParameter("@active", DbType.Boolean, DBValue.ToDBBoolean(paymentInfo.Active)));
                paramCol.Add(new SqlDataParameter("@create_date", DbType.DateTime, DBValue.ToDBDateTime(paymentInfo.CreateDate)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }

        public int InsertPaymentInfo(PaymentInfo paymentInfo)
        {
            return InsertPaymentInfo(paymentInfo, null);
        }

        private int InsertPaymentInfo(PaymentInfo paymentInfo, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_insert_payment_info";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@payment_info_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(paymentInfo.EventID)));
                paramCol.Add(new SqlDataParameter("@group_id", DbType.Int32, DBValue.ToDBInt32(paymentInfo.GroupID)));
                paramCol.Add(new SqlDataParameter("@postal_address_id", DbType.Int32, DBValue.ToDBInt32(paymentInfo.PostalAddressID)));
                paramCol.Add(new SqlDataParameter("@phone_number_id", DbType.Int32, DBValue.ToDBInt32(paymentInfo.PhoneNumberID)));
                paramCol.Add(new SqlDataParameter("@payment_name", DbType.String, DBValue.ToDBString(paymentInfo.PaymentName)));
                paramCol.Add(new SqlDataParameter("@on_behalf_of_name", DbType.String, DBValue.ToDBString(paymentInfo.OnBehalfOfName)));
                paramCol.Add(new SqlDataParameter("@ship_to_name", DbType.String, DBValue.ToDBString(paymentInfo.ShipToName)));
                paramCol.Add(new SqlDataParameter("@ssn", DbType.String, DBValue.ToDBString(paymentInfo.Ssn)));
                paramCol.Add(new SqlDataParameter("@active", DbType.Boolean, DBValue.ToDBBoolean(paymentInfo.Active)));
                paramCol.Add(new SqlDataParameter("@create_date", DbType.DateTime, DBValue.ToDBDateTime(paymentInfo.CreateDate)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    paymentInfo.PaymentInfoID = DBValue.ToInt32(paramCol["@payment_info_id"].Value);
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }

        internal string GetQSPMatchingCodeByPaymentId(int paymentInfoId)
        {

            string result = string.Empty;
            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                SqlDataParameter sqlPam = CreateSqlDataParameter(paymentInfoId, "@payment_id");
                paramCol.Add(sqlPam);
                si.Open();
                result = Convert.ToString(si.ExecuteScalar("es_get_qsp_matching_code_by_payment_id", CommandType.StoredProcedure, paramCol));
            }
            catch (Exception ex)
            {
                string s = ex.ToString();
                s = string.Empty;
                throw new Exception("GetSimilarCampaign error", ex);
            }
            finally
            {
                si.Close();
            }
            return result;
        }

        #endregion

        #region Backward Compatibility

        public Users.UnknownUser GetUserFromPreviousESubsVersionUserID(Int32 campaign_id, Int32 supporter_id, Int32 participant_id, Int32 organizer_id)
        {
            Users.UnknownUser user = null;

            bool useTransaction = false;
            string storedProcName = "es_get_member_hierarchy_backward";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@campaign_id", DbType.Int32, DBValue.ToDBInt32(campaign_id)));
                paramCol.Add(new SqlDataParameter("@supporter_id", DbType.Int32, DBValue.ToDBInt32(supporter_id)));
                paramCol.Add(new SqlDataParameter("@participant_id", DbType.Int32, DBValue.ToDBInt32(participant_id)));
                paramCol.Add(new SqlDataParameter("@organizer_id", DbType.Int32, DBValue.ToDBInt32(organizer_id)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    si.Close();
                    return null; // there is no user attached to this set of ids
                }

                // fill our objects
                try
                {
                    DataRow row = dt.Rows[0];

                    int member_hierarchy_id = DBValue.ToInt32(row["member_hierarchy_id"]);
                    user = Users.eSubsGlobalUser.LoadByHierarchyID(member_hierarchy_id);

                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return user;
        }

        #endregion

        #region Reports

        public Reports.TopSupporterCollection GetTopSupporterCollection(Int32 event_id)
        {
            Reports.TopSupporterCollection topSupporterCollection =
                new Reports.TopSupporterCollection();

            bool useTransaction = false;
            string storedProcName = "es_get_top5_supporter";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(event_id)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    si.Close();
                    return topSupporterCollection;
                }

                // fill our objects
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        string supp_name = DBValue.ToString(row["supp_name"]);
                        Decimal amount = DBValue.ToDecimal(row["amount"]);
                        DateTime create_date = DBValue.ToDateTime(row["create_date"]);

                        Reports.TopSupporter topSupporter = new Reports.TopSupporter();
                        topSupporter.Name = supp_name;
                        topSupporter.Amount = amount;
                        topSupporter.CreatedDate = create_date;

                        topSupporterCollection.Add(topSupporter);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return topSupporterCollection;
        }

        public Reports.PrecalculatedValue GetPrecalculatedValueReport()
        {
            Reports.PrecalculatedValue precalculatedValue = null;

            bool useTransaction = false;
            string storedProcName = "es_rpt_precalculatedvalue";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    precalculatedValue = new Reports.PrecalculatedValue();

                    foreach (DataRow row in dt.Rows)
                    {
                        precalculatedValue.GrandTotalRaised = (decimal)DBValue.ToInt32(row["grand_sales_total"]);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return precalculatedValue;
        }

        public Reports.FeaturedGroupCollection GetFeaturedGroupMainPageReport()
        {
            Reports.FeaturedGroupCollection featuredGroupCollection = null;

            bool useTransaction = false;
            string storedProcName = "es_rpt_featured_event_for_mainpage";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    featuredGroupCollection = new Reports.FeaturedGroupCollection();

                    foreach (DataRow row in dt.Rows)
                    {
                        featuredGroupCollection.AddFeaturedGroup(
                            DBValue.ToString(row["event_id"]),
                            DBValue.ToString(row["event_name"]),
                            DBValue.ToString(row["state"]),
                            DBValue.ToString(row["nb_member"]),
                            DBValue.ToString(row["nb_sub"]),
                            DBValue.ToDecimal(row["amount"])
                            );
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return featuredGroupCollection;
        }

        //FeaturedGroups
        public Reports.FeaturedGroupCollection GetFeaturedGroupReport()
        {
            Reports.FeaturedGroupCollection featuredGroupCollection = null;

            bool useTransaction = false;
            string storedProcName = "es_rpt_featured_event";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    featuredGroupCollection = new Reports.FeaturedGroupCollection();

                    foreach (DataRow row in dt.Rows)
                    {
                        featuredGroupCollection.AddFeaturedGroup(
                            DBValue.ToString(row["event_id"]),
                            DBValue.ToString(row["event_name"]),
                            DBValue.ToString(row["state"]),
                            DBValue.ToString(row["nb_member"]),
                            DBValue.ToString(row["nb_sub"]),
                            DBValue.ToDecimal(row["amount"])
                            );
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return featuredGroupCollection;
        }


        public Reports.PrizeMemberReport GetPrizeMemberReport(Int32 event_id)
        {
            Reports.PrizeMemberReport prizeMemberReport = null;

            bool useTransaction = false;
            string storedProcName = "es_rpt_event_member_prize_stats";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(event_id)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                //				if(dt.Rows.Count < 1) {
                //					throw new SqlDataException("No records on " + storedProcName);
                //				}

                // fill our objects
                try
                {
                    prizeMemberReport = new Reports.PrizeMemberReport();

                    foreach (DataRow row in dt.Rows)
                    {
                        string first_name = DBValue.ToString(row["first_name"]);
                        string last_name = DBValue.ToString(row["last_name"]);
                        int event_participation_id = DBValue.ToInt32(row["event_participation_id"]);
                        int nb_supp = DBValue.ToInt32(row["nb_supp"]);
                        int nb_subs = DBValue.ToInt32(row["nb_subs"]);

                        Reports.PrizeMemberRow pmrRow = new Reports.PrizeMemberRow();
                        pmrRow.FirstName = first_name;
                        pmrRow.LastName = last_name;
                        pmrRow.EventParticipantionID = event_participation_id;
                        pmrRow.NumberOfSupporters = nb_supp;
                        pmrRow.NumberOfSubs = nb_subs;

                        prizeMemberReport.AddPrizeMemberReport(pmrRow);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return prizeMemberReport;
        }

        public Reports.SupporterInvitedReport GetSupportersInvited(Int32 event_participation_id)
        {
            Reports.SupporterInvitedReport supporterInvited = null;

            bool useTransaction = false;
            string storedProcName = "es_rpt_supporters_invited";

            if (eSubsGlobalEnvironment.Create().CurrentCulture.CountryCode == ESubsGlobal.Culture.EN_CA.CountryCode && bool.Parse(ConfigurationSettings.AppSettings["ShowProfitInReports"].ToString()) == true)
                storedProcName += "_ca";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_participation_id", DbType.Int32, DBValue.ToDBInt32(event_participation_id)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                //				if(dt.Rows.Count < 1) {
                //					throw new SqlDataException("No records on " + storedProcName);
                //				}

                // fill our objects
                try
                {
                    supporterInvited = new Reports.SupporterInvitedReport();
                    foreach (DataRow row in dt.Rows)
                    {
                        string first_name = DBValue.ToString(row["first_name"]);
                        string last_name = DBValue.ToString(row["last_name"]);
                        string email_address = string.Empty;
                        if (row.Table.Columns.Contains("email_address"))
                            email_address = DBValue.ToString(row["email_address"]);

                        int nb_subs = DBValue.ToInt32(row["nb_subs"]);
                        Decimal amount = DBValue.ToDecimal(row["amount"]);
                        Decimal donationAmount = 0M;
                        if (row.Table.Columns.Contains("donation_amount") && row["donation_amount"] != null && row["donation_amount"] != DBNull.Value)
                            donationAmount = DBValue.ToDecimal(row["donation_amount"]);

                        Decimal profit = 0M;
                        if (row["profit"] != null && row["profit"] != DBNull.Value)
                            profit = (decimal)DBValue.ToDouble(row["profit"]); 

                        Decimal amount_gross = 0;
                        if (eSubsGlobalEnvironment.Create().CurrentCulture.CultureCode != null)
                        {
                            if (eSubsGlobalEnvironment.Create().CurrentCulture.CountryCode == ESubsGlobal.Culture.EN_CA.CountryCode && bool.Parse(ConfigurationSettings.AppSettings["ShowProfitInReports"].ToString()) == true)
                                amount_gross = DBValue.ToDecimal(row["amount_gross"]);
                        }

                        Decimal eFREcommerceDonationAmount = 0M;
                        if (row.Table.Columns.Contains("efrecom_donation_amount"))
                            eFREcommerceDonationAmount = DBValue.ToDecimal(row["efrecom_donation_amount"]);

                        DateTime createDate = DBValue.ToDateTime(row["create_date"]);

                        Reports.SupporterInvitedRow siRow =
                            new Reports.SupporterInvitedRow();
                        siRow.FirstName = first_name;
                        siRow.LastName = last_name;
                        siRow.EmailAddress = email_address;
                        siRow.NumberOfSubs = nb_subs;
                        siRow.Amount = amount;
                        siRow.DonationAmount = donationAmount;
                        siRow.Profit = profit;
                        siRow.AmountGross = amount_gross;
                        siRow.EFRECommerceDonationAmount = eFREcommerceDonationAmount;
                        siRow.CreateDate = createDate;
                        if (dt != null && dt.Columns.Contains("is_supp"))
                        {
                            int iSupport = 0;
                            if (!DBNull.Value.Equals(row["is_supp"]))
                            {
                                try
                                {
                                    iSupport = int.Parse(row["is_supp"].ToString());
                                }
                                catch (Exception)
                                {
                                    iSupport = 0;
                                }
                            }
                            siRow.IsSupporter = (iSupport == 1);
                        }                       

                        supporterInvited.AddSupporterInvitedRow(siRow);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return supporterInvited;
        }

        public Reports.GroupMemberReport GetGroupMemberReport(Int32 event_id)
        {
            Reports.GroupMemberReport groupMemberReport = null;

            bool useTransaction = false;
            string storedProcName = "es_rpt_group_member_report";
            if (eSubsGlobalEnvironment.Create().CurrentCulture.CountryCode == ESubsGlobal.Culture.EN_CA.CountryCode && bool.Parse(ConfigurationSettings.AppSettings["ShowProfitInReports"].ToString()) == true)
                storedProcName += "_ca";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(event_id)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                //				if(dt.Rows.Count < 1) {
                //					throw new SqlDataException("No records on " + storedProcName);
                //				}

                // fill our objects

                try
                {
                    groupMemberReport = new Reports.GroupMemberReport();

                    foreach (DataRow row in dt.Rows)
                    {
                        string member_name = DBValue.ToString(row["member_name"]);
                        int email_sent = DBValue.ToInt32(row["email_sent"]);
                        int nb_subs = DBValue.ToInt32(row["nb_subs"]);
                        Decimal amount = 0;
                        if (string.IsNullOrEmpty(row["amount"].ToString()) == false)
                            amount = DBValue.ToDecimal(row["amount"]);
                        Decimal amount_gross = 0;
                        if (eSubsGlobalEnvironment.Create().CurrentCulture.CountryCode == ESubsGlobal.Culture.EN_CA.CountryCode && bool.Parse(ConfigurationSettings.AppSettings["ShowProfitInReports"].ToString()) == true && string.IsNullOrEmpty(row["amount_gross"].ToString()) == false)
                            amount_gross = DBValue.ToDecimal(row["amount_gross"]);

                        Decimal profit = 0M;
                        if (row["profit"] != null && row["profit"] != DBNull.Value)
                            profit = (decimal)DBValue.ToDouble(row["profit"]); 

                        Reports.GroupMemberRow gmRow = new Reports.GroupMemberRow();
                        gmRow.MemberName = member_name;
                        gmRow.EmailSent = email_sent;
                        gmRow.NumberOfSubs = nb_subs;
                        gmRow.Amount = amount;
                        gmRow.AmountGross = amount_gross;
                        gmRow.Profit = profit;

                        groupMemberReport.AddGroupMemberRow(gmRow);
                    }

                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return groupMemberReport;
        }

        public Reports.GroupStat GetGroupStat(Int32 event_id)
        {
            Reports.GroupStat groupStats = null;

            bool useTransaction = false;
            string storedProcName = "es_rpt_group_stats";
            if (eSubsGlobalEnvironment.Create().CurrentCulture != null)
            {
                if (eSubsGlobalEnvironment.Create().CurrentCulture.CountryCode == ESubsGlobal.Culture.EN_CA.CountryCode && bool.Parse(ConfigurationSettings.AppSettings["ShowProfitInReports"].ToString()) == true)
                    storedProcName += "_ca";
            }
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(event_id)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                //				if(dt.Rows.Count < 1) {
                //					throw new SqlDataException("No records on " + storedProcName);
                //				}

                // fill our objects
                try
                {
                    DataRow row = dt.Rows[0];

                    int _event_id = DBValue.ToInt32(row["event_id"]);
                    int nb_members = DBValue.ToInt32(row["nb_members"]);
                    int nb_part = DBValue.ToInt32(row["nb_part"]);
                    int nb_active = DBValue.ToInt32(row["nb_active"]);
                    int nb_supp = DBValue.ToInt32(row["nb_supp"]);
                    int nb_subs = DBValue.ToInt32(row["nb_subs"]);
                    Decimal amount = DBValue.ToDecimal(row["amount"]);
                    Decimal donationAmount = 0M;
                    if (row.Table.Columns.Contains("donation_amount") && row["donation_amount"] != null && row["donation_amount"] != DBNull.Value)
                        donationAmount = DBValue.ToDecimal(row["donation_amount"]);
                    Decimal amount_gross = 0;
                    if (eSubsGlobalEnvironment.Create().CurrentCulture != null)
                    {
                        if (eSubsGlobalEnvironment.Create().CurrentCulture.CountryCode == ESubsGlobal.Culture.EN_CA.CountryCode && bool.Parse(ConfigurationSettings.AppSettings["ShowProfitInReports"].ToString()) == true)
                            amount_gross = DBValue.ToDecimal(row["amount_gross"]);
                    }

                    Decimal profit = 0M;
                    if (row["profit"] != null && row["profit"] != DBNull.Value)
                        profit = (decimal)DBValue.ToDouble(row["profit"]); 

                    groupStats = new Reports.GroupStat();
                    groupStats.EventID = _event_id;
                    groupStats.NumberOfMembers = nb_members;
                    groupStats.NumberOfParticipants = nb_part;
                    groupStats.NumberOfActiveParticipants = nb_active;
                    groupStats.NumberOfSupporters = nb_supp;
                    groupStats.NumberOfSubs = nb_subs;
                    groupStats.Amount = amount;
                    groupStats.AmountGross = amount_gross;
                    groupStats.Profit = profit;
                    groupStats.DonationAmount = donationAmount;
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return groupStats;
        }

        public Reports.CampaignSupporterReport GetCampaignSupporterReport(Int32 event_id)
        {
            Reports.CampaignSupporterReport campaignSupporterReport = null;

            bool useTransaction = false;
            string storedProcName = "es_rpt_campaign_supporter_report";
            if (eSubsGlobalEnvironment.Create().CurrentCulture.CountryCode == ESubsGlobal.Culture.EN_CA.CountryCode && bool.Parse(ConfigurationSettings.AppSettings["ShowProfitInReports"].ToString()) == true)
                storedProcName += "_ca";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(event_id)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataSet ds = si.ExecuteFetchDataSet(storedProcName, CommandType.StoredProcedure, paramCol);

                if (ds.Tables.Count < 2)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                DataTable[] dt = new DataTable[2];
                dt[0] = ds.Tables[0];
                dt[1] = ds.Tables[1];

                //				if(dt[0].Rows.Count < 1) {
                //					throw new SqlDataException("No records on " + storedProcName);
                //				}
                //
                //				if(dt[1].Rows.Count < 1) {
                //					throw new SqlDataException("No records on " + storedProcName);
                //				}

                // fill our objects
                campaignSupporterReport = new Reports.CampaignSupporterReport();
                try
                {
                    foreach (DataRow row in dt[0].Rows)
                    {
                        string supp_name = DBValue.ToString(row["supp_name"]);
                        string part_name = DBValue.ToString(row["part_name"]);
                        int nb_subs = DBValue.ToInt32(row["nb_subs"]);
                        Decimal amount = DBValue.ToDecimal(row["amount"]);
                        Decimal amount_gross = 0;
                        if (eSubsGlobalEnvironment.Create().CurrentCulture.CountryCode == ESubsGlobal.Culture.EN_CA.CountryCode && bool.Parse(ConfigurationSettings.AppSettings["ShowProfitInReports"].ToString()) == true)
                            amount_gross = DBValue.ToDecimal(row["amount_gross"]);
                        Decimal profit = DBValue.ToDecimal(row["profit"]);

                        Reports.CampaignSupporterRow csRow =
                            new Reports.CampaignSupporterRow();
                        csRow.SupporterName = supp_name;
                        csRow.ParticipantName = part_name;
                        csRow.NumberOfSubs = nb_subs;
                        csRow.Amount = amount;
                        csRow.AmountGross = amount_gross;
                        csRow.Profit = profit;

                        campaignSupporterReport.AddCampaignSupporterRow(csRow);
                    }

                    if (dt[1].Rows.Count > 0)
                    {
                        DataRow row2 = dt[1].Rows[0];

                        string _supp_name = DBValue.ToString(row2["supp_name"]);
                        string _part_name = DBValue.ToString(row2["part_name"]);
                        int _nb_subs = DBValue.ToInt32(row2["nb_subs"]);
                        Decimal _amount = DBValue.ToDecimal(row2["amount"]);
                        Decimal _amount_gross = 0;
                        if (eSubsGlobalEnvironment.Create().CurrentCulture.CountryCode == ESubsGlobal.Culture.EN_CA.CountryCode && bool.Parse(ConfigurationSettings.AppSettings["ShowProfitInReports"].ToString()) == true)
                            _amount_gross = DBValue.ToDecimal(row2["amount_gross"]);
                        Decimal _profit = DBValue.ToDecimal(row2["profit"]);

                        Reports.CampaignSupporterRow _csRow =
                            new Reports.CampaignSupporterRow();
                        _csRow.SupporterName = _supp_name;
                        _csRow.ParticipantName = _part_name;
                        _csRow.NumberOfSubs = _nb_subs;
                        _csRow.Amount = _amount;
                        _csRow.AmountGross = _amount_gross;
                        _csRow.Profit = _profit;

                        campaignSupporterReport.SetUnknownSupporter(_csRow);
                    }

                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return campaignSupporterReport;
        }

        public Reports.CampaignSummary GetCampaigSummaryReportByEventID(Int32 event_id)
        {
            Reports.CampaignSummary campaignSummary = null;

            bool useTransaction = false;
            string storedProcName = "es_rpt_campaign_summary_report";
            if (eSubsGlobalEnvironment.Create().CurrentCulture != null)
            {
                if (eSubsGlobalEnvironment.Create().CurrentCulture.CountryCode == ESubsGlobal.Culture.EN_CA.CountryCode && bool.Parse(ConfigurationSettings.AppSettings["ShowProfitInReports"].ToString()) == true)
                    storedProcName += "_ca";
            }
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(event_id)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                //if(dt.Rows.Count < 1) {
                //	throw new SqlDataException("No records on " + storedProcName);
                //}

                // fill our objects
                try
                {
                    DataRow row = dt.Rows[0];

                    int _event_id = DBValue.ToInt32(row["event_id"]);
                    int nb_group_members = DBValue.ToInt32(row["nb_group_members"]);
                    int nb_supporters = DBValue.ToInt32(row["nb_supporters"]);
                    int nb_subs = DBValue.ToInt32(row["nb_subs"]);
                    Decimal amount_sold = DBValue.ToDecimal(row["amount_sold"]);
                    Decimal donation_amount_sold = 0M;
                    if (row.Table.Columns.Contains("donation_amount_sold") && row["donation_amount_sold"] != null && row["donation_amount_sold"] != DBNull.Value)
                        donation_amount_sold = DBValue.ToDecimal(row["donation_amount_sold"]);
                    Decimal amount_gross = 0;
                    if (eSubsGlobalEnvironment.Create().CurrentCulture != null)
                    {
                        if (eSubsGlobalEnvironment.Create().CurrentCulture.CountryCode == ESubsGlobal.Culture.EN_CA.CountryCode && bool.Parse(ConfigurationSettings.AppSettings["ShowProfitInReports"].ToString()) == true)
                            amount_gross = DBValue.ToDecimal(row["amount_gross"]);
                    }

                    Decimal profit = 0M;
                    if (row["profit"] != null && row["profit"] != DBNull.Value)
                        profit = (decimal)DBValue.ToDouble(row["profit"]);  
                   
                    DateTime lastActivity = DBValue.ToDateTime(row["last_activity"]);

                    campaignSummary = new Reports.CampaignSummary();
                    campaignSummary.TotalNumberOfEmailSentToSupporters = nb_supporters;
                    campaignSummary.TotalNumberOfEmailSentToGroupMembers = nb_group_members;
                    campaignSummary.TotalNumberOfItemSold = nb_subs;
                    campaignSummary.TotalAmount = amount_sold;
                    campaignSummary.TotalDonationAmount = donation_amount_sold;
                    campaignSummary.TotalAmountGross = amount_gross;
                    campaignSummary.TotalProfit = profit;
                    campaignSummary.LastActivity = lastActivity;

                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return campaignSummary;
        }

        public Reports.LaunchedCampaignCollection GetLaunchedCampaignCollection(Int32 sponsor_id)
        {
            Reports.LaunchedCampaignCollection launchedCampaignCollection = null;

            bool useTransaction = false;
            string storedProcName = "es_get_launched_campaign";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@sponsor_id", DbType.Int32, DBValue.ToDBInt32(sponsor_id)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                //				if(dt.Rows.Count < 1) {
                //					throw new SqlDataException("No records on " + storedProcName);
                //				}

                // fill our objects
                try
                {
                    launchedCampaignCollection = new Reports.LaunchedCampaignCollection();

                    foreach (DataRow row in dt.Rows)
                    {
                        int event_id = DBValue.ToInt32(row["event_id"]);
                        string event_name = DBValue.ToString(row["event_name"]);
                        DateTime launch_date = DBValue.ToDateTime(row["launch_date"]);
                        bool active = DBValue.ToBoolean(row["active"]);

                        Reports.LaunchedCampaign lc = new Reports.LaunchedCampaign();
                        lc.EventID = event_id;
                        lc.EventName = event_name;
                        lc.LaunchDate = launch_date;
                        lc.Active = active;

                        launchedCampaignCollection.AddLaunchedCampaign(lc);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return launchedCampaignCollection;
        }

        public List<Reports.StatsBase> GetCampaignManagerStatsByReportType(Reports.CampaignManagerReport.ReportName rname, Int32 event_id)
        {
            List<Reports.StatsBase> stats = new List<Reports.StatsBase>();

            bool useTransaction = false;
            string storedProcName = "";
            switch (rname)
            {
                case GA.BDC.Core.ESubsGlobal.Reports.CampaignManagerReport.ReportName.EMAIL_OVERVIEW:
                    storedProcName = "es_get_event_email_sent";
                    break;
                case GA.BDC.Core.ESubsGlobal.Reports.CampaignManagerReport.ReportName.PARTICIPATION_CENTER:
                    storedProcName = "es_get_participant_stats_summary";
                    break;
                case GA.BDC.Core.ESubsGlobal.Reports.CampaignManagerReport.ReportName.TOP_SELLERS:
                    storedProcName = "es_get_event_sellers";
                    break;
            }
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(event_id)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    int counter = 1;
                    foreach (DataRow row in dt.Rows)
                    {
                        switch (rname)
                        {
                            case GA.BDC.Core.ESubsGlobal.Reports.CampaignManagerReport.ReportName.EMAIL_OVERVIEW:
                                stats.Add(LoadEmailOverviewStats(row));
                                break;
                            case GA.BDC.Core.ESubsGlobal.Reports.CampaignManagerReport.ReportName.PARTICIPATION_CENTER:
                                stats.Add(LoadParticipationCenterStats(row));
                                break;
                            case GA.BDC.Core.ESubsGlobal.Reports.CampaignManagerReport.ReportName.TOP_SELLERS:
                                stats.Add(LoadTopSellersStats(row, counter++));
                                break;
                        }
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return stats;
        }
        private Reports.EmailOverviewStats LoadEmailOverviewStats(DataRow row)
        {
            Reports.EmailOverviewStats email_stats = new Reports.EmailOverviewStats();
            email_stats.LaunchDate = DBValue.ToDateTime(row["launch_date"]);
            email_stats.Description = DBValue.ToString(row["email_desc"]);
            email_stats.EmailsSent = DBValue.ToInt32(row["email_sent"]);
            return email_stats;
        }
        private Reports.ParticipationCenterStats LoadParticipationCenterStats(DataRow row)
        {
            Reports.ParticipationCenterStats part_cent_stats = new Reports.ParticipationCenterStats();
            part_cent_stats.NumberOfGroupMembers = DBValue.ToInt32(row["nb_gm"]);
            part_cent_stats.NumberOfGroupMembersReceivedEmail = DBValue.ToInt32(row["nb_gm_email"]);
            part_cent_stats.NumberOfGroupMembersInvitedFriends = DBValue.ToInt32(row["gm_invited"]);
            part_cent_stats.NumberOfGroupMembersBoughtSubs = DBValue.ToInt32(row["gm_bought"]);
            return part_cent_stats;
        }
        private Reports.TopSellersStats LoadTopSellersStats(DataRow row, int counter)
        {
            Reports.TopSellersStats top_sel_stats = new Reports.TopSellersStats();
            top_sel_stats.Counter = counter;
            top_sel_stats.Name = DBValue.ToString(row["supp_name"]);
            top_sel_stats.SubscriptionsSold = DBValue.ToInt32(row["quantity"]);
            top_sel_stats.TotalAmount = DBValue.ToDecimal(row["amount"]);
            top_sel_stats.CreateDate = DBValue.ToDateTime(row["create_date"]);
            if (row.Table.Columns.Contains("donation_amount"))
                top_sel_stats.TotalDonationAmount = DBValue.ToDecimal(row["donation_amount"]);
            return top_sel_stats;
        }

        public DataSet GetCampaignChequeReport(Int32 event_id)
        {

            DataSet ReportDataSet = new DataSet();

            bool useTransaction = false;
            string storedProcName = "es_rpt_campaign_check_report";
            if (eSubsGlobalEnvironment.Create().CurrentCulture.CountryCode == ESubsGlobal.Culture.EN_CA.CountryCode && bool.Parse(ConfigurationSettings.AppSettings["ShowProfitInReports"].ToString()) == true)
                storedProcName += "_ca";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(event_id)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                ReportDataSet = si.ExecuteFetchDataSet(storedProcName, CommandType.StoredProcedure, paramCol);

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return ReportDataSet;
        }

        public Reports.Donation GetDonationAmount(Int32 donation_product_value_id, Int32 event_participation_id, Int32 event_id)
        {
            Reports.Donation donation = null;

            bool useTransaction = false;
            string storedProcName = "es_get_sales_by_product_type";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@product_type_id", DbType.Int32, DBValue.ToDBInt32(donation_product_value_id)));
                paramCol.Add(new SqlDataParameter("@event_participation_id", DbType.Int32, DBValue.ToDBInt32(event_participation_id)));
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(event_id)));                
                        
                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                if (dt.Rows.Count > 0)
                {
                    try
                    {
                        DataRow row = dt.Rows[0];

                        int nb_items = 0;
                        if (row["nb_items"] != null && row["nb_items"] != DBNull.Value)
                            nb_items = DBValue.ToInt32(row["nb_items"]);
                        Decimal amount = 0;
                        if (row["amount_sold"] != null && row["amount_sold"] != DBNull.Value)
                            amount = DBValue.ToDecimal(row["amount_sold"]);
                        Decimal profit = 0M;
                        if (row["profit"] != null && row["profit"] != DBNull.Value)
                            profit = (decimal)DBValue.ToDouble(row["profit"]);

                        donation = new Reports.Donation();
                        donation.TotalNumberOfItemSold = nb_items;
                        donation.TotalAmount = amount;
                        donation.TotalProfit = profit;
                    }
                    catch (System.Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return donation;
        }


        private SqlDataParameter CreateSqlDataParameter(object theObject, string pamName)
        {
            string fullName = theObject.GetType().FullName;
            switch (fullName)
            {
                case "System.Int16":
                    if (theObject == null || DBNull.Equals(theObject, DBNull.Value))
                        return new SqlDataParameter(pamName, DbType.Int16, DBNull.Value);
                    else
                        return new SqlDataParameter(pamName, DbType.Int16, DBValue.ToDBInt16((Int16)theObject));
                case "System.Int32":
                    if (theObject == null || DBNull.Equals(theObject, DBNull.Value))
                        return new SqlDataParameter(pamName, DbType.Int32, DBNull.Value);
                    else
                        return new SqlDataParameter(pamName, DbType.Int32, DBValue.ToDBInt32((Int32)theObject));
                case "System.Int64":
                    if (theObject == null || DBNull.Equals(theObject, DBNull.Value))
                        return new SqlDataParameter(pamName, DbType.Int64, DBNull.Value);
                    else
                        return new SqlDataParameter(pamName, DbType.Int64, DBValue.ToDBInt64((Int64)theObject));
                case "System.DateTime":
                    if (theObject == null || DBNull.Equals(theObject, DBNull.Value))
                        return new SqlDataParameter(pamName, DbType.DateTime, DBNull.Value);
                    else
                        return new SqlDataParameter(pamName, DbType.DateTime, DBValue.ToDBDateTime((DateTime)theObject));
                case "System.Boolean":
                    if (theObject == null || DBNull.Equals(theObject, DBNull.Value))
                        return new SqlDataParameter(pamName, DbType.Boolean, DBNull.Value);
                    else
                        return new SqlDataParameter(pamName, DbType.Boolean, DBValue.ToDBBoolean((bool)theObject));
                case "System.Decimal":
                    if (theObject == null || DBNull.Equals(theObject, DBNull.Value))
                        return new SqlDataParameter(pamName, DbType.Decimal, DBNull.Value);
                    else
                        return new SqlDataParameter(pamName, DbType.Decimal, DBValue.ToDBDecimal((Decimal)theObject));
                case "System.Double":
                    if (theObject == null || DBNull.Equals(theObject, DBNull.Value))
                        return new SqlDataParameter(pamName, DbType.Double, DBNull.Value);
                    else
                        return new SqlDataParameter(pamName, DbType.Double, DBValue.ToDouble((Double)theObject));
                case "System.String":
                default:
                    if (theObject == null || DBNull.Equals(theObject, DBNull.Value) || (string)theObject == string.Empty)
                        return new SqlDataParameter(pamName, DbType.String, DBNull.Value);
                    else
                        return new SqlDataParameter(pamName, DbType.String, DBValue.ToDBString((string)theObject));
            }
        }

        protected Hashtable GetCommandInfo(string fileName, string commandName)
        {
            Hashtable result = new Hashtable();
            System.Xml.XmlDocument xmlDoc = new System.Xml.XmlDocument();
            try
            {
                xmlDoc.Load(fileName);
                string xpathType = string.Format("configuration/commands/command[@name='{0}']", commandName);
                XmlNode nodeType = xmlDoc.SelectSingleNode(xpathType);
                try
                {
                    if (nodeType != null)
                    {
                        result["CommandType"] = nodeType.Attributes["type"].Value;
                    }
                }
                catch (Exception)
                {
                    result["CommandType"] = "StoredProcedure";
                }
                string xpath = string.Format("configuration/commands/command[@name='{0}']/text/addline", commandName);
                XmlNodeList nList = xmlDoc.SelectNodes(xpath);
                if (nList != null)
                {
                    //msg.Text = theNode.Attributes["type"].Value ;
                    string theCommandLine = string.Empty;
                    for (int i = 0; i < nList.Count; i++)
                    {
                        theCommandLine += nList[i].InnerText + " ";
                    }
                    result["CommandText"] = theCommandLine.Trim();
                }
            }
            catch (Exception e)
            {
                throw new ApplicationException(e.ToString());
            }
            return result;
        }

        public DataTable GetResultInDataTable(string fileName, string commandName, Hashtable pamHashTable)
        {
            Hashtable hashTB = GetCommandInfo(fileName, commandName);
            string cmdText = (string)hashTB["CommandText"];
            //
            DataTable result = null;
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                IEnumerator e = pamHashTable.Keys.GetEnumerator();
                while (e.MoveNext())
                {
                    string pamName = e.Current.ToString();
                    Object pamValue = pamHashTable[pamName];
                    SqlDataParameter sqlPam = CreateSqlDataParameter(pamValue, pamName);
                    paramCol.Add(sqlPam);
                }
                //
                if (string.Compare((string)hashTB["CommandType"], "Text", true) == 0)
                {
                    result = si.ExecuteFetchDataTable(cmdText, CommandType.Text, paramCol);
                    return result;
                }
                else
                {
                    result = si.ExecuteFetchDataTable(cmdText, CommandType.StoredProcedure, paramCol);
                    return result;
                }
            }
            catch (Exception ex)
            {
                throw new SqlDataException("Get result errors", ex);
            }
            finally
            {
                si.Close();
            }
            return result;
        }


        public DataTable GetSearchResultInDataTable(GA.BDC.Core.ESubsGlobal.Reports.GlobalSearchEvent searchEvent)
        {
            DataTable result = null;
            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                Hashtable pamHashTable = searchEvent.GetHashTableParameters();
                IEnumerator e = pamHashTable.Keys.GetEnumerator();
                while (e.MoveNext())
                {
                    string pamName = e.Current.ToString();
                    Object pamValue = pamHashTable[pamName];
                    SqlDataParameter sqlPam = CreateSqlDataParameter(pamValue, pamName);
                    paramCol.Add(sqlPam);
                }
                result = si.ExecuteFetchDataTable("es_rpt_search_event", CommandType.StoredProcedure, paramCol);
            }
            catch (Exception ex)
            {
                throw new SqlDataException("Search errors", ex);
            }
            finally
            {
                si.Close();
            }
            return result;
        }

        public DataTable GetCheckHistoty(Int32 EventID)
        {
            DataTable result = null;
            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                SqlDataParameter sqlPam = CreateSqlDataParameter(EventID, "@event_id");
                paramCol.Add(sqlPam);
                result = si.ExecuteFetchDataTable("cc_get_checks_for_group", CommandType.StoredProcedure, paramCol);
            }
            catch (Exception)
            {
            }
            finally
            {
                si.Close();
            }
            return result;
        }



        public DataTable GetOrders(Int32 EventID)
        {
            DataTable result = null;
            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                SqlDataParameter sqlPam = CreateSqlDataParameter(EventID, "@event_id");
                paramCol.Add(sqlPam);
                result = si.ExecuteFetchDataTable("cc_get_orders_for_campaign", CommandType.StoredProcedure, paramCol);
            }
            catch (Exception)
            {
            }
            finally
            {
                si.Close();
            }
            return result;
        }

        /* Supporter Stats */
        public List<Reports.StatsBase> GetParticipantZoneStatsByReportType(Reports.ParticipantZone_ReportName rname, Int32 event_id, Int32 event_participation_id)
        {
            List<Reports.StatsBase> stats = new List<Reports.StatsBase>();

            bool useTransaction = false;
            string storedProcName = "";
            switch (rname)
            {
                case GA.BDC.Core.ESubsGlobal.Reports.ParticipantZone_ReportName.EMAIL_OVERVIEW:
                    storedProcName = "es_get_event_email_sent_for_participant";
                    break;
                case GA.BDC.Core.ESubsGlobal.Reports.ParticipantZone_ReportName.SUPPORTER_CENTER:
                    storedProcName = "es_get_supporter_stats_summary";
                    break;
                case GA.BDC.Core.ESubsGlobal.Reports.ParticipantZone_ReportName.TOP_SUPPORTERS:
                    storedProcName = "es_get_event_supporter_sellers";
                    break;
            }
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(event_id)));
                paramCol.Add(new SqlDataParameter("@eventParticipationID", DbType.Int32, DBValue.ToDBInt32(event_participation_id)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    int counter = 1;
                    foreach (DataRow row in dt.Rows)
                    {
                        switch (rname)
                        {
                            case GA.BDC.Core.ESubsGlobal.Reports.ParticipantZone_ReportName.EMAIL_OVERVIEW:
                                stats.Add(LoadPZEmailOverStats(row));
                                break;
                            case GA.BDC.Core.ESubsGlobal.Reports.ParticipantZone_ReportName.SUPPORTER_CENTER:
                                stats.Add(LoadSupporterCenterStats(row));
                                break;
                            case GA.BDC.Core.ESubsGlobal.Reports.ParticipantZone_ReportName.TOP_SUPPORTERS:
                                stats.Add(LoadTopSupporterStats(row, counter++));
                                break;
                        }
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return stats;
        }

        private Reports.PZEmailOverviewStats LoadPZEmailOverStats(DataRow row)
        {
            Reports.PZEmailOverviewStats email_stats = new Reports.PZEmailOverviewStats();
            //email_stats.LaunchDate = new DateTime(DBValue.ToInt32(row["launch_year"]), DBValue.ToInt32(row["launch_month"]), DBValue.ToInt32(row["launch_day"]));
            email_stats.LaunchDate = DBValue.ToDateTime(row["launch_date"]);
            email_stats.Description = DBValue.ToString(row["email_desc"]);
            email_stats.EmailsSent = DBValue.ToInt32(row["email_sent"]);
            return email_stats;
        }

        private Reports.SupporterCenterStats LoadSupporterCenterStats(DataRow row)
        {
            Reports.SupporterCenterStats supp_cent_stats = new Reports.SupporterCenterStats();
            supp_cent_stats.NumberOfSupportersReceivedEmail = DBValue.ToInt32(row["nb_supp_email"]);
            supp_cent_stats.NumberOfSupportersBoughtSubs = DBValue.ToInt32(row["supp_bought"]);
            return supp_cent_stats;
        }

        private Reports.TopSupporterStats LoadTopSupporterStats(DataRow row, int counter)
        {
            Reports.TopSupporterStats top_supp_stats = new Reports.TopSupporterStats();
            top_supp_stats.Counter = counter;
            top_supp_stats.Name = DBValue.ToString(row["supp_name"]);
            top_supp_stats.SubscriptionsSold = DBValue.ToInt32(row["quantity"]);
            top_supp_stats.TotalAmount = DBValue.ToInt32(row["amount"]);
            if (row.Table.Columns.Contains("donation_amount"))
                top_supp_stats.TotalDonationAmount = DBValue.ToDecimal(row["donation_amount"]);
            top_supp_stats.CreateDate = DBValue.ToDateTime(row["create_date"]);
            return top_supp_stats;
        }

        // New Variable Profit Check Repors: Summary and Detail
        private Reports.ProfitCheckSummary LoadCheckSummary(DataRow row)
        {
            Reports.ProfitCheckSummary checkSummary = new Reports.ProfitCheckSummary();

            // Store database values into our business object
            checkSummary.CheckNumber = DBValue.ToString(row["cheque_number"]);
            checkSummary.CheckPeriod = DBValue.ToString(row["check_period"]);
            checkSummary.TotalItemCount = DBValue.ToInt32(row["total_item_count"]);
            checkSummary.TotalAmountPurchased = DBValue.ToDecimal(row["total_amount_purchase"]);
            checkSummary.TotalProfitAmount = DBValue.ToDecimal(row["total_profit_amount"]);
            checkSummary.ProfitPercentage = DBValue.ToDouble(row["profit_percentage"]);
            checkSummary.PaidAmount = DBValue.ToDecimal(row["paid_amount"]);
            checkSummary.PaymantStatusID = DBValue.ToInt32(row["payment_status_id"]);
            checkSummary.CheckSentDate = DBValue.ToString(row["date_check_sent"]);
            checkSummary.ProfitID = DBValue.ToInt32(row["profit_id"]);
            checkSummary.ProfitRangeID = DBValue.ToInt32(row["profit_range_id"]);

            // return the filled object
            return checkSummary;
        }

        public List<Reports.ProfitCheckSummary> GetSponsorCheckSummaryReport(int id)
        {
            // declare object(s)
            List<Reports.ProfitCheckSummary> checkSummaryList = new List<Reports.ProfitCheckSummary>();

            bool useTransaction = false;
            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            DataTable dt = null;
            try
            {
                // Package our parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, id));
                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                dt = si.ExecuteFetchDataTable("es_rpt_sponsor_check_summary_report", CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    //throw new SqlDataException("No records");
                }

                // Fill object(s)
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        checkSummaryList.Add(LoadCheckSummary(row));
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill CheckSummary object", ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return checkSummaryList;
        }

        private Reports.ProfitCheckDetail LoadCheckDetail(DataRow row)
        {
            Reports.ProfitCheckDetail checkDetail = new Reports.ProfitCheckDetail();

            // Store database values into our business object
            checkDetail.MemberName = DBValue.ToString(row["part_name"]);
            checkDetail.SupporterName = DBValue.ToString(row["supp_name"]);
            checkDetail.PaymentItemID = DBValue.ToInt32(row["payment_item_id"]);
            checkDetail.ProductTypeName = DBValue.ToString(row["product_type_name"]);
            checkDetail.OrderDetailAmount = DBValue.ToDecimal(row["order_detail_amount"]);
            checkDetail.ProfitAmount = DBValue.ToDecimal(row["profit_amount"]);
            checkDetail.ProfitPercentage = DBValue.ToDouble(row["profit_percentage"]);
            checkDetail.PurchaseDate = DBValue.ToString(row["purchasedate"]);
            checkDetail.LineQuantity = DBValue.ToInt32(row["quantity"]);
            checkDetail.LinePrice = DBValue.ToDecimal(row["price"]);
            checkDetail.ProfitID = DBValue.ToInt32(row["profit_id"]);
            checkDetail.ProfitRangeID = DBValue.ToInt32(row["profit_range_id"]);

            // return the filled object
            return checkDetail;
        }

        public List<Reports.ProfitCheckDetail> GetSponsorCheckDetailReport(int event_id, int check_number)
        {
            // declare object(s)
            List<Reports.ProfitCheckDetail> checkDetailList = new List<Reports.ProfitCheckDetail>();

            bool useTransaction = false;
            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            DataTable dt = null;
            try
            {
                // Package our parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, event_id));
                paramCol.Add(new SqlDataParameter("@cheque_number", DbType.Int32, check_number));
                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                dt = si.ExecuteFetchDataTable("es_rpt_sponsor_check_detail_report", CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    //throw new SqlDataException("No records");
                }

                // Fill object(s)
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        checkDetailList.Add(LoadCheckDetail(row));
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill CheckDetail object", ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return checkDetailList;
        }

        private Reports.ParticipantDetail LoadParticipantDetail(DataRow row)
        {
            Reports.ParticipantDetail partDetail = new Reports.ParticipantDetail();

            // Store database values into our business object
            partDetail.EventParticipantionID = DBValue.ToInt32(row["event_participation_id"]);
            partDetail.FirstName = DBValue.ToString(row["first_name"]);
            partDetail.LastName = DBValue.ToString(row["last_name"]);
            partDetail.CreatedDate = DBValue.ToDateTime(row["create_date"]);
            partDetail.ImageURL = DBValue.ToString(row["image_url"]);
            partDetail.NumberOfItemSold = DBValue.ToInt32(row["nb_subs"]);
            partDetail.Amount = DBValue.ToDecimal(row["amount"]);
            partDetail.Profit = (decimal)DBValue.ToDouble(row["profit"]);
            partDetail.FundraisingGoal = DBValue.ToDecimal(row["fundraising_goal"]);
            partDetail.PersonalizationID = DBValue.ToInt32(row["personalization_id"]);
            partDetail.ImageApprovalStatusId= DBValue.ToInt32(row["image_approval_status_id"]);
            partDetail.ImageID = DBValue.ToInt32(row["image_id"]);
            if (row.Table.Columns.Contains("total_donation_amount"))
                partDetail.DonationAmount = DBValue.ToDecimal(row["total_donation_amount"]);
            if (row.Table.Columns.Contains("total_supporters"))
                partDetail.TotalSupporters = DBValue.ToInt32(row["total_supporters"]);
            if (row.Table.Columns.Contains("total_donors"))
                partDetail.TotalDonars = DBValue.ToInt32(row["total_donors"]);

            // return the filled object
            return partDetail;
        }

        public List<Reports.ParticipantDetail> GetParticipantsByHierarchyAndEventID(int member_hierarchy_id, int eventID, string keyword)
        {
            // declare object(s)
            List<Reports.ParticipantDetail> list = new List<Reports.ParticipantDetail>();

            bool useTransaction = false;
            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            DataTable dt = null;
            try
            {
                // Package our parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@member_hierarchy_id", DbType.Int32, DBValue.ToDBInt32(member_hierarchy_id)));
                paramCol.Add(new SqlDataParameter("@eventID", DbType.Int32, DBValue.ToDBInt32(eventID)));
                paramCol.Add(new SqlDataParameter("@keyword", DbType.String, DBValue.ToDBString(keyword)));
                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                dt = si.ExecuteFetchDataTable("es_get_choose_member", CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    //throw new SqlDataException("No records");
                }

                // Fill object(s)
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        list.Add(LoadParticipantDetail(row));
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill ParticipantDetail object", ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return list;
        }

        public List<Reports.ParticipantDetail> GetParticipantsByPartnerID(int partner_id)
        {
            // declare object(s)
            List<Reports.ParticipantDetail> list = new List<Reports.ParticipantDetail>();

            bool useTransaction = false;
            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            DataTable dt = null;
            try
            {
                // Package our parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32(partner_id)));
                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                dt = si.ExecuteFetchDataTable("es_get_participants_by_partner_id", CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    //throw new SqlDataException("No records");
                }

                // Fill object(s)
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        list.Add(LoadParticipantDetail(row));
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill ParticipantDetail object", ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return list;
        }

        public Reports.TouchInfoSalesReport GetSalesReportByTouchInfoID(Int32 touch_info_id)
        {
            Reports.TouchInfoSalesReport touchInfoSales = null;

            bool useTransaction = false;
            string storedProcName = "es_get_sales_by_touch_info_id";

            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@touch_info_id", DbType.Int32, DBValue.ToDBInt32(touch_info_id)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                //if(dt.Rows.Count < 1) {
                //	throw new SqlDataException("No records on " + storedProcName);
                //}

                // fill our objects
                try
                {                    
                    if (dt.Rows.Count > 0)
                    {
                        touchInfoSales = new Reports.TouchInfoSalesReport();
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            DataRow row = dt.Rows[i];
                            touchInfoSales.SalesStat.Add(new Reports.TouchInfoSalesStat(DBValue.ToDecimal(row["order_amount"]), DBValue.ToInt32(row["quantity"]), DBValue.ToInt32(row["member_hierarchy_id"]),
                                                                                        DBValue.ToInt32(row["event_participation_id"]), DBValue.ToInt32(row["touch_id"])));
                            touchInfoSales.TouchInfoID = DBValue.ToInt32(row["touch_info_id"]);   
                        }                        
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return touchInfoSales;
        }
        #endregion

        #region Merge

        public DataSet GetSimilarCampaigns(Int32 EventID)
        {
            DataSet result = null;
            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                SqlDataParameter sqlPam = CreateSqlDataParameter(EventID, "@event_id");
                paramCol.Add(sqlPam);
                result = si.ExecuteFetchDataSet("dbo.cc_get_similar_campaigns", CommandType.StoredProcedure, paramCol);
            }
            catch (Exception ex)
            {
                string s_error = ex.ToString();
                s_error = "";
                throw new Exception("GetSimilarCampaign error", ex);
            }
            finally
            {
                si.Close();
            }
            return result;
        }

        public int CheckIfCampaignHasCheck(Int32 CampaignID)
        {
            int check = int.MinValue;
            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                SqlDataParameter sqlPam = CreateSqlDataParameter(CampaignID, "@event_id");
                paramCol.Add(sqlPam);
                si.Open();
                check = Convert.ToInt32(si.ExecuteScalar("select event_id from cc_check_diff_closed_period where event_id = @event_id", CommandType.Text, paramCol));
            }
            catch (Exception ex)
            {
                string s = ex.ToString();
                s = string.Empty;
                throw new Exception("GetSimilarCampaign error", ex);
            }
            finally
            {
                si.Close();
            }
            return check;
        }

        public int IsEventActive(Int32 CampaignID)
        {
            int check = 0;
            SqlInterface si = new SqlInterface(dataProvider, connectionString, 300);
            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                SqlDataParameter sqlPam = CreateSqlDataParameter(CampaignID, "@event_id");
                paramCol.Add(sqlPam);
                si.Open();
                check = Convert.ToInt32(si.ExecuteScalar("select event_id from event where event_id = @event_id and active = 1", CommandType.Text, paramCol));
            }
            catch (Exception ex)
            {
                string s = ex.ToString();
                s = string.Empty;
            }
            finally
            {
                si.Close();
            }
            return check;
        }

        public DataTable GetMergeHistory(int EventID)
        {

            DataTable dt = null;
            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                SqlDataParameter sqlPam = CreateSqlDataParameter(EventID, "@event_id");
                paramCol.Add(sqlPam);
                dt = si.ExecuteFetchDataTable(
                    @"SELECT old_campaign, original_campaign, date_changed, user_name, comment 
FROM campaign_merges 
WHERE 
original_campaign = @event_id OR old_campaign = @event_id 
ORDER BY date_changed desc",
                    CommandType.Text, paramCol);
            }
            catch (Exception ex)
            {
                throw new Exception("GetSimilarCampaign error", ex);
            }
            finally
            {
                si.Close();
            }
            return dt;
        }

        public DataTable GetUserTouchIDs(int memberID)
        {

            DataTable dt = null;
            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                SqlDataParameter sqlPam = CreateSqlDataParameter(memberID, "@member_id");
                paramCol.Add(sqlPam);
                dt = si.ExecuteFetchDataTable(
@"Select t.touch_id from dbo.touch t
inner join dbo.event_participation ep on t.event_participation_id = ep.event_participation_id
inner join dbo.member_hierarchy mh on ep.member_hierarchy_id = mh.member_hierarchy_id
inner join dbo.member m on mh.member_id = m.member_id
where m.member_id=@member_id",
                    CommandType.Text, paramCol);
            }
            catch (Exception ex)
            {
                throw new Exception("GetSimilarCampaign error", ex);
            }
            finally
            {
                si.Close();
            }
            return dt;
        }


        private PostalAddress LoadPostalAddress(DataRow row)
        {
            PostalAddress pa = new PostalAddress();

            // Store database values into our business object
            pa.Id = DBValue.ToInt32(row["postal_address_id"]);
            pa.Address1 = DBValue.ToString(row["address_1"]);
            pa.Address2 = DBValue.ToString(row["address_2"]);
            pa.City = DBValue.ToString(row["city"]);
            pa.CountryCode = Common.CountryCode.Create(DBValue.ToString(row["country_code"]));
            pa.SubDivisionCode = DBValue.ToString(row["subdivision_code"]);
            pa.ZipCode = DBValue.ToString(row["zip_code"]);
            // create_date
            return pa;
        }
        public PostalAddressCollection GetPaymentAddress(DateTime lowerDate, DateTime upperDate)
        {

            DataTable dt = null;
            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                SqlDataParameter sqlPam = null;

                string sqlString = string.Empty;

                if (lowerDate == DateTime.MinValue || upperDate == DateTime.MinValue)
                {
                    sqlString = @"SELECT top 100 pi.active, pa.*
FROM payment_info pi
INNER JOIN postal_address pa on pi.postal_address_id = pa.postal_address_id
WHERE pi.active = 1";
                }
                else if (lowerDate == upperDate && lowerDate != DateTime.MinValue)
                {
                    sqlString = @"SELECT pi.active, pa.*
FROM payment_info pi
INNER JOIN postal_address pa on pi.postal_address_id = pa.postal_address_id
WHERE pi.active = 1 and pi.create_date = @lowerDate";

                    sqlPam = CreateSqlDataParameter(lowerDate, "@lowerDate");
                    paramCol.Add(sqlPam);
                }
                else if (lowerDate < upperDate)
                {
                    sqlString = @"SELECT pi.active, pa.*
FROM payment_info pi
INNER JOIN postal_address pa on pi.postal_address_id = pa.postal_address_id
WHERE pi.active = 1 and pi.create_date >= @lowerDate and pi.create_date <= @upperDate";


                    sqlPam = CreateSqlDataParameter(lowerDate, "@lowerDate");
                    paramCol.Add(sqlPam);
                    sqlPam = CreateSqlDataParameter(upperDate, "@upperDate");
                    paramCol.Add(sqlPam);

                }
                else
                    return null;

                dt = si.ExecuteFetchDataTable(sqlString, CommandType.Text, paramCol);
                if (dt != null && dt.Rows.Count > 0)
                {
                    PostalAddressCollection paCollection = new PostalAddressCollection();
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        paCollection.Add(LoadPostalAddress(dt.Rows[i]));
                    }
                    return paCollection;
                }
                else
                    return null;
            }
            catch (Exception ex)
            {
                throw new Exception("GetSimilarCampaign error", ex);
            }
            finally
            {
                si.Close();
            }
            return null;
        }



        public int DisableEvent(SqlInterface si, int event_id, bool active)
        {
            bool useTransaction = false;
            bool thisConnection = true;

            string storedProcName = "dbo.cc_end_event";
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                thisConnection = false;
            }

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(CreateSqlDataParameter(event_id, "@event_id"));
                paramCol.Add(CreateSqlDataParameter(active, "@end_event"));
                paramCol.Add(new SqlDataParameter("@return", DbType.Int32, ParameterDirection.ReturnValue));

                if (thisConnection)
                    si.Open();

                if (useTransaction && thisConnection)
                    si.BeginTransaction();

                int rowAffected = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // check the return value
                int returnValue = DBValue.ToInt32(paramCol["@return"].Value);
                if (returnValue != 0)
                    return returnValue;

                // Commit our transaction.
                if (useTransaction && thisConnection)
                    si.Commit();


            }
            catch
            {
                // Rollback on error.
                if (useTransaction && thisConnection)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                if (thisConnection)
                    si.Close();
            }
            return 0;
        }

        public int UnSubscribeEvent(SqlInterface si, int event_participation_id, bool is_unsubscribe)
        {
            bool useTransaction = false;
            bool thisConnection = true;

            string storedProcName = "dbo.cc_unsubscribe";
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                thisConnection = false;
            }

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(CreateSqlDataParameter(event_participation_id, "@event_participation_id"));
                paramCol.Add(CreateSqlDataParameter(is_unsubscribe, "@is_unsubscribe"));
                paramCol.Add(new SqlDataParameter("@return", DbType.Int32, ParameterDirection.ReturnValue));

                if (thisConnection)
                    si.Open();

                if (useTransaction && thisConnection)
                    si.BeginTransaction();

                int rowAffected = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // check the return value
                int returnValue = DBValue.ToInt32(paramCol["@return"].Value);
                if (returnValue != 0)
                    return returnValue;

                // Commit our transaction.
                if (useTransaction && thisConnection)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction && thisConnection)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                if (thisConnection)
                    si.Close();
            }
            return 0;
        }

        public int MoveParticipants(SqlInterface si, int good_group_id, int good_event_id,
            int rip_group_id, int merged_event_id, string userName, string mergedComments)
        {
            bool useTransaction = false;
            bool thisConnection = true;

            string storedProcName = "dbo.cc_merge_group";
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                thisConnection = false;
            }

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(CreateSqlDataParameter(good_group_id, "@good_group_id"));
                paramCol.Add(CreateSqlDataParameter(good_event_id, "@good_event_id"));
                paramCol.Add(CreateSqlDataParameter(rip_group_id, "@rip_group_id"));
                paramCol.Add(CreateSqlDataParameter(merged_event_id, "@rip_event_id"));
                paramCol.Add(CreateSqlDataParameter(userName, "@userName"));
                paramCol.Add(CreateSqlDataParameter(mergedComments, "@mergedComments"));
                paramCol.Add(new SqlDataParameter("@return", DbType.Int32, ParameterDirection.ReturnValue));

                if (thisConnection)
                    si.Open();

                if (useTransaction && thisConnection)
                    si.BeginTransaction();

                int rowAffected = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // check the return value
                int returnValue = DBValue.ToInt32(paramCol["@return"].Value);
                if (returnValue != 0)
                    return returnValue;

                // Commit our transaction.
                if (useTransaction && thisConnection)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction && thisConnection)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                if (thisConnection)
                    si.Close();
            }
            return 0;
        }


        public int MergeGroupController(int org_event_id, int org_group_id,
            int merged_event_id, int merged_event_participation_id,
            int merged_group_id, string userName,
             string mergedComments)
        {
            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            try
            {
                int result = 0;
                // open the connection
                si.Open();
                // begin the transaction
                si.BeginTransaction();

                //1- disable campaign :
                result = DisableEvent(si, merged_event_id, true);
                if (result != 0)
                {
                    // Rollback on error.
                    si.Rollback();
                    return result;
                }

                //2- Unsubscibe
                result = UnSubscribeEvent(si, merged_event_participation_id, true);
                if (result != 0)
                {
                    // Rollback on error.
                    si.Rollback();
                    return result;
                }

                //3- Move participants to other campaign
                result = MoveParticipants(si, org_group_id, org_event_id, merged_group_id,
                    merged_event_id, userName, mergedComments);
                if (result != 0)
                {
                    // Rollback on error.
                    si.Rollback();
                    return result;
                }
                si.Commit();
            }
            catch (Exception ex)
            {
                // Rollback on error.
                si.Rollback();
                throw new Exception("MergeGroupController error", ex);
            }
            finally
            {
                si.Close();
            }
            return 0;
        }


        #endregion

        #region Event Participation

        public EventParticipation[] GetEventParticipationsByMemberHierarchyID(int member_hierarchy_id)
        {
            EventParticipation[] eventParticipation = null;

            bool useTransaction = false;
            string storedProcName = "es_get_event_participation_by_member_hierarchy_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@member_hierarchy_id", DbType.Int32, DBValue.ToDBInt32(member_hierarchy_id)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    DataIntegrityHelper.ErrorCode code = DataIntegrityHelper.CreateMissingEventParticipationAndPersonalization(member_hierarchy_id);
                    if (code != DataIntegrityHelper.ErrorCode.OK)
                        throw new SqlDataException("Error creating Missing Event Participation And Personalization: " + storedProcName +
                                                   " ERRORCODE=" + code.ToString() + ", mh_id=" + member_hierarchy_id);
                    dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);
                }
                else
                {
                    eventParticipation = new EventParticipation[dt.Rows.Count];
                }

                // fill our objects
                try
                {
                    int index = 0;
                    foreach (DataRow row in dt.Rows)
                    {
                        int event_participation_id = DBValue.ToInt32(row["event_participation_id"]);
                        eventParticipation[index++] = EventParticipation.GetEventParticipationByEventParticipationID(event_participation_id);
                    }

                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return eventParticipation;
        }

        public EventParticipation GetEventParticipationByMemberHierarchyID(int member_hierarchy_id, int eventID)
        {
            EventParticipation eventParticipation = null;

            bool useTransaction = false;
            string storedProcName = "es_get_event_participation_by_member_hierarchy_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@member_hierarchy_id", DbType.Int32, DBValue.ToDBInt32(member_hierarchy_id)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                string detail_msg = string.Empty;
                if (dt.Rows.Count < 1)
                {
                    DataIntegrityHelper.ErrorCode code = DataIntegrityHelper.CreateMissingEventParticipationAndPersonalization(member_hierarchy_id);
                    if (code != DataIntegrityHelper.ErrorCode.OK)
                        throw new SqlDataException("Error creating Missing Event Participation And Personalization: " + storedProcName + 
                                                   " ERRORCODE=" + code.ToString() + ", mh_id=" + member_hierarchy_id);
                    
                    dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);
                    if (dt == null)
                        detail_msg = "Code = " + code.ToString() + ", 'dt' is Null";
                    else
                        detail_msg = "Code = " + code.ToString() + ", 'dt' is Not Null";
                }

                // fill our objects
                try
                {
                    if (eventID < 0)
                    {
                        DataRow row = dt.Rows[0];

                        int event_participation_id = DBValue.ToInt32(row["event_participation_id"]);
                        eventParticipation = EventParticipation.GetEventParticipationByEventParticipationID(event_participation_id);
                    }
                    else
                    {
                        foreach (DataRow row in dt.Rows)
                        {
                            int event_participation_id = DBValue.ToInt32(row["event_participation_id"]);
                            eventParticipation = EventParticipation.GetEventParticipationByEventParticipationID(event_participation_id);
                            if (eventParticipation.EventID == eventID)
                            {
                                break;
                            }
                        }
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName + ", Detail Msg : " + detail_msg + ", " +
                                               "mh_id = " + member_hierarchy_id + ", " +
                                               "e_id = " + eventID, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return eventParticipation;
        }

        public EventParticipationStatus InsertEventParticipation(Int32 event_id, Int32 member_hierarchy_id,
            Int32 participation_channel_id, string salutation, int coppaMonth, int coppaYear,
            bool agreeToTermsServices, bool holidayReminders, ref Int32 event_participation_id)
        {
            return InsertEventParticipation(null, event_id, member_hierarchy_id,
                participation_channel_id, salutation, coppaMonth, coppaYear, agreeToTermsServices, holidayReminders, ref event_participation_id);
        }

        public EventParticipationStatus InsertEventParticipation(SqlInterface si, Int32 event_id, Int32 member_hierarchy_id,
            Int32 participation_channel_id, string salutation, int coppaMonth, int coppaYear, bool agreeToTermsServices, bool holidayReminders,
            ref Int32 event_participation_id)
        {
            EventParticipationStatus statusCode = EventParticipationStatus.OK;
            bool internalTransaction = true;
            int returnValue = 0;
            string serror = string.Empty;

            string storedProcName = "es_create_event_participation";

#if TESTNEWPROCEDURE 
			storedProcName = "test_es_create_event_participation" ;
#endif
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                internalTransaction = false;
            }

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(event_id)));
                paramCol.Add(new SqlDataParameter("@member_hierarchy_id", DbType.Int32, DBValue.ToDBInt32(member_hierarchy_id)));
                paramCol.Add(new SqlDataParameter("@participation_channel_id", DbType.Int32, DBValue.ToDBInt32(participation_channel_id)));
                paramCol.Add(new SqlDataParameter("@salutation", DbType.String, DBValue.ToDBString(salutation)));
                paramCol.Add(new SqlDataParameter("@coppa_month", DbType.Int32, DBValue.ToDBInt32(coppaMonth)));
                paramCol.Add(new SqlDataParameter("@coppa_year", DbType.Int32, DBValue.ToDBInt32(coppaYear)));
                paramCol.Add(new SqlDataParameter("@agree_term_services", DbType.Byte, DBValue.ToByte(agreeToTermsServices?(byte)1:(byte)0)));
                paramCol.Add(new SqlDataParameter("@holiday_reminders", DbType.Byte, DBValue.ToByte(holidayReminders ? (byte)1 : (byte)0)));
                paramCol.Add(new SqlDataParameter("@event_participation_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@return", DbType.Int32, ParameterDirection.ReturnValue));

                if (internalTransaction)
                {
                    si.Open();
                    si.BeginTransaction();
                }

                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);
                returnValue = DBValue.ToInt32(paramCol["@return"].Value);
                // fill our objects
                try
                {
                    event_participation_id = DBValue.ToInt32(paramCol["@event_participation_id"].Value);
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                
                if (returnValue == 1)
                    statusCode = EventParticipationStatus.EVENT_PARTICIPATION_ALREADY_EXISTS;
                else if (returnValue != 0)
                    statusCode = EventParticipationStatus.UNKNOW_ERROR;                

                // Commit our transaction.
                if (internalTransaction)
                    si.Commit();

            }
            catch (System.Exception ex)
            {
                serror = ex.Message;
                // Rollback on error.
                if (internalTransaction)
                    si.Rollback();
                statusCode = EventParticipationStatus.UNKNOW_ERROR;
            }
            finally
            {
                // Always close connection.
                if (internalTransaction)
                    si.Close();
            }
            if (statusCode != EventParticipationStatus.OK)
            {
                throw new SqlDataException("[InsertEventParticipation] ErrorMsg = '" + serror + "', ReturnValue = " + returnValue + ", StatusCode = " + statusCode + ", e_id = " + event_id +
                                           ", mh_id = " + member_hierarchy_id + ", pc_id = " + participation_channel_id + ", salut = " + salutation + ", cop_m = " + coppaMonth +
                                           ", cop_y = " + coppaYear + ", aterm = " + agreeToTermsServices + ", holid = " + holidayReminders);
            }
            else
                return statusCode;
        }

        public EventParticipationStatus UpdateEventParticipation(Int32 event_participation_id, Int32 event_id, Int32 member_hierarchy_id,
            Int32 participation_channel_id, string salutation, int coppaMonth, int coppaYear, bool agreeToTermsServices, bool holidayReminder)
        {
            return UpdateEventParticipation(null, event_participation_id, event_id, member_hierarchy_id,
                    participation_channel_id, salutation, coppaMonth, coppaYear, agreeToTermsServices, holidayReminder);
        }

        public EventParticipationStatus UpdateEventParticipation(SqlInterface si, Int32 event_participation_id, Int32 event_id, Int32 member_hierarchy_id,
            Int32 participation_channel_id, string salutation, int coppaMonth, int coppaYear, bool agreeToTermsServices, bool holidayReminder)
        {
            bool internalTransaction = true;

            string storedProcName = "es_update_event_participation";

            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                internalTransaction = false;
            }

            EventParticipationStatus status = EventParticipationStatus.OK;

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_participation_id", DbType.Int32, DBValue.ToDBInt32(event_participation_id)));
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(event_id)));
                paramCol.Add(new SqlDataParameter("@member_hierarchy_id", DbType.Int32, DBValue.ToDBInt32(member_hierarchy_id)));
                paramCol.Add(new SqlDataParameter("@participation_channel_id", DbType.Int32, DBValue.ToDBInt32(participation_channel_id)));
                paramCol.Add(new SqlDataParameter("@salutation", DbType.String, DBValue.ToDBString(salutation)));
                paramCol.Add(new SqlDataParameter("@coppa_month", DbType.Int32, DBValue.ToDBInt32(coppaMonth)));
                paramCol.Add(new SqlDataParameter("@coppa_year", DbType.Int32, DBValue.ToDBInt32(coppaYear)));
                paramCol.Add(new SqlDataParameter("@agree_term_services", DbType.Byte, DBValue.ToByte(agreeToTermsServices ? (byte)1 : (byte)0)));
                paramCol.Add(new SqlDataParameter("@holiday_reminders", DbType.Byte, DBValue.ToByte(holidayReminder ? (byte)1 : (byte)0)));                

                paramCol.Add(new SqlDataParameter("@return", DbType.Int32, ParameterDirection.ReturnValue));

                if (internalTransaction)
                {
                    si.Open();
                    si.BeginTransaction();
                }

                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);
                int returnValue = DBValue.ToInt32(paramCol["@return"].Value);

                switch (returnValue)
                {
                    case 0:
                        status = EventParticipationStatus.OK;
                        break;
                    default:
                        status = EventParticipationStatus.UNKNOW_ERROR;
                        break;
                }

                // Commit our transaction.
                if (internalTransaction)
                    si.Commit();
            }
            catch (System.Exception ex)
            {
                // Rollback on error.
                if (internalTransaction)
                    si.Rollback();

                // throw exception
                throw ex;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return status;
        }

        private EventParticipation LoadEventParticipation(DataRow row)
        {
            EventParticipation eventParticipation = new EventParticipation();

            eventParticipation.EventID = DBValue.ToInt32(row["event_id"]);
            eventParticipation.EventParticipationID = DBValue.ToInt32(row["event_participation_id"]);
            eventParticipation.MemberHierarchyID = DBValue.ToInt32(row["member_hierarchy_id"]);
            //			if (row.Table.Columns.Contains("salutation"))
            eventParticipation.Salutation = DBValue.ToString(row["salutation"]);
            eventParticipation.ParticipationChannel.ParticipationChannelID = DBValue.ToInt32(row["participation_channel_id"]);
            eventParticipation.ParticipationChannel.Name = DBValue.ToString(row["participation_channel_name"]);
            eventParticipation.CoppaMonth = DBValue.ToInt32(row["coppa_month"]);
            eventParticipation.CoppaYear = DBValue.ToInt32(row["coppa_year"]);
            eventParticipation.AgreeToTermServices = DBValue.ToBoolean(row["agree_term_services"]);

            return eventParticipation;
        }

        public EventParticipation GetEventParticipationByEventParticipationID(Int32 eventParticipationID)
        {
            EventParticipation eventParticipation = null;

            bool useTransaction = false;
            string storedProcName = "es_get_event_participation_by_event_participation_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@eventParticipationID", DbType.Int32, DBValue.ToDBInt32(eventParticipationID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    //efundraising.Diagnostics.Logger.LogError("No records on " + storedProcName);
                    //throw new SqlDataException("No records on " + storedProcName);
                    return null;
                }

                // fill our objects
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        int event_participation_id = DBValue.ToInt32(row["event_participation_id"]);
                        int event_id = DBValue.ToInt32(row["event_id"]);
                        int member_hierarchy_id = DBValue.ToInt32(row["member_hierarchy_id"]);
                        int participation_channel_id = DBValue.ToInt32(row["participation_channel_id"]);
                        DateTime create_date = DBValue.ToDateTime(row["create_date"]);
                        string participation_channel_name = DBValue.ToString(row["participation_channel_name"]);
                        string salutation = string.Empty;
                        //if (row.Table.Columns.Contains("salutation"))
                        salutation = DBValue.ToString(row["salutation"]);


                        eventParticipation = new EventParticipation();
                        eventParticipation.EventParticipationID = event_participation_id;
                        eventParticipation.EventID = event_id;
                        eventParticipation.MemberHierarchyID = member_hierarchy_id;
                        eventParticipation.ParticipationChannel.ParticipationChannelID = participation_channel_id;
                        eventParticipation.ParticipationChannel.Name = participation_channel_name;
                        eventParticipation.Salutation = salutation;
                        if (row.Table.Columns.Contains("holiday_reminders"))
                     {
                         eventParticipation.HolidayReminders = (bool)DBValue.ToBoolean(row["holiday_reminders"]);
                     }

                        if (row["coppa_year"] != null)
                        {
                            eventParticipation.CoppaYear = DBValue.ToInt32(row["coppa_year"]);
                        }
                        if (row["coppa_month"] != null)
                        {
                            eventParticipation.CoppaMonth = DBValue.ToInt32(row["coppa_month"]);
                        }
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return eventParticipation;
        }

        public EventParticipation[] GetEventParticipationsByFacebookID(int facebookID)
        {
            ArrayList eventParticipations = new ArrayList();

            bool useTransaction = false;
            string storedProcName = "es_get_event_participations_by_facebook_id";
            string query = "SELECT     " +
                            "ep.event_participation_id" +
                            "	, ep.event_id" +
                            "	, ep.member_hierarchy_id" +
                            "	, ep.participation_channel_id" +
                            "	, ep.salutation" +
                            "	, pc.participation_channel_name	" +
                            "   , ep.coppa_month" +
                            "   , ep.coppa_year" +
                            "   , ep.agree_term_services" +
                            "FROM         " +
                            "	event_participation ep" +
                            "	LEFT JOIN participation_channel pc" +
                            "	ON ep.participation_channel_id = pc.participation_channel_id " +
                            "	inner join member_hierarchy mh" +
                            "	on mh.member_hierarchy_id = ep.member_hierarchy_id" +
                            "	inner join member m" +
                            "	on mh.member_id = m.member_id " +
                            "WHERE     " +
                            "	(m.facebook_id = '@facebook_id')".Replace("@facebook_id", facebookID.ToString());

            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                //paramCol.Add(new SqlDataParameter("@facebook_id", DbType.Int32, DBValue.ToDBInt32(facebookID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                //DataTable dt = si.ExecuteFetchDataTable( storedProcName, CommandType.StoredProcedure, paramCol);
                DataTable dt = si.ExecuteFetchDataTable(query, CommandType.Text, null);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        eventParticipations.Add(LoadEventParticipation(row));
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return (EventParticipation[])eventParticipations.ToArray(typeof(EventParticipation));
        }


        public EventParticipation GetEventParticipationByTouchID(int touchID)
        {
            EventParticipation eventParticipation = new EventParticipation();

            bool useTransaction = false;
            string storedProcName = "es_get_event_participation_by_touch_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@touch_id", DbType.Int32, DBValue.ToDBInt32(touchID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        eventParticipation = LoadEventParticipation(row);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return eventParticipation;
        }

        /*
        public int InsertEventParticipation(Int32 event_id, Int32 member_hierarchy_id, Int32 participation_channel_id, ref Int32 event_participation_id) {
            bool useTransaction = false;
            int rowAffected = 0;

            string storedProcName = "es_create_event_participation";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(event_id)));
                paramCol.Add(new SqlDataParameter("@member_hierarchy_id", DbType.Int32, DBValue.ToDBInt32(member_hierarchy_id)));
                paramCol.Add(new SqlDataParameter("@participation_channel_id", DbType.Int32, DBValue.ToDBInt32(participation_channel_id)));
                paramCol.Add(new SqlDataParameter("@event_participation_id", DbType.Int32, ParameterDirection.Output));
                if(useTransaction)
                    si.BeginTransaction();

                si.Open();
		
                rowAffected = si.ExecuteNonQuery( storedProcName, CommandType.StoredProcedure, paramCol);

                if(rowAffected < 1) {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                event_participation_id = DBValue.ToInt32(paramCol["@event_participation_id"].Value);

                // Commit our transaction.
                if(useTransaction) 
                    si.Commit();
            } catch {
                // Rollback on error.
                if(useTransaction)
                    si.Rollback(); 

                // throw exception
                throw;
            } finally {
                // Always close connection.
                si.Close();
            }
            return rowAffected;
        }*/

        #endregion

        #region Event

        internal InsertUpdateEventStatus UpdateEvent(Int32 event_id, String event_name, DateTime end_date, String redirect, String comments, bool active, bool salesRep,bool donation)
        {
            return this.UpdateEvent(event_id, event_name, end_date, redirect, comments, active, salesRep, 1, donation, DateTime.MinValue, null, double.MinValue);
        }

        internal InsertUpdateEventStatus UpdateEvent(Int32 event_id, String event_name, DateTime end_date, String redirect, String comments, bool active, bool salesRep, int groupTypeID, bool donation, DateTime date_of_event, String culture_code, double profitCalculated)
        {
            bool useTransaction = false;
            string storedProcName = "es_update_event";

#if TESTNEWPROCEDURE 
			storedProcName = "test_es_update_event";
#endif

            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            InsertUpdateEventStatus status = InsertUpdateEventStatus.OK;

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(event_id)));
                paramCol.Add(new SqlDataParameter("@event_name", DbType.String, DBValue.ToDBString(event_name)));
                paramCol.Add(new SqlDataParameter("@end_date", DbType.DateTime, DBValue.ToDBDateTime(end_date)));
                paramCol.Add(new SqlDataParameter("@redirect", DbType.String, DBValue.ToDBString(redirect)));
                paramCol.Add(new SqlDataParameter("@comments", DbType.String, DBValue.ToDBString(comments)));
                paramCol.Add(new SqlDataParameter("@active", DbType.String, DBValue.ToDBInt32((active ? 1 : 0))));
                paramCol.Add(new SqlDataParameter("@want_sales_rep_call", DbType.Boolean, DBValue.ToDBBoolean(salesRep)));
                paramCol.Add(new SqlDataParameter("@group_type_id", DbType.Int32, DBValue.ToDBInt32(groupTypeID)));
                paramCol.Add(new SqlDataParameter("@donation", DbType.Boolean, DBValue.ToDBBoolean(donation)));
                paramCol.Add(new SqlDataParameter("@date_of_event", DbType.DateTime, DBValue.ToDBDateTime(date_of_event)));
                paramCol.Add(new SqlDataParameter("@culture_code", DbType.String, DBValue.ToDBString(culture_code)));
                paramCol.Add(new SqlDataParameter("@profit_calculated", DbType.Double, DBValue.ToDBDouble(profitCalculated)));
                paramCol.Add(new SqlDataParameter("@return", DbType.Int32, ParameterDirection.ReturnValue));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);
                int returnValue = int.Parse(paramCol["@return"].Value.ToString());

                switch (returnValue)
                {
                    case 1:
                        status = InsertUpdateEventStatus.EVENT_NAME_OR_REDIRECT_ALREADY_EXISTS;
                        break;
                    case 0:
                        status = InsertUpdateEventStatus.OK;
                        break;
                    default:
                        status = InsertUpdateEventStatus.INTERNAL_ERROR;
                        break;
                }


                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return status;
        }

        // If exist return member_id. Otherwise return int.MinValue.
        internal int IsExistingRedirect(string redirect)
        {
            int eventID = int.MinValue;
            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                SqlDataParameter sqlPam = CreateSqlDataParameter(redirect, "@redirect");
                paramCol.Add(sqlPam);
                si.Open();
                object theObj = si.ExecuteScalar("select event_id from event e where e.redirect = @redirect and e.active=1",
                    CommandType.Text, paramCol);
                if (theObj != null)
                    eventID = Convert.ToInt32(theObj);
            }
            catch (Exception ex)
            {
                throw new Exception("IsExistingRedirect error", ex);
            }
            finally
            {
                si.Close();
            }
            return eventID;
        }

        // If exist return member_id. Otherwise return int.MinValue.
        internal int IsUserRegistered(string emailAddress)
        {
            int eventID = int.MinValue;
            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                SqlDataParameter sqlPam = CreateSqlDataParameter(emailAddress, "@email_address");
                paramCol.Add(sqlPam);
                si.Open();
                object theObj = si.ExecuteScalar("select member_id from member m where m.email_address = @email_address",
                    CommandType.Text, paramCol);
                if (theObj != null)
                    eventID = Convert.ToInt32(theObj);
            }
            catch (Exception ex)
            {
                throw new Exception("IsExistingRedirect error", ex);
            }
            finally
            {
                si.Close();
            }
            return eventID;
        }

        internal string GetMostRecentUserFullName(string emailAddress, string password)
        {
            string fullName = string.Empty;
            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(CreateSqlDataParameter(emailAddress, "@email_address"));
                paramCol.Add(CreateSqlDataParameter(password, "@password"));
                si.Open();
                object theObj =
                si.ExecuteScalar("select Isnull(first_name,'') + ' ' + Isnull(last_name,'') from member m where m.email_address = @email_address and m.[password] =@password order by create_date desc",
                CommandType.Text, paramCol);
                if (theObj != null)
                    fullName = Convert.ToString(theObj);
            }
            catch (Exception ex)
            {
                throw new Exception("GetMostRecentUserFullName error", ex);
            }
            finally
            {
                si.Close();
            }
            return fullName;
        }


        public Event GetGroupRedirect(String redirect)
        {
            Event _event = null;

            bool useTransaction = false;
            string storedProcName = "es_get_group_redirect";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@redirect", DbType.String, DBValue.ToDBString(redirect)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    si.Close();
                    return null; // it did not found any group attached to this redirect
                }

                // fill our objects
                try
                {
                    int group_id = DBValue.ToInt32(dt.Rows[0]["group_id"]);
                    int event_id = DBValue.ToInt32(dt.Rows[0]["event_id"]);

                    _event = Event.GetEventByEventID(event_id);
                }
                catch (System.Exception ex)
                {
                    //throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return _event;
        }

        public FindEventCollection FindEvent(string eventName, string countryCode, string subDivisionCode, int partnerID)
        {
            FindEventCollection fevCol = new FindEventCollection();
            bool useTransaction = false;
            string storedProcName = "es_find_event";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@keyword", DbType.String, DBValue.ToDBString(eventName)));
                paramCol.Add(new SqlDataParameter("@country_code", DbType.String, DBValue.ToDBString(countryCode)));
                paramCol.Add(new SqlDataParameter("@subdivision_code", DbType.String, DBValue.ToDBString(subDivisionCode)));
                paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32((partnerID == 0 ? int.MinValue : partnerID))));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        Event ev = LoadEvent(dt.Rows[i]);
                        subDivisionCode = DBValue.ToString(dt.Rows[i]["subdivision_code"]);
                        string address = DBValue.ToString(dt.Rows[i]["address"]);
                        string city = DBValue.ToString(dt.Rows[i]["city"]);
                        FindEvent fev = new FindEvent(ev, subDivisionCode, address, city);
                        if (ev != null)
                        {
                            fevCol.Add(fev);
                        }

                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }

            return fevCol;
        }


        public List<FindEvent> FindEventV2(string eventName, string countryCode, string subDivisionCode, int partnerID)
        {
            List<FindEvent> lst = new List<FindEvent>();

            bool useTransaction = false;
            string storedProcName = "es_find_event";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@keyword", DbType.String, DBValue.ToDBString(eventName)));
                paramCol.Add(new SqlDataParameter("@country_code", DbType.String, DBValue.ToDBString(countryCode)));
                paramCol.Add(new SqlDataParameter("@subdivision_code", DbType.String, DBValue.ToDBString(subDivisionCode)));
                paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32((partnerID == 0 ? int.MinValue : partnerID))));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    lst = new List<FindEvent>(dt.Rows.Count);

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        Event ev = LoadEvent(dt.Rows[i]);
                        subDivisionCode = DBValue.ToString(dt.Rows[i]["subdivision_code"]);
                        string address = DBValue.ToString(dt.Rows[i]["address"]);
                        string city = DBValue.ToString(dt.Rows[i]["city"]);

                        // UPDATE July 22, 2011:
                        //   Created a new table 'event_total_amount' to store amount raised per event
                        decimal totalAmount = 0M, totalDonationAmount = 0M, totalProfit = 0M;
                        int totalSupporters = 0, totalDonars = 0;
                        if (dt.Rows[i].Table.Columns.Contains("total_amount"))
                            totalAmount = DBValue.ToDecimal(dt.Rows[i]["total_amount"]);
                        if (dt.Rows[i].Table.Columns.Contains("total_supporters"))
                            totalSupporters = DBValue.ToInt32(dt.Rows[i]["total_supporters"]);
                        if (dt.Rows[i].Table.Columns.Contains("total_donation_amount"))
                            totalDonationAmount = DBValue.ToDecimal(dt.Rows[i]["total_donation_amount"]);
                        if (dt.Rows[i].Table.Columns.Contains("total_donars"))
                            totalDonars = DBValue.ToInt32(dt.Rows[i]["total_donars"]);
                        if (dt.Rows[i].Table.Columns.Contains("total_profit"))
                            totalProfit = (decimal)DBValue.ToDouble(dt.Rows[i]["total_profit"]);

                        FindEvent fev = new FindEvent(ev, subDivisionCode, address, city, totalAmount, totalSupporters, totalDonationAmount, totalDonars);
                        fev.TotalProfit = totalProfit;
                        if (ev != null)
                        {
                            lst.Add(fev);
                        }                        
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }

            return lst;
        }


        public FindEventCollection FindEvent(string eventName, string cityName, string countryCode, string subDivisionCode, int partnerID)
        {
            FindEventCollection fevCol = new FindEventCollection();
            bool useTransaction = false;
            string storedProcName = "es_find_event";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@keyword", DbType.String, DBValue.ToDBString(eventName)));
                paramCol.Add(new SqlDataParameter("@city", DbType.String, DBValue.ToDBString(cityName)));
                paramCol.Add(new SqlDataParameter("@country_code", DbType.String, DBValue.ToDBString(countryCode)));
                paramCol.Add(new SqlDataParameter("@subdivision_code", DbType.String, DBValue.ToDBString(subDivisionCode)));
                paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32((partnerID == 0 ? int.MinValue : partnerID))));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        Event ev = LoadEvent(dt.Rows[i]);
                        subDivisionCode = DBValue.ToString(dt.Rows[i]["subdivision_code"]);
                        string address = DBValue.ToString(dt.Rows[i]["address"]);
                        string city = DBValue.ToString(dt.Rows[i]["city"]);

                        // UPDATE July 22, 2011:
                        //   Created a new table 'event_total_amount' to store amount raised per event
                        decimal totalAmount = 0M, totalDonationAmount = 0M;
                        int totalSupporters = 0, totalDonars = 0;
                        if (dt.Rows[i].Table.Columns.Contains("total_amount"))
                            totalAmount = DBValue.ToDecimal(dt.Rows[i]["total_amount"]);
                        if (dt.Rows[i].Table.Columns.Contains("total_supporters"))
                            totalSupporters = DBValue.ToInt32(dt.Rows[i]["total_supporters"]);
                        if (dt.Rows[i].Table.Columns.Contains("total_donation_amount"))
                            totalDonationAmount = DBValue.ToDecimal(dt.Rows[i]["total_donation_amount"]);
                        if (dt.Rows[i].Table.Columns.Contains("total_donars"))
                            totalDonars = DBValue.ToInt32(dt.Rows[i]["total_donars"]);

                        FindEvent fev = new FindEvent(ev, subDivisionCode, address, city, totalAmount, totalSupporters, totalDonationAmount, totalDonars);
                        if (ev != null)
                        {
                            fevCol.Add(fev);
                        }
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }

            return fevCol;
        }


        public FindEventCollection SuggestEvent(string eventName, string countryCode, string subDivisionCode, int partnerID)
        {
            FindEventCollection fevCol = new FindEventCollection();
            bool useTransaction = false;
            string storedProcName = "es_find_event_suggest";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@keyword", DbType.String, DBValue.ToDBString(eventName)));
                paramCol.Add(new SqlDataParameter("@country_code", DbType.String, DBValue.ToDBString(countryCode)));
                paramCol.Add(new SqlDataParameter("@subdivision_code", DbType.String, DBValue.ToDBString(subDivisionCode)));
                paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32((partnerID == 0 ? int.MinValue : partnerID))));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        Event ev = LoadEvent(dt.Rows[i]);
                        subDivisionCode = DBValue.ToString(dt.Rows[i]["subdivision_code"]);
                        string address = DBValue.ToString(dt.Rows[i]["address"]);
                        string city = DBValue.ToString(dt.Rows[i]["city"]);
                        FindEvent fev = new FindEvent(ev, subDivisionCode, address, city);
                        if (ev != null)
                        {
                            fevCol.Add(fev);
                        }

                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }

            return fevCol;
        }

        public FindEventCollection SuggestEvent(string eventName, string cityName, string countryCode, string subDivisionCode, int partnerID)
        {
            FindEventCollection fevCol = new FindEventCollection();
            bool useTransaction = false;
            string storedProcName = "es_find_event_suggest";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@keyword", DbType.String, DBValue.ToDBString(eventName)));
                paramCol.Add(new SqlDataParameter("@city", DbType.String, DBValue.ToDBString(cityName)));
                paramCol.Add(new SqlDataParameter("@country_code", DbType.String, DBValue.ToDBString(countryCode)));
                paramCol.Add(new SqlDataParameter("@subdivision_code", DbType.String, DBValue.ToDBString(subDivisionCode)));
                paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32((partnerID == 0 ? int.MinValue : partnerID))));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        Event ev = LoadEvent(dt.Rows[i]);
                        subDivisionCode = DBValue.ToString(dt.Rows[i]["subdivision_code"]);
                        string address = DBValue.ToString(dt.Rows[i]["address"]);
                        string city = DBValue.ToString(dt.Rows[i]["city"]);
                        FindEvent fev = new FindEvent(ev, subDivisionCode, address, city);
                        if (ev != null)
                        {
                            fevCol.Add(fev);
                        }

                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }

            return fevCol;
        }

        public InsertUpdateEventStatus InsertEvent(int group_id, Int32 event_status_id, String culture_code, String event_name, DateTime start_date, DateTime end_date, Boolean active, String comments, String redirect, bool salesRep, int profitGroupID, double profitCalculated,DateTime date_of_event,ref Int32 event_id)
        {
            return InsertEvent(null, group_id, event_status_id, culture_code, event_name, start_date, end_date, active, comments, redirect, salesRep, 1, profitGroupID, profitCalculated, date_of_event,ref event_id);
        }

        public InsertUpdateEventStatus InsertEvent(int group_id, Int32 event_status_id, String culture_code, String event_name, DateTime start_date, DateTime end_date, Boolean active, String comments, String redirect, bool salesRep, int groupTypeID, int profitGroupID, double profitCalculated, Int32 event_type_id, DateTime date_of_event, String humeur_representative, ref Int32 event_id)
        {
            return InsertEvent(null, group_id, event_status_id, culture_code, event_name, start_date, end_date, active, comments, redirect, salesRep, groupTypeID, profitGroupID, profitCalculated, event_type_id, date_of_event, humeur_representative, ref event_id);
        }

        public InsertUpdateEventStatus InsertEvent(int group_id, Int32 event_status_id, String culture_code, String event_name, DateTime start_date, DateTime end_date, Boolean active, String comments, String redirect, bool salesRep, int groupTypeID, int profitGroupID, double profitCalculated, DateTime date_of_event, ref Int32 event_id)
        {
            return InsertEvent(null, group_id, event_status_id, culture_code, event_name, start_date, end_date, active, comments, redirect, salesRep, groupTypeID, profitGroupID, profitCalculated, date_of_event, ref event_id);
        }

        internal InsertUpdateEventStatus InsertEvent(SqlInterface si, int group_id, Int32 event_status_id, String culture_code, String event_name, DateTime start_date, DateTime end_date, Boolean active, String comments, String redirect, bool salesRep, int profitGroupID, double profitCalculated,DateTime date_of_event, ref Int32 event_id)
        {
            return InsertEvent(si, group_id, event_status_id, culture_code, event_name, start_date, end_date, active, comments, redirect, salesRep, 1, profitGroupID, profitCalculated, date_of_event,ref event_id);
        }

        internal InsertUpdateEventStatus InsertEvent(SqlInterface si, int group_id, Int32 event_status_id, String culture_code, String event_name, DateTime start_date, DateTime end_date, Boolean active, String comments, String redirect, bool salesRep, int profitGroupID, double profitCalculated, Int32 event_type_id, DateTime date_of_event, String humeur_representative, ref Int32 event_id)
        {
            return InsertEvent(si, group_id, event_status_id, culture_code, event_name, start_date, end_date, active, comments, redirect, salesRep, 1, profitGroupID, profitCalculated, event_type_id, date_of_event, humeur_representative, ref event_id);
        }

        internal InsertUpdateEventStatus InsertEvent(SqlInterface si, int group_id, Int32 event_status_id, String culture_code, String event_name, DateTime start_date, DateTime end_date, Boolean active, String comments, String redirect, bool salesRep, int groupTypeID, int profitGroupID, double profitCalculated, DateTime date_of_event,ref Int32 event_id)
        {
            return InsertEvent(si, group_id, event_status_id, culture_code, event_name, start_date, end_date, active, comments, redirect, salesRep, 1, profitGroupID, profitCalculated, (int)Event.EventTypeInfo.GROUP_FUNDRAISER_WITH_SUBPAGE, date_of_event, null, ref event_id);
        }

        internal InsertUpdateEventStatus InsertEvent(SqlInterface si, int group_id, Int32 event_status_id, String culture_code, String event_name, DateTime start_date, DateTime end_date, Boolean active, String comments, String redirect, bool salesRep, int groupTypeID, int profitGroupID, double profitCalculated, Int32 event_type_id ,DateTime date_of_event, String humeur_representative, ref Int32 event_id)
        {
            bool internalTransaction = true;
            //bool myConnection = true;
            string storedProcName = "es_create_event";

#if TESTNEWPROCEDURE 
			storedProcName = "test_es_create_event";
#endif
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                internalTransaction = false;
            }

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@group_id", DbType.Int32, DBValue.ToDBInt32(group_id)));
                paramCol.Add(new SqlDataParameter("@event_status_id", DbType.Int32, DBValue.ToDBInt32(event_status_id)));
                paramCol.Add(new SqlDataParameter("@culture_code", DbType.String, DBValue.ToDBString(culture_code)));
                paramCol.Add(new SqlDataParameter("@event_name", DbType.String, DBValue.ToDBString(event_name)));
                paramCol.Add(new SqlDataParameter("@start_date", DbType.DateTime, DBValue.ToDBDateTime(start_date)));
                paramCol.Add(new SqlDataParameter("@end_date", DbType.DateTime, DBValue.ToDBDateTime(end_date)));
                paramCol.Add(new SqlDataParameter("@active", DbType.Boolean, DBValue.ToDBBoolean(active)));
                paramCol.Add(new SqlDataParameter("@comments", DbType.String, DBValue.ToDBString(comments)));
                paramCol.Add(new SqlDataParameter("@redirect", DbType.String, DBValue.ToDBString(redirect)));
                paramCol.Add(new SqlDataParameter("@want_sales_rep_call", DbType.Boolean, DBValue.ToDBBoolean(salesRep)));
                paramCol.Add(new SqlDataParameter("@group_type_id", DbType.Int32, DBValue.ToDBInt32(groupTypeID)));
                paramCol.Add(new SqlDataParameter("@profit_group_id", DbType.Int32, DBValue.ToDBInt32(profitGroupID)));
                paramCol.Add(new SqlDataParameter("@profit_calculated", DbType.Double, DBValue.ToDBDouble(profitCalculated)));
                paramCol.Add(new SqlDataParameter("@event_type_id", DbType.Int32, DBValue.ToDBInt32(event_type_id)));
                paramCol.Add(new SqlDataParameter("@date_of_event", DbType.DateTime, DBValue.ToDBDateTime(date_of_event)));
                paramCol.Add(new SqlDataParameter("@humeur_representative", DbType.String, DBValue.ToDBString(humeur_representative)));
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@return", DbType.Int32, ParameterDirection.ReturnValue));

                if (internalTransaction)
                {
                    si.Open();
                    si.BeginTransaction();
                }

                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                int returnValue = int.Parse(paramCol["@return"].Value.ToString());

#if TESTNEWPROCEDURE //Insert_TESTNEWPROCEDURE
				if (returnValue < 0)
					return InsertUpdateEventStatus.INTERNAL_ERROR;
				if (returnValue == 1)
					return InsertUpdateEventStatus.EVENT_NAME_OR_REDIRECT_ALREADY_EXISTS;
#else
                switch (returnValue)
                {
                    case 1:
                    case -4:
                        return InsertUpdateEventStatus.EVENT_NAME_OR_REDIRECT_ALREADY_EXISTS;
                    case -1:
                    case -2:
                    case -3:
                        return InsertUpdateEventStatus.INTERNAL_ERROR;
                }
#endif
                // fill our objects
                try
                {
                    event_id = DBValue.ToInt32(paramCol["@event_id"].Value);
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (internalTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (internalTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                if (internalTransaction)
                    si.Close();
            }
            return InsertUpdateEventStatus.OK;
        }


        private Event LoadEvent(DataRow row)
        {
            Event _event = new Event();
            _event.EventID = DBValue.ToInt32(row["event_id"]);
            _event.CultureCode = DBValue.ToString(row["culture_code"]);
            _event.Name = DBValue.ToString(row["event_name"]);
            _event.StartDate = DBValue.ToDateTime(row["start_date"]);
            _event.EndDate = DBValue.ToDateTime(row["end_date"]);
            _event.Active = DBValue.ToBoolean(row["active"]);
            _event.Comments = DBValue.ToString(row["comments"]);
            _event.CreateDate = DBValue.ToDateTime(row["create_date"]);
            _event.EventStatusID = DBValue.ToInt32(row["event_status_id"]);
            _event.EventStatus = DBValue.ToString(row["event_status_name"]);
            _event.EventTypeID = DBValue.ToInt32(row["event_type_id"]);
            _event.EventType = DBValue.ToString(row["event_type_name"]);
            _event.GroupID = DBValue.ToInt32(row["group_id"]);
            _event.SponsorEventParticipationID = DBValue.ToInt32(row["sponsor_event_participation_id"]);
            _event.Redirect = DBValue.ToString(row["redirect"]);
            _event.GroupTypeID = DBValue.ToInt32(row["group_type_id"]);
            _event.ProfitGroupID = DBValue.ToInt32(row["profit_group_id"]);
            _event.ProfitCalculated = DBValue.ToDouble(row["profit_calculated"]);

            if (row.Table.Columns.Contains("date_of_event"))
            {
                _event.DateOfEvent = DBValue.ToDateTime(row["date_of_event"]);
            }
            if (row.Table.Columns.Contains("processing_fee"))
            {
                _event.ProcessingFee = DBValue.ToBoolean(row["processing_fee"]);
            }
            if (row.Table.Columns.Contains("donation"))
            {
                _event.Donation = DBValue.ToBoolean(row["donation"]);
            }
            if (row.Table.Columns.Contains("discount_site"))
            {
                _event.DiscountSite = DBValue.ToBoolean(row["discount_site"]);
            }

            return _event;
        }

        public Event GetEventByEventID(Int32 eventID)
        {
            Event _event = new Event();

            bool useTransaction = false;
            string storedProcName = "es_get_event_by_event_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@eventID", DbType.Int32, DBValue.ToDBInt32(eventID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        _event = LoadEvent(row);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return _event;
        }

        public Event GetEventByGroupID(Int32 groupID)
        {
            Event _event = new Event();

            bool useTransaction = false;
            string storedProcName = "es_get_event_by_group_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@groupID", DbType.Int32, DBValue.ToDBInt32(groupID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        _event = LoadEvent(row);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return _event;
        }

        public Event GetEventByOrderDetailID(Int32 orderDetailID)
        {
            Event _event = new Event();

            bool useTransaction = false;
            string storedProcName = "es_get_event_by_order_detail_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@order_detail_id", DbType.Int32, DBValue.ToDBInt32(orderDetailID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        _event = LoadEvent(row);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return _event;
        }

        public Event GetLatestActiveEventByGroupID(Int32 groupID)
        {
            Event _event = new Event();

            bool useTransaction = false;
            string storedProcName = "es_get_event_latest_active_by_group_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@groupID", DbType.Int32, DBValue.ToDBInt32(groupID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        _event = LoadEvent(row);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return _event;
        }

        public Event[] GetEventsByOrderDates(DateTime start, DateTime end)
        {
            Event[] events = null;

            bool useTransaction = false;
            string storedProcName = "es_get_event_by_order_date";



            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@startDate", DbType.DateTime, DBValue.ToDBDateTime(start)));
                paramCol.Add(new SqlDataParameter("@endDate", DbType.DateTime, DBValue.ToDBDateTime(end)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                events = new Event[dt.Rows.Count];

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {

                    int nbEvents = -1;
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        bool groupFound = false;
                        int gID = Convert.ToInt32(dt.Rows[i]["group_id"]);

                        for (int j = 0; j < events.Length; j++)
                        {

                            ///EVENTS NOT null mean they have 2 checks comin!
                            if (events[j] != null)  //UNREACHABLE CODE ???????
                            {
                                Event e = events[j];

                                if (e.GroupID == gID)
                                {
                                    groupFound = true;
                                }

                            }
                        }
                        if (!(groupFound))
                        {
                            string culture_code = dt.Rows[i]["culture_code"].ToString();

                            ////////////////////////////
                            //check if canadian OR US
                            string country = System.Web.HttpContext.Current.Session["Country"].ToString();
                            if (country == "CA")
                            //country == CA and culture_code == en-US 
                            //so LoadEvent will never be called for this data, 
                            //it must be due to data errors
                            {
                                if (culture_code != "en-CA" && culture_code != "fr-CA")
                                {
                                    //dont process
                                    int a = 1;
                                }
                                else
                                {
                                    nbEvents = nbEvents + 1;
                                    events[nbEvents] = LoadEvent(dt.Rows[i]);
                                }
                            }
                            else if (country == "US")
                            {


                                if (culture_code == "en-CA" || culture_code == "fr-CA")
                                {
                                    //dont process
                                    int a = 1;
                                }
                                else
                                {
                                    nbEvents = nbEvents + 1;
                                    events[nbEvents] = LoadEvent(dt.Rows[i]);
                                }

                            }
                            /////////////////////////////////////////////////////
                            ///////////////////////////////////////////////////

                        }
                        else
                        {
                            int a = 1;
                        }

                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return events;
        }

        public Event[] GetEventsByFacebookID(int facebookID)
        {
            Event[] events = null;

            bool useTransaction = false;
            string storedProcName = "es_get_events_by_facebook_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@facebookID", DbType.Int32, DBValue.ToDBInt32(facebookID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                events = new Event[dt.Rows.Count];
                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        events[i] = LoadEvent(dt.Rows[i]);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return events;
        }


        public Event[] GetEventsForGoogleMap()
        {
            Event[] events = null;

            bool useTransaction = false;
            string storedProcName = "es_get_event_for_google_map";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                events = new Event[dt.Rows.Count];
                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        events[i] = LoadEvent(dt.Rows[i]);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return events;
        }


        public int EndEvent(int eventID)
        {
            return EndEvent(eventID, true);
        }

        public int EndEvent(int eventID, bool desactivate)
        {
            int returnValue = 0;
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(eventID)));
                paramCol.Add(new SqlDataParameter("@end_event", DbType.Boolean, DBValue.ToDBBoolean(desactivate)));

                si.Open();

                returnValue = Convert.ToInt32(si.ExecuteScalar("cc_end_event", CommandType.StoredProcedure, paramCol));

            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message, ex);
            }
            return returnValue;
        }

        public string[] GetEventsByPaymentID(int paymentID)
        {
            string[] events = null;

            bool useTransaction = false;
            string storedProcName = "cc_search_by_check_no";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@valeur", DbType.Int32, DBValue.ToDBInt32(paymentID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    events = new string[dt.Rows.Count];
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        events[i] = dt.Rows[i]["event_id"].ToString();
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return events;
        }
        public Event[] GetEventsByGroupID(Int32 groupID)
        {
            Event[] events = null;

            bool useTransaction = false;
            string storedProcName = "es_get_event_by_group_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@groupID", DbType.Int32, DBValue.ToDBInt32(groupID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                events = new Event[dt.Rows.Count];
                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        events[i] = LoadEvent(dt.Rows[i]);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return events;
        }


        internal Event[] GetEventByOrderDate(DateTime start, DateTime end, SqlInterface si)
        {
            Event[] evts = null;

            string storedProcName = "es_get_event_by_order_date";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@startDate", DbType.DateTime, DBValue.ToDBDateTime(start)));
                paramCol.Add(new SqlDataParameter("@endDate", DbType.DateTime, DBValue.ToDBDateTime(end)));



                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    evts = new Event[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            evts[i] = LoadEvent(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return evts;
        }
        public Event[] GetEventByOrderDate(DateTime start, DateTime end)
        {
            return GetEventByOrderDate(start, end);
        }

        public Dictionary<int, string> GetEventGroupType()
        {
            Dictionary<int, string> list = new Dictionary<int, string>();

            bool useTransaction = false;
            string storedProcName = "es_get_group_type";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        list.Add(Convert.ToInt32(row[0].ToString()), row[1].ToString());
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return list;
        }

        //UPDATE April 07, 2010: Some campaigns will have processing fee enabled. This fee is currently being tested out 
        //                       by management so I have decided not to edit any existing event DAL methods as well as 
        //                       event stored procs
        public bool IsEventProssingFeeEnabled(Int32 eventID)
        {
            bool _enableProcessingFee = false;

            bool useTransaction = false;
            string storedProcName = "es_get_event_processing_fee";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@eventID", DbType.Int32, DBValue.ToDBInt32(eventID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    if (dt != null)
                    {
                        if (dt.Rows[0]["processing_fee"] != null && dt.Rows[0]["processing_fee"] != DBNull.Value)
                        {
                            _enableProcessingFee = Convert.ToBoolean(dt.Rows[0]["processing_fee"]);
                        }
                    }                    
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return _enableProcessingFee;
        }

        //UPDATE April 08, 2010: Some campaigns will have processing fee enabled. This fee is currently being tested out 
        //                       by management so I have decided not to edit any existing event DAL methods as well as 
        //                       event stored procs
        public void UpdateEventProssingFee(Int32 eventID, bool processingFee)
        {
            bool _enableProcessingFee = false;

            bool useTransaction = false;
            string storedProcName = "es_update_event_processing_fee";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(eventID)));
                paramCol.Add(new SqlDataParameter("@processing_fee", DbType.Boolean, DBValue.ToDBBoolean(processingFee)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                int ret = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (ret < 0)
                {
                    throw new SqlDataException("Unable to update with " + storedProcName);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }

        public EventTotalAmount LoadEventTotalAmount(DataRow row)
        {
            EventTotalAmount ev_tot_amt = new EventTotalAmount();
            ev_tot_amt.Items = DBValue.ToInt32(row["items"]);
            ev_tot_amt.TotalAmount = DBValue.ToDecimal(row["total_amount"]);
            ev_tot_amt.TotalSupporters = DBValue.ToInt32(row["total_supporters"]);
            ev_tot_amt.TotalDonationAmount = DBValue.ToDecimal(row["total_donation_amount"]);
            ev_tot_amt.TotalDonars = DBValue.ToInt32(row["total_donars"]);
            if (row.Table.Columns.Contains("total_profit"))
                ev_tot_amt.TotalProfit = (decimal)DBValue.ToDouble(row["total_profit"]);
            return ev_tot_amt;
        }

        public EventTotalAmount GetEventTotalAmountByPartnerID(Int32 partner_id)
        {
            EventTotalAmount ev_tot_amt = null;

            bool useTransaction = false;
            string storedProcName = "es_get_total_event_amount_by_partner_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32(partner_id)));
                si.Open();
                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    if (dt.Rows.Count > 0)
                    {
                        ev_tot_amt = LoadEventTotalAmount(dt.Rows[0]);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return ev_tot_amt;
        }

        public EventTotalAmount GetEventTotalAmountByEventID(Int32 event_id)
        {
            EventTotalAmount ev_tot_amt = null;

            bool useTransaction = false;
            string storedProcName = "es_get_total_event_amount_by_event_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(event_id)));
                si.Open();
                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    if (dt.Rows.Count > 0)
                    {
                        ev_tot_amt = LoadEventTotalAmount(dt.Rows[0]);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return ev_tot_amt;
        }
        #endregion

        #region Users/Members

        public InsertMemberIntoDatabaseReturnValue CheckMember(eSubsGlobalUser user)
        {
            bool useTransaction = false;
            string storedProcName = "es_check_member";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@first_name", DbType.String, DBValue.ToDBString(user.FirstName)));
                paramCol.Add(new SqlDataParameter("@last_name", DbType.String, DBValue.ToDBString(user.LastName)));
                paramCol.Add(new SqlDataParameter("@email_address", DbType.String, DBValue.ToDBString(user.EmailAddress.Email)));
                paramCol.Add(new SqlDataParameter("@external_member_id", DbType.String, DBValue.ToDBString(user.ExternalMemberID)));
                paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32(user.PartnerID)));
                paramCol.Add(new SqlDataParameter("@ret", DbType.Int32, ParameterDirection.ReturnValue));
                si.Open();
                if (useTransaction)
                    si.BeginTransaction();

                // Update database
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();

                int returnValue = DBValue.ToInt32(paramCol["@ret"].Value);

                // Member exists already by email address
                if (returnValue == -1)
                {
                    return InsertMemberIntoDatabaseReturnValue.MEMBER_NAME_AND_EMAIL_ADDRESS_ALREADY_EXISTS;
                }
                else if (returnValue == -2)
                {
                    return InsertMemberIntoDatabaseReturnValue.EXTERNAL_MEMBER_ID_ALREADY_EXISTS;
                }
                else
                    return InsertMemberIntoDatabaseReturnValue.OK;
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }

        public bool MoveParticipant(Users.Participant participant, Group grp, Group newGrp)
        {
            bool useTransaction = false;
            string storedProcName = "es_move_participant";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@member_hierarchy_id", DbType.Int32, DBValue.ToDBInt32(participant.HierarchyID)));
                paramCol.Add(new SqlDataParameter("@group_id_from", DbType.Int32, DBValue.ToDBInt32(grp.GroupID)));
                paramCol.Add(new SqlDataParameter("@group_id_to", DbType.Int32, DBValue.ToDBInt32(newGrp.GroupID)));
                paramCol.Add(new SqlDataParameter("@ret", DbType.Int32, ParameterDirection.ReturnValue));
                si.Open();
                if (useTransaction)
                    si.BeginTransaction();


                // Update database
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();

                if ((int)paramCol["@ret"].Value == 0)
                    return true;
                else
                    return false;
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }


        public bool MoveParticipants(Group grp, Group newGrp)
        {
            bool useTransaction = false;
            string storedProcName = "es_move_all_participant";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@group_id_from", DbType.Int32, DBValue.ToDBInt32(grp.GroupID)));
                paramCol.Add(new SqlDataParameter("@group_id_to", DbType.Int32, DBValue.ToDBInt32(newGrp.GroupID)));
                paramCol.Add(new SqlDataParameter("@ret", DbType.Int32, ParameterDirection.ReturnValue));
                si.Open();
                if (useTransaction)
                    si.BeginTransaction();


                // Update database
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();

                if ((int)paramCol["@ret"].Value == 0)
                    return true;
                else
                    return false;
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }

            return false;
        }

        internal Users.UnknownUser[] GetParticipantsByEvent(int eventId)
        {
            Users.UnknownUser[] users = null;

            bool useTransaction = false;
            string storedProcName = "es_get_member_by_event_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(eventId)));
                si.Open();
                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    si.Close();
                    return null;
                }

                // fill our objects
                try
                {
                    users = new Users.UnknownUser[dt.Rows.Count];
                    int index = 0;
                    foreach (DataRow row in dt.Rows)
                    {
                        users[index++] = LoadESubsUser(row);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return users;
        }

        public List<eSubsGlobalUser> GetDirectMailRecipients(int directMailInfoId)
        {
            List<eSubsGlobalUser> list = new List<eSubsGlobalUser>();

            bool useTransaction = false;
            string storedProcName = "es_get_direct_mail_recipients";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@direct_mail_info_id", DbType.Int32, DBValue.ToDBInt32(directMailInfoId)));

                si.Open();
                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    si.Close();
                    return list;
                    //return null;
                    // throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {

                    int index = 0;
                    foreach (DataRow row in dt.Rows)
                    {
                        list.Add(LoadESubsUser(row));

                        index++;
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using GetChildMembers", ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return list;
        }

        public int GetNbSendSupporter(int member_hierarchy_id)
        {
            int result;

            bool useTransaction = false;
            string storedProcName = "es_get_nb_send_supporter";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@member_hierarchy_id ", DbType.Int32, DBValue.ToDBInt32(member_hierarchy_id)));

                si.Open();
                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                result = Convert.ToInt32(dt.Rows[0][0]);


          

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return result;
        }

        public Users.UnknownUser[] GetAllChildMembers(Int32 member_hierarchy_id, int eventID)
        {
            Users.UnknownUser[] users = null;

            bool useTransaction = false;
            string storedProcName = "es_get_member_all_child";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@member_hierarchy_id", DbType.Int32, DBValue.ToDBInt32(member_hierarchy_id)));
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(eventID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    si.Close();
                    return null;
                    // throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    users = new Users.UnknownUser[dt.Rows.Count];
                    int index = 0;
                    foreach (DataRow row in dt.Rows)
                    {
                        users[index++] = LoadESubsUser(row);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return users;
        }



        public List<Users.UnknownUser> GetContactAll(Int32 member_hierarchy_id)
        {
            List<Users.UnknownUser> list = new List<UnknownUser>();

            bool useTransaction = false;
            string storedProcName = "es_get_contact_all";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@member_hierarchy_id", DbType.Int32, DBValue.ToDBInt32(member_hierarchy_id)));

                si.Open();
                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    si.Close();
                    return list;
                    //return null;
                    // throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    
                    int index = 0;
                    foreach (DataRow row in dt.Rows)
                    {
                        list.Add(LoadESubsUser(row));

                        index++;
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using es_get_contact_all", ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return list;
        }      

        public Users.UnknownUser[] GetContact(Int32 member_hierarchy_id, bool bounced)
        {
            Users.UnknownUser[] users = null;

            bool useTransaction = false;
            string storedProcName = "es_get_contact";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@member_hierarchy_id", DbType.Int32, DBValue.ToDBInt32(member_hierarchy_id)));
                paramCol.Add(new SqlDataParameter("@bounced", DbType.Boolean, DBValue.ToBoolean(bounced)));
             
                si.Open();
                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    si.Close();
                    return null;
                    // throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    users = new Users.UnknownUser[dt.Rows.Count];
                    int index = 0;
                    foreach (DataRow row in dt.Rows)
                    {
                        users[index] = LoadESubsUser(row);
                        
                        index++;
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using es_get_contact", ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return users;
        }

        public List<UnknownUser> GetLightWeightContact(Int32 member_hierarchy_id, bool bounced)
        {
            List<UnknownUser> users = new List<UnknownUser>();

            bool useTransaction = false;
            string storedProcName = "es_get_contact";  //es_get_lightweight_contact
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@member_hierarchy_id", DbType.Int32, DBValue.ToDBInt32(member_hierarchy_id)));
                paramCol.Add(new SqlDataParameter("@bounced", DbType.Boolean, DBValue.ToBoolean(bounced)));

                si.Open();
                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    si.Close();
                    return users;
                }
                
                // fill our objects
                try
                {
                    var data = from row in dt.AsEnumerable()
                               where !row.IsNull("email_address")
                               select new UnknownUser
                               {
                                   HierarchyID = DBValue.ToInt32(row["member_hierarchy_id"]),
                                   ID = DBValue.ToInt32(row["member_id"]), 
                                   ExternalMemberID = DBValue.ToString(row["external_member_id"]), 
                                   FirstName = DBValue.ToString(row["first_name"]),
                                   MiddleName = DBValue.ToString(row["middle_name"]),
                                   LastName = DBValue.ToString(row["last_name"]),
                                   EmailAddress = GA.BDC.Core.Validation.Email.EmailValidator.ValidateEmail(DBValue.ToString(row["email_address"])) ? GA.BDC.Core.EnterpriseStandards.EmailAddress.CreateEmailAddress(DBValue.ToString(row["email_address"])) : null,
                                   CreationChannelID = DBValue.ToInt32(row["creation_channel_id"]),
                                   UserTypeInfo = DBValue.ToInt32(row["user_type"]) == (int)ESubsGlobal.Users.UserType.SPONSOR ? ESubsGlobal.Users.UserType.SPONSOR : DBValue.ToInt32(row["user_type"]) == (int)ESubsGlobal.Users.UserType.PARTICIPANT ? ESubsGlobal.Users.UserType.PARTICIPANT : ESubsGlobal.Users.UserType.SUPPORTER
                               };
                    if (data != null && data.Count() != 0)
                    {
                        users = data.ToList<UnknownUser>();
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using es_get_lightweight_contact", ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return users;
        }

        public List<UnknownUser> GetLightWeightContactAll(Int32 member_hierarchy_id)
        {
            List<UnknownUser> users = new List<UnknownUser>();

            bool useTransaction = false;
            string storedProcName = "es_get_contact_all"; //es_get_lightweight_contact_all
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@member_hierarchy_id", DbType.Int32, DBValue.ToDBInt32(member_hierarchy_id)));

                si.Open();
                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    si.Close();
                    return users;
                }

                // fill our objects
                try
                {
                    var data = from row in dt.AsEnumerable()
                               where !row.IsNull("email_address")
                               select new UnknownUser
                               {
                                   HierarchyID = DBValue.ToInt32(row["member_hierarchy_id"]),
                                   ID = DBValue.ToInt32(row["member_id"]),
                                   ExternalMemberID = DBValue.ToString(row["external_member_id"]),
                                   FirstName = DBValue.ToString(row["first_name"]),
                                   MiddleName = DBValue.ToString(row["middle_name"]),
                                   LastName = DBValue.ToString(row["last_name"]),
                                   EmailAddress = GA.BDC.Core.Validation.Email.EmailValidator.ValidateEmail(DBValue.ToString(row["email_address"])) ? GA.BDC.Core.EnterpriseStandards.EmailAddress.CreateEmailAddress(DBValue.ToString(row["email_address"])) : null,
                                   CreationChannelID = DBValue.ToInt32(row["creation_channel_id"]),
                                   UserTypeInfo = DBValue.ToInt32(row["user_type"]) == (int)ESubsGlobal.Users.UserType.SPONSOR ? ESubsGlobal.Users.UserType.SPONSOR : DBValue.ToInt32(row["user_type"]) == (int)ESubsGlobal.Users.UserType.PARTICIPANT ? ESubsGlobal.Users.UserType.PARTICIPANT : ESubsGlobal.Users.UserType.SUPPORTER
                               };
                    if (data != null && data.Count() != 0)
                    {
                        users = data.ToList<UnknownUser>();
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using es_get_lightweight_contact", ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return users;
        }

        public Users.UnknownUser[] GetChildMembers(Int32 member_hierarchy_id, int eventID)
        {
            Users.UnknownUser[] users = null;

            bool useTransaction = false;
            string storedProcName = "es_get_child_member";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@member_hierarchy_id", DbType.Int32, DBValue.ToDBInt32(member_hierarchy_id)));
                paramCol.Add(new SqlDataParameter("@eventID", DbType.Int32, DBValue.ToDBInt32(eventID)));

                si.Open();
                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);//si.ExecuteFetchDataTable(PreparedStatements.GetQuery(storedProcName, paramCol), CommandType.Text, null);

                if (dt.Rows.Count < 1)
                {
                    si.Close();
                    return null;
                    // throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    users = new Users.UnknownUser[dt.Rows.Count];
                    int index = 0;
                    foreach (DataRow row in dt.Rows)
                    {
                        users[index] = LoadESubsUser(row);
                        users[index].SetSalutation(row["salutation"].ToString());
                        index++;
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using GetChildMembers", ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return users;
        }

        public List<UnknownUser> GetChildMembersWithPostalAddress(Int32 member_hierarchy_id, int eventID)
        {
            List<Users.UnknownUser> users = new List<UnknownUser>();

            bool useTransaction = false;
            string storedProcName = "es_get_child_member_with_postal_address";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@member_hierarchy_id", DbType.Int32, DBValue.ToDBInt32(member_hierarchy_id)));
                paramCol.Add(new SqlDataParameter("@eventID", DbType.Int32, DBValue.ToDBInt32(eventID)));

                si.Open();
                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                //DataTable dt = si.ExecuteFetchDataTable(PreparedStatements.GetQuery(storedProcName, paramCol), CommandType.Text, null);
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    si.Close();
                    return users;
                    // throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        Users.UnknownUser user = LoadESubsUser(row);
                        user.PostalAddresses = PostalAddressCollection.GetPostalAddressCollectionForMember(user);
                        user.SetSalutation(row["salutation"].ToString());

                        //###user.Greeting = row["greeting"].ToString();


                        users.Add(user);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using GetChildMembers", ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return users;
        }

        public int GetNbReminderContact(Int32 member_hierarchy_id, int eventID)
        {
            int total_count = 0;

            bool useTransaction = false;
            string storedProcName = "es_get_nb_reminder_contact";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@member_hierarchy_id", DbType.Int32, DBValue.ToDBInt32(member_hierarchy_id)));
                paramCol.Add(new SqlDataParameter("@eventID", DbType.Int32, DBValue.ToDBInt32(eventID)));

                si.Open();
                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    si.Close();
                    return 0;
                }

                // fill our objects
                try
                {
                    total_count = DBValue.ToInt32(dt.Rows[0]["total_count"]); 
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using es_get_nb_reminder_contact", ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return total_count;
        }

        public Users.UnknownUser[] GetSupporterFromPreviousRelaunch(Int32 event_id, Int32 member_hierarchy_id)
        {
            Users.UnknownUser[] users = null;

            bool useTransaction = false;
            string storedProcName = "es_get_supporter_relaunch";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(event_id)));
                paramCol.Add(new SqlDataParameter("@member_hierarchy_id", DbType.Int32, DBValue.ToDBInt32(member_hierarchy_id)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    si.Close();
                    return null;
                }

                // fill our objects
                try
                {
                    users = new Users.UnknownUser[dt.Rows.Count];
                    int index = 0;
                    foreach (DataRow row in dt.Rows)
                    {
                        users[index++] = LoadESubsUser(row);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return users;
        }

        public void UpdatePassword(Int32 member_id, String password)
        {
            bool useTransaction = false;
            string storedProcName = "es_update_member_password";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@member_id", DbType.Int32, DBValue.ToDBInt32(member_id)));
                paramCol.Add(new SqlDataParameter("@password", DbType.String, DBValue.ToDBString(password)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }

        public void UpdateUserPassword(SqlInterface si, Int32 member_id, String password)
        {
            bool useTransaction = false;
            string storedProcName = "es_update_user_password";
            
            if(si == null) {
                si = new SqlInterface(dataProvider, connectionString);
                useTransaction = true;
            }

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@member_id", DbType.Int32, DBValue.ToDBInt32(member_id)));
                paramCol.Add(new SqlDataParameter("@password", DbType.String, DBValue.ToDBString(password)));

                if(useTransaction)
                    si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                if(useTransaction)
                    si.Close();
            }
        }

        public bool UpdatePassword(SqlInterface si, Int32 member_id, String password)
        {
            bool useLocalTransaction = false;
            string storedProcName = "es_update_member_password";
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
                useLocalTransaction = true;
            }
            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@member_id", DbType.Int32, DBValue.ToDBInt32(member_id)));
                paramCol.Add(new SqlDataParameter("@password", DbType.String, DBValue.ToDBString(password)));


                if (useLocalTransaction)
                {
                    si.Open();
                    si.BeginTransaction();
                }

                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // Commit our transaction.
                if (useLocalTransaction)
                    si.Commit();
            }
            catch (Exception)
            {
                // Rollback on error.
                if (useLocalTransaction)
                    si.Rollback();

                return false;
            }
            finally
            {
                if (useLocalTransaction)
                    si.Close();
            }

            return true;
        }

        internal void UpdateParent(Int32 memberHierarchyID, Int32 parentMemberHierarchyID)
        {
            bool useTransaction = false;
            string storedProcName = "cc_assign_parent";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@member_hierarchy_id", DbType.Int32, DBValue.ToDBInt32(memberHierarchyID)));
                paramCol.Add(new SqlDataParameter("@parent_member_hierarchy_id", DbType.Int32, DBValue.ToDBInt32(parentMemberHierarchyID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }

        internal InsertMemberIntoDatabaseReturnValue UpdateMember(eSubsGlobalUser user, int partnerID)
        {
            bool useTransaction = false;
            string storedProcName = "es_update_member";

#if TESTNEWPROCEDURE 
			storedProcName = "test_es_update_member";
#endif


            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();

                paramCol.Add(new SqlDataParameter("@culture_code", DbType.String, DBValue.ToDBString(user.Culture.CultureCode)));
                paramCol.Add(new SqlDataParameter("@opt_status_id", DbType.Int32, DBValue.ToDBInt32((int)user.OptInStatusID)));
                paramCol.Add(new SqlDataParameter("@first_name", DbType.String, DBValue.ToDBString(user.FirstName)));
                paramCol.Add(new SqlDataParameter("@middle_name", DbType.String, DBValue.ToDBString(user.MiddleName)));
                paramCol.Add(new SqlDataParameter("@last_name", DbType.String, DBValue.ToDBString(user.LastName)));
                paramCol.Add(new SqlDataParameter("@greeting", DbType.String, DBValue.ToDBString(user.Greeting)));
                paramCol.Add(new SqlDataParameter("@gender", DbType.String, DBValue.ToDBString(user.Gender)));
                paramCol.Add(new SqlDataParameter("@email_address", DbType.String, DBValue.ToDBString(user.EmailAddress)));
                paramCol.Add(new SqlDataParameter("@parent_first_name", DbType.String, DBValue.ToDBString(user.ParentFirstName)));
                paramCol.Add(new SqlDataParameter("@parent_last_name", DbType.String, DBValue.ToDBString(user.ParentLastName)));
                paramCol.Add(new SqlDataParameter("@external_member_id", DbType.String, DBValue.ToDBString(user.ExternalMemberID)));
                paramCol.Add(new SqlDataParameter("@comments", DbType.String, DBValue.ToDBString(user.Comments)));
                paramCol.Add(new SqlDataParameter("@password", DbType.String, DBValue.ToDBString(user.Password)));
                paramCol.Add(new SqlDataParameter("@member_id", DbType.Int32, DBValue.ToDBInt32(user.ID)));
                paramCol.Add(new SqlDataParameter("@lead_id", DbType.Int32, DBValue.ToDBInt32(user.LeadID)));
                paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32(partnerID)));
                paramCol.Add(new SqlDataParameter("@facebook_id", DbType.Int32, DBValue.ToDBInt32(user.FacebookID)));
                paramCol.Add(new SqlDataParameter("@deleted", DbType.Boolean, DBValue.ToDBBoolean(user.Deleted)));                
                paramCol.Add(new SqlDataParameter("@bounced", DbType.Boolean, DBValue.ToDBBoolean(user.Bounced)));
                if (user.UserID != int.MinValue)
                {
                    paramCol.Add(new SqlDataParameter("@user_id", DbType.Int32, DBValue.ToDBInt32(user.UserID)));
                }
                paramCol.Add(new SqlDataParameter("@return", DbType.Int32, ParameterDirection.ReturnValue));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                int returnValue = DBValue.ToInt32(paramCol["@return"].Value);

#if TESTNEWPROCEDURE
				if (returnValue == 1) 
					return InsertMemberIntoDatabaseReturnValue.MEMBER_NAME_AND_EMAIL_ADDRESS_ALREADY_EXISTS;
				else if (returnValue == 2)
					return InsertMemberIntoDatabaseReturnValue.EXTERNAL_MEMBER_ID_ALREADY_EXISTS;
				else if (returnValue == -1)
					return InsertMemberIntoDatabaseReturnValue.FAIL_UPDATE_MEMBER;
				else if (returnValue == -2)
					return InsertMemberIntoDatabaseReturnValue.FAIL_UPDATE_PASSWORD;
				else if (returnValue < 0) 
					return InsertMemberIntoDatabaseReturnValue.UNKNNOWN;
#else
                // Member exists already by email address
                //				if (returnValue == -1) 
                //					return InsertMemberIntoDatabaseReturnValue.MEMBER_NAME_AND_EMAIL_ADDRESS_ALREADY_EXISTS;
                //				else if (returnValue == -2)
                //					return InsertMemberIntoDatabaseReturnValue.EXTERNAL_MEMBER_ID_ALREADY_EXISTS;
                //				else if (returnValue == -3)
                //					return InsertMemberIntoDatabaseReturnValue.INSERT_INTO_MEMBER_FAILED;
                //				else if (returnValue == -4)
                //					return InsertMemberIntoDatabaseReturnValue.FETCH_NEW_MEMBER_IDENTITY_FAILED;
                //				else if (returnValue == -5)
                //					return InsertMemberIntoDatabaseReturnValue.INSERT_INTO_MEMBER_HIERARCHY_FAILED;
                //				else if (returnValue == -6)
                //					return InsertMemberIntoDatabaseReturnValue.FETCH_NEW_MEMBER_HIERARCHY_IDENTITY_FAILED;

                //0 = OK
                //1 = Email Address and Partner id already exists into the table member
                //2 = External member id already exists
                if (returnValue == 1)
                    return InsertMemberIntoDatabaseReturnValue.EMAIL_ADDRESS_PARTNER_ID_ALREADY_EXISTS;
                else if (returnValue == 2)
                    return InsertMemberIntoDatabaseReturnValue.EXTERNAL_MEMBER_ID_ALREADY_EXISTS;
                else if (returnValue != 0)
                    return InsertMemberIntoDatabaseReturnValue.UNKNOWN_ERROR;
#endif

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return InsertMemberIntoDatabaseReturnValue.OK;	// no error
        }

        internal InsertMemberIntoDatabaseReturnValue UpdateUser(eSubsGlobalUser user, int partnerID)
        {
            bool useTransaction = false;
            string storedProcName = "es_update_user";

            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();

                paramCol.Add(new SqlDataParameter("@culture_code", DbType.String, DBValue.ToDBString(user.Culture.CultureCode)));
                paramCol.Add(new SqlDataParameter("@opt_status_id", DbType.Int32, DBValue.ToDBInt32((int)user.OptInStatusID)));
                paramCol.Add(new SqlDataParameter("@first_name", DbType.String, DBValue.ToDBString(user.FirstName)));
                paramCol.Add(new SqlDataParameter("@last_name", DbType.String, DBValue.ToDBString(user.LastName)));
                paramCol.Add(new SqlDataParameter("@email_address", DbType.String, DBValue.ToDBString(user.EmailAddress)));
                paramCol.Add(new SqlDataParameter("@external_member_id", DbType.String, DBValue.ToDBString(user.ExternalMemberID)));
                paramCol.Add(new SqlDataParameter("@password", DbType.String, DBValue.ToDBString(user.Password)));
                paramCol.Add(new SqlDataParameter("@member_id", DbType.Int32, DBValue.ToDBInt32(user.ID)));
                paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32(partnerID)));
                paramCol.Add(new SqlDataParameter("@coppa_month", DbType.Int32, DBValue.ToDBInt32(user.CoppaMonth)));
                paramCol.Add(new SqlDataParameter("@coppa_year", DbType.Int32, DBValue.ToDBInt32(user.CoppaYear)));
                paramCol.Add(new SqlDataParameter("@agree_term_services", DbType.Byte, DBValue.ToByte(user.AgreeToTermServices ? (byte)1 : (byte)0)));  
                paramCol.Add(new SqlDataParameter("@return", DbType.Int32, ParameterDirection.ReturnValue));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                int returnValue = DBValue.ToInt32(paramCol["@return"].Value);

                //0 = OK
                //1 = Email Address and Partner id already exists into the table member
                //2 = External member id already exists
                if (returnValue == 1)
                    return InsertMemberIntoDatabaseReturnValue.EMAIL_ADDRESS_PARTNER_ID_ALREADY_EXISTS;
                else if (returnValue == 2)
                    return InsertMemberIntoDatabaseReturnValue.EXTERNAL_MEMBER_ID_ALREADY_EXISTS;
                else if (returnValue != 0)
                    return InsertMemberIntoDatabaseReturnValue.UNKNOWN_ERROR;

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return InsertMemberIntoDatabaseReturnValue.OK;	// no error
        }

        private UpdateMemberHierarchyUnsubscribeReturnValue UnsubscribeMemberHierarchy(SqlInterface si, int hierarchy_id, bool unsubscribe)
        {
            bool useLocalTransaction = false;
            string storedProcName = "es_update_member_hierarchy_unsubscribe";

            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
                useLocalTransaction = true;
            }

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();

                paramCol.Add(new SqlDataParameter("@member_hierarchy_id", DbType.Int32, DBValue.ToDBInt32(hierarchy_id)));
                paramCol.Add(new SqlDataParameter("@unsubscribe", DbType.Boolean, DBValue.ToDBBoolean(unsubscribe)));
                paramCol.Add(new SqlDataParameter("@return", DbType.Int32, ParameterDirection.ReturnValue));


                if (useLocalTransaction)
                {
                    si.Open();
                    si.BeginTransaction();
                }

                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                int returnValue = DBValue.ToInt32(paramCol["@return"].Value);

                // Member exists already by email address
                if (returnValue == -1)
                    return UpdateMemberHierarchyUnsubscribeReturnValue.UPDATE_INTO_MEMBER_HIERARCHY_FAILED;

                // Commit our transaction.
                if (useLocalTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useLocalTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                if (useLocalTransaction)
                    si.Close();
            }
            return UpdateMemberHierarchyUnsubscribeReturnValue.OK;	// no error
        }



        public UpdateMemberHierarchyUnsubscribeReturnValue UnsubscribeAllMemberhierarchys(int[] hierarchy_ids, bool unsubscribe)
        {
            if (hierarchy_ids == null || hierarchy_ids.Length < 1)
                return UpdateMemberHierarchyUnsubscribeReturnValue.UPDATE_INTO_MEMBER_HIERARCHY_FAILED;

            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                si.Open();
                si.BeginTransaction();
                for (int i = 0; i < hierarchy_ids.Length; i++)
                {
                    UnsubscribeMemberHierarchy(si, hierarchy_ids[i], unsubscribe);
                }
                si.Commit();
            }
            catch
            {
                si.Rollback();
                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return UpdateMemberHierarchyUnsubscribeReturnValue.OK;	// no error
        }

        internal int GetMemberUnsubscribe(Int32 member_id)
        {
            int unsubscribe = int.MinValue;
            SqlInterface si = new SqlInterface(dataProvider, connectionString, 300);
            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                SqlDataParameter sqlPam = CreateSqlDataParameter(member_id, "@member_id");
                paramCol.Add(sqlPam);
                si.Open();
                object theObj = si.ExecuteScalar("select Isnull(unsubscribe, 0) from member where member_id = @member_id", CommandType.Text, paramCol);
                if (theObj != null)
                    unsubscribe = Convert.ToInt32(theObj);
            }
            catch (Exception ex)
            {
                string s = ex.ToString();
                s = string.Empty;
            }
            finally
            {
                si.Close();
            }
            return unsubscribe;
        }


        public UpdateMemberHierarchyUnsubscribeReturnValue UnsubscribeMember(int hierarchy_id, bool unsubscribe)
        {
            bool useTransaction = false;
            string storedProcName = "es_update_member_hierarchy_unsubscribe";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();

                paramCol.Add(new SqlDataParameter("@member_hierarchy_id", DbType.Int32, DBValue.ToDBInt32(hierarchy_id)));
                paramCol.Add(new SqlDataParameter("@unsubscribe", DbType.Boolean, DBValue.ToDBBoolean(unsubscribe)));
                paramCol.Add(new SqlDataParameter("@return", DbType.Int32, ParameterDirection.ReturnValue));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                int returnValue = DBValue.ToInt32(paramCol["@return"].Value);

                // Member exists already by email address
                if (returnValue == -1)
                    return UpdateMemberHierarchyUnsubscribeReturnValue.UPDATE_INTO_MEMBER_HIERARCHY_FAILED;

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return UpdateMemberHierarchyUnsubscribeReturnValue.OK;	// no error
        }


        public Users.GroupMemberCollection GetGroupMemberCollection(Int32 group_id)
        {
            Users.GroupMemberCollection groupMemberCollection = null;

            bool useTransaction = false;
            string storedProcName = "es_get_member_group";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@group_id", DbType.Int32, DBValue.ToDBInt32(group_id)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    groupMemberCollection = new Users.GroupMemberCollection();

                    foreach (DataRow row in dt.Rows)
                    {
                        int member_hierarchy_id = DBValue.ToInt32(row["member_hierarchy_id"]);
                        int parent_member_hierarchy_id = DBValue.ToInt32(row["parent_member_hierarchy_id"]);
                        int member_id = DBValue.ToInt32(row["member_id"]);
                        int creation_channel_id = DBValue.ToInt32(row["creation_channel_id"]);
                        string culture_code = DBValue.ToString(row["culture_code"]);
                        int opt_status_id = DBValue.ToInt32(row["opt_status_id"]);
                        string first_name = DBValue.ToString(row["first_name"]);
                        string middle_name = DBValue.ToString(row["middle_name"]);
                        string last_name = DBValue.ToString(row["last_name"]);
                        string gender = DBValue.ToString(row["gender"]);
                        string email_address = DBValue.ToString(row["email_address"]);
                        string password = DBValue.ToString(row["password"]);
                        bool bounced = DBValue.ToBoolean(row["bounced"]);
                        string comments = DBValue.ToString(row["comments"]);
                        string creation_channel_name = DBValue.ToString(row["creation_channel_name"]);
                        string description = DBValue.ToString(row["description"]);
                        bool active = DBValue.ToBoolean(row["active"]);
                        int member_type_id = DBValue.ToInt32(row["member_type_id"]);

                        Users.GroupMemberRow grow = new Users.GroupMemberRow();
                        grow.Active = active;
                        grow.Bounced = bounced;
                        grow.Comments = comments;
                        grow.CreationChannelName = creation_channel_name;
                        grow.CreationChannelID = creation_channel_id;
                        grow.CultureCode = culture_code;
                        grow.Description = description;
                        grow.EmailAddress = email_address;
                        grow.FirstName = first_name;
                        grow.Gender = gender;
                        grow.LastName = last_name;
                        grow.MemberHierarchyID = member_hierarchy_id;
                        grow.MemberID = member_id;
                        grow.MiddleName = middle_name;
                        grow.OptIn = (opt_status_id == 1);
                        grow.ParemtMemberHierarchyID = parent_member_hierarchy_id;
                        grow.Password = password;
                        grow.MemberType = member_type_id;

                        groupMemberCollection.AddGroupMember(grow);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return groupMemberCollection;
        }


        private UpdateMemberHierarchyUnsubscribeReturnValue UpdateUnsubscribeInMemberTable(SqlInterface si, int member_id, bool unsubscribe)
        {
            bool useLocalTransaction = false;
            string storedProcName = "es_update_member_unsubscribe";

            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
                useLocalTransaction = true;
            }

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();

                paramCol.Add(new SqlDataParameter("@member_id", DbType.Int32, DBValue.ToDBInt32(member_id)));
                paramCol.Add(new SqlDataParameter("@unsubscribe", DbType.Boolean, DBValue.ToDBBoolean(unsubscribe)));
                paramCol.Add(new SqlDataParameter("@return", DbType.Int32, ParameterDirection.ReturnValue));

                if (useLocalTransaction)
                {
                    si.Open();
                    si.BeginTransaction();
                }

                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                int returnValue = DBValue.ToInt32(paramCol["@return"].Value);

                // Member exists already by email address
                if (returnValue == -1)
                    return UpdateMemberHierarchyUnsubscribeReturnValue.UNSUBSCRIBE_MEMBER_FAILED;

                // Commit our transaction.
                if (useLocalTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useLocalTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return UpdateMemberHierarchyUnsubscribeReturnValue.OK;	// no error
        }



        public UpdateMemberHierarchyUnsubscribeReturnValue UpdateUnsubscribeInMemberTable(int member_id, bool unsubscribe)
        {
            return UpdateUnsubscribeInMemberTable(null, member_id, unsubscribe);
        }

        public DataTable GetCampaignList(int member_id)
        {
            DataTable dt = null;
            bool useTransaction = false;

            string sqlStatement = @"SELECT 
m.member_id
,e.event_id
,e.active
,e.event_name as campaign_name
,mh.member_hierarchy_id
,mh.unsubscribe as mh_unsubscribe
,Isnull(m.unsubscribe,0) as unsubscribe
FROM
member m
inner join member_hierarchy mh
   on m.member_id = mh.member_id
left outer join event_participation ep
   on ep.member_hierarchy_id = mh.member_hierarchy_id
left outer join event e
   on e.event_id = ep.event_id
WHERE
	m.member_id = @member_id
	and mh.active = 1
	and e.active =1
ORDER BY 
	e.event_name
";

            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@member_id", DbType.String, DBValue.ToDBInt32(member_id)));
                si.Open();
                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                dt = si.ExecuteFetchDataTable(sqlStatement, CommandType.Text, paramCol);

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return dt;
        }



        public DataTable GetCampaignList(String email_address, String password, int partnerID)
        {
            DataTable dt = null;
            bool useTransaction = false;

            string sqlStatement = @"SELECT 
m.member_id
,e.event_id
,e.active
,e.event_name as campaign_name
,mh.member_hierarchy_id
,mh.unsubscribe as mh_unsubscribe
,Isnull(m.unsubscribe,0) as unsubscribe
FROM
member m
inner join member_hierarchy mh
   on m.member_id = mh.member_id
left outer join event_participation ep
   on ep.member_hierarchy_id = mh.member_hierarchy_id
left outer join event e
   on e.event_id = ep.event_id
WHERE
	m.email_address = @email_address
	and m.[password] = @password
	and mh.active = 1
	and e.active =1
ORDER BY 
	e.event_name
";

            //and mh.unsubscribe = 0
            //GROUP BY 
            //	m.member_id
            //	,e.event_id
            //	,e.active
            //	,e.event_name
            //	,mh.member_hierarchy_id
            //  ,mh.unsubscribe
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@email_address", DbType.String, DBValue.ToDBString(email_address)));
                paramCol.Add(new SqlDataParameter("@password", DbType.String, DBValue.ToDBString(password)));
                si.Open();
                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                dt = si.ExecuteFetchDataTable(sqlStatement, CommandType.Text, paramCol);

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return dt;
        }



        public LoginInformation[] GetLoginInformations(String email_address, String password, Int32 partner_id)
        {
            LoginInformation[] loginInformation = null;

            bool useTransaction = false;
            string storedProcName = "es_validate_login";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@email_address", DbType.String, DBValue.ToDBString(email_address)));
                paramCol.Add(new SqlDataParameter("@password", DbType.String, DBValue.ToDBString(password)));
                paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32(partner_id)));
                si.Open();
                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    loginInformation = new LoginInformation[dt.Rows.Count];

                    int index = 0;
                    foreach (DataRow row in dt.Rows)
                    {
                        // fill our objects
                        try
                        {
                            int user_id = DBValue.ToInt32(row["user_id"]);
                            int member_id = DBValue.ToInt32(row["member_id"]);
                            int member_hierarchy_id = DBValue.ToInt32(row["member_hierarchy_id"]);
                            int event_participation_id = DBValue.ToInt32(row["event_participation_id"]);
                            //string salutation = DBValue.ToString(row["salutation"]);
                            int event_id = DBValue.ToInt32(row["event_id"]);
                            bool active = DBValue.ToBoolean(row["active"]);
                            int rpartner_id = DBValue.ToInt32(row["partner_id"]);
                            int user_type = DBValue.ToInt32(row["user_type"]);

                            loginInformation[index] = new LoginInformation();
                            loginInformation[index].UserID = user_id;
                            loginInformation[index].MemberID = member_id;
                            loginInformation[index].MemberHierarchyID = member_hierarchy_id;
                            loginInformation[index].EventParticipationID = event_participation_id;
                            loginInformation[index].EventID = event_id;
                            loginInformation[index].Active = active;
                            loginInformation[index].PartnerID = rpartner_id;

                            switch (user_type)
                            {
                                case (int)ESubsGlobal.Users.UserType.SPONSOR:
                                    loginInformation[index].UserType = ESubsGlobal.Users.UserType.SPONSOR;
                                    break;
                                case (int)ESubsGlobal.Users.UserType.PARTICIPANT:
                                    loginInformation[index].UserType = ESubsGlobal.Users.UserType.PARTICIPANT;
                                    break;
                                case (int)ESubsGlobal.Users.UserType.SUPPORTER:
                                    loginInformation[index].UserType = ESubsGlobal.Users.UserType.SUPPORTER;
                                    break;
                                default:
                                    throw new ESubsGlobalException("Unable to retreive user type - LoginInformation");
                            }

                            index++;

                        }
                        catch (System.Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return loginInformation;
        }

        // return the event participation for this login information
        public int GetUserFromLogin(String email_address, String password, int partnerID)
        {
            //Users.UnknownUser user = null;
            int eventParticipationID = int.MinValue;

            bool useTransaction = false;
            string storedProcName = "es_validate_login";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@email_address", DbType.String, DBValue.ToDBString(email_address)));
                paramCol.Add(new SqlDataParameter("@password", DbType.String, DBValue.ToDBString(password)));
                paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32(partnerID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    si.Close();
                    return int.MinValue;	// there is no user with this login pass.
                }

                // fill our objects
                try
                {
                    DataRow row = dt.Rows[0];
                    int member_hierarchy_id = DBValue.ToInt32(row["member_hierarchy_id"]);
                    int event_participation_id = DBValue.ToInt32(row["event_participation_id"]);
                    int event_id = DBValue.ToInt32(row["event_id"]);
                    int user_type = DBValue.ToInt32(row["user_type"]);

                    eventParticipationID = event_participation_id;
                    //user = Users.UnknownUser.LoadByHierarchyID(member_hierarchy_id);

                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return eventParticipationID;
            //return user;
        }

        public void GetMemberPostalAddressCollection(Int32 member_id, Common.PostalAddressCollection pac)
        {
            bool useTransaction = false;
            string storedProcName = "es_get_member_postal_address";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@member_id", DbType.Int32, DBValue.ToDBInt32(member_id)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                //if(dt.Rows.Count < 1) {
                //	throw new SqlDataException("No records on " + storedProcName);
                //}

                // fill our objects
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        int postal_address_id = DBValue.ToInt32(row["postal_address_id"]);
                        string address_1 = DBValue.ToString(row["address_1"]);
                        string address_2 = DBValue.ToString(row["address_2"]);
                        string city = DBValue.ToString(row["city"]);
                        string zip_code = DBValue.ToString(row["zip_code"]);
                        string country_code = DBValue.ToString(row["country_code"]);
                        string subdivision_code = DBValue.ToString(row["subdivision_code"]);
                        int postal_address_type_id = DBValue.ToInt32(row["postal_address_type_id"]);
                        string postal_address_type_name = DBValue.ToString(row["postal_address_type_name"]);

                        Common.PostalAddress pa = new Common.PostalAddress();
                        pa.Id = postal_address_id;
                        pa.Address1 = address_1;
                        pa.Address2 = address_2;
                        pa.City = city;
                        pa.ZipCode = zip_code;
                        pa.CountryCode = CountryCode.Create(country_code);
                        pa.SubDivisionCode = subdivision_code;
                        pa.PostalAddressTypeID = PostalAddressType.BUSINESS_ADDRESS;
                        switch (postal_address_id)
                        {
                            case (int)PostalAddressType.BUSINESS_ADDRESS:
                                pa.PostalAddressTypeID = PostalAddressType.BUSINESS_ADDRESS;
                                break;
                            case (int)PostalAddressType.HOME_ADDRESS:
                                pa.PostalAddressTypeID = PostalAddressType.HOME_ADDRESS;
                                break;
                        }
                        pa.PostalAddressTypeName = postal_address_type_name;
                        pac.Add(pa);

                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }

        public void CreatePostalCode(Int32 member_id, String address_1, String address_2, String city, String zip_code, String country_code, String subdivision_code, Int32 postal_address_type_id, ref Int32 member_postal_address_id, ref Int32 postal_address_id)
        {
            bool useTransaction = false;
            string storedProcName = "es_create_member_postal_address";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@member_id", DbType.Int32, DBValue.ToDBInt32(member_id)));
                paramCol.Add(new SqlDataParameter("@address_1", DbType.String, DBValue.ToDBString(address_1)));
                paramCol.Add(new SqlDataParameter("@address_2", DbType.String, DBValue.ToDBString(address_2)));
                paramCol.Add(new SqlDataParameter("@city", DbType.String, DBValue.ToDBString(city)));
                paramCol.Add(new SqlDataParameter("@zip_code", DbType.String, DBValue.ToDBString(zip_code)));
                paramCol.Add(new SqlDataParameter("@country_code", DbType.String, DBValue.ToDBString(country_code)));
                paramCol.Add(new SqlDataParameter("@subdivision_code", DbType.String, DBValue.ToDBString(subdivision_code)));
                paramCol.Add(new SqlDataParameter("@postal_address_type_id", DbType.Int32, DBValue.ToDBInt32(postal_address_type_id)));
                paramCol.Add(new SqlDataParameter("@member_postal_address_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@postal_address_id", DbType.Int32, ParameterDirection.Output));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                member_postal_address_id = DBValue.ToInt32(paramCol["@member_postal_address_id"].Value);
                postal_address_id = DBValue.ToInt32(paramCol["@member_postal_address_id"].Value);

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }

        public void GetMemberPhoneNumberCollection(Int32 memberID, Common.PhoneNumberCollection phoneNumberCollection)
        {
            bool useTransaction = false;
            string storedProcName = "es_get_member_phone_number";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@memberID", DbType.Int32, DBValue.ToDBInt32(memberID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                //		if(dt.Rows.Count < 1) {
                //			throw new SqlDataException("No records on " + storedProcName);
                //		}

                // fill our objects
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        int phone_number_id = DBValue.ToInt32(row["phone_number_id"]);
                        int member_id = DBValue.ToInt32(row["member_id"]);
                        string phone_number = DBValue.ToString(row["phone_number"]);
                        bool active = DBValue.ToBoolean(row["active"]);
                        int phone_number_type_id = DBValue.ToInt32(row["phone_number_type_id"]);
                        string phone_number_type_name = DBValue.ToString(row["phone_number_type_name"]);

                        Common.PhoneNumber pn = new Common.PhoneNumber();
                        pn.ID = phone_number_id;
                        pn.IsActive = active;

                        pn.PhoneNumberTypeID = PhoneNumberType.DAY_PHONE;
                        switch (phone_number_type_id)
                        {
                            case (int)PhoneNumberType.DAY_PHONE:
                                pn.PhoneNumberTypeID = PhoneNumberType.DAY_PHONE;
                                break;
                            case (int)PhoneNumberType.EVENING_PHONE:
                                pn.PhoneNumberTypeID = PhoneNumberType.EVENING_PHONE;
                                break;
                            case (int)PhoneNumberType.FAX:
                                pn.PhoneNumberTypeID = PhoneNumberType.FAX;
                                break;
                            case (int)PhoneNumberType.MOBILE:
                                pn.PhoneNumberTypeID = PhoneNumberType.MOBILE;
                                break;
                        }

                        try
                        {
                            pn.SetPhoneNumber(phone_number);
                        }
                        catch (System.Exception ex)
                        {
                        }

                        phoneNumberCollection.Add(pn);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }

        public void InsertMemberPhone(Int32 member_id, Int32 phone_number_type_id, String phone_number)
        {
            bool useTransaction = false;
            string storedProcName = "es_create_phone_number";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@member_id", DbType.Int32, DBValue.ToDBInt32(member_id)));
                paramCol.Add(new SqlDataParameter("@phone_number_type_id", DbType.Int32, DBValue.ToDBInt32(phone_number_type_id)));
                paramCol.Add(new SqlDataParameter("@phone_number", DbType.String, DBValue.ToDBString(phone_number)));
                paramCol.Add(new SqlDataParameter("@phone_number_id", DbType.Int32, ParameterDirection.Output));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }

        public Users.UnknownUser[] GetUsersByEmail(string emailAddress, int partnerID)
        {
            Users.UnknownUser[] users = null;

            bool useTransaction = false;
            string storedProcName = "es_get_member_by_email";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@email", DbType.String, DBValue.ToDBString(emailAddress)));
                paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32(partnerID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    users = new Users.UnknownUser[dt.Rows.Count];
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        users[i] = LoadESubsUser(dt.Rows[i]);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return users;
        }


        public Users.UnknownUser[] GetUsersByEmailNoPartner(string emailAddress)
        {
            Users.UnknownUser[] users = null;

            bool useTransaction = false;
            string storedProcName = "es_get_member_by_email_no_partner";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@email", DbType.String, DBValue.ToDBString(emailAddress)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    users = new Users.UnknownUser[dt.Rows.Count];
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        users[i] = LoadESubsUser(dt.Rows[i]);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return users;
        }


        public Users.UnknownUser GetUserByExternalMemberID(int partnerID, string extMemberID)
        {
            Users.UnknownUser user = null;

            bool useTransaction = false;
            string storedProcName = "es_get_member_by_external_member_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32(partnerID)));
                paramCol.Add(new SqlDataParameter("@external_member_id", DbType.String, DBValue.ToDBString(extMemberID)));
                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    if (dt.Rows.Count > 0)
                        user = LoadESubsUser(dt.Rows[0]);
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return user;
        }

        /// <summary>
        /// Get users by group.
        /// </summary>
        /// <param name="groupId"></param>
        /// <returns></returns>
        public Users.UnknownUser[] GetUserByGroup(int groupId)
        {
            Users.UnknownUser[] users = null;

            bool useTransaction = false;
            string storedProcName = "es_get_member_group";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@group_id", DbType.Int32, DBValue.ToDBInt32(groupId)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    users = new Users.UnknownUser[dt.Rows.Count];
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        users[i] = LoadESubsUser(dt.Rows[i]);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return users;
        }


        public Users.UnknownUser[] GetUserByNameAndEmail(string firstName, string lastName, string emailAddress, int partnerID)
        {
            Users.UnknownUser[] users = null;

            bool useTransaction = false;
            string storedProcName = "es_get_member_by_email_and_name";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@email_address", DbType.String, DBValue.ToDBString(emailAddress)));
                paramCol.Add(new SqlDataParameter("@first_name", DbType.String, DBValue.ToDBString(firstName)));
                paramCol.Add(new SqlDataParameter("@last_name", DbType.String, DBValue.ToDBString(lastName)));
                paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32(partnerID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    users = new Users.UnknownUser[dt.Rows.Count];
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        users[i] = LoadESubsUser(dt.Rows[i]);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return users;
        }

        private Users.UnknownUser LoadESubsUser(DataRow row)
        {
            Users.UnknownUser user = new Users.UnknownUser();
            user.HierarchyID = DBValue.ToInt32(row["member_hierarchy_id"]);
            user.HierarchyParentID = DBValue.ToInt32(row["parent_member_hierarchy_id"]);
            if (row.Table.Columns.Contains("user_id"))
                user.UserID = DBValue.ToInt32(row["user_id"]);
            user.ID = DBValue.ToInt32(row["member_id"]);
            user.Culture = Culture.Create(DBValue.ToString(row["culture_code"]));
            int opt_status_id = DBValue.ToInt32(row["opt_status_id"]);
            switch (opt_status_id)
            {
                case (int)Users.OptInStatus.OPTIN:
                    user.OptInStatusID = Users.OptInStatus.OPTIN;
                    break;
                case (int)Users.OptInStatus.OPTOUT:
                    user.OptInStatusID = Users.OptInStatus.OPTOUT;
                    break;
                default:
                    user.OptInStatusID = Users.OptInStatus.OPTIN;
                    break;
            }
            user.FirstName = DBValue.ToString(row["first_name"]);
            user.MiddleName = DBValue.ToString(row["middle_name"]);
            user.LastName = DBValue.ToString(row["last_name"]);
            user.Gender = DBValue.ToString(row["gender"]);

            try
            {
                user.ParentFirstName = DBValue.ToString(row["parent_first_name"]);
                user.ParentLastName = DBValue.ToString(row["parent_last_name"]);
            }
            catch { }

            user.ExternalMemberID = DBValue.ToString(row["external_member_id"]);
            user.PartnerID = DBValue.ToInt32(row["partner_id"]);
            //user.EmailAddress = efundraising.EnterpriseStandards.EmailAddress.CreateEmailAddress("unknown@efundraising.com");
            if (DBValue.ToString(row["email_address"]) != null)
            {
                if (GA.BDC.Core.Validation.Email.EmailValidator.ValidateEmail(DBValue.ToString(row["email_address"])))
                {
                    user.EmailAddress = GA.BDC.Core.EnterpriseStandards.EmailAddress.CreateEmailAddress(DBValue.ToString(row["email_address"]));
                }
            }
            user.Password = DBValue.ToString(row["password"]);
            user.Bounced = DBValue.ToBoolean(row["bounced"]);
            user.Comments = DBValue.ToString(row["comments"]);

            int userType = DBValue.ToInt32(row["user_type"]);
            switch (userType)
            {
                case (int)ESubsGlobal.Users.UserType.SPONSOR:
                    user.UserTypeInfo = ESubsGlobal.Users.UserType.SPONSOR;
                    break;
                case (int)ESubsGlobal.Users.UserType.PARTICIPANT:
                    user.UserTypeInfo = ESubsGlobal.Users.UserType.PARTICIPANT;
                    break;
                case (int)ESubsGlobal.Users.UserType.SUPPORTER:
                    user.UserTypeInfo = ESubsGlobal.Users.UserType.SUPPORTER;
                    break;
                default:
                    throw new ESubsGlobalException("Unable to retreive user type");
            }

            int creation_channel_id = DBValue.ToInt32(row["creation_channel_id"]);
            if (creation_channel_id != int.MinValue)
            {
                user.CreationChannel = Users.CreationChannel.CreateFromID(creation_channel_id);
                /*
                user.CreationChannel = new Users.CreationChannel();
                user.CreationChannel.ID = creation_channel_id;
                user.CreationChannel = CreationChannel.
                user.CreationChannel.Name = DBValue.ToString(row["creation_channel_name"]);
                user.CreationChannel.Description = DBValue.ToString(row["description"]);
                */
                // bool active = DBValue.ToBoolean(row["active"]);
            }

            user.LeadID = DBValue.ToInt32(row["lead_id"]);
            user.Unsubscribe = DBValue.ToBoolean(row["unsubscribe"]);

            // Getting more info for CustCare.
            if (row.Table.Columns.Contains("member_created_date"))
                user.CreatedDate = DBValue.ToDateTime(row["member_created_date"]);
            if (row.Table.Columns.Contains("member_hierarchy_created_date"))
                user.MemberHierarchyCreatedDate = DBValue.ToDateTime(row["member_hierarchy_created_date"]);


            if (row.Table.Columns.Contains("facebook_id"))
            {
                user.FacebookID = DBValue.ToInt32(row["facebook_id"]);
            }

            if (row.Table.Columns.Contains("greeting"))
            {
                user.Greeting = row["greeting"].ToString();
            }

            if (row.Table.Columns.Contains("deleted"))
                user.Deleted = DBValue.ToBoolean(row["deleted"]);

            //DataAccess.ESubsGlobalDatabase dbo = new DataAccess.ESubsGlobalDatabase();

            // get phone number collection 
            //dbo.GetMemberPhoneNumberCollection(user.ID, user.PhoneNumbers);

            // get postal addresses
            //dbo.GetMemberPostalAddressCollection(user.ID, user.PostalAddresses);

            if (row.Table.Columns.Contains("coppa_month"))
                user.CoppaMonth = DBValue.ToInt32(row["coppa_month"]);
            if (row.Table.Columns.Contains("coppa_year"))
                user.CoppaYear = DBValue.ToInt32(row["coppa_year"]);
            if (row.Table.Columns.Contains("agree_term_services"))
                user.AgreeToTermServices = DBValue.ToBoolean(row["agree_term_services"]);

            return user;
        }

        private List<Users.UnknownUser> LoadESubsUser(DataTable dt)
        {
            var data = from row in dt.AsEnumerable()
                       where !row.IsNull("email_address")
                       select new UnknownUser
                       {
                           HierarchyID = DBValue.ToInt32(row["member_hierarchy_id"]),
                           HierarchyParentID = DBValue.ToInt32(row["parent_member_hierarchy_id"]),
                           ID = DBValue.ToInt32(row["member_id"]),
                           UserID = DBValue.ToInt32(row["user_id"]),
                           PartnerID = DBValue.ToInt32(row["partner_id"]),
                           ExternalMemberID = DBValue.ToString(row["external_member_id"]),
                           FirstName = DBValue.ToString(row["first_name"]),
                           MiddleName = DBValue.ToString(row["middle_name"]),
                           LastName = DBValue.ToString(row["last_name"]),
                           Gender = DBValue.ToString(row["gender"]),
                           Culture = Culture.Create(DBValue.ToString(row["culture_code"])),
                           IntOptInStatus = DBValue.ToInt32(row["opt_status_id"]),
                           EmailAddress = GA.BDC.Core.Validation.Email.EmailValidator.ValidateEmail(DBValue.ToString(row["email_address"])) ? GA.BDC.Core.EnterpriseStandards.EmailAddress.CreateEmailAddress(DBValue.ToString(row["email_address"])) : null,
                           Password = DBValue.ToString(row["password"]),
                           CreationChannelID = DBValue.ToInt32(row["creation_channel_id"]),
                           UserTypeInfo = DBValue.ToInt32(row["user_type"]) == (int)ESubsGlobal.Users.UserType.SPONSOR ? ESubsGlobal.Users.UserType.SPONSOR : DBValue.ToInt32(row["user_type"]) == (int)ESubsGlobal.Users.UserType.PARTICIPANT ? ESubsGlobal.Users.UserType.PARTICIPANT : ESubsGlobal.Users.UserType.SUPPORTER,
                           Bounced = DBValue.ToBoolean(row["bounced"]),
                           Comments = DBValue.ToString(row["comments"]),
                           LeadID = DBValue.ToInt32(row["lead_id"]),
                           Unsubscribe = DBValue.ToBoolean(row["unsubscribe"]),
                           CreatedDate = row.Table.Columns.Contains("member_created_date") ? DBValue.ToDateTime(row["member_created_date"]) : DateTime.MinValue,
                           MemberHierarchyCreatedDate = row.Table.Columns.Contains("member_hierarchy_created_date") ? DBValue.ToDateTime(row["member_hierarchy_created_date"]) : DateTime.MinValue,
                           Greeting = row.Table.Columns.Contains("greeting") ? row["greeting"].ToString() : null,
                           Deleted = row.Table.Columns.Contains("deleted") ? DBValue.ToBoolean(row["deleted"]) : false,
                           CoppaMonth = row.Table.Columns.Contains("coppa_month") ? DBValue.ToInt32(row["coppa_month"]) : int.MinValue,
                           CoppaYear = row.Table.Columns.Contains("coppa_year") ? DBValue.ToInt32(row["coppa_year"]) : int.MinValue,
                           AgreeToTermServices = row.Table.Columns.Contains("agree_term_services") ? DBValue.ToBoolean(row["agree_term_services"]) : false,
                           Salutation = row.Table.Columns.Contains("salutation") ? row["salutation"].ToString() : null
                       };
            if (data != null && data.Count() != 0)
                return data.ToList<UnknownUser>();
            else
                return null;
        }

        public Users.UnknownUser GetUnknownUser(Int32 intHierarchyID)
        {
            Users.UnknownUser unknownUser = null;

            bool useTransaction = false;
            string storedProcName = "es_get_member";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@intHierarchyID", DbType.Int32, DBValue.ToDBInt32(intHierarchyID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        unknownUser = LoadESubsUser(row);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return unknownUser;
        }

        /*public Users.UnknownUser GetUnknownUser(Int32 intHierarchyID)
        {
            Users.UnknownUser unknownUser = null;

            bool useTransaction = false;
            string storedProcName = "es_get_user";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@intHierarchyID", DbType.Int32, DBValue.ToDBInt32(intHierarchyID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        unknownUser = LoadESubsUser(row);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return unknownUser;
        }*/

        /// <summary>
        /// 
        /// </summary>
        /// <param name="culture_code"></param>
        /// <param name="opt_status_id"></param>
        /// <param name="first_name"></param>
        /// <param name="middle_name"></param>
        /// <param name="last_name"></param>
        /// <param name="gender"></param>
        /// <param name="email_address"></param>
        /// <param name="password"></param>
        /// <param name="bounced"></param>
        /// <param name="comments"></param>
        /// <param name="parent_member_hierarchy_id"></param>
        /// <param name="creation_channel_id"></param>
        /// <param name="member_hierarchy_id"></param>
        /// <param name="member_id"></param>
        /// <returns>-1 = Member with this email and name already exists</returns>
        public InsertMemberIntoDatabaseReturnValue InsertMember(String culture_code, Int32 opt_status_id, String first_name, String middle_name,
            String last_name,string greeting ,string gender, String email_address, String parentFirstName, String parentLastName, string extMemberID, int partnerID, String password,
            Boolean bounced, String comments, Int32 parent_member_hierarchy_id, Int32 creation_channel_id, int leadId, int facebookID, 
            int coppaMonth, int coppaYear, bool agreeToTermServices, bool insertUser, ref Int32 member_hierarchy_id, ref Int32 member_id, ref Int32 user_id, bool emailIsRequired)
        {

            return InsertMember(null, culture_code, opt_status_id, first_name, middle_name,
                last_name,greeting, gender, email_address, parentFirstName, parentLastName, extMemberID, partnerID, password,
                bounced, comments, parent_member_hierarchy_id, creation_channel_id, leadId, facebookID,
                coppaMonth, coppaYear, agreeToTermServices, insertUser, ref member_hierarchy_id, ref member_id, ref user_id, emailIsRequired);

        }


        internal InsertMemberIntoDatabaseReturnValue InsertMember(SqlInterface si, String culture_code, Int32 opt_status_id, String first_name, String middle_name,
            String last_name, string greeting, string gender, String email_address, String parentFirstName, String parentLastName, string extMemberID, int partnerID, String password,
            Boolean bounced, String comments, Int32 parent_member_hierarchy_id, Int32 creation_channel_id, int leadId, int facebookID, 
            int coppaMonth, int coppaYear, bool agreeToTermServices, bool insertUser, ref Int32 member_hierarchy_id, ref Int32 member_id, ref Int32 user_id, bool emailIsRequired)
        {
            eSubsGlobalUser user = new UnknownUser();
            user.Culture = ESubsGlobal.Culture.Create(culture_code);
            user.OptInStatusID = (opt_status_id == 1 ? OptInStatus.OPTIN : OptInStatus.OPTOUT);
            user.FirstName = first_name;
            user.MiddleName = middle_name;
            user.LastName = last_name;
            user.Greeting = greeting;
            user.Gender = gender;
            if (emailIsRequired)
            {
                user.EmailAddress = GA.BDC.Core.EnterpriseStandards.EmailAddress.CreateEmailAddress(email_address);
            }
            else
            {
                if (email_address != null)
                {
                    if (GA.BDC.Core.Validation.Email.EmailValidator.ValidateEmail(email_address))
                    {
                        user.EmailAddress = GA.BDC.Core.EnterpriseStandards.EmailAddress.CreateEmailAddress(email_address);
                    }
                }
            }

            user.ParentFirstName = parentFirstName;
            user.ParentLastName = parentLastName;
            user.ExternalMemberID = extMemberID;
            user.PartnerID = partnerID;
            user.Password = password;
            user.Bounced = bounced;
            user.Comments = comments;
            user.HierarchyParentID = parent_member_hierarchy_id;
            user.CreationChannel = CreationChannel.CreateFromID(creation_channel_id);
            user.LeadID = leadId;
            user.FacebookID = facebookID;
            user.CoppaMonth = coppaMonth;
            user.CoppaYear = coppaYear;
            user.AgreeToTermServices = agreeToTermServices;
            if (user_id != int.MinValue)
                user.UserID = user_id;

            CampaignStatus theStatus = InsertMemberAndMemberHierachy(si, user, insertUser);
            if (theStatus == CampaignStatus.OK)
            {
                member_hierarchy_id = user.HierarchyID;
                member_id = user.ID;
                if (insertUser)
                    user_id = user.UserID;
            }
            else
            {
                if (theStatus == CampaignStatus.EXIST_MEMBER_HIERACHY_ID_WITH_MEMBER_ID_AND_PARENT_MEMBER_HIERARCHY_ID)
                {
                    member_hierarchy_id = user.HierarchyID;
                    member_id = user.ID;
                    return InsertMemberIntoDatabaseReturnValue.EXIST_MEMBER_HIERACHY_ID_WITH_MEMBER_ID_AND_PARENT_MEMBER_HIERARCHY_ID;
                }
                else if (theStatus == CampaignStatus.EMAIL_ADDRESS_PARTNER_ID_ALREADY_EXISTS)
                    return InsertMemberIntoDatabaseReturnValue.EMAIL_ADDRESS_PARTNER_ID_ALREADY_EXISTS;
                else if (theStatus == CampaignStatus.EXTERNAL_MEMBER_ID_ALREADY_EXISTS)
                    return InsertMemberIntoDatabaseReturnValue.EXTERNAL_MEMBER_ID_ALREADY_EXISTS;
                else
                    return InsertMemberIntoDatabaseReturnValue.UNKNOWN_ERROR;
            }
            return InsertMemberIntoDatabaseReturnValue.OK;
        }


        public InsertMemberIntoDatabaseReturnValue InsertMemberIntoTempTable(SqlInterface si, String culture_code, Int32 opt_status_id, String first_name, String middle_name,
            String last_name, string gender, String email_address, string extMemberID, string extGroupID, int partnerID, String password,
            String comments, Int32 creation_channel_id)
        {
            int rowAffected = 0;

            bool useTransaction = false;
            bool myConnection = true;
            //string storedProcName = "es_create_member_into_temp";
            string storedProcName = "xf_create_member";
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                myConnection = false;
            }
            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@external_member_id", DbType.String, DBValue.ToDBString(extMemberID)));
                paramCol.Add(new SqlDataParameter("@external_group_id", DbType.String, DBValue.ToDBString(extGroupID)));
                paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32(partnerID)));
                paramCol.Add(new SqlDataParameter("@first_name", DbType.String, DBValue.ToDBString(first_name)));
                paramCol.Add(new SqlDataParameter("@middle_name", DbType.String, DBValue.ToDBString(middle_name)));
                paramCol.Add(new SqlDataParameter("@last_name", DbType.String, DBValue.ToDBString(last_name)));
                paramCol.Add(new SqlDataParameter("@email_address", DbType.String, DBValue.ToDBString(email_address)));
                paramCol.Add(new SqlDataParameter("@culture_code", DbType.String, DBValue.ToDBString(culture_code)));
                paramCol.Add(new SqlDataParameter("@opt_status_id", DbType.Int32, DBValue.ToDBInt32(opt_status_id)));
                paramCol.Add(new SqlDataParameter("@creation_channel_id", DbType.Int32, DBValue.ToDBInt32(creation_channel_id)));
                paramCol.Add(new SqlDataParameter("@password", DbType.String, DBValue.ToDBString(password)));
                paramCol.Add(new SqlDataParameter("@comments", DbType.String, DBValue.ToDBString(comments)));
                paramCol.Add(new SqlDataParameter("@return", DbType.Int32, ParameterDirection.ReturnValue));

                if (myConnection)
                    si.Open();

                if (useTransaction && myConnection)
                    si.BeginTransaction();

                // Fetch and store into database.
                rowAffected = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                int returnValue = DBValue.ToInt32(paramCol["@return"].Value);

                // Member exists already by email address
                if (returnValue == 1)
                    return InsertMemberIntoDatabaseReturnValue.EXTERNAL_MEMBER_ID_ALREADY_EXISTS;

                // Commit our transaction.
                if (useTransaction && myConnection)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction && myConnection)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                if (myConnection)
                {
                    si.Close();
                }
            }
            return InsertMemberIntoDatabaseReturnValue.OK;
        }

        public UnknownUser[] GetMembersFromTemp(string externalGroupID, int partnerID, bool deleted)
        {
            Users.UnknownUser[] users = null;

            bool useTransaction = false;
            //string storedProcName = "es_get_members_from_temp";
            string storedProcName = "xf_get_member";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@external_group_id", DbType.String, DBValue.ToDBString(externalGroupID)));
                paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32(partnerID)));
                paramCol.Add(new SqlDataParameter("@deleted", DbType.Boolean, DBValue.ToDBBoolean(deleted)));
                si.Open();
                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    si.Close();
                    return null;
                }

                // fill our objects
                try
                {
                    users = new Users.UnknownUser[dt.Rows.Count];
                    int index = 0;
                    foreach (DataRow row in dt.Rows)
                    {
                        Users.UnknownUser user = new Users.UnknownUser();
                        user.FirstName = DBValue.ToString(row["first_name"]);
                        user.LastName = DBValue.ToString(row["last_name"]);

                        user.ExternalMemberID = DBValue.ToString(row["external_member_id"]);
                        user.PartnerID = DBValue.ToInt32(row["partner_id"]);
                        user.EmailAddress = GA.BDC.Core.EnterpriseStandards.EmailAddress.CreateEmailAddress("unknown@efundraising.com");
                        if (DBValue.ToString(row["email_address"]) != null)
                        {
                            if (GA.BDC.Core.Validation.Email.EmailValidator.ValidateEmail(DBValue.ToString(row["email_address"])))
                            {
                                user.EmailAddress = GA.BDC.Core.EnterpriseStandards.EmailAddress.CreateEmailAddress(DBValue.ToString(row["email_address"]));
                            }
                        }
                        user.Password = DBValue.ToString(row["password"]);
                        user.Comments = DBValue.ToString(row["comments"]);

                        user.Culture = Culture.Create(DBValue.ToString(row["culture_code"]));
                        int opt_status_id = DBValue.ToInt32(row["opt_status_id"]);
                        switch (opt_status_id)
                        {
                            case (int)Users.OptInStatus.OPTIN:
                                user.OptInStatusID = Users.OptInStatus.OPTIN;
                                break;
                            case (int)Users.OptInStatus.OPTOUT:
                                user.OptInStatusID = Users.OptInStatus.OPTOUT;
                                break;
                            default:
                                user.OptInStatusID = Users.OptInStatus.OPTIN;
                                break;
                        }
                        int creation_channel_id = DBValue.ToInt32(row["creation_channel_id"]);
                        if (creation_channel_id != int.MinValue)
                        {
                            user.CreationChannel = Users.CreationChannel.CreateFromID(creation_channel_id);
                        }

                        users[index++] = user;
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return users;
        }


        internal InsertMemberIntoDatabaseReturnValue InsertOnlyMember(SqlInterface si, String culture_code, Int32 opt_status_id, String first_name, String middle_name,
            String last_name, String greeting, String gender, String email_address, String parentFirstName, String parentLastName, String extMemberID,
            Int32 partnerID, String password, Boolean bounced, String comments, Int32 creation_channel_id, Int32 leadId, Int32 facebookID, Int32 user_id, ref Int32 member_id)
        {

            int rowAffected = 0;

            bool internalTransaction = true;
            string storedProcName = "es_create_only_member";


            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
                si.Open();
            }
            else
            {
                internalTransaction = false;
            }

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@culture_code", DbType.String, DBValue.ToDBString(culture_code)));
                paramCol.Add(new SqlDataParameter("@opt_status_id", DbType.Int32, DBValue.ToDBInt32(opt_status_id)));
                paramCol.Add(new SqlDataParameter("@first_name", DbType.String, DBValue.ToDBString(first_name)));
                paramCol.Add(new SqlDataParameter("@middle_name", DbType.String, DBValue.ToDBString(middle_name)));
                paramCol.Add(new SqlDataParameter("@last_name", DbType.String, DBValue.ToDBString(last_name)));
                paramCol.Add(new SqlDataParameter("@greeting", DbType.String, DBValue.ToDBString(greeting)));
                paramCol.Add(new SqlDataParameter("@gender", DbType.String, DBValue.ToDBString(gender)));
                paramCol.Add(new SqlDataParameter("@email_address", DbType.String, DBValue.ToDBString(email_address)));
                paramCol.Add(new SqlDataParameter("@password", DbType.String, DBValue.ToDBString(password)));
                paramCol.Add(new SqlDataParameter("@parent_first_name", DbType.String, DBValue.ToDBString(parentFirstName)));
                paramCol.Add(new SqlDataParameter("@parent_last_name", DbType.String, DBValue.ToDBString(parentLastName)));
                paramCol.Add(new SqlDataParameter("@external_member_id", DbType.String, DBValue.ToDBString(extMemberID)));
                paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32(partnerID)));
                paramCol.Add(new SqlDataParameter("@bounced", DbType.Boolean, DBValue.ToDBBoolean(bounced)));
                paramCol.Add(new SqlDataParameter("@comments", DbType.String, DBValue.ToDBString(comments)));
                paramCol.Add(new SqlDataParameter("@creation_channel_id", DbType.Int32, DBValue.ToDBInt32(creation_channel_id)));
                paramCol.Add(new SqlDataParameter("@lead_id", DbType.Int32, DBValue.ToDBInt32(leadId)));
                paramCol.Add(new SqlDataParameter("@facebook_id", DbType.Int32, DBValue.ToDBInt32(facebookID)));
                paramCol.Add(new SqlDataParameter("@user_id", DbType.Int32, DBValue.ToDBInt32(user_id)));
                paramCol.Add(new SqlDataParameter("@member_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@return", DbType.Int32, ParameterDirection.ReturnValue));

                if (internalTransaction)
                {
                    si.BeginTransaction();
                }

                // Fetch and store into database.
                rowAffected = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                int returnValue = DBValue.ToInt32(paramCol["@return"].Value);

                // fill our objects
                try
                {
                    member_id = DBValue.ToInt32(paramCol["@member_id"].Value);
                }
                catch (System.Exception ex)
                {
                    throw new ApplicationException(ex.ToString());
                }


                // Member exists already by email address
                if (returnValue == -1)
                    return InsertMemberIntoDatabaseReturnValue.UNKNOWN_ERROR;
                else if (returnValue == -2)
                    return InsertMemberIntoDatabaseReturnValue.UNKNOWN_ERROR;
                else if (returnValue == 1) //Email Address and Partner id already exists into the table member
                    return InsertMemberIntoDatabaseReturnValue.EMAIL_ADDRESS_PARTNER_ID_ALREADY_EXISTS;
                else if (returnValue == 2) //External member id already exists
                    return InsertMemberIntoDatabaseReturnValue.EXTERNAL_MEMBER_ID_ALREADY_EXISTS;

                // Commit our transaction.
                if (internalTransaction)
                    si.Commit();
            }
            catch (Exception ex)
            {
                // Rollback on error.
                if (internalTransaction)
                    si.Rollback();

                // throw exception
                throw new ESubsGlobalException("InsertMember", ex);
            }
            finally
            {
                if (internalTransaction)
                {
                    si.Close();
                }
            }
            return InsertMemberIntoDatabaseReturnValue.OK;
        }


        internal InsertMemberIntoDatabaseReturnValue InsertMemberHierachy(SqlInterface si, Int32 parent_member_hierarchy_id,
            Int32 creation_channel_id, Int32 member_id, ref Int32 member_hierarchy_id)
        {

            int rowAffected = 0;

            bool internalTransaction = true;
            string storedProcName = "es_create_member_hierarchy";


            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                internalTransaction = false;
            }

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@creation_channel_id", DbType.Int32, DBValue.ToDBInt32(creation_channel_id)));
                paramCol.Add(new SqlDataParameter("@member_id", DbType.Int32, DBValue.ToDBInt32(member_id)));
                paramCol.Add(new SqlDataParameter("@parent_member_hierarchy_id", DbType.Int32, DBValue.ToDBInt32(parent_member_hierarchy_id)));
                paramCol.Add(new SqlDataParameter("@member_hierarchy_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@return", DbType.Int32, ParameterDirection.ReturnValue));

                if (internalTransaction)
                {
                    si.Open();
                    si.BeginTransaction();
                }

                // Fetch and store into database.
                rowAffected = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                int returnValue = DBValue.ToInt32(paramCol["@return"].Value);

                // fill our objects
                try
                {
                    member_hierarchy_id = DBValue.ToInt32(paramCol["@member_hierarchy_id"].Value);
                }
                catch (System.Exception ex)
                {
                    throw new ApplicationException(ex.ToString());
                }


                // Member exists already by email address
                if (returnValue == -1)
                    return InsertMemberIntoDatabaseReturnValue.UNKNOWN_ERROR;
                else if (returnValue == 1) //Exist member_hierachy with @member_id and @parent_member_hierarchy_id
                    return InsertMemberIntoDatabaseReturnValue.EXIST_MEMBER_HIERACHY_ID_WITH_MEMBER_ID_AND_PARENT_MEMBER_HIERARCHY_ID;

                // Commit our transaction.
                if (internalTransaction)
                    si.Commit();
            }
            catch (Exception ex)
            {
                // Rollback on error.
                if (internalTransaction)
                    si.Rollback();

                // throw exception
                throw new ESubsGlobalException("InsertMember", ex);
            }
            finally
            {
                if (internalTransaction)
                {
                    si.Close();
                }
            }
            return InsertMemberIntoDatabaseReturnValue.OK;
        }

        #endregion

        #region Group

        // Updated by Jiro Hidaka (September 21, 2008)
        // Added 'external_url' parameter
        internal InsertGroupIntoDatabaseStatus UpdateGroup(Int32 parent_group_id, Int32 sponsor_id, Int32 partner_id, Int32 lead_id, string external_group_id, String group_name, Int32 expected_membership, String group_url, String comments, String redirect, String external_url, ref Int32 group_id)
        {

            bool useTransaction = false;
            string storedProcName = "es_update_group";

#if TESTNEWPROCEDURE 
			storedProcName = "test_es_update_group";
#endif
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            int returnValue = int.MinValue;

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@parent_group_id", DbType.Int32, DBValue.ToDBInt32(parent_group_id)));
                paramCol.Add(new SqlDataParameter("@sponsor_id", DbType.Int32, DBValue.ToDBInt32(sponsor_id)));
                paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32(partner_id)));
                paramCol.Add(new SqlDataParameter("@lead_id", DbType.Int32, DBValue.ToDBInt32(lead_id)));
                paramCol.Add(new SqlDataParameter("@external_group_id", DbType.String, DBValue.ToDBString(external_group_id)));
                //paramCol.Add(new SqlDataParameter("@external_url", DbType.String, DBValue.ToDBString(external_url)));
                paramCol.Add(new SqlDataParameter("@group_name", DbType.String, DBValue.ToDBString(group_name)));
                paramCol.Add(new SqlDataParameter("@expected_membership", DbType.Int32, DBValue.ToDBInt32(expected_membership)));
                paramCol.Add(new SqlDataParameter("@group_url", DbType.String, DBValue.ToDBString(group_url)));
                paramCol.Add(new SqlDataParameter("@redirect", DbType.String, DBValue.ToDBString(redirect)));
                paramCol.Add(new SqlDataParameter("@comments", DbType.String, DBValue.ToDBString(comments)));
                paramCol.Add(new SqlDataParameter("@group_id", DbType.Int32, DBValue.ToDBInt32(group_id)));
                paramCol.Add(new SqlDataParameter("@return", DbType.Int32, ParameterDirection.ReturnValue));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                returnValue = DBValue.ToInt32(paramCol["@return"].Value);

#if TESTNEWPROCEDURE // Update_TESTNEWPROCEDURE
				// evaluate the return value
				if (returnValue < 0)
					return InsertGroupIntoDatabaseStatus.UNKNOWN_ERROR;
				else if (returnValue == 1) 
					return InsertGroupIntoDatabaseStatus.EXTERNAL_ORGANIZATION_ID_ALREADY_EXISTS;
				else if (returnValue == 2)
					return InsertGroupIntoDatabaseStatus.SPONSORID_ALREADY_EXISTS;

#else
                // evaluate the return value
                if (returnValue == -1)
                    return InsertGroupIntoDatabaseStatus.REDIRECT_URL_ALREADY_EXISTS;
                else if (returnValue == -2)
                    return InsertGroupIntoDatabaseStatus.EXTERNAL_ORGANIZATION_ID_ALREADY_EXISTS;
                else if (returnValue == -3)
                    return InsertGroupIntoDatabaseStatus.UNKNOWN_ERROR;
                else if (returnValue == -4)
                    return InsertGroupIntoDatabaseStatus.MEMBER_HIERARCHY_ALREADY_EXIST;

#endif

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }

            return InsertGroupIntoDatabaseStatus.OK;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="parent_group_id"></param>
        /// <param name="sponsor_id"></param>
        /// <param name="partner_id"></param>
        /// <param name="lead_id"></param>
        /// <param name="external_group_id"></param>
        /// <param name="group_name"></param>
        /// <param name="test_group"></param>
        /// <param name="expected_membership"></param>
        /// <param name="group_url"></param>
        /// <param name="redirect"></param>
        /// <param name="comments"></param>
        /// <param name="group_id"></param>
        /// <returns>-1 = Redirect url already exists</returns>
        public InsertGroupIntoDatabaseStatus InsertGroup(Int32 parent_group_id, Int32 sponsor_id, Int32 partner_id, Int32 lead_id, string external_group_id,
            String group_name, Boolean test_group, Int32 expected_membership, String group_url, String redirect,
            String comments, String external_url, ref Int32 group_id)
        {
            return InsertGroup(null, parent_group_id, sponsor_id, partner_id, lead_id, external_group_id,
                group_name, test_group, expected_membership, group_url, redirect,
                comments, external_url, ref group_id);

        }


        // Updated by Jiro Hidaka (September 21, 2008)
        // Added 'external_url' pareameter
        public InsertGroupIntoDatabaseStatus InsertGroup(SqlInterface si, Int32 parent_group_id, Int32 sponsor_id, Int32 partner_id, Int32 lead_id, string external_group_id,
            String group_name, Boolean test_group, Int32 expected_membership, String group_url, String redirect,
            String comments, String external_url, ref Int32 group_id)
        {
            //bool useTransaction = false; 
            bool internalTransatction = true;

            string storedProcName = "es_create_group";
#if TESTNEWPROCEDURE
			storedProcName = "test_es_create_group";
#endif
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                internalTransatction = false;
            }

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@parent_group_id", DbType.Int32, DBValue.ToDBInt32(parent_group_id)));
                paramCol.Add(new SqlDataParameter("@sponsor_id", DbType.Int32, DBValue.ToDBInt32(sponsor_id)));
                paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32(partner_id)));
                paramCol.Add(new SqlDataParameter("@lead_id", DbType.Int32, DBValue.ToDBInt32(lead_id)));
                paramCol.Add(new SqlDataParameter("@external_group_id", DbType.String, DBValue.ToDBString(external_group_id)));
                // paramCol.Add(new SqlDataParameter("@external_url", DbType.String, DBValue.ToDBString(external_url)));
                paramCol.Add(new SqlDataParameter("@group_name", DbType.String, DBValue.ToDBString(group_name)));
                paramCol.Add(new SqlDataParameter("@test_group", DbType.Boolean, DBValue.ToDBBoolean(test_group)));
                paramCol.Add(new SqlDataParameter("@expected_membership", DbType.Int32, DBValue.ToDBInt32(expected_membership)));
                paramCol.Add(new SqlDataParameter("@group_url", DbType.String, DBValue.ToDBString(group_url)));
                paramCol.Add(new SqlDataParameter("@redirect", DbType.String, DBValue.ToDBString(redirect)));
                paramCol.Add(new SqlDataParameter("@comments", DbType.String, DBValue.ToDBString(comments)));
                paramCol.Add(new SqlDataParameter("@group_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@return", DbType.Int32, ParameterDirection.ReturnValue));

                if (internalTransatction)
                {
                    si.Open();
                    si.BeginTransaction();
                }

                int rowAffected = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // check the return value
                int returnValue = DBValue.ToInt32(paramCol["@return"].Value);

                // fill our objects
                try
                {
                    group_id = DBValue.ToInt32(paramCol["@group_id"].Value);
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

#if TESTNEWPROCEDURE //Insert_TESTNEWPROCEDURE
				if (returnValue < 0)
					return InsertGroupIntoDatabaseStatus.UNKNOWN_ERROR;
				if (returnValue == 1)
					return InsertGroupIntoDatabaseStatus.EXTERNAL_ORGANIZATION_ID_ALREADY_EXISTS;
				else if (returnValue == 2)
					return InsertGroupIntoDatabaseStatus.SPONSORID_ALREADY_EXISTS;
#else
                // evaluate the return value
                if (returnValue == -1)
                    return InsertGroupIntoDatabaseStatus.UNKNOWN_ERROR;
                else if (returnValue == 1) // Partner ID and ExternalGroupID already exists.
                    return InsertGroupIntoDatabaseStatus.EXTERNAL_ORGANIZATION_ID_ALREADY_EXISTS;
                else if (returnValue == 2) // SponsorID already exist
                    return InsertGroupIntoDatabaseStatus.SPONSORID_ALREADY_EXISTS;


#endif




                // Commit our transaction.
                if (internalTransatction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (internalTransatction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                if (internalTransatction)
                    si.Close();
            }
            return InsertGroupIntoDatabaseStatus.OK;
        }

        /// <summary>
        /// Helper method to load Group object.
        /// </summary>
        /// <param name="row"></param>
        /// <returns></returns>
        private Group LoadGroup(DataRow row)
        {
            Group group = new Group();
            group.GroupID = DBValue.ToInt32(row["group_id"]);
            group.GroupParentID = DBValue.ToInt32(row["parent_group_id"]);
            group.SponsorID = DBValue.ToInt32(row["sponsor_id"]);
            group.PartnerID = DBValue.ToInt32(row["partner_id"]);
            group.LeadID = DBValue.ToInt32(row["lead_id"]);
            group.ExternalGroupID = DBValue.ToString(row["external_group_id"]);
            group.Name = DBValue.ToString(row["group_name"]);
            group.TestGroup = DBValue.ToBoolean(row["test_group"]);
            group.ExpectedMembership = DBValue.ToInt32(row["expected_membership"]);
            group.GroupURL = DBValue.ToString(row["group_url"]);
            //group.Redirect = DBValue.ToString(row["redirect"]);
            group.Comments = DBValue.ToString(row["comments"]);

            //Added by Jiro Hidaka (September 21, 2008)
            //group.ExternalURL = DBValue.ToString(row["external_url"]);

            return group;
        }


        public Group GetGroup(Int32 groupID)
        {
            Group group = null;

            bool useTransaction = false;
            string storedProcName = "es_get_group";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@groupID", DbType.Int32, DBValue.ToDBInt32(groupID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        group = LoadGroup(row);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return group;
        }

        public Group GetRootGroup(Int32 groupID)
        {
            Group group = null;

            bool useTransaction = false;
            string storedProcName = "es_get_root_group";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@group_id", DbType.Int32, DBValue.ToDBInt32(groupID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        group = LoadGroup(row);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return group;
        }

        public Group GetGroupByEmail(int partnerID, string email)
        {
            Group group = null;

            bool useTransaction = false;
            string storedProcName = "es_get_group_by_email";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32(partnerID)));
                paramCol.Add(new SqlDataParameter("@email", DbType.String, DBValue.ToDBString(email)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        group = LoadGroup(row);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return group;
        }

        public Group GetGroupByExternalGroupID(int partnerID, string extGroupID)
        {
            Group group = null;

            bool useTransaction = false;
            string storedProcName = "es_get_group_by_ext_group_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32(partnerID)));
                paramCol.Add(new SqlDataParameter("@external_group_id", DbType.String, DBValue.ToDBString(extGroupID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        DataRow row = dt.Rows[0];
                        group = LoadGroup(row);
                    }
                    catch (System.Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return group;
        }

        public Group GetGroupByPaymentID(int id)
        {
            Group group = null;

            bool useTransaction = false;
            string storedProcName = "es_get_group_by_payment_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@payment_id", DbType.Int32, DBValue.ToDBInt32(id)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        DataRow row = dt.Rows[0];
                        group = LoadGroup(row);
                    }
                    catch (System.Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return group;
        }

        public List<Group> GetGroupRandomByPartnerID(int partnerid)
        {
            List<Group> lst = new List<Group>();


            bool useTransaction = false;
            string storedProcName = "es_get_group_random_top_3_by_partner_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32(partnerid)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        foreach (DataRow row in dt.Rows)
                        {
                            lst.Add(LoadGroup(row));
                        }
                    }
                    catch (System.Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return lst;
        }


        public List<Group> GetGroupByPartnerID(int partnerid)
        {
            List<Group> lst = new List<Group>();


            bool useTransaction = false;
            string storedProcName = "es_get_group_by_partner_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32(partnerid)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        foreach (DataRow row in dt.Rows)
                        {
                            lst.Add(LoadGroup(row));
                        }
                    }
                    catch (System.Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return lst;
        }

        public Group GetGroupByEventID(int eventID)
        {
            Group group = null;

            bool useTransaction = false;
            string storedProcName = "es_get_group_by_event_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(eventID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        DataRow row = dt.Rows[0];
                        group = LoadGroup(row);
                    }
                    catch (System.Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return group;
        }

        public Group GetGroupByMemberHierarchyID(int memberHierarchyID)
        {
            Group group = null;

            bool useTransaction = false;
            string storedProcName = "es_get_group_by_member_hierarchy_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@member_hierarchy_id", DbType.Int32, DBValue.ToDBInt32(memberHierarchyID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        DataRow row = dt.Rows[0];
                        group = LoadGroup(row);
                    }
                    catch (System.Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return group;
        }

        public Group[] GetGroupByOrderDates(DateTime start, DateTime end)
        {
            Group[] groups = null;

            bool useTransaction = false;
            string storedProcName = "es_get_group_by_order_date";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@startDate", DbType.DateTime, DBValue.ToDBDateTime(start)));
                paramCol.Add(new SqlDataParameter("@endDate", DbType.DateTime, DBValue.ToDBDateTime(end)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    return null;
                    //throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    groups = new Group[dt.Rows.Count];
                    int c = 0;
                    foreach (DataRow row in dt.Rows)
                    {
                        groups[c++] = LoadGroup(row);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return groups;
        }

        public int InsertGroup(Int32 parent_group_id, Int32 group_type_id, Int32 sponsor_id, Int32 partner_id, Int32 lead_id,
            string external_group_id, String group_name, Boolean test_group, Int32 expected_membership,
            String group_url, String comments, Int32 group_id)
        {
            int rowAffected = 0;

            bool useTransaction = false;
            string storedProcName = "es_create_group";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@parent_group_id", DbType.Int32, DBValue.ToDBInt32(parent_group_id)));
                paramCol.Add(new SqlDataParameter("@group_type_id", DbType.Int32, DBValue.ToDBInt32(group_type_id)));
                paramCol.Add(new SqlDataParameter("@sponsor_id", DbType.Int32, DBValue.ToDBInt32(sponsor_id)));
                paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32(partner_id)));
                paramCol.Add(new SqlDataParameter("@lead_id", DbType.Int32, DBValue.ToDBInt32(lead_id)));
                paramCol.Add(new SqlDataParameter("@external_group_id", DbType.String, DBValue.ToDBString(external_group_id)));
                paramCol.Add(new SqlDataParameter("@group_name", DbType.String, DBValue.ToDBString(group_name)));
                paramCol.Add(new SqlDataParameter("@test_group", DbType.Boolean, DBValue.ToDBBoolean(test_group)));
                paramCol.Add(new SqlDataParameter("@expected_membership", DbType.Int32, DBValue.ToDBInt32(expected_membership)));
                paramCol.Add(new SqlDataParameter("@group_url", DbType.String, DBValue.ToDBString(group_url)));
                paramCol.Add(new SqlDataParameter("@comments", DbType.String, DBValue.ToDBString(comments)));
                paramCol.Add(new SqlDataParameter("@group_id", DbType.Int32, DBValue.ToDBInt32(group_id)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {

                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return rowAffected;
        }

        #endregion

        #region Phone

        public void GetPhoneNumber(Users.eSubsGlobalUser user)
        {

            bool useTransaction = false;
            string storedProcName = "es_get_member_phone_number";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@memberID", DbType.Int32, DBValue.ToDBInt32(user.ID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    // clear existing phone numbers
                    user.PhoneNumbers.Clear();

                    foreach (DataRow row in dt.Rows)
                    {
                        int phone_number_id = DBValue.ToInt32(row["phone_number_id"]);
                        int member_id = DBValue.ToInt32(row["member_id"]);
                        string phone_number = DBValue.ToString(row["phone_number"]);
                        bool active = DBValue.ToBoolean(row["active"]);
                        int phone_number_type_id = DBValue.ToInt32(row["phone_number_type_id"]);
                        string phone_number_type_name = DBValue.ToString(row["phone_number_type_name"]);

                        Common.PhoneNumber phoneNumber = new Common.PhoneNumber();
                        phoneNumber.ID = phone_number_id;
                        try
                        {
                            phoneNumber.SetPhoneNumber(phone_number);
                        }
                        catch
                        { // todojf: make sure data has been correctly imported
                        }
                        phoneNumber.IsActive = active;

                        switch (phone_number_type_id)
                        {
                            case (int)PhoneNumberType.DAY_PHONE:
                                phoneNumber.PhoneNumberTypeID = PhoneNumberType.DAY_PHONE;
                                break;
                            case (int)PhoneNumberType.EVENING_PHONE:
                                phoneNumber.PhoneNumberTypeID = PhoneNumberType.EVENING_PHONE;
                                break;
                            case (int)PhoneNumberType.FAX:
                                phoneNumber.PhoneNumberTypeID = PhoneNumberType.FAX;
                                break;
                            case (int)PhoneNumberType.MOBILE:
                                phoneNumber.PhoneNumberTypeID = PhoneNumberType.MOBILE;
                                break;
                            default:
                                phoneNumber.PhoneNumberTypeID = PhoneNumberType.DAY_PHONE;
                                break;
                        }

                        PhoneNumber pn = new PhoneNumber();
                        pn.SetPhoneNumber(phone_number);
                        user.PhoneNumbers.Add(pn);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }

        public PhoneNumberCollection GetPhoneNumberCollection(Int32 memberID)
        {
            PhoneNumberCollection phoneNumberCollection = new PhoneNumberCollection();

            bool useTransaction = false;
            string storedProcName = "es_get_member_phone_number";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@memberID", DbType.Int32, DBValue.ToDBInt32(memberID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        PhoneNumber phoneNumber = new PhoneNumber();

                        phoneNumber.ID = DBValue.ToInt32(row["phone_number_id"]);
                        phoneNumber.SetPhoneNumber(DBValue.ToString(row["phone_number"]));
                        phoneNumber.IsActive = DBValue.ToBoolean(row["active"]);
                        int phoneNumberTypeId = DBValue.ToInt32(row["phone_number_type_id"]);
                        switch (phoneNumberTypeId)
                        {
                            case (int)PhoneNumberType.DAY_PHONE:
                                phoneNumber.PhoneNumberTypeID = PhoneNumberType.DAY_PHONE;
                                break;
                            case (int)PhoneNumberType.EVENING_PHONE:
                                phoneNumber.PhoneNumberTypeID = PhoneNumberType.EVENING_PHONE;
                                break;
                            case (int)PhoneNumberType.FAX:
                                phoneNumber.PhoneNumberTypeID = PhoneNumberType.FAX;
                                break;
                            case (int)PhoneNumberType.MOBILE:
                                phoneNumber.PhoneNumberTypeID = PhoneNumberType.MOBILE;
                                break;
                            default:
                                phoneNumber.PhoneNumberTypeID = PhoneNumberType.DAY_PHONE;
                                break;
                        }

                        phoneNumberCollection.Add(phoneNumber);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return phoneNumberCollection;
        }

        #endregion

        #region Prizes objects

        public PrizeCollection GetPrizeCollection(Int32 programID, Int32 partnerID)
        {
            PrizeCollection prizeCollection = new PrizeCollection();

            bool useTransaction = false;
            string storedProcName = "es_get_partner_prizes";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@programID", DbType.Int32, DBValue.ToDBInt32(programID)));
                paramCol.Add(new SqlDataParameter("@partnerID", DbType.Int32, DBValue.ToDBInt32(partnerID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                // ** A partner can have no prizes
                //if(dt.Rows.Count < 1) {
                //	throw new SqlDataException("No records on " + storedProcName);
                //}

                // fill our objects
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        Prize p = new Prize();

                        p.PrizeID = DBValue.ToInt32(row["prize_id"]);
                        p.Name = DBValue.ToString(row["prize_name"]);
                        p.TypeName = DBValue.ToString(row["prize_type_name"]);
                        p.ProgramTypeID = DBValue.ToInt32(row["program_id"]);
                        prizeCollection.Add(p);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return prizeCollection;
        }

        #endregion

        #region Partner objects

        public void UpdatePartner(Int32 partner_id, String partner_name, Boolean has_collection_site)
        {

            bool useTransaction = false;
            string storedProcName = "es_update_partner";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32(partner_id)));
                paramCol.Add(new SqlDataParameter("@partner_name", DbType.String, DBValue.ToDBString(partner_name)));
                paramCol.Add(new SqlDataParameter("@has_collection_site", DbType.Boolean, DBValue.ToDBBoolean(has_collection_site)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }

        public bool InsertPartner(Int32 partner_id, Int32 partner_type_id, String partner_name, Boolean has_collection_site)
        {
            bool useTransaction = false;
            string storedProcName = "es_create_partner";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            bool ok = false;

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32(partner_id)));
                paramCol.Add(new SqlDataParameter("@partner_type_id", DbType.Int32, DBValue.ToDBInt32(partner_type_id)));
                paramCol.Add(new SqlDataParameter("@partner_name", DbType.String, DBValue.ToDBString(partner_name)));
                paramCol.Add(new SqlDataParameter("@has_collection_site", DbType.Boolean, DBValue.ToDBBoolean(has_collection_site)));
                paramCol.Add(new SqlDataParameter("@return", DbType.Int32, ParameterDirection.ReturnValue));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (DBValue.ToInt32(paramCol["@return"].Value) == 0)
                {
                    ok = true;
                }


                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return ok;
        }


        private Partner LoadPartner(DataRow row, Culture culture)
        {
            Partner partner = new Partner();
            partner.PartnerID = DBValue.ToInt32(row["partner_id"]);
            partner.PartnerTypeID = DBValue.ToInt32(row["partner_type_id"]);
            partner.Name = DBValue.ToString(row["partner_name"]);
            partner.HasCollectionSite = DBValue.ToBoolean(row["has_collection_site"]);
            partner.GUID = DBValue.ToString(row["guid"]);

            if (partner.PartnerID == -1)
            {
                return partner;
            }

            try
            {
                partner.SetPartnerAttributeCollection(GetPartnerAttributeCollection(partner.PartnerID, culture.CultureCode));
            }
            catch (Exception ex)
            {
                throw new ESubsGlobalException(partner.PartnerID + ": Unable to retreive partner attribute", ex);
            }

            try
            {
                partner.ProgramCollection = GetProgramCollection(partner.PartnerID);
            }
            catch (Exception ex)
            {
                throw new ESubsGlobalException(partner.PartnerID + ": Unable to retreive partner program collection", ex);
            }

            try
            {
                partner.PartnerLinkCollection = GetPartnerLinkCollection(partner.PartnerID);
            }
            catch (Exception ex)
            {
                throw new ESubsGlobalException(partner.PartnerID + ": Unable to retreive partner link collection", ex);
            }

            try
            {
                partner.PartnerProductOffer = GetPartnerProductOfferByID(partner.PartnerID);
                if (partner.PartnerProductOffer != null)
                {
                    ProductOffer.ESubs product_offer = ProductOffer.ESubs.ALL;
                    ProductOffer pro = ProductOffer.GetProductOfferByID(partner.PartnerProductOffer.ProductOfferID);
                    if (pro != null)
                    {
                        bool foundMatch = false;
                        switch (pro.Description.ToUpper())
                        {
                            case ProductOffer.AllProduct:
                                product_offer = ProductOffer.ESubs.ALL;
                                foundMatch = true;
                                break;
                            case ProductOffer.MagOnlyProduct:
                                product_offer = ProductOffer.ESubs.MAG_ONLY;
                                foundMatch = true;
                                break;
                            case ProductOffer.MagRestoProduct:
                                product_offer = ProductOffer.ESubs.MAG_RESTO;
                                foundMatch = true;
                                break;
                            case ProductOffer.RestoMagProduct:
                                product_offer = ProductOffer.ESubs.RESTO_MAG;
                                foundMatch = true;
                                break;
                            case ProductOffer.DonationOnlyProduct:
                                product_offer = ProductOffer.ESubs.DONATION_ONLY;
                                foundMatch = true;
                                break;
                            case ProductOffer.MagAndMore:
                                product_offer = ProductOffer.ESubs.MAG_AND_MORE;
                                foundMatch = true;
                                break;
                            case ProductOffer.BoxTops:
                                product_offer = ProductOffer.ESubs.BOXTOPS;
                                foundMatch = true;
                                break;
                        }

                        if (foundMatch == false)
                        {
                            GA.BDC.Core.Diagnostics.Logger.LogError("There was an error matching the parnter product offer: " + pro.Description.ToUpper().Replace("-", "_"));
                            product_offer = (ProductOffer.ESubs)Enum.Parse(typeof(ProductOffer.ESubs), partner.PartnerProductOffer.ProductOfferID.ToString());
                        }

                        partner.ESubsProductOffer = product_offer;
                    }
                    else
                        throw new ESubsGlobalException("Unable to get 'ProductOffer' for " + partner.PartnerProductOffer.ProductOfferID.ToString());
                }
            }
            catch (Exception ex)
            {
                throw new ESubsGlobalException(partner.PartnerID + ": Unable to retreive partner product offer", ex);
            }

            return partner;
        }

        public ESubsProgramCollection GetProgramCollection(Int32 partnerID)
        {
            ESubsProgramCollection programCollection = new ESubsProgramCollection();

            bool useTransaction = false;
            string storedProcName = "es_get_partner_programs";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@partnerID", DbType.Int32, DBValue.ToDBInt32(partnerID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        ESubsProgram p = new ESubsProgram();
                        p.ID = DBValue.ToInt32(row["program_id"]);
                        p.Name = DBValue.ToString(row["program_name"]);
                        p.URL = DBValue.ToString(row["program_url"]);
                        programCollection.AddProgram(p);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return programCollection;
        }        
        
        public PartnerAttributeCollection GetPartnerAttributeCollection(Int32 partnerID, String cultureCode)
        {
            PartnerAttributeCollection partnerAttributeCollection =
                new PartnerAttributeCollection();

            bool useTransaction = false;
            string storedProcName = "es_get_partner_attributes";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@partnerID", DbType.Int32, DBValue.ToDBInt32(partnerID)));
                paramCol.Add(new SqlDataParameter("@cultureCode", DbType.String, DBValue.ToDBString(cultureCode)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                // ** a partner can have no attributes
                //if(dt.Rows.Count < 1) {
                //	throw new SqlDataException("No records on " + storedProcName);
                //}

                // fill our objects
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        PartnerAttribute pa = new PartnerAttribute();
                        pa.PartnerAttributeID = DBValue.ToInt32(row["partner_attribute_id"]);
                        pa.Name = DBValue.ToString(row["partner_attribute_name"]);
                        pa.Value = DBValue.ToString(row["value"]);
                        /* string culture_code = DBValue.ToString(row["culture_code"]); */
                        partnerAttributeCollection.Add(pa);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return partnerAttributeCollection;
        }

        public Partner[] GetPartners(Culture culture)
        {
            Partner[] partners = null;

            bool useTransaction = false;
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable("es_get_partners", CommandType.StoredProcedure, null);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records");
                }

                // fill our objects
                try
                {
                    partners = new Partner[dt.Rows.Count];
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        partners[i] = LoadPartner(dt.Rows[i], culture);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill partner object", ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return partners;
        }

        public PartnerCollections GetPartnerCollections(Culture culture)
        {
            PartnerCollections partners = null;

            bool useTransaction = false;
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable("es_get_partners", CommandType.StoredProcedure, null);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records");
                }

                // fill our objects
                try
                {
                    partners = new PartnerCollections();
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        partners.Add(LoadPartner(dt.Rows[i], culture));
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill partner object", ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return partners;
        }

        public Partner GetPartnerByHost(string guid)
        {
            return new Partner();
        }

        public Partner GetPartnerByID(int id, Culture culture)
        {
            // declare object(s)
            Partner partner = null;

            bool useTransaction = false;
            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            DataTable dt = null;
            try
            {
                // Package our parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@partnerID", DbType.Int32, id));
                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                dt = si.ExecuteFetchDataTable("es_get_partner", CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records");
                }

                // Fill object(s)
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        partner = LoadPartner(row, culture);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill partner object", ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return partner;
        }
        public Partner GetPartnerByPaymentID(int id)
        {
            // declare object(s)
            Partner partner = null;
            Culture culture = Culture.DEFAULT;
            bool useTransaction = false;
            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            DataTable dt = null;
            try
            {
                // Package our parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Payment_id", DbType.Int32, id));
                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                dt = si.ExecuteFetchDataTable("es_get_partner_by_payment_id", CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records");
                }

                // Fill object(s)
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        partner = LoadPartner(row, culture);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill partner object", ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return partner;
        }

        public Partner GetPartnerByGUID(String guid, Culture culture)
        {
            Partner partner = null;

            bool useTransaction = false;
            string storedProcName = "es_get_partner_by_guid";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@guid", DbType.String, DBValue.ToDBString(guid)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        partner = LoadPartner(row, culture);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return partner;
        }

        public Partner GetPartnerByHost(String host, Culture culture)
        {
            Partner partner = null;

            bool useTransaction = false;
            string storedProcName = "es_get_partner_by_host";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@host", DbType.String, DBValue.ToDBString(host)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        partner = LoadPartner(row, culture);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return partner;
        }


        public PaymentInfo GetPaymentInfoByPartnerID(int partnerId)
        {
            return GetPaymentInfoByPartnerID(partnerId, null);
        }
        private PaymentInfo GetPaymentInfoByPartnerID(int partnerId, SqlInterface si)
        {
            PaymentInfo paymentInfo = null;

            string storedProcName = "es_get_payment_info_by_partner_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32(partnerId)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        paymentInfo = LoadPaymentInfo(dt.Rows);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return paymentInfo;
        }

        // Added by Jiro Hidaka (November 12, 2008)
        public PartnerLinkCollection GetPartnerLinkCollection(Int32 partnerID)
        {
            PartnerLinkCollection partnerLinkCollection =
                new PartnerLinkCollection();

            bool useTransaction = false;
            string storedProcName = "es_get_partner_culture_link";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@partnerID", DbType.Int32, DBValue.ToDBInt32(partnerID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        PartnerLink pa = new PartnerLink();
                        pa.PartnerID = DBValue.ToInt32(row["partner_id"]);
                        pa.CultureCode = DBValue.ToString(row["culture_code"]);
                        pa.LinkedPartnerID = DBValue.ToInt32(row["linked_partner_id"]);
                        partnerLinkCollection.Add(pa);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return partnerLinkCollection;
        }
        #endregion

        #region Product Offer
        public ProductOffer GetProductOfferByID(Int32 product_offer_id)
        {
            ProductOffer product_offer = new ProductOffer();

            bool useTransaction = false;
            string storedProcName = "es_get_product_offer_by_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@product_offer_id", DbType.Int32, DBValue.ToDBInt32(product_offer_id)));
                si.Open();
                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    product_offer = LoadProductOffer(dt.Rows[0]);
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return product_offer;
        }

        private ProductOffer LoadProductOffer(DataRow row)
        {
            ProductOffer product_offer = new ProductOffer();
            product_offer.ProductOfferID = DBValue.ToInt32(row["product_offer_id"]);
            product_offer.Description = DBValue.ToString(row["description"]);
            return product_offer;
        }

        public PartnerProductOffer GetPartnerProductOfferByID(Int32 partner_id)
        {
            PartnerProductOffer ppo = new PartnerProductOffer();

            bool useTransaction = false;
            string storedProcName = "es_get_partner_product_offer_by_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32(partner_id)));
                si.Open();
                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    ppo = LoadPartnerProductOffer(dt.Rows[0]);
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return ppo;
        }

        private PartnerProductOffer LoadPartnerProductOffer(DataRow row)
        {
            PartnerProductOffer ppo = new PartnerProductOffer();
            ppo.PartnerID = DBValue.ToInt32(row["partner_id"]);
            ppo.ProductOfferID = DBValue.ToInt32(row["product_offer_id"]);
            return ppo;
        }
        #endregion

        #region Personalization

        public Personalization GetCurrentPersonalization(Int32 event_participation_id)
        {
            Personalization personalization = null;

            bool useTransaction = false;
            string storedProcName = "es_get_personalization";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_participation_id", DbType.Int32, DBValue.ToDBInt32(event_participation_id)));
                si.Open();
                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    si.Close();
                    return null;
                    //throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    DataRow row = dt.Rows[0];
                    personalization = LoadPersonalization(row);
                    personalization.EventParticipationID = event_participation_id;
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return personalization;
        }

        public void InsertPersonalization(int event_participation_id, String header_title1, String header_title2, String body, Decimal fundraising_goal, String site_bgcolor, String header_bgcolor, String header_color, String group_url, String image_url, byte image_motivator, ref Int32 personalization_id, byte displayGroupMessage, string redirect, byte skip)
        {
            bool useTransaction = false;
            string storedProcName = "es_create_personalization";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_participation_id", DbType.Int32, DBValue.ToDBInt32(event_participation_id)));
                paramCol.Add(new SqlDataParameter("@header_title1", DbType.String, DBValue.ToDBString(header_title1)));
                paramCol.Add(new SqlDataParameter("@header_title2", DbType.String, DBValue.ToDBString(header_title2)));
                paramCol.Add(new SqlDataParameter("@body", DbType.String, DBValue.ToDBString(body)));
                paramCol.Add(new SqlDataParameter("@fundraising_goal", DbType.Decimal, DBValue.ToDBDecimal(fundraising_goal)));
                paramCol.Add(new SqlDataParameter("@site_bgcolor", DbType.String, DBValue.ToDBString(site_bgcolor)));
                paramCol.Add(new SqlDataParameter("@header_bgcolor", DbType.String, DBValue.ToDBString(header_bgcolor)));
                paramCol.Add(new SqlDataParameter("@header_color", DbType.String, DBValue.ToDBString(header_color)));
                paramCol.Add(new SqlDataParameter("@group_url", DbType.String, DBValue.ToDBString(group_url)));
                paramCol.Add(new SqlDataParameter("@image_url", DbType.String, DBValue.ToDBString(image_url)));
                paramCol.Add(new SqlDataParameter("@image_motivator", DbType.Byte, DBValue.ToByte(image_motivator)));
                paramCol.Add(new SqlDataParameter("@personalization_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@return", DbType.Int32, ParameterDirection.ReturnValue));
                paramCol.Add(new SqlDataParameter("@redirect", DbType.String, DBValue.ToDBString(redirect)));
                paramCol.Add(new SqlDataParameter("@displayGroupMessage", DbType.Byte, DBValue.ToByte(displayGroupMessage)));
                paramCol.Add(new SqlDataParameter("@skip", DbType.Byte, DBValue.ToByte(skip)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    personalization_id = DBValue.ToInt32(paramCol["@personalization_id"].Value);
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }

        /// <summary>
        /// Get personalization settings of site. This method always returns a personalization.
        /// </summary>
        /// <param name="eventParticipationId">Event participation</param>
        /// <returns>Personalization object.</returns>
        public Personalization TBD_GetSitePersonalization(int eventParticipationId)
        {
            Personalization pers = null;

            bool useTransaction = false;
            string storedProcName = "es_get_site_personalization";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_participation_id", DbType.Int32, DBValue.ToDBInt32(eventParticipationId)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    pers = LoadPersonalization(dt.Rows[0]);
                    pers.EventParticipationID = eventParticipationId;
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }

            return pers;
        }

        /// <summary>
        /// Get personalization settings of parent member.
        /// </summary>
        /// <param name="eventParticipationId">Event participation</param>
        /// <returns>Personalization object.</returns>
        public Personalization GetParentPersonalization(int eventParticipationId)
        {
            Personalization pers = null;

            bool useTransaction = false;
            string storedProcName = "es_get_parent_personalization";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_participation_id", DbType.Int32, DBValue.ToDBInt32(eventParticipationId)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    pers = LoadPersonalization(dt.Rows[0]);
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }

            return pers;
        }

        /// <summary>
        /// Get personalization.
        /// </summary>
        /// <param name="eventParticipationId">EventParticipationId</param>
        /// <returns>Personalization object</returns>
        public Personalization GetPersonalization(int eventParticipationId)
        {
            Personalization pers = null;

            bool useTransaction = false;
            string storedProcName = "es_get_site_personalization";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_participation_id", DbType.Int32, DBValue.ToDBInt32(eventParticipationId)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    si.Close();
                    return null;
                    //throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    pers = LoadPersonalization(dt.Rows[0]);
                    pers.EventParticipationID = eventParticipationId;
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }

            return pers;
        }

        /// <summary>
        /// Get personalization.
        /// </summary>
        /// <param name="eventParticipationId">EventParticipationId</param>
        /// <returns>Personalization object</returns>
        public List<Personalization> GetPersonalizationByRedirect(string redirect)
        {
            List<Personalization> pers = new List<Personalization>();

            bool useTransaction = false;
            string storedProcName = "es_get_personalization_by_redirect";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@redirect", DbType.String, DBValue.ToDBString(redirect)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    si.Close();
                    return null;
                    //throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        pers.Add(LoadPersonalization(dt.Rows[i]));
                    }

                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }

            return pers;
        }


        /// <summary>
        /// Get personalization.
        /// </summary>
        /// <param name="eventParticipationId">EventParticipationId</param>
        /// <returns>Personalization object</returns>
        public List<Personalization> GetPersonalizationByEventID(int eventID)
        {
            List<Personalization> pers = new List<Personalization>();

            bool useTransaction = false;
            string storedProcName = "es_get_personalization_by_eventID";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@eventID", DbType.Int32, DBValue.ToDBInt32(eventID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    si.Close();
                    return null;
                    //throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        pers.Add(LoadPersonalization(dt.Rows[i]));
                    }

                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();

                return pers;
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }

          
        }

        public Personalization GetSponsorPersonalizationByRedirect(string redirect)
        {
            Personalization pers = null;

            bool useTransaction = false;
            string storedProcName = "es_get_sponsor_redirect";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@redirect", DbType.String, DBValue.ToDBString(redirect)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    si.Close();
                    return null;
                    //throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    pers = LoadPersonalization(dt.Rows[0]);

                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }

            return pers;
        }




        private Personalization LoadPersonalization(DataRow row)
        {
            Personalization pers = new Personalization();
            pers.PersonalizationId = DBValue.ToInt32(row["personalization_id"]);
            pers.HeaderTitle1 = DBValue.ToString(row["header_title1"]);
            pers.HeaderTitle2 = DBValue.ToString(row["header_title2"]);
            pers.Body = DBValue.ToString(row["body"]);
            pers.FundraisingGoal = row["fundraising_goal"] != DBNull.Value ? DBValue.ToDecimal(row["fundraising_goal"]) : 0M;
            pers.SiteBackgroundColor = DBValue.ToString(row["site_bgcolor"]);
            pers.HeaderBackgroundColor = DBValue.ToString(row["header_bgcolor"]);
            pers.HeaderTextColor = DBValue.ToString(row["header_color"]);
            pers.GroupUrl = DBValue.ToString(row["group_url"]);
            pers.ImageUrl = DBValue.ToString(row["image_url"]);
            pers.ImageMotivator = row["image_motivator"] != DBNull.Value && row["image_motivator"].ToString().Trim() == "0" ? (byte)0 : (byte)1;
            pers.Redirect = DBValue.ToString(row["redirect"]);            
            pers.EventParticipationID = DBValue.ToInt32(row["event_participation_id"]);            
            if (row["displayGroupMessage"] != DBNull.Value && row["displayGroupMessage"] != null)
            {
                pers.DisplayGroupMessage = Convert.ToByte(row["displayGroupMessage"]);
            }
            else
            {
                pers.DisplayGroupMessage = 0;
            }
            if (row.Table.Columns.Contains("remind_later") && row["remind_later"] != DBNull.Value)
                pers.RemindLater = Convert.ToByte(row["remind_later"]);
            return pers;
        }


        /// <summary>
        /// Update personalization settings.
        /// </summary>
        /// <param name="pers">Personalization object.</param>
        public void UpdatePersonalization(Personalization pers)
        {
            bool useTransaction = false;
            string storedProcName = "es_update_personalization";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@personalization_id", DbType.Int32, DBValue.ToDBInt32(pers.PersonalizationId)));
                paramCol.Add(new SqlDataParameter("@header_title1", DbType.String, DBValue.ToDBString(pers.HeaderTitle1)));
                paramCol.Add(new SqlDataParameter("@header_title2", DbType.String, DBValue.ToDBString(pers.HeaderTitle2)));
                paramCol.Add(new SqlDataParameter("@body", DbType.String, DBValue.ToDBString(pers.Body)));
                paramCol.Add(new SqlDataParameter("@fundraising_goal", DbType.Decimal, DBValue.ToDBDecimal(pers.FundraisingGoal)));
                paramCol.Add(new SqlDataParameter("@site_bgcolor", DbType.String, DBValue.ToDBString(pers.SiteBackgroundColor)));
                paramCol.Add(new SqlDataParameter("@header_bgcolor", DbType.String, DBValue.ToDBString(pers.HeaderBackgroundColor)));
                paramCol.Add(new SqlDataParameter("@header_color", DbType.String, DBValue.ToDBString(pers.HeaderTextColor)));
                paramCol.Add(new SqlDataParameter("@group_url", DbType.String, DBValue.ToDBString(pers.GroupUrl)));
                paramCol.Add(new SqlDataParameter("@image_url", DbType.String, DBValue.ToDBString(pers.ImageUrl)));
                paramCol.Add(new SqlDataParameter("@image_motivator", DbType.Byte, DBValue.ToByte(pers.ImageMotivator)));
                paramCol.Add(new SqlDataParameter("@redirect", DbType.String, DBValue.ToDBString(pers.Redirect)));
                paramCol.Add(new SqlDataParameter("@displayGroupMessage", DbType.Byte, DBValue.ToByte(pers.DisplayGroupMessage)));
                paramCol.Add(new SqlDataParameter("@remind_later", DbType.Byte, DBValue.ToByte(pers.RemindLater)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Update table
                int ret = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }

        private PersonalizationImage LoadPersonalizationImage(DataRow row)
        {
            PersonalizationImage persImg = new PersonalizationImage();
            persImg.ImageID = DBValue.ToInt32(row["image_id"]);
            persImg.PersonalizationID = DBValue.ToInt32(row["personalization_id"]);
            persImg.ImageUrl = DBValue.ToString(row["image_url"]);
            if (row.Table.Columns.Contains("high_image_url"))
                persImg.HighImageUrl= DBValue.ToString(row["high_image_url"]);
            persImg.Deleted = Convert.ToByte(row["deleted"]);
            persImg.IsCoverAlbum = Convert.ToByte(row["isCoverAlbum"]);
            persImg.ImageApprovalStatusId= Convert.ToByte(row["image_approval_status_id"]);

            return persImg;
        }

        /// <summary>
        /// Get Personalization Images.
        /// </summary>
        /// <param name="eventParticipationId">Personalization_id</param>
        /// <returns>Generic list of PersonalizationImage object</returns>
        public List<PersonalizationImage> GetPersonalizationImages(Int32 personalization_id)
        {
            List<PersonalizationImage> persImgs = new List<PersonalizationImage>();

            bool useTransaction = false;
            string storedProcName = "es_get_personalization_image";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@personalization_id", DbType.Int32, DBValue.ToDBInt32(personalization_id)));
                si.Open();
                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {

                   // throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        persImgs.Add(LoadPersonalizationImage(row));
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return persImgs;
        }

        /// <summary>
        /// Get Cover Album Image.
        /// </summary>
        /// <param name="eventParticipationId">Personalization_id</param>
        /// <returns>PersonalizationImage object representing the cover album</returns>
        public PersonalizationImage GetPersonalizationCoverAlbumImage(Int32 personalization_id, Int32 event_id)
        {
            PersonalizationImage persImg = new PersonalizationImage();

            bool useTransaction = false;
            string storedProcName = "es_get_personalization_coveralbum_image";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@personalization_id", DbType.Int32, DBValue.ToDBInt32(personalization_id)));
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(event_id)));
                si.Open();
                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    // throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        persImg = LoadPersonalizationImage(row);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return persImg;
        }

        /// <summary>
        /// Update personalization Image settings.
        /// </summary>
        /// <param name="pers">PersonalizationImage object.</param>
        public void UpdatePersonalizationImage(PersonalizationImage persImg)
        {
            bool useTransaction = false;
            string storedProcName = "es_update_personalization_image";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@image_id", DbType.Int32, DBValue.ToDBInt32(persImg.ImageID)));
                paramCol.Add(new SqlDataParameter("@personalization_id", DbType.Int32, DBValue.ToDBInt32(persImg.PersonalizationID)));
                paramCol.Add(new SqlDataParameter("@image_url", DbType.String, DBValue.ToDBString(persImg.ImageUrl)));
                paramCol.Add(new SqlDataParameter("@high_image_url", DbType.String, DBValue.ToDBString(persImg.HighImageUrl)));

                paramCol.Add(new SqlDataParameter("@deleted", DbType.Byte, DBValue.ToByte(persImg.Deleted)));
                paramCol.Add(new SqlDataParameter("@isCoverAlbum", DbType.Byte, DBValue.ToByte(persImg.IsCoverAlbum)));
                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Update table
                int ret = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }

        public void InsertPersonalizationImage(int personalization_id, String image_url,String high_image_url ,byte deleted, ref Int32 image_id, byte isCoverAlbum, int image_approval_status_id)
        {
			bool useTransaction = false;
			string storedProcName = "es_create_personalization_image";
			SqlInterface si = new SqlInterface(dataProvider, connectionString);

			try {

				SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
				paramCol.Add(new SqlDataParameter("@personalization_id", DbType.Int32, DBValue.ToDBInt32(personalization_id)));
				paramCol.Add(new SqlDataParameter("@image_url", DbType.String, DBValue.ToDBString(image_url)));
                paramCol.Add(new SqlDataParameter("@high_image_url", DbType.String, DBValue.ToDBString(high_image_url)));

				paramCol.Add(new SqlDataParameter("@deleted", DbType.Byte, DBValue.ToByte(deleted)));
				paramCol.Add(new SqlDataParameter("@image_id", DbType.Int32, DBValue.ToDBInt32(image_id)));
                paramCol.Add(new SqlDataParameter("@isCoverAlbum", DbType.Byte, DBValue.ToByte(isCoverAlbum)));
                paramCol.Add(new SqlDataParameter("@image_approval_status_id", DbType.Int32, DBValue.ToDBInt32(image_approval_status_id)));
                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    image_id = DBValue.ToInt32(paramCol["@image_id"].Value);
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }

        private ImageApprovalDesc LoadImageApprovalDescStatus(DataRow row)
        {
            ImageApprovalDesc imgStaDesc = new ImageApprovalDesc();
            imgStaDesc.ApprovalDescription = DBValue.ToString(row["image_approval_status_description"]);
            imgStaDesc.ApprovalId = DBValue.ToInt32(row["image_approval_status_id"]);
            return imgStaDesc;
        }

        public List<ImageApprovalDesc> GetImageApprovalDescStatus()
        {
            string storedProcName = "es_get_image_approval_desc_status";
            bool useTransaction = false;
            List<ImageApprovalDesc> imgStaDesc = new List<ImageApprovalDesc>();


            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    si.Close();
                    return null;
                    //throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        imgStaDesc.Add(LoadImageApprovalDescStatus(row));

                    }

                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();

                return imgStaDesc;
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }

        }
        #endregion

        #region Direct Mail Personalization Image
        private DmPersonalizationImage LoadDmPersonalizationImage(DataRow row)
        {
            DmPersonalizationImage persImg = new DmPersonalizationImage();
            persImg.ImageID = DBValue.ToInt32(row["image_id"]);
            persImg.DirectMailInfoId = DBValue.ToInt32(row["direct_mail_info_id"]);
            persImg.ImageUrl = DBValue.ToString(row["image_url"]);
            persImg.Deleted = Convert.ToByte(row["deleted"]);
            persImg.IsCoverAlbum = Convert.ToByte(row["isCoverAlbum"]);
            persImg.ImageApprovalStatusId = Convert.ToByte(row["image_approval_status_id"]);

            // Added July 25, 2011 (Jiro + Jason):
            //   Merged the image validation changes
            persImg.EventId = DBValue.ToInt32(row["event_id"]);
            if (row.Table.Columns.Contains("personalization_id"))
                persImg.PersonalizationID = DBValue.ToInt32(row["personalization_id"]);
            persImg.Message = DBValue.ToString(row["message"]);
            return persImg;
        }

        /// <summary>
        /// Get Personalization Images.
        /// </summary>
        /// <param name="eventParticipationId">Personalization_id</param>
        /// <returns>Generic list of PersonalizationImage object</returns>
        public List<DmPersonalizationImage> GetDmPersonalizationImages(Int32 direct_mail_info_id)
        {
            List<DmPersonalizationImage> persImgs = new List<DmPersonalizationImage>();

            bool useTransaction = false;
            string storedProcName = "es_get_dm_personalization_image";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@direct_mail_info_id", DbType.Int32, DBValue.ToDBInt32(direct_mail_info_id)));
                si.Open();
                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {

                    // throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        persImgs.Add(LoadDmPersonalizationImage(row));
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return persImgs;
        }

        /// <summary>
        /// Update personalization Image settings.
        /// </summary>
        /// <param name="pers">PersonalizationImage object.</param>
        public void UpdateDmPersonalizationImage(DmPersonalizationImage persImg)
        {
            bool useTransaction = false;
            string storedProcName = "es_update_dm_personalization_image";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@image_id", DbType.Int32, DBValue.ToDBInt32(persImg.ImageID)));
                paramCol.Add(new SqlDataParameter("@direct_mail_info_id", DbType.Int32, DBValue.ToDBInt32(persImg.DirectMailInfoId)));
                paramCol.Add(new SqlDataParameter("@image_url", DbType.String, DBValue.ToDBString(persImg.ImageUrl)));
                paramCol.Add(new SqlDataParameter("@deleted", DbType.Byte, DBValue.ToByte(persImg.Deleted)));
                paramCol.Add(new SqlDataParameter("@isCoverAlbum", DbType.Byte, DBValue.ToByte(persImg.IsCoverAlbum)));
                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Update table
                int ret = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }

        public int InsertDmPersonalizationImage(int direct_mail_info_id, String image_url, byte deleted, ref Int32 image_id, byte isCoverAlbum, int image_approval_status_id)
        {
            bool useTransaction = false;
            string storedProcName = "es_create_dm_personalization_image";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@direct_mail_info_id", DbType.Int32, DBValue.ToDBInt32(direct_mail_info_id)));
                paramCol.Add(new SqlDataParameter("@image_url", DbType.String, DBValue.ToDBString(image_url)));
                paramCol.Add(new SqlDataParameter("@deleted", DbType.Byte, DBValue.ToByte(deleted)));
                paramCol.Add(new SqlDataParameter("@image_id", DbType.Int32, DBValue.ToDBInt32(image_id)));
                paramCol.Add(new SqlDataParameter("@isCoverAlbum", DbType.Byte, DBValue.ToByte(isCoverAlbum)));
                paramCol.Add(new SqlDataParameter("@image_approval_status_id", DbType.Int32, DBValue.ToDBInt32(image_approval_status_id)));
                //paramCol.Add(new SqlDataParameter("@dm_personalization_image_id", DbType.Int32, DBValue.ToDBInt32(image_id)));
                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    image_id = DBValue.ToInt32(paramCol["@image_id"].Value);
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }

            return image_id;
        }

        public List<DmPersonalizationImage> GetDmPersonalizationUserImage(int image_status, string start_date, string end_date, int event_id)
        {
            string storedProcName = "es_get_DMpersonalization_image_to_validate";
            bool useTransaction = false;
            List<DmPersonalizationImage> persDMImg = new List<DmPersonalizationImage>();

            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@image_status", DbType.Int32, DBValue.ToDBInt32(image_status)));
                paramCol.Add(new SqlDataParameter("@start_date", DbType.String, DBValue.ToDBString(start_date)));
                paramCol.Add(new SqlDataParameter("@end_date", DbType.String, DBValue.ToDBString(end_date)));
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(event_id)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    si.Close();
                    return null;
                    //throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        persDMImg.Add(LoadDmPersonalizationImage(dt.Rows[i]));
                    }

                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();

                return persDMImg;
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }

        }

        public void UpdateDmValidatedImage(int imageID, string message, int image_approval_status_id, string approver_name)
        {
            string storedProcName = "es_DMupdate_personalization_image_validated";
            bool useTransaction = false;
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@image_id", DbType.Int32, DBValue.ToDBInt32(imageID)));
                paramCol.Add(new SqlDataParameter("@message", DbType.String, DBValue.ToDBString(message)));
                paramCol.Add(new SqlDataParameter("@image_approval_status_id", DbType.Int32, DBValue.ToDBInt32(image_approval_status_id)));
                paramCol.Add(new SqlDataParameter("@approver_name", DbType.String, DBValue.ToDBString(approver_name)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }
        #endregion

        #region EventFacebookVisitor Methods

        public void InsertEventFaceBookVisitor(int personalization_id, string facebook_id, string facebook_image_url, string facebook_firstname, string facebook_lastname, ref Int32 event_facebook_visitor_id)
        {
            bool useTransaction = false;
            string storedProcName = "es_create_event_facebook_visitor";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@personalization_id", DbType.Int32, DBValue.ToDBInt32(personalization_id)));
                paramCol.Add(new SqlDataParameter("@facebook_id", DbType.String, DBValue.ToDBString(facebook_id)));
                paramCol.Add(new SqlDataParameter("@facebook_image_url", DbType.String, DBValue.ToDBString(facebook_image_url)));
                paramCol.Add(new SqlDataParameter("@facebook_firstname", DbType.String, DBValue.ToDBString(facebook_firstname)));
                paramCol.Add(new SqlDataParameter("@facebook_lastname", DbType.String, DBValue.ToDBString(facebook_lastname)));
                paramCol.Add(new SqlDataParameter("@event_facebook_visitor_id", DbType.Int32, ParameterDirection.Output)); 
                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    event_facebook_visitor_id = DBValue.ToInt32(paramCol["@event_facebook_visitor_id"].Value);
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }


        /// <summary>
        /// Update personalization Image settings.
        /// </summary>
        /// <param name="pers">PersonalizationImage object.</param>
        public void UpdateEventFaceBookVisitor(FacebookVisitor fb)
        {
            bool useTransaction = false;
            string storedProcName = "es_update_event_facebook_visitor";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();

                paramCol.Add(new SqlDataParameter("@event_facebook_visitor", DbType.Int32, DBValue.ToDBInt32(fb.EventFacebookVisitorID)));
                paramCol.Add(new SqlDataParameter("@personalization_id", DbType.Int32, DBValue.ToDBInt32(fb.PersonalizationID)));
                paramCol.Add(new SqlDataParameter("@facebook_id", DbType.String, DBValue.ToDBString(fb.FacebookID)));
                paramCol.Add(new SqlDataParameter("@facebook_image_url", DbType.String, DBValue.ToDBString(fb.FacebookImageUrl)));
                paramCol.Add(new SqlDataParameter("@facebook_firstname", DbType.String, DBValue.ToDBString(fb.FacebookFirstName)));
                paramCol.Add(new SqlDataParameter("@facebook_lastname", DbType.String, DBValue.ToDBString(fb.FacebookLastName)));
                paramCol.Add(new SqlDataParameter("@deleted", DbType.Byte, DBValue.ToByte(fb.Deleted)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Update table
                int ret = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }

        public List<FacebookVisitor> GetEventFaceBookVisitor(Int32 personalization_id)
        {

            List<FacebookVisitor> fbv = new List<FacebookVisitor>();

            bool useTransaction = false;
            string storedProcName = "es_get_eventfacebookvisitor";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@personalization_id", DbType.Int32, DBValue.ToDBInt32(personalization_id)));
                si.Open();
                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {

                    // throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        fbv.Add(LoadEventFaceBookVisitor(row));
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }

            return fbv;
        }

        private FacebookVisitor LoadEventFaceBookVisitor(DataRow row)
        {
            FacebookVisitor f = new FacebookVisitor();

            f.EventFacebookVisitorID = DBValue.ToInt32(row["event_facebook_visitor"]);
            f.PersonalizationID = DBValue.ToInt32(row["personalization_id"]);
            f.FacebookID = Convert.ToString(row["facebook_id"]);
            f.FacebookImageUrl = Convert.ToString(row["facebook_image_url"]);
            f.FacebookFirstName = Convert.ToString(row["facebook_firstname"]);
            f.FacebookLastName = Convert.ToString(row["facebook_lastname"]);
            f.Deleted = Convert.ToByte(row["deleted"]);
            
            //f.IsCoverAlbum = Convert.ToByte(row["update_date"]);
            //f.IsCoverAlbum = Convert.ToByte(row["create_date"]);
          
            return f;
        }

        #endregion

        #region Program Methods

        private Program LoadProgram(DataRow row)
        {
            Program program = new Program();

            // Store database values into our business object
            program.ProgramId = DBValue.ToInt32(row["program_id"]);
            program.ProgramName = DBValue.ToString(row["program_name"]);
            program.CreateDate = DBValue.ToDateTime(row["create_date"]);

            // return the filled object
            return program;
        }

        public Program[] GetPrograms()
        {
            return GetPrograms(null);
        }

        private Program[] GetPrograms(SqlInterface si)
        {
            Program[] programs = null;

            string storedProcName = "es_get_programs";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    programs = new Program[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            programs[i] = LoadProgram(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return programs;
        }


        public Program GetProgramByID(int id)
        {
            return GetProgramByID(id, null);
        }

        private Program GetProgramByID(int id, SqlInterface si)
        {
            Program program = null;

            string storedProcName = "es_get_program_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Program_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        program = LoadProgram(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return program;
        }


        public int InsertProgram(Program program)
        {
            return InsertProgram(program, null);
        }

        private int InsertProgram(Program program, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_insert_program";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Program_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Program_name", DbType.String, DBValue.ToDBString(program.ProgramName)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(program.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    program.ProgramId = DBValue.ToInt32(paramCol["@Program_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateProgram(Program program)
        {
            return UpdateProgram(program, null);
        }

        private int UpdateProgram(Program program, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_update_program";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Program_id", DbType.Int32, DBValue.ToDBInt32(program.ProgramId)));
                paramCol.Add(new SqlDataParameter("@Program_name", DbType.String, DBValue.ToDBString(program.ProgramName)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(program.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region ProgramPartner Methods

        private ProgramPartner LoadProgramPartner(DataRow row)
        {
            ProgramPartner programPartner = new ProgramPartner();

            // Store database values into our business object
            programPartner.ProgramId = DBValue.ToInt32(row["program_id"]);
            programPartner.PartnerId = DBValue.ToInt32(row["partner_id"]);
            programPartner.ProgramUrl = DBValue.ToString(row["program_url"]);
            programPartner.CreateDate = DBValue.ToDateTime(row["create_date"]);

            // return the filled object
            return programPartner;
        }

        public ProgramPartner[] GetProgramPartners()
        {
            return GetProgramPartners(null);
        }

        private ProgramPartner[] GetProgramPartners(SqlInterface si)
        {
            ProgramPartner[] programPartners = null;

            string storedProcName = "es_get_program_partners";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    programPartners = new ProgramPartner[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            programPartners[i] = LoadProgramPartner(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return programPartners;
        }


        public ProgramPartner GetProgramPartnerByPartnerID(int id)
        {
            return GetProgramPartnerByPartnerID(id, null);
        }

        private ProgramPartner GetProgramPartnerByPartnerID(int id, SqlInterface si)
        {
            ProgramPartner programPartner = null;

            string storedProcName = "es_get_program_partner_by_partner_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Partner_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        programPartner = LoadProgramPartner(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return programPartner;
        }


        public int InsertProgramPartner(ProgramPartner programPartner)
        {
            return InsertProgramPartner(programPartner, null);
        }

        private int InsertProgramPartner(ProgramPartner programPartner, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_insert_program_partner";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Program_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Partner_id", DbType.Int32, DBValue.ToDBInt32(programPartner.PartnerId)));
                paramCol.Add(new SqlDataParameter("@Program_url", DbType.String, DBValue.ToDBString(programPartner.ProgramUrl)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(programPartner.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    programPartner.ProgramId = DBValue.ToInt32(paramCol["@Program_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateProgramPartner(ProgramPartner programPartner)
        {
            return UpdateProgramPartner(programPartner, null);
        }

        private int UpdateProgramPartner(ProgramPartner programPartner, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_update_program_partner";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Program_id", DbType.Int32, DBValue.ToDBInt32(programPartner.ProgramId)));
                paramCol.Add(new SqlDataParameter("@Partner_id", DbType.Int32, DBValue.ToDBInt32(programPartner.PartnerId)));
                paramCol.Add(new SqlDataParameter("@Program_url", DbType.String, DBValue.ToDBString(programPartner.ProgramUrl)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(programPartner.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region Culture

        public SubDivisionCollections GetSubvision(string countryCode)
        {
            /*
                CREATE PROCEDURE es_get_subdivision_by_country
                    @country_code nvarchar(2)
                AS
                BEGIN
                    SELECT subdivision_code
                        , subdivision_name_1 as subdivision_name_fr
                        , subdivision_name_2 as subdivision_name_en
                    FROM subdivision
                    WHERE country_code = @country_code
                END
            */
            SubDivisionCollections subDivisionCollection = new SubDivisionCollections();
            bool useTransaction = false;
            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            string storedProcName = "es_get_subdivision_by_country";
            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@country_code", DbType.String, ParameterDirection.Input, DBValue.ToDBString(countryCode)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);
                if (dt.Rows.Count < 1)
                    throw new SqlDataException("No records on " + storedProcName);
                try
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        SubDivision sb = new SubDivision((string)dt.Rows[i]["subdivision_code"]);
                        sb.CultureCaptions.Add(new CultureCaption(Culture.EN_US, (string)dt.Rows[i]["subdivision_name_en"]));
                        sb.CultureCaptions.Add(new CultureCaption(Culture.EN_CA, (string)dt.Rows[i]["subdivision_name_en"]));
                        sb.CultureCaptions.Add(new CultureCaption(Culture.FR_CA, (string)dt.Rows[i]["subdivision_name_fr"]));
                        subDivisionCollection.Add(sb);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return subDivisionCollection;
        }

        public Culture GetCulture(string cultureCode)
        {
            Culture c = null;

            bool useTransaction = false;
            string storedProcName = "es_get_culture";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@culture_code", DbType.String, DBValue.ToDBString(cultureCode)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    c = new Culture();
                    c.CountryCode = DBValue.ToString(dt.Rows[0]["country_code"]);
                    c.LanguageCode = DBValue.ToString(dt.Rows[0]["language_code"]);
                    c.CultureCode = DBValue.ToString(dt.Rows[0]["culture_code"]);
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }

            return c;
        }

        public DataTable GetSubDivisionsInDataTable(Culture culture)
        {
            string storedProcName = "es_get_subdivision";
            DataTable dt = null;
            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@country_code", DbType.String, DBValue.ToDBString(culture.CountryCode)));
                paramCol.Add(new SqlDataParameter("@language_code", DbType.String, DBValue.ToDBString(culture.LanguageCode)));
                // Fetch and store into database.
                dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);
            }
            catch (Exception)
            {
            }
            finally
            {
                si.Close();
            }
            return dt;
        }
        public SortedList GetSubDivisions(Culture culture)
        {
            SortedList sl = new SortedList();

            bool useTransaction = false;
            string storedProcName = "es_get_subdivision";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@country_code", DbType.String, DBValue.ToDBString(culture.CountryCode)));
                paramCol.Add(new SqlDataParameter("@language_code", DbType.String, DBValue.ToDBString(culture.LanguageCode)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        try
                        {
                            sl.Add(DBValue.ToString(dt.Rows[i]["subdivision_name"]), DBValue.ToString(dt.Rows[i]["subdivision_code"]));
                        }
                        catch
                        {
                            // We get duplicates here. Just ignore them.
                        }
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }

            return sl;
        }
        #endregion

        #region TellAFriend
        public void InsertTellAFriend(TellAFriend taf)
        {
            bool useTransaction = false;
            string storedProcName = "es_create_tellafriend";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@name", DbType.String, DBValue.ToDBString(taf.SenderName)));
                paramCol.Add(new SqlDataParameter("@email", DbType.String, DBValue.ToDBString(taf.SenderEmail)));
                paramCol.Add(new SqlDataParameter("@subject", DbType.String, DBValue.ToDBString(taf.Subject)));
                paramCol.Add(new SqlDataParameter("@body_txt", DbType.String, DBValue.ToDBString(taf.TextBody)));
                paramCol.Add(new SqlDataParameter("@body_html", DbType.String, DBValue.ToDBString(taf.HtmlBody)));
                paramCol.Add(new SqlDataParameter("@recipient_name", DbType.String, DBValue.ToDBString(taf.RecipientName)));
                paramCol.Add(new SqlDataParameter("@recipient_email", DbType.String, DBValue.ToDBString(taf.RecipientEmail)));
                paramCol.Add(new SqlDataParameter("@tellafriend_id", DbType.Int32, ParameterDirection.InputOutput,
                    DBValue.ToDBInt32(taf.Id)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                int rowAffected = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    taf.Id = DBValue.ToInt32(paramCol["@tellafriend_id"].Value);
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }
        #endregion

        #region Touch
        public void InsertInvitation(Invitation inv)
        {
            bool useTransaction = false;
            string storedProcName = "es_create_invitation";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_participation_id", DbType.Int32, DBValue.ToDBInt32(inv.EventParticipationID)));
                paramCol.Add(new SqlDataParameter("@touch_info_id", DbType.Int32, DBValue.ToDBInt32(inv.TouchInfoID)));
                paramCol.Add(new SqlDataParameter("@touch_id", DbType.Int32, ParameterDirection.Output));


                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    inv.TouchID = DBValue.ToInt32(paramCol["@touch_id"].Value);
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }

        public void InsertInvitation(Invitation inv, int extTrackID)
        {
            bool useTransaction = false;
            string storedProcName = "es_create_invitation_with_ext_track_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_participation_id", DbType.Int32, DBValue.ToDBInt32(inv.EventParticipationID)));
                paramCol.Add(new SqlDataParameter("@touch_info_id", DbType.Int32, DBValue.ToDBInt32(inv.TouchInfoID)));
                paramCol.Add(new SqlDataParameter("@ext_track_id", DbType.Int32, DBValue.ToDBInt32(extTrackID)));
                paramCol.Add(new SqlDataParameter("@touch_id", DbType.Int32, ParameterDirection.Output));


                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    inv.TouchID = DBValue.ToInt32(paramCol["@touch_id"].Value);
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }

        public void InsertTouchInfo(TouchInfo ti)
        {
            bool useTransaction = false;
            string storedProcName = "es_create_touch_info";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@visitor_log_id", DbType.Int32, DBValue.ToDBInt32(ti.VisitorLogID)));
                paramCol.Add(new SqlDataParameter("@subject", DbType.String, DBValue.ToDBString(ti.Subject)));
                paramCol.Add(new SqlDataParameter("@body_txt", DbType.String, DBValue.ToDBString(ti.TextBody)));
                paramCol.Add(new SqlDataParameter("@body_html", DbType.String, DBValue.ToDBString(ti.HtmlBody)));
                if (ti.LaunchDate == DateTime.MinValue)
                {
                    paramCol.Add(new SqlDataParameter("@launch_date", DbType.DateTime, DBValue.ToDBDateTime(DateTime.Now)));
                }
                else
                {
                    paramCol.Add(new SqlDataParameter("@launch_date", DbType.DateTime, DBValue.ToDBDateTime(ti.LaunchDate)));
                }
                paramCol.Add(new SqlDataParameter("@business_rule_id", DbType.Int32, DBValue.ToDBInt32(ti.RuleID)));
                paramCol.Add(new SqlDataParameter("reminder_interval_day", DbType.Int32, DBValue.ToDBInt32(ti.reminder_interval_day)));
                paramCol.Add(new SqlDataParameter("@touch_info_id", DbType.Int32, ParameterDirection.Output));
                
                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    ti.TouchInfoID = DBValue.ToInt32(paramCol["@touch_info_id"].Value);
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }

        private GA.BDC.Core.ESubsGlobal.Touch.Touch LoadTouch(DataRow row)
        {
            GA.BDC.Core.ESubsGlobal.Touch.Touch ti = new GA.BDC.Core.ESubsGlobal.Touch.Touch();

            // Store database values into our business object
            ti.touch_id = DBValue.ToInt32(row["touch_touch_id"]);
            ti.event_participation_id = DBValue.ToInt32(row["touch_event_participation_id"]);
            ti.member_hierarchy_id = DBValue.ToInt32(row["touch_member_hierarchy_id"]);
            ti.processed = DBValue.ToInt32(row["touch_processed"]);
            ti.create_date = DBValue.ToDateTime(row["touch_create_date"]);

            ti.touch_info_id = DBValue.ToInt32(row["touch_touch_info_id"]);
            //ti.msrepl_tran_version = DBValue.ToString(row["touch_msrepl_tran_version"]);

            // return the filled object
            return ti;
        }

        public void UpdateTouch(GA.BDC.Core.ESubsGlobal.Touch.Touch touch)
        {

            bool useTransaction = false;
            string storedProcName = "es_update_touch";

            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_participation_id", DbType.Int32, DBValue.ToDBInt32(touch.event_participation_id)));
                paramCol.Add(new SqlDataParameter("@member_hierarchy_id", DbType.Int32, DBValue.ToDBInt32(touch.member_hierarchy_id)));
                paramCol.Add(new SqlDataParameter("@touch_info_id", DbType.Int32, DBValue.ToDBInt32(touch.touch_info_id)));
                paramCol.Add(new SqlDataParameter("@processed", DbType.Int32, DBValue.ToDBInt32(touch.processed)));
                paramCol.Add(new SqlDataParameter("@touch_id", DbType.Int32, DBValue.ToDBInt32(touch.touch_id)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);


                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }

        }


        public void InsertOnlyTouchInfo(GA.BDC.Core.ESubsGlobal.Touch.touch_info touchinfo)
        {
            bool useTransaction = false;
            string storedProcName = "es_create_only_touch_info";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();

                paramCol.Add(new SqlDataParameter("@visitor_log_id", DbType.Int32, DBValue.ToDBInt32(touchinfo.touch_info_id)));
                paramCol.Add(new SqlDataParameter("@business_rule_id", DbType.Int32, DBValue.ToDBInt32(touchinfo.business_rule_id)));
                paramCol.Add(new SqlDataParameter("@launch_date", DbType.DateTime, DBValue.ToDateTime(touchinfo.launch_date)));

                paramCol.Add(new SqlDataParameter("@reminder_interval_day", DbType.Int32, DBValue.ToDBInt32(touchinfo.reminder_interval_day)));
                paramCol.Add(new SqlDataParameter("@touch_info_id", DbType.Int32, ParameterDirection.Output));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    touchinfo.touch_info_id = DBValue.ToInt32(paramCol["@touch_info_id"].Value);
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }

        public Touch.Touch LoadByTouchId(int touchId)
        {
            Touch.Touch t = null;

            bool useTransaction = false;
            string storedProcName = "es_get_touch";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@touch_id", DbType.Int32, DBValue.ToDBInt32(touchId)));

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    if (dt.Rows.Count > 0)
                    {
                        t = new Touch.Touch();
                        t.event_participation_id = DBValue.ToInt32(dt.Rows[0]["event_participation_id"]);
                        t.member_hierarchy_id = DBValue.ToInt32(dt.Rows[0]["member_hierarchy_id"]);;
                        t.processed = DBValue.ToInt32(dt.Rows[0]["processed"]);
                        t.touch_id = DBValue.ToInt32(dt.Rows[0]["touch_id"]);
                    }

                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }

            return t;
        }

        public void InsertOnlyTouch(GA.BDC.Core.ESubsGlobal.Touch.Touch touch)
        {
            bool useTransaction = false;
            string storedProcName = "es_create_only_touch";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@member_hierarchy_id", DbType.Int32, DBValue.ToDBInt32(touch.member_hierarchy_id)));
                paramCol.Add(new SqlDataParameter("@touch_info_id", DbType.Int32, DBValue.ToDBInt32(touch.touch_info_id)));
                paramCol.Add(new SqlDataParameter("@processed", DbType.Int32, DBValue.ToDBInt32(touch.processed)));
                paramCol.Add(new SqlDataParameter("@touch_id", DbType.Int32, ParameterDirection.Output));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    touch.touch_id = DBValue.ToInt32(paramCol["@touch_id"].Value);
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }

        public void InsertCloneTouch(GA.BDC.Core.ESubsGlobal.Touch.Touch touch)
        {
            bool useTransaction = false;
            string storedProcName = "es_create_clone_touch";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@member_hierarchy_id", DbType.Int32, DBValue.ToDBInt32(touch.member_hierarchy_id)));
                paramCol.Add(new SqlDataParameter("@event_participation_id", DbType.Int32, DBValue.ToDBInt32(touch.event_participation_id)));
                paramCol.Add(new SqlDataParameter("@touch_info_id", DbType.Int32, DBValue.ToDBInt32(touch.touch_info_id)));
                paramCol.Add(new SqlDataParameter("@processed", DbType.Int32, DBValue.ToDBInt32(touch.processed)));
                paramCol.Add(new SqlDataParameter("@touch_id", DbType.Int32, ParameterDirection.Output));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    touch.touch_id = DBValue.ToInt32(paramCol["@touch_id"].Value);
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }

        public void UpdateEmailTemplate(EmailTemplate et)
        {
            bool useTransaction = false;
            string storedProcName = "es_update_email_template";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@email_template_type_id", DbType.Int32, DBValue.ToDBInt32(et.TemplateTypeId)));
                paramCol.Add(new SqlDataParameter("@email_template_name", DbType.String, DBValue.ToDBString(et.TemplateName)));
                paramCol.Add(new SqlDataParameter("@description", DbType.String, DBValue.ToDBString(et.Description)));
                paramCol.Add(new SqlDataParameter("@param_procedure_call", DbType.String, DBValue.ToDBString(et.ProcedureCall)));
                paramCol.Add(new SqlDataParameter("@from_name", DbType.String, DBValue.ToDBString(et.FromName)));
                paramCol.Add(new SqlDataParameter("@from_email_address", DbType.String, DBValue.ToDBString(et.FromEmail)));
                paramCol.Add(new SqlDataParameter("@reply_to_name", DbType.String, DBValue.ToDBString(et.ReplyToName)));
                paramCol.Add(new SqlDataParameter("@reply_to_email_address", DbType.String, DBValue.ToDBString(et.ReplyToEmail)));
                paramCol.Add(new SqlDataParameter("@bounce_name", DbType.String, DBValue.ToDBString(et.BounceName)));
                paramCol.Add(new SqlDataParameter("@bounce_email_address", DbType.String, DBValue.ToDBString(et.BounceEmail)));
                paramCol.Add(new SqlDataParameter("@footer_text", DbType.String, DBValue.ToDBString(et.TextFooter)));
                paramCol.Add(new SqlDataParameter("@footer_html", DbType.String, DBValue.ToDBString(et.HtmlFooter)));
                paramCol.Add(new SqlDataParameter("@culture_code", DbType.String, DBValue.ToDBString(et.CultureCode)));
                paramCol.Add(new SqlDataParameter("@subject", DbType.String, DBValue.ToDBString(et.Subject)));
                paramCol.Add(new SqlDataParameter("@body_html", DbType.String, DBValue.ToDBString(et.HtmlBody)));
                paramCol.Add(new SqlDataParameter("@body_text", DbType.String, DBValue.ToDBString(et.TextBody)));
                paramCol.Add(new SqlDataParameter("@email_template_id", DbType.Int32, DBValue.ToDBInt32(et.TemplateId)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                int ret = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (ret < 0)
                {
                    throw new SqlDataException("Unable to update with " + storedProcName);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }

        public void InsertEmailTemplate(EmailTemplate et)
        {
            bool useTransaction = false;
            string storedProcName = "es_insert_email_template";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@email_template_type_id", DbType.Int32, DBValue.ToDBInt32(et.TemplateTypeId)));
                paramCol.Add(new SqlDataParameter("@email_template_name", DbType.String, DBValue.ToDBString(et.TemplateName)));
                paramCol.Add(new SqlDataParameter("@description", DbType.String, DBValue.ToDBString(et.Description)));
                paramCol.Add(new SqlDataParameter("@param_procedure_call", DbType.String, DBValue.ToDBString(et.ProcedureCall)));
                paramCol.Add(new SqlDataParameter("@from_name", DbType.String, DBValue.ToDBString(et.FromName)));
                paramCol.Add(new SqlDataParameter("@from_email_address", DbType.String, DBValue.ToDBString(et.FromEmail)));
                paramCol.Add(new SqlDataParameter("@reply_to_name", DbType.String, DBValue.ToDBString(et.ReplyToName)));
                paramCol.Add(new SqlDataParameter("@reply_to_email_address", DbType.String, DBValue.ToDBString(et.ReplyToEmail)));
                paramCol.Add(new SqlDataParameter("@bounce_name", DbType.String, DBValue.ToDBString(et.BounceName)));
                paramCol.Add(new SqlDataParameter("@bounce_email_address", DbType.String, DBValue.ToDBString(et.BounceEmail)));
                paramCol.Add(new SqlDataParameter("@footer_text", DbType.String, DBValue.ToDBString(et.TextFooter)));
                paramCol.Add(new SqlDataParameter("@footer_html", DbType.String, DBValue.ToDBString(et.HtmlFooter)));
                paramCol.Add(new SqlDataParameter("@culture_code", DbType.String, DBValue.ToDBString(et.CultureCode)));
                paramCol.Add(new SqlDataParameter("@subject", DbType.String, DBValue.ToDBString(et.Subject)));
                paramCol.Add(new SqlDataParameter("@body_html", DbType.String, DBValue.ToDBString(et.HtmlBody)));
                paramCol.Add(new SqlDataParameter("@body_text", DbType.String, DBValue.ToDBString(et.TextBody)));
                paramCol.Add(new SqlDataParameter("@email_template_id", DbType.Int32, DBValue.ToDBInt32(et.TemplateId)));
                paramCol.Add(new SqlDataParameter("@ret", DbType.Int32, ParameterDirection.ReturnValue));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                int ret = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (ret < 0)
                {
                    throw new SqlDataException("Unable to insert with " + storedProcName);
                }

                // fill our objects
                try
                {
                    if (et.TemplateId == int.MinValue)
                        et.TemplateId = DBValue.ToInt32(paramCol["@ret"].Value);
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }


        public TouchInfo GetTouchInfo(int touchInfoId)
        {
            TouchInfo ti = null;

            bool useTransaction = false;
            string storedProcName = "es_get_email_template";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@touch_info_id", DbType.Int32, DBValue.ToDBInt32(touchInfoId)));

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    if (dt.Rows.Count > 0)
                    {
                        ti = new TouchInfo();
                        ti.TouchInfoID = DBValue.ToInt32(dt.Rows[0]["touch_info_id"]);
                        ti.HtmlBody = DBValue.ToString(dt.Rows[0]["body_txt"]);
                        ti.TextBody = DBValue.ToString(dt.Rows[0]["body_html"]);
                        ti.Subject = DBValue.ToString(dt.Rows[0]["subject"]);
                        ti.LaunchDate = DBValue.ToDateTime(dt.Rows[0]["launch_date"]);
                        ti.VisitorLogID = DBValue.ToInt32(dt.Rows[0]["visitor_log_id"]);
                    }

                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }

            return ti;
        }

        public TouchInfo LoadByTouchInfoId(int touchInfoId)
        {
            TouchInfo ti = null;

            bool useTransaction = false;
            string storedProcName = "es_get_touch_info";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@touch_info_id", DbType.Int32, DBValue.ToDBInt32(touchInfoId)));

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    if (dt.Rows.Count > 0)
                    {
                        ti = new TouchInfo();
                        ti.TouchInfoID = DBValue.ToInt32(dt.Rows[0]["touch_info_id"]);
                        ti.HtmlBody = DBValue.ToString(dt.Rows[0]["body_html"]);
                        ti.TextBody = DBValue.ToString(dt.Rows[0]["body_txt"]);
                        ti.Subject = DBValue.ToString(dt.Rows[0]["subject"]);
                        ti.LaunchDate = DBValue.ToDateTime(dt.Rows[0]["launch_date"]);
                        ti.VisitorLogID = DBValue.ToInt32(dt.Rows[0]["visitor_log_id"]);
                        ti.BusinessRuleId = DBValue.ToInt32(dt.Rows[0]["business_rule_id"]);
                    }

                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }

            return ti;
        }

        public EmailTemplate GetEmailTemplate(int emailTemplateId, string cultureCode)
        {
            EmailTemplate e = null;

            bool useTransaction = false;
            string storedProcName = "es_get_email_template";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@email_template_id", DbType.Int32, DBValue.ToDBInt32(emailTemplateId)));
                paramCol.Add(new SqlDataParameter("@culture_code", DbType.String, DBValue.ToDBString(cultureCode)));

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    if (dt.Rows.Count > 0)
                    {
                        e = new EmailTemplate();
                        e.TemplateTypeId = DBValue.ToInt32(dt.Rows[0]["email_template_type_id"]);
                        e.TemplateName = DBValue.ToString(dt.Rows[0]["email_template_name"]);
                        e.Subject = DBValue.ToString(dt.Rows[0]["subject"]);
                        e.BounceEmail = DBValue.ToString(dt.Rows[0]["email_template_name"]);
                        e.Description = DBValue.ToString(dt.Rows[0]["description"]);
                        e.TextBody = DBValue.ToString(dt.Rows[0]["body_text"]);
                        e.HtmlBody = DBValue.ToString(dt.Rows[0]["body_html"]);
                        e.ProcedureCall = DBValue.ToString(dt.Rows[0]["param_procedure_call"]);
                        e.FromName = DBValue.ToString(dt.Rows[0]["from_name"]);
                        e.FromEmail = DBValue.ToString(dt.Rows[0]["from_email_address"]);
                        e.ReplyToName = DBValue.ToString(dt.Rows[0]["reply_to_name"]);
                        e.ReplyToEmail = DBValue.ToString(dt.Rows[0]["reply_to_email_address"]);
                        e.BounceName = DBValue.ToString(dt.Rows[0]["bounce_name"]);
                        e.BounceEmail = DBValue.ToString(dt.Rows[0]["bounce_email_address"]);
                        e.TextFooter = DBValue.ToString(dt.Rows[0]["footer_text"]);
                        e.HtmlFooter = DBValue.ToString(dt.Rows[0]["footer_html"]);
                        e.TemplateId = emailTemplateId;
                        e.CultureCode = cultureCode;
                    }

                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }

            return e;
        }

        public bool TerminateEvent(Event ev)
        {
            bool useTransaction = false;
            string storedProcName = "es_terminate_event_by_event_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(ev.EventID)));
                paramCol.Add(new SqlDataParameter("@ret", DbType.Int32, ParameterDirection.ReturnValue));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();

                if ((int)paramCol["@ret"].Value == 0)
                    return true;
                else
                    return false;
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }

        public bool TerminateEvent(Group group)
        {
            bool useTransaction = false;
            string storedProcName = "es_terminate_event_by_group_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@group_id", DbType.Int32, DBValue.ToDBInt32(group.GroupID)));
                paramCol.Add(new SqlDataParameter("@ret", DbType.Int32, ParameterDirection.ReturnValue));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();

                if ((int)paramCol["@ret"].Value == 0)
                    return true;
                else
                    return false;
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }

        public EmailTemplateList[] GetEmailTemplateList()
        {
            EmailTemplateList[] eList = new EmailTemplateList[0];

            bool useTransaction = false;
            string storedProcName = "es_get_email_templates";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, null);

                eList = new EmailTemplateList[dt.Rows.Count];

                // fill our objects
                try
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        EmailTemplateList e = new EmailTemplateList();
                        e.TemplateId = DBValue.ToInt32(dt.Rows[i]["email_template_id"]);
                        e.TemplateName = DBValue.ToString(dt.Rows[i]["email_template_name"]);
                        e.Description = DBValue.ToString(dt.Rows[i]["description"]);
                        e.CultureCode = DBValue.ToString(dt.Rows[i]["culture_code"]);
                        eList[i] = e;
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }

            return eList;
        }

        public TouchRuleCollection GetTouchRules()
        {
            TouchRuleCollection trc = new TouchRuleCollection();

            bool useTransaction = false;
            string storedProcName = "es_touch_get_business_rules";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, null);

                // fill our objects
                try
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        TouchRule tr = new TouchRule();
                        tr.RuleId = DBValue.ToInt32(dt.Rows[i]["business_rule_id"]);
                        tr.EmailTemplateId = DBValue.ToInt32(dt.Rows[i]["email_template_id"]);
                        tr.ProcedureCall = DBValue.ToString(dt.Rows[i]["stored_procedure_call"]);
                        tr.PriorityLevel = DBValue.ToInt16(dt.Rows[i]["priority_level"]);
                        trc.Add(tr);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }

            return trc;
        }


        public List<TouchEmail> GetTouchEmails(TouchRule tr)
        {
            List<TouchEmail> tes = new List<TouchEmail>();

            bool useTransaction = false;
            string storedProcName = tr.ProcedureCall;
            SqlInterface si = new SqlInterface(dataProvider, connectionString, 200);

            try
            {
                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.Text, null);

                // fill our objects
                try
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        TouchEmail te = new TouchEmail();
                        te.TouchId = DBValue.ToInt32(dt.Rows[i]["touch_id"]);
                        te.Identification = DBValue.ToInt32(dt.Rows[i]["identification"]);
                        te.PartnerId = DBValue.ToInt32(dt.Rows[i]["partner_id"]);
                        te.FromName = DBValue.ToString(dt.Rows[i]["from_name"]);
                        te.FromEmail = DBValue.ToString(dt.Rows[i]["from_email"]);
                        te.ReplyToName = DBValue.ToString(dt.Rows[i]["reply_to_name"]);
                        te.ReplyToEmail = DBValue.ToString(dt.Rows[i]["reply_to_email"]);
                        te.ToName = DBValue.ToString(dt.Rows[i]["to_name"]);
                        te.ToEmail = DBValue.ToString(dt.Rows[i]["to_email"]);
                        te.BounceEmail = DBValue.ToString(dt.Rows[i]["bounce_email"]);
                        te.ProcedureCall = DBValue.ToString(dt.Rows[i]["param_procedure_call"]);
                        te.CultureCode = DBValue.ToString(dt.Rows[i]["culture_code"]);
                        te.Subject = DBValue.ToString(dt.Rows[i]["subject"]);
                        te.HtmlBody = DBValue.ToString(dt.Rows[i]["body_html"]);
                        te.TextBody = DBValue.ToString(dt.Rows[i]["body_text"]);
                        te.HtmlFooter = DBValue.ToString(dt.Rows[i]["footer_html"]);
                        te.TextFooter = DBValue.ToString(dt.Rows[i]["footer_text"]);
                        te.EventID = DBValue.ToInt32(dt.Rows[i]["event_id"]);
                        te.EmailTemplateID = DBValue.ToInt32(dt.Rows[i]["email_template_id"]);
                      try
                        {
                            te.LaunchDate = DBValue.ToDateTime(dt.Rows[i]["launch_date"]);
                        }
                        catch (System.ArgumentException ex)
                        {
                            throw new Exception(" (.)(.) ".ToString());
                        }
                        te.Processed = TouchProcessedStatus.New;
                        tes.Add(te);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }

            return tes;
        }

        public NameValueCollection GetTouchParamTags(TouchEmail te)
        {
            NameValueCollection paramTags = new NameValueCollection();

            bool useTransaction = false;
            string storedProcName = te.ProcedureCall;
            SqlInterface si = new SqlInterface(dataProvider, connectionString, 200);

            try
            {
                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.Text, null);

                // fill our objects
                try
                {
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Columns.Count; i++)
                        {
                            paramTags.Add(dt.Columns[i].ColumnName, dt.Rows[0][dt.Columns[i].ColumnName].ToString());
                        }
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch (Exception ex)
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw ex;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }

            return paramTags;
        }

        public void UpdateTouchProcessedStatus(TouchEmail te)
        {
            bool useTransaction = false;
            string storedProcName = "es_touch_set_processed";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@touch_id", DbType.Int32, DBValue.ToDBInt32(te.TouchId)));
                paramCol.Add(new SqlDataParameter("@error_code", DbType.Byte, DBValue.ToDBByte((byte)te.Processed)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Update database.
                int ret = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (ret < 1)
                {
                    throw new SqlDataException("Unable to update database using " + storedProcName);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }

        }
        #endregion

        #region BusinessRules

        private BusinessRule LoadBusiness_rule(DataRow row)
        {
            BusinessRule br = new BusinessRule();

            // Store database values into our business object
            br.business_rule_id = DBValue.ToInt32(row["business_rule_id"]);
            br.email_template_id = DBValue.ToInt32(row["email_template_id"]);
            br.business_rule_name = DBValue.ToString(row["business_rule_name"]);
            br.stored_procedure_call = DBValue.ToString(row["stored_procedure_call"]);
            br.priority_level = DBValue.ToInt32(row["priority_level"]);
            br.member_type_id = DBValue.ToInt32(row["member_type_id"]);
            br.email_priority = DBValue.ToInt32(row["email_priority"]);
            br.active = DBValue.ToBoolean(row["active"]);
            br.create_date = DBValue.ToDateTime(row["create_date"]);

            // return the filled object
            return br;
        }

        public List<BusinessRule> GetBusinessRuleAll(SqlInterface si)
        {
            List<BusinessRule> list = new List<BusinessRule>();

            string storedProcName = "es_get_business_rule_all";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            DataRow row = dt.Rows[i];

                            list.Add(LoadBusiness_rule(row));


                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }
            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }

            return list;
        }


        #endregion

      

        #region Promotion
        public Promotion GetSelfRegisteredPromotionByPartner(Partner p)
        {
            Promotion pr = null;

            bool useTransaction = false;
            string storedProcName = "es_get_promotion_self_registered";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32(p.PartnerID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count > 0)

                    // fill our objects
                    try
                    {
                        pr = new Promotion();
                        pr.PromotionID = DBValue.ToInt32(dt.Rows[0]["promotion_id"]);
                    }
                    catch (System.Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return pr;
        }
        #endregion

        #region Lead Information

        public LeadInformation GetLeadInformation(Int32 lead_id)
        {
            LeadInformation leadInformation = null;

            bool useTransaction = false;
            string storedProcName = "es_get_group_information_by_lead_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@lead_id", DbType.Int32, DBValue.ToDBInt32(lead_id)));
                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    //DataRow row = dt.Rows[0];

                    foreach (DataRow row in dt.Rows)
                    {
                        int event_participation_id = DBValue.ToInt32(row["event_participation_id"]);
                        int group_id = DBValue.ToInt32(row["group_id"]);
                        int sponsor_id = DBValue.ToInt32(row["sponsor_id"]);
                        int partner_id = DBValue.ToInt32(row["partner_id"]);
                        int _lead_id = DBValue.ToInt32(row["lead_id"]);
                        string name = DBValue.ToString(row["name"]);
                        string group_name = DBValue.ToString(row["group_name"]);
                        string address_1 = DBValue.ToString(row["address_1"]);
                        string city = DBValue.ToString(row["city"]);
                        string subdivision_code = DBValue.ToString(row["subdivision_code"]);
                        string country_code = DBValue.ToString(row["country_code"]);
                        string zip_code = DBValue.ToString(row["zip_code"]);
                        string day_phone = DBValue.ToString(row["day_phone"]);
                        string email = DBValue.ToString(row["email"]);
                        int expected_membership = DBValue.ToInt32(row["expected_membership"]);
                        string group_url = DBValue.ToString(row["group_url"]);
                        int consultant_id = int.MinValue;
                        if (row.Table.Columns.Contains("consultant_id"))
                            consultant_id = DBValue.ToInt32(row["consultant_id"]);

                        leadInformation = new LeadInformation();
                        leadInformation.EventParticipationID = event_participation_id;
                        leadInformation.GroupID = group_id;
                        leadInformation.SponsorID = sponsor_id;
                        leadInformation.PartnerID = partner_id;
                        leadInformation.LeadID = _lead_id;
                        leadInformation.Name = name;
                        leadInformation.GroupName = group_name;
                        leadInformation.Address = address_1;
                        leadInformation.City = city;
                        leadInformation.SubdivisionCode = subdivision_code;
                        leadInformation.CountryCode = country_code;
                        leadInformation.ZipCode = zip_code;
                        leadInformation.DayPhone = day_phone;
                        leadInformation.Email = email;
                        leadInformation.ExpectedMembership = expected_membership;
                        leadInformation.GroupUrl = group_url;
                        leadInformation.ConsultantID = consultant_id;
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return leadInformation;
        }


        #endregion

        #region Orders
        public Payment.Order[] GetOrdersByGroup(int groupID)
        {
            Payment.Order[] orders = null;

            bool useTransaction = false;
            string storedProcName = "es_get_orders_by_group";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@group_id", DbType.Int32, DBValue.ToDBInt32(groupID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)

                    // fill our objects
                    try
                    {
                        orders = new Payment.Order[dt.Rows.Count];
                        int i = 0;
                        foreach (DataRow row in dt.Rows)
                        {
                            orders[i] = new Payment.Order();
                            orders[i].OrderID = DBValue.ToInt32(row["order_id"]);
                            orders[i].OrderDate = DBValue.ToDateTime(row["order_date"]);
                            orders[i].EventParticipationID = DBValue.ToInt32(row["event_participation_id"]);
                            orders[i].Quantity = DBValue.ToInt32(row["quantity"]);
                            orders[i].Price = (float)DBValue.ToDecimal(row["price"]);
                            orders[i].CustomerID = DBValue.ToInt32(row["customer_id"]);
                            orders[i].ItemName = DBValue.ToString(row["catalog_item_title"]);
                            orders[i].CustomerFirstName = DBValue.ToString(row["customer_first_name"]);
                            orders[i].CustomerLastName = DBValue.ToString(row["customer_last_name"]);
                            orders[i].OrderItemID = DBValue.ToInt32(row["order_item_id"]);
                            orders[i].OrderDetailID = DBValue.ToInt32(row["order_detail_id"]);
                            orders[i].OrderStatusID = DBValue.ToInt32(row["order_status_id"]);
                            orders[i].EdsID = DBValue.ToInt32(row["eds_id"]);
                            i++;
                        }
                    }
                    catch (System.Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return orders;
        }


        public Payment.Order[] GetOrdersByEventId(int eventId)
        {
            return GetOrdersByEventId(eventId, null);
        }
        private Payment.Order[] GetOrdersByEventId(int eventId, SqlInterface si)
        {
            Payment.Order[] results = null;

            string storedProcName = "es_get_orders_by_event";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(eventId)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {

                        results = new Payment.Order[dt.Rows.Count];
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            results[i] = new Payment.Order();
                            results[i].OrderID = DBValue.ToInt32(dt.Rows[i]["order_id"]);
                            results[i].OrderDate = DBValue.ToDateTime(dt.Rows[i]["order_date"]);
                            results[i].EventParticipationID = DBValue.ToInt32(dt.Rows[i]["event_participation_id"]);
                            results[i].Quantity = DBValue.ToInt32(dt.Rows[i]["quantity"]);
                            results[i].Price = (float)DBValue.ToDecimal(dt.Rows[i]["price"]);
                            results[i].CustomerID = DBValue.ToInt32(dt.Rows[i]["customer_id"]);
                            results[i].ItemName = DBValue.ToString(dt.Rows[i]["catalog_item_title"]);
                            results[i].CustomerFirstName = DBValue.ToString(dt.Rows[i]["customer_first_name"]);
                            results[i].CustomerLastName = DBValue.ToString(dt.Rows[i]["customer_last_name"]);
                            results[i].OrderItemID = DBValue.ToInt32(dt.Rows[i]["order_item_id"]);
                            results[i].OrderDetailID = DBValue.ToInt32(dt.Rows[i]["order_detail_id"]);
                            results[i].OrderStatusID = DBValue.ToInt32(dt.Rows[i]["order_status_id"]);
                            results[i].EdsID = DBValue.ToInt32(dt.Rows[i]["eds_id"]);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return results;
        }


        public Payment.Order[] GetOrderDetailByEventId(int eventId, DateTime startDate, DateTime endDate, bool includePayments)
        {
            return GetOrderDetailByEventId(eventId, startDate, endDate, null, includePayments);
        }


        public Payment.Order[] GetOrderDetailByEventId(int eventId, DateTime startDate, DateTime endDate)
        {
            return GetOrderDetailByEventId(eventId, startDate, endDate, null, false);
        }
        private Payment.Order[] GetOrderDetailByEventId(int eventId, DateTime startDate, DateTime endDate, SqlInterface si, bool includePayments) 
		{
			Payment.Order[] results = null;
            ArrayList result = new ArrayList();

			string country = System.Web.HttpContext.Current.Session["Country"].ToString();
            string storedProcName = "";
            if (includePayments)
            {
                storedProcName = "es_get_order_detail_by_event_id_with_payment";
            }
            else
            {
                storedProcName = "es_get_order_detail_by_event_id"; 
            }
			if (country == "CA")
			{
                if (includePayments)
                {
                    storedProcName = "es_get_order_detail_by_event_id_ca_with_payment";
                }
                else
                {
                    storedProcName = "es_get_order_detail_by_event_id_ca";
                }

				//fill a array with order detail id (will be set at random)
                result = GetArrayofOrderDetail(eventId, startDate, endDate,null); 
			}
			
		

			// if the SqlInterface is passed as argument it means that 
			// this call should be applied to an already open connection
			// and the method which call this method is using transaction
			bool newConnection = true;
			if (si == null) 
			{
				si = new SqlInterface(dataProvider, connectionString);
			} 
			else 
			{
				newConnection = false;
			}

			try 
			{
				// declare stored procedure parameters
				SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
				paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(eventId)));
				paramCol.Add(new SqlDataParameter("@startDate", DbType.DateTime, DBValue.ToDBDateTime(startDate)));
				paramCol.Add(new SqlDataParameter("@endDate", DbType.DateTime, DBValue.ToDBDateTime(endDate)));
				
				if (newConnection) 
				{
					// open the connection
					si.Open();
				}

				DataTable dt = si.ExecuteFetchDataTable( storedProcName, CommandType.StoredProcedure, paramCol);

				if(dt != null && dt.Rows.Count > 0) 
				{
					// fill our objects
					try 
					{
						
						results = new Payment.Order[dt.Rows.Count];
						for(int i=0; i < dt.Rows.Count; i++) 
						{
							results[i] = new Payment.Order();
							results[i].OrderDetailAmount = DBValue.ToDouble(dt.Rows[i]["order_detail_amount"]);

							if (country == "CA")
							{
								results[i].OrderDetailID = Convert.ToInt32(result[i]);
							}
							else
							{
								results[i].OrderDetailID = DBValue.ToInt32(dt.Rows[i]["order_detail_id"]);
							}

                            if (country == "CA")
                            {
                                results[i].FulfillmentCharge = 0;
                            }
                            else
                            {
                                results[i].FulfillmentCharge = DBValue.ToDecimal(dt.Rows[i]["fulfillment_charge"]);
                            }
                            
                            //results[i].ProductTypeId = DBValue.ToInt32(dt.Rows[i]["product_type_id"]);
						}
					} 
					catch(Exception ex) 
					{
						throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
					}
				}


			} 
			finally 
			{
				if(newConnection) 
				{
					// Always close connection.
					si.Close();
				}
			}
			return results;
		}

        private ArrayList GetArrayofOrderDetail(int eventId, DateTime startDate, DateTime endDate, SqlInterface si)
        {
            ArrayList result = new ArrayList();
            Payment.Order[] results = null;

            string country = System.Web.HttpContext.Current.Session["Country"].ToString();
            string storedProcName = "es_get_order_detail_by_event_id";


            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(eventId)));
                paramCol.Add(new SqlDataParameter("@startDate", DbType.DateTime, DBValue.ToDBDateTime(startDate)));
                paramCol.Add(new SqlDataParameter("@endDate", DbType.DateTime, DBValue.ToDBDateTime(endDate)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {

                        //result = new ArrayList[dt.Rows.Count];
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            result.Add(DBValue.ToInt32(dt.Rows[i]["order_detail_id"]));

                        }
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }

        public Payment.Order[] GetOrdersDetailCanceledByEventId(int eventId)
        {
            return GetOrdersDetailCanceledByEventId(eventId, null);
        }

        private Payment.Order[] GetOrdersDetailCanceledByEventId(int eventId, SqlInterface si)
        {
            Payment.Order[] results = null;



            string storedProcName = "es_get_order_detail_canceled_by_event_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(eventId)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {

                        results = new Payment.Order[dt.Rows.Count];
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            //							results[i] = new Payment.Order();
                            //							results[i].OrderID = DBValue.ToInt32(dt.Rows[i]["order_id"]);
                            //							results[i].OrderDate = DBValue.ToDateTime(dt.Rows[i]["order_date"]);
                            //							results[i].EventParticipationID = DBValue.ToInt32(dt.Rows[i]["event_participation_id"]);
                            //							results[i].Quantity = DBValue.ToInt32(dt.Rows[i]["quantity"]);
                            //							results[i].Price = (float)DBValue.ToDecimal(dt.Rows[i]["price"]);
                            //							results[i].CustomerID = DBValue.ToInt32(dt.Rows[i]["customer_id"]);
                            //							results[i].ItemName = DBValue.ToString(dt.Rows[i]["catalog_item_title"]);
                            //							results[i].CustomerFirstName = DBValue.ToString(dt.Rows[i]["customer_first_name"]);
                            //							results[i].CustomerLastName = DBValue.ToString(dt.Rows[i]["customer_last_name"]);
                            //							results[i].OrderItemID = DBValue.ToInt32(dt.Rows[i]["order_item_id"]);
                            //							results[i].OrderDetailID = DBValue.ToInt32(dt.Rows[i]["order_detail_id"]);
                            //							results[i].OrderStatusID = DBValue.ToInt32(dt.Rows[i]["order_status_id"]);
                            //							results[i].EdsID = DBValue.ToInt32(dt.Rows[i]["eds_id"]);


                            results[i] = new Payment.Order();
                            results[i].OrderDetailAmount = DBValue.ToDouble(dt.Rows[i]["order_detail_amount"]);
                            results[i].OrderDetailID = DBValue.ToInt32(dt.Rows[i]["order_detail_id"]);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return results;
        }

        #endregion

        #region PartnerTypeCulture Methods

        private PartnerTypeCulture LoadPartnerTypeCulture(DataRow row)
        {
            PartnerTypeCulture partnerTypeCulture = new PartnerTypeCulture();

            // Store database values into our business object
            partnerTypeCulture.PartnerTypeId = DBValue.ToInt32(row["partner_type_id"]);
            partnerTypeCulture.CultureCode = DBValue.ToString(row["culture_code"]);
            partnerTypeCulture.PartnerTypeName = DBValue.ToString(row["partner_type_name"]);
            partnerTypeCulture.CreateDate = DBValue.ToDateTime(row["create_date"]);

            // return the filled object
            return partnerTypeCulture;
        }

        public PartnerTypeCulture[] GetPartnerTypeCultures()
        {
            return GetPartnerTypeCultures(null);
        }

        private PartnerTypeCulture[] GetPartnerTypeCultures(SqlInterface si)
        {
            PartnerTypeCulture[] partnerTypeCultures = null;

            string storedProcName = "es_get_partner_type_cultures";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    partnerTypeCultures = new PartnerTypeCulture[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            partnerTypeCultures[i] = LoadPartnerTypeCulture(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return partnerTypeCultures;
        }


        public PartnerTypeCulture[] GetPartnerTypeCultureByID(int id)
        {
            return GetPartnerTypeCultureByID(id, null);
        }

        private PartnerTypeCulture[] GetPartnerTypeCultureByID(int id, SqlInterface si)
        {
            PartnerTypeCulture[] partnerTypeCultures = null;

            string storedProcName = "es_get_partner_type_culture_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Partner_type_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        partnerTypeCultures = new PartnerTypeCulture[dt.Rows.Count];

                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            // fill our objects
                            try
                            {
                                partnerTypeCultures[i] = LoadPartnerTypeCulture(dt.Rows[i]);
                            }
                            catch (Exception ex)
                            {
                                throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return partnerTypeCultures;
        }


        public int InsertPartnerTypeCulture(PartnerTypeCulture partnerTypeCulture)
        {
            return InsertPartnerTypeCulture(partnerTypeCulture, null);
        }

        private int InsertPartnerTypeCulture(PartnerTypeCulture partnerTypeCulture, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_insert_partner_type_culture";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Partner_type_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Culture_code", DbType.String, DBValue.ToDBString(partnerTypeCulture.CultureCode)));
                paramCol.Add(new SqlDataParameter("@Partner_type_name", DbType.String, DBValue.ToDBString(partnerTypeCulture.PartnerTypeName)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(partnerTypeCulture.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    partnerTypeCulture.PartnerTypeId = DBValue.ToInt32(paramCol["@Partner_type_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdatePartnerTypeCulture(PartnerTypeCulture partnerTypeCulture)
        {
            return UpdatePartnerTypeCulture(partnerTypeCulture, null);
        }

        private int UpdatePartnerTypeCulture(PartnerTypeCulture partnerTypeCulture, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_update_partner_type_culture";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Partner_type_id", DbType.Int32, DBValue.ToDBInt32(partnerTypeCulture.PartnerTypeId)));
                paramCol.Add(new SqlDataParameter("@Culture_code", DbType.String, DBValue.ToDBString(partnerTypeCulture.CultureCode)));
                paramCol.Add(new SqlDataParameter("@Partner_type_name", DbType.String, DBValue.ToDBString(partnerTypeCulture.PartnerTypeName)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(partnerTypeCulture.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region PartnerPaymentInfo Methods

        private PartnerPaymentInfo LoadPartnerPaymentInfo(DataRow row)
        {
            PartnerPaymentInfo partnerPaymentInfo = new PartnerPaymentInfo();

            // Store database values into our business object
            partnerPaymentInfo.PartnerPaymentInfoId = DBValue.ToInt32(row["partner_payment_info_id"]);
            partnerPaymentInfo.PartnerId = DBValue.ToInt32(row["partner_id"]);
            partnerPaymentInfo.PaymentInfoId = DBValue.ToInt32(row["payment_info_id"]);
            partnerPaymentInfo.Active = DBValue.ToBoolean(row["active"]);
            partnerPaymentInfo.CreateDate = DBValue.ToDateTime(row["create_date"]);

            // return the filled object
            return partnerPaymentInfo;
        }

        public PartnerPaymentInfo[] GetPartnerPaymentInfos()
        {
            return GetPartnerPaymentInfos(null);
        }

        private PartnerPaymentInfo[] GetPartnerPaymentInfos(SqlInterface si)
        {
            PartnerPaymentInfo[] partnerPaymentInfos = null;

            string storedProcName = "es_get_partner_payment_infos";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    partnerPaymentInfos = new PartnerPaymentInfo[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            partnerPaymentInfos[i] = LoadPartnerPaymentInfo(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return partnerPaymentInfos;
        }


        public PartnerPaymentInfo GetActivePartnerPaymentInfoByID(int id)
        {
            return GetActivePartnerPaymentInfoByID(id, null);
        }

        public PartnerPaymentInfo GetActivePartnerPaymentInfoByID(int id, SqlInterface si)
        {
            PartnerPaymentInfo[] ppInfos = GetPartnerPaymentInfoByID(id, si);
            if (ppInfos != null && ppInfos.Length > 0)
            {
                for (int i = 0; i < ppInfos.Length; i++)
                {
                    if (ppInfos[i].Active)
                        return ppInfos[i];
                }
            }
            return null;
        }


        public PartnerPaymentInfo GetActivePartnerPaymentInfoByPartnerID(int partnerId, SqlInterface si)
        {

            PartnerPaymentInfo partnerPaymentInfo = null;

            string storedProcName = "es_get_partner_payment_infos";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    DataRow[] rows = dt.Select(string.Format("partner_id={0} and active=1", partnerId));
                    if (rows != null && rows.Length > 0)
                        partnerPaymentInfo = LoadPartnerPaymentInfo(rows[0]);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return partnerPaymentInfo;

        }



        public PartnerPaymentInfo GetActivePartnerPaymentInfoByPartnerID(int partnerId)
        {
            return GetActivePartnerPaymentInfoByPartnerID(partnerId, null);
        }

        public PartnerPaymentInfo[] GetPartnerPaymentInfoByID(int id)
        {
            return GetPartnerPaymentInfoByID(id, null);
        }

        private PartnerPaymentInfo[] GetPartnerPaymentInfoByID(int id, SqlInterface si)
        {
            PartnerPaymentInfo[] partnerPaymentInfo = null;

            string storedProcName = "es_get_partner_payment_info_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Partner_payment_info_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    partnerPaymentInfo = new PartnerPaymentInfo[dt.Rows.Count];
                    // fill our objects
                    try
                    {
                        for (int i = 0; i < partnerPaymentInfo.Length; i++)
                        {
                            partnerPaymentInfo[i] = LoadPartnerPaymentInfo(dt.Rows[i]);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return partnerPaymentInfo;
        }


        public int InsertPartnerPaymentInfo(PartnerPaymentInfo partnerPaymentInfo)
        {
            return InsertPartnerPaymentInfo(partnerPaymentInfo, null);
        }

        private int InsertPartnerPaymentInfo(PartnerPaymentInfo partnerPaymentInfo, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_insert_partner_payment_info";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Partner_payment_info_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Partner_id", DbType.Int32, DBValue.ToDBInt32(partnerPaymentInfo.PartnerId)));
                paramCol.Add(new SqlDataParameter("@Payment_info_id", DbType.Int32, DBValue.ToDBInt32(partnerPaymentInfo.PaymentInfoId)));
                paramCol.Add(new SqlDataParameter("@Active", DbType.Boolean, DBValue.ToDBBoolean(partnerPaymentInfo.Active)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(partnerPaymentInfo.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    partnerPaymentInfo.PartnerPaymentInfoId = DBValue.ToInt32(paramCol["@Partner_payment_info_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdatePartnerPaymentInfo(PartnerPaymentInfo partnerPaymentInfo)
        {
            return UpdatePartnerPaymentInfo(partnerPaymentInfo, null);
        }

        private int UpdatePartnerPaymentInfo(PartnerPaymentInfo partnerPaymentInfo, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_update_partner_payment_info";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Partner_payment_info_id", DbType.Int32, DBValue.ToDBInt32(partnerPaymentInfo.PartnerPaymentInfoId)));
                paramCol.Add(new SqlDataParameter("@Partner_id", DbType.Int32, DBValue.ToDBInt32(partnerPaymentInfo.PartnerId)));
                paramCol.Add(new SqlDataParameter("@Payment_info_id", DbType.Int32, DBValue.ToDBInt32(partnerPaymentInfo.PaymentInfoId)));
                paramCol.Add(new SqlDataParameter("@Active", DbType.Boolean, DBValue.ToDBBoolean(partnerPaymentInfo.Active)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(partnerPaymentInfo.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region PaymentBatch Methods

        private Payment.PaymentBatch LoadPaymentBatch(DataRow row)
        {
            Payment.PaymentBatch batch = new PaymentBatch();

            batch.PaymentBatchID = DBValue.ToInt32(row["payment_batch_id"]);
            batch.FileName = DBValue.ToString(row["filename"]);
            batch.CreateDate = DBValue.ToDateTime(row["createdate"]);
            batch.ConfirmationDate = DBValue.ToDateTime(row["confirmation_date"]);
            batch.CancelledDate = DBValue.ToDateTime(row["cancelled_date"]);
            return batch;
        }

        public List<Payment.PaymentBatch> GetPaymentBatch()
        {
            return GetPaymentBatch(null);
        }

        private List<Payment.PaymentBatch> GetPaymentBatch(SqlInterface si)
        {
            List<Payment.PaymentBatch> batches = null;

            string storedProcName = "es_get_payment_batches";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    batches = new List<PaymentBatch>();

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            batches.Add(LoadPaymentBatch(dt.Rows[i]));
                            
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                    
                }
                return batches;
            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
        
        }

        public Payment.PaymentBatch GetPaymentBatchByID(int id)
        {
            return GetPaymentBatchByID(id, null);
        }

        private Payment.PaymentBatch GetPaymentBatchByID(int id, SqlInterface si)
        {
            Payment.PaymentBatch batch = null;

            string storedProcName = "es_get_payment_batch_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Payment_batch_id ", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        batch = LoadPaymentBatch(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }

                return batch;
            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
          
        }

        public int InsertPaymentBatch(Payment.PaymentBatch batch)
        {
            return InsertPaymentBatch(batch, null);
        }

        private int InsertPaymentBatch(Payment.PaymentBatch batch, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_insert_payment_batch";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                 // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@payment_batch_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@filename", DbType.String, DBValue.ToDBString(batch.FileName)));
                paramCol.Add(new SqlDataParameter("@createdate", DbType.DateTime, DBValue.ToDBDateTime(batch.CreateDate)));
                paramCol.Add(new SqlDataParameter("@confirmation_date", DbType.DateTime, DBValue.ToDBDateTime(batch.ConfirmationDate)));
                paramCol.Add(new SqlDataParameter("@cancelled_date", DbType.DateTime, DBValue.ToDBDateTime(batch.CancelledDate)));
                
                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    batch.PaymentBatchID = DBValue.ToInt32(paramCol["@payment_batch_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            catch (Exception x)
            {
                throw x;
            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdatePaymentBatch(Payment.PaymentBatch batch)
        {
            return UpdatePaymentBatch(batch, null);
        }

        private int UpdatePaymentBatch(Payment.PaymentBatch batch, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_update_payment_batch";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@payment_batch_id", DbType.Int32, DBValue.ToDBInt32(batch.PaymentBatchID)));
                paramCol.Add(new SqlDataParameter("@filename", DbType.String, DBValue.ToDBString(batch.FileName)));
                paramCol.Add(new SqlDataParameter("@createdate", DbType.DateTime, DBValue.ToDBDateTime(batch.CreateDate)));
                paramCol.Add(new SqlDataParameter("@confirmation_date", DbType.DateTime, DBValue.ToDBDateTime(batch.ConfirmationDate)));
                paramCol.Add(new SqlDataParameter("@cancelled_date", DbType.DateTime, DBValue.ToDBDateTime(batch.CancelledDate)));
              

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }

               // return result;
            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            
        }



        #endregion

        #region Payment Methods

        private Payment.Payment LoadPayment(DataRow row)
        {
            Payment.Payment payment = new Payment.Payment();

            // Store database values into our business object
            payment.PaymentId = DBValue.ToInt32(row["payment_id"]);
            payment.PaymentTypeId = DBValue.ToInt32(row["payment_type_id"]);
            payment.PaymentInfoId = DBValue.ToInt32(row["payment_info_id"]);
            payment.PaymentPeriodId = DBValue.ToInt32(row["payment_period_id"]);
            payment.ChequeNumber = DBValue.ToInt32(row["cheque_number"]);
            payment.ChequeDate = DBValue.ToDateTime(row["cheque_date"]);
            payment.PaidAmount = DBValue.ToDecimal(row["paid_amount"]);
            payment.Name = DBValue.ToString(row["name"]);
            payment.PhoneNumber = DBValue.ToString(row["phone_number"]);
            payment.Address1 = DBValue.ToString(row["address_1"]);
            payment.Address2 = DBValue.ToString(row["address_2"]);
            payment.City = DBValue.ToString(row["city"]);
            payment.ZipCode = DBValue.ToString(row["zip_code"]);
            payment.CountryCode = DBValue.ToString(row["country_code"]);
            payment.SubdivisionCode = DBValue.ToString(row["subdivision_code"]);
            payment.CreateDate = DBValue.ToDateTime(row["create_date"]);
            if (row.Table.Columns.Contains("payment_batch_id".ToString()))
            {
            payment.PaymentBatchID = DBValue.ToInt32(row["payment_batch_id"]);
            }
            if(row.Table.Columns.Contains("is_validated".ToString()))
            {
                payment.IsValidated = DBValue.ToBoolean(row["is_validated"]);

            }
            if (row.Table.Columns.Contains("is_processed".ToString()))
            {
                payment.IsProcessed = DBValue.ToBoolean(row["is_processed"]);
            }

            // return the filled object
            return payment;
        }
        public Payment.Payment[] GetPaymentsWithoutExceptions()
        {
            return GetPaymentsWithoutExceptions(null);
        }

        private Payment.Payment[] GetPaymentsWithoutExceptions(SqlInterface si)
        {
            Payment.Payment[] payments = null;

            string storedProcName = "es_get_payments_without_exceptions";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    payments = new Payment.Payment[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            payments[i] = LoadPayment(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return payments;
        }


        internal Payment.Payment[] GetPaymentsInProcessWithoutExceptions()
        {
            return GetPaymentsWithoutExceptions(null, (int)PaymentStatusCategory.InProcess);
        }

        private Payment.Payment[] GetPaymentsWithoutExceptions(SqlInterface si, int paymentStatusId)
        {
            Payment.Payment[] payments = null;

            string storedProcName = "es_get_payments_without_exceptions_with_status";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(
                    new SqlDataParameter("@paymentStatusID", DbType.Int32, DBValue.ToDBInt32(paymentStatusId))
                    );

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    payments = new Payment.Payment[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            payments[i] = LoadPayment(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return payments;
        }

        private Payment.CheckSystemPayment LoadCheckSystemPayment(DataRow row)
        {
            Payment.CheckSystemPayment output = new Payment.CheckSystemPayment();
            output.payment = new Payment.Payment();
            //
            output.payment.PaymentId = DBValue.ToInt32(row["payment_id"]);
            output.payment.PaymentTypeId = DBValue.ToInt32(row["payment_type_id"]);
            output.payment.PaymentInfoId = DBValue.ToInt32(row["payment_info_id"]);
            output.payment.PaymentPeriodId = DBValue.ToInt32(row["payment_period_id"]);
            output.payment.ChequeNumber = DBValue.ToInt32(row["cheque_number"]);
            output.payment.ChequeDate = DBValue.ToDateTime(row["cheque_date"]);
            output.payment.PaidAmount = DBValue.ToDecimal(row["paid_amount"]);
            output.payment.Name = DBValue.ToString(row["pname"]);
            output.payment.PhoneNumber = DBValue.ToString(row["pphone_number"]);
            output.payment.Address1 = DBValue.ToString(row["paddress_1"]);
            output.payment.Address2 = DBValue.ToString(row["paddress_2"]);
            output.payment.City = DBValue.ToString(row["pcity"]);
            output.payment.ZipCode = DBValue.ToString(row["pzip_code"]);
            output.payment.CountryCode = DBValue.ToString(row["pcountry_code"]);
            output.payment.SubdivisionCode = DBValue.ToString(row["psubdivision_code"]);
            output.payment.CreateDate = DBValue.ToDateTime(row["pcreate_date"]);
            if (row.Table.Columns.Contains("payment_batch_id"))
            {
                output.payment.PaymentBatchID = DBValue.ToInt32(row["payment_batch_id"]);

            }

            if (row.Table.Columns.Contains("is_validated"))
            {
                output.payment.IsValidated = DBValue.ToBoolean(row["is_validated"]);

            }

            if (row.Table.Columns.Contains("is_processed"))
            {
                output.payment.IsProcessed = DBValue.ToBoolean(row["is_processed"]);

            }
            if (row.Table.Columns.Contains("payment_to"))
            {
                output.PaymentTo = DBValue.ToInt32(row["payment_to"]);
            }
               // Get Payment Status.
            PaymentStatus paymentStatus = new PaymentStatus();
            // Store database values into our business object
            paymentStatus.PaymentStatusId = DBValue.ToInt32(row["payment_status_id"]);
            paymentStatus.Description = DBValue.ToString(row["description"]);
            output.paymentStatus = paymentStatus;
            // Payment Info
            output.paymentInfo = LoadPaymentInfoActiveOrNot(row);
            // Payment Period
            PaymentPeriod paymentPeriod = new PaymentPeriod();
            paymentPeriod.PaymentPeriodId = DBValue.ToInt32(row["payment_period_id"]);
            paymentPeriod.StartDate = DBValue.ToDateTime(row["ppstart_date"]);
            paymentPeriod.EndDate = DBValue.ToDateTime(row["ppend_date"]);
            paymentPeriod.CreateDate = DBValue.ToDateTime(row["ppcreate_date"]);
            output.checkSystemPaymentPeriod = paymentPeriod;
            // Partner
            Partner partner = new Partner();
            partner.PartnerID = DBValue.ToInt32(row["partner_id"]);
            partner.PartnerTypeID = DBValue.ToInt32(row["partner_type_id"]);
            partner.Name = DBValue.ToString(row["partner_name"]);
            partner.HasCollectionSite = DBValue.ToBoolean(row["has_collection_site"]);
            partner.GUID = DBValue.ToString(row["guid"]);
            output.partner = partner;
            // Group
            Group group = new Group();
            group.GroupID = DBValue.ToInt32(row["group_id"]);
            group.GroupParentID = DBValue.ToInt32(row["parent_group_id"]);
            group.SponsorID = DBValue.ToInt32(row["sponsor_id"]);
            group.PartnerID = DBValue.ToInt32(row["partner_id"]);
            group.LeadID = DBValue.ToInt32(row["lead_id"]);
            group.ExternalGroupID = DBValue.ToString(row["external_group_id"]);
            group.Name = DBValue.ToString(row["group_name"]);
            group.TestGroup = DBValue.ToBoolean(row["test_group"]);
            group.ExpectedMembership = DBValue.ToInt32(row["expected_membership"]);
            group.GroupURL = DBValue.ToString(row["group_url"]);
            group.Comments = DBValue.ToString(row["comments"]);
            output.group = group;
            // Payment Type
            PaymentType paymentType = new PaymentType();
            paymentType.PaymentTypeId = DBValue.ToInt32(row["payment_type_id"]);
            paymentType.PaymentTypeName = DBValue.ToString(row["payment_type_name"]);
            paymentType.CreateDate = DBValue.ToDateTime(row["pytcreate_date"]);
            output.paymentType = paymentType;
            // group Status
            GroupStatus groupStatus = new GroupStatus();
            // Store database values into our business object
            groupStatus.GroupStatusId = DBValue.ToInt32(row["group_status_id"]);
            groupStatus.Description = DBValue.ToString(row["gsdescription"]);
            output.groupStatus = groupStatus;
            return output;

        }

        internal List<Payment.CheckSystemPayment> GetCheckSystemPaymentsInProcessWithoutExceptions()
        {
            return GetCheckSystemPaymentsWithoutExceptions(null, (int)PaymentStatusCategory.InProcess);
        }

        private List<Payment.CheckSystemPayment> GetCheckSystemPaymentsWithoutExceptions(SqlInterface si, int paymentStatusId)
        {
           List <Payment.CheckSystemPayment> payments = null;

            string storedProcName = "es_get_checksystem_payments_without_exceptions_with_status";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(
                    new SqlDataParameter("@paymentStatusID", DbType.Int32, DBValue.ToDBInt32(paymentStatusId))
                    );

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    payments = new List<Payment.CheckSystemPayment>(dt.Rows.Count);

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        try
                        {
                            payments.Add(LoadCheckSystemPayment(dt.Rows[i]));          
                         }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return payments;
        }

        internal List<Payment.CheckSystemPayment> GetCheckSystemPaymentsByCountryCode(string countryCode)
        {
            return GetCheckSystemPaymentsByCountryCode(null, countryCode);
        }


        private List<Payment.CheckSystemPayment> GetCheckSystemPaymentsByCountryCode(SqlInterface si, string countryCode)
        {
            List<Payment.CheckSystemPayment> payments = null;

            string storedProcName = "es_get_checksystem_payments_to_process_by_country_code";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(
                    new SqlDataParameter("@Country_code", DbType.String, DBValue.ToDBString(countryCode))
                    );

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    payments = new List<Payment.CheckSystemPayment>(dt.Rows.Count);

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        try
                        {
                            payments.Add(LoadCheckSystemPayment(dt.Rows[i]));
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }

               
            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return payments;
        }

        internal List<Payment.CheckSystemPayment> GetCheckSystemPaymentsWithoutExceptionByCountryCode(string countryCode)
        {
            return GetCheckSystemPaymentsWithoutExceptionByCountryCode(null, countryCode);
        }


        private List<Payment.CheckSystemPayment> GetCheckSystemPaymentsWithoutExceptionByCountryCode(SqlInterface si, string countryCode)
        {
            List<Payment.CheckSystemPayment> payments = null;

            string storedProcName = "es_get_checksystem_payments_without_exceptions_by_country_code";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(
                    new SqlDataParameter("@Country_code", DbType.String, DBValue.ToDBString(countryCode))
                    );

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    payments = new List<Payment.CheckSystemPayment>(dt.Rows.Count);

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        try
                        {
                            payments.Add(LoadCheckSystemPayment(dt.Rows[i]));
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return payments;
        }

        internal List<Payment.CheckSystemPayment> GetCheckSystemPaymentsAlreadyProcessed()
        {
            return GetCheckSystemPaymentsAlreadyProcessed(null);
        }


        private List<Payment.CheckSystemPayment> GetCheckSystemPaymentsAlreadyProcessed(SqlInterface si)
        {
            List<Payment.CheckSystemPayment> payments = null;

            string storedProcName = "es_get_checksystem_payments_aleady_processed";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, null);

                if (dt != null)
                {
                    payments = new List<Payment.CheckSystemPayment>(dt.Rows.Count);

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        try
                        {
                            payments.Add(LoadCheckSystemPayment(dt.Rows[i]));
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return payments;
        }


        public Payment.Payment[] GetPayments()
        {
            return GetPayments(null);
        }

        private Payment.Payment[] GetPayments(SqlInterface si)
        {
            Payment.Payment[] payments = null;

            string storedProcName = "es_get_payments";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    payments = new Payment.Payment[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            payments[i] = LoadPayment(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return payments;
        }

        public Payment.Payment[] GetPaymentsCashedByGroupID(int id)
        {
            return GetPaymentsCashedByGroupID(id, null);
        }

        private Payment.Payment[] GetPaymentsCashedByGroupID(int id, SqlInterface si)
        {
            Payment.Payment[] payments = null;

            string storedProcName = "es_get_payment_cashed_by_group_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Group_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    payments = new Payment.Payment[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            payments[i] = LoadPayment(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return payments;
        }
        public Payment.Payment GetPaymentByID(int id)
        {
            return GetPaymentByID(id, null);
        }

        private Payment.Payment GetPaymentByID(int id, SqlInterface si)
        {
            Payment.Payment payment = null;

            string storedProcName = "es_get_payment_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Payment_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        payment = LoadPayment(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return payment;
        }

        public List<Payment.Payment> GetPaymentsByPaymentBatchID(int id)
        {
            return GetPaymentsByPaymentBatchID(id, null);
        }

        private List<Payment.Payment> GetPaymentsByPaymentBatchID(int id, SqlInterface si)
        {
            List<Payment.Payment> payment = new List<GA.BDC.Core.ESubsGlobal.Payment.Payment>();

            string storedProcName = "es_get_payment_by_payment_batch_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Batch_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            payment.Add(LoadPayment(dt.Rows[i]));
                        }
                         
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }

                return payment;
            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
         
        }


        public Payment.Payment[] GetPaymentByPartnerIDBetween(int partnerId, DateTime startDate, DateTime endDate)
        {
            return GetPaymentByPartnerIDBetween(partnerId, startDate, endDate, null);
        }
        private Payment.Payment[] GetPaymentByPartnerIDBetween(int partnerId, DateTime startDate, DateTime endDate, SqlInterface si)
        {
            Payment.Payment[] payment = null;

            string storedProcName = "es_get_payment_by_Partner_id_between";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Partner_id", DbType.Int32, DBValue.ToDBInt32(partnerId)));
                paramCol.Add(new SqlDataParameter("@Start_Date", DbType.DateTime, DBValue.ToDBDateTime(startDate)));
                paramCol.Add(new SqlDataParameter("@End_Date", DbType.DateTime, DBValue.ToDBDateTime(endDate)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    payment = new Payment.Payment[dt.Rows.Count];
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            payment[i] = LoadPayment(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }

            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return payment;
        }

        public Payment.Payment[] GetPaymentToBeValidated(string countryCode)
        {
            return GetPaymentToBeValidated(countryCode, null);
        }

        private Payment.Payment[] GetPaymentToBeValidated(string countryCode, SqlInterface si)
        {
            Payment.Payment[] payment = null;

            string storedProcName = "es_get_payment_to_be_validated";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@country_code", DbType.String, DBValue.ToDBString(countryCode)));
                
                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    payment = new Payment.Payment[dt.Rows.Count];
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            payment[i] = LoadPayment(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }

            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return payment;
        }




        public Payment.Payment[] GetPaymentByEventIDBetween(int id, DateTime startDate, DateTime endDate)
        {
            return GetPaymentByEventIDBetween(id, startDate, endDate, null);
        }

        private Payment.Payment[] GetPaymentByEventIDBetween(int id, DateTime startDate, DateTime endDate, SqlInterface si)
        {
            Payment.Payment[] payment = null;

            string storedProcName = "es_get_payment_by_event_id_between";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Event_id", DbType.Int32, DBValue.ToDBInt32(id)));
                paramCol.Add(new SqlDataParameter("@Start_Date", DbType.DateTime, DBValue.ToDBDateTime(startDate)));
                paramCol.Add(new SqlDataParameter("@End_Date", DbType.DateTime, DBValue.ToDBDateTime(endDate)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    payment = new Payment.Payment[dt.Rows.Count];
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            payment[i] = LoadPayment(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }

            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return payment;
        }

        internal Payment.Payment[] GetPaymentsForDPCC(DateTime upToThisDay)
        {
            return GetPaymentsForDPCC(upToThisDay, null);
        }

        private Payment.Payment[] GetPaymentsForDPCC(DateTime upToThisDay, SqlInterface si)
        {
            Payment.Payment[] payment = null;

            string storedProcName = "es_get_payments_for_DPCC";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Up_To_This_Day", DbType.DateTime, DBValue.ToDBDateTime(upToThisDay)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    payment = new Payment.Payment[dt.Rows.Count];
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            payment[i] = LoadPayment(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }

            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return payment;
        }




        public decimal GetCampaignProfitCA(int eventID)
        {
            return GetCampaignProfitCA(eventID, null);
        }

        private decimal GetCampaignProfitCA(int eventID, SqlInterface si)
        {
            decimal profit = 0;

            string storedProcName = "es_rpt_campaign_summary_report_ca";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(eventID)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }


                DataTable dt = null;
                if (System.Web.HttpContext.Current.Session["CampaignSummaryCA"] == null)
                {
                    dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);
                }
                else
                {
                    dt = (DataTable)System.Web.HttpContext.Current.Session["CampaignSummaryCA"];
                }

                if (dt != null)
                {
                    if (dt.Rows[0]["Profit"] != null && dt.Rows[0]["Profit"] != DBNull.Value)
                    {
                        profit = (decimal)DBValue.ToDouble(dt.Rows[0]["Profit"]);
                    }
                }

            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return profit;
        }


        public Payment.Payment[] GetPaymentByEventID(int id)
        {
            return GetPaymentByEventID(id, null);
        }

        private Payment.Payment[] GetPaymentByEventID(int id, SqlInterface si)
        {
            Payment.Payment[] payment = null;

            string storedProcName = "es_get_payment_by_event_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Event_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    payment = new Payment.Payment[dt.Rows.Count];
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            payment[i] = LoadPayment(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }

            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return payment;
        }

        public Payment.Payment[] GetPaymentByGroupID(int id)
        {
            return GetPaymentByGroupID(id, null);
        }

        private Payment.Payment[] GetPaymentByGroupID(int id, SqlInterface si)
        {
            Payment.Payment[] payment = null;

            string storedProcName = "es_get_payment_by_group_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Group_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    payment = new Payment.Payment[dt.Rows.Count];
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            payment[i] = LoadPayment(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }

            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return payment;
        }

        public int InsertPayment(Payment.Payment payment)
        {
            return InsertPayment(payment, null);
        }

        private int InsertPayment(Payment.Payment payment, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_insert_payment";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Payment_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Payment_type_id", DbType.Int32, DBValue.ToDBInt32(payment.PaymentTypeId)));
                paramCol.Add(new SqlDataParameter("@Payment_info_id", DbType.Int32, DBValue.ToDBInt32(payment.PaymentInfoId)));
                paramCol.Add(new SqlDataParameter("@Payment_period_id", DbType.Int32, DBValue.ToDBInt32(payment.PaymentPeriodId)));
                paramCol.Add(new SqlDataParameter("@Cheque_number", DbType.Int32, DBValue.ToDBInt32(payment.ChequeNumber)));
                paramCol.Add(new SqlDataParameter("@Cheque_date", DbType.DateTime, DBValue.ToDBDateTime(payment.ChequeDate)));
                paramCol.Add(new SqlDataParameter("@Paid_amount", DbType.Decimal, DBValue.ToDBDecimal(payment.PaidAmount)));
                paramCol.Add(new SqlDataParameter("@Name", DbType.String, DBValue.ToDBString(payment.Name)));
                paramCol.Add(new SqlDataParameter("@Phone_number", DbType.String, DBValue.ToDBString(payment.PhoneNumber)));
                paramCol.Add(new SqlDataParameter("@Address_1", DbType.String, DBValue.ToDBString(payment.Address1)));
                paramCol.Add(new SqlDataParameter("@Address_2", DbType.String, DBValue.ToDBString(payment.Address2)));
                paramCol.Add(new SqlDataParameter("@City", DbType.String, DBValue.ToDBString(payment.City)));
                paramCol.Add(new SqlDataParameter("@Zip_code", DbType.String, DBValue.ToDBString(payment.ZipCode)));
                paramCol.Add(new SqlDataParameter("@Country_code", DbType.String, DBValue.ToDBString(payment.CountryCode)));
                paramCol.Add(new SqlDataParameter("@Subdivision_code", DbType.String, DBValue.ToDBString(payment.SubdivisionCode)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(payment.CreateDate)));
                paramCol.Add(new SqlDataParameter("@Payment_batch_id", DbType.Int32, DBValue.ToDBInt32(payment.PaymentBatchID)));
                paramCol.Add(new SqlDataParameter("@Is_validated", DbType.Boolean, DBValue.ToDBBoolean(payment.IsValidated)));
                paramCol.Add(new SqlDataParameter("@Is_processed", DbType.Boolean, DBValue.ToDBBoolean(payment.IsProcessed)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    payment.PaymentId = DBValue.ToInt32(paramCol["@Payment_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }catch(Exception x){
                int a = 1;
            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdatePaymentToValidated(string countryCode)
        {
            return UpdatePaymentToValidated(countryCode, null);
        }

        private int UpdatePaymentToValidated(string countryCode, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_update_payment_to_validated";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Country_code", DbType.String, DBValue.ToDBString(countryCode)));
           

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    //payment.PaymentId = DBValue.ToInt32(paramCol["@Payment_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            catch (Exception x)
            {
                int a = 1;
            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdatePayment(Payment.Payment payment)
        {
            return UpdatePayment(payment, null);
        }

        private int UpdatePayment(Payment.Payment payment, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_update_payment";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Payment_id", DbType.Int32, DBValue.ToDBInt32(payment.PaymentId)));
                paramCol.Add(new SqlDataParameter("@Payment_type_id", DbType.Int32, DBValue.ToDBInt32(payment.PaymentTypeId)));
                paramCol.Add(new SqlDataParameter("@Payment_info_id", DbType.Int32, DBValue.ToDBInt32(payment.PaymentInfoId)));
                paramCol.Add(new SqlDataParameter("@Payment_period_id", DbType.Int32, DBValue.ToDBInt32(payment.PaymentPeriodId)));
                paramCol.Add(new SqlDataParameter("@Cheque_number", DbType.Int32, DBValue.ToDBInt32(payment.ChequeNumber)));
                paramCol.Add(new SqlDataParameter("@Cheque_date", DbType.DateTime, DBValue.ToDBDateTime(payment.ChequeDate)));
                paramCol.Add(new SqlDataParameter("@Paid_amount", DbType.Decimal, DBValue.ToDBDecimal(payment.PaidAmount)));
                paramCol.Add(new SqlDataParameter("@Name", DbType.String, DBValue.ToDBString(payment.Name)));
                paramCol.Add(new SqlDataParameter("@Phone_number", DbType.String, DBValue.ToDBString(payment.PhoneNumber)));
                paramCol.Add(new SqlDataParameter("@Address_1", DbType.String, DBValue.ToDBString(payment.Address1)));
                paramCol.Add(new SqlDataParameter("@Address_2", DbType.String, DBValue.ToDBString(payment.Address2)));
                paramCol.Add(new SqlDataParameter("@City", DbType.String, DBValue.ToDBString(payment.City)));
                paramCol.Add(new SqlDataParameter("@Zip_code", DbType.String, DBValue.ToDBString(payment.ZipCode)));
                paramCol.Add(new SqlDataParameter("@Country_code", DbType.String, DBValue.ToDBString(payment.CountryCode)));
                paramCol.Add(new SqlDataParameter("@Subdivision_code", DbType.String, DBValue.ToDBString(payment.SubdivisionCode)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(payment.CreateDate)));
                paramCol.Add(new SqlDataParameter("@Payment_Batch_id", DbType.Int32, DBValue.ToDBInt32(payment.PaymentBatchID)));
                paramCol.Add(new SqlDataParameter("@Is_validated", DbType.Boolean, DBValue.ToDBBoolean(payment.IsValidated)));
                paramCol.Add(new SqlDataParameter("@Is_processed", DbType.Boolean, DBValue.ToDBBoolean(payment.IsProcessed)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        internal Payment.Payment[] GetPaymentByEventIDAndException(int id,
            GA.BDC.Core.ESubsGlobal.Payment.ExceptionTypeCategory exceptionType, 
			GA.BDC.Core.ESubsGlobal.Payment.PaymentStatusCategory ppStatus)
        {
            return GetPaymentByEventIDAndException(id, (int)exceptionType, (int)ppStatus, null);
        }


        public Payment.Payment[] GetPaymentByEventIDInProcess(int id)
        {
            return GetPaymentByEventIDAndException(id, int.MinValue, (int)GA.BDC.Core.ESubsGlobal.Payment.PaymentStatusCategory.InProcess, null);
        }

        internal Payment.Payment[] GetPaymentByEventIDAndException(int id,
            int exceptionType, 
			int ppStatus,
			SqlInterface si)
        {
            Payment.Payment[] payment = null;

            string storedProcName = "es_get_payment_by_event_id_and_exceptiontype";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Event_id", DbType.Int32, DBValue.ToDBInt32(id)));
                paramCol.Add(new SqlDataParameter("@ExceptionType", DbType.Int32, DBValue.ToDBInt32(exceptionType)));
                paramCol.Add(new SqlDataParameter("@PaymentStatus", DbType.Int32, DBValue.ToDBInt32(ppStatus)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    payment = new Payment.Payment[dt.Rows.Count];
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            payment[i] = LoadPayment(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }

            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return payment;
        }


        public Payment.Payment[] GetPaymentByPartnerIDAndException(int partnerId,
            GA.BDC.Core.ESubsGlobal.Payment.ExceptionTypeCategory exceptionType, 
			GA.BDC.Core.ESubsGlobal.Payment.PaymentStatusCategory ppStatus)
        {
            return GetPaymentByPartnerIDAndException(partnerId, (int)exceptionType, (int)ppStatus, null);
        }
        internal Payment.Payment[] GetPaymentByPartnerIDAndException(int partnerId,
            int exceptionType, 
			int ppStatus,
			SqlInterface si)
        {
            Payment.Payment[] payment = null;

            string storedProcName = "es_get_payment_by_partner_id_and_exceptiontype";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Partner_id", DbType.Int32, DBValue.ToDBInt32(partnerId)));
                paramCol.Add(new SqlDataParameter("@ExceptionType", DbType.Int32, DBValue.ToDBInt32(exceptionType)));
                paramCol.Add(new SqlDataParameter("@PaymentStatus", DbType.Int32, DBValue.ToDBInt32(ppStatus)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    payment = new Payment.Payment[dt.Rows.Count];
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            payment[i] = LoadPayment(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }

            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return payment;
        }


        #endregion

        #region PaymentInfo Methods

        public PaymentInfo GetPaymentInfoByID(int id)
        {
            return GetPaymentInfoByID(id, null);
        }

        private PaymentInfo GetPaymentInfoByID(int id, SqlInterface si)
        {
            PaymentInfo paymentInfo = null;

            string storedProcName = "es_get_payment_info_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Payment_Info_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        paymentInfo = LoadPaymentInfo(dt.Rows);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return paymentInfo;
        }



        public PaymentInfo GetPaymentInfoByIDActiveOrNot(int id)
        {
            return GetPaymentInfoByIDActiveOrNot(id, null);
        }

        private PaymentInfo GetPaymentInfoByIDActiveOrNot(int id, SqlInterface si)
        {
            PaymentInfo paymentInfo = null;

            string storedProcName = "es_get_payment_info_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Payment_Info_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        paymentInfo = LoadPaymentInfoActiveOrNot(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return paymentInfo;
        }



        /*
                private Payment.PaymentInfo LoadPaymentInfo(DataRow row) {
                    Payment.PaymentInfo paymentInfo = new Payment.PaymentInfo();

                    // Store database values into our business object
                    paymentInfo.PaymentInfoId = DBValue.ToInt32(row["payment_info_id"]);
                    paymentInfo.GroupId = DBValue.ToInt32(row["group_id"]);
                    paymentInfo.PostalAddressId = DBValue.ToInt32(row["postal_address_id"]);
                    paymentInfo.PhoneNumberId = DBValue.ToInt32(row["phone_number_id"]);
                    paymentInfo.PaymentName = DBValue.ToString(row["payment_name"]);
                    paymentInfo.OnBehalfOfName = DBValue.ToString(row["on_behalf_of_name"]);
                    paymentInfo.ShipToName = DBValue.ToString(row["ship_to_name"]);
                    paymentInfo.Ssn = DBValue.ToString(row["ssn"]);
                    paymentInfo.Active = DBValue.ToInt32(row["active"]);
                    paymentInfo.CreateDate = DBValue.ToDateTime(row["create_date"]);
                    paymentInfo.EventId = DBValue.ToInt32(row["event_id"]);

                    // return the filled object
                    return paymentInfo;
                }

                public Payment.PaymentInfo[] GetPaymentInfos() {
                    return GetPaymentInfos(null);
                }

                private Payment.PaymentInfo[] GetPaymentInfos(SqlInterface si) {
                    Payment.PaymentInfo[] paymentInfos = null;

                    string storedProcName = "es_get_payment_infos";

                    // if the SqlInterface is passed as argument it means that 
                    // this call should be applied to an already open connection
                    // and the method which call this method is using transaction
                    bool newConnection = true;
                    if (si == null) {
                        si = new SqlInterface(dataProvider, connectionString);
                    } else {
                        newConnection = false;
                    }

                    try {
                        // declare stored procedure parameters
                        SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
				
				
                        if (newConnection) {
                            // open the connection
                            si.Open();
                        }

                        DataTable dt = si.ExecuteFetchDataTable( storedProcName, CommandType.StoredProcedure, paramCol);

                        if (dt != null) {
                            paymentInfos = new PaymentInfo[dt.Rows.Count];

                            for (int i = 0; i < dt.Rows.Count; i++)	{
                                // fill our objects
                                try {
                                    paymentInfos[i] = LoadPaymentInfo(dt.Rows[i]);
                                } catch(Exception ex) {
                                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                                }
                            }
                        }


                    } finally {
                        if(newConnection) {
                            // Always close connection.
                            si.Close();
                        }
                    }
                    return paymentInfos;
                }


                public PaymentInfo GetPaymentInfoByID(int id) {
                    return GetPaymentInfoByID(id, null);}

                private PaymentInfo GetPaymentInfoByID(int id, SqlInterface si) {
                    PaymentInfo paymentInfo = null;

                    string storedProcName = "es_get_payment_info_by_id";

                    // if the SqlInterface is passed as argument it means that 
                    // this call should be applied to an already open connection
                    // and the method which call this method is using transaction
                    bool newConnection = true;
                    if (si == null) {
                        si = new SqlInterface(dataProvider, connectionString);
                    } else {
                        newConnection = false;
                    }

                    try {
                        // declare stored procedure parameters
                        SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                        paramCol.Add(new SqlDataParameter("@Payment_info_id", DbType.Int32, DBValue.ToDBInt32(id)));
				
                        if (newConnection) {
                            // open the connection
                            si.Open();
                        }

                        DataTable dt = si.ExecuteFetchDataTable( storedProcName, CommandType.StoredProcedure, paramCol);

                        if(dt != null && dt.Rows.Count > 0) {
                            // fill our objects
                            try {
                                paymentInfo = LoadPaymentInfo(dt.Rows[0]);
                            } catch(Exception ex) {
                                throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                            }
                        }


                    } finally {
                        if(newConnection) {
                            // Always close connection.
                            si.Close();
                        }
                    }
                    return paymentInfo;
                }


                public int InsertPaymentInfo(PaymentInfo paymentInfo) {
                    return InsertPaymentInfo(paymentInfo, null);}

                private int InsertPaymentInfo(PaymentInfo paymentInfo, SqlInterface si) {
                    int result = int.MinValue;

                    string storedProcName = "es_insert_payment_info";

                    // if the SqlInterface is passed as argument it means that 
                    // this call should be applied to an already open connection
                    // and the method which call this method is using transaction
                    bool newConnection = true;
                    if (si == null) {
                        si = new SqlInterface(dataProvider, connectionString);
                    } else {
                        newConnection = false;
                    }

                    try {
                        // declare stored procedure parameters
                        SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                        paramCol.Add(new SqlDataParameter("@Payment_info_id", DbType.Int32, ParameterDirection.Output));
                        paramCol.Add(new SqlDataParameter("@Group_id", DbType.Int32, DBValue.ToDBInt32(paymentInfo.GroupId)));
                        paramCol.Add(new SqlDataParameter("@Postal_address_id", DbType.Int32, DBValue.ToDBInt32(paymentInfo.PostalAddressId)));
                        paramCol.Add(new SqlDataParameter("@Phone_number_id", DbType.Int32, DBValue.ToDBInt32(paymentInfo.PhoneNumberId)));
                        paramCol.Add(new SqlDataParameter("@Payment_name", DbType.String, DBValue.ToDBString(paymentInfo.PaymentName)));
                        paramCol.Add(new SqlDataParameter("@On_behalf_of_name", DbType.String, DBValue.ToDBString(paymentInfo.OnBehalfOfName)));
                        paramCol.Add(new SqlDataParameter("@Ship_to_name", DbType.String, DBValue.ToDBString(paymentInfo.ShipToName)));
                        paramCol.Add(new SqlDataParameter("@Ssn", DbType.String, DBValue.ToDBString(paymentInfo.Ssn)));
                        paramCol.Add(new SqlDataParameter("@Active", DbType.Int32, DBValue.ToDBInt32(paymentInfo.Active)));
                        paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(paymentInfo.CreateDate)));
                        paramCol.Add(new SqlDataParameter("@Event_id", DbType.Int32, DBValue.ToDBInt32(paymentInfo.EventId)));

				
                        if (newConnection) {
                            // open the connection
                            si.Open();
                        }

                        result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                        if (result > 0) {
                            // Get generated id
                            paymentInfo.PaymentInfoId = DBValue.ToInt32(paramCol["@Payment_info_id"].Value);

                        } else {
                            throw new SqlDataException("Error inserting into database calling " + storedProcName);
                        }	


                    } finally {
                        if(newConnection) {
                            // Always close connection.
                            si.Close();
                        }
                    }
                    return result;
                }


                public int UpdatePaymentInfo(PaymentInfo paymentInfo) {
                    return UpdatePaymentInfo(paymentInfo, null);}

                private int UpdatePaymentInfo(PaymentInfo paymentInfo, SqlInterface si) {
                    int result = int.MinValue;

                    string storedProcName = "es_update_payment_info";

                    // if the SqlInterface is passed as argument it means that 
                    // this call should be applied to an already open connection
                    // and the method which call this method is using transaction
                    bool newConnection = true;
                    if (si == null) {
                        si = new SqlInterface(dataProvider, connectionString);
                    } else {
                        newConnection = false;
                    }

                    try {
                        // declare stored procedure parameters
                        SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                        paramCol.Add(new SqlDataParameter("@Payment_info_id", DbType.Int32, DBValue.ToDBInt32(paymentInfo.PaymentInfoId)));
                        paramCol.Add(new SqlDataParameter("@Group_id", DbType.Int32, DBValue.ToDBInt32(paymentInfo.GroupId)));
                        paramCol.Add(new SqlDataParameter("@Postal_address_id", DbType.Int32, DBValue.ToDBInt32(paymentInfo.PostalAddressId)));
                        paramCol.Add(new SqlDataParameter("@Phone_number_id", DbType.Int32, DBValue.ToDBInt32(paymentInfo.PhoneNumberId)));
                        paramCol.Add(new SqlDataParameter("@Payment_name", DbType.String, DBValue.ToDBString(paymentInfo.PaymentName)));
                        paramCol.Add(new SqlDataParameter("@On_behalf_of_name", DbType.String, DBValue.ToDBString(paymentInfo.OnBehalfOfName)));
                        paramCol.Add(new SqlDataParameter("@Ship_to_name", DbType.String, DBValue.ToDBString(paymentInfo.ShipToName)));
                        paramCol.Add(new SqlDataParameter("@Ssn", DbType.String, DBValue.ToDBString(paymentInfo.Ssn)));
                        paramCol.Add(new SqlDataParameter("@Active", DbType.Int32, DBValue.ToDBInt32(paymentInfo.Active)));
                        paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(paymentInfo.CreateDate)));
                        paramCol.Add(new SqlDataParameter("@Event_id", DbType.Int32, DBValue.ToDBInt32(paymentInfo.EventId)));

				
                        if (newConnection) {
                            // open the connection
                            si.Open();
                        }

                        result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                        if (result > 0) {
                            return result;
                        }
                        else {
                            throw new SqlDataException("Error updating database calling " + storedProcName);
                        }


                    } finally {
                        if(newConnection) {
                            // Always close connection.
                            si.Close();
                        }
                    }
                    return result;
                }
        */
        #endregion

        #region PaymentItem Methods
        private PaymentItem LoadPaymentItem(DataRow row)
        {
            PaymentItem paymentItem = new PaymentItem();

            // Store database values into our business object
            paymentItem.PaymentItemId = DBValue.ToInt32(row["payment_item_id"]);
            paymentItem.PaymentId = DBValue.ToInt32(row["payment_id"]);
            if (row.Table.Columns.Contains("qsp_order_id"))
            {
                paymentItem.QspOrderId = DBValue.ToInt32(row["qsp_order_id"]);
            }

            if (row.Table.Columns.Contains("qsp_order_detail_id"))
            {
                paymentItem.QspOrderDetailId = DBValue.ToInt32(row["qsp_order_detail_id"]);
            }
            paymentItem.CreateDate = DBValue.ToDateTime(row["create_date"]);
            paymentItem.OrderDetailAmount = DBValue.ToInt32(row["order_detail_amount"]);
            paymentItem.ProfitPercentage = DBValue.ToDouble(row["profit_percentage"]);
            paymentItem.ProfitAmount = DBValue.ToDouble(row["profit_amount"]);
            if(row.Table.Columns.Contains("profit_id"))
            {
                paymentItem.ProfitId = DBValue.ToInt32(row["profit_id"]);
            }
            if (row.Table.Columns.Contains("profit_range_id"))
            {
                paymentItem.ProfitRangeId = DBValue.ToInt32(row["profit_range_id"]);
            }
            // return the filled object
            return paymentItem;
        }

        public PaymentItem[] GetPaymentItems()
        {
            return GetPaymentItems(null);
        }

        private PaymentItem[] GetPaymentItems(SqlInterface si)
        {
            PaymentItem[] paymentItems = null;

            string storedProcName = "es_get_payment_items";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    paymentItems = new PaymentItem[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            paymentItems[i] = LoadPaymentItem(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return paymentItems;
        }

        public List<PaymentItem> GetProcessedPaymentItemsByEventId(int eventID)
        {
            return GetProcessedPaymentItemsByEventId(eventID, null);
        }

        private List<PaymentItem> GetProcessedPaymentItemsByEventId(int eventID, SqlInterface si)
        {
            List<PaymentItem> paymentItems = new List<PaymentItem>();

            string storedProcName = "es_get_processed_payment_items_by_event_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(eventID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                      for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            paymentItems.Add(LoadPaymentItem(dt.Rows[i]));
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return paymentItems;
        }


        private PaymentItem[] GetPaymentItemsByPaymentId(int paymentId, SqlInterface si)
        {
            PaymentItem[] paymentItems = null;

            string storedProcName = "es_get_payment_item_by_payment_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Payment_id", DbType.Int32, DBValue.ToDBInt32(paymentId)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    paymentItems = new PaymentItem[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            paymentItems[i] = LoadPaymentItem(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return paymentItems;
        }

        internal PaymentItem[] GetPaymentItemsByPaymentId(int paymentId)
        {
            return GetPaymentItemsByPaymentId(paymentId, null);
        }

        public PaymentItem GetPaymentItemByID(int id)
        {
            return GetPaymentItemByID(id, null);
        }

        private PaymentItem GetPaymentItemByID(int id, SqlInterface si)
        {
            PaymentItem paymentItem = null;

            string storedProcName = "es_get_payment_item_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Payment_item_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        paymentItem = LoadPaymentItem(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return paymentItem;
        }

        public PaymentItem GetLastPaymentItemByEventID(int id)
        {
            return GetLastPaymentItemByEventID(id, null);
        }

        private PaymentItem GetLastPaymentItemByEventID(int id, SqlInterface si)
        {
            PaymentItem paymentItem = null;

            string storedProcName = "es_get_last_payment_item_by_event_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        paymentItem = LoadPaymentItem(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return paymentItem;
        }

        internal PaymentItem GetPaymentItemByQSPOrderDetailID(int orderDetailId)
        {
            return GetPaymentItemByQSPOrderDetailID(orderDetailId, null);
        }
        private PaymentItem GetPaymentItemByQSPOrderDetailID(int orderDetailId, SqlInterface si)
        {
            PaymentItem paymentItem = null;

            string storedProcName = "es_get_payment_item_by_qsp_order_detail_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Order_detail_id", DbType.Int32, DBValue.ToDBInt32(orderDetailId)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        paymentItem = LoadPaymentItem(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return paymentItem;
        }


        public int InsertPaymentItem(PaymentItem paymentItem)
        {
            return InsertPaymentItem(paymentItem, null);
        }

        private int InsertPaymentItem(PaymentItem paymentItem, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_insert_payment_item";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Payment_item_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Payment_id", DbType.Int32, DBValue.ToDBInt32(paymentItem.PaymentId)));
                 paramCol.Add(new SqlDataParameter("@Qsp_order_detail_id", DbType.Int32, DBValue.ToDBInt32(paymentItem.QspOrderDetailId)));
                paramCol.Add(new SqlDataParameter("@Order_detail_amount", DbType.Double, DBValue.ToDBDouble(paymentItem.OrderDetailAmount)));
                paramCol.Add(new SqlDataParameter("@Profit_percentage", DbType.Double, DBValue.ToDBDouble(paymentItem.ProfitPercentage)));
                paramCol.Add(new SqlDataParameter("@Profit_amount", DbType.Double, DBValue.ToDBDouble(paymentItem.ProfitAmount)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(paymentItem.CreateDate)));
                paramCol.Add(new SqlDataParameter("@Profit_id", DbType.Int32, DBValue.ToDBInt32(paymentItem.ProfitId)));
                paramCol.Add(new SqlDataParameter("@Profit_Range_id", DbType.Int32, DBValue.ToDBInt32(paymentItem.ProfitRangeId)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    paymentItem.PaymentItemId = DBValue.ToInt32(paramCol["@Payment_item_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdatePaymentItem(PaymentItem paymentItem)
        {
            return UpdatePaymentItem(paymentItem, null);
        }

        private int UpdatePaymentItem(PaymentItem paymentItem, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_update_payment_item";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Payment_item_id", DbType.Int32, DBValue.ToDBInt32(paymentItem.PaymentItemId)));
                paramCol.Add(new SqlDataParameter("@Payment_id", DbType.Int32, DBValue.ToDBInt32(paymentItem.PaymentId)));
                paramCol.Add(new SqlDataParameter("@Qsp_order_detail_id", DbType.Int32, DBValue.ToDBInt32(paymentItem.QspOrderDetailId)));
                paramCol.Add(new SqlDataParameter("@Order_detail_amount", DbType.Double, DBValue.ToDBDouble(paymentItem.OrderDetailAmount)));
                paramCol.Add(new SqlDataParameter("@Profit_percentage", DbType.Double, DBValue.ToDBDouble(paymentItem.ProfitPercentage)));
                paramCol.Add(new SqlDataParameter("@Profit_amount", DbType.Double, DBValue.ToDBDouble(paymentItem.ProfitAmount)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(paymentItem.CreateDate)));
                paramCol.Add(new SqlDataParameter("@Profit_id", DbType.Int32, DBValue.ToDBInt32(paymentItem.ProfitId)));
                paramCol.Add(new SqlDataParameter("@Profit_Range_id", DbType.Int32, DBValue.ToDBInt32(paymentItem.ProfitRangeId)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }

             
            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region PaymentPeriod Methods

        private PaymentPeriod LoadPaymentPeriod(DataRow row)
        {
            PaymentPeriod paymentPeriod = new PaymentPeriod();

            // Store database values into our business object
            paymentPeriod.PaymentPeriodId = DBValue.ToInt32(row["payment_period_id"]);
            paymentPeriod.StartDate = DBValue.ToDateTime(row["start_date"]);
            paymentPeriod.EndDate = DBValue.ToDateTime(row["end_date"]);
            paymentPeriod.CreateDate = DBValue.ToDateTime(row["create_date"]);

            // return the filled object
            return paymentPeriod;
        }

        public PaymentPeriod[] GetPaymentPeriods()
        {
            return GetPaymentPeriods(null);
        }

        private PaymentPeriod[] GetPaymentPeriods(SqlInterface si)
        {
            PaymentPeriod[] paymentPeriods = null;

            string storedProcName = "es_get_payment_periods";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    paymentPeriods = new PaymentPeriod[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            paymentPeriods[i] = LoadPaymentPeriod(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return paymentPeriods;
        }



        public PaymentPeriod[] GetPaymentPeriods(string filter, string expresionSort)
        {
            return GetPaymentPeriods(filter, expresionSort, null);
        }

        private PaymentPeriod[] GetPaymentPeriods(string filter, string expresionSort,SqlInterface si)
        {
            PaymentPeriod[] paymentPeriods = null;

            string storedProcName = "es_get_payment_periods";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dtResult = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dtResult != null)
                {
                    DataRow[] rows = dtResult.Select(filter, expresionSort);
                    paymentPeriods = new PaymentPeriod[rows.Length];

                    for (int i = 0; i < rows.Length; i++)
                    {
                        // fill our objects
                        try
                        {
                            paymentPeriods[i] = LoadPaymentPeriod(rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return paymentPeriods;
        }


        public PaymentPeriod GetPaymentPeriodByID(int id)
        {
            return GetPaymentPeriodByID(id, null);
        }

        private PaymentPeriod GetPaymentPeriodByID(int id, SqlInterface si)
        {
            PaymentPeriod paymentPeriod = null;

            string storedProcName = "es_get_payment_period_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Payment_period_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        paymentPeriod = LoadPaymentPeriod(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return paymentPeriod;
        }


        public PaymentPeriod GetLatestPaymentPeriod()
        {
            return GetLatestPaymentPeriod(null);
        }
        private PaymentPeriod GetLatestPaymentPeriod(SqlInterface si)
        {
            PaymentPeriod paymentPeriod = null;

            string storedProcName = "es_get_latest_payment_period";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        paymentPeriod = LoadPaymentPeriod(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return paymentPeriod;
        }


        public PaymentPeriod[] GetLatestPaymentPeriods(string filter, string expresionSort)
        {
            return GetLatestPaymentPeriods(filter, expresionSort, null);
        }

        private PaymentPeriod[] GetLatestPaymentPeriods(string filter, string expresionSort, SqlInterface si)
        {
            PaymentPeriod[] paymentPeriods = null;

            string storedProcName = "es_get_latest_payment_periods";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dtResult = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dtResult != null)
                {
                    DataRow[] rows = dtResult.Select(filter, expresionSort);
                    paymentPeriods = new PaymentPeriod[rows.Length];

                    for (int i = 0; i < rows.Length; i++)
                    {
                        // fill our objects
                        try
                        {
                            paymentPeriods[i] = LoadPaymentPeriod(rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return paymentPeriods;
        }

        public int InsertNextPaymentPeriod()
        {
            return InsertNextPaymentPeriod(null);
        }

        private int InsertNextPaymentPeriod(SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_insert_next_payment_period";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);
                paramCol.Add(new SqlDataParameter("@Payment_period_id", DbType.Int32, ParameterDirection.Output));


                if (result > 0)
                {
                    // Get generated id
                    result = DBValue.ToInt32(paramCol["@Payment_period_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int InsertPaymentPeriod(PaymentPeriod paymentPeriod)
        {
            return InsertPaymentPeriod(paymentPeriod, null);
        }

        private int InsertPaymentPeriod(PaymentPeriod paymentPeriod, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_insert_payment_period";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Payment_period_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Start_date", DbType.DateTime, DBValue.ToDBDateTime(paymentPeriod.StartDate)));
                paramCol.Add(new SqlDataParameter("@End_date", DbType.DateTime, DBValue.ToDBDateTime(paymentPeriod.EndDate)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(paymentPeriod.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    paymentPeriod.PaymentPeriodId = DBValue.ToInt32(paramCol["@Payment_period_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdatePaymentPeriod(PaymentPeriod paymentPeriod)
        {
            return UpdatePaymentPeriod(paymentPeriod, null);
        }

        private int UpdatePaymentPeriod(PaymentPeriod paymentPeriod, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_update_payment_period";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Payment_period_id", DbType.Int32, DBValue.ToDBInt32(paymentPeriod.PaymentPeriodId)));
                paramCol.Add(new SqlDataParameter("@Start_date", DbType.DateTime, DBValue.ToDBDateTime(paymentPeriod.StartDate)));
                paramCol.Add(new SqlDataParameter("@End_date", DbType.DateTime, DBValue.ToDBDateTime(paymentPeriod.EndDate)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(paymentPeriod.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region PaymentType Methods

        private PaymentType LoadPaymentType(DataRow row)
        {
            PaymentType paymentType = new PaymentType();

            // Store database values into our business object
            paymentType.PaymentTypeId = DBValue.ToInt32(row["payment_type_id"]);
            paymentType.PaymentTypeName = DBValue.ToString(row["payment_type_name"]);
            paymentType.CreateDate = DBValue.ToDateTime(row["create_date"]);

            // return the filled object
            return paymentType;
        }

        public PaymentType[] GetPaymentTypes()
        {
            return GetPaymentTypes(null);
        }

        private PaymentType[] GetPaymentTypes(SqlInterface si)
        {
            PaymentType[] paymentTypes = null;

            string storedProcName = "es_get_payment_types";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    paymentTypes = new PaymentType[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            paymentTypes[i] = LoadPaymentType(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return paymentTypes;
        }


        public PaymentType GetPaymentTypeByID(int id)
        {
            return GetPaymentTypeByID(id, null);
        }

        private PaymentType GetPaymentTypeByID(int id, SqlInterface si)
        {
            PaymentType paymentType = null;

            string storedProcName = "es_get_payment_type_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Payment_type_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        paymentType = LoadPaymentType(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return paymentType;
        }


        public int InsertPaymentType(PaymentType paymentType)
        {
            return InsertPaymentType(paymentType, null);
        }

        private int InsertPaymentType(PaymentType paymentType, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_insert_payment_type";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Payment_type_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Payment_type_name", DbType.String, DBValue.ToDBString(paymentType.PaymentTypeName)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(paymentType.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    paymentType.PaymentTypeId = DBValue.ToInt32(paramCol["@Payment_type_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdatePaymentType(PaymentType paymentType)
        {
            return UpdatePaymentType(paymentType, null);
        }

        private int UpdatePaymentType(PaymentType paymentType, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_update_payment_type";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Payment_type_id", DbType.Int32, DBValue.ToDBInt32(paymentType.PaymentTypeId)));
                paramCol.Add(new SqlDataParameter("@Payment_type_name", DbType.String, DBValue.ToDBString(paymentType.PaymentTypeName)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(paymentType.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region PostalAddress Methods

        public PostalAddress GetPostalAddressByID(int id)
        {
            return GetPostalAddressByID(id, null);
        }

        private PostalAddress GetPostalAddressByID(int id, SqlInterface si)
        {
            PostalAddress postalAddress = null;

            string storedProcName = "es_get_postal_address_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Postal_address_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        postalAddress = LoadPostalAddress(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return postalAddress;
        }

        public int InsertPostalAddress(PostalAddress postalAddress)
        {
            return InsertPostalAddress(postalAddress, null);
        }

        private int InsertPostalAddress(PostalAddress postalAddress, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_insert_postal_address";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Postal_address_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Address_1", DbType.String, DBValue.ToDBString(postalAddress.Address1)));
                paramCol.Add(new SqlDataParameter("@Address_2", DbType.String, DBValue.ToDBString(postalAddress.Address2)));
                paramCol.Add(new SqlDataParameter("@zip_code", DbType.String, DBValue.ToDBString(postalAddress.ZipCode)));
                paramCol.Add(new SqlDataParameter("@City", DbType.String, DBValue.ToDBString(postalAddress.City)));
                paramCol.Add(new SqlDataParameter("@Subdivision_code", DbType.String, DBValue.ToDBString(postalAddress.SubDivisionCode)));
                paramCol.Add(new SqlDataParameter("@Country_code", DbType.String, DBValue.ToDBString(postalAddress.CountryCode.Code)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(postalAddress.CreateDate)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    postalAddress.Id = DBValue.ToInt32(paramCol["@Postal_address_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }

        public int UpdatePostalAddress(PostalAddress postalAddress)
        {
            return UpdatePostalAddress(postalAddress, null);
        }

        private int UpdatePostalAddress(PostalAddress postalAddress, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_update_postal_address_direct_mail";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Postal_address_id", DbType.Int32, DBValue.ToDBInt32(postalAddress.Id)));
                paramCol.Add(new SqlDataParameter("@Address_1", DbType.String, DBValue.ToDBString(postalAddress.Address1)));
                paramCol.Add(new SqlDataParameter("@Address_2", DbType.String, DBValue.ToDBString(postalAddress.Address2)));
                paramCol.Add(new SqlDataParameter("@zip_code", DbType.String, DBValue.ToDBString(postalAddress.ZipCode)));
                paramCol.Add(new SqlDataParameter("@City", DbType.String, DBValue.ToDBString(postalAddress.City)));
                paramCol.Add(new SqlDataParameter("@Subdivision_code", DbType.String, DBValue.ToDBString(postalAddress.SubDivisionCode)));
                paramCol.Add(new SqlDataParameter("@Country_code", DbType.String, DBValue.ToDBString(postalAddress.CountryCode.Code)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(postalAddress.CreateDate)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result != 1)
                {
                    throw new SqlDataException("Error updating into database calling " + storedProcName);
                }

            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }

        public int InsertPostalAddressToMember(eSubsGlobalUser member, PostalAddress postalAddress)
        {
            return InsertPostalAddressToMember(member, postalAddress, null);
        }

        private int InsertPostalAddressToMember(eSubsGlobalUser member, PostalAddress postalAddress, SqlInterface si)
        {
            int result = int.MinValue;

            int memberPostalAddressID = int.MinValue;

            string storedProcName = "es_insert_postal_address_to_member";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                
                paramCol.Add(new SqlDataParameter("@member_postal_address_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@postal_address_id", DbType.Int32, DBValue.ToDBInt32(postalAddress.Id)));
                paramCol.Add(new SqlDataParameter("@postal_address_type_id", DbType.Int32, DBValue.ToDBInt32((int)postalAddress.PostalAddressTypeID)));
                paramCol.Add(new SqlDataParameter("@member_id", DbType.Int32, DBValue.ToDBInt32(member.ID)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(postalAddress.CreateDate)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    memberPostalAddressID = DBValue.ToInt32(paramCol["@member_postal_address_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }

        public int UpdatePostalAddressToMember(eSubsGlobalUser member, PostalAddress postalAddress)
        {
            return UpdatePostalAddressToMember(member, postalAddress, null);
        }

        private int UpdatePostalAddressToMember(eSubsGlobalUser member, PostalAddress postalAddress, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_update_postal_address_to_member";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();

                paramCol.Add(new SqlDataParameter("@member_postal_address_id", DbType.Int32, DBValue.ToDBInt32(postalAddress.Id)));
                paramCol.Add(new SqlDataParameter("@postal_address_id", DbType.Int32, DBValue.ToDBInt32(postalAddress.Id)));
                paramCol.Add(new SqlDataParameter("@postal_address_type_id", DbType.Int32, DBValue.ToDBInt32((int)postalAddress.PostalAddressTypeID)));
                paramCol.Add(new SqlDataParameter("@member_id", DbType.Int32, DBValue.ToDBInt32(member.ID)));
                paramCol.Add(new SqlDataParameter("@active", DbType.Int32, DBValue.ToDBBoolean(postalAddress.Active)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(postalAddress.CreateDate)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }

        #endregion

        #region QSPSchool Methods

        private QSPSchool LoadQSPSchool(DataRow row)
        {
            QSPSchool qspSchool = new QSPSchool();

            // Store database values into our business object
            qspSchool.SchoolId = DBValue.ToInt32(row["Id"]);
            qspSchool.Name = DBValue.ToString(row["Name"]);
            qspSchool.City = DBValue.ToString(row["City"]);
            qspSchool.State = DBValue.ToString(row["State"]);
            qspSchool.Zip = DBValue.ToString(row["Zip"]);
            qspSchool.AccountId = DBValue.ToInt32(row["account_id"]);

            // return the filled object
            return qspSchool;
        }

        public QSPSchool[] GetQSPSchools(string schoolName, string state, int languageId)
        {
            return GetQSPSchools(schoolName, state, languageId, null);
        }

        private QSPSchool[] GetQSPSchools(string schoolName, string state, int languageId, SqlInterface si)
        {
            QSPSchool[] qspSchools = null;

            string storedProcName = "es_call_qspecommerce_pr_SchoolLookup";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@school", DbType.String, DBValue.ToDBString(schoolName)));
                paramCol.Add(new SqlDataParameter("@state", DbType.String, DBValue.ToDBString(state)));
                paramCol.Add(new SqlDataParameter("@iLanguage_Id", DbType.Int32, DBValue.ToDBInt32(languageId)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    qspSchools = new QSPSchool[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            qspSchools[i] = LoadQSPSchool(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return qspSchools;
        }

        public bool GetValidateAccountId(int fulfAccountId, int businessDivision)
        {
            return GetValidateAccountId(fulfAccountId, businessDivision, null);
        }

        private bool GetValidateAccountId(int fulfAccountId, int businessDivision, SqlInterface si)
        {
            bool isValid = false;

            string storedProcName = "es_call_qspecommerce_sp_ValidateAccountID";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@ifulf_account_id", DbType.Int32, DBValue.ToDBInt32(fulfAccountId)));
                paramCol.Add(new SqlDataParameter("@ibusiness_division_id", DbType.Int32, DBValue.ToDBInt32(businessDivision)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {

                    if (dt != null && dt.Rows.Count > 0)
                    {
                        // fill our objects
                        try
                        {
                            isValid = DBValue.ToBoolean((dt.Rows[0]["RetValue"]));
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return isValid;
        }

        public int GetQspSupporterIdByEmail(string email)
        {
            return GetQspSupporterIdByEmail(email, null);
        }

        private int GetQspSupporterIdByEmail(string email, SqlInterface si)
        {
            int supporterId = -1;

            string storedProcName = "es_call_qspecommerce_pr_X_Supporter_GetID_byEmailAddress";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@sEmail_Address", DbType.String, DBValue.ToDBString(email)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {

                    if (dt != null && dt.Rows.Count > 0)
                    {
                        // fill our objects
                        try
                        {
                            supporterId = DBValue.ToInt32((dt.Rows[0]["supporter_id"]));
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return supporterId;
        }

        public int GetSchoolAccountIdByFulfId(int fulfId)
        {
            return GetQspSupporterIdByEmail(fulfId, null);
        }

        private int GetQspSupporterIdByEmail(int fulfId, SqlInterface si)
        {
            int accountId = -1;

            string storedProcName = "es_call_qspecommerce_pr_School_Lookup_by_fulf_account_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@fulf_account_id", DbType.Int32, DBValue.ToDBInt32(fulfId)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {

                    if (dt != null && dt.Rows.Count > 0)
                    {
                        // fill our objects
                        try
                        {
                            accountId = DBValue.ToInt32((dt.Rows[0]["account_id"]));
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return accountId;
        }

        public int GetSchoolFulfIdById(int accountId)
        {
            return GetSchoolFulfIdById(accountId, null);
        }

        private int GetSchoolFulfIdById(int accountId, SqlInterface si)
        {
            int fulfId = -1;

            string storedProcName = "es_call_qspecommerce_pr_account_get_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@intAccountID", DbType.Int32, DBValue.ToDBInt32(accountId)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {

                    if (dt != null && dt.Rows.Count > 0)
                    {
                        // fill our objects
                        try
                        {
                            fulfId = DBValue.ToInt32((dt.Rows[0]["fulf_account_id"]));
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return fulfId;
        }

        #endregion

        #region StatsPersonalization Methods

        private StatsPersonalization LoadStatsPersonalization(DataRow row)
        {
            StatsPersonalization statsPersonalization = new StatsPersonalization();

            // Store database values into our business object
            statsPersonalization.StatsPersonalizationId = DBValue.ToInt32(row["stats_personalization_id"]);
            statsPersonalization.EventParticipationId = DBValue.ToInt32(row["event_participation_id"]);
            statsPersonalization.StatsPersonalizationItemId = DBValue.ToInt32(row["stats_personalization_item_id"]);
            statsPersonalization.StatsPersonalizationSectionId = DBValue.ToInt32(row["stats_personalization_section_id"]);
            statsPersonalization.CreateDate = DBValue.ToDateTime(row["create_date"]);

            // return the filled object
            return statsPersonalization;
        }

        public StatsPersonalization[] GetStatsPersonalizations()
        {
            return GetStatsPersonalizations(null);
        }

        private StatsPersonalization[] GetStatsPersonalizations(SqlInterface si)
        {
            StatsPersonalization[] statsPersonalizations = null;

            string storedProcName = "es_get_stats_personalizations";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    statsPersonalizations = new StatsPersonalization[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            statsPersonalizations[i] = LoadStatsPersonalization(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return statsPersonalizations;
        }


        public StatsPersonalization GetStatsPersonalizationByID(int id)
        {
            return GetStatsPersonalizationByID(id, null);
        }

        private StatsPersonalization GetStatsPersonalizationByID(int id, SqlInterface si)
        {
            StatsPersonalization statsPersonalization = null;

            string storedProcName = "es_get_stats_personalization_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Stats_personalization_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        statsPersonalization = LoadStatsPersonalization(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return statsPersonalization;
        }


        public int InsertStatsPersonalization(StatsPersonalization statsPersonalization)
        {
            return InsertStatsPersonalization(statsPersonalization, null);
        }

        public int InsertStatsPersonalization(StatsPersonalization[] statsPers)
        {

            if (statsPers != null && statsPers.Length > 0)
            {
                for (int i = 0; i < statsPers.Length; i++)
                    InsertStatsPersonalization(statsPers[i], null);

                //				SqlInterface si = new SqlInterface(dataProvider, connectionString);
                //				try
                //				{ 
                //					//Open the connection
                //					si.Open();
                //					si.BeginTransaction();
                //					for (int i=0; i< statsPers.Length; i++)
                //						InsertStatsPersonalization(statsPers[i], si);
                //					si.Commit();
                //				}
                //				catch (Exception ex)
                //				{
                //					string stmp = ex.ToString();
                //					si.Rollback();
                //					throw new ESubsGlobalException("InsertStatsPersonalization: List of StatsPersonalizations", ex);
                //					return -1;
                //				}
                //				finally
                //				{
                //					si.Close();
                //				}
            }
            return 0;
        }

        private int InsertStatsPersonalization(StatsPersonalization statsPersonalization, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_insert_stats_personalization";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Stats_personalization_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Event_participation_id", DbType.Int32, DBValue.ToDBInt32(statsPersonalization.EventParticipationId)));
                paramCol.Add(new SqlDataParameter("@Stats_personalization_item_id", DbType.Int32, DBValue.ToDBInt32(statsPersonalization.StatsPersonalizationItemId)));
                paramCol.Add(new SqlDataParameter("@Stats_personalization_section_id", DbType.Int32, DBValue.ToDBInt32(statsPersonalization.StatsPersonalizationSectionId)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(statsPersonalization.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    statsPersonalization.StatsPersonalizationId = DBValue.ToInt32(paramCol["@Stats_personalization_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateStatsPersonalization(StatsPersonalization statsPersonalization)
        {
            return UpdateStatsPersonalization(statsPersonalization, null);
        }

        private int UpdateStatsPersonalization(StatsPersonalization statsPersonalization, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_update_stats_personalization";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Stats_personalization_id", DbType.Int32, DBValue.ToDBInt32(statsPersonalization.StatsPersonalizationId)));
                paramCol.Add(new SqlDataParameter("@Event_participation_id", DbType.Int32, DBValue.ToDBInt32(statsPersonalization.EventParticipationId)));
                paramCol.Add(new SqlDataParameter("@Stats_personalization_item_id", DbType.Int32, DBValue.ToDBInt32(statsPersonalization.StatsPersonalizationItemId)));
                paramCol.Add(new SqlDataParameter("@Stats_personalization_section_id", DbType.Int32, DBValue.ToDBInt32(statsPersonalization.StatsPersonalizationSectionId)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(statsPersonalization.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region StatsPersonalizationItem Methods

        private StatsPersonalizationItem LoadStatsPersonalizationItem(DataRow row)
        {
            StatsPersonalizationItem statsPersonalizationItem = new StatsPersonalizationItem();

            // Store database values into our business object
            statsPersonalizationItem.StatsPersonalizationItemId = DBValue.ToInt32(row["stats_personalization_item_id"]);
            statsPersonalizationItem.Description = DBValue.ToString(row["description"]);
            statsPersonalizationItem.CreateDate = DBValue.ToDateTime(row["create_date"]);

            // return the filled object
            return statsPersonalizationItem;
        }

        public StatsPersonalizationItem[] GetStatsPersonalizationItems()
        {
            return GetStatsPersonalizationItems(null);
        }

        private StatsPersonalizationItem[] GetStatsPersonalizationItems(SqlInterface si)
        {
            StatsPersonalizationItem[] statsPersonalizationItems = null;

            string storedProcName = "es_get_stats_personalization_items";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    statsPersonalizationItems = new StatsPersonalizationItem[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            statsPersonalizationItems[i] = LoadStatsPersonalizationItem(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return statsPersonalizationItems;
        }


        public StatsPersonalizationItem GetStatsPersonalizationItemByID(int id)
        {
            return GetStatsPersonalizationItemByID(id, null);
        }

        private StatsPersonalizationItem GetStatsPersonalizationItemByID(int id, SqlInterface si)
        {
            StatsPersonalizationItem statsPersonalizationItem = null;

            string storedProcName = "es_get_stats_personalization_item_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Stats_personalization_item_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        statsPersonalizationItem = LoadStatsPersonalizationItem(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return statsPersonalizationItem;
        }


        public int InsertStatsPersonalizationItem(StatsPersonalizationItem statsPersonalizationItem)
        {
            return InsertStatsPersonalizationItem(statsPersonalizationItem, null);
        }

        private int InsertStatsPersonalizationItem(StatsPersonalizationItem statsPersonalizationItem, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_insert_stats_personalization_item";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Stats_personalization_item_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(statsPersonalizationItem.Description)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(statsPersonalizationItem.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    statsPersonalizationItem.StatsPersonalizationItemId = DBValue.ToInt32(paramCol["@Stats_personalization_item_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateStatsPersonalizationItem(StatsPersonalizationItem statsPersonalizationItem)
        {
            return UpdateStatsPersonalizationItem(statsPersonalizationItem, null);
        }

        private int UpdateStatsPersonalizationItem(StatsPersonalizationItem statsPersonalizationItem, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_update_stats_personalization_item";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Stats_personalization_item_id", DbType.Int32, DBValue.ToDBInt32(statsPersonalizationItem.StatsPersonalizationItemId)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(statsPersonalizationItem.Description)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(statsPersonalizationItem.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region StatsPersonalizationSection Methods

        private StatsPersonalizationSection LoadStatsPersonalizationSection(DataRow row)
        {
            StatsPersonalizationSection statsPersonalizationSection = new StatsPersonalizationSection();

            // Store database values into our business object
            statsPersonalizationSection.StatsPersonalizationSectionId = DBValue.ToInt32(row["stats_personalization_section_id"]);
            statsPersonalizationSection.Description = DBValue.ToString(row["description"]);
            statsPersonalizationSection.CreateDate = DBValue.ToDateTime(row["create_date"]);

            // return the filled object
            return statsPersonalizationSection;
        }

        public StatsPersonalizationSection[] GetStatsPersonalizationSections()
        {
            return GetStatsPersonalizationSections(null);
        }

        private StatsPersonalizationSection[] GetStatsPersonalizationSections(SqlInterface si)
        {
            StatsPersonalizationSection[] statsPersonalizationSections = null;

            string storedProcName = "es_get_stats_personalization_sections";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    statsPersonalizationSections = new StatsPersonalizationSection[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            statsPersonalizationSections[i] = LoadStatsPersonalizationSection(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return statsPersonalizationSections;
        }


        public StatsPersonalizationSection GetStatsPersonalizationSectionByID(int id)
        {
            return GetStatsPersonalizationSectionByID(id, null);
        }

        private StatsPersonalizationSection GetStatsPersonalizationSectionByID(int id, SqlInterface si)
        {
            StatsPersonalizationSection statsPersonalizationSection = null;

            string storedProcName = "es_get_stats_personalization_section_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Stats_personalization_section_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        statsPersonalizationSection = LoadStatsPersonalizationSection(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return statsPersonalizationSection;
        }


        public int InsertStatsPersonalizationSection(StatsPersonalizationSection statsPersonalizationSection)
        {
            return InsertStatsPersonalizationSection(statsPersonalizationSection, null);
        }

        private int InsertStatsPersonalizationSection(StatsPersonalizationSection statsPersonalizationSection, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_insert_stats_personalization_section";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Stats_personalization_section_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(statsPersonalizationSection.Description)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(statsPersonalizationSection.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    statsPersonalizationSection.StatsPersonalizationSectionId = DBValue.ToInt32(paramCol["@Stats_personalization_section_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateStatsPersonalizationSection(StatsPersonalizationSection statsPersonalizationSection)
        {
            return UpdateStatsPersonalizationSection(statsPersonalizationSection, null);
        }

        private int UpdateStatsPersonalizationSection(StatsPersonalizationSection statsPersonalizationSection, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_update_stats_personalization_section";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Stats_personalization_section_id", DbType.Int32, DBValue.ToDBInt32(statsPersonalizationSection.StatsPersonalizationSectionId)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(statsPersonalizationSection.Description)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(statsPersonalizationSection.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }

        #endregion

        #region StoreTemplate Methods

        private StoreTemplate LoadStoreTemplate(DataRow row)
        {
            StoreTemplate storeTemplate = new StoreTemplate();

            // Store database values into our business object
            storeTemplate.StoreTemplateId = DBValue.ToInt32(row["store_template_id"]);
            storeTemplate.CultureCode = DBValue.ToString(row["culture_code"]);
            storeTemplate.StoreId = DBValue.ToInt32(row["store_id"]);
            storeTemplate.AggregatorId = DBValue.ToInt32(row["aggregator_id"]);
            storeTemplate.AccountNumber = DBValue.ToInt32(row["account_number"]);
            if (row.Table.Columns.Contains("opportunity_id"))
                storeTemplate.OpportunityID = DBValue.ToInt32(row["opportunity_id"]);
            storeTemplate.Description = DBValue.ToString(row["description"]);
            storeTemplate.CreateDate = DBValue.ToDateTime(row["create_date"]);

            // return the filled object
            return storeTemplate;
        }

        public StoreTemplate[] GetStoreTemplates()
        {
            return GetStoreTemplates(null);
        }

        private StoreTemplate[] GetStoreTemplates(SqlInterface si)
        {
            StoreTemplate[] storeTemplates = null;

            string storedProcName = "es_get_store_templates";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    storeTemplates = new StoreTemplate[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            storeTemplates[i] = LoadStoreTemplate(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return storeTemplates;
        }


        public StoreTemplate GetStoreTemplateByID(int id)
        {
            return GetStoreTemplateByID(id, null);
        }

        private StoreTemplate GetStoreTemplateByID(int id, SqlInterface si)
        {
            StoreTemplate storeTemplate = null;

            string storedProcName = "es_get_store_template_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Store_template_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        storeTemplate = LoadStoreTemplate(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return storeTemplate;
        }


        public StoreTemplate GetStoreTemplateByPartnerID(int id)
        {
            return GetStoreTemplateByPartnerID(id, null);
        }

        private StoreTemplate GetStoreTemplateByPartnerID(int id, SqlInterface si)
        {
            StoreTemplate storeTemplate = null;

            string storedProcName = "es_get_store_template_by_partner_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Partner_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        storeTemplate = LoadStoreTemplate(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return storeTemplate;
        }

        public int InsertStoreTemplate(StoreTemplate storeTemplate)
        {
            return InsertStoreTemplate(storeTemplate, null);
        }

        private int InsertStoreTemplate(StoreTemplate storeTemplate, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_insert_store_template";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Store_template_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Culture_code", DbType.String, DBValue.ToDBString(storeTemplate.CultureCode)));
                paramCol.Add(new SqlDataParameter("@Store_id", DbType.Int32, DBValue.ToDBInt32(storeTemplate.StoreId)));
                paramCol.Add(new SqlDataParameter("@Aggregator_id", DbType.Int32, DBValue.ToDBInt32(storeTemplate.AggregatorId)));
                paramCol.Add(new SqlDataParameter("@Account_number", DbType.Int32, DBValue.ToDBInt32(storeTemplate.AccountNumber)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(storeTemplate.Description)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(storeTemplate.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    storeTemplate.StoreTemplateId = DBValue.ToInt32(paramCol["@Store_template_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateStoreTemplate(StoreTemplate storeTemplate)
        {
            return UpdateStoreTemplate(storeTemplate, null);
        }

        private int UpdateStoreTemplate(StoreTemplate storeTemplate, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_update_store_template";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Store_template_id", DbType.Int32, DBValue.ToDBInt32(storeTemplate.StoreTemplateId)));
                paramCol.Add(new SqlDataParameter("@Culture_code", DbType.String, DBValue.ToDBString(storeTemplate.CultureCode)));
                paramCol.Add(new SqlDataParameter("@Store_id", DbType.Int32, DBValue.ToDBInt32(storeTemplate.StoreId)));
                paramCol.Add(new SqlDataParameter("@Aggregator_id", DbType.Int32, DBValue.ToDBInt32(storeTemplate.AggregatorId)));
                paramCol.Add(new SqlDataParameter("@Account_number", DbType.Int32, DBValue.ToDBInt32(storeTemplate.AccountNumber)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(storeTemplate.Description)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(storeTemplate.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region QspMatchingCode Methods

        private QspMatchingCode LoadQspMatchingCode(DataRow row)
        {
            QspMatchingCode qspMatchingCode = new QspMatchingCode();

            // Store database values into our business object
            qspMatchingCode.QspMatchingCodeId = DBValue.ToInt32(row["qsp_matching_code_id"]);
            qspMatchingCode.AccountId = DBValue.ToInt32(row["account_id"]);
            qspMatchingCode.CustBillingMatchingCode = DBValue.ToString(row["cust_billing_matching_code"]);
            qspMatchingCode.CustShippingMatchingCode = DBValue.ToString(row["cust_shipping_matching_code"]);
            qspMatchingCode.AccountMatchingCode = DBValue.ToString(row["account_matching_code"]);

            // return the filled object
            return qspMatchingCode;
        }

        public QspMatchingCode[] GetQspMatchingCodes()
        {
            return GetQspMatchingCodes(null);
        }

        private QspMatchingCode[] GetQspMatchingCodes(SqlInterface si)
        {
            QspMatchingCode[] qspMatchingCodes = null;

            string storedProcName = "es_get_qsp_matching_codes";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    qspMatchingCodes = new QspMatchingCode[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            qspMatchingCodes[i] = LoadQspMatchingCode(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return qspMatchingCodes;
        }


        public QspMatchingCode GetQspMatchingCodeByID(int id)
        {
            return GetQspMatchingCodeByID(id, null);
        }

        private QspMatchingCode GetQspMatchingCodeByID(int id, SqlInterface si)
        {
            QspMatchingCode qspMatchingCode = null;

            string storedProcName = "es_get_qsp_matching_code_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Qsp_matching_code_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        qspMatchingCode = LoadQspMatchingCode(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return qspMatchingCode;
        }


        public int InsertQspMatchingCode(QspMatchingCode qspMatchingCode)
        {
            return InsertQspMatchingCode(qspMatchingCode, null);
        }

        private int InsertQspMatchingCode(QspMatchingCode qspMatchingCode, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_insert_qsp_matching_code";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Qsp_matching_code_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Account_id", DbType.Int32, DBValue.ToDBInt32(qspMatchingCode.AccountId)));
                paramCol.Add(new SqlDataParameter("@Cust_billing_matching_code", DbType.String, DBValue.ToDBString(qspMatchingCode.CustBillingMatchingCode)));
                paramCol.Add(new SqlDataParameter("@Cust_shipping_matching_code", DbType.String, DBValue.ToDBString(qspMatchingCode.CustShippingMatchingCode)));
                paramCol.Add(new SqlDataParameter("@Account_matching_code", DbType.String, DBValue.ToDBString(qspMatchingCode.AccountMatchingCode)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    qspMatchingCode.QspMatchingCodeId = DBValue.ToInt32(paramCol["@Qsp_matching_code_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateQspMatchingCode(QspMatchingCode qspMatchingCode)
        {
            return UpdateQspMatchingCode(qspMatchingCode, null);
        }

        private int UpdateQspMatchingCode(QspMatchingCode qspMatchingCode, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_update_qsp_matching_code";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Qsp_matching_code_id", DbType.Int32, DBValue.ToDBInt32(qspMatchingCode.QspMatchingCodeId)));
                paramCol.Add(new SqlDataParameter("@Account_id", DbType.Int32, DBValue.ToDBInt32(qspMatchingCode.AccountId)));
                paramCol.Add(new SqlDataParameter("@Cust_billing_matching_code", DbType.String, DBValue.ToDBString(qspMatchingCode.CustBillingMatchingCode)));
                paramCol.Add(new SqlDataParameter("@Cust_shipping_matching_code", DbType.String, DBValue.ToDBString(qspMatchingCode.CustShippingMatchingCode)));
                paramCol.Add(new SqlDataParameter("@Account_matching_code", DbType.String, DBValue.ToDBString(qspMatchingCode.AccountMatchingCode)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region EarnedPrize Methods

        private EarnedPrize LoadEarnedPrize(DataRow row)
        {
            EarnedPrize earnedPrize = new EarnedPrize();

            // Store database values into our business object
            earnedPrize.PrizeItemId = DBValue.ToInt32(row["prize_item_id"]);
            earnedPrize.EventParticipationId = DBValue.ToInt32(row["event_participation_id"]);
            earnedPrize.CreateDate = DBValue.ToDateTime(row["create_date"]);

            // return the filled object
            return earnedPrize;
        }

        public EarnedPrize[] GetEarnedPrizes()
        {
            return GetEarnedPrizes(null);
        }

        private EarnedPrize[] GetEarnedPrizes(SqlInterface si)
        {
            EarnedPrize[] earnedPrizes = null;

            string storedProcName = "es_get_earned_prizes";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    earnedPrizes = new EarnedPrize[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            earnedPrizes[i] = LoadEarnedPrize(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return earnedPrizes;
        }


        public EarnedPrize GetEarnedPrizeByID(int id)
        {
            return GetEarnedPrizeByID(id, null);
        }

        private EarnedPrize GetEarnedPrizeByID(int id, SqlInterface si)
        {
            EarnedPrize earnedPrize = null;

            string storedProcName = "es_get_earned_prize_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Prize_item_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        earnedPrize = LoadEarnedPrize(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return earnedPrize;
        }

        public EarnedPrize GetEarnedPrizeByEventParticipationID(int id)
        {
            return GetEarnedPrizeByEventParticipationID(id, null);
        }

        private EarnedPrize GetEarnedPrizeByEventParticipationID(int id, SqlInterface si)
        {
            EarnedPrize earnedPrize = null;

            string storedProcName = "es_get_earned_prize_by_event_participation_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Prize_item_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        earnedPrize = LoadEarnedPrize(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return earnedPrize;
        }

        public List<EarnedPrize> GetEarnedPrizesByEventParticipationID(int id)
        {
            return GetEarnedPrizesByEventParticipationID(id, null);
        }

        private List<EarnedPrize> GetEarnedPrizesByEventParticipationID(int id, SqlInterface si)
        {
            List<EarnedPrize> earnedPrizes = new List<EarnedPrize>();

            string storedProcName = "es_get_earned_prize_by_event_participation_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Prize_item_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            earnedPrizes.Add(LoadEarnedPrize(dt.Rows[i]));
                        }                        
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }
            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return earnedPrizes;
        }

        public int InsertEarnedPrize(EarnedPrize earnedPrize)
        {
            return InsertEarnedPrize(earnedPrize, null);
        }

        private int InsertEarnedPrize(EarnedPrize earnedPrize, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_insert_earned_prize";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Prize_item_id", DbType.Int32, DBValue.ToDBInt32(earnedPrize.PrizeItemId)));
                paramCol.Add(new SqlDataParameter("@Event_participation_id", DbType.Int32, DBValue.ToDBInt32(earnedPrize.EventParticipationId)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(earnedPrize.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // table with no id
                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateEarnedPrize(EarnedPrize earnedPrize)
        {
            return UpdateEarnedPrize(earnedPrize, null);
        }

        private int UpdateEarnedPrize(EarnedPrize earnedPrize, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_update_earned_prize";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Prize_item_id", DbType.Int32, DBValue.ToDBInt32(earnedPrize.PrizeItemId)));
                paramCol.Add(new SqlDataParameter("@Event_participation_id", DbType.Int32, DBValue.ToDBInt32(earnedPrize.EventParticipationId)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(earnedPrize.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region PrizeItem Methods

        private PrizeItem LoadPrizeItem(DataRow row)
        {
            PrizeItem prizeItem = new PrizeItem();

            // Store database values into our business object
            prizeItem.PrizeItemId = DBValue.ToInt32(row["prize_item_id"]);
            prizeItem.PrizeId = DBValue.ToInt32(row["prize_id"]);
            prizeItem.PrizeItemCode = DBValue.ToString(row["prize_item_code"]);
            prizeItem.ExpirationDate = DBValue.ToDateTime(row["expiration_date"]);
            prizeItem.CreateDate = DBValue.ToDateTime(row["create_date"]);

            // return the filled object
            return prizeItem;
        }

        public PrizeItem[] GetPrizeItems()
        {
            return GetPrizeItems(null);
        }

        private PrizeItem[] GetPrizeItems(SqlInterface si)
        {
            PrizeItem[] prizeItems = null;

            string storedProcName = "es_get_prize_items";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    prizeItems = new PrizeItem[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            prizeItems[i] = LoadPrizeItem(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return prizeItems;
        }

        public PrizeItem GetPrizeItemNext(int prizeType)
        {
            return GetPrizeItemNext(prizeType, null);
        }

        private PrizeItem GetPrizeItemNext(int prizeType, SqlInterface si)
        {
            PrizeItem prizeItem = null;

            string storedProcName = "es_get_prize_item_next";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@prize_type", DbType.Int32, DBValue.ToDBInt32(prizeType)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        prizeItem = LoadPrizeItem(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return prizeItem;
        }

        public PrizeItem GetPrizeItemByID(int id)
        {
            return GetPrizeItemByID(id, null);
        }

        private PrizeItem GetPrizeItemByID(int id, SqlInterface si)
        {
            PrizeItem prizeItem = null;

            string storedProcName = "es_get_prize_item_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Prize_item_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        prizeItem = LoadPrizeItem(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return prizeItem;
        }



        public PrizeItem[] GetPrizeItemByPrizeID(int id)
        {
            return GetPrizeItemByPrizeID(id, null);
        }

        private PrizeItem[] GetPrizeItemByPrizeID(int id, SqlInterface si)
        {
            PrizeItem[] prizeItems = null;

            string storedProcName = "es_get_prize_item_by_prize_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Prize_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);


                if (dt != null)
                {
                    prizeItems = new PrizeItem[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            prizeItems[i] = LoadPrizeItem(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return prizeItems;
        }


        public int InsertPrizeItem(PrizeItem prizeItem)
        {
            return InsertPrizeItem(prizeItem, null);
        }

        private int InsertPrizeItem(PrizeItem prizeItem, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_insert_prize_item";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Prize_item_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Prize_id", DbType.Int32, DBValue.ToDBInt32(prizeItem.PrizeId)));
                paramCol.Add(new SqlDataParameter("@Prize_item_code", DbType.String, DBValue.ToDBString(prizeItem.PrizeItemCode)));
                paramCol.Add(new SqlDataParameter("@Expiration_date", DbType.DateTime, DBValue.ToDBDateTime(prizeItem.ExpirationDate)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(prizeItem.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    prizeItem.PrizeItemId = DBValue.ToInt32(paramCol["@Prize_item_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdatePrizeItem(PrizeItem prizeItem)
        {
            return UpdatePrizeItem(prizeItem, null);
        }

        private int UpdatePrizeItem(PrizeItem prizeItem, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_update_prize_item";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Prize_item_id", DbType.Int32, DBValue.ToDBInt32(prizeItem.PrizeItemId)));
                paramCol.Add(new SqlDataParameter("@Prize_id", DbType.Int32, DBValue.ToDBInt32(prizeItem.PrizeId)));
                paramCol.Add(new SqlDataParameter("@Prize_item_code", DbType.String, DBValue.ToDBString(prizeItem.PrizeItemCode)));
                paramCol.Add(new SqlDataParameter("@Expiration_date", DbType.DateTime, DBValue.ToDBDateTime(prizeItem.ExpirationDate)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(prizeItem.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region PrizeType Methods

        private PrizeType LoadPrizeType(DataRow row)
        {
            PrizeType prizeType = new PrizeType();

            // Store database values into our business object
            prizeType.PrizeTypeId = DBValue.ToInt32(row["prize_type_id"]);
            prizeType.PrizeTypeName = DBValue.ToString(row["prize_type_name"]);
            prizeType.CreateDate = DBValue.ToDateTime(row["create_date"]);

            // return the filled object
            return prizeType;
        }

        public PrizeType[] GetPrizeTypes()
        {
            return GetPrizeTypes(null);
        }

        private PrizeType[] GetPrizeTypes(SqlInterface si)
        {
            PrizeType[] prizeTypes = null;

            string storedProcName = "es_get_prize_types";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    prizeTypes = new PrizeType[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            prizeTypes[i] = LoadPrizeType(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return prizeTypes;
        }


        public PrizeType GetPrizeTypeByID(int id)
        {
            return GetPrizeTypeByID(id, null);
        }

        private PrizeType GetPrizeTypeByID(int id, SqlInterface si)
        {
            PrizeType prizeType = null;

            string storedProcName = "es_get_prize_type_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Prize_type_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        prizeType = LoadPrizeType(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return prizeType;
        }


        public int InsertPrizeType(PrizeType prizeType)
        {
            return InsertPrizeType(prizeType, null);
        }

        private int InsertPrizeType(PrizeType prizeType, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_insert_prize_type";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Prize_type_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Prize_type_name", DbType.String, DBValue.ToDBString(prizeType.PrizeTypeName)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(prizeType.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    prizeType.PrizeTypeId = DBValue.ToInt32(paramCol["@Prize_type_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdatePrizeType(PrizeType prizeType)
        {
            return UpdatePrizeType(prizeType, null);
        }

        private int UpdatePrizeType(PrizeType prizeType, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "es_update_prize_type";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Prize_type_id", DbType.Int32, DBValue.ToDBInt32(prizeType.PrizeTypeId)));
                paramCol.Add(new SqlDataParameter("@Prize_type_name", DbType.String, DBValue.ToDBString(prizeType.PrizeTypeName)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(prizeType.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region Prize Methods

        public Prize[] GetPrizesByPrizeTypeID(int prizeType)
        {
            return GetPrizesByPrizeTypeID(prizeType, null);
        }

        private Prize[] GetPrizesByPrizeTypeID(int prizeType, SqlInterface si)
        {
            Prize[] prizes = null;

            string storedProcName = "es_get_prizes_by_prize_type_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Prize_type_id", DbType.Int32, DBValue.ToDBInt32(prizeType)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    prizes = new Prize[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            prizes[i] = LoadPrize(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return prizes;
        }

        public Prize[] GetChildPrizesByPrizeID(int prizeId)
        {
            return GetChildPrizesByPrizeID(prizeId, null);
        }

        private Prize[] GetChildPrizesByPrizeID(int prizeId, SqlInterface si)
        {
            Prize[] prizes = null;

            string storedProcName = "es_get_child_prizes_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Prize_id", DbType.Int32, DBValue.ToDBInt32(prizeId)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    prizes = new Prize[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            prizes[i] = LoadPrize(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }
            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return prizes;
        }

        private Prize LoadPrize(DataRow row)
        {
            Prize prize = new Prize();

            // Store database values into our business object
            prize.PrizeID = DBValue.ToInt32(row["prize_id"]);
            if (row.Table.Columns.Contains("parent_prize_id"))
                prize.ParentPrizeID = DBValue.ToInt32(row["parent_prize_id"]);
            prize.ProgramTypeID = DBValue.ToInt32(row["prize_type_id"]);
            prize.Name = DBValue.ToString(row["prize_name"]);
            prize.CreateDate = DBValue.ToDateTime(row["create_date"]);

            // return the filled object
            return prize;
        }
        #endregion

        #region CheckSystem

        public bool InsertPartnerPaymentConfigTransactionController(int paymentInfoId, PartnerPaymentConfig newPaymentConfig)
        {
            bool bResult = true;

            SqlInterface si = null;
            try
            {
                si = new SqlInterface(dataProvider, connectionString);
                si.Open();
                si.BeginTransaction();

                PartnerPaymentInfo ppInfo = new PartnerPaymentInfo(newPaymentConfig.PartnerPaymentInfoId,
                                                newPaymentConfig.PartnerId, paymentInfoId, true, DateTime.Now);

                if (InsertPartnerPaymentInfo(ppInfo, si) < 1)
                {
                    si.Rollback();
                    return false;
                }
                if (InsertPartnerPaymentConfig(newPaymentConfig, si) < 1)
                {
                    si.Rollback();
                    return false;
                }

                si.Commit();

            }
            catch (Exception ex)
            {
                si.Rollback();
                throw new SqlDataException("Error in InsertPartnerPaymentConfigTransactionController", ex);
            }
            finally
            {
                si.Close();
            }

            return bResult;
        }


        public bool UpdatePartnerPaymentConfigTransactionController(int paymentInfoId, PartnerPaymentConfig newPaymentConfig)
        {
            bool bResult = true;

            SqlInterface si = null;
            try
            {
                si = new SqlInterface(dataProvider, connectionString);
                si.Open();
                si.BeginTransaction();

                PartnerPaymentInfo activePPInfo = GetActivePartnerPaymentInfoByID(newPaymentConfig.PartnerPaymentInfoId);
                PartnerPaymentInfo ppInfo = new PartnerPaymentInfo(newPaymentConfig.PartnerPaymentInfoId,
                                                                    newPaymentConfig.PartnerId, paymentInfoId, true, DateTime.Now);
                if (activePPInfo.IsBusinessBaseDifferent(ppInfo))
                {
                    if (InsertPartnerPaymentInfo(ppInfo, si) < 1)
                    {
                        si.Rollback();
                        return false;
                    }
                }

                if (UpdatePartnerPaymentConfig(newPaymentConfig, si) < 1)
                {
                    si.Rollback();
                    return false;
                }
                si.Commit();

            }
            catch (Exception ex)
            {
                si.Rollback();
                throw new SqlDataException("Error in InsertPartnerPaymentConfigTransactionController", ex);
            }
            finally
            {
                si.Close();
            }

            return bResult;
        }

        #endregion

        #region ELaunch Methods

        public Action[] GetActions()
        {
            Action[] action = null;
            string storedProcName = "es_get_actions";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            //bool newConnection = true;

            SqlInterface si = new SqlInterface(dataProvider, connectionString);


            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                // open the connection
                si.Open();


                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    action = new Action[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            action[i] = LoadAction(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {

                // Always close connection.
                si.Close();

            }
            return action;
        }
        private Action LoadAction(DataRow row)
        {
            Action action = new Action();
            action.ActionId = DBValue.ToInt32(row["action_id"]);
            action.ActionDesc = DBValue.ToString(row["action_desc"]);
            action.CreateDate = DBValue.ToDateTime(row["create_date"]);
            return action;
        }
        public Action GetActionByID(int id)
        {

            Action action = null;

            string storedProcName = "es_get_action_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            SqlInterface si = new SqlInterface(dataProvider, connectionString);



            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Action_id", DbType.Int32, DBValue.ToDBInt32(id)));


                // open the connection
                si.Open();


                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        action = LoadAction(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {

                // Always close connection.
                si.Close();

            }
            return action;
        }

        public ExternalAccount[] GetExternalAccounts()
        {

            ExternalAccount[] externalAccounts = null;
            string storedProcName = "es_get_external_accounts";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            //bool newConnection = true;

            SqlInterface si = new SqlInterface(dataProvider, connectionString);


            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                // open the connection
                si.Open();


                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    externalAccounts = new ExternalAccount[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            externalAccounts[i] = LoadExternalAccount(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {

                // Always close connection.
                si.Close();

            }
            return externalAccounts;
        }

        private ExternalAccount LoadExternalAccount(DataRow row)
        {
            ExternalAccount externalAccount = new ExternalAccount();
            externalAccount.ExternalAccountId = DBValue.ToInt32(row["external_account_id"]);
            externalAccount.FoodAccountId = DBValue.ToInt32(row["food_account_id"]);
            externalAccount.FsmId = DBValue.ToString(row["fsm_id"]);
            externalAccount.OnlineAccountId = DBValue.ToInt32(row["online_account_id"]);
            externalAccount.EventParticipationId = DBValue.ToInt32(row["event_participation_id"]);
            externalAccount.CreateDate = DBValue.ToDateTime(row["create_date"]);
            return externalAccount;
        }

        public ExternalAccount GetExternalAccountByID(int id)
        {
            ExternalAccount externalAccount = null;

            string storedProcName = "es_get_external_account_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            SqlInterface si = new SqlInterface(dataProvider, connectionString);



            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@External_account_id", DbType.Int32, DBValue.ToDBInt32(id)));


                // open the connection
                si.Open();


                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        externalAccount = LoadExternalAccount(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                // Always close connection.
                si.Close();

            }
            return externalAccount;
        }

        public ExternalAccount GetExternalAccountByFoodAccountID(int id)
        {
            ExternalAccount externalAccount = null;

            string storedProcName = "es_get_external_account_by_food_account_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            SqlInterface si = new SqlInterface(dataProvider, connectionString);



            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Food_account_id", DbType.Int32, DBValue.ToDBInt32(id)));


                // open the connection
                si.Open();


                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        externalAccount = LoadExternalAccount(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                // Always close connection.
                si.Close();

            }
            return externalAccount;
        }

        public int InsertExternalAccount(ExternalAccount externalAccount)
        {
            return InsertExternalAccount(externalAccount, null);
        }
        private int InsertExternalAccount(ExternalAccount externalAccount, SqlInterface si)
        {
            int result = int.MinValue;
            string storedProcName = "es_insert_external_account";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@External_account_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Food_account_id", DbType.Int32, DBValue.ToDBInt32(externalAccount.FoodAccountId)));
                paramCol.Add(new SqlDataParameter("@Fsm_id", DbType.Int32, DBValue.ToDBString(externalAccount.FsmId)));
                paramCol.Add(new SqlDataParameter("@Online_account_id", DbType.Int32, DBValue.ToDBInt32(externalAccount.OnlineAccountId)));
                paramCol.Add(new SqlDataParameter("@Event_participation_id", DbType.Int32, DBValue.ToDBInt32(externalAccount.EventParticipationId)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(externalAccount.CreateDate)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    externalAccount.ExternalAccountId = DBValue.ToInt32(paramCol["@External_account_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }
        public int UpdateExternalAccount(ExternalAccount externalAccount)
        {
            return UpdateExternalAccount(externalAccount, null);
        }
        private int UpdateExternalAccount(ExternalAccount externalAccount, SqlInterface si)
        {
            int result = int.MinValue;
            string storedProcName = "es_update_external_account";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@External_account_id", DbType.Int32, DBValue.ToDBInt32(externalAccount.ExternalAccountId)));
                paramCol.Add(new SqlDataParameter("@Food_account_id", DbType.Int32, DBValue.ToDBInt32(externalAccount.FoodAccountId)));
                paramCol.Add(new SqlDataParameter("@Fsm_id", DbType.Int32, DBValue.ToDBString(externalAccount.FsmId)));
                paramCol.Add(new SqlDataParameter("@Online_account_id", DbType.Int32, DBValue.ToDBInt32(externalAccount.OnlineAccountId)));
                paramCol.Add(new SqlDataParameter("@Event_participation_id", DbType.Int32, DBValue.ToDBInt32(externalAccount.EventParticipationId)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(externalAccount.CreateDate)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }

        }
        public ExternalAccountAction[] GetExternalAccountActions()
        {
            ExternalAccountAction[] externalAccountsAction = null;
            string storedProcName = "es_get_external_account_actions";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            //bool newConnection = true;

            SqlInterface si = new SqlInterface(dataProvider, connectionString);


            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                // open the connection
                si.Open();


                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    externalAccountsAction = new ExternalAccountAction[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            externalAccountsAction[i] = LoadExternalAccountAction(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {

                // Always close connection.
                si.Close();

            }
            return externalAccountsAction;
        }

        private ExternalAccountAction LoadExternalAccountAction(DataRow row)
        {
            ExternalAccountAction externalAccountAction = new ExternalAccountAction();
            externalAccountAction.ExternalAccountActionId = DBValue.ToInt32(row["external_account_action_id"]);
            externalAccountAction.ExternalAccountId = DBValue.ToInt32(row["external_account_id"]);
            externalAccountAction.ActionId = DBValue.ToInt32(row["action_id"]);
            externalAccountAction.CreateDate = DBValue.ToDateTime(row["create_date"]);
            return externalAccountAction;
        }
        public ExternalAccountAction GetExternalAccountActionByID(int id)
        {

            ExternalAccountAction externalAccountAction = null;

            string storedProcName = "es_get_external_account_action_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            SqlInterface si = new SqlInterface(dataProvider, connectionString);



            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@External_account_action_id", DbType.Int32, DBValue.ToDBInt32(id)));


                // open the connection
                si.Open();


                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        externalAccountAction = LoadExternalAccountAction(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                // Always close connection.
                si.Close();

            }
            return externalAccountAction;
        }

        public int InsertExternalAccountAction(ExternalAccountAction externalAccountAction)
        {
            return InsertExternalAccountAction(externalAccountAction, null);
        }

        private int InsertExternalAccountAction(ExternalAccountAction externalAccountAction, SqlInterface si)
        {
            int result = int.MinValue;
            string storedProcName = "es_insert_external_account_action";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@External_account_action_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@External_account_id", DbType.Int32, DBValue.ToDBInt32(externalAccountAction.ExternalAccountId)));
                paramCol.Add(new SqlDataParameter("@Action_id ", DbType.Int32, DBValue.ToDBInt32(externalAccountAction.ActionId)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(externalAccountAction.CreateDate)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    externalAccountAction.ExternalAccountActionId = DBValue.ToInt32(paramCol["@External_account_action_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }

        public int UpdateExternalAccountAction(ExternalAccountAction externalAccountAction)
        {
            return UpdateExternalAccountAction(externalAccountAction, null);
        }

        private int UpdateExternalAccountAction(ExternalAccountAction externalAccountAction, SqlInterface si)
        {
            int result = int.MinValue;
            string storedProcName = "es_update_external_account_action";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@External_account_action_id", DbType.Int32, DBValue.ToDBInt32(externalAccountAction.ExternalAccountActionId)));
                paramCol.Add(new SqlDataParameter("@External_account_id", DbType.Int32, DBValue.ToDBInt32(externalAccountAction.ExternalAccountId)));
                paramCol.Add(new SqlDataParameter("@Action_id ", DbType.Int32, DBValue.ToDBInt32(externalAccountAction.ActionId)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(externalAccountAction.CreateDate)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
        }

        public FoodAccount[] GetOnlineAccountByFoodAccountID(int id)
        {

            FoodAccount[] foodAccount = null;
            string storedProcName = "es_qsp_get_online_account_by_food_account_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            //bool newConnection = true;

            SqlInterface si = new SqlInterface(dataProvider, connectionString);



            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@foodAccountID", DbType.Int32, DBValue.ToDBInt32(id)));

                // open the connection
                si.Open();


                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    foodAccount = new FoodAccount[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            foodAccount[i] = LoadOnlineAccountsFromFoodAccount(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {

                // Always close connection.
                si.Close();

            }
            return foodAccount;
        }

        private FoodAccount LoadOnlineAccountsFromFoodAccount(DataRow row)
        {
            FoodAccount foodAccount = new FoodAccount();
            //foodAccount.OrganizationID = DBValue.ToInt32(row["organizationID"]);
            foodAccount.AccountID = DBValue.ToInt32(row["account_id"]);
            foodAccount.FulfAccountID = DBValue.ToInt32(row["fulf_account_id"]);
            foodAccount.AccountName = DBValue.ToString(row["account_name"]);
            foodAccount.FmID = DBValue.ToString(row["fm_id"]);
            foodAccount.SponsorName = DBValue.ToString(row["sponsor_name"]);
            return foodAccount;
        }

        public FoodAccount GetOnlineAccountByOnlineAccountID(int id)
        {

            FoodAccount foodAccount = null;
            string storedProcName = "es_qsp_get_online_account_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            //bool newConnection = true;

            SqlInterface si = new SqlInterface(dataProvider, connectionString);



            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@onlineAccountID", DbType.Int32, DBValue.ToDBInt32(id)));


                // open the connection
                si.Open();


                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        foodAccount = LoadOnlineAccountFromOnlineAccountID(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                // Always close connection.
                si.Close();

            }
            return foodAccount;
        }

        private FoodAccount LoadOnlineAccountFromOnlineAccountID(DataRow row)
        {
            FoodAccount foodAccount = new FoodAccount();
            foodAccount.BusinessDivisionID = DBValue.ToInt32(row["business_division_id"]);
            foodAccount.OrganizationID = DBValue.ToInt32(row["organization_id"]);
            foodAccount.AccountID = DBValue.ToInt32(row["account_id"]);
            foodAccount.FulfAccountID = DBValue.ToInt32(row["fulf_account_id"]);
            foodAccount.AccountName = DBValue.ToString(row["account_name"]);
            foodAccount.FmID = DBValue.ToString(row["fm_id"]);
            foodAccount.ManagedPWD = DBValue.ToString(row["manage_fundraiser_pwd"]);
            foodAccount.PostalAddressTypeID = DBValue.ToInt32(row["postal_address_type_id"]);
            foodAccount.PostalAddressID = DBValue.ToInt32(row["postal_address_id"]);
            foodAccount.Address1 = DBValue.ToString(row["address1"]);
            foodAccount.Address2 = DBValue.ToString(row["address2"]);
            foodAccount.City = DBValue.ToString(row["city"]);
            foodAccount.SubdivisionCode = DBValue.ToString(row["subdivision_code"]);
            foodAccount.Zip = DBValue.ToString(row["zip"]);
            foodAccount.Zip4 = DBValue.ToString(row["zip4"]);
            foodAccount.Country = DBValue.ToString(row["county"]);
            foodAccount.SponsorName = DBValue.ToString(row["sponsor_name"]);
            foodAccount.SponsorEmail = DBValue.ToString(row["sponsor_email"]);
            return foodAccount;
        }

        public FoodAccount GetFoodAccountByAccountId(int id)
        {
            FoodAccount foodAccount = null;
            string storedProcName = "es_qsp_get_food_account_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            //bool newConnection = true;

            SqlInterface si = new SqlInterface(dataProvider, connectionString);



            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@foodAccountID", DbType.Int32, DBValue.ToDBInt32(id)));


                // open the connection
                si.Open();


                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        foodAccount = LoadAccountFromFoodAccountID(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                // Always close connection.
                si.Close();

            }
            return foodAccount;
        }

        private FoodAccount LoadAccountFromFoodAccountID(DataRow row)
        {
            FoodAccount foodAccount = new FoodAccount();
            //foodAccount.BusinessDivisionID = DBValue.ToInt32(row["business_division_id"]);
            //foodAccount.OrganizationID = DBValue.ToInt32(row["organization_id"]);
            foodAccount.AccountID = DBValue.ToInt32(row["account_id"]);
            foodAccount.FulfAccountID = DBValue.ToInt32(row["fulf_account_id"]);
            foodAccount.AccountName = DBValue.ToString(row["account_name"]);
            foodAccount.ManagedPWD = DBValue.ToString(row["manage_fundraiser_pwd"]);
            foodAccount.FmID = DBValue.ToString(row["fm_id"]);
            foodAccount.PostalAddressTypeID = DBValue.ToInt32(row["postal_address_type_id"]);
            foodAccount.PostalAddressID = DBValue.ToInt32(row["postal_address_id"]);
            foodAccount.Address1 = DBValue.ToString(row["address1"]);
            foodAccount.Address2 = DBValue.ToString(row["address2"]);
            foodAccount.City = DBValue.ToString(row["city"]);
            foodAccount.SubdivisionCode = DBValue.ToString(row["subdivision_code"]);
            foodAccount.Zip = DBValue.ToString(row["zip"]);
            foodAccount.Zip4 = DBValue.ToString(row["zip4"]);
            foodAccount.Country = DBValue.ToString(row["county"]);
            foodAccount.SponsorName = DBValue.ToString(row["sponsor_name"]);
            foodAccount.SponsorEmail = DBValue.ToString(row["sponsor_email"]);
            foodAccount.Prefix = DBValue.ToString(row["prefix"]);
            foodAccount.UserID = DBValue.ToInt32(row["user_id"]);

            return foodAccount;
        }

        public void GetReservedAccount(FoodAccount foodAccount)
        {
            int result = int.MinValue;
            string storedProcName = "QSPpr_reserved_account_Assign";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@business_division_id", DbType.Int32, DBValue.ToDBInt32(1)));
                paramCol.Add(new SqlDataParameter("@prefix", DbType.String, DBValue.ToDBString(foodAccount.Prefix)));
                paramCol.Add(new SqlDataParameter("@clone_account_id", DbType.Int32, DBValue.ToInt32(foodAccount.AccountID)));
                paramCol.Add(new SqlDataParameter("@clone_fulf_account_id", DbType.Int32, DBValue.ToInt32(foodAccount.FulfAccountID)));
                paramCol.Add(new SqlDataParameter("@user_id", DbType.Int32, DBValue.ToInt32(foodAccount.UserID)));
                paramCol.Add(new SqlDataParameter("@out_account_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@out_fulf_account_id", DbType.Int32, ParameterDirection.Output));


                // open the connection
                si.Open();


                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    foodAccount.AccountID = DBValue.ToInt32(paramCol["@out_account_id"].Value);
                    foodAccount.FulfAccountID = DBValue.ToInt32(paramCol["@out_fulf_account_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }



            }
            finally
            {
                // Always close connection.
                si.Close();

            }

        }
        #endregion

        #region IPromotion
        private Seller LoadTopSeller(DataRow row)
        {
            Seller seller = new Seller();
            seller.SellerName = DBValue.ToString(row["supp_name"]);
            if (row.Table.Columns.Contains("email_address"))
                seller.EmailAddress = DBValue.ToString(row["email_address"]);
            seller.EventID = DBValue.ToInt32(row["event_id"]);
            seller.Quantity = DBValue.ToInt32(row["quantity"]);
            seller.Amount = (float)DBValue.ToDecimal(row["amount"]);
            seller.CreateDate = DBValue.ToDateTime(row["create_date"]);

            return seller;
        }
        public Seller[] GetTop3Sellers(int prizeID)
        {
            Seller[] top3Sellers = null;

            string storedProcName = "es_get_3_top_sellers";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@prize_id", DbType.Int32, DBValue.ToDBInt32(prizeID)));


                // open the connection
                si.Open();
                if (Convert.ToInt32(ConfigurationSettings.AppSettings["ITimeOut"]) == int.MinValue)
                {
                    si.SetTimeOut(90);
                }
                else
                {
                    si.SetTimeOut(Convert.ToInt32(ConfigurationSettings.AppSettings["ITimeOut"]));
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    top3Sellers = new Seller[3];

                    for (int i = 0; i < dt.Rows.Count && i < 3; i++)
                    {
                        // fill our objects
                        try
                        {
                            top3Sellers[i] = LoadTopSeller(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                // Always close connection.
                si.Close();

            }
            return top3Sellers;
        }

        public Seller GetCurrentParticipantMonthlySalesByPrizeID(int prizeID, int eventParticipationId)
        {
            Seller part_sales = null;

            string storedProcName = "es_get_current_participant_monthly_sales_by_prize_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@prize_id", DbType.Int32, DBValue.ToDBInt32(prizeID)));
                paramCol.Add(new SqlDataParameter("@event_participation_id", DbType.Int32, DBValue.ToDBInt32(eventParticipationId)));

                // open the connection
                si.Open();
                if (Convert.ToInt32(ConfigurationSettings.AppSettings["ITimeOut"]) == int.MinValue)
                {
                    si.SetTimeOut(90);
                }
                else
                {
                    si.SetTimeOut(Convert.ToInt32(ConfigurationSettings.AppSettings["ITimeOut"]));
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count != 0)
                {
                    try
                    {
                        part_sales = LoadTopSeller(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }
            }
            finally
            {
                // Always close connection.
                si.Close();

            }
            return part_sales;
        }

        #endregion

        #region Image Motivator
        public List<Reports.StatsBase> GetCampaignSupporters(Int32 EventID)
        {
            DataTable dt = null;
            List<Reports.StatsBase> result = new List<Reports.StatsBase>();
            List<Reports.ImageMotivatorStats> list = new List<Reports.ImageMotivatorStats>();
            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                SqlDataParameter sqlPam = CreateSqlDataParameter(EventID, "@event_id");
                paramCol.Add(sqlPam);
                dt = si.ExecuteFetchDataTable("es_rpt_campaign_supporter", CommandType.StoredProcedure, paramCol);
                if (dt != null && dt.Rows.Count > 0)
                {
                    DataTable dtDistinctFullname = dt.DefaultView.ToTable(true, new string[] { "fullname" });
                    if (dtDistinctFullname != null && dtDistinctFullname.Rows.Count > 0)
                    {
                        foreach (DataRow row in dtDistinctFullname.Rows)
                        {
                            list.Add(LoadImageMotivatorStats(row, dt));
                        }
                    }
                    //Sort the list by descending order of contribution amount
                    list.Sort();
                    for (int index = 0; index < list.Count; index++)
                    {
                        result.Add(list[index]);
                    }
                }
            }
            catch (Exception ex)
            {
                throw new SqlDataException("GetCampaignSupporters() errors", ex);
            }
            finally
            {
                si.Close();
            }
            return result;
        }

        public List<Reports.StatsBase> GetCampaignSupportersV2(Int32 EventID)
        {
            DataTable dt = null;
            List<Reports.StatsBase> result = new List<Reports.StatsBase>();
            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                SqlDataParameter sqlPam = CreateSqlDataParameter(EventID, "@event_id");
                paramCol.Add(sqlPam);
                dt = si.ExecuteFetchDataTable("es_rpt_campaign_supporter", CommandType.StoredProcedure, paramCol);
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        result.Add(LoadImageMotivator(row));
                    }
                }
            }
            catch (Exception ex)
            {
                throw new SqlDataException("GetCampaignSupporters() errors", ex);
            }
            finally
            {
                si.Close();
            }
            return result;
        }

        public List<Reports.StatsBase> GetTopRandomImageMotivatorByPartnerID(Int32 PartnerID)
        {
            DataTable dt = null;
            List<Reports.StatsBase> result = new List<Reports.StatsBase>();
            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                SqlDataParameter sqlPam = CreateSqlDataParameter(PartnerID, "@partner_id");
                paramCol.Add(sqlPam);
                dt = si.ExecuteFetchDataTable("es_get_top_random_image_motivator_by_partner_id", CommandType.StoredProcedure, paramCol);
                if (dt != null && dt.Rows.Count > 0)
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        result.Add(LoadImageMotivator(row));
                    }
                }
            }
            catch (Exception ex)
            {
                throw new SqlDataException("GetTopRandomImageMotivatorByPartnerID() errors", ex);
            }
            finally
            {
                si.Close();
            }
            return result;
        }

        private Reports.ImageMotivatorStats LoadImageMotivatorStats(DataRow row, DataTable dtSupporter)
        {
            Reports.ImageMotivatorStats im_stats = new Reports.ImageMotivatorStats();
            string fullname = DBValue.ToString(row["fullname"]);

            //1) Store the fullname
            im_stats.FullName = System.Globalization.CultureInfo.InvariantCulture.TextInfo.ToTitleCase(fullname);
            fullname = fullname.Replace("'", "''");

            //2) Calculate the total amount for this person 
            im_stats.TotalAmount = DBValue.ToDecimal(dtSupporter.Compute("SUM(AmountTotal)", "fullname='" + fullname + "'"));

            //3) Get the max(createdate)
            im_stats.CreateDate = DBValue.ToDateTime(dtSupporter.Compute("MAX(create_date)", "fullname='" + fullname + "'"));

            //4) Get the ImageMotivationComment based on #3 createdate
            DataRow[] rows = dtSupporter.Select("fullname='" + fullname + "' and create_date=#" + im_stats.CreateDate.ToString("MM/dd/yyyy HH:mm:ss.fff", System.Globalization.CultureInfo.InvariantCulture) + "#");
            if (rows.Length == 0) throw new SqlDataException("LoadImageMotivatorStats() error with fullname='" + fullname + "' and im_stats.CreateDate=" + im_stats.CreateDate.ToString("MM/dd/yyyy HH:mm:ss.fff", System.Globalization.CultureInfo.InvariantCulture));
            im_stats.Comment = DBValue.ToString(rows[0]["ImageMotivationComment"]);
            return im_stats;
        }

        private Reports.ImageMotivatorStats LoadImageMotivator(DataRow row)
        {
            Reports.ImageMotivatorStats im_stats = new Reports.ImageMotivatorStats();
            string fullname = DBValue.ToString(row["fullname"]);
            im_stats.FullName = System.Globalization.CultureInfo.InvariantCulture.TextInfo.ToTitleCase(fullname);
            im_stats.TotalAmount = DBValue.ToDecimal(row["AmountTotal"]);
            im_stats.CreateDate = DBValue.ToDateTime(row["create_date"]);
            im_stats.Comment = DBValue.ToString(row["ImageMotivationComment"]);
            return im_stats;
        }
        #endregion

        #region Users Methods

        internal UserIntoDatabaseReturnValue InsertOnlyUser(SqlInterface si, 
            String culture_code, 
            Int32 opt_status_id, 
            String username,
            String first_name, 
            String last_name, 
            String email_address, 
            int partnerID, 
            String password,
            int memberId,
            int coppaMonth, 
            int coppaYear, 
            bool agreeToTermsServices,
            ref Int32 user_id)
        {

            int rowAffected = 0;

            bool internalTransaction = true;
            string storedProcName = "es_create_only_user";


            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
                si.Open();
            }
            else
            {
                internalTransaction = false;
            }

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@culture_code", DbType.String, DBValue.ToDBString(culture_code)));
                paramCol.Add(new SqlDataParameter("@opt_status_id", DbType.Int32, DBValue.ToDBInt32(opt_status_id)));
                paramCol.Add(new SqlDataParameter("@username", DbType.String, DBValue.ToDBString(username)));
                paramCol.Add(new SqlDataParameter("@first_name", DbType.String, DBValue.ToDBString(first_name)));
                paramCol.Add(new SqlDataParameter("@last_name", DbType.String, DBValue.ToDBString(last_name)));
                paramCol.Add(new SqlDataParameter("@email_address", DbType.String, DBValue.ToDBString(email_address)));
                paramCol.Add(new SqlDataParameter("@password", DbType.String, DBValue.ToDBString(password)));
                paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32(partnerID)));
                paramCol.Add(new SqlDataParameter("@member_id", DbType.Int32, DBValue.ToDBInt32(memberId)));
                paramCol.Add(new SqlDataParameter("@coppa_month", DbType.Int32, DBValue.ToDBInt32(coppaMonth)));
                paramCol.Add(new SqlDataParameter("@coppa_year", DbType.Int32, DBValue.ToDBInt32(coppaYear)));
                paramCol.Add(new SqlDataParameter("@agree_term_services", DbType.Byte, DBValue.ToByte(agreeToTermsServices ? (byte)1 : (byte)0)));  
                paramCol.Add(new SqlDataParameter("@user_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@return", DbType.Int32, ParameterDirection.ReturnValue));

                if (internalTransaction)
                {
                    si.BeginTransaction();
                }
                
                // Fetch and store into database.
                rowAffected = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                int returnValue = DBValue.ToInt32(paramCol["@return"].Value);

                // fill our objects
                try
                {
                    user_id = DBValue.ToInt32(paramCol["@user_id"].Value);
                }
                catch (System.Exception ex)
                {
                    throw new ApplicationException(ex.ToString());
                }


                // Member exists already by email address
                if (returnValue == -1)
                    return UserIntoDatabaseReturnValue.UNKNOWN_ERROR;
                else if (returnValue == -3)
                    return UserIntoDatabaseReturnValue.ALREADY_EXISTS;

                // Commit our transaction.
                if (internalTransaction)
                    si.Commit();
            }
            catch (Exception ex)
            {
                // Rollback on error.
                if (internalTransaction)
                    si.Rollback();

                // throw exception
                throw new ESubsGlobalException("InsertUser", ex);
            }
            finally
            {
                if (internalTransaction)
                {
                    si.Close();
                }
            }
            return UserIntoDatabaseReturnValue.OK;
        }

        private UpdateMemberHierarchyUnsubscribeReturnValue UpdateUserUnsubscribeInMemberTable(SqlInterface si, int member_id, bool unsubscribe)
        {
            bool useLocalTransaction = false;
            string storedProcName = "es_update_user_unsubscribe";

            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
                useLocalTransaction = true;
            }

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();

                paramCol.Add(new SqlDataParameter("@member_id", DbType.Int32, DBValue.ToDBInt32(member_id)));
                paramCol.Add(new SqlDataParameter("@unsubscribe", DbType.Boolean, DBValue.ToDBBoolean(unsubscribe)));
                paramCol.Add(new SqlDataParameter("@return", DbType.Int32, ParameterDirection.ReturnValue));

                if (useLocalTransaction)
                {
                    si.Open();
                    si.BeginTransaction();
                }

                // Fetch and store into database.
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                int returnValue = DBValue.ToInt32(paramCol["@return"].Value);

                // Member exists already by email address
                if (returnValue == -1)
                    return UpdateMemberHierarchyUnsubscribeReturnValue.UNSUBSCRIBE_MEMBER_FAILED;

                // Commit our transaction.
                if (useLocalTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useLocalTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return UpdateMemberHierarchyUnsubscribeReturnValue.OK;	// no error
        }



        public UpdateMemberHierarchyUnsubscribeReturnValue UpdateUserUnsubscribeInMemberTable(int member_id, bool unsubscribe)
        {
            return UpdateUserUnsubscribeInMemberTable(null, member_id, unsubscribe);
        }

        #endregion

        #region Direct Mail

        public List<DirectMailInfo> GetDirectMailInfo()
        {
            List<DirectMail.Object.DirectMailInfo> directMails = new List<GA.BDC.Core.ESubsGlobal.DirectMail.Object.DirectMailInfo>();

            bool useTransaction = false;
            string storedProcName = "es_get_direct_mail_info";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                si.Open();
                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, null);

                foreach (DataRow row in dt.Rows)
                {
                    // fill our objects
                    try
                    {
                        int direct_mail_info_id = DBValue.ToInt32(row["direct_mail_info_id"]);
                        string message = DBValue.ToString(row["message"]);
                        string image_url = DBValue.ToString(row["image_url"]);
                        bool moderated = DBValue.ToBoolean(row["moderated"]);
                        int direct_mail_status = DBValue.ToInt32(row["direct_mail_status"]);
                        DateTime create_date = DBValue.ToDateTime(row["create_date"]);
                        int event_participation_id = DBValue.ToInt32(row["event_participation_id"]);
                        int member_hierarchy_id = DBValue.ToInt32(row["member_hierarchy_id"]);
                        string documentPath = DBValue.ToString(row["document_path"]);

                        GA.BDC.Core.ESubsGlobal.DirectMail.Object.DirectMailInfo directMail = new GA.BDC.Core.ESubsGlobal.DirectMail.Object.DirectMailInfo();
                        directMail.DirectMailInfoId = direct_mail_info_id;
                        directMail.Message = message;
                        directMail.ImageUrl = image_url;
                        directMail.Moderated = moderated;
                        directMail.DirectMailStatus = direct_mail_status;
                        directMail.CreateDate = create_date;
                        directMail.EventParticipationId = event_participation_id;
                        directMail.MemberHierarchyId = member_hierarchy_id;
                        directMail.DocumentPath = documentPath;

                        directMails.Add(directMail);
                    }
                    catch (System.Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return directMails;
        }

        public List<DirectMailInfo> GetDirectMailInfosReadyToBeProcessed()
        {
            List<DirectMail.Object.DirectMailInfo> directMails = new List<GA.BDC.Core.ESubsGlobal.DirectMail.Object.DirectMailInfo>();

            bool useTransaction = false;
            string storedProcName = "es_get_direct_mail_info_ready_to_be_processed";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                si.Open();
                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, null);

                foreach (DataRow row in dt.Rows)
                {
                    // fill our objects
                    try
                    {
                        int direct_mail_info_id = DBValue.ToInt32(row["direct_mail_info_id"]);
                        string message = DBValue.ToString(row["message"]);
                        string image_url = DBValue.ToString(row["image_url"]);
                        bool moderated = DBValue.ToBoolean(row["moderated"]);
                        int direct_mail_status = DBValue.ToInt32(row["direct_mail_status"]);
                        DateTime create_date = DBValue.ToDateTime(row["create_date"]);
                        int event_participation_id = DBValue.ToInt32(row["event_participation_id"]);
                        int member_hierarchy_id = DBValue.ToInt32(row["member_hierarchy_id"]);
                        string documentPath = DBValue.ToString(row["document_path"]);

                        GA.BDC.Core.ESubsGlobal.DirectMail.Object.DirectMailInfo directMail = new GA.BDC.Core.ESubsGlobal.DirectMail.Object.DirectMailInfo();
                        directMail.DirectMailInfoId = direct_mail_info_id;
                        directMail.Message = message;
                        directMail.ImageUrl = image_url;
                        directMail.Moderated = moderated;
                        directMail.DirectMailStatus = direct_mail_status;
                        directMail.CreateDate = create_date;
                        directMail.EventParticipationId = event_participation_id;
                        directMail.MemberHierarchyId = member_hierarchy_id;
                        directMail.DocumentPath = documentPath;

                        directMails.Add(directMail);
                    }
                    catch (System.Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return directMails;
        }

        public DirectMail.Object.DirectMailInfo GetDirectMailInfoById(int directMailInfoId)
        {
            DirectMail.Object.DirectMailInfo directMail = null;

            bool useTransaction = false;
            string storedProcName = "es_get_direct_mail_info_by_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                si.Open();
                if (useTransaction)
                    si.BeginTransaction();

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@direct_mail_info_id", DbType.Int32, DBValue.ToDBInt32(directMailInfoId)));

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    DataRow row = dt.Rows[0];

                    int direct_mail_info_id = DBValue.ToInt32(row["direct_mail_info_id"]);
                    string message = DBValue.ToString(row["message"]);
                    string image_url = DBValue.ToString(row["image_url"]);
                    bool moderated = DBValue.ToBoolean(row["moderated"]);
                    int direct_mail_status = DBValue.ToInt16(row["direct_mail_status"]);
                    DateTime create_date = DBValue.ToDateTime(row["create_date"]);
                    int event_participation_id = DBValue.ToInt32(row["event_participation_id"]);
                    int member_hierarchy_id = DBValue.ToInt32(row["member_hierarchy_id"]);
                    string documentPath = DBValue.ToString(row["document_path"]);

                    directMail = new GA.BDC.Core.ESubsGlobal.DirectMail.Object.DirectMailInfo();
                    directMail.DirectMailInfoId = direct_mail_info_id;
                    directMail.Message = message;
                    directMail.ImageUrl = image_url;
                    directMail.Moderated = moderated;
                    directMail.DirectMailStatus = direct_mail_status;
                    directMail.DocumentPath = documentPath;
                    directMail.CreateDate = create_date;
                    directMail.EventParticipationId = event_participation_id;
                    directMail.MemberHierarchyId = member_hierarchy_id;

                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return directMail;
        }

        public List<DirectMailInfo> GetDirectMailInfoSent(int eventParticipationId)
        {
            List<DirectMailInfo> directMails = new List<DirectMailInfo>();

            bool useTransaction = false;
            string storedProcName = "es_get_direct_mail_info_sent";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                si.Open();
                if (useTransaction)
                    si.BeginTransaction();

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_participation_id", DbType.Int32, DBValue.ToDBInt32(eventParticipationId)));

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                 // fill our objects
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {

                        int direct_mail_info_id = DBValue.ToInt32(row["direct_mail_info_id"]);
                        string message = DBValue.ToString(row["message"]);
                        string image_url = DBValue.ToString(row["image_url"]);
                        bool moderated = DBValue.ToBoolean(row["moderated"]);
                        int direct_mail_status = DBValue.ToInt16(row["direct_mail_status"]);
                        DateTime create_date = DBValue.ToDateTime(row["create_date"]);
                        int event_participation_id = DBValue.ToInt32(row["event_participation_id"]);
                        int member_hierarchy_id = DBValue.ToInt32(row["member_hierarchy_id"]);
                        string documentPath = DBValue.ToString(row["document_path"]);

                        DirectMailInfo directMail = new DirectMailInfo();
                        directMail.DirectMailInfoId = direct_mail_info_id;
                        directMail.Message = message;
                        directMail.ImageUrl = image_url;
                        directMail.Moderated = moderated;
                        directMail.DirectMailStatus = direct_mail_status;
                        directMail.DocumentPath = documentPath;
                        directMail.CreateDate = create_date;
                        directMail.EventParticipationId = event_participation_id;
                        directMail.MemberHierarchyId = member_hierarchy_id;

                        directMails.Add(directMail);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return directMails;
        }

        public List<DirectMail.Object.DirectMailInfo> GetDirectMailInfoByEventParticipationId(int eventParticipationId)
        {
            List<DirectMail.Object.DirectMailInfo> directMails = 
                new List<GA.BDC.Core.ESubsGlobal.DirectMail.Object.DirectMailInfo>();

            bool useTransaction = false;
            string storedProcName = "es_get_direct_mail_info_by_sender_ep_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                si.Open();
                if (useTransaction)
                    si.BeginTransaction();

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@sender_event_participation_id", DbType.Int32, DBValue.ToDBInt32(eventParticipationId)));

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                foreach (DataRow row in dt.Rows)
                {
                    // fill our objects
                    try
                    {
                        int direct_mail_info_id = DBValue.ToInt32(row["direct_mail_info_id"]);
                        string message = DBValue.ToString(row["message"]);
                        string image_url = DBValue.ToString(row["image_url"]);
                        bool moderated = DBValue.ToBoolean(row["moderated"]);
                        int direct_mail_status = DBValue.ToInt16(row["direct_mail_status"]);
                        DateTime create_date = DBValue.ToDateTime(row["create_date"]);
                        int event_participation_id = DBValue.ToInt32(row["event_participation_id"]);
                        int member_hierarchy_id = DBValue.ToInt32(row["member_hierarchy_id"]);
                        string documentPath = DBValue.ToString(row["document_path"]);

                        GA.BDC.Core.ESubsGlobal.DirectMail.Object.DirectMailInfo directMail = 
                            new GA.BDC.Core.ESubsGlobal.DirectMail.Object.DirectMailInfo();
                        directMail.DirectMailInfoId = direct_mail_info_id;
                        directMail.Message = message;
                        directMail.ImageUrl = image_url;
                        directMail.Moderated = moderated;
                        directMail.DirectMailStatus = direct_mail_status;
                        directMail.DocumentPath = documentPath;
                        directMail.CreateDate = create_date;
                        directMail.MemberHierarchyId = member_hierarchy_id;
                        directMail.EventParticipationId = event_participation_id;

                        directMails.Add(directMail);
                    }
                    catch (System.Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return directMails;
        }

        public List<DirectMail.Object.DirectMailInfo> GetDirectMailInfoBySenderEventParticipationId(int senderEventParticipationId)
        {
            List<DirectMail.Object.DirectMailInfo> directMails = new List<GA.BDC.Core.ESubsGlobal.DirectMail.Object.DirectMailInfo>();

            bool useTransaction = false;
            string storedProcName = "es_get_direct_mail_info_by_sender_ep_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                si.Open();
                if (useTransaction)
                    si.BeginTransaction();

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@sender_event_participation_id", DbType.Int32, DBValue.ToDBInt32(senderEventParticipationId)));

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                foreach (DataRow row in dt.Rows)
                {
                    // fill our objects
                    try
                    {
                        int direct_mail_info_id = DBValue.ToInt32(row["direct_mail_info_id"]);
                        string message = DBValue.ToString(row["message"]);
                        string image_url = DBValue.ToString(row["image_url"]);
                        bool moderated = DBValue.ToBoolean(row["moderated"]);
                        int direct_mail_status = DBValue.ToInt32(row["direct_mail_status"]);
                        DateTime create_date = DBValue.ToDateTime(row["create_date"]);
                        int event_participation_id = DBValue.ToInt32(row["event_participation_id"]);
                        int member_hierarchy_id = DBValue.ToInt32(row["member_hierarchy_id"]);
                        string documentPath = DBValue.ToString(row["document_path"]);

                        GA.BDC.Core.ESubsGlobal.DirectMail.Object.DirectMailInfo directMail = new GA.BDC.Core.ESubsGlobal.DirectMail.Object.DirectMailInfo();
                        directMail.DirectMailInfoId = direct_mail_info_id;
                        directMail.Message = message;
                        directMail.ImageUrl = image_url;
                        directMail.Moderated = moderated;
                        directMail.DirectMailStatus = direct_mail_status;
                        directMail.CreateDate = create_date;
                        directMail.DocumentPath = documentPath;
                        directMail.EventParticipationId = event_participation_id;
                        directMail.MemberHierarchyId = member_hierarchy_id;

                        directMails.Add(directMail);
                    }
                    catch (System.Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }
                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return directMails;
        }

        internal bool InsertDirectMailInfo(SqlInterface si, DirectMail.Object.DirectMailInfo directMail)
        {

            int rowAffected = 0;

            bool internalTransaction = true;
            string storedProcName = "es_insert_direct_mail_info";


            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
                si.Open();
            }
            else
            {
                internalTransaction = false;
            }

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@message", DbType.String, DBValue.ToDBString(directMail.Message)));
                paramCol.Add(new SqlDataParameter("@image_url", DbType.String, DBValue.ToDBString(directMail.ImageUrl)));
                paramCol.Add(new SqlDataParameter("@moderated", DbType.Boolean, DBValue.ToDBBoolean(directMail.Moderated)));
                paramCol.Add(new SqlDataParameter("@direct_mail_status", DbType.String, DBValue.ToDBInt16(directMail.DirectMailStatus)));
                paramCol.Add(new SqlDataParameter("@create_date", DbType.DateTime, DBValue.ToDBDateTime(directMail.CreateDate)));
                paramCol.Add(new SqlDataParameter("@document_path", DbType.String, DBValue.ToDBString(directMail.DocumentPath)));
                paramCol.Add(new SqlDataParameter("@event_participation_id", DbType.Int32, DBValue.ToDBInt32(directMail.EventParticipationId)));
                paramCol.Add(new SqlDataParameter("@member_hierarchy_id", DbType.Int32, DBValue.ToDBInt32(directMail.MemberHierarchyId)));
                paramCol.Add(new SqlDataParameter("@direct_mail_info_id", DbType.Int32, ParameterDirection.Output));
                //paramCol.Add(new SqlDataParameter("@return", DbType.Int32, ParameterDirection.ReturnValue));

                if (internalTransaction)
                {
                    si.BeginTransaction();
                }

                // Fetch and store into database.
                rowAffected = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    directMail.DirectMailInfoId = DBValue.ToInt32(paramCol["@direct_mail_info_id"].Value);
                }
                catch (System.Exception ex)
                {
                    throw new ApplicationException(ex.ToString());
                }

                // Commit our transaction.
                if (internalTransaction)
                    si.Commit();
            }
            catch (Exception ex)
            {
                // Rollback on error.
                if (internalTransaction)
                    si.Rollback();

                // throw exception
                throw new ESubsGlobalException("InsertDirectMailInfo", ex);
            }
            finally
            {
                if (internalTransaction)
                {
                    si.Close();
                }
            }

            return true;
        }


        internal bool UpdateDirectMailInfo(SqlInterface si, DirectMail.Object.DirectMailInfo directMail)
        {

            int rowAffected = 0;

            bool internalTransaction = true;
            string storedProcName = "es_update_direct_mail_info";


            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
                si.Open();
            }
            else
            {
                internalTransaction = false;
            }

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@direct_mail_info_id", DbType.Int32, DBValue.ToDBInt32(directMail.DirectMailInfoId)));
                paramCol.Add(new SqlDataParameter("@message", DbType.String, DBValue.ToDBString(directMail.Message)));
                paramCol.Add(new SqlDataParameter("@image_url", DbType.String, DBValue.ToDBString(directMail.ImageUrl)));
                paramCol.Add(new SqlDataParameter("@moderated", DbType.Boolean, DBValue.ToDBBoolean(directMail.Moderated)));
                paramCol.Add(new SqlDataParameter("@direct_mail_status", DbType.String, DBValue.ToDBInt16(directMail.DirectMailStatus)));
                paramCol.Add(new SqlDataParameter("@create_date", DbType.DateTime, DBValue.ToDBDateTime(directMail.CreateDate)));
                paramCol.Add(new SqlDataParameter("@document_path", DbType.String, DBValue.ToDBString(directMail.DocumentPath)));
                paramCol.Add(new SqlDataParameter("@event_participation_id", DbType.Int32, DBValue.ToDBInt32(directMail.EventParticipationId)));
                paramCol.Add(new SqlDataParameter("@member_hierarchy_id", DbType.Int32, DBValue.ToDBInt32(directMail.MemberHierarchyId)));
                //paramCol.Add(new SqlDataParameter("@return", DbType.Int32, ParameterDirection.ReturnValue));

                if (internalTransaction)
                {
                    si.BeginTransaction();
                }

                // Fetch and store into database.
                rowAffected = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // Commit our transaction.
                if (internalTransaction)
                    si.Commit();
            }
            catch (Exception ex)
            {
                // Rollback on error.
                if (internalTransaction)
                    si.Rollback();

                // throw exception
                throw new ESubsGlobalException("UpdateDirectMailInfo", ex);
            }
            finally
            {
                if (internalTransaction)
                {
                    si.Close();
                }
            }

            return true;
        }

        internal bool DeleteDirectMailInfo(SqlInterface si, DirectMail.Object.DirectMailInfo directMail)
        {

            int rowAffected = 0;

            bool internalTransaction = true;
            string storedProcName = "es_delete_direct_mail_info";


            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
                si.Open();
            }
            else
            {
                internalTransaction = false;
            }

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@direct_mail_info_id", DbType.Int32, DBValue.ToDBInt32(directMail.DirectMailInfoId)));
                //paramCol.Add(new SqlDataParameter("@return", DbType.Int32, ParameterDirection.ReturnValue));

                if (internalTransaction)
                {
                    si.BeginTransaction();
                }

                // Fetch and store into database.
                rowAffected = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // Commit our transaction.
                if (internalTransaction)
                    si.Commit();
            }
            catch (Exception ex)
            {
                // Rollback on error.
                if (internalTransaction)
                    si.Rollback();

                // throw exception
                throw new ESubsGlobalException("UpdateDirectMailInfo", ex);
            }
            finally
            {
                if (internalTransaction)
                {
                    si.Close();
                }
            }

            return true;
        }


        public List<DirectMail.Object.DirectMail> GetDirectMail()
        {
            List<DirectMail.Object.DirectMail> directMails = new List<GA.BDC.Core.ESubsGlobal.DirectMail.Object.DirectMail>();

            bool useTransaction = false;
            string storedProcName = "es_get_direct_mail";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                si.Open();
                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, null);

                foreach (DataRow row in dt.Rows)
                {
                    // fill our objects
                    try
                    {
                        int direct_mail_id = DBValue.ToInt32(row["direct_mail_id"]);
                        int direct_mail_info_id = DBValue.ToInt32(row["direct_mail_info_id"]);
                        int direct_mail_status = DBValue.ToInt32(row["direct_mail_status"]);
                        DateTime create_date = DBValue.ToDateTime(row["create_date"]);
                        int event_participation_id = DBValue.ToInt32(row["event_participation_id"]);
                        int member_hierarchy_id = DBValue.ToInt32(row["member_hierarchy_id"]);
                        int postal_address_id = DBValue.ToInt32(row["postal_address_id"]);

                        GA.BDC.Core.ESubsGlobal.DirectMail.Object.DirectMail directMail = new GA.BDC.Core.ESubsGlobal.DirectMail.Object.DirectMail();
                        directMail.DirectMailId = direct_mail_id;
                        directMail.DirectMailInfoId = direct_mail_info_id;
                        directMail.DirectMailStatus = direct_mail_status;
                        directMail.CreateDate = create_date;
                        directMail.EventParticipationId = event_participation_id;
                        directMail.MemberHierarchyId = member_hierarchy_id;
                        directMail.PostalAddressId = postal_address_id;

                        directMails.Add(directMail);
                    }
                    catch (System.Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return directMails;
        }

        public List<DirectMail.Object.DirectMail> GetDirectMailsByDirectMailInfoId(int directMailInfoId)
        {
            List<DirectMail.Object.DirectMail> directMails = new List<GA.BDC.Core.ESubsGlobal.DirectMail.Object.DirectMail>();

            bool useTransaction = false;
            string storedProcName = "es_get_direct_mail_by_direct_mail_info_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                si.Open();
                if (useTransaction)
                    si.BeginTransaction();

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@direct_mail_info_id", DbType.Int32, DBValue.ToDBInt32(directMailInfoId)));

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                foreach (DataRow row in dt.Rows)
                {
                    // fill our objects
                    try
                    {
                        int direct_mail_id = DBValue.ToInt32(row["direct_mail_id"]);
                        int direct_mail_info_id = DBValue.ToInt32(row["direct_mail_info_id"]);
                        int direct_mail_status = DBValue.ToInt32(row["direct_mail_status"]);
                        DateTime create_date = DBValue.ToDateTime(row["create_date"]);
                        int event_participation_id = DBValue.ToInt32(row["event_participation_id"]);
                        int member_hierarchy_id = DBValue.ToInt32(row["member_hierarchy_id"]);
                        int postal_address_id = DBValue.ToInt32(row["postal_address_id"]);

                        GA.BDC.Core.ESubsGlobal.DirectMail.Object.DirectMail directMail = new GA.BDC.Core.ESubsGlobal.DirectMail.Object.DirectMail();
                        directMail.DirectMailId = direct_mail_id;
                        directMail.DirectMailInfoId = direct_mail_info_id;
                        directMail.DirectMailStatus = direct_mail_status;
                        directMail.CreateDate = create_date;
                        directMail.EventParticipationId = event_participation_id;
                        directMail.MemberHierarchyId = member_hierarchy_id;
                        directMail.PostalAddressId = postal_address_id;

                        directMails.Add(directMail);
                    }
                    catch (System.Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return directMails;
        }

        public DirectMail.Object.DirectMail GetDirectMailById(int directMailId)
        {
            DirectMail.Object.DirectMail directMail = null;

            bool useTransaction = false;
            string storedProcName = "es_get_direct_mail_by_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                si.Open();
                if (useTransaction)
                    si.BeginTransaction();

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@direct_mail_id", DbType.Int32, DBValue.ToDBInt32(directMailId)));

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    DataRow row = dt.Rows[0];

                    int direct_mail_id = DBValue.ToInt32(row["direct_mail_id"]);
                    int direct_mail_info_id = DBValue.ToInt32(row["direct_mail_info_id"]);
                    int direct_mail_status = DBValue.ToInt16(row["direct_mail_status"]);
                    DateTime create_date = DBValue.ToDateTime(row["create_date"]);
                    int event_participation_id = DBValue.ToInt32(row["event_participation_id"]);
                    int member_hierarchy_id = DBValue.ToInt32(row["member_hierarchy_id"]);
                    int postal_address_id = DBValue.ToInt32(row["postal_address_id"]);

                    directMail = new GA.BDC.Core.ESubsGlobal.DirectMail.Object.DirectMail();
                    directMail.DirectMailId = direct_mail_id;
                    directMail.DirectMailInfoId = direct_mail_info_id;
                    directMail.DirectMailStatus = direct_mail_status;
                    directMail.CreateDate = create_date;
                    directMail.EventParticipationId = event_participation_id;
                    directMail.MemberHierarchyId = member_hierarchy_id;
                    directMail.PostalAddressId = postal_address_id;

                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return directMail;
        }

        public List<DirectMail.Object.DirectMail> GetDirectMailByDirectMailInfoId(int directMailInfoId)
        {
            List<DirectMail.Object.DirectMail> directMails =
                new List<GA.BDC.Core.ESubsGlobal.DirectMail.Object.DirectMail>();

            bool useTransaction = false;
            string storedProcName = "es_get_direct_mail_by_direct_mail_info_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                si.Open();
                if (useTransaction)
                    si.BeginTransaction();

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@direct_mail_info_id", DbType.Int32, DBValue.ToDBInt32(directMailInfoId)));

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        int direct_mail_id = DBValue.ToInt32(row["direct_mail_id"]);
                        int direct_mail_info_id = DBValue.ToInt32(row["direct_mail_info_id"]);
                        int direct_mail_status = DBValue.ToInt16(row["direct_mail_status"]);
                        DateTime create_date = DBValue.ToDateTime(row["create_date"]);
                        int event_participation_id = DBValue.ToInt32(row["event_participation_id"]);
                        int member_hierarchy_id = DBValue.ToInt32(row["member_hierarchy_id"]);
                        int postal_address_id = DBValue.ToInt32(row["postal_address_id"]);

                        GA.BDC.Core.ESubsGlobal.DirectMail.Object.DirectMail directMail =
                            new GA.BDC.Core.ESubsGlobal.DirectMail.Object.DirectMail();
                        directMail.DirectMailId = direct_mail_id;
                        directMail.DirectMailInfoId = direct_mail_info_id;
                        directMail.DirectMailStatus = direct_mail_status;
                        directMail.CreateDate = create_date;
                        directMail.EventParticipationId = event_participation_id;
                        directMail.MemberHierarchyId = member_hierarchy_id;
                        directMail.PostalAddressId = postal_address_id;

                        directMails.Add(directMail);
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return directMails;
        }

        public List<DirectMail.Object.DirectMail> GetDirectMailSent(int eventParticipationId)
        {
            List<DirectMail.Object.DirectMail> directMails = new List<GA.BDC.Core.ESubsGlobal.DirectMail.Object.DirectMail>();

            bool useTransaction = false;
            string storedProcName = "es_get_direct_mail_sent";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                si.Open();
                if (useTransaction)
                    si.BeginTransaction();

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_participation_id", DbType.Int32, DBValue.ToDBInt32(eventParticipationId)));

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                foreach (DataRow row in dt.Rows)
                {
                    // fill our objects
                    try
                    {
                        int direct_mail_id = DBValue.ToInt32(row["direct_mail_id"]);
                        int direct_mail_info_id = DBValue.ToInt32(row["direct_mail_info_id"]);
                        int direct_mail_status = DBValue.ToInt32(row["direct_mail_status"]);
                        DateTime create_date = DBValue.ToDateTime(row["create_date"]);
                        int event_participation_id = DBValue.ToInt32(row["event_participation_id"]);
                        int member_hierarchy_id = DBValue.ToInt32(row["member_hierarchy_id"]);
                        int postal_address_id = DBValue.ToInt32(row["postal_address_id"]);

                        GA.BDC.Core.ESubsGlobal.DirectMail.Object.DirectMail directMail = new GA.BDC.Core.ESubsGlobal.DirectMail.Object.DirectMail();
                        directMail.DirectMailId = direct_mail_id;
                        directMail.DirectMailInfoId = direct_mail_info_id;
                        directMail.DirectMailStatus = direct_mail_status;
                        directMail.CreateDate = create_date;
                        directMail.EventParticipationId = event_participation_id;
                        directMail.MemberHierarchyId = member_hierarchy_id;
                        directMail.PostalAddressId = postal_address_id;

                        directMails.Add(directMail);
                    }
                    catch (System.Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return directMails;
        }

        internal bool InsertDirectMail(SqlInterface si, DirectMail.Object.DirectMail directMail)
        {

            int rowAffected = 0;

            bool internalTransaction = true;
            string storedProcName = "es_insert_direct_mail";


            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
                si.Open();
            }
            else
            {
                internalTransaction = false;
            }

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@direct_mail_info_id", DbType.Int32, DBValue.ToDBInt32(directMail.DirectMailInfoId)));
                paramCol.Add(new SqlDataParameter("@direct_mail_status", DbType.Int16, DBValue.ToDBInt16(directMail.DirectMailStatus)));
                paramCol.Add(new SqlDataParameter("@event_participation_id", DbType.Int32, DBValue.ToDBInt32(directMail.EventParticipationId)));
                paramCol.Add(new SqlDataParameter("@member_hierarchy_id", DbType.Int32, DBValue.ToDBInt32(directMail.MemberHierarchyId)));
                paramCol.Add(new SqlDataParameter("@postal_address_id", DbType.Int32, DBValue.ToDBInt32(directMail.PostalAddressId)));
                paramCol.Add(new SqlDataParameter("@create_date", DbType.DateTime, DBValue.ToDBDateTime(directMail.CreateDate)));
                paramCol.Add(new SqlDataParameter("@direct_mail_id", DbType.Int32, ParameterDirection.Output));
                //paramCol.Add(new SqlDataParameter("@return", DbType.Int32, ParameterDirection.ReturnValue));

                if (internalTransaction)
                {
                    si.BeginTransaction();
                }

                // Fetch and store into database.
                rowAffected = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    directMail.DirectMailId = DBValue.ToInt32(paramCol["@direct_mail_id"].Value);
                }
                catch (System.Exception ex)
                {
                    throw new ApplicationException(ex.ToString());
                }

                // Commit our transaction.
                if (internalTransaction)
                    si.Commit();
            }
            catch (Exception ex)
            {
                // Rollback on error.
                if (internalTransaction)
                    si.Rollback();

                // throw exception
                throw new ESubsGlobalException("InsertDirectMail", ex);
            }
            finally
            {
                if (internalTransaction)
                {
                    si.Close();
                }
            }

            return true;
        }


        internal bool UpdateDirectMail(SqlInterface si, DirectMail.Object.DirectMail directMail)
        {

            int rowAffected = 0;

            bool internalTransaction = true;
            string storedProcName = "es_update_direct_mail";


            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
                si.Open();
            }
            else
            {
                internalTransaction = false;
            }

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@direct_mail_id", DbType.Int32, DBValue.ToDBInt32(directMail.DirectMailId)));
                paramCol.Add(new SqlDataParameter("@direct_mail_info_id", DbType.Int32, DBValue.ToDBInt32(directMail.DirectMailInfoId)));
                paramCol.Add(new SqlDataParameter("@direct_mail_status", DbType.String, DBValue.ToDBInt16(directMail.DirectMailStatus)));
                paramCol.Add(new SqlDataParameter("@event_participation_id", DbType.String, DBValue.ToDBInt32(directMail.EventParticipationId)));
                paramCol.Add(new SqlDataParameter("@member_hierarchy_id", DbType.String, DBValue.ToDBInt32(directMail.MemberHierarchyId)));
                paramCol.Add(new SqlDataParameter("@postal_address_id", DbType.String, DBValue.ToDBInt32(directMail.PostalAddressId)));
                paramCol.Add(new SqlDataParameter("@create_date", DbType.DateTime, DBValue.ToDBDateTime(directMail.CreateDate)));
                //paramCol.Add(new SqlDataParameter("@return", DbType.Int32, ParameterDirection.ReturnValue));

                if (internalTransaction)
                {
                    si.BeginTransaction();
                }

                // Fetch and store into database.
                rowAffected = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // Commit our transaction.
                if (internalTransaction)
                    si.Commit();
            }
            catch (Exception ex)
            {
                // Rollback on error.
                if (internalTransaction)
                    si.Rollback();

                // throw exception
                throw new ESubsGlobalException("UpdateDirectMail", ex);
            }
            finally
            {
                if (internalTransaction)
                {
                    si.Close();
                }
            }

            return true;
        }


        public List<DirectMail.Object.DirectMailTemplate> GetDirectMailTemplates()
        {
            List<DirectMail.Object.DirectMailTemplate> directMails = new List<GA.BDC.Core.ESubsGlobal.DirectMail.Object.DirectMailTemplate>();

            bool useTransaction = false;
            string storedProcName = "es_get_direct_mail_template";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                si.Open();
                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, null);

                foreach (DataRow row in dt.Rows)
                {
                    // fill our objects
                    try
                    {
                        int direct_mail_id = DBValue.ToInt32(row["direct_mail_id"]);
                        string message = DBValue.ToString(row["message"]);
                        string image_url = DBValue.ToString(row["image_url"]);
                        DateTime create_date = DBValue.ToDateTime(row["create_date"]);
                        string documentPath = DBValue.ToString(row["document_path"]);

                        GA.BDC.Core.ESubsGlobal.DirectMail.Object.DirectMailTemplate directMail = 
                            new GA.BDC.Core.ESubsGlobal.DirectMail.Object.DirectMailTemplate();
                        directMail.DirectId = direct_mail_id;
                        directMail.Message = message;
                        directMail.ImageUrl = image_url;
                        directMail.CreateDate = create_date;
                        directMail.DocumentPath = documentPath;

                        directMails.Add(directMail);
                    }
                    catch (System.Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return directMails;
        }

        public DirectMail.Object.DirectMailTemplate GetDirectMailTemplateById(int directMailId)
        {
            DirectMail.Object.DirectMailTemplate directMail = null;

            bool useTransaction = false;
            string storedProcName = "es_get_direct_mail_template_by_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                si.Open();
                if (useTransaction)
                    si.BeginTransaction();

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@direct_mail_template_id", DbType.Int32, DBValue.ToDBInt32(directMailId)));

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    DataRow row = dt.Rows[0];

                    int direct_mail_id = DBValue.ToInt32(row["direct_mail_id"]);
                    string message = DBValue.ToString(row["message"]);
                    string image_url = DBValue.ToString(row["image_url"]);
                    DateTime create_date = DBValue.ToDateTime(row["create_date"]);
                    string documentPath = DBValue.ToString(row["document_path"]);

                    directMail = new GA.BDC.Core.ESubsGlobal.DirectMail.Object.DirectMailTemplate();
                    directMail.DirectId = direct_mail_id;
                    directMail.Message = message;
                    directMail.ImageUrl = image_url;
                    directMail.CreateDate = create_date;
                    directMail.DocumentPath = documentPath;
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return directMail;
        }


        public List<DirectMail.Object.DirectMailLetter> GetDirectMailLetters()
        {
            List<DirectMail.Object.DirectMailLetter> directMailLetters = 
                new List<GA.BDC.Core.ESubsGlobal.DirectMail.Object.DirectMailLetter>();

            bool useTransaction = false;
            string storedProcName = "es_get_direct_mail_letters";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                si.Open();
                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, null);

                foreach (DataRow row in dt.Rows)
                {
                    // fill our objects
                    try
                    {
                        int direct_mail_letter_id = DBValue.ToInt32(row["direct_mail_letter_id"]);
                        int direct_mail_id = DBValue.ToInt32(row["direct_mail_id"]);
                        string letter_bar_code_1 = DBValue.ToString(row["letter_bar_code_1"]);
                        string letter_bar_code_2 = DBValue.ToString(row["letter_bar_code_2"]);
                        int letter_type = DBValue.ToInt32(row["letter_type"]);
                        DateTime create_date = DBValue.ToDateTime(row["create_date"]);

                        GA.BDC.Core.ESubsGlobal.DirectMail.Object.DirectMailLetter directMailLetter = 
                            new GA.BDC.Core.ESubsGlobal.DirectMail.Object.DirectMailLetter();
                        directMailLetter.DirectMailLetterId = direct_mail_letter_id;
                        directMailLetter.DirectMailId = direct_mail_id;
                        directMailLetter.LetterBarCode1 = letter_bar_code_1;
                        directMailLetter.LetterBarCode2 = letter_bar_code_2;
                        directMailLetter.LetterType = letter_type;
                        directMailLetter.CreateDate = create_date;

                        directMailLetters.Add(directMailLetter);
                    }
                    catch (System.Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return directMailLetters;
        }

        public DirectMail.Object.DirectMailLetter GetDirectMailLetterById(int directMailLetterId)
        {
            DirectMail.Object.DirectMailLetter directMailLetter = null;

            bool useTransaction = false;
            string storedProcName = "es_get_direct_mail_letter_by_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                si.Open();
                if (useTransaction)
                    si.BeginTransaction();

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@direct_mail_letter_id", DbType.Int32, DBValue.ToDBInt32(directMailLetterId)));

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    DataRow row = dt.Rows[0];

                    int direct_mail_letter_id = DBValue.ToInt32(row["direct_mail_letter_id"]);
                    int direct_mail_id = DBValue.ToInt32(row["direct_mail_id"]);
                    string letter_bar_code_1 = DBValue.ToString(row["letter_bar_code_1"]);
                    string letter_bar_code_2 = DBValue.ToString(row["letter_bar_code_2"]);
                    int letter_type = DBValue.ToInt32(row["letter_type"]);
                    DateTime create_date = DBValue.ToDateTime(row["create_date"]);

                    directMailLetter =
                        new GA.BDC.Core.ESubsGlobal.DirectMail.Object.DirectMailLetter();
                    directMailLetter.DirectMailLetterId = direct_mail_letter_id;
                    directMailLetter.DirectMailId = direct_mail_id;
                    directMailLetter.LetterBarCode1 = letter_bar_code_1;
                    directMailLetter.LetterBarCode2 = letter_bar_code_2;
                    directMailLetter.LetterType = letter_type;
                    directMailLetter.CreateDate = create_date;


                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return directMailLetter;
        }

        internal bool InsertDirectMailLetter(SqlInterface si, DirectMail.Object.DirectMailLetter directMailLetter)
        {

            int rowAffected = 0;

            bool internalTransaction = true;
            string storedProcName = "es_insert_direct_mail_letter";


            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
                si.Open();
            }
            else
            {
                internalTransaction = false;
            }

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@direct_mail_letter_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@direct_mail_id", DbType.Int32, DBValue.ToDBInt32(directMailLetter.DirectMailId)));
                paramCol.Add(new SqlDataParameter("@letter_bar_code_1", DbType.String, DBValue.ToDBString(directMailLetter.LetterBarCode1)));
                paramCol.Add(new SqlDataParameter("@letter_bar_code_2", DbType.String, DBValue.ToDBString(directMailLetter.LetterBarCode2)));
                paramCol.Add(new SqlDataParameter("@letter_type", DbType.Int32, DBValue.ToDBInt16(directMailLetter.LetterType)));
                paramCol.Add(new SqlDataParameter("@create_date", DbType.DateTime, DBValue.ToDBDateTime(directMailLetter.CreateDate)));

                if (internalTransaction)
                {
                    si.BeginTransaction();
                }

                // Fetch and store into database.
                rowAffected = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    directMailLetter.DirectMailLetterId = DBValue.ToInt32(paramCol["@direct_mail_letter_id"].Value);
                }
                catch (System.Exception ex)
                {
                    throw new ApplicationException(ex.ToString());
                }

                // Commit our transaction.
                if (internalTransaction)
                    si.Commit();
            }
            catch (Exception ex)
            {
                // Rollback on error.
                if (internalTransaction)
                    si.Rollback();

                // throw exception
                throw new ESubsGlobalException("InsertDirectMailLetter", ex);
            }
            finally
            {
                if (internalTransaction)
                {
                    si.Close();
                }
            }

            return true;
        }


        internal int UpdateDirectMailLetter(SqlInterface si, DirectMail.Object.DirectMailLetter directMailLetter)
        {

            int rowAffected = 0;

            bool internalTransaction = true;
            string storedProcName = "es_update_direct_mail_letter";


            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
                si.Open();
            }
            else
            {
                internalTransaction = false;
            }

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@direct_mail_letter_id", DbType.Int32, DBValue.ToDBInt32(directMailLetter.DirectMailLetterId)));
                paramCol.Add(new SqlDataParameter("@direct_mail_id", DbType.Int32, DBValue.ToDBInt32(directMailLetter.DirectMailId)));
                paramCol.Add(new SqlDataParameter("@letter_bar_code_1", DbType.String, DBValue.ToDBString(directMailLetter.LetterBarCode1)));
                paramCol.Add(new SqlDataParameter("@letter_bar_code_2", DbType.String, DBValue.ToDBString(directMailLetter.LetterBarCode2)));
                paramCol.Add(new SqlDataParameter("@letter_type", DbType.Int32, DBValue.ToDBInt16(directMailLetter.LetterType)));
                paramCol.Add(new SqlDataParameter("@create_date", DbType.DateTime, DBValue.ToDBDateTime(directMailLetter.CreateDate)));

                if (internalTransaction)
                {
                    si.BeginTransaction();
                }

                // Fetch and store into database.
                rowAffected = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // Commit our transaction.
                if (internalTransaction)
                    si.Commit();
            }
            catch (Exception ex)
            {
                // Rollback on error.
                if (internalTransaction)
                    si.Rollback();

                // throw exception
                throw new ESubsGlobalException("UpdateDirectMailLetter", ex);
            }
            finally
            {
                if (internalTransaction)
                {
                    si.Close();
                }
            }

            return rowAffected;
        }

        #endregion

        #region Web Actions

        public List<WebAction> GetWebActions()
        {
            List<WebAction> webActions = new List<WebAction>();

            bool useTransaction = false;
            string storedProcName = "es_get_web_action";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                si.Open();
                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, null);

                foreach (DataRow row in dt.Rows)
                {
                    // fill our objects
                    try
                    {
                        WebAction webAction = new WebAction();
                        webAction.WebActionId = DBValue.ToInt32(row["web_action_id"]);
                        webAction.MemberHierarchyId = DBValue.ToInt32(row["member_hierarchy_id"]);
                        webAction.EventParticipationId = DBValue.ToInt32(row["event_participation_id"]);
                        webAction.Type = DBValue.ToInt32(row["type"]);
                        webAction.Value = DBValue.ToString(row["value"]);
                        webAction.CreateDate = DBValue.ToDateTime(row["create_date"]);

                        webActions.Add(webAction);
                    }
                    catch (System.Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return webActions;
        }

        public WebAction GetWebActionById(int webActionId)
        {
            DirectMail.Object.DirectMailInfo directMail = null;

            WebAction webAction = null;

            bool useTransaction = false;
            string storedProcName = "es_get_web_action_by_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                si.Open();
                if (useTransaction)
                    si.BeginTransaction();

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@web_action_id", DbType.Int32, DBValue.ToDBInt32(webActionId)));

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    DataRow row = dt.Rows[0];

                    webAction = new WebAction();
                    webAction.WebActionId = DBValue.ToInt32(row["web_action_id"]);
                    webAction.MemberHierarchyId = DBValue.ToInt32(row["member_hierarchy_id"]);
                    webAction.EventParticipationId = DBValue.ToInt32(row["event_participation_id"]);
                    webAction.Type = DBValue.ToInt32(row["type"]);
                    webAction.Value = DBValue.ToString(row["value"]);
                    webAction.CreateDate = DBValue.ToDateTime(row["create_date"]);

                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return webAction;
        }

        public WebAction GetWebActionByEventParticipationId(int eventParticipationId, int type)
        {
            List<DirectMail.Object.DirectMailInfo> directMails = new List<GA.BDC.Core.ESubsGlobal.DirectMail.Object.DirectMailInfo>();

            bool useTransaction = false;
            string storedProcName = "es_get_web_action_by_event_participation_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            WebAction webAction = null;

            try
            {

                si.Open();
                if (useTransaction)
                    si.BeginTransaction();

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_participation_id", DbType.Int32, DBValue.ToDBInt32(eventParticipationId)));
                paramCol.Add(new SqlDataParameter("@type", DbType.Int32, DBValue.ToDBInt32(type)));

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                foreach (DataRow row in dt.Rows)
                {
                    // fill our objects
                    try
                    {
                        webAction = new WebAction();
                        webAction.WebActionId = DBValue.ToInt32(row["web_action_id"]);
                        webAction.MemberHierarchyId = DBValue.ToInt32(row["member_hierarchy_id"]);
                        webAction.EventParticipationId = DBValue.ToInt32(row["event_participation_id"]);
                        webAction.Type = DBValue.ToInt32(row["type"]);
                        webAction.Value = DBValue.ToString(row["value"]);
                        webAction.CreateDate = DBValue.ToDateTime(row["create_date"]);

                    }
                    catch (System.Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }
                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return webAction;
        }

        internal bool InsertWebAction(SqlInterface si, WebAction webAction)
        {

            int rowAffected = 0;

            bool internalTransaction = true;
            string storedProcName = "es_insert_web_action";


            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
                si.Open();
            }
            else
            {
                internalTransaction = false;
            }

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@event_participation_id", DbType.String, DBValue.ToDBInt32(webAction.EventParticipationId)));
                paramCol.Add(new SqlDataParameter("@member_hierarchy_id", DbType.String, DBValue.ToDBInt32(webAction.MemberHierarchyId)));
                paramCol.Add(new SqlDataParameter("@type", DbType.String, DBValue.ToDBInt32(webAction.Type)));
                paramCol.Add(new SqlDataParameter("@value", DbType.String, DBValue.ToDBString(webAction.Value)));
                paramCol.Add(new SqlDataParameter("@create_date", DbType.DateTime, DBValue.ToDBDateTime(webAction.CreateDate)));
                paramCol.Add(new SqlDataParameter("@web_action_id", DbType.Int32, ParameterDirection.Output));

                if (internalTransaction)
                {
                    si.BeginTransaction();
                }

                // Fetch and store into database.
                rowAffected = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    webAction.WebActionId = DBValue.ToInt32(paramCol["@web_action_id"].Value);
                }
                catch (System.Exception ex)
                {
                    throw new ApplicationException(ex.ToString());
                }

                // Commit our transaction.
                if (internalTransaction)
                    si.Commit();
            }
            catch (Exception ex)
            {
                // Rollback on error.
                if (internalTransaction)
                    si.Rollback();

                // throw exception
                throw new ESubsGlobalException("InsertDirectMail", ex);
            }
            finally
            {
                if (internalTransaction)
                {
                    si.Close();
                }
            }

            return true;
        }


        internal bool UpdateWebAction(SqlInterface si, WebAction webAction)
        {

            int rowAffected = 0;

            bool internalTransaction = true;
            string storedProcName = "es_update_web_action";


            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
                si.Open();
            }
            else
            {
                internalTransaction = false;
            }

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@web_action_id", DbType.Int32, DBValue.ToDBInt32(webAction.WebActionId)));
                paramCol.Add(new SqlDataParameter("@type", DbType.String, DBValue.ToDBInt32(webAction.Type)));
                paramCol.Add(new SqlDataParameter("@event_participation_id", DbType.String, DBValue.ToDBInt32(webAction.EventParticipationId)));
                paramCol.Add(new SqlDataParameter("@member_hierarchy_id", DbType.String, DBValue.ToDBInt32(webAction.MemberHierarchyId)));
                paramCol.Add(new SqlDataParameter("@create_date", DbType.DateTime, DBValue.ToDBDateTime(webAction.CreateDate)));

                if (internalTransaction)
                {
                    si.BeginTransaction();
                }

                // Fetch and store into database.
                rowAffected = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // Commit our transaction.
                if (internalTransaction)
                    si.Commit();
            }
            catch (Exception ex)
            {
                // Rollback on error.
                if (internalTransaction)
                    si.Rollback();

                // throw exception
                throw new ESubsGlobalException("UpdateDirectMail", ex);
            }
            finally
            {
                if (internalTransaction)
                {
                    si.Close();
                }
            }

            return true;
        }

        #endregion

        #region GA Saving Card
        public EventGASavingCard GetEventGASavingCardByEventId(int eventId)
        {
            string query = "SELECT     " +
                            "ega.id" +
                            ", ega.event_id" +
                            " FROM         " +
                            "	event e " +
                            "	JOIN event_gasavingcard ega " +
                            "	ON e.event_id = ega.event_id " +
                            "WHERE     " +
                            "	(e.event_id = @event_id)".Replace("@event_id", eventId.ToString());

            var si = new SqlInterface(dataProvider, connectionString);

            try
            {
                si.Open();

                var dt = si.ExecuteFetchDataTable(query, CommandType.Text, null);

                return dt.Rows.Count == 0 ? null : LoadEventGASavingCard(dt.Rows[0]);
            }
            catch
            {
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return null;
        }
        private EventGASavingCard LoadEventGASavingCard(DataRow row)
        {
            var eventGASavingCard = new EventGASavingCard();
            eventGASavingCard.Id = DBValue.ToInt32(row["id"]);
            eventGASavingCard.EventID = DBValue.ToInt32(row["event_id"]);
            return eventGASavingCard;
        }
        #endregion

        public bool IsExistEventParticipationByMemberHierarchyIDAndEventID(int member_hierarchy_id, int eventID)
        {
            EventParticipation eventParticipation = null;

            bool useTransaction = false;
            string storedProcName = "es_get_event_participation_by_member_hierarchy_id";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@member_hierarchy_id", DbType.Int32, DBValue.ToDBInt32(member_hierarchy_id)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                string detail_msg = string.Empty;
                if (dt.Rows.Count < 1)
                {
                    return false;
                }

                // fill our objects
                try
                {
                    if (eventID < 0)
                    {
                        return false;
                    }
                    else
                    {
                        foreach (DataRow row in dt.Rows)
                        {
                            int event_participation_id = DBValue.ToInt32(row["event_participation_id"]);
                            eventParticipation = EventParticipation.GetEventParticipationByEventParticipationID(event_participation_id);
                            if (eventParticipation.EventID == eventID)
                            {
                                return true;
                            }
                        }
                    }
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName + ", Detail Msg : " + detail_msg + ", " +
                                               "mh_id = " + member_hierarchy_id + ", " +
                                               "e_id = " + eventID, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
            return false;
        }
    }
}
