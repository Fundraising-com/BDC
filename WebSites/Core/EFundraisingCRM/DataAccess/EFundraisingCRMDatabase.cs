using System;
using System.Xml;
using System.Data;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using GA.BDC.Core.BusinessBase;
using GA.BDC.Core.Data.Sql;
using GA.BDC.Core.Configuration;
using System.Data.SqlClient;

namespace GA.BDC.Core.EFundraisingCRM.DataAccess
{
    /// <summary>
    /// Summary description for eFundStoreDatabase.
    /// </summary>
    public class EFundraisingCRMDatabase : GA.BDC.Core.Data.Sql.DatabaseObject
    {
        public EFundraisingCRMDatabase()
        {

            SetConnectionString(Config.EFundraisingProdConnectionString);
            SetDataProvider(Config.EFundraisingProdDataProvider);
        }

        #region AddressZone Methods

        private AddressZone LoadAddressZone(DataRow row)
        {
            AddressZone addressZone = new AddressZone();

            // Store database values into our business object
            addressZone.AddressZoneId = DBValue.ToInt32(row["address_zone_id"]);
            addressZone.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return addressZone;
        }

        public AddressZone[] GetAddressZones()
        {
            return GetAddressZones(null);
        }

        private AddressZone[] GetAddressZones(SqlInterface si)
        {
            AddressZone[] addressZones = null;

            string storedProcName = "efrcrm_get_address_zones";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    //si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    addressZones = new AddressZone[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            addressZones[i] = LoadAddressZone(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return addressZones;
        }


        public AddressZone GetAddressZoneByID(int id)
        {
            return GetAddressZoneByID(id, null);
        }

        private AddressZone GetAddressZoneByID(int id, SqlInterface si)
        {
            AddressZone addressZone = null;

            string storedProcName = "efrcrm_get_address_zone_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Address_zone_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        addressZone = LoadAddressZone(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return addressZone;
        }


        public int InsertAddressZone(AddressZone addressZone)
        {
            return InsertAddressZone(addressZone, null);
        }

        private int InsertAddressZone(AddressZone addressZone, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_address_zone";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Address_zone_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(addressZone.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    addressZone.AddressZoneId = DBValue.ToInt32(paramCol["@Address_zone_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateAddressZone(AddressZone addressZone)
        {
            return UpdateAddressZone(addressZone, null);
        }

        private int UpdateAddressZone(AddressZone addressZone, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_address_zone";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Address_zone_id", DbType.Int32, DBValue.ToDBInt32(addressZone.AddressZoneId)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(addressZone.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }

        #endregion

        #region AccountingClass Methods

        private AccountingClass LoadAccountingClass(DataRow row)
        {
            AccountingClass accountingClass = new AccountingClass();

            // Store database values into our business object
            accountingClass.AccountingClassId = DBValue.ToInt16(row["accounting_class_id"]);
            accountingClass.CarrierId = DBValue.ToInt16(row["carrier_id"]);
            accountingClass.ShippingOptionId = DBValue.ToInt16(row["shipping_option_id"]);
            accountingClass.Description = DBValue.ToString(row["description"]);
            accountingClass.Rank = DBValue.ToInt16(row["rank"]);
            accountingClass.DeliveryDays = DBValue.ToInt16(row["delivery_days"]);

            // return the filled object
            return accountingClass;
        }

        public AccountingClass[] GetAccountingClasss()
        {
            return GetAccountingClasss(null);
        }

        private AccountingClass[] GetAccountingClasss(SqlInterface si)
        {
            AccountingClass[] accountingClasss = null;

            string storedProcName = "efrcrm_get_accounting_classs";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    accountingClasss = new AccountingClass[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            accountingClasss[i] = LoadAccountingClass(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return accountingClasss;
        }



        #endregion

        #region AccountingClassShippingFees Methods

        private AccountingClassShippingFees LoadAccountingClassShippingFees(DataRow row)
        {
            AccountingClassShippingFees accountingClassShippingFees = new AccountingClassShippingFees();

            // Store database values into our business object
            accountingClassShippingFees.AccountingClassId = DBValue.ToInt16(row["accounting_class_id"]);
            accountingClassShippingFees.MinAmount = DBValue.ToInt16(row["min_amount"]);
            accountingClassShippingFees.MaxAmount = DBValue.ToInt16(row["max_amount"]);
            accountingClassShippingFees.ShippingFee = DBValue.ToInt16(row["shipping_fee"]);

            // return the filled object
            return accountingClassShippingFees;
        }

        public AccountingClassShippingFees[] GetAccountingClassShippingFeess()
        {
            return GetAccountingClassShippingFeess(null);
        }

        private AccountingClassShippingFees[] GetAccountingClassShippingFeess(SqlInterface si)
        {
            AccountingClassShippingFees[] accountingClassShippingFeess = null;

            string storedProcName = "efrcrm_get_accounting_class_shipping_feess";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    accountingClassShippingFeess = new AccountingClassShippingFees[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            accountingClassShippingFeess[i] = LoadAccountingClassShippingFees(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return accountingClassShippingFeess;
        }



        #endregion

        #region AccountingPeriodResult Methods

        private AccountingPeriodResult LoadAccountingPeriodResult(DataRow row)
        {
            AccountingPeriodResult accountingPeriodResult = new AccountingPeriodResult();

            // Store database values into our business object
            accountingPeriodResult.AccountingPeriodResultId = DBValue.ToInt32(row["accounting_period_result_id"]);
            accountingPeriodResult.AccountingClassId = DBValue.ToInt16(row["accounting_class_id"]);
            accountingPeriodResult.Period = DBValue.ToDateTime(row["period"]);
            accountingPeriodResult.Amount = DBValue.ToInt16(row["amount"]);
            accountingPeriodResult.BudgetedAmount = DBValue.ToInt16(row["budgeted_amount"]);

            // return the filled object
            return accountingPeriodResult;
        }

        public AccountingPeriodResult[] GetAccountingPeriodResults()
        {
            return GetAccountingPeriodResults(null);
        }

        private AccountingPeriodResult[] GetAccountingPeriodResults(SqlInterface si)
        {
            AccountingPeriodResult[] accountingPeriodResults = null;

            string storedProcName = "efrcrm_get_accounting_period_results";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    accountingPeriodResults = new AccountingPeriodResult[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            accountingPeriodResults[i] = LoadAccountingPeriodResult(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return accountingPeriodResults;
        }


        public AccountingPeriodResult GetAccountingPeriodResultByID(int id)
        {
            return GetAccountingPeriodResultByID(id, null);
        }

        private AccountingPeriodResult GetAccountingPeriodResultByID(int id, SqlInterface si)
        {
            AccountingPeriodResult accountingPeriodResult = null;

            string storedProcName = "efrcrm_get_accounting_period_result_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Accounting_period_result_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        accountingPeriodResult = LoadAccountingPeriodResult(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return accountingPeriodResult;
        }


        public int InsertAccountingPeriodResult(AccountingPeriodResult accountingPeriodResult)
        {
            return InsertAccountingPeriodResult(accountingPeriodResult, null);
        }

        private int InsertAccountingPeriodResult(AccountingPeriodResult accountingPeriodResult, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_accounting_period_result";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Accounting_period_result_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Accounting_class_id", DbType.Int16, DBValue.ToDBInt16(accountingPeriodResult.AccountingClassId)));
                paramCol.Add(new SqlDataParameter("@Period", DbType.DateTime, DBValue.ToDBDateTime(accountingPeriodResult.Period)));
                paramCol.Add(new SqlDataParameter("@Amount", DbType.Double, DBValue.ToDBFloat(accountingPeriodResult.Amount)));
                paramCol.Add(new SqlDataParameter("@Budgeted_amount", DbType.Double, DBValue.ToDBFloat(accountingPeriodResult.BudgetedAmount)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    accountingPeriodResult.AccountingPeriodResultId = DBValue.ToInt32(paramCol["@Accounting_period_result_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateAccountingPeriodResult(AccountingPeriodResult accountingPeriodResult)
        {
            return UpdateAccountingPeriodResult(accountingPeriodResult, null);
        }

        private int UpdateAccountingPeriodResult(AccountingPeriodResult accountingPeriodResult, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_accounting_period_result";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Accounting_period_result_id", DbType.Int32, DBValue.ToDBInt32(accountingPeriodResult.AccountingPeriodResultId)));
                paramCol.Add(new SqlDataParameter("@Accounting_class_id", DbType.Int16, DBValue.ToDBInt16(accountingPeriodResult.AccountingClassId)));
                paramCol.Add(new SqlDataParameter("@Period", DbType.DateTime, DBValue.ToDBDateTime(accountingPeriodResult.Period)));
                paramCol.Add(new SqlDataParameter("@Amount", DbType.Double, DBValue.ToDBFloat(accountingPeriodResult.Amount)));
                paramCol.Add(new SqlDataParameter("@Budgeted_amount", DbType.Double, DBValue.ToDBFloat(accountingPeriodResult.BudgetedAmount)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region Adjustment Methods

        private Adjustment LoadAdjustment(DataRow row)
        {
            Adjustment adjustment = new Adjustment();

            // Store database values into our business object
            adjustment.SalesID = DBValue.ToInt32(row["sales_id"]);
            adjustment.AdjustmentNo = DBValue.ToInt32(row["adjustment_no"]);
            adjustment.ReasonID = DBValue.ToInt32(row["reason_id"]);
            adjustment.AdjustmentDate = DBValue.ToDateTime(row["adjustment_date"]);
            adjustment.AdjustmentAmount = DBValue.ToInt16(row["adjustment_amount"]);
            adjustment.Comment = DBValue.ToString(row["comment"]);
            adjustment.AdjustmentOnShipping = DBValue.ToInt16(row["adjustment_on_shipping"]);
            adjustment.AdjustmentOnTaxes = DBValue.ToInt16(row["adjustment_on_taxes"]);
            adjustment.AdjustmentOnSaleAmount = DBValue.ToInt16(row["adjustment_on_sale_amount"]);

            // return the filled object
            return adjustment;
        }

        public Adjustment[] GetAdjustments()
        {
            return GetAdjustments(null);
        }

        private Adjustment[] GetAdjustments(SqlInterface si)
        {
            Adjustment[] adjustments = null;

            string storedProcName = "efrcrm_get_adjustments";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    adjustments = new Adjustment[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            adjustments[i] = LoadAdjustment(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return adjustments;
        }


        public Adjustment GetAdjustmentByID(int id)
        {
            return GetAdjustmentByID(id, null);
        }

        private Adjustment GetAdjustmentByID(int id, SqlInterface si)
        {
            Adjustment adjustment = null;

            string storedProcName = "efrcrm_get_adjustment_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        adjustment = LoadAdjustment(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return adjustment;
        }

        public Adjustment[] GetAdjustmentsBySaleID(int id)
        {
            return GetAdjustmentsBySaleID(id, null);
        }

        private Adjustment[] GetAdjustmentsBySaleID(int id, SqlInterface si)
        {
            Adjustment[] adjustments = null;

            string storedProcName = "efrcrm_get_adjustments_by_sale_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                adjustments = new Adjustment[dt.Rows.Count];

                if (dt != null)
                {

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {

                        // fill our objects
                        try
                        {
                            adjustments[i] = LoadAdjustment(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return adjustments;
        }



        public int InsertAdjustment(Adjustment adjustment)
        {
            return InsertAdjustment(adjustment, null);
        }

        private int InsertAdjustment(Adjustment adjustment, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_adjustment";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Adjustment_No", DbType.Int32, DBValue.ToDBInt32(adjustment.AdjustmentNo)));
                paramCol.Add(new SqlDataParameter("@Reason_ID", DbType.Int32, DBValue.ToDBInt32(adjustment.ReasonID)));
                paramCol.Add(new SqlDataParameter("@Adjustment_Date", DbType.DateTime, DBValue.ToDBDateTime(adjustment.AdjustmentDate)));
                paramCol.Add(new SqlDataParameter("@Adjustment_Amount", DbType.Double, DBValue.ToDBDouble(adjustment.AdjustmentAmount)));
                paramCol.Add(new SqlDataParameter("@Comment", DbType.String, DBValue.ToDBString(adjustment.Comment)));
                paramCol.Add(new SqlDataParameter("@Adjustment_On_Shipping", DbType.Double, DBValue.ToDBDouble(adjustment.AdjustmentOnShipping)));
                paramCol.Add(new SqlDataParameter("@Adjustment_On_Taxes", DbType.Double, DBValue.ToDBDouble(adjustment.AdjustmentOnTaxes)));
                paramCol.Add(new SqlDataParameter("@Adjustment_On_Sale_Amount", DbType.Double, DBValue.ToDBDouble(adjustment.AdjustmentOnSaleAmount)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    adjustment.SalesID = DBValue.ToInt32(paramCol["@Sales_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateAdjustment(Adjustment adjustment)
        {
            return UpdateAdjustment(adjustment, null);
        }

        private int UpdateAdjustment(Adjustment adjustment, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_adjustment";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(adjustment.SalesID)));
                paramCol.Add(new SqlDataParameter("@Adjustment_No", DbType.Int32, DBValue.ToDBInt32(adjustment.AdjustmentNo)));
                paramCol.Add(new SqlDataParameter("@Reason_ID", DbType.Int32, DBValue.ToDBInt32(adjustment.ReasonID)));
                paramCol.Add(new SqlDataParameter("@Adjustment_Date", DbType.DateTime, DBValue.ToDBDateTime(adjustment.AdjustmentDate)));
                paramCol.Add(new SqlDataParameter("@Adjustment_Amount", DbType.Double, DBValue.ToDBDouble(adjustment.AdjustmentAmount)));
                paramCol.Add(new SqlDataParameter("@Comment", DbType.String, DBValue.ToDBString(adjustment.Comment)));
                paramCol.Add(new SqlDataParameter("@Adjustment_On_Shipping", DbType.Double, DBValue.ToDBDouble(adjustment.AdjustmentOnShipping)));
                paramCol.Add(new SqlDataParameter("@Adjustment_On_Taxes", DbType.Double, DBValue.ToDBDouble(adjustment.AdjustmentOnTaxes)));
                paramCol.Add(new SqlDataParameter("@Adjustment_On_Sale_Amount", DbType.Double, DBValue.ToDBDouble(adjustment.AdjustmentOnSaleAmount)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region AdministrativeEmail Methods

        private AdministrativeEmail LoadAdministrativeEmail(DataRow row)
        {
            AdministrativeEmail administrativeEmail = new AdministrativeEmail();

            // Store database values into our business object
            administrativeEmail.AdministrativeID = DBValue.ToInt32(row["administrative_id"]);
            administrativeEmail.Email = DBValue.ToString(row["email"]);
            administrativeEmail.FirstName = DBValue.ToString(row["first_name"]);
            administrativeEmail.LastName = DBValue.ToString(row["last_name"]);

            // return the filled object
            return administrativeEmail;
        }

        public AdministrativeEmail[] GetAdministrativeEmails()
        {
            return GetAdministrativeEmails(null);
        }

        private AdministrativeEmail[] GetAdministrativeEmails(SqlInterface si)
        {
            AdministrativeEmail[] administrativeEmails = null;

            string storedProcName = "efrcrm_get_administrative_emails";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    administrativeEmails = new AdministrativeEmail[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            administrativeEmails[i] = LoadAdministrativeEmail(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return administrativeEmails;
        }


        public AdministrativeEmail GetAdministrativeEmailByID(int id)
        {
            return GetAdministrativeEmailByID(id, null);
        }

        private AdministrativeEmail GetAdministrativeEmailByID(int id, SqlInterface si)
        {
            AdministrativeEmail administrativeEmail = null;

            string storedProcName = "efrcrm_get_administrative_email_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Administrative_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        administrativeEmail = LoadAdministrativeEmail(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return administrativeEmail;
        }


        public int InsertAdministrativeEmail(AdministrativeEmail administrativeEmail)
        {
            return InsertAdministrativeEmail(administrativeEmail, null);
        }

        private int InsertAdministrativeEmail(AdministrativeEmail administrativeEmail, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_administrative_email";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Administrative_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(administrativeEmail.Email)));
                paramCol.Add(new SqlDataParameter("@First_Name", DbType.String, DBValue.ToDBString(administrativeEmail.FirstName)));
                paramCol.Add(new SqlDataParameter("@Last_Name", DbType.String, DBValue.ToDBString(administrativeEmail.LastName)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    administrativeEmail.AdministrativeID = DBValue.ToInt32(paramCol["@Administrative_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateAdministrativeEmail(AdministrativeEmail administrativeEmail)
        {
            return UpdateAdministrativeEmail(administrativeEmail, null);
        }

        private int UpdateAdministrativeEmail(AdministrativeEmail administrativeEmail, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_administrative_email";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Administrative_ID", DbType.Int32, DBValue.ToDBInt32(administrativeEmail.AdministrativeID)));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(administrativeEmail.Email)));
                paramCol.Add(new SqlDataParameter("@First_Name", DbType.String, DBValue.ToDBString(administrativeEmail.FirstName)));
                paramCol.Add(new SqlDataParameter("@Last_Name", DbType.String, DBValue.ToDBString(administrativeEmail.LastName)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region Advertisement Methods

        private Advertisement LoadAdvertisement(DataRow row)
        {
            Advertisement advertisement = new Advertisement();

            // Store database values into our business object
            advertisement.AdvertisementId = DBValue.ToInt32(row["advertisement_id"]);
            advertisement.DivisionId = DBValue.ToInt16(row["division_id"]);
            advertisement.Description = DBValue.ToString(row["description"]);
            advertisement.Size = DBValue.ToInt16(row["size"]);
            advertisement.NbColors = DBValue.ToInt32(row["nb_colors"]);
            advertisement.Comments = DBValue.ToString(row["comments"]);

            // return the filled object
            return advertisement;
        }

        public Advertisement[] GetAdvertisements()
        {
            return GetAdvertisements(null);
        }

        private Advertisement[] GetAdvertisements(SqlInterface si)
        {
            Advertisement[] advertisements = null;

            string storedProcName = "efrcrm_get_advertisements";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    advertisements = new Advertisement[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            advertisements[i] = LoadAdvertisement(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return advertisements;
        }


        public Advertisement GetAdvertisementByID(int id)
        {
            return GetAdvertisementByID(id, null);
        }

        private Advertisement GetAdvertisementByID(int id, SqlInterface si)
        {
            Advertisement advertisement = null;

            string storedProcName = "efrcrm_get_advertisement_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Advertisement_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        advertisement = LoadAdvertisement(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return advertisement;
        }


        public int InsertAdvertisement(Advertisement advertisement)
        {
            return InsertAdvertisement(advertisement, null);
        }

        private int InsertAdvertisement(Advertisement advertisement, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_advertisement";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Advertisement_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Division_id", DbType.Int16, DBValue.ToDBInt16(advertisement.DivisionId)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(advertisement.Description)));
                paramCol.Add(new SqlDataParameter("@Size", DbType.Single, DBValue.ToDBFloat(advertisement.Size)));
                paramCol.Add(new SqlDataParameter("@Nb_colors", DbType.Int32, DBValue.ToDBInt32(advertisement.NbColors)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(advertisement.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    advertisement.AdvertisementId = DBValue.ToInt32(paramCol["@Advertisement_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateAdvertisement(Advertisement advertisement)
        {
            return UpdateAdvertisement(advertisement, null);
        }

        private int UpdateAdvertisement(Advertisement advertisement, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_advertisement";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Advertisement_id", DbType.Int32, DBValue.ToDBInt32(advertisement.AdvertisementId)));
                paramCol.Add(new SqlDataParameter("@Division_id", DbType.Int16, DBValue.ToDBInt16(advertisement.DivisionId)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(advertisement.Description)));
                paramCol.Add(new SqlDataParameter("@Size", DbType.Single, DBValue.ToDBFloat(advertisement.Size)));
                paramCol.Add(new SqlDataParameter("@Nb_colors", DbType.Int32, DBValue.ToDBInt32(advertisement.NbColors)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(advertisement.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region Advertiser Methods

        private Advertiser LoadAdvertiser(DataRow row)
        {
            Advertiser advertiser = new Advertiser();

            // Store database values into our business object
            advertiser.AdvertiserID = DBValue.ToInt32(row["advertiser_id"]);
            advertiser.AdvertismentTypeID = DBValue.ToInt32(row["advertisment_type_id"]);
            advertiser.ContactID = DBValue.ToInt32(row["contact_id"]);
            advertiser.AdvertiserName = DBValue.ToString(row["advertiser_name"]);

            // return the filled object
            return advertiser;
        }

        public Advertiser[] GetAdvertisers()
        {
            return GetAdvertisers(null);
        }

        private Advertiser[] GetAdvertisers(SqlInterface si)
        {
            Advertiser[] advertisers = null;

            string storedProcName = "efrcrm_get_advertisers";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    advertisers = new Advertiser[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            advertisers[i] = LoadAdvertiser(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return advertisers;
        }


        public Advertiser GetAdvertiserByID(int id)
        {
            return GetAdvertiserByID(id, null);
        }

        private Advertiser GetAdvertiserByID(int id, SqlInterface si)
        {
            Advertiser advertiser = null;

            string storedProcName = "efrcrm_get_advertiser_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Advertiser_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        advertiser = LoadAdvertiser(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return advertiser;
        }


        public int InsertAdvertiser(Advertiser advertiser)
        {
            return InsertAdvertiser(advertiser, null);
        }

        private int InsertAdvertiser(Advertiser advertiser, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_advertiser";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Advertiser_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Advertisment_Type_ID", DbType.Int32, DBValue.ToDBInt32(advertiser.AdvertismentTypeID)));
                paramCol.Add(new SqlDataParameter("@Contact_ID", DbType.Int32, DBValue.ToDBInt32(advertiser.ContactID)));
                paramCol.Add(new SqlDataParameter("@Advertiser_Name", DbType.String, DBValue.ToDBString(advertiser.AdvertiserName)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    advertiser.AdvertiserID = DBValue.ToInt32(paramCol["@Advertiser_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateAdvertiser(Advertiser advertiser)
        {
            return UpdateAdvertiser(advertiser, null);
        }

        private int UpdateAdvertiser(Advertiser advertiser, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_advertiser";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Advertiser_ID", DbType.Int32, DBValue.ToDBInt32(advertiser.AdvertiserID)));
                paramCol.Add(new SqlDataParameter("@Advertisment_Type_ID", DbType.Int32, DBValue.ToDBInt32(advertiser.AdvertismentTypeID)));
                paramCol.Add(new SqlDataParameter("@Contact_ID", DbType.Int32, DBValue.ToDBInt32(advertiser.ContactID)));
                paramCol.Add(new SqlDataParameter("@Advertiser_Name", DbType.String, DBValue.ToDBString(advertiser.AdvertiserName)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region AdvertiserPartner Methods

        private AdvertiserPartner LoadAdvertiserPartner(DataRow row)
        {
            AdvertiserPartner advertiserPartner = new AdvertiserPartner();

            // Store database values into our business object
            advertiserPartner.AdvertiserPartnerID = DBValue.ToInt32(row["advertiser_partner_id"]);
            advertiserPartner.AdvertiserID = DBValue.ToInt32(row["advertiser_id"]);
            advertiserPartner.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return advertiserPartner;
        }

        public AdvertiserPartner[] GetAdvertiserPartners()
        {
            return GetAdvertiserPartners(null);
        }

        private AdvertiserPartner[] GetAdvertiserPartners(SqlInterface si)
        {
            AdvertiserPartner[] advertiserPartners = null;

            string storedProcName = "efrcrm_get_advertiser_partners";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    advertiserPartners = new AdvertiserPartner[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            advertiserPartners[i] = LoadAdvertiserPartner(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return advertiserPartners;
        }


        public AdvertiserPartner GetAdvertiserPartnerByID(int id)
        {
            return GetAdvertiserPartnerByID(id, null);
        }

        private AdvertiserPartner GetAdvertiserPartnerByID(int id, SqlInterface si)
        {
            AdvertiserPartner advertiserPartner = null;

            string storedProcName = "efrcrm_get_advertiser_partner_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Advertiser_Partner_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        advertiserPartner = LoadAdvertiserPartner(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return advertiserPartner;
        }


        public int InsertAdvertiserPartner(AdvertiserPartner advertiserPartner)
        {
            return InsertAdvertiserPartner(advertiserPartner, null);
        }

        private int InsertAdvertiserPartner(AdvertiserPartner advertiserPartner, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_advertiser_partner";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Advertiser_Partner_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Advertiser_ID", DbType.Int32, DBValue.ToDBInt32(advertiserPartner.AdvertiserID)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(advertiserPartner.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    advertiserPartner.AdvertiserPartnerID = DBValue.ToInt32(paramCol["@Advertiser_Partner_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateAdvertiserPartner(AdvertiserPartner advertiserPartner)
        {
            return UpdateAdvertiserPartner(advertiserPartner, null);
        }

        private int UpdateAdvertiserPartner(AdvertiserPartner advertiserPartner, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_advertiser_partner";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Advertiser_Partner_ID", DbType.Int32, DBValue.ToDBInt32(advertiserPartner.AdvertiserPartnerID)));
                paramCol.Add(new SqlDataParameter("@Advertiser_ID", DbType.Int32, DBValue.ToDBInt32(advertiserPartner.AdvertiserID)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(advertiserPartner.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region AdvertisingSupport Methods

        private AdvertisingSupport LoadAdvertisingSupport(DataRow row)
        {
            AdvertisingSupport advertisingSupport = new AdvertisingSupport();

            // Store database values into our business object
            advertisingSupport.AdvertisingSupportID = DBValue.ToInt32(row["advertising_support_id"]);
            advertisingSupport.AdvertisingSupportTypeID = DBValue.ToInt32(row["advertising_support_type_id"]);
            advertisingSupport.Title = DBValue.ToString(row["title"]);
            advertisingSupport.PublishnigDate = DBValue.ToDateTime(row["publishnig_date"]);
            advertisingSupport.WebSite = DBValue.ToString(row["web_site"]);
            advertisingSupport.OrderingPhoneNumber = DBValue.ToString(row["ordering_phone_number"]);
            advertisingSupport.Periodicity = DBValue.ToInt32(row["periodicity"]);
            advertisingSupport.NbDraw = DBValue.ToInt32(row["nb_draw"]);
            advertisingSupport.MagazinePrice = DBValue.ToInt16(row["magazine_price"]);
            advertisingSupport.Comments = DBValue.ToString(row["comments"]);

            // return the filled object
            return advertisingSupport;
        }

        public AdvertisingSupport[] GetAdvertisingSupports()
        {
            return GetAdvertisingSupports(null);
        }

        private AdvertisingSupport[] GetAdvertisingSupports(SqlInterface si)
        {
            AdvertisingSupport[] advertisingSupports = null;

            string storedProcName = "efrcrm_get_advertising_supports";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    advertisingSupports = new AdvertisingSupport[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            advertisingSupports[i] = LoadAdvertisingSupport(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return advertisingSupports;
        }


        public AdvertisingSupport GetAdvertisingSupportByID(int id)
        {
            return GetAdvertisingSupportByID(id, null);
        }

        private AdvertisingSupport GetAdvertisingSupportByID(int id, SqlInterface si)
        {
            AdvertisingSupport advertisingSupport = null;

            string storedProcName = "efrcrm_get_advertising_support_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Advertising_Support_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        advertisingSupport = LoadAdvertisingSupport(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return advertisingSupport;
        }


        public int InsertAdvertisingSupport(AdvertisingSupport advertisingSupport)
        {
            return InsertAdvertisingSupport(advertisingSupport, null);
        }

        private int InsertAdvertisingSupport(AdvertisingSupport advertisingSupport, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_advertising_support";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Advertising_Support_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Advertising_Support_Type_ID", DbType.Int32, DBValue.ToDBInt32(advertisingSupport.AdvertisingSupportTypeID)));
                paramCol.Add(new SqlDataParameter("@Title", DbType.String, DBValue.ToDBString(advertisingSupport.Title)));
                paramCol.Add(new SqlDataParameter("@Publishnig_Date", DbType.DateTime, DBValue.ToDBDateTime(advertisingSupport.PublishnigDate)));
                paramCol.Add(new SqlDataParameter("@Web_Site", DbType.String, DBValue.ToDBString(advertisingSupport.WebSite)));
                paramCol.Add(new SqlDataParameter("@Ordering_Phone_Number", DbType.String, DBValue.ToDBString(advertisingSupport.OrderingPhoneNumber)));
                paramCol.Add(new SqlDataParameter("@Periodicity", DbType.Int32, DBValue.ToDBInt32(advertisingSupport.Periodicity)));
                paramCol.Add(new SqlDataParameter("@Nb_Draw", DbType.Int32, DBValue.ToDBInt32(advertisingSupport.NbDraw)));
                paramCol.Add(new SqlDataParameter("@Magazine_Price", DbType.Double, DBValue.ToDBFloat(advertisingSupport.MagazinePrice)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(advertisingSupport.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    advertisingSupport.AdvertisingSupportID = DBValue.ToInt32(paramCol["@Advertising_Support_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateAdvertisingSupport(AdvertisingSupport advertisingSupport)
        {
            return UpdateAdvertisingSupport(advertisingSupport, null);
        }

        private int UpdateAdvertisingSupport(AdvertisingSupport advertisingSupport, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_advertising_support";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Advertising_Support_ID", DbType.Int32, DBValue.ToDBInt32(advertisingSupport.AdvertisingSupportID)));
                paramCol.Add(new SqlDataParameter("@Advertising_Support_Type_ID", DbType.Int32, DBValue.ToDBInt32(advertisingSupport.AdvertisingSupportTypeID)));
                paramCol.Add(new SqlDataParameter("@Title", DbType.String, DBValue.ToDBString(advertisingSupport.Title)));
                paramCol.Add(new SqlDataParameter("@Publishnig_Date", DbType.DateTime, DBValue.ToDBDateTime(advertisingSupport.PublishnigDate)));
                paramCol.Add(new SqlDataParameter("@Web_Site", DbType.String, DBValue.ToDBString(advertisingSupport.WebSite)));
                paramCol.Add(new SqlDataParameter("@Ordering_Phone_Number", DbType.String, DBValue.ToDBString(advertisingSupport.OrderingPhoneNumber)));
                paramCol.Add(new SqlDataParameter("@Periodicity", DbType.Int32, DBValue.ToDBInt32(advertisingSupport.Periodicity)));
                paramCol.Add(new SqlDataParameter("@Nb_Draw", DbType.Int32, DBValue.ToDBInt32(advertisingSupport.NbDraw)));
                paramCol.Add(new SqlDataParameter("@Magazine_Price", DbType.Double, DBValue.ToDBFloat(advertisingSupport.MagazinePrice)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(advertisingSupport.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region AdvertisingSupportContact Methods

        private AdvertisingSupportContact LoadAdvertisingSupportContact(DataRow row)
        {
            AdvertisingSupportContact advertisingSupportContact = new AdvertisingSupportContact();

            // Store database values into our business object
            advertisingSupportContact.AdvertisingSupportContactID = DBValue.ToInt32(row["advertising_support_contact_id"]);
            advertisingSupportContact.AdvertisingSupportID = DBValue.ToInt32(row["advertising_support_id"]);
            advertisingSupportContact.FirstName = DBValue.ToString(row["first_name"]);
            advertisingSupportContact.LastName = DBValue.ToString(row["last_name"]);
            advertisingSupportContact.PhoneNumber = DBValue.ToString(row["phone_number"]);
            advertisingSupportContact.FaxNumber = DBValue.ToString(row["fax_number"]);
            advertisingSupportContact.Email = DBValue.ToString(row["email"]);

            // return the filled object
            return advertisingSupportContact;
        }

        public AdvertisingSupportContact[] GetAdvertisingSupportContacts()
        {
            return GetAdvertisingSupportContacts(null);
        }

        private AdvertisingSupportContact[] GetAdvertisingSupportContacts(SqlInterface si)
        {
            AdvertisingSupportContact[] advertisingSupportContacts = null;

            string storedProcName = "efrcrm_get_advertising_support_contacts";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    advertisingSupportContacts = new AdvertisingSupportContact[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            advertisingSupportContacts[i] = LoadAdvertisingSupportContact(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return advertisingSupportContacts;
        }


        public AdvertisingSupportContact GetAdvertisingSupportContactByID(int id)
        {
            return GetAdvertisingSupportContactByID(id, null);
        }

        private AdvertisingSupportContact GetAdvertisingSupportContactByID(int id, SqlInterface si)
        {
            AdvertisingSupportContact advertisingSupportContact = null;

            string storedProcName = "efrcrm_get_advertising_support_contact_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Advertising_Support_Contact_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        advertisingSupportContact = LoadAdvertisingSupportContact(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return advertisingSupportContact;
        }


        public int InsertAdvertisingSupportContact(AdvertisingSupportContact advertisingSupportContact)
        {
            return InsertAdvertisingSupportContact(advertisingSupportContact, null);
        }

        private int InsertAdvertisingSupportContact(AdvertisingSupportContact advertisingSupportContact, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_advertising_support_contact";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Advertising_Support_Contact_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Advertising_Support_ID", DbType.Int32, DBValue.ToDBInt32(advertisingSupportContact.AdvertisingSupportID)));
                paramCol.Add(new SqlDataParameter("@First_Name", DbType.String, DBValue.ToDBString(advertisingSupportContact.FirstName)));
                paramCol.Add(new SqlDataParameter("@Last_Name", DbType.String, DBValue.ToDBString(advertisingSupportContact.LastName)));
                paramCol.Add(new SqlDataParameter("@Phone_Number", DbType.String, DBValue.ToDBString(advertisingSupportContact.PhoneNumber)));
                paramCol.Add(new SqlDataParameter("@Fax_Number", DbType.String, DBValue.ToDBString(advertisingSupportContact.FaxNumber)));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(advertisingSupportContact.Email)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    advertisingSupportContact.AdvertisingSupportContactID = DBValue.ToInt32(paramCol["@Advertising_Support_Contact_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateAdvertisingSupportContact(AdvertisingSupportContact advertisingSupportContact)
        {
            return UpdateAdvertisingSupportContact(advertisingSupportContact, null);
        }

        private int UpdateAdvertisingSupportContact(AdvertisingSupportContact advertisingSupportContact, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_advertising_support_contact";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Advertising_Support_Contact_ID", DbType.Int32, DBValue.ToDBInt32(advertisingSupportContact.AdvertisingSupportContactID)));
                paramCol.Add(new SqlDataParameter("@Advertising_Support_ID", DbType.Int32, DBValue.ToDBInt32(advertisingSupportContact.AdvertisingSupportID)));
                paramCol.Add(new SqlDataParameter("@First_Name", DbType.String, DBValue.ToDBString(advertisingSupportContact.FirstName)));
                paramCol.Add(new SqlDataParameter("@Last_Name", DbType.String, DBValue.ToDBString(advertisingSupportContact.LastName)));
                paramCol.Add(new SqlDataParameter("@Phone_Number", DbType.String, DBValue.ToDBString(advertisingSupportContact.PhoneNumber)));
                paramCol.Add(new SqlDataParameter("@Fax_Number", DbType.String, DBValue.ToDBString(advertisingSupportContact.FaxNumber)));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(advertisingSupportContact.Email)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region AdvertisingSupportType Methods

        private AdvertisingSupportType LoadAdvertisingSupportType(DataRow row)
        {
            AdvertisingSupportType advertisingSupportType = new AdvertisingSupportType();

            // Store database values into our business object
            advertisingSupportType.AdvertisingSupportTypeID = DBValue.ToInt32(row["advertising_support_type_id"]);
            advertisingSupportType.Description = DBValue.ToString(row["description"]);
            advertisingSupportType.Comments = DBValue.ToString(row["comments"]);

            // return the filled object
            return advertisingSupportType;
        }

        public AdvertisingSupportType[] GetAdvertisingSupportTypes()
        {
            return GetAdvertisingSupportTypes(null);
        }

        private AdvertisingSupportType[] GetAdvertisingSupportTypes(SqlInterface si)
        {
            AdvertisingSupportType[] advertisingSupportTypes = null;

            string storedProcName = "efrcrm_get_advertising_support_types";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    advertisingSupportTypes = new AdvertisingSupportType[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            advertisingSupportTypes[i] = LoadAdvertisingSupportType(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return advertisingSupportTypes;
        }


        public AdvertisingSupportType GetAdvertisingSupportTypeByID(int id)
        {
            return GetAdvertisingSupportTypeByID(id, null);
        }

        private AdvertisingSupportType GetAdvertisingSupportTypeByID(int id, SqlInterface si)
        {
            AdvertisingSupportType advertisingSupportType = null;

            string storedProcName = "efrcrm_get_advertising_support_type_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Advertising_Support_Type_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        advertisingSupportType = LoadAdvertisingSupportType(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return advertisingSupportType;
        }


        public int InsertAdvertisingSupportType(AdvertisingSupportType advertisingSupportType)
        {
            return InsertAdvertisingSupportType(advertisingSupportType, null);
        }

        private int InsertAdvertisingSupportType(AdvertisingSupportType advertisingSupportType, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_advertising_support_type";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Advertising_Support_Type_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(advertisingSupportType.Description)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(advertisingSupportType.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    advertisingSupportType.AdvertisingSupportTypeID = DBValue.ToInt32(paramCol["@Advertising_Support_Type_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateAdvertisingSupportType(AdvertisingSupportType advertisingSupportType)
        {
            return UpdateAdvertisingSupportType(advertisingSupportType, null);
        }

        private int UpdateAdvertisingSupportType(AdvertisingSupportType advertisingSupportType, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_advertising_support_type";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Advertising_Support_Type_ID", DbType.Int32, DBValue.ToDBInt32(advertisingSupportType.AdvertisingSupportTypeID)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(advertisingSupportType.Description)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(advertisingSupportType.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region AdvertismentType Methods

        private AdvertismentType LoadAdvertismentType(DataRow row)
        {
            AdvertismentType advertismentType = new AdvertismentType();

            // Store database values into our business object
            advertismentType.AdvertismentTypeID = DBValue.ToInt32(row["advertisment_type_id"]);
            advertismentType.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return advertismentType;
        }

        public AdvertismentType[] GetAdvertismentTypes()
        {
            return GetAdvertismentTypes(null);
        }

        private AdvertismentType[] GetAdvertismentTypes(SqlInterface si)
        {
            AdvertismentType[] advertismentTypes = null;

            string storedProcName = "efrcrm_get_advertisment_types";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    advertismentTypes = new AdvertismentType[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            advertismentTypes[i] = LoadAdvertismentType(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return advertismentTypes;
        }


        public AdvertismentType GetAdvertismentTypeByID(int id)
        {
            return GetAdvertismentTypeByID(id, null);
        }

        private AdvertismentType GetAdvertismentTypeByID(int id, SqlInterface si)
        {
            AdvertismentType advertismentType = null;

            string storedProcName = "efrcrm_get_advertisment_type_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Advertisment_Type_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        advertismentType = LoadAdvertismentType(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return advertismentType;
        }


        public int InsertAdvertismentType(AdvertismentType advertismentType)
        {
            return InsertAdvertismentType(advertismentType, null);
        }

        private int InsertAdvertismentType(AdvertismentType advertismentType, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_advertisment_type";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Advertisment_Type_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(advertismentType.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    advertismentType.AdvertismentTypeID = DBValue.ToInt32(paramCol["@Advertisment_Type_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateAdvertismentType(AdvertismentType advertismentType)
        {
            return UpdateAdvertismentType(advertismentType, null);
        }

        private int UpdateAdvertismentType(AdvertismentType advertismentType, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_advertisment_type";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Advertisment_Type_ID", DbType.Int32, DBValue.ToDBInt32(advertismentType.AdvertismentTypeID)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(advertismentType.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region AliasCountryCode Methods

        private AliasCountryCode LoadAliasCountryCode(DataRow row)
        {
            AliasCountryCode aliasCountryCode = new AliasCountryCode();

            // Store database values into our business object
            aliasCountryCode.InputCountryCode = DBValue.ToString(row["input_country_code"]);
            aliasCountryCode.CountryCode = DBValue.ToString(row["country_code"]);

            // return the filled object
            return aliasCountryCode;
        }

        public AliasCountryCode[] GetAliasCountryCodes()
        {
            return GetAliasCountryCodes(null);
        }

        private AliasCountryCode[] GetAliasCountryCodes(SqlInterface si)
        {
            AliasCountryCode[] aliasCountryCodes = null;

            string storedProcName = "efrcrm_get_alias_country_codes";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    aliasCountryCodes = new AliasCountryCode[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            aliasCountryCodes[i] = LoadAliasCountryCode(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return aliasCountryCodes;
        }



        #endregion

        #region AliasPromotion Methods

        private AliasPromotion LoadAliasPromotion(DataRow row)
        {
            AliasPromotion aliasPromotion = new AliasPromotion();

            // Store database values into our business object
            aliasPromotion.CookieContent = DBValue.ToString(row["cookie_content"]);
            aliasPromotion.PromotionID = DBValue.ToInt32(row["promotion_id"]);

            // return the filled object
            return aliasPromotion;
        }

        public AliasPromotion[] GetAliasPromotions()
        {
            return GetAliasPromotions(null);
        }

        private AliasPromotion[] GetAliasPromotions(SqlInterface si)
        {
            AliasPromotion[] aliasPromotions = null;

            string storedProcName = "efrcrm_get_alias_promotions";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    aliasPromotions = new AliasPromotion[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            aliasPromotions[i] = LoadAliasPromotion(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return aliasPromotions;
        }



        #endregion

        #region AliasState Methods

        private AliasState LoadAliasState(DataRow row)
        {
            AliasState aliasState = new AliasState();

            // Store database values into our business object
            aliasState.InputStateCode = DBValue.ToString(row["input_state_code"]);
            aliasState.StateCode = DBValue.ToString(row["state_code"]);

            // return the filled object
            return aliasState;
        }

        public AliasState[] GetAliasStates()
        {
            return GetAliasStates(null);
        }

        private AliasState[] GetAliasStates(SqlInterface si)
        {
            AliasState[] aliasStates = null;

            string storedProcName = "efrcrm_get_alias_states";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    aliasStates = new AliasState[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            aliasStates[i] = LoadAliasState(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return aliasStates;
        }



        #endregion

        #region ApplicableAdjustmentTax Methods

        private ApplicableAdjustmentTax LoadApplicableAdjustmentTax(DataRow row)
        {
            ApplicableAdjustmentTax applicableAdjustmentTax = new ApplicableAdjustmentTax();

            // Store database values into our business object
            applicableAdjustmentTax.SalesId = DBValue.ToInt32(row["sales_id"]);
            applicableAdjustmentTax.AdjustementNo = DBValue.ToInt32(row["adjustement_no"]);
            applicableAdjustmentTax.TaxCode = DBValue.ToString(row["tax_code"]);
            applicableAdjustmentTax.TaxAmount = DBValue.ToInt16(row["tax_amount"]);

            // return the filled object
            return applicableAdjustmentTax;
        }

        public ApplicableAdjustmentTax[] GetApplicableAdjustmentTaxs()
        {
            return GetApplicableAdjustmentTaxs(null);
        }

        private ApplicableAdjustmentTax[] GetApplicableAdjustmentTaxs(SqlInterface si)
        {
            ApplicableAdjustmentTax[] applicableAdjustmentTaxs = null;

            string storedProcName = "efrcrm_get_applicable_adjustment_taxs";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    applicableAdjustmentTaxs = new ApplicableAdjustmentTax[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            applicableAdjustmentTaxs[i] = LoadApplicableAdjustmentTax(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return applicableAdjustmentTaxs;
        }


        public ApplicableAdjustmentTax GetApplicableAdjustmentTaxByID(int id)
        {
            return GetApplicableAdjustmentTaxByID(id, null);
        }

        private ApplicableAdjustmentTax GetApplicableAdjustmentTaxByID(int id, SqlInterface si)
        {
            ApplicableAdjustmentTax applicableAdjustmentTax = null;

            string storedProcName = "efrcrm_get_applicable_adjustment_tax_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_Id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        applicableAdjustmentTax = LoadApplicableAdjustmentTax(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return applicableAdjustmentTax;
        }


        public int InsertApplicableAdjustmentTax(ApplicableAdjustmentTax applicableAdjustmentTax)
        {
            return InsertApplicableAdjustmentTax(applicableAdjustmentTax, null);
        }

        private int InsertApplicableAdjustmentTax(ApplicableAdjustmentTax applicableAdjustmentTax, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_applicable_adjustment_tax";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_Id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Adjustement_No", DbType.Int32, DBValue.ToDBInt32(applicableAdjustmentTax.AdjustementNo)));
                paramCol.Add(new SqlDataParameter("@Tax_Code", DbType.String, DBValue.ToDBString(applicableAdjustmentTax.TaxCode)));
                paramCol.Add(new SqlDataParameter("@Tax_Amount", DbType.Double, DBValue.ToDBFloat(applicableAdjustmentTax.TaxAmount)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    applicableAdjustmentTax.SalesId = DBValue.ToInt32(paramCol["@Sales_Id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateApplicableAdjustmentTax(ApplicableAdjustmentTax applicableAdjustmentTax)
        {
            return UpdateApplicableAdjustmentTax(applicableAdjustmentTax, null);
        }

        private int UpdateApplicableAdjustmentTax(ApplicableAdjustmentTax applicableAdjustmentTax, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_applicable_adjustment_tax";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_Id", DbType.Int32, DBValue.ToDBInt32(applicableAdjustmentTax.SalesId)));
                paramCol.Add(new SqlDataParameter("@Adjustement_No", DbType.Int32, DBValue.ToDBInt32(applicableAdjustmentTax.AdjustementNo)));
                paramCol.Add(new SqlDataParameter("@Tax_Code", DbType.String, DBValue.ToDBString(applicableAdjustmentTax.TaxCode)));
                paramCol.Add(new SqlDataParameter("@Tax_Amount", DbType.Double, DBValue.ToDBFloat(applicableAdjustmentTax.TaxAmount)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region ApplicableTax Methods

        private ApplicableTax LoadApplicableTax(DataRow row)
        {
            ApplicableTax applicableTax = new ApplicableTax();

            // Store database values into our business object
            applicableTax.SalesID = DBValue.ToInt32(row["sales_id"]);
            applicableTax.TaxCode = DBValue.ToString(row["tax_code"]);
            applicableTax.TaxAmount = DBValue.ToDecimal(row["tax_amount"]);

            // return the filled object
            return applicableTax;
        }

        public ApplicableTax[] GetApplicableTaxs()
        {
            return GetApplicableTaxs(null);
        }

        private ApplicableTax[] GetApplicableTaxs(SqlInterface si)
        {
            ApplicableTax[] applicableTaxs = null;

            string storedProcName = "efrcrm_get_applicable_taxs";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    applicableTaxs = new ApplicableTax[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            applicableTaxs[i] = LoadApplicableTax(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return applicableTaxs;
        }


        public ApplicableTax[] GetApplicableTaxByID(int id)
        {
            return GetApplicableTaxByID(id, null);
        }

        private ApplicableTax[] GetApplicableTaxByID(int id, SqlInterface si)
        {
            ApplicableTax[] applicableTax = null;

            string storedProcName = "efrcrm_get_applicable_tax_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    applicableTax = new EFundraisingCRM.ApplicableTax[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            applicableTax[i] = LoadApplicableTax(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return applicableTax;
        }


        public int InsertApplicableTax(ApplicableTax applicableTax)
        {
            return InsertApplicableTax(applicableTax, null);
        }

        private int InsertApplicableTax(ApplicableTax applicableTax, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_applicable_tax";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToInt32(applicableTax.SalesID)));
                paramCol.Add(new SqlDataParameter("@Tax_Code", DbType.String, DBValue.ToDBString(applicableTax.TaxCode)));
                paramCol.Add(new SqlDataParameter("@Tax_Amount", DbType.Decimal, DBValue.ToDecimal(applicableTax.TaxAmount)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    applicableTax.SalesID = DBValue.ToInt32(paramCol["@Sales_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateApplicableTax(ApplicableTax applicableTax)
        {
            return UpdateApplicableTax(applicableTax, null);
        }

        private int UpdateApplicableTax(ApplicableTax applicableTax, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_applicable_tax";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(applicableTax.SalesID)));
                paramCol.Add(new SqlDataParameter("@Tax_Code", DbType.String, DBValue.ToDBString(applicableTax.TaxCode)));
                paramCol.Add(new SqlDataParameter("@Tax_Amount", DbType.Decimal, DBValue.ToDecimal(applicableTax.TaxAmount)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region ApplicableTaxToAdd Methods

        private ApplicableTaxToAdd LoadApplicableTaxToAdd(DataRow row)
        {
            ApplicableTaxToAdd applicableTaxToAdd = new ApplicableTaxToAdd();

            // Store database values into our business object
            applicableTaxToAdd.TaxCode = DBValue.ToString(row["tax_code"]);
            applicableTaxToAdd.SaleToAddID = DBValue.ToInt32(row["sale_to_add_id"]);
            applicableTaxToAdd.TaxAmount = DBValue.ToInt16(row["tax_amount"]);

            // return the filled object
            return applicableTaxToAdd;
        }

        public ApplicableTaxToAdd[] GetApplicableTaxToAdds()
        {
            return GetApplicableTaxToAdds(null);
        }

        private ApplicableTaxToAdd[] GetApplicableTaxToAdds(SqlInterface si)
        {
            ApplicableTaxToAdd[] applicableTaxToAdds = null;

            string storedProcName = "efrcrm_get_applicable_tax_to_adds";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    applicableTaxToAdds = new ApplicableTaxToAdd[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            applicableTaxToAdds[i] = LoadApplicableTaxToAdd(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return applicableTaxToAdds;
        }



        #endregion

        #region ARActivity Methods

        private ARActivity LoadARActivity(DataRow row)
        {
            ARActivity arActivity = new ARActivity();

            // Store database values into our business object
            arActivity.ARActivityID = DBValue.ToInt32(row["ar_activity_id"]);
            arActivity.ARActivityTypeID = DBValue.ToInt32(row["ar_activity_type_id"]);
            arActivity.SalesID = DBValue.ToInt32(row["sales_id"]);
            arActivity.ARConsultantID = DBValue.ToInt32(row["ar_consultant_id"]);
            arActivity.ARActivityDate = DBValue.ToDateTime(row["ar_activity_date"]);
            arActivity.CompletedDate = DBValue.ToDateTime(row["completed_date"]);
            arActivity.Comments = DBValue.ToString(row["comments"]);

            // return the filled object
            return arActivity;
        }

        public ARActivity[] GetARActivitys()
        {
            return GetARActivitys(null);
        }

        private ARActivity[] GetARActivitys(SqlInterface si)
        {
            ARActivity[] arActivitys = null;

            string storedProcName = "efrcrm_get_ar_activitys";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    arActivitys = new ARActivity[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            arActivitys[i] = LoadARActivity(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return arActivitys;
        }


        public ARActivity GetARActivityByID(int id)
        {
            return GetARActivityByID(id, null);
        }

        private ARActivity GetARActivityByID(int id, SqlInterface si)
        {
            ARActivity arActivity = null;

            string storedProcName = "efrcrm_get_ar_activity_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@AR_Activity_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        arActivity = LoadARActivity(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return arActivity;
        }


        public int InsertARActivity(ARActivity arActivity)
        {
            return InsertARActivity(arActivity, null);
        }

        private int InsertARActivity(ARActivity arActivity, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_ar_activity";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@AR_Activity_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@AR_Activity_Type_ID", DbType.Int32, DBValue.ToDBInt32(arActivity.ARActivityTypeID)));
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(arActivity.SalesID)));
                paramCol.Add(new SqlDataParameter("@AR_Consultant_ID", DbType.Int32, DBValue.ToDBInt32(arActivity.ARConsultantID)));
                paramCol.Add(new SqlDataParameter("@AR_Activity_Date", DbType.DateTime, DBValue.ToDBDateTime(arActivity.ARActivityDate)));
                paramCol.Add(new SqlDataParameter("@Completed_Date", DbType.DateTime, DBValue.ToDBDateTime(arActivity.CompletedDate)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(arActivity.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    arActivity.ARActivityID = DBValue.ToInt32(paramCol["@AR_Activity_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateARActivity(ARActivity arActivity)
        {
            return UpdateARActivity(arActivity, null);
        }

        private int UpdateARActivity(ARActivity arActivity, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_ar_activity";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@AR_Activity_ID", DbType.Int32, DBValue.ToDBInt32(arActivity.ARActivityID)));
                paramCol.Add(new SqlDataParameter("@AR_Activity_Type_ID", DbType.Int32, DBValue.ToDBInt32(arActivity.ARActivityTypeID)));
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(arActivity.SalesID)));
                paramCol.Add(new SqlDataParameter("@AR_Consultant_ID", DbType.Int32, DBValue.ToDBInt32(arActivity.ARConsultantID)));
                paramCol.Add(new SqlDataParameter("@AR_Activity_Date", DbType.DateTime, DBValue.ToDBDateTime(arActivity.ARActivityDate)));
                paramCol.Add(new SqlDataParameter("@Completed_Date", DbType.DateTime, DBValue.ToDBDateTime(arActivity.CompletedDate)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(arActivity.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region ARActivityType Methods

        private ARActivityType LoadARActivityType(DataRow row)
        {
            ARActivityType arActivityType = new ARActivityType();

            // Store database values into our business object
            arActivityType.ARActivityTypeId = DBValue.ToInt32(row["ar_activity_type_id"]);
            arActivityType.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return arActivityType;
        }

        public ARActivityType[] GetARActivityTypes()
        {
            return GetARActivityTypes(null);
        }

        private ARActivityType[] GetARActivityTypes(SqlInterface si)
        {
            ARActivityType[] arActivityTypes = null;

            string storedProcName = "efrcrm_get_ar_activity_types";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    arActivityTypes = new ARActivityType[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            arActivityTypes[i] = LoadARActivityType(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return arActivityTypes;
        }


        public ARActivityType GetARActivityTypeByID(int id)
        {
            return GetARActivityTypeByID(id, null);
        }

        private ARActivityType GetARActivityTypeByID(int id, SqlInterface si)
        {
            ARActivityType arActivityType = null;

            string storedProcName = "efrcrm_get_ar_activity_type_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@AR_Activity_Type_Id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        arActivityType = LoadARActivityType(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return arActivityType;
        }


        public int InsertARActivityType(ARActivityType arActivityType)
        {
            return InsertARActivityType(arActivityType, null);
        }

        private int InsertARActivityType(ARActivityType arActivityType, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_ar_activity_type";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@AR_Activity_Type_Id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(arActivityType.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    arActivityType.ARActivityTypeId = DBValue.ToInt32(paramCol["@AR_Activity_Type_Id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateARActivityType(ARActivityType arActivityType)
        {
            return UpdateARActivityType(arActivityType, null);
        }

        private int UpdateARActivityType(ARActivityType arActivityType, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_ar_activity_type";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@AR_Activity_Type_Id", DbType.Int32, DBValue.ToDBInt32(arActivityType.ARActivityTypeId)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(arActivityType.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region ARConsultant Methods

        private ARConsultant LoadARConsultant(DataRow row)
        {
            ARConsultant arConsultant = new ARConsultant();

            // Store database values into our business object
            arConsultant.ARConsultantID = DBValue.ToInt32(row["ar_consultant_id"]);
            arConsultant.Name = DBValue.ToString(row["name"]);
            arConsultant.Email = DBValue.ToString(row["email"]);
            arConsultant.PhoneExt = DBValue.ToString(row["phone_ext"]);
            arConsultant.IsActive = DBValue.ToInt32(row["is_active"]);
            arConsultant.NtLogin = DBValue.ToString(row["nt_login"]);

            // return the filled object
            return arConsultant;
        }

        public ARConsultant[] GetARConsultants()
        {
            return GetARConsultants(null);
        }

        private ARConsultant[] GetARConsultants(SqlInterface si)
        {
            ARConsultant[] arConsultants = null;

            string storedProcName = "efrcrm_get_ar_consultants";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    arConsultants = new ARConsultant[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            arConsultants[i] = LoadARConsultant(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return arConsultants;
        }


        public ARConsultant GetARConsultantByID(int id)
        {
            return GetARConsultantByID(id, null);
        }

        private ARConsultant GetARConsultantByID(int id, SqlInterface si)
        {
            ARConsultant arConsultant = null;

            string storedProcName = "efrcrm_get_ar_consultant_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@AR_Consultant_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        arConsultant = LoadARConsultant(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return arConsultant;
        }


        public int InsertARConsultant(ARConsultant arConsultant)
        {
            return InsertARConsultant(arConsultant, null);
        }

        private int InsertARConsultant(ARConsultant arConsultant, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_ar_consultant";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@AR_Consultant_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Name", DbType.String, DBValue.ToDBString(arConsultant.Name)));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(arConsultant.Email)));
                paramCol.Add(new SqlDataParameter("@Phone_Ext", DbType.String, DBValue.ToDBString(arConsultant.PhoneExt)));
                paramCol.Add(new SqlDataParameter("@Is_Active", DbType.Int32, DBValue.ToDBInt32(arConsultant.IsActive)));
                paramCol.Add(new SqlDataParameter("@Nt_Login", DbType.String, DBValue.ToDBString(arConsultant.NtLogin)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    arConsultant.ARConsultantID = DBValue.ToInt32(paramCol["@AR_Consultant_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateARConsultant(ARConsultant arConsultant)
        {
            return UpdateARConsultant(arConsultant, null);
        }

        private int UpdateARConsultant(ARConsultant arConsultant, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_ar_consultant";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@AR_Consultant_ID", DbType.Int32, DBValue.ToDBInt32(arConsultant.ARConsultantID)));
                paramCol.Add(new SqlDataParameter("@Name", DbType.String, DBValue.ToDBString(arConsultant.Name)));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(arConsultant.Email)));
                paramCol.Add(new SqlDataParameter("@Phone_Ext", DbType.String, DBValue.ToDBString(arConsultant.PhoneExt)));
                paramCol.Add(new SqlDataParameter("@Is_Active", DbType.Int32, DBValue.ToDBInt32(arConsultant.IsActive)));
                paramCol.Add(new SqlDataParameter("@Nt_Login", DbType.String, DBValue.ToDBString(arConsultant.NtLogin)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region ARStatus Methods

        private ARStatus LoadARStatus(DataRow row)
        {
            ARStatus arStatus = new ARStatus();

            // Store database values into our business object
            arStatus.ARStatusID = DBValue.ToInt32(row["ar_status_id"]);
            arStatus.Description = DBValue.ToString(row["description"]);
            arStatus.CommissionOnHold = DBValue.ToInt32(row["commission_on_hold"]);
            arStatus.CommissionIsPayable = DBValue.ToInt32(row["commission_is_payable"]);
            arStatus.CommissionIsCredited = DBValue.ToInt32(row["commission_is_credited"]);

            // return the filled object
            return arStatus;
        }

        public ARStatus[] GetARStatuss()
        {
            return GetARStatuss(null);
        }

        private ARStatus[] GetARStatuss(SqlInterface si)
        {
            ARStatus[] arStatuss = null;

            string storedProcName = "efrcrm_get_ar_statuss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    arStatuss = new ARStatus[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            arStatuss[i] = LoadARStatus(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return arStatuss;
        }


        public ARStatus GetARStatusByID(int id)
        {
            return GetARStatusByID(id, null);
        }

        private ARStatus GetARStatusByID(int id, SqlInterface si)
        {
            ARStatus arStatus = null;

            string storedProcName = "efrcrm_get_ar_status_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@AR_Status_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        arStatus = LoadARStatus(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return arStatus;
        }


        public int InsertARStatus(ARStatus arStatus)
        {
            return InsertARStatus(arStatus, null);
        }

        private int InsertARStatus(ARStatus arStatus, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_ar_status";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@AR_Status_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(arStatus.Description)));
                paramCol.Add(new SqlDataParameter("@Commission_On_Hold", DbType.Int32, DBValue.ToDBInt32(arStatus.CommissionOnHold)));
                paramCol.Add(new SqlDataParameter("@Commission_Is_Payable", DbType.Int32, DBValue.ToDBInt32(arStatus.CommissionIsPayable)));
                paramCol.Add(new SqlDataParameter("@Commission_Is_Credited", DbType.Int32, DBValue.ToDBInt32(arStatus.CommissionIsCredited)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    arStatus.ARStatusID = DBValue.ToInt32(paramCol["@AR_Status_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateARStatus(ARStatus arStatus)
        {
            return UpdateARStatus(arStatus, null);
        }

        private int UpdateARStatus(ARStatus arStatus, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_ar_status";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@AR_Status_ID", DbType.Int32, DBValue.ToDBInt32(arStatus.ARStatusID)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(arStatus.Description)));
                paramCol.Add(new SqlDataParameter("@Commission_On_Hold", DbType.Int32, DBValue.ToDBInt32(arStatus.CommissionOnHold)));
                paramCol.Add(new SqlDataParameter("@Commission_Is_Payable", DbType.Int32, DBValue.ToDBInt32(arStatus.CommissionIsPayable)));
                paramCol.Add(new SqlDataParameter("@Commission_Is_Credited", DbType.Int32, DBValue.ToDBInt32(arStatus.CommissionIsCredited)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region AreaManager Methods

        private AreaManager LoadAreaManager(DataRow row)
        {
            AreaManager areaManager = new AreaManager();

            // Store database values into our business object
            areaManager.AreaManagerID = DBValue.ToInt32(row["area_manager_id"]);
            areaManager.AreaManagerName = DBValue.ToString(row["area_manager_name"]);

            // return the filled object
            return areaManager;
        }

        public AreaManager[] GetAreaManagers()
        {
            return GetAreaManagers(null);
        }

        private AreaManager[] GetAreaManagers(SqlInterface si)
        {
            AreaManager[] areaManagers = null;

            string storedProcName = "efrcrm_get_area_managers";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    areaManagers = new AreaManager[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            areaManagers[i] = LoadAreaManager(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return areaManagers;
        }


        public AreaManager GetAreaManagerByID(int id)
        {
            return GetAreaManagerByID(id, null);
        }

        private AreaManager GetAreaManagerByID(int id, SqlInterface si)
        {
            AreaManager areaManager = null;

            string storedProcName = "efrcrm_get_area_manager_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Area_Manager_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        areaManager = LoadAreaManager(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return areaManager;
        }


        public int InsertAreaManager(AreaManager areaManager)
        {
            return InsertAreaManager(areaManager, null);
        }

        private int InsertAreaManager(AreaManager areaManager, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_area_manager";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Area_Manager_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Area_Manager_Name", DbType.String, DBValue.ToDBString(areaManager.AreaManagerName)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    areaManager.AreaManagerID = DBValue.ToInt32(paramCol["@Area_Manager_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateAreaManager(AreaManager areaManager)
        {
            return UpdateAreaManager(areaManager, null);
        }

        private int UpdateAreaManager(AreaManager areaManager, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_area_manager";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Area_Manager_ID", DbType.Int32, DBValue.ToDBInt32(areaManager.AreaManagerID)));
                paramCol.Add(new SqlDataParameter("@Area_Manager_Name", DbType.String, DBValue.ToDBString(areaManager.AreaManagerName)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region AssociateMentor Methods

        private AssociateMentor LoadAssociateMentor(DataRow row)
        {
            AssociateMentor associateMentor = new AssociateMentor();

            // Store database values into our business object
            associateMentor.AssociateID = DBValue.ToInt32(row["associate_id"]);
            associateMentor.MentorID = DBValue.ToInt32(row["mentor_id"]);
            associateMentor.StartDate = DBValue.ToDateTime(row["start_date"]);
            associateMentor.EndDate = DBValue.ToDateTime(row["end_date"]);

            // return the filled object
            return associateMentor;
        }

        public AssociateMentor[] GetAssociateMentors()
        {
            return GetAssociateMentors(null);
        }

        private AssociateMentor[] GetAssociateMentors(SqlInterface si)
        {
            AssociateMentor[] associateMentors = null;

            string storedProcName = "efrcrm_get_associate_mentors";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    associateMentors = new AssociateMentor[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            associateMentors[i] = LoadAssociateMentor(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return associateMentors;
        }


        public AssociateMentor GetAssociateMentorByID(int id)
        {
            return GetAssociateMentorByID(id, null);
        }

        private AssociateMentor GetAssociateMentorByID(int id, SqlInterface si)
        {
            AssociateMentor associateMentor = null;

            string storedProcName = "efrcrm_get_associate_mentor_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Associate_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        associateMentor = LoadAssociateMentor(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return associateMentor;
        }


        public int InsertAssociateMentor(AssociateMentor associateMentor)
        {
            return InsertAssociateMentor(associateMentor, null);
        }

        private int InsertAssociateMentor(AssociateMentor associateMentor, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_associate_mentor";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Associate_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Mentor_ID", DbType.Int32, DBValue.ToDBInt32(associateMentor.MentorID)));
                paramCol.Add(new SqlDataParameter("@Start_Date", DbType.DateTime, DBValue.ToDBDateTime(associateMentor.StartDate)));
                paramCol.Add(new SqlDataParameter("@End_Date", DbType.DateTime, DBValue.ToDBDateTime(associateMentor.EndDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    associateMentor.AssociateID = DBValue.ToInt32(paramCol["@Associate_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateAssociateMentor(AssociateMentor associateMentor)
        {
            return UpdateAssociateMentor(associateMentor, null);
        }

        private int UpdateAssociateMentor(AssociateMentor associateMentor, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_associate_mentor";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Associate_ID", DbType.Int32, DBValue.ToDBInt32(associateMentor.AssociateID)));
                paramCol.Add(new SqlDataParameter("@Mentor_ID", DbType.Int32, DBValue.ToDBInt32(associateMentor.MentorID)));
                paramCol.Add(new SqlDataParameter("@Start_Date", DbType.DateTime, DBValue.ToDBDateTime(associateMentor.StartDate)));
                paramCol.Add(new SqlDataParameter("@End_Date", DbType.DateTime, DBValue.ToDBDateTime(associateMentor.EndDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region AssociateMentorComment Methods

        private AssociateMentorComment LoadAssociateMentorComment(DataRow row)
        {
            AssociateMentorComment associateMentorComment = new AssociateMentorComment();

            // Store database values into our business object
            associateMentorComment.AssMentorCommentID = DBValue.ToInt32(row["ass_mentor_comment_id"]);
            associateMentorComment.AssociateID = DBValue.ToInt32(row["associate_id"]);
            associateMentorComment.MentorID = DBValue.ToInt32(row["mentor_id"]);
            associateMentorComment.CommentDate = DBValue.ToDateTime(row["comment_date"]);
            associateMentorComment.Comments = DBValue.ToString(row["comments"]);

            // return the filled object
            return associateMentorComment;
        }

        public AssociateMentorComment[] GetAssociateMentorComments()
        {
            return GetAssociateMentorComments(null);
        }

        private AssociateMentorComment[] GetAssociateMentorComments(SqlInterface si)
        {
            AssociateMentorComment[] associateMentorComments = null;

            string storedProcName = "efrcrm_get_associate_mentor_comments";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    associateMentorComments = new AssociateMentorComment[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            associateMentorComments[i] = LoadAssociateMentorComment(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return associateMentorComments;
        }


        public AssociateMentorComment GetAssociateMentorCommentByID(int id)
        {
            return GetAssociateMentorCommentByID(id, null);
        }

        private AssociateMentorComment GetAssociateMentorCommentByID(int id, SqlInterface si)
        {
            AssociateMentorComment associateMentorComment = null;

            string storedProcName = "efrcrm_get_associate_mentor_comment_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Ass_Mentor_Comment_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        associateMentorComment = LoadAssociateMentorComment(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return associateMentorComment;
        }


        public int InsertAssociateMentorComment(AssociateMentorComment associateMentorComment)
        {
            return InsertAssociateMentorComment(associateMentorComment, null);
        }

        private int InsertAssociateMentorComment(AssociateMentorComment associateMentorComment, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_associate_mentor_comment";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Ass_Mentor_Comment_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Associate_ID", DbType.Int32, DBValue.ToDBInt32(associateMentorComment.AssociateID)));
                paramCol.Add(new SqlDataParameter("@Mentor_ID", DbType.Int32, DBValue.ToDBInt32(associateMentorComment.MentorID)));
                paramCol.Add(new SqlDataParameter("@Comment_Date", DbType.DateTime, DBValue.ToDBDateTime(associateMentorComment.CommentDate)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(associateMentorComment.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    associateMentorComment.AssMentorCommentID = DBValue.ToInt32(paramCol["@Ass_Mentor_Comment_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateAssociateMentorComment(AssociateMentorComment associateMentorComment)
        {
            return UpdateAssociateMentorComment(associateMentorComment, null);
        }

        private int UpdateAssociateMentorComment(AssociateMentorComment associateMentorComment, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_associate_mentor_comment";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Ass_Mentor_Comment_ID", DbType.Int32, DBValue.ToDBInt32(associateMentorComment.AssMentorCommentID)));
                paramCol.Add(new SqlDataParameter("@Associate_ID", DbType.Int32, DBValue.ToDBInt32(associateMentorComment.AssociateID)));
                paramCol.Add(new SqlDataParameter("@Mentor_ID", DbType.Int32, DBValue.ToDBInt32(associateMentorComment.MentorID)));
                paramCol.Add(new SqlDataParameter("@Comment_Date", DbType.DateTime, DBValue.ToDBDateTime(associateMentorComment.CommentDate)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(associateMentorComment.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region AssociateMentorCommission Methods

        private AssociateMentorCommission LoadAssociateMentorCommission(DataRow row)
        {
            AssociateMentorCommission associateMentorCommission = new AssociateMentorCommission();

            // Store database values into our business object
            associateMentorCommission.AssociateId = DBValue.ToInt32(row["associate_id"]);
            associateMentorCommission.MentorId = DBValue.ToInt32(row["mentor_id"]);
            associateMentorCommission.ProductClassId = DBValue.ToInt16(row["product_class_id"]);
            associateMentorCommission.CommissionRate = DBValue.ToInt16(row["commission_rate"]);
            associateMentorCommission.Comments = DBValue.ToString(row["comments"]);

            // return the filled object
            return associateMentorCommission;
        }

        public AssociateMentorCommission[] GetAssociateMentorCommissions()
        {
            return GetAssociateMentorCommissions(null);
        }

        private AssociateMentorCommission[] GetAssociateMentorCommissions(SqlInterface si)
        {
            AssociateMentorCommission[] associateMentorCommissions = null;

            string storedProcName = "efrcrm_get_associate_mentor_commissions";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    associateMentorCommissions = new AssociateMentorCommission[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            associateMentorCommissions[i] = LoadAssociateMentorCommission(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return associateMentorCommissions;
        }


        public AssociateMentorCommission GetAssociateMentorCommissionByID(int id)
        {
            return GetAssociateMentorCommissionByID(id, null);
        }

        private AssociateMentorCommission GetAssociateMentorCommissionByID(int id, SqlInterface si)
        {
            AssociateMentorCommission associateMentorCommission = null;

            string storedProcName = "efrcrm_get_associate_mentor_commission_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Associate_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        associateMentorCommission = LoadAssociateMentorCommission(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return associateMentorCommission;
        }


        public int InsertAssociateMentorCommission(AssociateMentorCommission associateMentorCommission)
        {
            return InsertAssociateMentorCommission(associateMentorCommission, null);
        }

        private int InsertAssociateMentorCommission(AssociateMentorCommission associateMentorCommission, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_associate_mentor_commission";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Associate_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Mentor_id", DbType.Int32, DBValue.ToDBInt32(associateMentorCommission.MentorId)));
                paramCol.Add(new SqlDataParameter("@Product_class_id", DbType.Int16, DBValue.ToDBInt16(associateMentorCommission.ProductClassId)));
                paramCol.Add(new SqlDataParameter("@Commission_rate", DbType.Single, DBValue.ToDBFloat(associateMentorCommission.CommissionRate)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(associateMentorCommission.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    associateMentorCommission.AssociateId = DBValue.ToInt32(paramCol["@Associate_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateAssociateMentorCommission(AssociateMentorCommission associateMentorCommission)
        {
            return UpdateAssociateMentorCommission(associateMentorCommission, null);
        }

        private int UpdateAssociateMentorCommission(AssociateMentorCommission associateMentorCommission, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_associate_mentor_commission";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Associate_id", DbType.Int32, DBValue.ToDBInt32(associateMentorCommission.AssociateId)));
                paramCol.Add(new SqlDataParameter("@Mentor_id", DbType.Int32, DBValue.ToDBInt32(associateMentorCommission.MentorId)));
                paramCol.Add(new SqlDataParameter("@Product_class_id", DbType.Int16, DBValue.ToDBInt16(associateMentorCommission.ProductClassId)));
                paramCol.Add(new SqlDataParameter("@Commission_rate", DbType.Single, DBValue.ToDBFloat(associateMentorCommission.CommissionRate)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(associateMentorCommission.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region Automaton Methods

        private Automaton LoadAutomaton(DataRow row)
        {
            Automaton automaton = new Automaton();

            // Store database values into our business object
            automaton.AutomatonId = DBValue.ToInt32(row["automaton_id"]);
            automaton.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return automaton;
        }

        public Automaton[] GetAutomatons()
        {
            return GetAutomatons(null);
        }

        private Automaton[] GetAutomatons(SqlInterface si)
        {
            Automaton[] automatons = null;

            string storedProcName = "efrcrm_get_automatons";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    automatons = new Automaton[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            automatons[i] = LoadAutomaton(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return automatons;
        }


        public Automaton GetAutomatonByID(int id)
        {
            return GetAutomatonByID(id, null);
        }

        private Automaton GetAutomatonByID(int id, SqlInterface si)
        {
            Automaton automaton = null;

            string storedProcName = "efrcrm_get_automaton_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Automaton_Id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        automaton = LoadAutomaton(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return automaton;
        }


        public int InsertAutomaton(Automaton automaton)
        {
            return InsertAutomaton(automaton, null);
        }

        private int InsertAutomaton(Automaton automaton, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_automaton";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Automaton_Id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(automaton.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    automaton.AutomatonId = DBValue.ToInt32(paramCol["@Automaton_Id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateAutomaton(Automaton automaton)
        {
            return UpdateAutomaton(automaton, null);
        }

        private int UpdateAutomaton(Automaton automaton, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_automaton";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Automaton_Id", DbType.Int32, DBValue.ToDBInt32(automaton.AutomatonId)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(automaton.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region AutomatonFunction Methods

        private AutomatonFunction LoadAutomatonFunction(DataRow row)
        {
            AutomatonFunction automatonFunction = new AutomatonFunction();

            // Store database values into our business object
            automatonFunction.AutomatonFunctionId = DBValue.ToInt32(row["automaton_function_id"]);
            automatonFunction.FunctionName = DBValue.ToString(row["function_name"]);
            automatonFunction.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return automatonFunction;
        }

        public AutomatonFunction[] GetAutomatonFunctions()
        {
            return GetAutomatonFunctions(null);
        }

        private AutomatonFunction[] GetAutomatonFunctions(SqlInterface si)
        {
            AutomatonFunction[] automatonFunctions = null;

            string storedProcName = "efrcrm_get_automaton_functions";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    automatonFunctions = new AutomatonFunction[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            automatonFunctions[i] = LoadAutomatonFunction(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return automatonFunctions;
        }


        public AutomatonFunction GetAutomatonFunctionByID(int id)
        {
            return GetAutomatonFunctionByID(id, null);
        }

        private AutomatonFunction GetAutomatonFunctionByID(int id, SqlInterface si)
        {
            AutomatonFunction automatonFunction = null;

            string storedProcName = "efrcrm_get_automaton_function_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Automaton_Function_Id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        automatonFunction = LoadAutomatonFunction(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return automatonFunction;
        }


        public int InsertAutomatonFunction(AutomatonFunction automatonFunction)
        {
            return InsertAutomatonFunction(automatonFunction, null);
        }

        private int InsertAutomatonFunction(AutomatonFunction automatonFunction, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_automaton_function";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Automaton_Function_Id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Function_Name", DbType.String, DBValue.ToDBString(automatonFunction.FunctionName)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(automatonFunction.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    automatonFunction.AutomatonFunctionId = DBValue.ToInt32(paramCol["@Automaton_Function_Id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateAutomatonFunction(AutomatonFunction automatonFunction)
        {
            return UpdateAutomatonFunction(automatonFunction, null);
        }

        private int UpdateAutomatonFunction(AutomatonFunction automatonFunction, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_automaton_function";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Automaton_Function_Id", DbType.Int32, DBValue.ToDBInt32(automatonFunction.AutomatonFunctionId)));
                paramCol.Add(new SqlDataParameter("@Function_Name", DbType.String, DBValue.ToDBString(automatonFunction.FunctionName)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(automatonFunction.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region AutomatonShippingStatus Methods

        private AutomatonShippingStatus LoadAutomatonShippingStatus(DataRow row)
        {
            AutomatonShippingStatus automatonShippingStatus = new AutomatonShippingStatus();

            // Store database values into our business object
            automatonShippingStatus.FromStatusID = DBValue.ToInt32(row["from_status_id"]);
            automatonShippingStatus.ToStatusID = DBValue.ToInt32(row["to_status_id"]);

            // return the filled object
            return automatonShippingStatus;
        }

        public AutomatonShippingStatus[] GetAutomatonShippingStatuss()
        {
            return GetAutomatonShippingStatuss(null);
        }

        private AutomatonShippingStatus[] GetAutomatonShippingStatuss(SqlInterface si)
        {
            AutomatonShippingStatus[] automatonShippingStatuss = null;

            string storedProcName = "efrcrm_get_automaton_shipping_statuss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    automatonShippingStatuss = new AutomatonShippingStatus[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            automatonShippingStatuss[i] = LoadAutomatonShippingStatus(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return automatonShippingStatuss;
        }


        public AutomatonShippingStatus GetAutomatonShippingStatusByID(int id)
        {
            return GetAutomatonShippingStatusByID(id, null);
        }

        private AutomatonShippingStatus GetAutomatonShippingStatusByID(int id, SqlInterface si)
        {
            AutomatonShippingStatus automatonShippingStatus = null;

            string storedProcName = "efrcrm_get_automaton_shipping_status_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@From_Status_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        automatonShippingStatus = LoadAutomatonShippingStatus(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return automatonShippingStatus;
        }


        public int InsertAutomatonShippingStatus(AutomatonShippingStatus automatonShippingStatus)
        {
            return InsertAutomatonShippingStatus(automatonShippingStatus, null);
        }

        private int InsertAutomatonShippingStatus(AutomatonShippingStatus automatonShippingStatus, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_automaton_shipping_status";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@From_Status_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@To_Status_ID", DbType.Int32, DBValue.ToDBInt32(automatonShippingStatus.ToStatusID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    automatonShippingStatus.FromStatusID = DBValue.ToInt32(paramCol["@From_Status_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateAutomatonShippingStatus(AutomatonShippingStatus automatonShippingStatus)
        {
            return UpdateAutomatonShippingStatus(automatonShippingStatus, null);
        }

        private int UpdateAutomatonShippingStatus(AutomatonShippingStatus automatonShippingStatus, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_automaton_shipping_status";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@From_Status_ID", DbType.Int32, DBValue.ToDBInt32(automatonShippingStatus.FromStatusID)));
                paramCol.Add(new SqlDataParameter("@To_Status_ID", DbType.Int32, DBValue.ToDBInt32(automatonShippingStatus.ToStatusID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region AutomatonState Methods

        private AutomatonState LoadAutomatonState(DataRow row)
        {
            AutomatonState automatonState = new AutomatonState();

            // Store database values into our business object
            automatonState.AutomatonId = DBValue.ToInt32(row["automaton_id"]);
            automatonState.StateId = DBValue.ToInt32(row["state_id"]);
            automatonState.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return automatonState;
        }

        public AutomatonState[] GetAutomatonStates()
        {
            return GetAutomatonStates(null);
        }

        private AutomatonState[] GetAutomatonStates(SqlInterface si)
        {
            AutomatonState[] automatonStates = null;

            string storedProcName = "efrcrm_get_automaton_states";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    automatonStates = new AutomatonState[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            automatonStates[i] = LoadAutomatonState(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return automatonStates;
        }


        public AutomatonState GetAutomatonStateByID(int id)
        {
            return GetAutomatonStateByID(id, null);
        }

        private AutomatonState GetAutomatonStateByID(int id, SqlInterface si)
        {
            AutomatonState automatonState = null;

            string storedProcName = "efrcrm_get_automaton_state_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Automaton_Id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        automatonState = LoadAutomatonState(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return automatonState;
        }


        public int InsertAutomatonState(AutomatonState automatonState)
        {
            return InsertAutomatonState(automatonState, null);
        }

        private int InsertAutomatonState(AutomatonState automatonState, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_automaton_state";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Automaton_Id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@State_Id", DbType.Int32, DBValue.ToDBInt32(automatonState.StateId)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(automatonState.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    automatonState.AutomatonId = DBValue.ToInt32(paramCol["@Automaton_Id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateAutomatonState(AutomatonState automatonState)
        {
            return UpdateAutomatonState(automatonState, null);
        }

        private int UpdateAutomatonState(AutomatonState automatonState, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_automaton_state";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Automaton_Id", DbType.Int32, DBValue.ToDBInt32(automatonState.AutomatonId)));
                paramCol.Add(new SqlDataParameter("@State_Id", DbType.Int32, DBValue.ToDBInt32(automatonState.StateId)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(automatonState.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region AutomatonTransition Methods

        private AutomatonTransition LoadAutomatonTransition(DataRow row)
        {
            AutomatonTransition automatonTransition = new AutomatonTransition();

            // Store database values into our business object
            automatonTransition.AutomatonId = DBValue.ToInt32(row["automaton_id"]);
            automatonTransition.StateToId = DBValue.ToInt32(row["state_to_id"]);
            automatonTransition.StateFromId = DBValue.ToInt32(row["state_from_id"]);
            automatonTransition.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return automatonTransition;
        }

        public AutomatonTransition[] GetAutomatonTransitions()
        {
            return GetAutomatonTransitions(null);
        }

        private AutomatonTransition[] GetAutomatonTransitions(SqlInterface si)
        {
            AutomatonTransition[] automatonTransitions = null;

            string storedProcName = "efrcrm_get_automaton_transitions";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    automatonTransitions = new AutomatonTransition[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            automatonTransitions[i] = LoadAutomatonTransition(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return automatonTransitions;
        }


        public AutomatonTransition GetAutomatonTransitionByID(int id)
        {
            return GetAutomatonTransitionByID(id, null);
        }

        private AutomatonTransition GetAutomatonTransitionByID(int id, SqlInterface si)
        {
            AutomatonTransition automatonTransition = null;

            string storedProcName = "efrcrm_get_automaton_transition_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Automaton_Id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        automatonTransition = LoadAutomatonTransition(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return automatonTransition;
        }


        public int InsertAutomatonTransition(AutomatonTransition automatonTransition)
        {
            return InsertAutomatonTransition(automatonTransition, null);
        }

        private int InsertAutomatonTransition(AutomatonTransition automatonTransition, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_automaton_transition";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Automaton_Id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@State_To_Id", DbType.Int32, DBValue.ToDBInt32(automatonTransition.StateToId)));
                paramCol.Add(new SqlDataParameter("@State_From_Id", DbType.Int32, DBValue.ToDBInt32(automatonTransition.StateFromId)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(automatonTransition.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    automatonTransition.AutomatonId = DBValue.ToInt32(paramCol["@Automaton_Id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateAutomatonTransition(AutomatonTransition automatonTransition)
        {
            return UpdateAutomatonTransition(automatonTransition, null);
        }

        private int UpdateAutomatonTransition(AutomatonTransition automatonTransition, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_automaton_transition";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Automaton_Id", DbType.Int32, DBValue.ToDBInt32(automatonTransition.AutomatonId)));
                paramCol.Add(new SqlDataParameter("@State_To_Id", DbType.Int32, DBValue.ToDBInt32(automatonTransition.StateToId)));
                paramCol.Add(new SqlDataParameter("@State_From_Id", DbType.Int32, DBValue.ToDBInt32(automatonTransition.StateFromId)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(automatonTransition.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region AutomatonTransitionFunction Methods

        private AutomatonTransitionFunction LoadAutomatonTransitionFunction(DataRow row)
        {
            AutomatonTransitionFunction automatonTransitionFunction = new AutomatonTransitionFunction();

            // Store database values into our business object
            automatonTransitionFunction.AutomatonId = DBValue.ToInt32(row["automaton_id"]);
            automatonTransitionFunction.StateToId = DBValue.ToInt32(row["state_to_id"]);
            automatonTransitionFunction.StateFromId = DBValue.ToInt32(row["state_from_id"]);
            automatonTransitionFunction.AutomatonFunctionId = DBValue.ToInt32(row["automaton_function_id"]);
            automatonTransitionFunction.Sequence = DBValue.ToInt32(row["sequence"]);

            // return the filled object
            return automatonTransitionFunction;
        }

        public AutomatonTransitionFunction[] GetAutomatonTransitionFunctions()
        {
            return GetAutomatonTransitionFunctions(null);
        }

        private AutomatonTransitionFunction[] GetAutomatonTransitionFunctions(SqlInterface si)
        {
            AutomatonTransitionFunction[] automatonTransitionFunctions = null;

            string storedProcName = "efrcrm_get_automaton_transition_functions";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    automatonTransitionFunctions = new AutomatonTransitionFunction[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            automatonTransitionFunctions[i] = LoadAutomatonTransitionFunction(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return automatonTransitionFunctions;
        }


        public AutomatonTransitionFunction GetAutomatonTransitionFunctionByID(int id)
        {
            return GetAutomatonTransitionFunctionByID(id, null);
        }

        private AutomatonTransitionFunction GetAutomatonTransitionFunctionByID(int id, SqlInterface si)
        {
            AutomatonTransitionFunction automatonTransitionFunction = null;

            string storedProcName = "efrcrm_get_automaton_transition_function_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Automaton_Id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        automatonTransitionFunction = LoadAutomatonTransitionFunction(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return automatonTransitionFunction;
        }


        public int InsertAutomatonTransitionFunction(AutomatonTransitionFunction automatonTransitionFunction)
        {
            return InsertAutomatonTransitionFunction(automatonTransitionFunction, null);
        }

        private int InsertAutomatonTransitionFunction(AutomatonTransitionFunction automatonTransitionFunction, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_automaton_transition_function";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Automaton_Id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@State_To_Id", DbType.Int32, DBValue.ToDBInt32(automatonTransitionFunction.StateToId)));
                paramCol.Add(new SqlDataParameter("@State_From_Id", DbType.Int32, DBValue.ToDBInt32(automatonTransitionFunction.StateFromId)));
                paramCol.Add(new SqlDataParameter("@Automaton_Function_Id", DbType.Int32, DBValue.ToDBInt32(automatonTransitionFunction.AutomatonFunctionId)));
                paramCol.Add(new SqlDataParameter("@Sequence", DbType.Int32, DBValue.ToDBInt32(automatonTransitionFunction.Sequence)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    automatonTransitionFunction.AutomatonId = DBValue.ToInt32(paramCol["@Automaton_Id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateAutomatonTransitionFunction(AutomatonTransitionFunction automatonTransitionFunction)
        {
            return UpdateAutomatonTransitionFunction(automatonTransitionFunction, null);
        }

        private int UpdateAutomatonTransitionFunction(AutomatonTransitionFunction automatonTransitionFunction, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_automaton_transition_function";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Automaton_Id", DbType.Int32, DBValue.ToDBInt32(automatonTransitionFunction.AutomatonId)));
                paramCol.Add(new SqlDataParameter("@State_To_Id", DbType.Int32, DBValue.ToDBInt32(automatonTransitionFunction.StateToId)));
                paramCol.Add(new SqlDataParameter("@State_From_Id", DbType.Int32, DBValue.ToDBInt32(automatonTransitionFunction.StateFromId)));
                paramCol.Add(new SqlDataParameter("@Automaton_Function_Id", DbType.Int32, DBValue.ToDBInt32(automatonTransitionFunction.AutomatonFunctionId)));
                paramCol.Add(new SqlDataParameter("@Sequence", DbType.Int32, DBValue.ToDBInt32(automatonTransitionFunction.Sequence)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region Bank Methods

        private Bank LoadBank(DataRow row)
        {
            Bank bank = new Bank();

            // Store database values into our business object
            bank.BankID = DBValue.ToInt32(row["bank_id"]);
            bank.Name = DBValue.ToString(row["name"]);
            bank.Contact = DBValue.ToString(row["contact"]);
            bank.StreetAddress = DBValue.ToString(row["street_address"]);
            bank.StateCode = DBValue.ToString(row["state_code"]);
            bank.City = DBValue.ToString(row["city"]);
            bank.ZipCode = DBValue.ToString(row["zip_code"]);
            bank.CountryCode = DBValue.ToString(row["country_code"]);
            bank.Telephone = DBValue.ToString(row["telephone"]);
            bank.Fax = DBValue.ToString(row["fax"]);

            // return the filled object
            return bank;
        }

        public Bank[] GetBanks()
        {
            return GetBanks(null);
        }

        private Bank[] GetBanks(SqlInterface si)
        {
            Bank[] banks = null;

            string storedProcName = "efrcrm_get_banks";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    banks = new Bank[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            banks[i] = LoadBank(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return banks;
        }


        public Bank GetBankByID(int id)
        {
            return GetBankByID(id, null);
        }

        private Bank GetBankByID(int id, SqlInterface si)
        {
            Bank bank = null;

            string storedProcName = "efrcrm_get_bank_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Bank_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        bank = LoadBank(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return bank;
        }


        public int InsertBank(Bank bank)
        {
            return InsertBank(bank, null);
        }

        private int InsertBank(Bank bank, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_bank";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Bank_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Name", DbType.String, DBValue.ToDBString(bank.Name)));
                paramCol.Add(new SqlDataParameter("@Contact", DbType.String, DBValue.ToDBString(bank.Contact)));
                paramCol.Add(new SqlDataParameter("@Street_Address", DbType.String, DBValue.ToDBString(bank.StreetAddress)));
                paramCol.Add(new SqlDataParameter("@State_Code", DbType.String, DBValue.ToDBString(bank.StateCode)));
                paramCol.Add(new SqlDataParameter("@City", DbType.String, DBValue.ToDBString(bank.City)));
                paramCol.Add(new SqlDataParameter("@Zip_Code", DbType.String, DBValue.ToDBString(bank.ZipCode)));
                paramCol.Add(new SqlDataParameter("@Country_Code", DbType.String, DBValue.ToDBString(bank.CountryCode)));
                paramCol.Add(new SqlDataParameter("@Telephone", DbType.String, DBValue.ToDBString(bank.Telephone)));
                paramCol.Add(new SqlDataParameter("@Fax", DbType.String, DBValue.ToDBString(bank.Fax)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    bank.BankID = DBValue.ToInt32(paramCol["@Bank_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateBank(Bank bank)
        {
            return UpdateBank(bank, null);
        }

        private int UpdateBank(Bank bank, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_bank";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Bank_ID", DbType.Int32, DBValue.ToDBInt32(bank.BankID)));
                paramCol.Add(new SqlDataParameter("@Name", DbType.String, DBValue.ToDBString(bank.Name)));
                paramCol.Add(new SqlDataParameter("@Contact", DbType.String, DBValue.ToDBString(bank.Contact)));
                paramCol.Add(new SqlDataParameter("@Street_Address", DbType.String, DBValue.ToDBString(bank.StreetAddress)));
                paramCol.Add(new SqlDataParameter("@State_Code", DbType.String, DBValue.ToDBString(bank.StateCode)));
                paramCol.Add(new SqlDataParameter("@City", DbType.String, DBValue.ToDBString(bank.City)));
                paramCol.Add(new SqlDataParameter("@Zip_Code", DbType.String, DBValue.ToDBString(bank.ZipCode)));
                paramCol.Add(new SqlDataParameter("@Country_Code", DbType.String, DBValue.ToDBString(bank.CountryCode)));
                paramCol.Add(new SqlDataParameter("@Telephone", DbType.String, DBValue.ToDBString(bank.Telephone)));
                paramCol.Add(new SqlDataParameter("@Fax", DbType.String, DBValue.ToDBString(bank.Fax)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region BankAccount Methods

        private BankAccount LoadBankAccount(DataRow row)
        {
            BankAccount bankAccount = new BankAccount();

            // Store database values into our business object
            bankAccount.BankID = DBValue.ToInt32(row["bank_id"]);
            bankAccount.BankAccountNo = DBValue.ToString(row["bank_account_no"]);
            bankAccount.CurrencyCode = DBValue.ToString(row["currency_code"]);
            bankAccount.GLAccountNo = DBValue.ToString(row["gl_account_no"]);

            // return the filled object
            return bankAccount;
        }

        public BankAccount[] GetBankAccounts()
        {
            return GetBankAccounts(null);
        }

        private BankAccount[] GetBankAccounts(SqlInterface si)
        {
            BankAccount[] bankAccounts = null;

            string storedProcName = "efrcrm_get_bank_accounts";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    bankAccounts = new BankAccount[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            bankAccounts[i] = LoadBankAccount(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return bankAccounts;
        }


        public BankAccount GetBankAccountByID(int id)
        {
            return GetBankAccountByID(id, null);
        }

        private BankAccount GetBankAccountByID(int id, SqlInterface si)
        {
            BankAccount bankAccount = null;

            string storedProcName = "efrcrm_get_bank_account_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Bank_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        bankAccount = LoadBankAccount(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return bankAccount;
        }


        public int InsertBankAccount(BankAccount bankAccount)
        {
            return InsertBankAccount(bankAccount, null);
        }

        private int InsertBankAccount(BankAccount bankAccount, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_bank_account";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Bank_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Bank_Account_No", DbType.String, DBValue.ToDBString(bankAccount.BankAccountNo)));
                paramCol.Add(new SqlDataParameter("@Currency_Code", DbType.String, DBValue.ToDBString(bankAccount.CurrencyCode)));
                paramCol.Add(new SqlDataParameter("@GL_Account_No", DbType.String, DBValue.ToDBString(bankAccount.GLAccountNo)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    bankAccount.BankID = DBValue.ToInt32(paramCol["@Bank_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateBankAccount(BankAccount bankAccount)
        {
            return UpdateBankAccount(bankAccount, null);
        }

        private int UpdateBankAccount(BankAccount bankAccount, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_bank_account";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Bank_ID", DbType.Int32, DBValue.ToDBInt32(bankAccount.BankID)));
                paramCol.Add(new SqlDataParameter("@Bank_Account_No", DbType.String, DBValue.ToDBString(bankAccount.BankAccountNo)));
                paramCol.Add(new SqlDataParameter("@Currency_Code", DbType.String, DBValue.ToDBString(bankAccount.CurrencyCode)));
                paramCol.Add(new SqlDataParameter("@GL_Account_No", DbType.String, DBValue.ToDBString(bankAccount.GLAccountNo)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region BeFree Methods

        private BeFree LoadBeFree(DataRow row)
        {
            BeFree befree = new BeFree();

            // Store database values into our business object
            befree.MerchantID = DBValue.ToString(row["merchant_id"]);
            befree.RecordType = DBValue.ToString(row["record_type"]);
            befree.DateInsert = DBValue.ToDateTime(row["date_insert"]);
            befree.SourceID = DBValue.ToString(row["source_id"]);
            befree.TransactionID = DBValue.ToString(row["transaction_id"]);
            befree.ProductKey = DBValue.ToString(row["product_key"]);
            befree.QtyProduct = DBValue.ToInt16(row["qty_product"]);
            befree.UnitPrice = DBValue.ToInt16(row["unit_price"]);
            befree.CurrencyType = DBValue.ToString(row["currency_type"]);
            befree.MerchandiseType = DBValue.ToString(row["merchandise_type"]);

            // return the filled object
            return befree;
        }

        public BeFree[] GetBeFrees()
        {
            return GetBeFrees(null);
        }

        private BeFree[] GetBeFrees(SqlInterface si)
        {
            BeFree[] befrees = null;

            string storedProcName = "efrcrm_get_befrees";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    befrees = new BeFree[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            befrees[i] = LoadBeFree(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return befrees;
        }



        #endregion

        #region BestTimeCall Methods

        private BestTimeCall LoadBestTimeCall(DataRow row)
        {
            BestTimeCall bestTimeCall = new BestTimeCall();

            // Store database values into our business object
            bestTimeCall.BestTimeCallId = DBValue.ToInt16(row["best_time_call_id"]);
            bestTimeCall.BestTimeCallDesc = DBValue.ToString(row["best_time_call_desc"]);

            // return the filled object
            return bestTimeCall;
        }

        public BestTimeCall[] GetBestTimeCalls()
        {
            return GetBestTimeCalls(null);
        }

        private BestTimeCall[] GetBestTimeCalls(SqlInterface si)
        {
            BestTimeCall[] bestTimeCalls = null;

            string storedProcName = "efrcrm_get_best_time_calls";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    bestTimeCalls = new BestTimeCall[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            bestTimeCalls[i] = LoadBestTimeCall(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return bestTimeCalls;
        }



        #endregion

        #region BestTimeCallDesc Methods

        private BestTimeCallDesc LoadBestTimeCallDesc(DataRow row)
        {
            BestTimeCallDesc bestTimeCallDesc = new BestTimeCallDesc();

            // Store database values into our business object
            bestTimeCallDesc.BestTimeCallId = DBValue.ToInt16(row["best_time_call_id"]);
            bestTimeCallDesc.LanguageId = DBValue.ToInt16(row["language_id"]);
            bestTimeCallDesc.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return bestTimeCallDesc;
        }

        public BestTimeCallDesc[] GetBestTimeCallDescs()
        {
            return GetBestTimeCallDescs(null);
        }

        private BestTimeCallDesc[] GetBestTimeCallDescs(SqlInterface si)
        {
            BestTimeCallDesc[] bestTimeCallDescs = null;

            string storedProcName = "efrcrm_get_best_time_call_descs";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    bestTimeCallDescs = new BestTimeCallDesc[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            bestTimeCallDescs[i] = LoadBestTimeCallDesc(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return bestTimeCallDescs;
        }



        #endregion

        #region BillingCompany Methods

        private BillingCompany LoadBillingCompany(DataRow row)
        {
            BillingCompany billingCompany = new BillingCompany();

            // Store database values into our business object
            billingCompany.BillingCompanyID = DBValue.ToInt32(row["billing_company_id"]);
            billingCompany.BillingCompanyCode = DBValue.ToString(row["billing_company_code"]);
            billingCompany.BillingCompanyName = DBValue.ToString(row["billing_company_name"]);
            billingCompany.StreetAddress = DBValue.ToString(row["street_address"]);
            billingCompany.CityName = DBValue.ToString(row["city_name"]);
            billingCompany.StateCode = DBValue.ToString(row["state_code"]);
            billingCompany.ZipCode = DBValue.ToString(row["zip_code"]);
            billingCompany.CountryCode = DBValue.ToString(row["country_code"]);
            billingCompany.TelephoneNumber = DBValue.ToString(row["telephone_number"]);
            billingCompany.Email = DBValue.ToString(row["email"]);
            billingCompany.Web = DBValue.ToString(row["web"]);
            billingCompany.Logo = DBValue.ToString(row["logo"]);
            billingCompany.InvoiceTitle = DBValue.ToString(row["invoice_title"]);
            billingCompany.InvoiceFooter = DBValue.ToString(row["invoice_footer"]);
            billingCompany.CultureID = DBValue.ToInt32(row["culture_id"]);

            // return the filled object
            return billingCompany;
        }

        public BillingCompany[] GetBillingCompanys()
        {
            return GetBillingCompanys(null);
        }

        private BillingCompany[] GetBillingCompanys(SqlInterface si)
        {
            BillingCompany[] billingCompanys = null;

            string storedProcName = "efrcrm_get_billing_companys";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    billingCompanys = new BillingCompany[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            billingCompanys[i] = LoadBillingCompany(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return billingCompanys;
        }


        public DataTable RSBillingCompanyBySaleID(int id)
        {
            return RSBillingCompanyBySaleID(id, null);
        }

        private DataTable RSBillingCompanyBySaleID(int id, SqlInterface si)
        {
            DataTable billingCompany = null;

            string storedProcName = "rs_invoice_header";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@sale_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                billingCompany = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);



            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return billingCompany;
        }



        public BillingCompany GetBillingCompanyByID(int id)
        {
            return GetBillingCompanyByID(id, null);
        }

        private BillingCompany GetBillingCompanyByID(int id, SqlInterface si)
        {
            BillingCompany billingCompany = null;

            string storedProcName = "efrcrm_get_billing_company_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Billing_Company_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        billingCompany = LoadBillingCompany(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return billingCompany;
        }


        public int InsertBillingCompany(BillingCompany billingCompany)
        {
            return InsertBillingCompany(billingCompany, null);
        }

        private int InsertBillingCompany(BillingCompany billingCompany, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_billing_company";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Billing_Company_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Billing_Company_Code", DbType.String, DBValue.ToDBString(billingCompany.BillingCompanyCode)));
                paramCol.Add(new SqlDataParameter("@Billing_Company_Name", DbType.String, DBValue.ToDBString(billingCompany.BillingCompanyName)));
                paramCol.Add(new SqlDataParameter("@Street_Address", DbType.String, DBValue.ToDBString(billingCompany.StreetAddress)));
                paramCol.Add(new SqlDataParameter("@City_Name", DbType.String, DBValue.ToDBString(billingCompany.CityName)));
                paramCol.Add(new SqlDataParameter("@State_Code", DbType.String, DBValue.ToDBString(billingCompany.StateCode)));
                paramCol.Add(new SqlDataParameter("@Zip_Code", DbType.String, DBValue.ToDBString(billingCompany.ZipCode)));
                paramCol.Add(new SqlDataParameter("@Country_Code", DbType.String, DBValue.ToDBString(billingCompany.CountryCode)));
                paramCol.Add(new SqlDataParameter("@Telephone_Number", DbType.String, DBValue.ToDBString(billingCompany.TelephoneNumber)));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(billingCompany.Email)));
                paramCol.Add(new SqlDataParameter("@Web", DbType.String, DBValue.ToDBString(billingCompany.Web)));
                paramCol.Add(new SqlDataParameter("@Logo", DbType.String, DBValue.ToDBString(billingCompany.Logo)));
                paramCol.Add(new SqlDataParameter("@Invoice_Title", DbType.String, DBValue.ToDBString(billingCompany.InvoiceTitle)));
                paramCol.Add(new SqlDataParameter("@Invoice_Footer", DbType.String, DBValue.ToDBString(billingCompany.InvoiceFooter)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    billingCompany.BillingCompanyID = DBValue.ToInt32(paramCol["@Billing_Company_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateBillingCompany(BillingCompany billingCompany)
        {
            return UpdateBillingCompany(billingCompany, null);
        }

        private int UpdateBillingCompany(BillingCompany billingCompany, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_billing_company";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Billing_Company_ID", DbType.Int32, DBValue.ToDBInt32(billingCompany.BillingCompanyID)));
                paramCol.Add(new SqlDataParameter("@Billing_Company_Code", DbType.String, DBValue.ToDBString(billingCompany.BillingCompanyCode)));
                paramCol.Add(new SqlDataParameter("@Billing_Company_Name", DbType.String, DBValue.ToDBString(billingCompany.BillingCompanyName)));
                paramCol.Add(new SqlDataParameter("@Street_Address", DbType.String, DBValue.ToDBString(billingCompany.StreetAddress)));
                paramCol.Add(new SqlDataParameter("@City_Name", DbType.String, DBValue.ToDBString(billingCompany.CityName)));
                paramCol.Add(new SqlDataParameter("@State_Code", DbType.String, DBValue.ToDBString(billingCompany.StateCode)));
                paramCol.Add(new SqlDataParameter("@Zip_Code", DbType.String, DBValue.ToDBString(billingCompany.ZipCode)));
                paramCol.Add(new SqlDataParameter("@Country_Code", DbType.String, DBValue.ToDBString(billingCompany.CountryCode)));
                paramCol.Add(new SqlDataParameter("@Telephone_Number", DbType.String, DBValue.ToDBString(billingCompany.TelephoneNumber)));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(billingCompany.Email)));
                paramCol.Add(new SqlDataParameter("@Web", DbType.String, DBValue.ToDBString(billingCompany.Web)));
                paramCol.Add(new SqlDataParameter("@Logo", DbType.String, DBValue.ToDBString(billingCompany.Logo)));
                paramCol.Add(new SqlDataParameter("@Invoice_Title", DbType.String, DBValue.ToDBString(billingCompany.InvoiceTitle)));
                paramCol.Add(new SqlDataParameter("@Invoice_Footer", DbType.String, DBValue.ToDBString(billingCompany.InvoiceFooter)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region Brand Methods

        private Brand LoadBrand(DataRow row)
        {
            Brand brand = new Brand();

            // Store database values into our business object
            brand.BrandID = DBValue.ToInt32(row["brand_id"]);
            brand.Name = DBValue.ToString(row["name"]);
            brand.Promotion = DBValue.ToString(row["promotion"]);

            // return the filled object
            return brand;
        }

        public Brand[] GetBrands()
        {
            return GetBrands(null);
        }

        private Brand[] GetBrands(SqlInterface si)
        {
            Brand[] brands = null;

            string storedProcName = "efrcrm_get_brands";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    brands = new Brand[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            brands[i] = LoadBrand(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return brands;
        }


        public Brand GetBrandByID(int id)
        {
            return GetBrandByID(id, null);
        }

        private Brand GetBrandByID(int id, SqlInterface si)
        {
            Brand brand = null;

            string storedProcName = "efrcrm_get_brand_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Brand_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        brand = LoadBrand(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return brand;
        }


        public int InsertBrand(Brand brand)
        {
            return InsertBrand(brand, null);
        }

        private int InsertBrand(Brand brand, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_brand";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Brand_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Name", DbType.String, DBValue.ToDBString(brand.Name)));
                paramCol.Add(new SqlDataParameter("@Promotion", DbType.String, DBValue.ToDBString(brand.Promotion)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    brand.BrandID = DBValue.ToInt32(paramCol["@Brand_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateBrand(Brand brand)
        {
            return UpdateBrand(brand, null);
        }

        private int UpdateBrand(Brand brand, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_brand";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Brand_ID", DbType.Int32, DBValue.ToDBInt32(brand.BrandID)));
                paramCol.Add(new SqlDataParameter("@Name", DbType.String, DBValue.ToDBString(brand.Name)));
                paramCol.Add(new SqlDataParameter("@Promotion", DbType.String, DBValue.ToDBString(brand.Promotion)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region BrandCouponSheet Methods

        private BrandCouponSheet LoadBrandCouponSheet(DataRow row)
        {
            BrandCouponSheet brandCouponSheet = new BrandCouponSheet();

            // Store database values into our business object
            brandCouponSheet.BrandID = DBValue.ToInt32(row["brand_id"]);
            brandCouponSheet.CouponSheetID = DBValue.ToInt32(row["coupon_sheet_id"]);
            brandCouponSheet.CouponPerSheet = DBValue.ToInt32(row["coupon_per_sheet"]);

            // return the filled object
            return brandCouponSheet;
        }

        public BrandCouponSheet[] GetBrandCouponSheets()
        {
            return GetBrandCouponSheets(null);
        }

        private BrandCouponSheet[] GetBrandCouponSheets(SqlInterface si)
        {
            BrandCouponSheet[] brandCouponSheets = null;

            string storedProcName = "efrcrm_get_brand_coupon_sheets";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    brandCouponSheets = new BrandCouponSheet[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            brandCouponSheets[i] = LoadBrandCouponSheet(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return brandCouponSheets;
        }


        public BrandCouponSheet GetBrandCouponSheetByID(int id)
        {
            return GetBrandCouponSheetByID(id, null);
        }

        private BrandCouponSheet GetBrandCouponSheetByID(int id, SqlInterface si)
        {
            BrandCouponSheet brandCouponSheet = null;

            string storedProcName = "efrcrm_get_brand_coupon_sheet_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Brand_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        brandCouponSheet = LoadBrandCouponSheet(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return brandCouponSheet;
        }


        public int InsertBrandCouponSheet(BrandCouponSheet brandCouponSheet)
        {
            return InsertBrandCouponSheet(brandCouponSheet, null);
        }

        private int InsertBrandCouponSheet(BrandCouponSheet brandCouponSheet, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_brand_coupon_sheet";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Brand_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Coupon_Sheet_ID", DbType.Int32, DBValue.ToDBInt32(brandCouponSheet.CouponSheetID)));
                paramCol.Add(new SqlDataParameter("@Coupon_Per_Sheet", DbType.Int32, DBValue.ToDBInt32(brandCouponSheet.CouponPerSheet)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    brandCouponSheet.BrandID = DBValue.ToInt32(paramCol["@Brand_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateBrandCouponSheet(BrandCouponSheet brandCouponSheet)
        {
            return UpdateBrandCouponSheet(brandCouponSheet, null);
        }

        private int UpdateBrandCouponSheet(BrandCouponSheet brandCouponSheet, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_brand_coupon_sheet";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Brand_ID", DbType.Int32, DBValue.ToDBInt32(brandCouponSheet.BrandID)));
                paramCol.Add(new SqlDataParameter("@Coupon_Sheet_ID", DbType.Int32, DBValue.ToDBInt32(brandCouponSheet.CouponSheetID)));
                paramCol.Add(new SqlDataParameter("@Coupon_Per_Sheet", DbType.Int32, DBValue.ToDBInt32(brandCouponSheet.CouponPerSheet)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region BrochuresImages Methods

        private BrochuresImages LoadBrochuresImages(DataRow row)
        {
            BrochuresImages brochuresImages = new BrochuresImages();

            // Store database values into our business object
            brochuresImages.BrochuresImagesId = DBValue.ToInt16(row["brochures_images_id"]);
            brochuresImages.ProductId = DBValue.ToInt32(row["product_id"]);
            brochuresImages.BaseFilename = DBValue.ToString(row["base_filename"]);
            brochuresImages.FileExt = DBValue.ToString(row["file_ext"]);
            brochuresImages.NumberPages = DBValue.ToInt16(row["number_pages"]);

            // return the filled object
            return brochuresImages;
        }

        public BrochuresImages[] GetBrochuresImagess()
        {
            return GetBrochuresImagess(null);
        }

        private BrochuresImages[] GetBrochuresImagess(SqlInterface si)
        {
            BrochuresImages[] brochuresImagess = null;

            string storedProcName = "efrcrm_get_brochures_imagess";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    brochuresImagess = new BrochuresImages[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            brochuresImagess[i] = LoadBrochuresImages(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return brochuresImagess;
        }



        #endregion

        #region BusinessRule Methods

        private BusinessRule LoadBusinessRule(DataRow row)
        {
            BusinessRule businessRule = new BusinessRule();

            // Store database values into our business object
            businessRule.BusinessRuleID = DBValue.ToInt32(row["business_rule_id"]);
            businessRule.PartnerID = DBValue.ToInt32(row["partner_id"]);
            businessRule.RuleDescription = DBValue.ToString(row["rule_description"]);
            businessRule.ModuleName = DBValue.ToString(row["module_name"]);
            businessRule.FormName = DBValue.ToString(row["form_name"]);
            businessRule.AccessSubName = DBValue.ToString(row["access_sub_name"]);

            // return the filled object
            return businessRule;
        }

        public BusinessRule[] GetBusinessRules()
        {
            return GetBusinessRules(null);
        }

        private BusinessRule[] GetBusinessRules(SqlInterface si)
        {
            BusinessRule[] businessRules = null;

            string storedProcName = "efrcrm_get_business_rules";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    businessRules = new BusinessRule[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            businessRules[i] = LoadBusinessRule(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return businessRules;
        }


        public BusinessRule GetBusinessRuleByID(int id)
        {
            return GetBusinessRuleByID(id, null);
        }

        private BusinessRule GetBusinessRuleByID(int id, SqlInterface si)
        {
            BusinessRule businessRule = null;

            string storedProcName = "efrcrm_get_business_rule_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Business_Rule_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        businessRule = LoadBusinessRule(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return businessRule;
        }


        public int InsertBusinessRule(BusinessRule businessRule)
        {
            return InsertBusinessRule(businessRule, null);
        }

        private int InsertBusinessRule(BusinessRule businessRule, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_business_rule";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Business_Rule_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Partner_ID", DbType.Int32, DBValue.ToDBInt32(businessRule.PartnerID)));
                paramCol.Add(new SqlDataParameter("@Rule_Description", DbType.String, DBValue.ToDBString(businessRule.RuleDescription)));
                paramCol.Add(new SqlDataParameter("@Module_Name", DbType.String, DBValue.ToDBString(businessRule.ModuleName)));
                paramCol.Add(new SqlDataParameter("@Form_Name", DbType.String, DBValue.ToDBString(businessRule.FormName)));
                paramCol.Add(new SqlDataParameter("@Access_Sub_Name", DbType.String, DBValue.ToDBString(businessRule.AccessSubName)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    businessRule.BusinessRuleID = DBValue.ToInt32(paramCol["@Business_Rule_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateBusinessRule(BusinessRule businessRule)
        {
            return UpdateBusinessRule(businessRule, null);
        }

        private int UpdateBusinessRule(BusinessRule businessRule, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_business_rule";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Business_Rule_ID", DbType.Int32, DBValue.ToDBInt32(businessRule.BusinessRuleID)));
                paramCol.Add(new SqlDataParameter("@Partner_ID", DbType.Int32, DBValue.ToDBInt32(businessRule.PartnerID)));
                paramCol.Add(new SqlDataParameter("@Rule_Description", DbType.String, DBValue.ToDBString(businessRule.RuleDescription)));
                paramCol.Add(new SqlDataParameter("@Module_Name", DbType.String, DBValue.ToDBString(businessRule.ModuleName)));
                paramCol.Add(new SqlDataParameter("@Form_Name", DbType.String, DBValue.ToDBString(businessRule.FormName)));
                paramCol.Add(new SqlDataParameter("@Access_Sub_Name", DbType.String, DBValue.ToDBString(businessRule.AccessSubName)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region CampaignReason Methods

        private CampaignReason LoadCampaignReason(DataRow row)
        {
            CampaignReason campaignReason = new CampaignReason();

            // Store database values into our business object
            campaignReason.CampaignReasonId = DBValue.ToInt16(row["campaign_reason_id"]);
            campaignReason.PartyTypeId = DBValue.ToInt16(row["party_type_id"]);
            campaignReason.CampaignReasonDesc = DBValue.ToString(row["campaign_reason_desc"]);

            // return the filled object
            return campaignReason;
        }

        public CampaignReason[] GetCampaignReasons()
        {
            return GetCampaignReasons(null);
        }

        private CampaignReason[] GetCampaignReasons(SqlInterface si)
        {
            CampaignReason[] campaignReasons = null;

            string storedProcName = "efrcrm_get_campaign_reasons";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    campaignReasons = new CampaignReason[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            campaignReasons[i] = LoadCampaignReason(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return campaignReasons;
        }



        #endregion

        #region CampaignReasonDesc Methods

        private CampaignReasonDesc LoadCampaignReasonDesc(DataRow row)
        {
            CampaignReasonDesc campaignReasonDesc = new CampaignReasonDesc();

            // Store database values into our business object
            campaignReasonDesc.CampaignReasonId = DBValue.ToInt16(row["campaign_reason_id"]);
            campaignReasonDesc.LanguageId = DBValue.ToInt16(row["language_id"]);
            campaignReasonDesc.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return campaignReasonDesc;
        }

        public CampaignReasonDesc[] GetCampaignReasonDescs()
        {
            return GetCampaignReasonDescs(null);
        }

        private CampaignReasonDesc[] GetCampaignReasonDescs(SqlInterface si)
        {
            CampaignReasonDesc[] campaignReasonDescs = null;

            string storedProcName = "efrcrm_get_campaign_reason_descs";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    campaignReasonDescs = new CampaignReasonDesc[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            campaignReasonDescs[i] = LoadCampaignReasonDesc(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return campaignReasonDescs;
        }



        #endregion

        #region CancelationReason Methods

        private CancelationReason LoadCancelationReason(DataRow row)
        {
            CancelationReason cancelationReason = new CancelationReason();

            // Store database values into our business object
            cancelationReason.CancelationReasonId = DBValue.ToInt32(row["cancelation_reason_id"]);
            cancelationReason.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return cancelationReason;
        }

        public CancelationReason[] GetCancelationReasons()
        {
            return GetCancelationReasons(null);
        }

        private CancelationReason[] GetCancelationReasons(SqlInterface si)
        {
            CancelationReason[] cancelationReasons = null;

            string storedProcName = "efrcrm_get_cancelation_reasons";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    cancelationReasons = new CancelationReason[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            cancelationReasons[i] = LoadCancelationReason(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return cancelationReasons;
        }


        public CancelationReason GetCancelationReasonByID(int id)
        {
            return GetCancelationReasonByID(id, null);
        }

        private CancelationReason GetCancelationReasonByID(int id, SqlInterface si)
        {
            CancelationReason cancelationReason = null;

            string storedProcName = "efrcrm_get_cancelation_reason_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Cancelation_Reason_Id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        cancelationReason = LoadCancelationReason(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return cancelationReason;
        }


        public int InsertCancelationReason(CancelationReason cancelationReason)
        {
            return InsertCancelationReason(cancelationReason, null);
        }

        private int InsertCancelationReason(CancelationReason cancelationReason, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_cancelation_reason";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Cancelation_Reason_Id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(cancelationReason.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    cancelationReason.CancelationReasonId = DBValue.ToInt32(paramCol["@Cancelation_Reason_Id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateCancelationReason(CancelationReason cancelationReason)
        {
            return UpdateCancelationReason(cancelationReason, null);
        }

        private int UpdateCancelationReason(CancelationReason cancelationReason, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_cancelation_reason";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Cancelation_Reason_Id", DbType.Int32, DBValue.ToDBInt32(cancelationReason.CancelationReasonId)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(cancelationReason.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region Carrier Methods

        private Carrier LoadCarrier(DataRow row)
        {
            Carrier carrier = new Carrier();

            // Store database values into our business object
            carrier.CarrierId = DBValue.ToInt16(row["carrier_id"]);
            carrier.Description = DBValue.ToString(row["description"]);
            carrier.Active = DBValue.ToBoolean(row["active"]);

            // return the filled object
            return carrier;
        }

        public Carrier[] GetCarriers()
        {
            return GetCarriers(null);
        }

        private Carrier[] GetCarriers(SqlInterface si)
        {
            Carrier[] carriers = null;

            string storedProcName = "efrcrm_get_carriers";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    carriers = new Carrier[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            carriers[i] = LoadCarrier(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return carriers;
        }

        public Carrier GetCarrierByID(int id)
        {
            return GetCarrierByID(id, null);
        }

        private Carrier GetCarrierByID(int id, SqlInterface si)
        {
            Carrier carrier = null;

            string storedProcName = "efrcrm_get_carrier_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Carrier_id", DbType.Int32, ParameterDirection.Input, id));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    if (dt.Rows.Count > 0)
                    {
                        // fill our objects
                        try
                        {
                            carrier = LoadCarrier(dt.Rows[0]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return carrier;
        }


        #endregion

        #region CarrierShippingOption Methods

        private CarrierShippingOption LoadCarrierShippingOption(DataRow row)
        {
            CarrierShippingOption carrierShippingOption = new CarrierShippingOption();

            // Store database values into our business object
            carrierShippingOption.ShippingOptionId = DBValue.ToInt16(row["shipping_option_id"]);
            carrierShippingOption.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return carrierShippingOption;
        }

        public CarrierShippingOption[] GetCarrierShippingOptions()
        {
            return GetCarrierShippingOptions(null);
        }

        private CarrierShippingOption[] GetCarrierShippingOptions(SqlInterface si)
        {
            CarrierShippingOption[] carrierShippingOptions = null;

            string storedProcName = "efrcrm_get_carrier_shipping_options";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    carrierShippingOptions = new CarrierShippingOption[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            carrierShippingOptions[i] = LoadCarrierShippingOption(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return carrierShippingOptions;
        }



        #endregion

        #region CarrierShippingStatus Methods

        private CarrierShippingStatus LoadCarrierShippingStatus(DataRow row)
        {
            CarrierShippingStatus carrierShippingStatus = new CarrierShippingStatus();

            // Store database values into our business object
            carrierShippingStatus.CarrierShippingStatusId = DBValue.ToInt16(row["carrier_shipping_status_id"]);
            carrierShippingStatus.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return carrierShippingStatus;
        }

        public CarrierShippingStatus[] GetCarrierShippingStatuss()
        {
            return GetCarrierShippingStatuss(null);
        }

        private CarrierShippingStatus[] GetCarrierShippingStatuss(SqlInterface si)
        {
            CarrierShippingStatus[] carrierShippingStatuss = null;

            string storedProcName = "efrcrm_get_carrier_shipping_statuss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    carrierShippingStatuss = new CarrierShippingStatus[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            carrierShippingStatuss[i] = LoadCarrierShippingStatus(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return carrierShippingStatuss;
        }



        #endregion

        #region Client Methods

        private Client LoadClient(DataRow row)
        {
            Client client = new Client();

            // Store database values into our business object
            client.ClientSequenceCode = DBValue.ToString(row["client_sequence_code"]);
            client.ClientId = DBValue.ToInt32(row["client_id"]);
            client.OrganizationClassCode = DBValue.ToString(row["organization_class_code"]);
            client.GroupTypeId = DBValue.ToInt16(row["group_type_id"]);
            client.ChannelCode = DBValue.ToString(row["channel_code"]);
            client.PromotionId = DBValue.ToInt32(row["promotion_id"]);
            client.LeadId = DBValue.ToInt32(row["lead_id"]);
            client.DivisionId = DBValue.ToInt16(row["division_id"]);
            client.CsrConsultantId = DBValue.ToInt32(row["csr_consultant_id"]);
            client.TitleId = DBValue.ToInt16(row["title_id"]);
            client.Salutation = DBValue.ToString(row["salutation"]);
            client.FirstName = DBValue.ToString(row["first_name"]);
            client.LastName = DBValue.ToString(row["last_name"]);
            client.Title = DBValue.ToString(row["title"]);
            client.Organization = DBValue.ToString(row["organization"]);
            client.DayPhone = DBValue.ToString(row["day_phone"]);
            client.DayTimeCall = DBValue.ToString(row["day_time_call"]);
            client.EveningPhone = DBValue.ToString(row["evening_phone"]);
            client.EveningTimeCall = DBValue.ToString(row["evening_time_call"]);
            client.Fax = DBValue.ToString(row["fax"]);
            client.Email = DBValue.ToString(row["email"]);
            client.ExtraComment = DBValue.ToString(row["extra_comment"]);
            client.InterestedInAgent = DBValue.ToBoolean(row["interested_in_agent"]);
            client.InterestedInOnline = DBValue.ToBoolean(row["interested_in_online"]);
            client.DayPhoneExt = DBValue.ToString(row["day_phone_ext"]);
            client.EveningPhoneExt = DBValue.ToString(row["evening_phone_ext"]);
            client.OtherPhone = DBValue.ToString(row["other_phone"]);
            client.OtherPhoneExt = DBValue.ToString(row["other_phone_ext"]);

            // return the filled object
            return client;
        }

        public Client GetClientByID(int clientID, string client_sequence_code)
        {

            return GetClientByIDAndSequenceCode(clientID, client_sequence_code, null);
            //			DataTable dt = null;
            //			SqlInterface si = new SqlInterface(dataProvider, connectionString);
            //			try
            //			{
            //				SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
            //				SqlDataParameter sqlPam = new SqlDataParameter("@Client_id", DbType.Int32, clientID);
            //				paramCol.Add(sqlPam);
            //				paramCol.Add(new SqlDataParameter("@client_sequence_code", DbType.String, client_sequence_code));
            //				dt = si.ExecuteFetchDataTable(
            //					@"SELECT *
            //FROM client
            //WHERE Client_id= @Client_id AND client_sequence_code=@client_sequence_code
            //", 
            //					CommandType.Text ,paramCol);
            //			}
            //			catch (Exception ex)
            //			{
            //				throw new  EFundraisingCRMException(string.Format("GetClientById: {0} error", clientID.ToString()), ex);
            //			}
            //			finally
            //			{
            //				si.Close ();
            //			}
            //			if (dt != null && dt.Rows.Count > 0)
            //				return LoadClient(dt.Rows[0]);
            //			else
            //				return null;

        }

        private Client GetClientByIDAndSequenceCode(int clientID, string clientSequenceCode, SqlInterface si)
        {
            DataTable dt = null;
            string storedProcName = "efrcrm_get_client_by_id_and_sequence_code";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Client_id", DbType.Int32, clientID));
                paramCol.Add(new SqlDataParameter("@Client_sequence_code", DbType.String, clientSequenceCode));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);



            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }


            if (dt != null && dt.Rows.Count > 0)
                return LoadClient(dt.Rows[0]);
            else
                return null;
        }


        public Client GetClientByLeadID(int leadID)
        {
            return GetClientByLeadID(leadID, null);
        }



        private Client GetClientByLeadID(int leadID, SqlInterface si)
        {
            DataTable dt = null;
            string storedProcName = "efrcrm_get_client_by_lead_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@lead_id", DbType.Int32, leadID));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);



            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }


            if (dt != null && dt.Rows.Count > 0)
                return LoadClient(dt.Rows[0]);
            else
                return null;
        }

        public Client GetClientByLeadIDAndSequenceCode(int leadID, string clientSequenceCode)
        {
            return GetClientByLeadIDAndSequenceCode(leadID, clientSequenceCode, null);
        }


        private Client GetClientByLeadIDAndSequenceCode(int leadID, string clientSequenceCode, SqlInterface si)
        {
            DataTable dt = null;
            string storedProcName = "efrcrm_get_client_by_id_and_sequence_code";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Client_id", DbType.Int32, leadID));
                paramCol.Add(new SqlDataParameter("@Client_sequence_code", DbType.String, clientSequenceCode));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);



            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }


            if (dt != null && dt.Rows.Count > 0)
                return LoadClient(dt.Rows[0]);
            else
                return null;
        }


        public Client[] GetClients()
        {
            return GetClients(null);
        }

        private Client[] GetClients(SqlInterface si)
        {
            Client[] clients = null;

            string storedProcName = "efrcrm_get_clients";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    clients = new Client[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            clients[i] = LoadClient(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return clients;
        }

        public int InsertClient(Client client)
        {
            return InsertClient(client, null);
        }

        private int InsertClient(Client client, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_client";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@client_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@client_sequence_code", DbType.String, DBValue.ToDBString(client.ClientSequenceCode)));
                paramCol.Add(new SqlDataParameter("@organization_class_code", DbType.String, DBValue.ToDBString(client.OrganizationClassCode)));
                paramCol.Add(new SqlDataParameter("@group_type_id", DbType.Int16, DBValue.ToDBInt16(client.GroupTypeId)));
                paramCol.Add(new SqlDataParameter("@channel_code", DbType.String, DBValue.ToDBString(client.ChannelCode)));
                paramCol.Add(new SqlDataParameter("@promotion_id", DbType.Int32, DBValue.ToDBInt32(client.PromotionId)));
                paramCol.Add(new SqlDataParameter("@lead_id", DbType.Int32, DBValue.ToDBInt32(client.LeadId)));
                paramCol.Add(new SqlDataParameter("@division_id", DbType.Int16, DBValue.ToDBInt16(client.DivisionId)));
                paramCol.Add(new SqlDataParameter("@csr_consultant_id", DbType.Int32, DBValue.ToDBInt32(client.CsrConsultantId)));
                paramCol.Add(new SqlDataParameter("@title_id", DbType.Int16, DBValue.ToDBInt16(client.TitleId)));
                paramCol.Add(new SqlDataParameter("@salutation", DbType.String, DBValue.ToDBString(client.Salutation)));
                paramCol.Add(new SqlDataParameter("@first_name", DbType.String, DBValue.ToDBString(client.FirstName)));
                paramCol.Add(new SqlDataParameter("@last_name", DbType.String, DBValue.ToDBString(client.LastName)));
                paramCol.Add(new SqlDataParameter("@title", DbType.String, DBValue.ToDBString(client.Title)));
                paramCol.Add(new SqlDataParameter("@organization", DbType.String, DBValue.ToDBString(client.Organization)));
                paramCol.Add(new SqlDataParameter("@day_phone", DbType.String, DBValue.ToDBString(client.DayPhone)));
                paramCol.Add(new SqlDataParameter("@day_time_call", DbType.String, DBValue.ToDBString(client.DayTimeCall)));
                paramCol.Add(new SqlDataParameter("@evening_phone", DbType.String, DBValue.ToDBString(client.EveningPhone)));
                paramCol.Add(new SqlDataParameter("@evening_time_call", DbType.String, DBValue.ToDBString(client.EveningTimeCall)));
                paramCol.Add(new SqlDataParameter("@fax", DbType.String, DBValue.ToDBString(client.Fax)));
                paramCol.Add(new SqlDataParameter("@email", DbType.String, DBValue.ToDBString(client.Email)));
                paramCol.Add(new SqlDataParameter("@extra_comment", DbType.String, DBValue.ToDBString(client.ExtraComment)));
                paramCol.Add(new SqlDataParameter("@interested_in_agent", DbType.Boolean, DBValue.ToDBBoolean(client.InterestedInAgent)));
                paramCol.Add(new SqlDataParameter("@interested_in_online", DbType.Boolean, DBValue.ToDBBoolean(client.InterestedInOnline)));
                paramCol.Add(new SqlDataParameter("@day_phone_ext", DbType.String, DBValue.ToDBString(client.DayPhoneExt)));
                paramCol.Add(new SqlDataParameter("@evening_phone_ext", DbType.String, DBValue.ToDBString(client.EveningPhoneExt)));
                paramCol.Add(new SqlDataParameter("@other_phone", DbType.String, DBValue.ToDBString(client.OtherPhone)));
                paramCol.Add(new SqlDataParameter("@other_phone_ext", DbType.String, DBValue.ToDBString(client.OtherPhoneExt)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    client.ClientId = DBValue.ToInt32(paramCol["@client_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }
            }
            catch (System.Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return client.ClientId;
        }

        public int UpdateClient(Client client)
        {
            return UpdateClient(client, null);
        }

        private int UpdateClient(Client client, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_client";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@client_id", DbType.Int32, DBValue.ToDBInt32(client.ClientId)));
                paramCol.Add(new SqlDataParameter("@client_sequence_code", DbType.String, DBValue.ToDBString(client.ClientSequenceCode)));
                paramCol.Add(new SqlDataParameter("@organization_class_code", DbType.String, DBValue.ToDBString(client.OrganizationClassCode)));
                paramCol.Add(new SqlDataParameter("@group_type_id", DbType.Int16, DBValue.ToDBInt16(client.GroupTypeId)));
                paramCol.Add(new SqlDataParameter("@channel_code", DbType.String, DBValue.ToDBString(client.ChannelCode)));
                paramCol.Add(new SqlDataParameter("@promotion_id", DbType.Int32, DBValue.ToDBInt32(client.PromotionId)));
                paramCol.Add(new SqlDataParameter("@lead_id", DbType.Int32, DBValue.ToDBInt32(client.LeadId)));
                paramCol.Add(new SqlDataParameter("@division_id", DbType.Int16, DBValue.ToDBInt16(client.DivisionId)));
                paramCol.Add(new SqlDataParameter("@csr_consultant_id", DbType.Int32, DBValue.ToDBInt32(client.CsrConsultantId)));
                paramCol.Add(new SqlDataParameter("@title_id", DbType.Int16, DBValue.ToDBInt16(client.TitleId)));
                paramCol.Add(new SqlDataParameter("@salutation", DbType.String, DBValue.ToDBString(client.Salutation)));
                paramCol.Add(new SqlDataParameter("@first_name", DbType.String, DBValue.ToDBString(client.FirstName)));
                paramCol.Add(new SqlDataParameter("@last_name", DbType.String, DBValue.ToDBString(client.LastName)));
                paramCol.Add(new SqlDataParameter("@title", DbType.String, DBValue.ToDBString(client.Title)));
                paramCol.Add(new SqlDataParameter("@organization", DbType.String, DBValue.ToDBString(client.Organization)));
                paramCol.Add(new SqlDataParameter("@day_phone", DbType.String, DBValue.ToDBString(client.DayPhone)));
                paramCol.Add(new SqlDataParameter("@day_time_call", DbType.String, DBValue.ToDBString(client.DayTimeCall)));
                paramCol.Add(new SqlDataParameter("@evening_phone", DbType.String, DBValue.ToDBString(client.EveningPhone)));
                paramCol.Add(new SqlDataParameter("@evening_time_call", DbType.String, DBValue.ToDBString(client.EveningTimeCall)));
                paramCol.Add(new SqlDataParameter("@fax", DbType.String, DBValue.ToDBString(client.Fax)));
                paramCol.Add(new SqlDataParameter("@email", DbType.String, DBValue.ToDBString(client.Email)));
                paramCol.Add(new SqlDataParameter("@extra_comment", DbType.String, DBValue.ToDBString(client.ExtraComment)));
                paramCol.Add(new SqlDataParameter("@interested_in_agent", DbType.Boolean, DBValue.ToDBBoolean(client.InterestedInAgent)));
                paramCol.Add(new SqlDataParameter("@interested_in_online", DbType.Boolean, DBValue.ToDBBoolean(client.InterestedInOnline)));
                paramCol.Add(new SqlDataParameter("@day_phone_ext", DbType.String, DBValue.ToDBString(client.DayPhoneExt)));
                paramCol.Add(new SqlDataParameter("@evening_phone_ext", DbType.String, DBValue.ToDBString(client.EveningPhoneExt)));
                paramCol.Add(new SqlDataParameter("@other_phone", DbType.String, DBValue.ToDBString(client.OtherPhone)));
                paramCol.Add(new SqlDataParameter("@other_phone_ext", DbType.String, DBValue.ToDBString(client.OtherPhoneExt)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    client.ClientId = DBValue.ToInt32(paramCol["@client_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }
            }
            catch (System.Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public ClientAddress GetAddressByClientIdAndSequence(int id, string clientSeqCode)
        {
            return GetAddressByClientIdAndSequence(id, clientSeqCode, null);
        }

        public ClientAddress GetClientAddressByIdSequenceAddressType(int clientID, string clientSequenceCode, string addressType)
        {
            return GetClientAddressByIdSequenceAddressType(clientID, clientSequenceCode, addressType, null);
        }

        private ClientAddress GetClientAddressByIdSequenceAddressType(int clientID, string clientSequenceCode, string addressType, SqlInterface si)
        {
            ClientAddress clientAddresss = null;

            string storedProcName = "efrcrm_get_address_by_client_id_sequence";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Client_id", DbType.Int32, clientID));
                paramCol.Add(new SqlDataParameter("@Client_sequence_code", DbType.String, clientSequenceCode));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                DataRow[] rows = dt.Select(string.Format("Address_type='{0}'", addressType));
                if (rows != null && rows.Length > 0)
                    clientAddresss = LoadClientAddress(rows[0]);


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return clientAddresss;
        }


        private ClientAddress GetAddressByClientIdAndSequence(int clientID, string clientSequenceCode, SqlInterface si)
        {
            ClientAddress clientAddresss = null;

            string storedProcName = "efrcrm_get_address_by_client_id_sequence";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Client_id", DbType.Int32, clientID));
                paramCol.Add(new SqlDataParameter("@Client_sequence_code", DbType.String, clientSequenceCode));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    if (dt.Rows.Count > 0)
                    {
                        clientAddresss = LoadClientAddress(dt.Rows[0]);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return clientAddresss;
        }



        private ClientAddress[] GetAllAddressByClientIdAndSequence(int clientID, string clientSequenceCode, SqlInterface si)
        {
            ClientAddress[] clientAddress = null;

            string storedProcName = "efrcrm_get_address_by_client_id_sequence";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Client_id", DbType.Int32, clientID));
                paramCol.Add(new SqlDataParameter("@Client_sequence_code", DbType.String, clientSequenceCode));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {

                    clientAddress = new ClientAddress[dt.Rows.Count];
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {

                        // fill our objects
                        try
                        {
                            clientAddress[i] = LoadClientAddress(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return clientAddress;
        }


        #endregion

        #region ClientActivity Methods

        private ClientActivity LoadClientActivity(DataRow row)
        {
            ClientActivity clientActivity = new ClientActivity();

            // Store database values into our business object
            clientActivity.ClientActivityId = DBValue.ToInt32(row["client_activity_id"]);
            clientActivity.ClientId = DBValue.ToInt32(row["client_id"]);
            clientActivity.ClientSequenceCode = DBValue.ToString(row["client_sequence_code"]);
            clientActivity.ClientActivityTypeId = DBValue.ToInt16(row["client_activity_type_id"]);
            clientActivity.ClientActivityDate = DBValue.ToDateTime(row["client_activity_date"]);
            clientActivity.CompletedDate = DBValue.ToDateTime(row["completed_date"]);
            clientActivity.Comments = DBValue.ToString(row["comments"]);
            clientActivity.IsContacted = DBValue.ToBoolean(row["is_contacted"]);

            // return the filled object
            return clientActivity;
        }

        public ClientActivity[] GetClientActivitys()
        {
            return GetClientActivitys(null);
        }

        private ClientActivity[] GetClientActivitys(SqlInterface si)
        {
            ClientActivity[] clientActivitys = null;

            string storedProcName = "efrcrm_get_client_activitys";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    clientActivitys = new ClientActivity[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            clientActivitys[i] = LoadClientActivity(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return clientActivitys;
        }


        public ClientActivity GetClientActivityByID(int id)
        {
            return GetClientActivityByID(id, null);
        }

        private ClientActivity GetClientActivityByID(int id, SqlInterface si)
        {
            ClientActivity clientActivity = null;

            string storedProcName = "efrcrm_get_client_activity_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Client_activity_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        clientActivity = LoadClientActivity(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return clientActivity;
        }


        public int InsertClientActivity(ClientActivity clientActivity)
        {
            return InsertClientActivity(clientActivity, null);
        }

        private int InsertClientActivity(ClientActivity clientActivity, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_client_activity";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Client_activity_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Client_id", DbType.Int32, DBValue.ToDBInt32(clientActivity.ClientId)));
                paramCol.Add(new SqlDataParameter("@Client_sequence_code", DbType.String, DBValue.ToDBString(clientActivity.ClientSequenceCode)));
                paramCol.Add(new SqlDataParameter("@Client_activity_type_id", DbType.Int16, DBValue.ToDBInt16(clientActivity.ClientActivityTypeId)));
                paramCol.Add(new SqlDataParameter("@Client_activity_date", DbType.DateTime, DBValue.ToDBDateTime(clientActivity.ClientActivityDate)));
                paramCol.Add(new SqlDataParameter("@Completed_date", DbType.DateTime, DBValue.ToDBDateTime(clientActivity.CompletedDate)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(clientActivity.Comments)));
                paramCol.Add(new SqlDataParameter("@Is_contacted", DbType.Boolean, DBValue.ToDBBoolean(clientActivity.IsContacted)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    clientActivity.ClientActivityId = DBValue.ToInt32(paramCol["@Client_activity_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateClientActivity(ClientActivity clientActivity)
        {
            return UpdateClientActivity(clientActivity, null);
        }

        private int UpdateClientActivity(ClientActivity clientActivity, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_client_activity";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Client_activity_id", DbType.Int32, DBValue.ToDBInt32(clientActivity.ClientActivityId)));
                paramCol.Add(new SqlDataParameter("@Client_id", DbType.Int32, DBValue.ToDBInt32(clientActivity.ClientId)));
                paramCol.Add(new SqlDataParameter("@Client_sequence_code", DbType.String, DBValue.ToDBString(clientActivity.ClientSequenceCode)));
                paramCol.Add(new SqlDataParameter("@Client_activity_type_id", DbType.Int16, DBValue.ToDBInt16(clientActivity.ClientActivityTypeId)));
                paramCol.Add(new SqlDataParameter("@Client_activity_date", DbType.DateTime, DBValue.ToDBDateTime(clientActivity.ClientActivityDate)));
                paramCol.Add(new SqlDataParameter("@Completed_date", DbType.DateTime, DBValue.ToDBDateTime(clientActivity.CompletedDate)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(clientActivity.Comments)));
                paramCol.Add(new SqlDataParameter("@Is_contacted", DbType.Boolean, DBValue.ToDBBoolean(clientActivity.IsContacted)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region ClientActivityType Methods

        private ClientActivityType LoadClientActivityType(DataRow row)
        {
            ClientActivityType clientActivityType = new ClientActivityType();

            // Store database values into our business object
            clientActivityType.ClientActivityTypeId = DBValue.ToInt16(row["client_activity_type_id"]);
            clientActivityType.CarrierShippingStatusId = DBValue.ToInt16(row["carrier_shipping_status_id"]);
            clientActivityType.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return clientActivityType;
        }

        public ClientActivityType[] GetClientActivityTypes()
        {
            return GetClientActivityTypes(null);
        }

        private ClientActivityType[] GetClientActivityTypes(SqlInterface si)
        {
            ClientActivityType[] clientActivityTypes = null;

            string storedProcName = "efrcrm_get_client_activity_types";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    clientActivityTypes = new ClientActivityType[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            clientActivityTypes[i] = LoadClientActivityType(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return clientActivityTypes;
        }



        #endregion

        #region ClientAddress Methods


        private ClientPostalAddress LoadClientPostalAddress(DataRow row)
        {
            ClientPostalAddress ClPostalAddress = new ClientPostalAddress();

            // client_sequence_code, client_id, postal_address_id, create_date, client_address_type, active 
            // Store database values into our business object
            ClPostalAddress.ClientId = DBValue.ToInt32(row["sales_id"]);
            ClPostalAddress.ClientSequenceCode = DBValue.ToString(row["client_sequence_code"]);
            ClPostalAddress.ClientAddressType = DBValue.ToString(row["client_address_type"]);
            ClPostalAddress.PostalAddressId = DBValue.ToInt32(row["postal_address_id"]);
            ClPostalAddress.CreateDate = DBValue.ToDateTime(row["create_date"]);
            ClPostalAddress.Active = DBValue.ToBoolean(row["active"]);

            // return the filled object
            return ClPostalAddress;
        }


        private ClientAddress LoadClientAddress(DataRow row)
        {
            ClientAddress clientAddress = new ClientAddress();

            // Store database values into our business object
            clientAddress.AddressId = DBValue.ToInt32(row["address_id"]);
            clientAddress.ClientSequenceCode = DBValue.ToString(row["client_sequence_code"]);
            clientAddress.ClientId = DBValue.ToInt32(row["client_id"]);
            clientAddress.AddressType = DBValue.ToString(row["address_type"]);
            clientAddress.StreetAddress = DBValue.ToString(row["street_address"]);
            clientAddress.StateCode = DBValue.ToString(row["state_code"]);
            clientAddress.CountryCode = DBValue.ToString(row["country_code"]);
            clientAddress.City = DBValue.ToString(row["city"]);
            clientAddress.ZipCode = DBValue.ToString(row["zip_code"]);
            clientAddress.AttentionOf = DBValue.ToString(row["attention_of"]);
            clientAddress.MatchingCode = DBValue.ToString(row["Matching_code"]);
            clientAddress.AddressZoneId = DBValue.ToInt32(row["address_zone_id"]);
            clientAddress.Phone1 = DBValue.ToString(row["phone_1"]);
            clientAddress.Phone2 = DBValue.ToString(row["phone_2"]);
            clientAddress.Location = DBValue.ToString(row["location"]);
            clientAddress.PickUp = DBValue.ToBoolean(row["pick_up"]);
            clientAddress.WarehouseId = DBValue.ToInt32(row["warehouse_id"]);


            // return the filled object
            return clientAddress;
        }

        public ClientAddress[] GetClientAddresss()
        {
            return GetClientAddresss(null);
        }

        private ClientAddress[] GetClientAddresss(SqlInterface si)
        {
            ClientAddress[] clientAddresss = null;

            string storedProcName = "efrcrm_get_client_addresss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    clientAddresss = new ClientAddress[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            clientAddresss[i] = LoadClientAddress(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return clientAddresss;
        }

        public ClientAddress GetClientAddressByID(int id)
        {
            return GetClientAddressByID(id, null);
        }

        private ClientAddress GetClientAddressByID(int id, SqlInterface si)
        {
            ClientAddress clientAddress = null;

            string storedProcName = "efrcrm_get_client_address_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Address_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        clientAddress = LoadClientAddress(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return clientAddress;
        }

        public int InsertClientAddress(ClientAddress clientAddress)
        {
            return InsertClientAddress(clientAddress, null);
        }

        private int InsertClientAddress(ClientAddress clientAddress, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_client_address";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Address_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Client_sequence_code", DbType.String, DBValue.ToDBString(clientAddress.ClientSequenceCode)));
                paramCol.Add(new SqlDataParameter("@Client_id", DbType.Int32, DBValue.ToDBInt32(clientAddress.ClientId)));
                paramCol.Add(new SqlDataParameter("@Address_type", DbType.String, DBValue.ToDBString(clientAddress.AddressType)));
                paramCol.Add(new SqlDataParameter("@Street_address", DbType.String, DBValue.ToDBString(clientAddress.StreetAddress)));
                paramCol.Add(new SqlDataParameter("@State_code", DbType.String, DBValue.ToDBString(clientAddress.StateCode)));
                paramCol.Add(new SqlDataParameter("@Country_code", DbType.String, DBValue.ToDBString(clientAddress.CountryCode)));
                paramCol.Add(new SqlDataParameter("@City", DbType.String, DBValue.ToDBString(clientAddress.City)));
                paramCol.Add(new SqlDataParameter("@Zip_code", DbType.String, DBValue.ToDBString(clientAddress.ZipCode)));
                paramCol.Add(new SqlDataParameter("@Attention_of", DbType.String, DBValue.ToDBString(clientAddress.AttentionOf)));
                paramCol.Add(new SqlDataParameter("@Matching_code", DbType.String, DBValue.ToDBString(clientAddress.MatchingCode)));
                paramCol.Add(new SqlDataParameter("@address_zone_id", DbType.Int32, DBValue.ToDBInt32(clientAddress.AddressZoneId)));
                paramCol.Add(new SqlDataParameter("@phone_1", DbType.String, DBValue.ToDBString(clientAddress.Phone1)));
                paramCol.Add(new SqlDataParameter("@phone_2", DbType.String, DBValue.ToDBString(clientAddress.Phone2)));
                paramCol.Add(new SqlDataParameter("@location", DbType.String, DBValue.ToDBString(clientAddress.Location)));
                paramCol.Add(new SqlDataParameter("@pick_up", DbType.Boolean, DBValue.ToDBBoolean(clientAddress.PickUp)));
                paramCol.Add(new SqlDataParameter("@warehouse_id", DbType.Int32, DBValue.ToDBInt32(clientAddress.WarehouseId)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    clientAddress.AddressId = DBValue.ToInt32(paramCol["@Address_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateClientAddress(ClientAddress clientAddress)
        {
            return UpdateClientAddress(clientAddress, null);
        }

        private int UpdateClientAddress(ClientAddress clientAddress, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_client_address";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Address_id", DbType.Int32, DBValue.ToDBInt32(clientAddress.AddressId)));
                paramCol.Add(new SqlDataParameter("@Client_sequence_code", DbType.String, DBValue.ToDBString(clientAddress.ClientSequenceCode)));
                paramCol.Add(new SqlDataParameter("@Client_id", DbType.Int32, DBValue.ToDBInt32(clientAddress.ClientId)));
                paramCol.Add(new SqlDataParameter("@Address_type", DbType.String, DBValue.ToDBString(clientAddress.AddressType)));
                paramCol.Add(new SqlDataParameter("@Street_address", DbType.String, DBValue.ToDBString(clientAddress.StreetAddress)));
                paramCol.Add(new SqlDataParameter("@State_code", DbType.String, DBValue.ToDBString(clientAddress.StateCode)));
                paramCol.Add(new SqlDataParameter("@Country_code", DbType.String, DBValue.ToDBString(clientAddress.CountryCode)));
                paramCol.Add(new SqlDataParameter("@City", DbType.String, DBValue.ToDBString(clientAddress.City)));
                paramCol.Add(new SqlDataParameter("@Zip_code", DbType.String, DBValue.ToDBString(clientAddress.ZipCode)));
                paramCol.Add(new SqlDataParameter("@Attention_of", DbType.String, DBValue.ToDBString(clientAddress.AttentionOf)));
                paramCol.Add(new SqlDataParameter("@Matching_code", DbType.String, DBValue.ToDBString(clientAddress.MatchingCode)));
                paramCol.Add(new SqlDataParameter("@address_zone_id", DbType.Int32, DBValue.ToDBInt32(clientAddress.AddressZoneId)));
                paramCol.Add(new SqlDataParameter("@phone_1", DbType.String, DBValue.ToDBString(clientAddress.Phone1)));
                paramCol.Add(new SqlDataParameter("@phone_2", DbType.String, DBValue.ToDBString(clientAddress.Phone2)));
                paramCol.Add(new SqlDataParameter("@location", DbType.String, DBValue.ToDBString(clientAddress.Location)));
                paramCol.Add(new SqlDataParameter("@pick_up", DbType.Boolean, DBValue.ToDBBoolean(clientAddress.PickUp)));
                paramCol.Add(new SqlDataParameter("@warehouse_id", DbType.Int32, DBValue.ToDBInt32(clientAddress.WarehouseId)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region ClientAddressType Methods

        private ClientAddressType LoadClientAddressType(DataRow row)
        {
            ClientAddressType clientAddressType = new ClientAddressType();

            // Store database values into our business object
            clientAddressType.AddressType = DBValue.ToString(row["address_type"]);
            clientAddressType.AddressTypeDesc = DBValue.ToString(row["address_type_desc"]);

            // return the filled object
            return clientAddressType;
        }

        public ClientAddressType[] GetClientAddressTypes()
        {
            return GetClientAddressTypes(null);
        }

        private ClientAddressType[] GetClientAddressTypes(SqlInterface si)
        {
            ClientAddressType[] clientAddressTypes = null;

            string storedProcName = "efrcrm_get_client_address_types";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    clientAddressTypes = new ClientAddressType[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            clientAddressTypes[i] = LoadClientAddressType(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return clientAddressTypes;
        }



        #endregion

        #region ClientSequence Methods

        private ClientSequence LoadClientSequence(DataRow row)
        {
            ClientSequence clientSequence = new ClientSequence();

            // Store database values into our business object
            clientSequence.ClientSequenceCode = DBValue.ToString(row["client_sequence_code"]);
            clientSequence.Description = DBValue.ToString(row["description"]);
            clientSequence.IsActive = DBValue.ToInt32(row["is_active"]);

            // return the filled object
            return clientSequence;
        }

        public ClientSequence[] GetClientSequences()
        {
            return GetClientSequences(null);
        }

        private ClientSequence[] GetClientSequences(SqlInterface si)
        {
            ClientSequence[] clientSequences = null;

            string storedProcName = "efrcrm_get_client_sequences";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    clientSequences = new ClientSequence[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            clientSequences[i] = LoadClientSequence(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return clientSequences;
        }



        #endregion

        #region CollectionStatus Methods

        private CollectionStatus LoadCollectionStatus(DataRow row)
        {
            CollectionStatus collectionStatus = new CollectionStatus();

            // Store database values into our business object
            collectionStatus.CollectionStatusID = DBValue.ToInt32(row["collection_status_id"]);
            collectionStatus.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return collectionStatus;
        }

        public CollectionStatus[] GetCollectionStatuss()
        {
            return GetCollectionStatuss(null);
        }

        private CollectionStatus[] GetCollectionStatuss(SqlInterface si)
        {
            CollectionStatus[] collectionStatuss = null;

            string storedProcName = "efrcrm_get_collection_statuss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    collectionStatuss = new CollectionStatus[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            collectionStatuss[i] = LoadCollectionStatus(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return collectionStatuss;
        }


        public CollectionStatus GetCollectionStatusByID(int id)
        {
            return GetCollectionStatusByID(id, null);
        }

        private CollectionStatus GetCollectionStatusByID(int id, SqlInterface si)
        {
            CollectionStatus collectionStatus = null;

            string storedProcName = "efrcrm_get_collection_status_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Collection_Status_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        collectionStatus = LoadCollectionStatus(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return collectionStatus;
        }


        public int InsertCollectionStatus(CollectionStatus collectionStatus)
        {
            return InsertCollectionStatus(collectionStatus, null);
        }

        private int InsertCollectionStatus(CollectionStatus collectionStatus, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_collection_status";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Collection_Status_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(collectionStatus.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    collectionStatus.CollectionStatusID = DBValue.ToInt32(paramCol["@Collection_Status_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateCollectionStatus(CollectionStatus collectionStatus)
        {
            return UpdateCollectionStatus(collectionStatus, null);
        }

        private int UpdateCollectionStatus(CollectionStatus collectionStatus, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_collection_status";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Collection_Status_ID", DbType.Int32, DBValue.ToDBInt32(collectionStatus.CollectionStatusID)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(collectionStatus.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region Comments Methods

        private Comments LoadComments(DataRow row)
        {
            Comments comments = new Comments();

            // Store database values into our business object
            comments.CommentsID = DBValue.ToInt32(row["comments_id"]);
            comments.PriorityID = DBValue.ToInt32(row["priority_id"]);
            comments.SalesID = DBValue.ToInt32(row["sales_id"]);
            comments.ConsultantID = DBValue.ToInt32(row["consultant_id"]);
            comments.LeadID = DBValue.ToInt32(row["lead_id"]);
            comments.DepartmentID = DBValue.ToInt32(row["department_id"]);
            comments.EntryDate = DBValue.ToDateTime(row["entry_date"]);
            comments.Comment = DBValue.ToString(row["comments"]);

            // return the filled object
            return comments;
        }

        public Comments[] GetCommentss()
        {
            return GetCommentss(null);
        }

        private Comments[] GetCommentss(SqlInterface si)
        {
            Comments[] commentss = null;

            string storedProcName = "efrcrm_get_commentss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    commentss = new Comments[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            commentss[i] = LoadComments(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return commentss;
        }


        public Comments GetCommentsByID(int id)
        {
            return GetCommentsByID(id, null);
        }

        private Comments GetCommentsByID(int id, SqlInterface si)
        {
            Comments comments = null;

            string storedProcName = "efrcrm_get_comments_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Comments_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        comments = LoadComments(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return comments;
        }


        public int InsertComments(Comments comments)
        {
            return InsertComments(comments, null);
        }

        private int InsertComments(Comments comments, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_comments";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Comments_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Priority_ID", DbType.Int32, DBValue.ToDBInt32(comments.PriorityID)));
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(comments.SalesID)));
                paramCol.Add(new SqlDataParameter("@Consultant_ID", DbType.Int32, DBValue.ToDBInt32(comments.ConsultantID)));
                paramCol.Add(new SqlDataParameter("@Lead_ID", DbType.Int32, DBValue.ToDBInt32(comments.LeadID)));
                paramCol.Add(new SqlDataParameter("@Department_ID", DbType.Int32, DBValue.ToDBInt32(comments.DepartmentID)));
                paramCol.Add(new SqlDataParameter("@Entry_Date", DbType.DateTime, DBValue.ToDBDateTime(comments.EntryDate)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(comments.Comment)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    comments.CommentsID = DBValue.ToInt32(paramCol["@Comments_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateComments(Comments comments)
        {
            return UpdateComments(comments, null);
        }

        private int UpdateComments(Comments comments, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_comments";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Comments_ID", DbType.Int32, DBValue.ToDBInt32(comments.CommentsID)));
                paramCol.Add(new SqlDataParameter("@Priority_ID", DbType.Int32, DBValue.ToDBInt32(comments.PriorityID)));
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(comments.SalesID)));
                paramCol.Add(new SqlDataParameter("@Consultant_ID", DbType.Int32, DBValue.ToDBInt32(comments.ConsultantID)));
                paramCol.Add(new SqlDataParameter("@Lead_ID", DbType.Int32, DBValue.ToDBInt32(comments.LeadID)));
                paramCol.Add(new SqlDataParameter("@Department_ID", DbType.Int32, DBValue.ToDBInt32(comments.DepartmentID)));
                paramCol.Add(new SqlDataParameter("@Entry_Date", DbType.DateTime, DBValue.ToDBDateTime(comments.EntryDate)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(comments.Comment)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public Comments[] GetCommentsBySaleID(int salesId, SqlInterface si)
        {
            // 

            Comments[] commentss = null;
            string storedProcName = "efrcrm_get_comments_by_sales_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(salesId)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    commentss = new Comments[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            commentss[i] = LoadComments(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return commentss;
        }


        public Comments[] GetCommentsBySaleID(int salesId)
        {
            return GetCommentsBySaleID(salesId, null);
        }

        public Comments GetCommentBySaleIDAndLeadID(int salesId, int leadID, SqlInterface si)
        {
            // 

            Comments comments = null;
            string storedProcName = "efrcrm_get_comment_by_sales_id_and_lead_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@sales_ID", DbType.Int32, DBValue.ToDBInt32(salesId)));
                paramCol.Add(new SqlDataParameter("@lead_ID", DbType.Int32, DBValue.ToDBInt32(leadID)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        comments = LoadComments(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return comments;
        }


        public Comments GetCommentBySaleIDAndLeadID(int salesId, int leadID)
        {
            return GetCommentBySaleIDAndLeadID(salesId, leadID, null);
        }

        #endregion

        #region CommissionEarning Methods

        private CommissionEarning LoadCommissionEarning(DataRow row)
        {
            CommissionEarning commissionEarning = new CommissionEarning();

            // Store database values into our business object
            commissionEarning.CommissionEarningID = DBValue.ToInt32(row["commission_earning_id"]);
            commissionEarning.SalesID = DBValue.ToInt32(row["sales_id"]);
            commissionEarning.ProductDescription = DBValue.ToString(row["product_description"]);
            commissionEarning.PaymentAmount = DBValue.ToInt16(row["payment_amount"]);
            commissionEarning.PaymentEntryDate = DBValue.ToDateTime(row["payment_entry_date"]);
            commissionEarning.CommissionAmount = DBValue.ToString(row["commission_amount"]);
            commissionEarning.CommissionRate = DBValue.ToInt16(row["commission_rate"]);
            commissionEarning.PaymentNo = DBValue.ToInt32(row["payment_no"]);
            commissionEarning.ConsultantID = DBValue.ToInt32(row["consultant_id"]);
            commissionEarning.RecordEntryDate = DBValue.ToDateTime(row["record_entry_date"]);
            commissionEarning.AssociateID = DBValue.ToInt32(row["associate_id"]);
            commissionEarning.SalesAmount = DBValue.ToInt16(row["sales_amount"]);
            commissionEarning.CurrencyCode = DBValue.ToString(row["currency_code"]);
            commissionEarning.ExchangeRate = DBValue.ToInt16(row["exchange_rate"]);
            commissionEarning.CommissionAmountCa = DBValue.ToString(row["commission_amount_ca"]);
            commissionEarning.LeadID = DBValue.ToInt32(row["lead_id"]);
            commissionEarning.SaleDate = DBValue.ToDateTime(row["sale_date"]);

            // return the filled object
            return commissionEarning;
        }

        public CommissionEarning[] GetCommissionEarnings()
        {
            return GetCommissionEarnings(null);
        }

        private CommissionEarning[] GetCommissionEarnings(SqlInterface si)
        {
            CommissionEarning[] commissionEarnings = null;

            string storedProcName = "efrcrm_get_commission_earnings";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    commissionEarnings = new CommissionEarning[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            commissionEarnings[i] = LoadCommissionEarning(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return commissionEarnings;
        }


        public CommissionEarning GetCommissionEarningByID(int id)
        {
            return GetCommissionEarningByID(id, null);
        }

        private CommissionEarning GetCommissionEarningByID(int id, SqlInterface si)
        {
            CommissionEarning commissionEarning = null;

            string storedProcName = "efrcrm_get_commission_earning_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Commission_Earning_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        commissionEarning = LoadCommissionEarning(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return commissionEarning;
        }


        public int InsertCommissionEarning(CommissionEarning commissionEarning)
        {
            return InsertCommissionEarning(commissionEarning, null);
        }

        private int InsertCommissionEarning(CommissionEarning commissionEarning, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_commission_earning";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Commission_Earning_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(commissionEarning.SalesID)));
                paramCol.Add(new SqlDataParameter("@Product_Description", DbType.String, DBValue.ToDBString(commissionEarning.ProductDescription)));
                paramCol.Add(new SqlDataParameter("@Payment_Amount", DbType.Double, DBValue.ToDBFloat(commissionEarning.PaymentAmount)));
                paramCol.Add(new SqlDataParameter("@Payment_Entry_Date", DbType.DateTime, DBValue.ToDBDateTime(commissionEarning.PaymentEntryDate)));
                paramCol.Add(new SqlDataParameter("@Commission_Amount", DbType.String, DBValue.ToDBString(commissionEarning.CommissionAmount)));
                paramCol.Add(new SqlDataParameter("@Commission_Rate", DbType.Double, DBValue.ToDBFloat(commissionEarning.CommissionRate)));
                paramCol.Add(new SqlDataParameter("@Payment_No", DbType.Int32, DBValue.ToDBInt32(commissionEarning.PaymentNo)));
                paramCol.Add(new SqlDataParameter("@Consultant_ID", DbType.Int32, DBValue.ToDBInt32(commissionEarning.ConsultantID)));
                paramCol.Add(new SqlDataParameter("@Record_Entry_Date", DbType.DateTime, DBValue.ToDBDateTime(commissionEarning.RecordEntryDate)));
                paramCol.Add(new SqlDataParameter("@Associate_ID", DbType.Int32, DBValue.ToDBInt32(commissionEarning.AssociateID)));
                paramCol.Add(new SqlDataParameter("@Sales_Amount", DbType.Double, DBValue.ToDBFloat(commissionEarning.SalesAmount)));
                paramCol.Add(new SqlDataParameter("@Currency_Code", DbType.String, DBValue.ToDBString(commissionEarning.CurrencyCode)));
                paramCol.Add(new SqlDataParameter("@Exchange_Rate", DbType.Double, DBValue.ToDBFloat(commissionEarning.ExchangeRate)));
                paramCol.Add(new SqlDataParameter("@Commission_Amount_Ca", DbType.String, DBValue.ToDBString(commissionEarning.CommissionAmountCa)));
                paramCol.Add(new SqlDataParameter("@Lead_ID", DbType.Int32, DBValue.ToDBInt32(commissionEarning.LeadID)));
                paramCol.Add(new SqlDataParameter("@Sale_Date", DbType.DateTime, DBValue.ToDBDateTime(commissionEarning.SaleDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    commissionEarning.CommissionEarningID = DBValue.ToInt32(paramCol["@Commission_Earning_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateCommissionEarning(CommissionEarning commissionEarning)
        {
            return UpdateCommissionEarning(commissionEarning, null);
        }

        private int UpdateCommissionEarning(CommissionEarning commissionEarning, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_commission_earning";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Commission_Earning_ID", DbType.Int32, DBValue.ToDBInt32(commissionEarning.CommissionEarningID)));
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(commissionEarning.SalesID)));
                paramCol.Add(new SqlDataParameter("@Product_Description", DbType.String, DBValue.ToDBString(commissionEarning.ProductDescription)));
                paramCol.Add(new SqlDataParameter("@Payment_Amount", DbType.Double, DBValue.ToDBFloat(commissionEarning.PaymentAmount)));
                paramCol.Add(new SqlDataParameter("@Payment_Entry_Date", DbType.DateTime, DBValue.ToDBDateTime(commissionEarning.PaymentEntryDate)));
                paramCol.Add(new SqlDataParameter("@Commission_Amount", DbType.String, DBValue.ToDBString(commissionEarning.CommissionAmount)));
                paramCol.Add(new SqlDataParameter("@Commission_Rate", DbType.Double, DBValue.ToDBFloat(commissionEarning.CommissionRate)));
                paramCol.Add(new SqlDataParameter("@Payment_No", DbType.Int32, DBValue.ToDBInt32(commissionEarning.PaymentNo)));
                paramCol.Add(new SqlDataParameter("@Consultant_ID", DbType.Int32, DBValue.ToDBInt32(commissionEarning.ConsultantID)));
                paramCol.Add(new SqlDataParameter("@Record_Entry_Date", DbType.DateTime, DBValue.ToDBDateTime(commissionEarning.RecordEntryDate)));
                paramCol.Add(new SqlDataParameter("@Associate_ID", DbType.Int32, DBValue.ToDBInt32(commissionEarning.AssociateID)));
                paramCol.Add(new SqlDataParameter("@Sales_Amount", DbType.Double, DBValue.ToDBFloat(commissionEarning.SalesAmount)));
                paramCol.Add(new SqlDataParameter("@Currency_Code", DbType.String, DBValue.ToDBString(commissionEarning.CurrencyCode)));
                paramCol.Add(new SqlDataParameter("@Exchange_Rate", DbType.Double, DBValue.ToDBFloat(commissionEarning.ExchangeRate)));
                paramCol.Add(new SqlDataParameter("@Commission_Amount_Ca", DbType.String, DBValue.ToDBString(commissionEarning.CommissionAmountCa)));
                paramCol.Add(new SqlDataParameter("@Lead_ID", DbType.Int32, DBValue.ToDBInt32(commissionEarning.LeadID)));
                paramCol.Add(new SqlDataParameter("@Sale_Date", DbType.DateTime, DBValue.ToDBDateTime(commissionEarning.SaleDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region CommissionOutstanding Methods

        private CommissionOutstanding LoadCommissionOutstanding(DataRow row)
        {
            CommissionOutstanding commissionOutstanding = new CommissionOutstanding();

            // Store database values into our business object
            commissionOutstanding.SalesID = DBValue.ToInt32(row["sales_id"]);
            commissionOutstanding.ConsultantID = DBValue.ToInt32(row["consultant_id"]);
            commissionOutstanding.SalesDate = DBValue.ToDateTime(row["sales_date"]);
            commissionOutstanding.ShippedDate = DBValue.ToDateTime(row["shipped_date"]);
            commissionOutstanding.Status = DBValue.ToString(row["status"]);
            commissionOutstanding.PaymentTerm = DBValue.ToString(row["payment_term"]);
            commissionOutstanding.FirstName = DBValue.ToString(row["first_name"]);
            commissionOutstanding.LastName = DBValue.ToString(row["last_name"]);
            commissionOutstanding.Organization = DBValue.ToString(row["organization"]);
            commissionOutstanding.DayPhone = DBValue.ToString(row["day_phone"]);
            commissionOutstanding.OutstandingAmount = DBValue.ToString(row["outstanding_amount"]);
            commissionOutstanding.CurrencyCode = DBValue.ToString(row["currency_code"]);
            commissionOutstanding.OutstandingCommission = DBValue.ToString(row["outstanding_commission"]);

            // return the filled object
            return commissionOutstanding;
        }

        public CommissionOutstanding[] GetCommissionOutstandings()
        {
            return GetCommissionOutstandings(null);
        }

        private CommissionOutstanding[] GetCommissionOutstandings(SqlInterface si)
        {
            CommissionOutstanding[] commissionOutstandings = null;

            string storedProcName = "efrcrm_get_commission_outstandings";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    commissionOutstandings = new CommissionOutstanding[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            commissionOutstandings[i] = LoadCommissionOutstanding(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return commissionOutstandings;
        }


        public CommissionOutstanding GetCommissionOutstandingByID(int id)
        {
            return GetCommissionOutstandingByID(id, null);
        }

        private CommissionOutstanding GetCommissionOutstandingByID(int id, SqlInterface si)
        {
            CommissionOutstanding commissionOutstanding = null;

            string storedProcName = "efrcrm_get_commission_outstanding_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        commissionOutstanding = LoadCommissionOutstanding(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return commissionOutstanding;
        }


        public int InsertCommissionOutstanding(CommissionOutstanding commissionOutstanding)
        {
            return InsertCommissionOutstanding(commissionOutstanding, null);
        }

        private int InsertCommissionOutstanding(CommissionOutstanding commissionOutstanding, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_commission_outstanding";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Consultant_ID", DbType.Int32, DBValue.ToDBInt32(commissionOutstanding.ConsultantID)));
                paramCol.Add(new SqlDataParameter("@Sales_Date", DbType.DateTime, DBValue.ToDBDateTime(commissionOutstanding.SalesDate)));
                paramCol.Add(new SqlDataParameter("@Shipped_Date", DbType.DateTime, DBValue.ToDBDateTime(commissionOutstanding.ShippedDate)));
                paramCol.Add(new SqlDataParameter("@Status", DbType.String, DBValue.ToDBString(commissionOutstanding.Status)));
                paramCol.Add(new SqlDataParameter("@Payment_Term", DbType.String, DBValue.ToDBString(commissionOutstanding.PaymentTerm)));
                paramCol.Add(new SqlDataParameter("@First_Name", DbType.String, DBValue.ToDBString(commissionOutstanding.FirstName)));
                paramCol.Add(new SqlDataParameter("@Last_Name", DbType.String, DBValue.ToDBString(commissionOutstanding.LastName)));
                paramCol.Add(new SqlDataParameter("@Organization", DbType.String, DBValue.ToDBString(commissionOutstanding.Organization)));
                paramCol.Add(new SqlDataParameter("@Day_Phone", DbType.String, DBValue.ToDBString(commissionOutstanding.DayPhone)));
                paramCol.Add(new SqlDataParameter("@Outstanding_Amount", DbType.String, DBValue.ToDBString(commissionOutstanding.OutstandingAmount)));
                paramCol.Add(new SqlDataParameter("@Currency_Code", DbType.String, DBValue.ToDBString(commissionOutstanding.CurrencyCode)));
                paramCol.Add(new SqlDataParameter("@Outstanding_Commission", DbType.String, DBValue.ToDBString(commissionOutstanding.OutstandingCommission)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    commissionOutstanding.SalesID = DBValue.ToInt32(paramCol["@Sales_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateCommissionOutstanding(CommissionOutstanding commissionOutstanding)
        {
            return UpdateCommissionOutstanding(commissionOutstanding, null);
        }

        private int UpdateCommissionOutstanding(CommissionOutstanding commissionOutstanding, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_commission_outstanding";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(commissionOutstanding.SalesID)));
                paramCol.Add(new SqlDataParameter("@Consultant_ID", DbType.Int32, DBValue.ToDBInt32(commissionOutstanding.ConsultantID)));
                paramCol.Add(new SqlDataParameter("@Sales_Date", DbType.DateTime, DBValue.ToDBDateTime(commissionOutstanding.SalesDate)));
                paramCol.Add(new SqlDataParameter("@Shipped_Date", DbType.DateTime, DBValue.ToDBDateTime(commissionOutstanding.ShippedDate)));
                paramCol.Add(new SqlDataParameter("@Status", DbType.String, DBValue.ToDBString(commissionOutstanding.Status)));
                paramCol.Add(new SqlDataParameter("@Payment_Term", DbType.String, DBValue.ToDBString(commissionOutstanding.PaymentTerm)));
                paramCol.Add(new SqlDataParameter("@First_Name", DbType.String, DBValue.ToDBString(commissionOutstanding.FirstName)));
                paramCol.Add(new SqlDataParameter("@Last_Name", DbType.String, DBValue.ToDBString(commissionOutstanding.LastName)));
                paramCol.Add(new SqlDataParameter("@Organization", DbType.String, DBValue.ToDBString(commissionOutstanding.Organization)));
                paramCol.Add(new SqlDataParameter("@Day_Phone", DbType.String, DBValue.ToDBString(commissionOutstanding.DayPhone)));
                paramCol.Add(new SqlDataParameter("@Outstanding_Amount", DbType.String, DBValue.ToDBString(commissionOutstanding.OutstandingAmount)));
                paramCol.Add(new SqlDataParameter("@Currency_Code", DbType.String, DBValue.ToDBString(commissionOutstanding.CurrencyCode)));
                paramCol.Add(new SqlDataParameter("@Outstanding_Commission", DbType.String, DBValue.ToDBString(commissionOutstanding.OutstandingCommission)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region CommissionOutstandingHistory Methods

        private CommissionOutstandingHistory LoadCommissionOutstandingHistory(DataRow row)
        {
            CommissionOutstandingHistory commissionOutstandingHistory = new CommissionOutstandingHistory();

            // Store database values into our business object
            commissionOutstandingHistory.SalesID = DBValue.ToInt32(row["sales_id"]);
            commissionOutstandingHistory.Month = DBValue.ToInt32(row["month"]);
            commissionOutstandingHistory.Year = DBValue.ToInt32(row["year"]);
            commissionOutstandingHistory.ConsultantID = DBValue.ToInt32(row["consultant_id"]);
            commissionOutstandingHistory.SalesDate = DBValue.ToDateTime(row["sales_date"]);
            commissionOutstandingHistory.ShippedDate = DBValue.ToDateTime(row["shipped_date"]);
            commissionOutstandingHistory.Status = DBValue.ToString(row["status"]);
            commissionOutstandingHistory.PaymentTerm = DBValue.ToString(row["payment_term"]);
            commissionOutstandingHistory.FirstName = DBValue.ToString(row["first_name"]);
            commissionOutstandingHistory.LastName = DBValue.ToString(row["last_name"]);
            commissionOutstandingHistory.Organization = DBValue.ToString(row["organization"]);
            commissionOutstandingHistory.DayPhone = DBValue.ToString(row["day_phone"]);
            commissionOutstandingHistory.OutstandingAmount = DBValue.ToString(row["outstanding_amount"]);
            commissionOutstandingHistory.CurrencyCode = DBValue.ToString(row["currency_code"]);
            commissionOutstandingHistory.OutstandingCommission = DBValue.ToString(row["outstanding_commission"]);

            // return the filled object
            return commissionOutstandingHistory;
        }

        public CommissionOutstandingHistory[] GetCommissionOutstandingHistorys()
        {
            return GetCommissionOutstandingHistorys(null);
        }

        private CommissionOutstandingHistory[] GetCommissionOutstandingHistorys(SqlInterface si)
        {
            CommissionOutstandingHistory[] commissionOutstandingHistorys = null;

            string storedProcName = "efrcrm_get_commission_outstanding_historys";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    commissionOutstandingHistorys = new CommissionOutstandingHistory[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            commissionOutstandingHistorys[i] = LoadCommissionOutstandingHistory(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return commissionOutstandingHistorys;
        }


        public CommissionOutstandingHistory GetCommissionOutstandingHistoryByID(int id)
        {
            return GetCommissionOutstandingHistoryByID(id, null);
        }

        private CommissionOutstandingHistory GetCommissionOutstandingHistoryByID(int id, SqlInterface si)
        {
            CommissionOutstandingHistory commissionOutstandingHistory = null;

            string storedProcName = "efrcrm_get_commission_outstanding_history_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        commissionOutstandingHistory = LoadCommissionOutstandingHistory(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return commissionOutstandingHistory;
        }


        public int InsertCommissionOutstandingHistory(CommissionOutstandingHistory commissionOutstandingHistory)
        {
            return InsertCommissionOutstandingHistory(commissionOutstandingHistory, null);
        }

        private int InsertCommissionOutstandingHistory(CommissionOutstandingHistory commissionOutstandingHistory, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_commission_outstanding_history";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Month", DbType.Int32, DBValue.ToDBInt32(commissionOutstandingHistory.Month)));
                paramCol.Add(new SqlDataParameter("@Year", DbType.Int32, DBValue.ToDBInt32(commissionOutstandingHistory.Year)));
                paramCol.Add(new SqlDataParameter("@Consultant_ID", DbType.Int32, DBValue.ToDBInt32(commissionOutstandingHistory.ConsultantID)));
                paramCol.Add(new SqlDataParameter("@Sales_Date", DbType.DateTime, DBValue.ToDBDateTime(commissionOutstandingHistory.SalesDate)));
                paramCol.Add(new SqlDataParameter("@Shipped_Date", DbType.DateTime, DBValue.ToDBDateTime(commissionOutstandingHistory.ShippedDate)));
                paramCol.Add(new SqlDataParameter("@Status", DbType.String, DBValue.ToDBString(commissionOutstandingHistory.Status)));
                paramCol.Add(new SqlDataParameter("@Payment_Term", DbType.String, DBValue.ToDBString(commissionOutstandingHistory.PaymentTerm)));
                paramCol.Add(new SqlDataParameter("@First_Name", DbType.String, DBValue.ToDBString(commissionOutstandingHistory.FirstName)));
                paramCol.Add(new SqlDataParameter("@Last_Name", DbType.String, DBValue.ToDBString(commissionOutstandingHistory.LastName)));
                paramCol.Add(new SqlDataParameter("@Organization", DbType.String, DBValue.ToDBString(commissionOutstandingHistory.Organization)));
                paramCol.Add(new SqlDataParameter("@Day_Phone", DbType.String, DBValue.ToDBString(commissionOutstandingHistory.DayPhone)));
                paramCol.Add(new SqlDataParameter("@Outstanding_Amount", DbType.String, DBValue.ToDBString(commissionOutstandingHistory.OutstandingAmount)));
                paramCol.Add(new SqlDataParameter("@Currency_Code", DbType.String, DBValue.ToDBString(commissionOutstandingHistory.CurrencyCode)));
                paramCol.Add(new SqlDataParameter("@Outstanding_Commission", DbType.String, DBValue.ToDBString(commissionOutstandingHistory.OutstandingCommission)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    commissionOutstandingHistory.SalesID = DBValue.ToInt32(paramCol["@Sales_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateCommissionOutstandingHistory(CommissionOutstandingHistory commissionOutstandingHistory)
        {
            return UpdateCommissionOutstandingHistory(commissionOutstandingHistory, null);
        }

        private int UpdateCommissionOutstandingHistory(CommissionOutstandingHistory commissionOutstandingHistory, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_commission_outstanding_history";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(commissionOutstandingHistory.SalesID)));
                paramCol.Add(new SqlDataParameter("@Month", DbType.Int32, DBValue.ToDBInt32(commissionOutstandingHistory.Month)));
                paramCol.Add(new SqlDataParameter("@Year", DbType.Int32, DBValue.ToDBInt32(commissionOutstandingHistory.Year)));
                paramCol.Add(new SqlDataParameter("@Consultant_ID", DbType.Int32, DBValue.ToDBInt32(commissionOutstandingHistory.ConsultantID)));
                paramCol.Add(new SqlDataParameter("@Sales_Date", DbType.DateTime, DBValue.ToDBDateTime(commissionOutstandingHistory.SalesDate)));
                paramCol.Add(new SqlDataParameter("@Shipped_Date", DbType.DateTime, DBValue.ToDBDateTime(commissionOutstandingHistory.ShippedDate)));
                paramCol.Add(new SqlDataParameter("@Status", DbType.String, DBValue.ToDBString(commissionOutstandingHistory.Status)));
                paramCol.Add(new SqlDataParameter("@Payment_Term", DbType.String, DBValue.ToDBString(commissionOutstandingHistory.PaymentTerm)));
                paramCol.Add(new SqlDataParameter("@First_Name", DbType.String, DBValue.ToDBString(commissionOutstandingHistory.FirstName)));
                paramCol.Add(new SqlDataParameter("@Last_Name", DbType.String, DBValue.ToDBString(commissionOutstandingHistory.LastName)));
                paramCol.Add(new SqlDataParameter("@Organization", DbType.String, DBValue.ToDBString(commissionOutstandingHistory.Organization)));
                paramCol.Add(new SqlDataParameter("@Day_Phone", DbType.String, DBValue.ToDBString(commissionOutstandingHistory.DayPhone)));
                paramCol.Add(new SqlDataParameter("@Outstanding_Amount", DbType.String, DBValue.ToDBString(commissionOutstandingHistory.OutstandingAmount)));
                paramCol.Add(new SqlDataParameter("@Currency_Code", DbType.String, DBValue.ToDBString(commissionOutstandingHistory.CurrencyCode)));
                paramCol.Add(new SqlDataParameter("@Outstanding_Commission", DbType.String, DBValue.ToDBString(commissionOutstandingHistory.OutstandingCommission)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region CommissionPaid Methods

        private CommissionPaid LoadCommissionPaid(DataRow row)
        {
            CommissionPaid commissionPaid = new CommissionPaid();

            // Store database values into our business object
            commissionPaid.CommissionYear = DBValue.ToInt32(row["commission_year"]);
            commissionPaid.CommissionMonth = DBValue.ToInt32(row["commission_month"]);
            commissionPaid.ConsultantID = DBValue.ToInt32(row["consultant_id"]);
            commissionPaid.SalesID = DBValue.ToInt32(row["sales_id"]);
            commissionPaid.ARStatusID = DBValue.ToInt32(row["ar_status_id"]);
            commissionPaid.TotalCardSold = DBValue.ToInt32(row["total_card_sold"]);
            commissionPaid.SalesAmount = DBValue.ToInt16(row["sales_amount"]);
            commissionPaid.ConsultantCommissionAmount = DBValue.ToInt16(row["consultant_commission_amount"]);

            // return the filled object
            return commissionPaid;
        }

        public CommissionPaid[] GetCommissionPaids()
        {
            return GetCommissionPaids(null);
        }

        private CommissionPaid[] GetCommissionPaids(SqlInterface si)
        {
            CommissionPaid[] commissionPaids = null;

            string storedProcName = "efrcrm_get_commission_paids";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    commissionPaids = new CommissionPaid[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            commissionPaids[i] = LoadCommissionPaid(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return commissionPaids;
        }


        public CommissionPaid GetCommissionPaidByID(int id)
        {
            return GetCommissionPaidByID(id, null);
        }

        private CommissionPaid GetCommissionPaidByID(int id, SqlInterface si)
        {
            CommissionPaid commissionPaid = null;

            string storedProcName = "efrcrm_get_commission_paid_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Commission_Year", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        commissionPaid = LoadCommissionPaid(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return commissionPaid;
        }


        public int InsertCommissionPaid(CommissionPaid commissionPaid)
        {
            return InsertCommissionPaid(commissionPaid, null);
        }

        private int InsertCommissionPaid(CommissionPaid commissionPaid, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_commission_paid";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Commission_Year", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Commission_Month", DbType.Int32, DBValue.ToDBInt32(commissionPaid.CommissionMonth)));
                paramCol.Add(new SqlDataParameter("@Consultant_ID", DbType.Int32, DBValue.ToDBInt32(commissionPaid.ConsultantID)));
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(commissionPaid.SalesID)));
                paramCol.Add(new SqlDataParameter("@AR_Status_ID", DbType.Int32, DBValue.ToDBInt32(commissionPaid.ARStatusID)));
                paramCol.Add(new SqlDataParameter("@Total_Card_Sold", DbType.Int32, DBValue.ToDBInt32(commissionPaid.TotalCardSold)));
                paramCol.Add(new SqlDataParameter("@Sales_Amount", DbType.Double, DBValue.ToDBFloat(commissionPaid.SalesAmount)));
                paramCol.Add(new SqlDataParameter("@Consultant_Commission_Amount", DbType.Double, DBValue.ToDBFloat(commissionPaid.ConsultantCommissionAmount)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    commissionPaid.CommissionYear = DBValue.ToInt32(paramCol["@Commission_Year"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateCommissionPaid(CommissionPaid commissionPaid)
        {
            return UpdateCommissionPaid(commissionPaid, null);
        }

        private int UpdateCommissionPaid(CommissionPaid commissionPaid, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_commission_paid";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Commission_Year", DbType.Int32, DBValue.ToDBInt32(commissionPaid.CommissionYear)));
                paramCol.Add(new SqlDataParameter("@Commission_Month", DbType.Int32, DBValue.ToDBInt32(commissionPaid.CommissionMonth)));
                paramCol.Add(new SqlDataParameter("@Consultant_ID", DbType.Int32, DBValue.ToDBInt32(commissionPaid.ConsultantID)));
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(commissionPaid.SalesID)));
                paramCol.Add(new SqlDataParameter("@AR_Status_ID", DbType.Int32, DBValue.ToDBInt32(commissionPaid.ARStatusID)));
                paramCol.Add(new SqlDataParameter("@Total_Card_Sold", DbType.Int32, DBValue.ToDBInt32(commissionPaid.TotalCardSold)));
                paramCol.Add(new SqlDataParameter("@Sales_Amount", DbType.Double, DBValue.ToDBFloat(commissionPaid.SalesAmount)));
                paramCol.Add(new SqlDataParameter("@Consultant_Commission_Amount", DbType.Double, DBValue.ToDBFloat(commissionPaid.ConsultantCommissionAmount)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region CommissionRate Methods

        private CommissionRate LoadCommissionRate(DataRow row)
        {
            CommissionRate commissionRate = new CommissionRate();

            // Store database values into our business object
            commissionRate.ConsultantID = DBValue.ToInt32(row["consultant_id"]);
            commissionRate.CommissionRateFree = DBValue.ToInt16(row["commission_rate_free"]);
            commissionRate.CommissionRateNoFree = DBValue.ToInt16(row["commission_rate_no_free"]);
            commissionRate.ScratchBookID = DBValue.ToInt32(row["scratch_book_id"]);

            // return the filled object
            return commissionRate;
        }

        public CommissionRate[] GetCommissionRates()
        {
            return GetCommissionRates(null);
        }

        private CommissionRate[] GetCommissionRates(SqlInterface si)
        {
            CommissionRate[] commissionRates = null;

            string storedProcName = "efrcrm_get_commission_rates";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    commissionRates = new CommissionRate[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            commissionRates[i] = LoadCommissionRate(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return commissionRates;
        }


        public CommissionRate GetCommissionRateByID(int id)
        {
            return GetCommissionRateByID(id, null);
        }

        private CommissionRate GetCommissionRateByID(int id, SqlInterface si)
        {
            CommissionRate commissionRate = null;

            string storedProcName = "efrcrm_get_commission_rate_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Consultant_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        commissionRate = LoadCommissionRate(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return commissionRate;
        }


        public int InsertCommissionRate(CommissionRate commissionRate)
        {
            return InsertCommissionRate(commissionRate, null);
        }

        private int InsertCommissionRate(CommissionRate commissionRate, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_commission_rate";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Consultant_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Commission_Rate_Free", DbType.Double, DBValue.ToDBFloat(commissionRate.CommissionRateFree)));
                paramCol.Add(new SqlDataParameter("@Commission_Rate_No_Free", DbType.Double, DBValue.ToDBFloat(commissionRate.CommissionRateNoFree)));
                paramCol.Add(new SqlDataParameter("@Scratch_Book_ID", DbType.Int32, DBValue.ToDBInt32(commissionRate.ScratchBookID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    commissionRate.ConsultantID = DBValue.ToInt32(paramCol["@Consultant_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateCommissionRate(CommissionRate commissionRate)
        {
            return UpdateCommissionRate(commissionRate, null);
        }

        private int UpdateCommissionRate(CommissionRate commissionRate, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_commission_rate";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Consultant_ID", DbType.Int32, DBValue.ToDBInt32(commissionRate.ConsultantID)));
                paramCol.Add(new SqlDataParameter("@Commission_Rate_Free", DbType.Double, DBValue.ToDBFloat(commissionRate.CommissionRateFree)));
                paramCol.Add(new SqlDataParameter("@Commission_Rate_No_Free", DbType.Double, DBValue.ToDBFloat(commissionRate.CommissionRateNoFree)));
                paramCol.Add(new SqlDataParameter("@Scratch_Book_ID", DbType.Int32, DBValue.ToDBInt32(commissionRate.ScratchBookID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region CommissionTable Methods

        private CommissionTable LoadCommissionTable(DataRow row)
        {
            CommissionTable commissionTable = new CommissionTable();

            // Store database values into our business object
            commissionTable.PromotionTypeCode = DBValue.ToString(row["promotion_type_code"]);
            commissionTable.ChannelCode = DBValue.ToString(row["channel_code"]);
            commissionTable.CommissionRate = DBValue.ToInt16(row["commission_rate"]);

            // return the filled object
            return commissionTable;
        }

        public CommissionTable[] GetCommissionTables()
        {
            return GetCommissionTables(null);
        }

        private CommissionTable[] GetCommissionTables(SqlInterface si)
        {
            CommissionTable[] commissionTables = null;

            string storedProcName = "efrcrm_get_commission_tables";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    commissionTables = new CommissionTable[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            commissionTables[i] = LoadCommissionTable(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return commissionTables;
        }



        #endregion

        #region Competitor Methods

        private Competitor LoadCompetitor(DataRow row)
        {
            Competitor competitor = new Competitor();

            // Store database values into our business object
            competitor.CompetitorID = DBValue.ToInt32(row["competitor_id"]);
            competitor.BusinessName = DBValue.ToString(row["business_name"]);
            competitor.Comments = DBValue.ToString(row["comments"]);

            // return the filled object
            return competitor;
        }

        public Competitor[] GetCompetitors()
        {
            return GetCompetitors(null);
        }

        private Competitor[] GetCompetitors(SqlInterface si)
        {
            Competitor[] competitors = null;

            string storedProcName = "efrcrm_get_competitors";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    competitors = new Competitor[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            competitors[i] = LoadCompetitor(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return competitors;
        }


        public Competitor GetCompetitorByID(int id)
        {
            return GetCompetitorByID(id, null);
        }

        private Competitor GetCompetitorByID(int id, SqlInterface si)
        {
            Competitor competitor = null;

            string storedProcName = "efrcrm_get_competitor_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Competitor_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        competitor = LoadCompetitor(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return competitor;
        }


        public int InsertCompetitor(Competitor competitor)
        {
            return InsertCompetitor(competitor, null);
        }

        private int InsertCompetitor(Competitor competitor, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_competitor";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Competitor_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Business_Name", DbType.String, DBValue.ToDBString(competitor.BusinessName)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(competitor.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    competitor.CompetitorID = DBValue.ToInt32(paramCol["@Competitor_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateCompetitor(Competitor competitor)
        {
            return UpdateCompetitor(competitor, null);
        }

        private int UpdateCompetitor(Competitor competitor, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_competitor";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Competitor_ID", DbType.Int32, DBValue.ToDBInt32(competitor.CompetitorID)));
                paramCol.Add(new SqlDataParameter("@Business_Name", DbType.String, DBValue.ToDBString(competitor.BusinessName)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(competitor.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region CompetitorAdvertising Methods

        private CompetitorAdvertising LoadCompetitorAdvertising(DataRow row)
        {
            CompetitorAdvertising competitorAdvertising = new CompetitorAdvertising();

            // Store database values into our business object
            competitorAdvertising.CompetitorAdvertisingID = DBValue.ToInt32(row["competitor_advertising_id"]);
            competitorAdvertising.CompetitorID = DBValue.ToInt32(row["competitor_id"]);
            competitorAdvertising.Description = DBValue.ToString(row["description"]);
            competitorAdvertising.PublicityDuration = DBValue.ToString(row["publicity_duration"]);
            competitorAdvertising.Comments = DBValue.ToString(row["comments"]);

            // return the filled object
            return competitorAdvertising;
        }

        public CompetitorAdvertising[] GetCompetitorAdvertisings()
        {
            return GetCompetitorAdvertisings(null);
        }

        private CompetitorAdvertising[] GetCompetitorAdvertisings(SqlInterface si)
        {
            CompetitorAdvertising[] competitorAdvertisings = null;

            string storedProcName = "efrcrm_get_competitor_advertisings";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    competitorAdvertisings = new CompetitorAdvertising[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            competitorAdvertisings[i] = LoadCompetitorAdvertising(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return competitorAdvertisings;
        }


        public CompetitorAdvertising GetCompetitorAdvertisingByID(int id)
        {
            return GetCompetitorAdvertisingByID(id, null);
        }

        private CompetitorAdvertising GetCompetitorAdvertisingByID(int id, SqlInterface si)
        {
            CompetitorAdvertising competitorAdvertising = null;

            string storedProcName = "efrcrm_get_competitor_advertising_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Competitor_Advertising_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        competitorAdvertising = LoadCompetitorAdvertising(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return competitorAdvertising;
        }


        public int InsertCompetitorAdvertising(CompetitorAdvertising competitorAdvertising)
        {
            return InsertCompetitorAdvertising(competitorAdvertising, null);
        }

        private int InsertCompetitorAdvertising(CompetitorAdvertising competitorAdvertising, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_competitor_advertising";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Competitor_Advertising_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Competitor_ID", DbType.Int32, DBValue.ToDBInt32(competitorAdvertising.CompetitorID)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(competitorAdvertising.Description)));
                paramCol.Add(new SqlDataParameter("@Publicity_Duration", DbType.String, DBValue.ToDBString(competitorAdvertising.PublicityDuration)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(competitorAdvertising.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    competitorAdvertising.CompetitorAdvertisingID = DBValue.ToInt32(paramCol["@Competitor_Advertising_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateCompetitorAdvertising(CompetitorAdvertising competitorAdvertising)
        {
            return UpdateCompetitorAdvertising(competitorAdvertising, null);
        }

        private int UpdateCompetitorAdvertising(CompetitorAdvertising competitorAdvertising, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_competitor_advertising";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Competitor_Advertising_ID", DbType.Int32, DBValue.ToDBInt32(competitorAdvertising.CompetitorAdvertisingID)));
                paramCol.Add(new SqlDataParameter("@Competitor_ID", DbType.Int32, DBValue.ToDBInt32(competitorAdvertising.CompetitorID)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(competitorAdvertising.Description)));
                paramCol.Add(new SqlDataParameter("@Publicity_Duration", DbType.String, DBValue.ToDBString(competitorAdvertising.PublicityDuration)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(competitorAdvertising.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region CompetitorAdvertisingSupport Methods

        private CompetitorAdvertisingSupport LoadCompetitorAdvertisingSupport(DataRow row)
        {
            CompetitorAdvertisingSupport competitorAdvertisingSupport = new CompetitorAdvertisingSupport();

            // Store database values into our business object
            competitorAdvertisingSupport.AdvertisingSupportID = DBValue.ToInt32(row["advertising_support_id"]);
            competitorAdvertisingSupport.CompetitorAdvertisingID = DBValue.ToInt32(row["competitor_advertising_id"]);

            // return the filled object
            return competitorAdvertisingSupport;
        }

        public CompetitorAdvertisingSupport[] GetCompetitorAdvertisingSupports()
        {
            return GetCompetitorAdvertisingSupports(null);
        }

        private CompetitorAdvertisingSupport[] GetCompetitorAdvertisingSupports(SqlInterface si)
        {
            CompetitorAdvertisingSupport[] competitorAdvertisingSupports = null;

            string storedProcName = "efrcrm_get_competitor_advertising_supports";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    competitorAdvertisingSupports = new CompetitorAdvertisingSupport[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            competitorAdvertisingSupports[i] = LoadCompetitorAdvertisingSupport(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return competitorAdvertisingSupports;
        }


        public CompetitorAdvertisingSupport GetCompetitorAdvertisingSupportByID(int id)
        {
            return GetCompetitorAdvertisingSupportByID(id, null);
        }

        private CompetitorAdvertisingSupport GetCompetitorAdvertisingSupportByID(int id, SqlInterface si)
        {
            CompetitorAdvertisingSupport competitorAdvertisingSupport = null;

            string storedProcName = "efrcrm_get_competitor_advertising_support_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Advertising_Support_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        competitorAdvertisingSupport = LoadCompetitorAdvertisingSupport(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return competitorAdvertisingSupport;
        }


        public int InsertCompetitorAdvertisingSupport(CompetitorAdvertisingSupport competitorAdvertisingSupport)
        {
            return InsertCompetitorAdvertisingSupport(competitorAdvertisingSupport, null);
        }

        private int InsertCompetitorAdvertisingSupport(CompetitorAdvertisingSupport competitorAdvertisingSupport, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_competitor_advertising_support";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Advertising_Support_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Competitor_Advertising_ID", DbType.Int32, DBValue.ToDBInt32(competitorAdvertisingSupport.CompetitorAdvertisingID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    competitorAdvertisingSupport.AdvertisingSupportID = DBValue.ToInt32(paramCol["@Advertising_Support_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateCompetitorAdvertisingSupport(CompetitorAdvertisingSupport competitorAdvertisingSupport)
        {
            return UpdateCompetitorAdvertisingSupport(competitorAdvertisingSupport, null);
        }

        private int UpdateCompetitorAdvertisingSupport(CompetitorAdvertisingSupport competitorAdvertisingSupport, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_competitor_advertising_support";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Advertising_Support_ID", DbType.Int32, DBValue.ToDBInt32(competitorAdvertisingSupport.AdvertisingSupportID)));
                paramCol.Add(new SqlDataParameter("@Competitor_Advertising_ID", DbType.Int32, DBValue.ToDBInt32(competitorAdvertisingSupport.CompetitorAdvertisingID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region Conciliation Methods

        private Conciliation LoadConciliation(DataRow row)
        {
            Conciliation conciliation = new Conciliation();

            // Store database values into our business object
            conciliation.ConciliationId = DBValue.ToInt32(row["conciliation_id"]);
            conciliation.SalesId = DBValue.ToInt32(row["sales_id"]);
            conciliation.SalesItemNo = DBValue.ToInt32(row["sales_item_no"]);
            conciliation.SupplierId = DBValue.ToInt16(row["supplier_id"]);
            conciliation.ConciliateDate = DBValue.ToDateTime(row["conciliate_date"]);
            conciliation.IsConciliated = DBValue.ToInt32(row["is_conciliated"]);
            conciliation.IsOrdered = DBValue.ToInt32(row["is_ordered"]);
            conciliation.InvoiceNumber = DBValue.ToString(row["invoice_number"]);

            // return the filled object
            return conciliation;
        }

        public Conciliation[] GetConciliations()
        {
            return GetConciliations(null);
        }

        private Conciliation[] GetConciliations(SqlInterface si)
        {
            Conciliation[] conciliations = null;

            string storedProcName = "efrcrm_get_conciliations";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    conciliations = new Conciliation[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            conciliations[i] = LoadConciliation(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return conciliations;
        }


        public Conciliation GetConciliationByID(int id)
        {
            return GetConciliationByID(id, null);
        }

        private Conciliation GetConciliationByID(int id, SqlInterface si)
        {
            Conciliation conciliation = null;

            string storedProcName = "efrcrm_get_conciliation_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Conciliation_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        conciliation = LoadConciliation(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return conciliation;
        }


        public int InsertConciliation(Conciliation conciliation)
        {
            return InsertConciliation(conciliation, null);
        }

        private int InsertConciliation(Conciliation conciliation, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_conciliation";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Conciliation_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Sales_id", DbType.Int32, DBValue.ToDBInt32(conciliation.SalesId)));
                paramCol.Add(new SqlDataParameter("@Sales_item_no", DbType.Int32, DBValue.ToDBInt32(conciliation.SalesItemNo)));
                paramCol.Add(new SqlDataParameter("@Supplier_id", DbType.Int16, DBValue.ToDBInt16(conciliation.SupplierId)));
                paramCol.Add(new SqlDataParameter("@Conciliate_date", DbType.DateTime, DBValue.ToDBDateTime(conciliation.ConciliateDate)));
                paramCol.Add(new SqlDataParameter("@Is_conciliated", DbType.Int32, DBValue.ToDBInt32(conciliation.IsConciliated)));
                paramCol.Add(new SqlDataParameter("@Is_ordered", DbType.Int32, DBValue.ToDBInt32(conciliation.IsOrdered)));
                paramCol.Add(new SqlDataParameter("@Invoice_number", DbType.String, DBValue.ToDBString(conciliation.InvoiceNumber)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    conciliation.ConciliationId = DBValue.ToInt32(paramCol["@Conciliation_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateConciliation(Conciliation conciliation)
        {
            return UpdateConciliation(conciliation, null);
        }

        private int UpdateConciliation(Conciliation conciliation, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_conciliation";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Conciliation_id", DbType.Int32, DBValue.ToDBInt32(conciliation.ConciliationId)));
                paramCol.Add(new SqlDataParameter("@Sales_id", DbType.Int32, DBValue.ToDBInt32(conciliation.SalesId)));
                paramCol.Add(new SqlDataParameter("@Sales_item_no", DbType.Int32, DBValue.ToDBInt32(conciliation.SalesItemNo)));
                paramCol.Add(new SqlDataParameter("@Supplier_id", DbType.Int16, DBValue.ToDBInt16(conciliation.SupplierId)));
                paramCol.Add(new SqlDataParameter("@Conciliate_date", DbType.DateTime, DBValue.ToDBDateTime(conciliation.ConciliateDate)));
                paramCol.Add(new SqlDataParameter("@Is_conciliated", DbType.Int32, DBValue.ToDBInt32(conciliation.IsConciliated)));
                paramCol.Add(new SqlDataParameter("@Is_ordered", DbType.Int32, DBValue.ToDBInt32(conciliation.IsOrdered)));
                paramCol.Add(new SqlDataParameter("@Invoice_number", DbType.String, DBValue.ToDBString(conciliation.InvoiceNumber)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region ConfirmationMethod Methods

        private ConfirmationMethod LoadConfirmationMethod(DataRow row)
        {
            ConfirmationMethod confirmationMethod = new ConfirmationMethod();

            // Store database values into our business object
            confirmationMethod.ConfirmationMethodID = DBValue.ToInt32(row["confirmation_method_id"]);
            confirmationMethod.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return confirmationMethod;
        }

        public ConfirmationMethod[] GetConfirmationMethods()
        {
            return GetConfirmationMethods(null);
        }

        private ConfirmationMethod[] GetConfirmationMethods(SqlInterface si)
        {
            ConfirmationMethod[] confirmationMethods = null;

            string storedProcName = "efrcrm_get_confirmation_methods";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    confirmationMethods = new ConfirmationMethod[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            confirmationMethods[i] = LoadConfirmationMethod(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return confirmationMethods;
        }


        public ConfirmationMethod GetConfirmationMethodByID(int id)
        {
            return GetConfirmationMethodByID(id, null);
        }

        private ConfirmationMethod GetConfirmationMethodByID(int id, SqlInterface si)
        {
            ConfirmationMethod confirmationMethod = null;

            string storedProcName = "efrcrm_get_confirmation_method_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Confirmation_Method_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        confirmationMethod = LoadConfirmationMethod(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return confirmationMethod;
        }


        public int InsertConfirmationMethod(ConfirmationMethod confirmationMethod)
        {
            return InsertConfirmationMethod(confirmationMethod, null);
        }

        private int InsertConfirmationMethod(ConfirmationMethod confirmationMethod, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_confirmation_method";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Confirmation_Method_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(confirmationMethod.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    confirmationMethod.ConfirmationMethodID = DBValue.ToInt32(paramCol["@Confirmation_Method_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateConfirmationMethod(ConfirmationMethod confirmationMethod)
        {
            return UpdateConfirmationMethod(confirmationMethod, null);
        }

        private int UpdateConfirmationMethod(ConfirmationMethod confirmationMethod, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_confirmation_method";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Confirmation_Method_ID", DbType.Int32, DBValue.ToDBInt32(confirmationMethod.ConfirmationMethodID)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(confirmationMethod.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region Consultant Methods

        private Consultant LoadConsultant(DataRow row)
        {
            Consultant consultant = new Consultant();

            // Store database values into our business object
            consultant.ConsultantId = DBValue.ToInt32(row["consultant_id"]);
            consultant.DivisionId = DBValue.ToInt16(row["division_id"]);
            consultant.ClientId = DBValue.ToInt32(row["client_id"]);
            consultant.ClientSequenceCode = DBValue.ToString(row["client_sequence_code"]);
            consultant.DepartmentId = DBValue.ToInt32(row["department_id"]);
            consultant.PartnerId = DBValue.ToInt32(row["partner_id"]);
            consultant.ConsultantTransferStatusId = DBValue.ToInt16(row["consultant_transfer_status_id"]);
            consultant.TerritoryId = DBValue.ToInt32(row["territory_id"]);
            consultant.ExtConsultantId = DBValue.ToInt32(row["ext_consultant_id"]);
            consultant.Name = DBValue.ToString(row["name"]);
            consultant.IsAgent = DBValue.ToInt32(row["is_agent"]);
            consultant.IsActive = DBValue.ToInt32(row["is_active"]);
            consultant.NtLogin = DBValue.ToString(row["nt_login"]);
            consultant.PhoneExtension = DBValue.ToString(row["phone_extension"]);
            consultant.EmailAddress = DBValue.ToString(row["email_address"]);
            consultant.HomePhone = DBValue.ToString(row["home_phone"]);
            consultant.WorkPhone = DBValue.ToString(row["work_phone"]);
            consultant.FaxNumber = DBValue.ToString(row["fax_number"]);
            consultant.TollFreePhone = DBValue.ToString(row["toll_free_phone"]);
            consultant.MobilePhone = DBValue.ToString(row["mobile_phone"]);
            consultant.PagerPhone = DBValue.ToString(row["pager_phone"]);
            consultant.DefaultProposalText = DBValue.ToString(row["default_proposal_text"]);
            consultant.CsrConsultant = DBValue.ToInt32(row["csr_consultant"]);
            consultant.Objectives = DBValue.ToInt16(row["objectives"]);
            consultant.IsAvailable = DBValue.ToInt32(row["is_available"]);
            consultant.Password = DBValue.ToString(row["password"]);
            consultant.KitPaid = DBValue.ToInt32(row["kit_paid"]);
            consultant.IsFm = DBValue.ToInt32(row["is_fm"]);
            consultant.CreateDate = DBValue.ToDateTime(row["create_date"]);

            // return the filled object
            return consultant;
        }

        public Consultant[] GetConsultants()
        {
            return GetConsultants(null);
        }

        private Consultant[] GetConsultants(SqlInterface si)
        {
            Consultant[] consultants = null;

            string storedProcName = "efrcrm_get_consultants";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    consultants = new Consultant[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            consultants[i] = LoadConsultant(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return consultants;
        }


        public Consultant GetConsultantByID(int id)
        {
            return GetConsultantByID(id, null);
        }

        private Consultant GetConsultantByID(int id, SqlInterface si)
        {
            Consultant consultant = null;

            string storedProcName = "efrcrm_get_consultant_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Consultant_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        consultant = LoadConsultant(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return consultant;
        }

        public Consultant GetConsultantByNtLogin(string ntLogin)
        {
            return GetConsultantByNtLogin(ntLogin, null);
        }

        private Consultant GetConsultantByNtLogin(string ntLogin, SqlInterface si)
        {
            Consultant consultant = null;

            string storedProcName = "efrcrm_get_consultant_by_nt_login";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@nt_login", DbType.String, DBValue.ToDBString(ntLogin)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        consultant = LoadConsultant(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return consultant;
        }

        public int InsertConsultant(Consultant consultant)
        {
            return InsertConsultant(consultant, null);
        }

        private int InsertConsultant(Consultant consultant, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_consultant";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Consultant_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Division_id", DbType.Int16, DBValue.ToDBInt16(consultant.DivisionId)));
                paramCol.Add(new SqlDataParameter("@Client_id", DbType.Int32, DBValue.ToDBInt32(consultant.ClientId)));
                paramCol.Add(new SqlDataParameter("@Client_sequence_code", DbType.String, DBValue.ToDBString(consultant.ClientSequenceCode)));
                paramCol.Add(new SqlDataParameter("@Department_id", DbType.Int32, DBValue.ToDBInt32(consultant.DepartmentId)));
                paramCol.Add(new SqlDataParameter("@Partner_id", DbType.Int32, DBValue.ToDBInt32(consultant.PartnerId)));
                paramCol.Add(new SqlDataParameter("@Consultant_transfer_status_id", DbType.Int16, DBValue.ToDBInt16(consultant.ConsultantTransferStatusId)));
                paramCol.Add(new SqlDataParameter("@Territory_id", DbType.Int32, DBValue.ToDBInt32(consultant.TerritoryId)));
                paramCol.Add(new SqlDataParameter("@Ext_consultant_id", DbType.Int32, DBValue.ToDBInt32(consultant.ExtConsultantId)));
                paramCol.Add(new SqlDataParameter("@Name", DbType.String, DBValue.ToDBString(consultant.Name)));
                paramCol.Add(new SqlDataParameter("@Is_agent", DbType.Int32, DBValue.ToDBInt32(consultant.IsAgent)));
                paramCol.Add(new SqlDataParameter("@Is_active", DbType.Int32, DBValue.ToDBInt32(consultant.IsActive)));
                paramCol.Add(new SqlDataParameter("@Nt_login", DbType.String, DBValue.ToDBString(consultant.NtLogin)));
                paramCol.Add(new SqlDataParameter("@Phone_extension", DbType.String, DBValue.ToDBString(consultant.PhoneExtension)));
                paramCol.Add(new SqlDataParameter("@Email_address", DbType.String, DBValue.ToDBString(consultant.EmailAddress)));
                paramCol.Add(new SqlDataParameter("@Home_phone", DbType.String, DBValue.ToDBString(consultant.HomePhone)));
                paramCol.Add(new SqlDataParameter("@Work_phone", DbType.String, DBValue.ToDBString(consultant.WorkPhone)));
                paramCol.Add(new SqlDataParameter("@Fax_number", DbType.String, DBValue.ToDBString(consultant.FaxNumber)));
                paramCol.Add(new SqlDataParameter("@Toll_free_phone", DbType.String, DBValue.ToDBString(consultant.TollFreePhone)));
                paramCol.Add(new SqlDataParameter("@Mobile_phone", DbType.String, DBValue.ToDBString(consultant.MobilePhone)));
                paramCol.Add(new SqlDataParameter("@Pager_phone", DbType.String, DBValue.ToDBString(consultant.PagerPhone)));
                paramCol.Add(new SqlDataParameter("@Default_proposal_text", DbType.String, DBValue.ToDBString(consultant.DefaultProposalText)));
                paramCol.Add(new SqlDataParameter("@Csr_consultant", DbType.Int32, DBValue.ToDBInt32(consultant.CsrConsultant)));
                paramCol.Add(new SqlDataParameter("@Objectives", DbType.Single, DBValue.ToDBFloat(consultant.Objectives)));
                paramCol.Add(new SqlDataParameter("@Is_available", DbType.Int32, DBValue.ToDBInt32(consultant.IsAvailable)));
                paramCol.Add(new SqlDataParameter("@Password", DbType.String, DBValue.ToDBString(consultant.Password)));
                paramCol.Add(new SqlDataParameter("@Kit_paid", DbType.Int32, DBValue.ToDBInt32(consultant.KitPaid)));
                paramCol.Add(new SqlDataParameter("@Is_fm", DbType.Int32, DBValue.ToDBInt32(consultant.IsFm)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(consultant.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    consultant.ConsultantId = DBValue.ToInt32(paramCol["@Consultant_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateConsultant(Consultant consultant)
        {
            return UpdateConsultant(consultant, null);
        }

        private int UpdateConsultant(Consultant consultant, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_consultant";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Consultant_id", DbType.Int32, DBValue.ToDBInt32(consultant.ConsultantId)));
                paramCol.Add(new SqlDataParameter("@Division_id", DbType.Int16, DBValue.ToDBInt16(consultant.DivisionId)));
                paramCol.Add(new SqlDataParameter("@Client_id", DbType.Int32, DBValue.ToDBInt32(consultant.ClientId)));
                paramCol.Add(new SqlDataParameter("@Client_sequence_code", DbType.String, DBValue.ToDBString(consultant.ClientSequenceCode)));
                paramCol.Add(new SqlDataParameter("@Department_id", DbType.Int32, DBValue.ToDBInt32(consultant.DepartmentId)));
                paramCol.Add(new SqlDataParameter("@Partner_id", DbType.Int32, DBValue.ToDBInt32(consultant.PartnerId)));
                paramCol.Add(new SqlDataParameter("@Consultant_transfer_status_id", DbType.Int16, DBValue.ToDBInt16(consultant.ConsultantTransferStatusId)));
                paramCol.Add(new SqlDataParameter("@Territory_id", DbType.Int32, DBValue.ToDBInt32(consultant.TerritoryId)));
                paramCol.Add(new SqlDataParameter("@Ext_consultant_id", DbType.Int32, DBValue.ToDBInt32(consultant.ExtConsultantId)));
                paramCol.Add(new SqlDataParameter("@Name", DbType.String, DBValue.ToDBString(consultant.Name)));
                paramCol.Add(new SqlDataParameter("@Is_agent", DbType.Int32, DBValue.ToDBInt32(consultant.IsAgent)));
                paramCol.Add(new SqlDataParameter("@Is_active", DbType.Int32, DBValue.ToDBInt32(consultant.IsActive)));
                paramCol.Add(new SqlDataParameter("@Nt_login", DbType.String, DBValue.ToDBString(consultant.NtLogin)));
                paramCol.Add(new SqlDataParameter("@Phone_extension", DbType.String, DBValue.ToDBString(consultant.PhoneExtension)));
                paramCol.Add(new SqlDataParameter("@Email_address", DbType.String, DBValue.ToDBString(consultant.EmailAddress)));
                paramCol.Add(new SqlDataParameter("@Home_phone", DbType.String, DBValue.ToDBString(consultant.HomePhone)));
                paramCol.Add(new SqlDataParameter("@Work_phone", DbType.String, DBValue.ToDBString(consultant.WorkPhone)));
                paramCol.Add(new SqlDataParameter("@Fax_number", DbType.String, DBValue.ToDBString(consultant.FaxNumber)));
                paramCol.Add(new SqlDataParameter("@Toll_free_phone", DbType.String, DBValue.ToDBString(consultant.TollFreePhone)));
                paramCol.Add(new SqlDataParameter("@Mobile_phone", DbType.String, DBValue.ToDBString(consultant.MobilePhone)));
                paramCol.Add(new SqlDataParameter("@Pager_phone", DbType.String, DBValue.ToDBString(consultant.PagerPhone)));
                paramCol.Add(new SqlDataParameter("@Default_proposal_text", DbType.String, DBValue.ToDBString(consultant.DefaultProposalText)));
                paramCol.Add(new SqlDataParameter("@Csr_consultant", DbType.Int32, DBValue.ToDBInt32(consultant.CsrConsultant)));
                paramCol.Add(new SqlDataParameter("@Objectives", DbType.Single, DBValue.ToDBFloat(consultant.Objectives)));
                paramCol.Add(new SqlDataParameter("@Is_available", DbType.Int32, DBValue.ToDBInt32(consultant.IsAvailable)));
                paramCol.Add(new SqlDataParameter("@Password", DbType.String, DBValue.ToDBString(consultant.Password)));
                paramCol.Add(new SqlDataParameter("@Kit_paid", DbType.Int32, DBValue.ToDBInt32(consultant.KitPaid)));
                paramCol.Add(new SqlDataParameter("@Is_fm", DbType.Int32, DBValue.ToDBInt32(consultant.IsFm)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(consultant.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region ConsultantAddress Methods

        private ConsultantAddress LoadConsultantAddress(DataRow row)
        {
            ConsultantAddress consultantAddress = new ConsultantAddress();

            // Store database values into our business object
            consultantAddress.ConsultantAddressId = DBValue.ToInt32(row["consultant_address_id"]);
            consultantAddress.ConsultantId = DBValue.ToInt32(row["consultant_id"]);
            consultantAddress.CountryCode = DBValue.ToString(row["country_code"]);
            consultantAddress.StateCode = DBValue.ToString(row["state_code"]);
            consultantAddress.StreetAddress = DBValue.ToString(row["street_address"]);
            consultantAddress.City = DBValue.ToString(row["city"]);
            consultantAddress.ZipCode = DBValue.ToString(row["zip_code"]);
            consultantAddress.DateInserted = DBValue.ToDateTime(row["date_inserted"]);

            // return the filled object
            return consultantAddress;
        }

        public ConsultantAddress[] GetConsultantAddresss()
        {
            return GetConsultantAddresss(null);
        }

        private ConsultantAddress[] GetConsultantAddresss(SqlInterface si)
        {
            ConsultantAddress[] consultantAddresss = null;

            string storedProcName = "efrcrm_get_consultant_addresss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    consultantAddresss = new ConsultantAddress[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            consultantAddresss[i] = LoadConsultantAddress(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return consultantAddresss;
        }


        public ConsultantAddress GetConsultantAddressByID(int id)
        {
            return GetConsultantAddressByID(id, null);
        }

        private ConsultantAddress GetConsultantAddressByID(int id, SqlInterface si)
        {
            ConsultantAddress consultantAddress = null;

            string storedProcName = "efrcrm_get_consultant_address_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Consultant_address_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        consultantAddress = LoadConsultantAddress(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return consultantAddress;
        }


        public int InsertConsultantAddress(ConsultantAddress consultantAddress)
        {
            return InsertConsultantAddress(consultantAddress, null);
        }

        private int InsertConsultantAddress(ConsultantAddress consultantAddress, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_consultant_address";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Consultant_address_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Consultant_id", DbType.Int32, DBValue.ToDBInt32(consultantAddress.ConsultantId)));
                paramCol.Add(new SqlDataParameter("@Country_code", DbType.String, DBValue.ToDBString(consultantAddress.CountryCode)));
                paramCol.Add(new SqlDataParameter("@State_code", DbType.String, DBValue.ToDBString(consultantAddress.StateCode)));
                paramCol.Add(new SqlDataParameter("@Street_address", DbType.String, DBValue.ToDBString(consultantAddress.StreetAddress)));
                paramCol.Add(new SqlDataParameter("@City", DbType.String, DBValue.ToDBString(consultantAddress.City)));
                paramCol.Add(new SqlDataParameter("@Zip_code", DbType.String, DBValue.ToDBString(consultantAddress.ZipCode)));
                paramCol.Add(new SqlDataParameter("@Date_inserted", DbType.DateTime, DBValue.ToDBDateTime(consultantAddress.DateInserted)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    consultantAddress.ConsultantAddressId = DBValue.ToInt32(paramCol["@Consultant_address_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateConsultantAddress(ConsultantAddress consultantAddress)
        {
            return UpdateConsultantAddress(consultantAddress, null);
        }

        private int UpdateConsultantAddress(ConsultantAddress consultantAddress, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_consultant_address";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Consultant_address_id", DbType.Int32, DBValue.ToDBInt32(consultantAddress.ConsultantAddressId)));
                paramCol.Add(new SqlDataParameter("@Consultant_id", DbType.Int32, DBValue.ToDBInt32(consultantAddress.ConsultantId)));
                paramCol.Add(new SqlDataParameter("@Country_code", DbType.String, DBValue.ToDBString(consultantAddress.CountryCode)));
                paramCol.Add(new SqlDataParameter("@State_code", DbType.String, DBValue.ToDBString(consultantAddress.StateCode)));
                paramCol.Add(new SqlDataParameter("@Street_address", DbType.String, DBValue.ToDBString(consultantAddress.StreetAddress)));
                paramCol.Add(new SqlDataParameter("@City", DbType.String, DBValue.ToDBString(consultantAddress.City)));
                paramCol.Add(new SqlDataParameter("@Zip_code", DbType.String, DBValue.ToDBString(consultantAddress.ZipCode)));
                paramCol.Add(new SqlDataParameter("@Date_inserted", DbType.DateTime, DBValue.ToDBDateTime(consultantAddress.DateInserted)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region ConsultantTransferStatus Methods

        private ConsultantTransferStatus LoadConsultantTransferStatus(DataRow row)
        {
            ConsultantTransferStatus consultantTransferStatus = new ConsultantTransferStatus();

            // Store database values into our business object
            consultantTransferStatus.ConsultantTransferStatusId = DBValue.ToInt16(row["consultant_transfer_status_id"]);
            consultantTransferStatus.ConsultantTransferStatusDesc = DBValue.ToString(row["consultant_transfer_status_desc"]);

            // return the filled object
            return consultantTransferStatus;
        }

        public ConsultantTransferStatus[] GetConsultantTransferStatuss()
        {
            return GetConsultantTransferStatuss(null);
        }

        private ConsultantTransferStatus[] GetConsultantTransferStatuss(SqlInterface si)
        {
            ConsultantTransferStatus[] consultantTransferStatuss = null;

            string storedProcName = "efrcrm_get_consultant_transfer_statuss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    consultantTransferStatuss = new ConsultantTransferStatus[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            consultantTransferStatuss[i] = LoadConsultantTransferStatus(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return consultantTransferStatuss;
        }



        #endregion

        #region Contacts Methods

        private Contacts LoadContacts(DataRow row)
        {
            Contacts contacts = new Contacts();

            // Store database values into our business object
            contacts.ContactID = DBValue.ToInt32(row["contact_id"]);
            contacts.FirstName = DBValue.ToString(row["first_name"]);
            contacts.LastName = DBValue.ToString(row["last_name"]);
            contacts.PhoneNumber = DBValue.ToString(row["phone_number"]);
            contacts.PhoneExt = DBValue.ToString(row["phone_ext"]);
            contacts.StreetAddress = DBValue.ToString(row["street_address"]);
            contacts.City = DBValue.ToString(row["city"]);
            contacts.StateCode = DBValue.ToString(row["state_code"]);
            contacts.CountryCode = DBValue.ToString(row["country_code"]);
            contacts.ZipCode = DBValue.ToString(row["zip_code"]);
            contacts.Comments = DBValue.ToString(row["comments"]);

            // return the filled object
            return contacts;
        }

        public Contacts[] GetContactss()
        {
            return GetContactss(null);
        }

        private Contacts[] GetContactss(SqlInterface si)
        {
            Contacts[] contactss = null;

            string storedProcName = "efrcrm_get_contactss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    contactss = new Contacts[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            contactss[i] = LoadContacts(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return contactss;
        }


        public Contacts GetContactsByID(int id)
        {
            return GetContactsByID(id, null);
        }

        private Contacts GetContactsByID(int id, SqlInterface si)
        {
            Contacts contacts = null;

            string storedProcName = "efrcrm_get_contacts_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Contact_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        contacts = LoadContacts(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return contacts;
        }


        public int InsertContacts(Contacts contacts)
        {
            return InsertContacts(contacts, null);
        }

        private int InsertContacts(Contacts contacts, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_contacts";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Contact_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@First_Name", DbType.String, DBValue.ToDBString(contacts.FirstName)));
                paramCol.Add(new SqlDataParameter("@Last_Name", DbType.String, DBValue.ToDBString(contacts.LastName)));
                paramCol.Add(new SqlDataParameter("@Phone_Number", DbType.String, DBValue.ToDBString(contacts.PhoneNumber)));
                paramCol.Add(new SqlDataParameter("@Phone_Ext", DbType.String, DBValue.ToDBString(contacts.PhoneExt)));
                paramCol.Add(new SqlDataParameter("@Street_Address", DbType.String, DBValue.ToDBString(contacts.StreetAddress)));
                paramCol.Add(new SqlDataParameter("@City", DbType.String, DBValue.ToDBString(contacts.City)));
                paramCol.Add(new SqlDataParameter("@State_Code", DbType.String, DBValue.ToDBString(contacts.StateCode)));
                paramCol.Add(new SqlDataParameter("@Country_Code", DbType.String, DBValue.ToDBString(contacts.CountryCode)));
                paramCol.Add(new SqlDataParameter("@Zip_Code", DbType.String, DBValue.ToDBString(contacts.ZipCode)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(contacts.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    contacts.ContactID = DBValue.ToInt32(paramCol["@Contact_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateContacts(Contacts contacts)
        {
            return UpdateContacts(contacts, null);
        }

        private int UpdateContacts(Contacts contacts, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_contacts";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Contact_ID", DbType.Int32, DBValue.ToDBInt32(contacts.ContactID)));
                paramCol.Add(new SqlDataParameter("@First_Name", DbType.String, DBValue.ToDBString(contacts.FirstName)));
                paramCol.Add(new SqlDataParameter("@Last_Name", DbType.String, DBValue.ToDBString(contacts.LastName)));
                paramCol.Add(new SqlDataParameter("@Phone_Number", DbType.String, DBValue.ToDBString(contacts.PhoneNumber)));
                paramCol.Add(new SqlDataParameter("@Phone_Ext", DbType.String, DBValue.ToDBString(contacts.PhoneExt)));
                paramCol.Add(new SqlDataParameter("@Street_Address", DbType.String, DBValue.ToDBString(contacts.StreetAddress)));
                paramCol.Add(new SqlDataParameter("@City", DbType.String, DBValue.ToDBString(contacts.City)));
                paramCol.Add(new SqlDataParameter("@State_Code", DbType.String, DBValue.ToDBString(contacts.StateCode)));
                paramCol.Add(new SqlDataParameter("@Country_Code", DbType.String, DBValue.ToDBString(contacts.CountryCode)));
                paramCol.Add(new SqlDataParameter("@Zip_Code", DbType.String, DBValue.ToDBString(contacts.ZipCode)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(contacts.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region ConversionRateTable Methods

        private ConversionRateTable LoadConversionRateTable(DataRow row)
        {
            ConversionRateTable conversionRateTable = new ConversionRateTable();

            // Store database values into our business object
            conversionRateTable.CurrencyCode = DBValue.ToString(row["currency_code"]);
            conversionRateTable.ConversionRate = DBValue.ToInt16(row["conversion_rate"]);
            conversionRateTable.ConversionDate = DBValue.ToDateTime(row["conversion_date"]);
            conversionRateTable.ConversionRateId = DBValue.ToInt32(row["conversion_rate_id"]);

            // return the filled object
            return conversionRateTable;
        }

        public ConversionRateTable[] GetConversionRateTables()
        {
            return GetConversionRateTables(null);
        }

        private ConversionRateTable[] GetConversionRateTables(SqlInterface si)
        {
            ConversionRateTable[] conversionRateTables = null;

            string storedProcName = "efrcrm_get_conversion_rate_tables";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    conversionRateTables = new ConversionRateTable[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            conversionRateTables[i] = LoadConversionRateTable(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return conversionRateTables;
        }



        #endregion

        #region CostRange Methods

        private CostRange LoadCostRange(DataRow row)
        {
            CostRange costRange = new CostRange();

            // Store database values into our business object
            costRange.CostRangeId = DBValue.ToInt32(row["cost_range_id"]);
            costRange.ScratchBookId = DBValue.ToInt32(row["scratch_book_id"]);
            costRange.ServiceTypeId = DBValue.ToInt16(row["service_type_id"]);
            costRange.Minimum = DBValue.ToInt32(row["minimum"]);
            costRange.Maximum = DBValue.ToInt32(row["maximum"]);
            costRange.Cost = DBValue.ToInt16(row["cost"]);
            costRange.MarginPlan = DBValue.ToInt16(row["margin_plan"]);

            // return the filled object
            return costRange;
        }

        public CostRange[] GetCostRanges()
        {
            return GetCostRanges(null);
        }

        private CostRange[] GetCostRanges(SqlInterface si)
        {
            CostRange[] costRanges = null;

            string storedProcName = "efrcrm_get_cost_ranges";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    costRanges = new CostRange[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            costRanges[i] = LoadCostRange(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return costRanges;
        }


        public CostRange GetCostRangeByID(int id)
        {
            return GetCostRangeByID(id, null);
        }

        private CostRange GetCostRangeByID(int id, SqlInterface si)
        {
            CostRange costRange = null;

            string storedProcName = "efrcrm_get_cost_range_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Cost_range_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        costRange = LoadCostRange(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return costRange;
        }


        public int InsertCostRange(CostRange costRange)
        {
            return InsertCostRange(costRange, null);
        }

        private int InsertCostRange(CostRange costRange, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_cost_range";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Cost_range_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Scratch_book_id", DbType.Int32, DBValue.ToDBInt32(costRange.ScratchBookId)));
                paramCol.Add(new SqlDataParameter("@Service_type_id", DbType.Int16, DBValue.ToDBInt16(costRange.ServiceTypeId)));
                paramCol.Add(new SqlDataParameter("@Minimum", DbType.Int32, DBValue.ToDBInt32(costRange.Minimum)));
                paramCol.Add(new SqlDataParameter("@Maximum", DbType.Int32, DBValue.ToDBInt32(costRange.Maximum)));
                paramCol.Add(new SqlDataParameter("@Cost", DbType.Single, DBValue.ToDBFloat(costRange.Cost)));
                paramCol.Add(new SqlDataParameter("@Margin_plan", DbType.Double, DBValue.ToDBFloat(costRange.MarginPlan)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    costRange.CostRangeId = DBValue.ToInt32(paramCol["@Cost_range_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateCostRange(CostRange costRange)
        {
            return UpdateCostRange(costRange, null);
        }

        private int UpdateCostRange(CostRange costRange, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_cost_range";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Cost_range_id", DbType.Int32, DBValue.ToDBInt32(costRange.CostRangeId)));
                paramCol.Add(new SqlDataParameter("@Scratch_book_id", DbType.Int32, DBValue.ToDBInt32(costRange.ScratchBookId)));
                paramCol.Add(new SqlDataParameter("@Service_type_id", DbType.Int16, DBValue.ToDBInt16(costRange.ServiceTypeId)));
                paramCol.Add(new SqlDataParameter("@Minimum", DbType.Int32, DBValue.ToDBInt32(costRange.Minimum)));
                paramCol.Add(new SqlDataParameter("@Maximum", DbType.Int32, DBValue.ToDBInt32(costRange.Maximum)));
                paramCol.Add(new SqlDataParameter("@Cost", DbType.Single, DBValue.ToDBFloat(costRange.Cost)));
                paramCol.Add(new SqlDataParameter("@Margin_plan", DbType.Double, DBValue.ToDBFloat(costRange.MarginPlan)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region Countries Methods

        private Countries LoadCountries(DataRow row)
        {
            Countries countries = new Countries();

            // Store database values into our business object
            countries.CountryCode = DBValue.ToString(row["country_code"]);
            countries.CountryName = DBValue.ToString(row["country_name"]);
            countries.LongCountryCode = DBValue.ToString(row["long_country_code"]);
            countries.NumericCode = DBValue.ToString(row["numeric_code"]);
            countries.CurrencyCode = DBValue.ToString(row["currency_code"]);

            // return the filled object
            return countries;
        }

        public Countries[] GetCountriess()
        {
            return GetCountriess(null);
        }

        private Countries[] GetCountriess(SqlInterface si)
        {
            Countries[] countriess = null;

            string storedProcName = "efrcrm_get_countriess";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    countriess = new Countries[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            countriess[i] = LoadCountries(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return countriess;
        }

        /*

                public int InsertCreditCardRefundRequest(CreditCardRefundRequest ccr)
                {
                    return InsertCreditCardRefundRequest(ccr, null);
                }

                private int InsertCreditCardRefundRequest(CreditCardRefundRequest ccr, SqlInterface si)
                {


                    int returnValue = int.MinValue;
                    string storedProcName = "efrcrm_insert_credit_card_refund_request";

                    // if the SqlInterface is passed as argument it means that 
                    // this call should be applied to an already open connection
                    // and the method which call this method is using transaction
                    bool newConnection = true;
                    if (si == null)
                    {
                        si = new SqlInterface(dataProvider, connectionString);
                    }
                    else
                    {
                        newConnection = false;
                    }

                    try
                    {

                        // declare stored procedure parameters
                        SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                        //paramCol.Add(new SqlDataParameter("@credit_check_id", DbType.Int32, ParameterDirection.Output)));
                        paramCol.Add(new SqlDataParameter("@sale_id", DbType.Int32, DBValue.ToDBInt32(ccr.SaleID)));
                        paramCol.Add(new SqlDataParameter("@bpps_id", DbType.Int32, DBValue.ToDBInt32(ccr.BppsID)));
                        paramCol.Add(new SqlDataParameter("@request_date", DbType.DateTime, DBValue.ToDBDateTime(ccr.RequestDate)));
                        paramCol.Add(new SqlDataParameter("@refund_amount", DbType.Double, DBValue.ToDBDouble(ccr.RefundAmount)));
                        paramCol.Add(new SqlDataParameter("@status_code", DbType.String, DBValue.ToDBString(ccr.StatusCode)));

                        if (newConnection)
                        {
                            // open the connection
                            si.Open();
                        }

                        returnValue = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }

                    finally
                    {
                        if (newConnection)
                        {
                            // Always close connection.
                            si.Close();
                        }
                    }
                    return returnValue;
                }


                public int UpdateCreditCardRefundRequest(CreditCardRefundRequest ccr)
                {
                    return UpdateCreditCardRefundRequest(ccr, null);
                }

                private int UpdateCreditCardRefundRequest(CreditCardRefundRequest ccr, SqlInterface si)
                {
                    int returnValue = int.MinValue;
                    string storedProcName = "efrcrm_update_credit_card_refund_request";

                    // if the SqlInterface is passed as argument it means that 
                    // this call should be applied to an already open connection
                    // and the method which call this method is using transaction
                    bool newConnection = true;
                    if (si == null)
                    {
                        si = new SqlInterface(dataProvider, connectionString);
                    }
                    else
                    {
                        newConnection = false;
                    }

                    try
                    {
                        //declare stored procedure parameters
                        SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                        paramCol.Add(new SqlDataParameter("@credit_card_refund_request_id", DbType.Int32, DBValue.ToDBInt32(ccr.CreditCardRefundRequestID)));
                        paramCol.Add(new SqlDataParameter("@sale_id", DbType.Int32, DBValue.ToDBInt32(ccr.SaleID)));
                        paramCol.Add(new SqlDataParameter("@bpps_id", DbType.Int32, DBValue.ToDBInt32(ccr.BppsID)));
                        paramCol.Add(new SqlDataParameter("@request_date", DbType.DateTime, DBValue.ToDBDateTime(ccr.RequestDate)));
                        paramCol.Add(new SqlDataParameter("@refund_amount", DbType.Double, DBValue.ToDBDouble(ccr.RefundAmount)));
                        paramCol.Add(new SqlDataParameter("@status_code", DbType.String, DBValue.ToDBString(ccr.StatusCode)));
                        paramCol.Add(new SqlDataParameter("@processed", DbType.Boolean, DBValue.ToDBBoolean(ccr.Processed)));
                        paramCol.Add(new SqlDataParameter("@credit_card_type_id", DbType.Byte, DBValue.ToDBByte(ccr.CreditCardTypeId)));
                        paramCol.Add(new SqlDataParameter("@cancelled", DbType.Boolean, DBValue.ToDBBoolean(ccr.Cancelled)));

                        if (newConnection)
                        {
                            // open the connection
                            si.Open();
                        }

                        returnValue = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);//number of rows affected ?

                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }

                    finally
                    {
                        if (newConnection)
                        {
                            // Always close connection.
                            si.Close();
                        }
                    }
                    return returnValue;
                }

        */



        #endregion

        #region Country Methods

        private Country LoadCountry(DataRow row)
        {
            Country country = new Country();

            // Store database values into our business object
            country.CountryCode = DBValue.ToString(row["country_code"]);
            country.CountryName = DBValue.ToString(row["country_name"]);
            country.CurrencyCode = DBValue.ToString(row["currency_code"]);

            // return the filled object
            return country;
        }

        public Country[] GetCountrys()
        {
            return GetCountrys(null);
        }

        private Country[] GetCountrys(SqlInterface si)
        {
            Country[] countrys = null;

            string storedProcName = "efrcrm_get_countrys";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    countrys = new Country[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            countrys[i] = LoadCountry(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return countrys;
        }



        #endregion

        #region CountryNames Methods

        private CountryNames LoadCountryNames(DataRow row)
        {
            CountryNames countryNames = new CountryNames();

            // Store database values into our business object
            countryNames.CountryCode = DBValue.ToString(row["country_code"]);
            countryNames.LanguageId = DBValue.ToInt16(row["language_id"]);
            countryNames.CountryName = DBValue.ToString(row["country_name"]);

            // return the filled object
            return countryNames;
        }

        public CountryNames[] GetCountryNamess()
        {
            return GetCountryNamess(null);
        }

        private CountryNames[] GetCountryNamess(SqlInterface si)
        {
            CountryNames[] countryNamess = null;

            string storedProcName = "efrcrm_get_country_namess";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    countryNamess = new CountryNames[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            countryNamess[i] = LoadCountryNames(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return countryNamess;
        }



        #endregion

        #region CouponSheet Methods

        private CouponSheet LoadCouponSheet(DataRow row)
        {
            CouponSheet couponSheet = new CouponSheet();

            // Store database values into our business object
            couponSheet.CouponSheetID = DBValue.ToInt32(row["coupon_sheet_id"]);
            couponSheet.ProductCode = DBValue.ToString(row["product_code"]);
            couponSheet.Description = DBValue.ToString(row["description"]);
            couponSheet.SheetPerBooklet = DBValue.ToInt32(row["sheet_per_booklet"]);
            couponSheet.ExpirationDate = DBValue.ToDateTime(row["expiration_date"]);
            couponSheet.CommissionPayable = DBValue.ToInt32(row["commission_payable"]);
            couponSheet.IsActive = DBValue.ToInt32(row["is_active"]);

            // return the filled object
            return couponSheet;
        }

        public CouponSheet[] GetCouponSheets()
        {
            return GetCouponSheets(null);
        }

        private CouponSheet[] GetCouponSheets(SqlInterface si)
        {
            CouponSheet[] couponSheets = null;

            string storedProcName = "efrcrm_get_coupon_sheets";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    couponSheets = new CouponSheet[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            couponSheets[i] = LoadCouponSheet(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return couponSheets;
        }


        public CouponSheet GetCouponSheetByID(int id)
        {
            return GetCouponSheetByID(id, null);
        }

        private CouponSheet GetCouponSheetByID(int id, SqlInterface si)
        {
            CouponSheet couponSheet = null;

            string storedProcName = "efrcrm_get_coupon_sheet_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Coupon_Sheet_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        couponSheet = LoadCouponSheet(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return couponSheet;
        }


        public int InsertCouponSheet(CouponSheet couponSheet)
        {
            return InsertCouponSheet(couponSheet, null);
        }

        private int InsertCouponSheet(CouponSheet couponSheet, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_coupon_sheet";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Coupon_Sheet_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Product_Code", DbType.String, DBValue.ToDBString(couponSheet.ProductCode)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(couponSheet.Description)));
                paramCol.Add(new SqlDataParameter("@Sheet_Per_Booklet", DbType.Int32, DBValue.ToDBInt32(couponSheet.SheetPerBooklet)));
                paramCol.Add(new SqlDataParameter("@Expiration_Date", DbType.DateTime, DBValue.ToDBDateTime(couponSheet.ExpirationDate)));
                paramCol.Add(new SqlDataParameter("@Commission_Payable", DbType.Int32, DBValue.ToDBInt32(couponSheet.CommissionPayable)));
                paramCol.Add(new SqlDataParameter("@Is_Active", DbType.Int32, DBValue.ToDBInt32(couponSheet.IsActive)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    couponSheet.CouponSheetID = DBValue.ToInt32(paramCol["@Coupon_Sheet_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateCouponSheet(CouponSheet couponSheet)
        {
            return UpdateCouponSheet(couponSheet, null);
        }

        private int UpdateCouponSheet(CouponSheet couponSheet, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_coupon_sheet";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Coupon_Sheet_ID", DbType.Int32, DBValue.ToDBInt32(couponSheet.CouponSheetID)));
                paramCol.Add(new SqlDataParameter("@Product_Code", DbType.String, DBValue.ToDBString(couponSheet.ProductCode)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(couponSheet.Description)));
                paramCol.Add(new SqlDataParameter("@Sheet_Per_Booklet", DbType.Int32, DBValue.ToDBInt32(couponSheet.SheetPerBooklet)));
                paramCol.Add(new SqlDataParameter("@Expiration_Date", DbType.DateTime, DBValue.ToDBDateTime(couponSheet.ExpirationDate)));
                paramCol.Add(new SqlDataParameter("@Commission_Payable", DbType.Int32, DBValue.ToDBInt32(couponSheet.CommissionPayable)));
                paramCol.Add(new SqlDataParameter("@Is_Active", DbType.Int32, DBValue.ToDBInt32(couponSheet.IsActive)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region CreditApprovalMethod Methods

        private CreditApprovalMethod LoadCreditApprovalMethod(DataRow row)
        {
            CreditApprovalMethod creditApprovalMethod = new CreditApprovalMethod();

            // Store database values into our business object
            creditApprovalMethod.CreditApprovalMethodID = DBValue.ToInt32(row["credit_approval_method_id"]);
            creditApprovalMethod.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return creditApprovalMethod;
        }

        public CreditApprovalMethod[] GetCreditApprovalMethods()
        {
            return GetCreditApprovalMethods(null);
        }

        private CreditApprovalMethod[] GetCreditApprovalMethods(SqlInterface si)
        {
            CreditApprovalMethod[] creditApprovalMethods = null;

            string storedProcName = "efrcrm_get_credit_approval_methods";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    creditApprovalMethods = new CreditApprovalMethod[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            creditApprovalMethods[i] = LoadCreditApprovalMethod(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return creditApprovalMethods;
        }


        public CreditApprovalMethod GetCreditApprovalMethodByID(int id)
        {
            return GetCreditApprovalMethodByID(id, null);
        }

        private CreditApprovalMethod GetCreditApprovalMethodByID(int id, SqlInterface si)
        {
            CreditApprovalMethod creditApprovalMethod = null;

            string storedProcName = "efrcrm_get_credit_approval_method_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Credit_Approval_Method_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        creditApprovalMethod = LoadCreditApprovalMethod(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return creditApprovalMethod;
        }


        public int InsertCreditApprovalMethod(CreditApprovalMethod creditApprovalMethod)
        {
            return InsertCreditApprovalMethod(creditApprovalMethod, null);
        }

        private int InsertCreditApprovalMethod(CreditApprovalMethod creditApprovalMethod, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_credit_approval_method";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Credit_Approval_Method_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(creditApprovalMethod.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    creditApprovalMethod.CreditApprovalMethodID = DBValue.ToInt32(paramCol["@Credit_Approval_Method_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateCreditApprovalMethod(CreditApprovalMethod creditApprovalMethod)
        {
            return UpdateCreditApprovalMethod(creditApprovalMethod, null);
        }

        private int UpdateCreditApprovalMethod(CreditApprovalMethod creditApprovalMethod, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_credit_approval_method";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Credit_Approval_Method_ID", DbType.Int32, DBValue.ToDBInt32(creditApprovalMethod.CreditApprovalMethodID)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(creditApprovalMethod.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region CreditCardTypes Methods

        private CreditCardTypes LoadCreditCardTypes(DataRow row)
        {
            CreditCardTypes creditCardTypes = new CreditCardTypes();

            // Store database values into our business object
            creditCardTypes.CreditCardTypeId = DBValue.ToInt16(row["credit_card_type_id"]);
            creditCardTypes.PaymentMethodId = DBValue.ToInt16(row["payment_method_id"]);
            creditCardTypes.CreditCardTypeName = DBValue.ToString(row["credit_card_type_name"]);
            creditCardTypes.CreditCardImage = DBValue.ToString(row["credit_card_image"]);
            creditCardTypes.DisplayOrder = DBValue.ToInt16(row["display_order"]);
            creditCardTypes.Displayable = DBValue.ToInt32(row["displayable"]);

            // return the filled object
            return creditCardTypes;
        }

        public CreditCardTypes[] GetCreditCardTypess()
        {
            return GetCreditCardTypess(null);
        }

        private CreditCardTypes[] GetCreditCardTypess(SqlInterface si)
        {
            CreditCardTypes[] creditCardTypess = null;

            string storedProcName = "efrcrm_get_credit_card_typess";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    creditCardTypess = new CreditCardTypes[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            creditCardTypess[i] = LoadCreditCardTypes(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return creditCardTypess;
        }



        #endregion
        /*
        #region CreditCardRefundRequest Methods
        private CreditCardRefundRequest LoadCreditCardRefundRequest(DataRow dr)
        {

            // Store database values into our business object
            CreditCardRefundRequest cca = new CreditCardRefundRequest();
            cca.CreditCardRefundRequestID = DBValue.ToInt32(dr["credit_card_refund_request_id"]);
            cca.SaleID = DBValue.ToInt32(dr["sale_id"]);
            cca.BppsID = DBValue.ToInt32(dr["bpps_id"]);
            cca.RequestDate = DBValue.ToDateTime(dr["request_date"]);
            cca.StatusCode = dr["status_code"].ToString();
            cca.Processed = DBValue.ToBoolean(dr["processed"]);
            cca.StatusDescription = dr["description"].ToString();
            cca.RefundAmount = DBValue.ToDouble(dr["refund_amount"]);
            cca.CreditCardTypeId = DBValue.ToByte(dr["credit_card_type_id"]);
            cca.CreditCardTypeName = dr["credit_card_type_name"].ToString();
            cca.Cancelled = DBValue.ToBoolean(dr["cancelled"]);

            return cca;
        }

        public CreditCardRefundRequest[] GetCreditCardRefundRequestLastDays(int days, bool cancelled)
        {
            return GetCreditCardRefundRequestLastDays(null, days, cancelled);
        }

        private CreditCardRefundRequest[] GetCreditCardRefundRequestLastDays(SqlInterface si, int days, bool cancelled)
        {
            CreditCardRefundRequest[] cca = null;

            string storedProcName = "efrcrm_get_credit_card_refund_request_last_days";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@days", DbType.Int32, DBValue.ToDBInt32(days)));
                paramCol.Add(new SqlDataParameter("@cancelled", DbType.Boolean, DBValue.ToBoolean(cancelled)));
                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);


                if (dt != null)
                {
                    cca = new CreditCardRefundRequest[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            cca[i] = LoadCreditCardRefundRequest(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return cca;
        }

        public CreditCardRefundRequest GetCreditCardRefundRequestByID(int id)
        {
            return GetCreditCardRefundRequestByID(null, id);
        }

        private CreditCardRefundRequest GetCreditCardRefundRequestByID(SqlInterface si, int id)
        {
            CreditCardRefundRequest cca = null;

            string storedProcName = "efrcrm_get_credit_card_refund_request_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@id", DbType.Int32, DBValue.ToDBInt32(id)));
                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }




                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);


                if (dt != null)
                {
                    // fill our objects
                    if (dt != null && dt.Rows.Count > 0)
                    {
                        // fill our objects
                        try
                        {
                            DataRow dr = dt.Rows[0];
                            cca = new CreditCardRefundRequest();
                            cca.CreditCardRefundRequestID = DBValue.ToInt32(dr["credit_card_refund_request_id"]);
                            cca.SaleID = DBValue.ToInt32(dr["sale_id"]);
                            cca.BppsID = DBValue.ToInt32(dr["bpps_id"]);
                            cca.CreditCardTypeId = DBValue.ToByte(dr["credit_card_type_id"]);
                            cca.RequestDate = DBValue.ToDateTime(dr["request_date"]);
                            cca.StatusCode = dr["status_code"].ToString();
                            cca.RefundAmount = DBValue.ToDouble(dr["refund_amount"]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }
            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return cca;
        }

        private CreditCardRefundRequest[] GetCreditCardRefundRequestByRequestDate(SqlInterface si, DateTime fromDate, DateTime toDate, bool cancelled)
        {
            CreditCardRefundRequest[] cca = null;

            string storedProcName = "efrcrm_get_credit_card_refund_request_by_request_date";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@fromDate", DbType.DateTime, DBValue.ToDBDateTime(fromDate)));
                paramCol.Add(new SqlDataParameter("@toDate", DbType.DateTime, DBValue.ToDBDateTime(toDate)));
                paramCol.Add(new SqlDataParameter("@cancelled", DbType.Boolean, DBValue.ToBoolean(cancelled)));
                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);


                if (dt != null)
                {
                    cca = new CreditCardRefundRequest[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            cca[i] = LoadCreditCardRefundRequest(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return cca;
        }

        public CreditCardRefundRequest[] GetCreditCardRefundRequestByRequestDate(DateTime fromDate, DateTime toDate, bool cancelled)
        {
            return GetCreditCardRefundRequestByRequestDate(null, fromDate, toDate, cancelled);
        }

        public CreditCardRefundRequest[] GetCreditCardRefundRequestUnapproved()
        {
            CreditCardRefundRequest[] cca = null;

            string storedProcName = "efrcrm_get_credit_card_refund_request_unapproved";
            SqlConnection conn = null;

            try
            {
                conn = new SqlConnection(connectionString);
                SqlCommand cmd = new SqlCommand(storedProcName, conn);
                cmd.CommandType = CommandType.StoredProcedure;
                conn.Open();

                // Use DataAdapter to fill dataset
                SqlDataAdapter da = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                da.Fill(dt);

                DataRow dr;

                if (dt != null)
                {
                    cca = new CreditCardRefundRequest[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            dr = dt.Rows[i];
                            cca[i] = new CreditCardRefundRequest();
                            cca[i].CreditCardRefundRequestID = DBValue.ToInt32(dr["credit_card_refund_request_id"]);
                            cca[i].SaleID = DBValue.ToInt32(dr["sale_id"]);
                            cca[i].BppsID = DBValue.ToInt32(dr["bpps_id"]);
                            cca[i].RequestDate = DBValue.ToDateTime(dr["request_date"]);
                            cca[i].StatusCode = dr["status_code"].ToString();
                            cca[i].Processed = DBValue.ToBoolean(dr["processed"]);
                            cca[i].RefundAmount = DBValue.ToDouble(dr["refund_amount"]);
                            cca[i].CreditCardTypeId = DBValue.ToByte(dr["credit_card_type_id"]);
                            cca[i].Cancelled = DBValue.ToBoolean(dr["cancelled"]);

                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }
            }
            finally
            {
                if (conn != null)
                {
                    conn.Close();
                    conn.Dispose();
                }
            }

            return cca;
        }

        //public CreditCardRefundRequest[] GetCreditCardRefundRequestUnapproved()
        //{
        //    return GetCreditCardRefundRequestUnapproved(null);
        //}
     
        #endregion
   */
        #region CreditCheckRequest Methods

        private CreditCheckRequest LoadCreditCheckRequest(DataRow dr)
        {

            // Store database values into our business object
            CreditCheckRequest cca = new CreditCheckRequest();
            cca.CreditCheckID = DBValue.ToInt32(dr["credit_check_id"]);
            cca.LeadID = DBValue.ToInt32(dr["lead_id"]);
            cca.ConsultantID = DBValue.ToInt32(dr["consultant_id"]);
            cca.RequestDate = DBValue.ToDateTime(dr["request_date"]);
            cca.OrderDate = DBValue.ToDateTime(dr["order_date"]);
            cca.AmountRequested = DBValue.ToDouble(dr["amount_requested"]);
            cca.CreditStatusID = DBValue.ToInt32(dr["credit_status_id"]);
            cca.AmountApproved = DBValue.ToDouble(dr["amount_approved"]);
            cca.LastName = dr["last_name"].ToString();
            cca.FirstName = dr["first_name"].ToString();
            cca.MidInit = dr["mid_init"].ToString();
            cca.Address = dr["address"].ToString();
            cca.City = dr["city"].ToString();
            cca.State = dr["state"].ToString();
            cca.Zip = dr["zip"].ToString();
            cca.SSN = dr["ssn"].ToString();
            cca.ResultDate = DBValue.ToDateTime(dr["result_date"]);
            cca.ResultConfirmationDate = DBValue.ToDateTime(dr["result_confirmation_date"]);
            cca.CreditScore = DBValue.ToInt32(dr["credit_score"]);
            cca.CreditReport = dr["credit_report"].ToString();

            return cca;
        }


        public CreditCheckRequest[] GetCreditCheckRequest()
        {
            return GetCreditCheckRequest(null);
        }

        private CreditCheckRequest[] GetCreditCheckRequest(SqlInterface si)
        {
            CreditCheckRequest[] cca = null;

            string storedProcName = "efrcrm_get_credit_check_request";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    cca = new CreditCheckRequest[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            cca[i] = LoadCreditCheckRequest(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return cca;
        }


        public CreditCheckRequest[] GetCreditCheckRequestUnconfirmed()
        {
            return GetCreditCheckRequestUnconfirmed(null);
        }

        private CreditCheckRequest[] GetCreditCheckRequestUnconfirmed(SqlInterface si)
        {
            CreditCheckRequest[] cca = null;

            string storedProcName = "efrcrm_get_credit_check_request_unconfirmed";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                //set pending status

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    cca = new CreditCheckRequest[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            cca[i] = LoadCreditCheckRequest(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }
            }

            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return cca;
        }


        public CreditCheckRequest[] GetCreditCheckRequestAwaitingOrder()
        {
            return GetCreditCheckRequestAwaitingOrder(null);
        }

        private CreditCheckRequest[] GetCreditCheckRequestAwaitingOrder(SqlInterface si)
        {
            CreditCheckRequest[] ccr = null;

            string storedProcName = "efrcrm_get_credit_check_request_awaiting_order";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    ccr = new CreditCheckRequest[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            ccr[i] = LoadCreditCheckRequest(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }
            }

            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return ccr;
        }


        public CreditCheckRequest[] GetCreditCheckRequestProcessed()
        {
            return GetCreditCheckRequestProcessed(null);
        }

        private CreditCheckRequest[] GetCreditCheckRequestProcessed(SqlInterface si)
        {
            CreditCheckRequest[] cca = null;

            string storedProcName = "efrcrm_get_credit_check_request_unconfirmed";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                //set pending status

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    cca = new CreditCheckRequest[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            cca[i] = LoadCreditCheckRequest(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }
            }

            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return cca;
        }



        public CreditCheckRequest GetCreditCheckRequestByID(int credit_check_id)
        {
            return GetCreditCheckRequestByID(credit_check_id, null);
        }



        private CreditCheckRequest GetCreditCheckRequestByID(int credit_check_id, SqlInterface si)
        {
            CreditCheckRequest cca = null;

            string storedProcName = "efrcrm_get_credit_check_request_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@credit_check_id", DbType.Int32, DBValue.ToDBInt32(credit_check_id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        cca = LoadCreditCheckRequest(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }

            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return cca;
        }


        public int UpdateCreditCheckRequest(CreditCheckRequest ccr)
        {
            return UpdateCreditCheckRequest(ccr, null);
        }

        private int UpdateCreditCheckRequest(CreditCheckRequest ccr, SqlInterface si)
        {


            int returnValue = int.MinValue;
            string storedProcName = "efrcrm_update_credit_check_request";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {

                System.Diagnostics.Debug.Write(ccr.AmountApproved.ToString());
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@credit_check_id", DbType.Int32, DBValue.ToDBInt32(ccr.CreditCheckID)));
                paramCol.Add(new SqlDataParameter("@lead_id", DbType.Int32, DBValue.ToDBInt32(ccr.LeadID)));
                paramCol.Add(new SqlDataParameter("@consultant_id", DbType.Int32, DBValue.ToDBInt32(ccr.ConsultantID)));
                paramCol.Add(new SqlDataParameter("@request_date", DbType.DateTime, DBValue.ToDBDateTime(ccr.RequestDate)));
                paramCol.Add(new SqlDataParameter("@amount_requested", DbType.Double, DBValue.ToDBDouble(ccr.AmountRequested)));
                paramCol.Add(new SqlDataParameter("@order_date", DbType.DateTime, DBValue.ToDBDateTime(ccr.OrderDate)));
                paramCol.Add(new SqlDataParameter("@credit_status_id", DbType.Int32, DBValue.ToDBInt32(ccr.CreditStatusID)));
                paramCol.Add(new SqlDataParameter("@credit_score", DbType.Int32, DBValue.ToDBInt32(ccr.CreditScore)));
                paramCol.Add(new SqlDataParameter("@amount_approved", DbType.Double, DBValue.ToDBDouble(ccr.AmountApproved)));
                paramCol.Add(new SqlDataParameter("@first_name", DbType.String, DBValue.ToDBString(ccr.FirstName)));
                paramCol.Add(new SqlDataParameter("@last_name", DbType.String, DBValue.ToDBString(ccr.LastName)));
                paramCol.Add(new SqlDataParameter("@mid_init", DbType.String, DBValue.ToDBString(ccr.MidInit)));
                paramCol.Add(new SqlDataParameter("@address", DbType.String, DBValue.ToDBString(ccr.Address)));
                paramCol.Add(new SqlDataParameter("@city", DbType.String, DBValue.ToDBString(ccr.City)));
                paramCol.Add(new SqlDataParameter("@state", DbType.String, DBValue.ToDBString(ccr.State)));
                paramCol.Add(new SqlDataParameter("@zip", DbType.String, DBValue.ToDBString(ccr.Zip)));
                paramCol.Add(new SqlDataParameter("@ssn", DbType.String, DBValue.ToDBString(ccr.SSN)));
                paramCol.Add(new SqlDataParameter("@result_date", DbType.DateTime, DBValue.ToDBDateTime(ccr.ResultDate)));
                paramCol.Add(new SqlDataParameter("@result_confirmation_date", DbType.DateTime, DBValue.ToDBDateTime(ccr.ResultConfirmationDate)));
                paramCol.Add(new SqlDataParameter("@credit_report", DbType.String, DBValue.ToDBString(ccr.CreditReport)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                returnValue = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

            }
            catch (Exception ex)
            {
                throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
            }

            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return returnValue;
        }

        public int InsertCreditCheckRequest(CreditCheckRequest ccr)
        {
            return InsertCreditCheckRequest(ccr, null);
        }

        private int InsertCreditCheckRequest(CreditCheckRequest ccr, SqlInterface si)
        {


            int returnValue = int.MinValue;
            string storedProcName = "efrcrm_insert_credit_check_request";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {

                System.Diagnostics.Debug.Write(ccr.AmountApproved.ToString());
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                //paramCol.Add(new SqlDataParameter("@credit_check_id", DbType.Int32, ParameterDirection.Output)));
                paramCol.Add(new SqlDataParameter("@lead_id", DbType.Int32, DBValue.ToDBInt32(ccr.LeadID)));
                paramCol.Add(new SqlDataParameter("@consultant_id", DbType.Int32, DBValue.ToDBInt32(ccr.ConsultantID)));
                paramCol.Add(new SqlDataParameter("@request_date", DbType.DateTime, DBValue.ToDBDateTime(ccr.RequestDate)));
                paramCol.Add(new SqlDataParameter("@amount_requested", DbType.Double, DBValue.ToDBDouble(ccr.AmountRequested)));
                paramCol.Add(new SqlDataParameter("@order_date", DbType.DateTime, DBValue.ToDBDateTime(ccr.OrderDate)));
                paramCol.Add(new SqlDataParameter("@credit_status_id", DbType.Int32, DBValue.ToDBInt32(ccr.CreditStatusID)));
                paramCol.Add(new SqlDataParameter("@credit_score", DbType.Int32, DBValue.ToDBInt32(ccr.CreditScore)));
                paramCol.Add(new SqlDataParameter("@amount_approved", DbType.Double, DBValue.ToDBDouble(ccr.AmountApproved)));
                paramCol.Add(new SqlDataParameter("@first_name", DbType.String, DBValue.ToDBString(ccr.FirstName)));
                paramCol.Add(new SqlDataParameter("@last_name", DbType.String, DBValue.ToDBString(ccr.LastName)));
                paramCol.Add(new SqlDataParameter("@mid_init", DbType.String, DBValue.ToDBString(ccr.MidInit)));
                paramCol.Add(new SqlDataParameter("@address", DbType.String, DBValue.ToDBString(ccr.Address)));
                paramCol.Add(new SqlDataParameter("@city", DbType.String, DBValue.ToDBString(ccr.City)));
                paramCol.Add(new SqlDataParameter("@state", DbType.String, DBValue.ToDBString(ccr.State)));
                paramCol.Add(new SqlDataParameter("@zip", DbType.String, DBValue.ToDBString(ccr.Zip)));
                paramCol.Add(new SqlDataParameter("@ssn", DbType.String, DBValue.ToDBString(ccr.SSN)));
                paramCol.Add(new SqlDataParameter("@result_date", DbType.DateTime, DBValue.ToDBDateTime(ccr.ResultDate)));
                paramCol.Add(new SqlDataParameter("@result_confirmation_date", DbType.DateTime, DBValue.ToDBDateTime(ccr.ResultConfirmationDate)));
                paramCol.Add(new SqlDataParameter("@credit_report", DbType.String, DBValue.ToDBString(ccr.CreditReport)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                returnValue = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

            }
            catch (Exception ex)
            {
                throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
            }

            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return returnValue;
        }

        public CreditCheckRequest[] GetCreditCheckRequestByLeadID(int lead_id)
        {
            return GetCreditCheckRequestByLeadID(lead_id, null);
        }

        private CreditCheckRequest[] GetCreditCheckRequestByLeadID(int lead_id, SqlInterface si)
        {
            CreditCheckRequest[] cca = null;

            string storedProcName = "efrcrm_get_credit_check_request_by_lead_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                //set pending status
                paramCol.Add(new SqlDataParameter("@lead_ID", DbType.Int32, DBValue.ToDBInt32(lead_id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    cca = new CreditCheckRequest[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            cca[i] = LoadCreditCheckRequest(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return cca;
        }


        public CreditCheckRequest GetCreditCheckRequestByLeadIDLast(int lead_id)
        {
            return GetCreditCheckRequestByLeadIDLast(lead_id, null);
        }

        private CreditCheckRequest GetCreditCheckRequestByLeadIDLast(int lead_id, SqlInterface si)
        {
            CreditCheckRequest cca = null;

            string storedProcName = "efrcrm_get_credit_check_request_by_lead_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                //set pending status
                paramCol.Add(new SqlDataParameter("@lead_ID", DbType.Int32, DBValue.ToDBInt32(lead_id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    cca = new CreditCheckRequest();

                    int lastid = 0;
                    int j = 0;
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        int id = Convert.ToInt32(dt.Rows[i][0]);
                        if (id > lastid)
                        {
                            lastid = id;
                            j = i;
                        }
                    }
                    // fill our objects
                    try
                    {
                        cca = LoadCreditCheckRequest(dt.Rows[j]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }

                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return cca;
        }



        /*	public int InsertConsultant(Consultant consultant) 
            {
                return InsertConsultant(consultant, null);}

            private int InsertConsultant(Consultant consultant, SqlInterface si) 
            {
                int result = int.MinValue;

                string storedProcName = "efrcrm_insert_consultant";

                // if the SqlInterface is passed as argument it means that 
                // this call should be applied to an already open connection
                // and the method which call this method is using transaction
                bool newConnection = true;
                if (si == null) 
                {
                    si = new SqlInterface(dataProvider, connectionString);
                } 
                else 
                {
                    newConnection = false;
                }

                try 
                {
                    // declare stored procedure parameters
                    SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                    paramCol.Add(new SqlDataParameter("@Consultant_id", DbType.Int32, ParameterDirection.Output));
                    paramCol.Add(new SqlDataParameter("@Division_id", DbType.Int16, DBValue.ToDBInt16(consultant.DivisionId)));
                    paramCol.Add(new SqlDataParameter("@Client_id", DbType.Int32, DBValue.ToDBInt32(consultant.ClientId)));
                    paramCol.Add(new SqlDataParameter("@Client_sequence_code", DbType.String, DBValue.ToDBString(consultant.ClientSequenceCode)));
                    paramCol.Add(new SqlDataParameter("@Department_id", DbType.Int32, DBValue.ToDBInt32(consultant.DepartmentId)));
                    paramCol.Add(new SqlDataParameter("@Partner_id", DbType.Int32, DBValue.ToDBInt32(consultant.PartnerId)));
                    paramCol.Add(new SqlDataParameter("@Consultant_transfer_status_id", DbType.Int16, DBValue.ToDBInt16(consultant.ConsultantTransferStatusId)));
                    paramCol.Add(new SqlDataParameter("@Territory_id", DbType.Int32, DBValue.ToDBInt32(consultant.TerritoryId)));
                    paramCol.Add(new SqlDataParameter("@Ext_consultant_id", DbType.Int32, DBValue.ToDBInt32(consultant.ExtConsultantId)));
                    paramCol.Add(new SqlDataParameter("@Name", DbType.String, DBValue.ToDBString(consultant.Name)));
                    paramCol.Add(new SqlDataParameter("@Is_agent", DbType.Int32, DBValue.ToDBInt32(consultant.IsAgent)));
                    paramCol.Add(new SqlDataParameter("@Is_active", DbType.Int32, DBValue.ToDBInt32(consultant.IsActive)));
                    paramCol.Add(new SqlDataParameter("@Nt_login", DbType.String, DBValue.ToDBString(consultant.NtLogin)));
                    paramCol.Add(new SqlDataParameter("@Phone_extension", DbType.String, DBValue.ToDBString(consultant.PhoneExtension)));
                    paramCol.Add(new SqlDataParameter("@Email_address", DbType.String, DBValue.ToDBString(consultant.EmailAddress)));
                    paramCol.Add(new SqlDataParameter("@Home_phone", DbType.String, DBValue.ToDBString(consultant.HomePhone)));
                    paramCol.Add(new SqlDataParameter("@Work_phone", DbType.String, DBValue.ToDBString(consultant.WorkPhone)));
                    paramCol.Add(new SqlDataParameter("@Fax_number", DbType.String, DBValue.ToDBString(consultant.FaxNumber)));
                    paramCol.Add(new SqlDataParameter("@Toll_free_phone", DbType.String, DBValue.ToDBString(consultant.TollFreePhone)));
                    paramCol.Add(new SqlDataParameter("@Mobile_phone", DbType.String, DBValue.ToDBString(consultant.MobilePhone)));
                    paramCol.Add(new SqlDataParameter("@Pager_phone", DbType.String, DBValue.ToDBString(consultant.PagerPhone)));
                    paramCol.Add(new SqlDataParameter("@Default_proposal_text", DbType.String, DBValue.ToDBString(consultant.DefaultProposalText)));
                    paramCol.Add(new SqlDataParameter("@Csr_consultant", DbType.Int32, DBValue.ToDBInt32(consultant.CsrConsultant)));
                    paramCol.Add(new SqlDataParameter("@Objectives", DbType.Single, DBValue.ToDBFloat(consultant.Objectives)));
                    paramCol.Add(new SqlDataParameter("@Is_available", DbType.Int32, DBValue.ToDBInt32(consultant.IsAvailable)));
                    paramCol.Add(new SqlDataParameter("@Password", DbType.String, DBValue.ToDBString(consultant.Password)));
                    paramCol.Add(new SqlDataParameter("@Kit_paid", DbType.Int32, DBValue.ToDBInt32(consultant.KitPaid)));
                    paramCol.Add(new SqlDataParameter("@Is_fm", DbType.Int32, DBValue.ToDBInt32(consultant.IsFm)));
                    paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(consultant.CreateDate)));

		
                    if (newConnection) 
                    {
                        // open the connection
                        si.Open();
                    }

                    result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                    if (result > 0) 
                    {
                        // Get generated id
                        consultant.ConsultantId = DBValue.ToInt32(paramCol["@Consultant_id"].Value);

                    } 
                    else 
                    {
                        throw new SqlDataException("Error inserting into database calling " + storedProcName);
                    }	


                } 
                finally 
                {
                    if(newConnection) 
                    {
                        // Always close connection.
                        si.Close();
                    }
                }
                return result;
            }
    */
        /*
                public int UpdateConsultant(Consultant consultant) 
                {
                    return UpdateConsultant(consultant, null);}

                private int UpdateConsultant(Consultant consultant, SqlInterface si) 
                {
                    int result = int.MinValue;

                    string storedProcName = "efrcrm_update_consultant";

                    // if the SqlInterface is passed as argument it means that 
                    // this call should be applied to an already open connection
                    // and the method which call this method is using transaction
                    bool newConnection = true;
                    if (si == null) 
                    {
                        si = new SqlInterface(dataProvider, connectionString);
                    } 
                    else 
                    {
                        newConnection = false;
                    }

                    try 
                    {
                        // declare stored procedure parameters
                        SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                        paramCol.Add(new SqlDataParameter("@Consultant_id", DbType.Int32, DBValue.ToDBInt32(consultant.ConsultantId)));
                        paramCol.Add(new SqlDataParameter("@Division_id", DbType.Int16, DBValue.ToDBInt16(consultant.DivisionId)));
                        paramCol.Add(new SqlDataParameter("@Client_id", DbType.Int32, DBValue.ToDBInt32(consultant.ClientId)));
                        paramCol.Add(new SqlDataParameter("@Client_sequence_code", DbType.String, DBValue.ToDBString(consultant.ClientSequenceCode)));
                        paramCol.Add(new SqlDataParameter("@Department_id", DbType.Int32, DBValue.ToDBInt32(consultant.DepartmentId)));
                        paramCol.Add(new SqlDataParameter("@Partner_id", DbType.Int32, DBValue.ToDBInt32(consultant.PartnerId)));
                        paramCol.Add(new SqlDataParameter("@Consultant_transfer_status_id", DbType.Int16, DBValue.ToDBInt16(consultant.ConsultantTransferStatusId)));
                        paramCol.Add(new SqlDataParameter("@Territory_id", DbType.Int32, DBValue.ToDBInt32(consultant.TerritoryId)));
                        paramCol.Add(new SqlDataParameter("@Ext_consultant_id", DbType.Int32, DBValue.ToDBInt32(consultant.ExtConsultantId)));
                        paramCol.Add(new SqlDataParameter("@Name", DbType.String, DBValue.ToDBString(consultant.Name)));
                        paramCol.Add(new SqlDataParameter("@Is_agent", DbType.Int32, DBValue.ToDBInt32(consultant.IsAgent)));
                        paramCol.Add(new SqlDataParameter("@Is_active", DbType.Int32, DBValue.ToDBInt32(consultant.IsActive)));
                        paramCol.Add(new SqlDataParameter("@Nt_login", DbType.String, DBValue.ToDBString(consultant.NtLogin)));
                        paramCol.Add(new SqlDataParameter("@Phone_extension", DbType.String, DBValue.ToDBString(consultant.PhoneExtension)));
                        paramCol.Add(new SqlDataParameter("@Email_address", DbType.String, DBValue.ToDBString(consultant.EmailAddress)));
                        paramCol.Add(new SqlDataParameter("@Home_phone", DbType.String, DBValue.ToDBString(consultant.HomePhone)));
                        paramCol.Add(new SqlDataParameter("@Work_phone", DbType.String, DBValue.ToDBString(consultant.WorkPhone)));
                        paramCol.Add(new SqlDataParameter("@Fax_number", DbType.String, DBValue.ToDBString(consultant.FaxNumber)));
                        paramCol.Add(new SqlDataParameter("@Toll_free_phone", DbType.String, DBValue.ToDBString(consultant.TollFreePhone)));
                        paramCol.Add(new SqlDataParameter("@Mobile_phone", DbType.String, DBValue.ToDBString(consultant.MobilePhone)));
                        paramCol.Add(new SqlDataParameter("@Pager_phone", DbType.String, DBValue.ToDBString(consultant.PagerPhone)));
                        paramCol.Add(new SqlDataParameter("@Default_proposal_text", DbType.String, DBValue.ToDBString(consultant.DefaultProposalText)));
                        paramCol.Add(new SqlDataParameter("@Csr_consultant", DbType.Int32, DBValue.ToDBInt32(consultant.CsrConsultant)));
                        paramCol.Add(new SqlDataParameter("@Objectives", DbType.Single, DBValue.ToDBFloat(consultant.Objectives)));
                        paramCol.Add(new SqlDataParameter("@Is_available", DbType.Int32, DBValue.ToDBInt32(consultant.IsAvailable)));
                        paramCol.Add(new SqlDataParameter("@Password", DbType.String, DBValue.ToDBString(consultant.Password)));
                        paramCol.Add(new SqlDataParameter("@Kit_paid", DbType.Int32, DBValue.ToDBInt32(consultant.KitPaid)));
                        paramCol.Add(new SqlDataParameter("@Is_fm", DbType.Int32, DBValue.ToDBInt32(consultant.IsFm)));
                        paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(consultant.CreateDate)));

		
                        if (newConnection) 
                        {
                            // open the connection
                            si.Open();
                        }

                        result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                        if (result > 0) 
                        {
                            return result;
                        }
                        else 
                        {
                            throw new SqlDataException("Error updating database calling " + storedProcName);
                        }


                    } 
                    finally 
                    {
                        if(newConnection) 
                        {
                            // Always close connection.
                            si.Close();
                        }
                    }
                    return result;
                }

        */

        #endregion

        #region CreditCheckStatus Methods

        private CreditCheckStatus LoadCreditCheckStatus(DataRow row)
        {
            CreditCheckStatus ccs = new CreditCheckStatus();

            // Store database values into our business object
            ccs.CreditCheckStatusID = DBValue.ToInt32(row["credit_check_status_id"]);
            ccs.Description = row["description"].ToString();


            // return the filled object
            return ccs;
        }

        public CreditCheckStatus GetCreditCheckStatusByID(int creditCheckStatusID)
        {
            return GetCreditCheckStatusByID(creditCheckStatusID, null);
        }

        private CreditCheckStatus GetCreditCheckStatusByID(int creditCheckStatusID, SqlInterface si)
        {
            CreditCheckStatus ccs = null;

            string storedProcName = "efrcrm_get_credit_check_status_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@credit_check_status_id", DbType.Int32, DBValue.ToDBInt32(creditCheckStatusID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {

                    // fill our objects
                    try
                    {
                        ccs = LoadCreditCheckStatus(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }

                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return ccs;
        }


        public CreditCheckStatus[] GetCreditCheckStatus()
        {
            return GetCreditCheckStatus(null);
        }

        private CreditCheckStatus[] GetCreditCheckStatus(SqlInterface si)
        {
            CreditCheckStatus[] ccs = null;

            string storedProcName = "efrcrm_get_credit_check_status";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    ccs = new CreditCheckStatus[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            ccs[i] = LoadCreditCheckStatus(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return ccs;
        }


        #endregion

        #region CrmUsers Methods

        private CrmUsers LoadCrmUsers(DataRow row)
        {
            CrmUsers crmUsers = new CrmUsers();

            // Store database values into our business object
            crmUsers.ConsultantID = DBValue.ToString(row["consultant_id"]);
            crmUsers.UserName = DBValue.ToString(row["user_name"]);
            crmUsers.Password = DBValue.ToString(row["password"]);
            crmUsers.AccessLevel = DBValue.ToInt32(row["access_level"]);

            // return the filled object
            return crmUsers;
        }

        public CrmUsers[] GetCrmUserss()
        {
            return GetCrmUserss(null);
        }

        private CrmUsers[] GetCrmUserss(SqlInterface si)
        {
            CrmUsers[] crmUserss = null;

            string storedProcName = "efrcrm_get_crm_userss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    crmUserss = new CrmUsers[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            crmUserss[i] = LoadCrmUsers(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return crmUserss;
        }



        #endregion

        #region Cultures Methods

        private Cultures LoadCultures(DataRow row)
        {
            Cultures cultures = new Cultures();

            // Store database values into our business object
            cultures.CultureId = DBValue.ToInt16(row["culture_id"]);
            cultures.LanguageId = DBValue.ToInt16(row["language_id"]);
            cultures.CountryCode = DBValue.ToString(row["country_code"]);
            cultures.CultureName = DBValue.ToString(row["culture_name"]);
            cultures.DisplayName = DBValue.ToString(row["display_name"]);
            cultures.CultureCode = DBValue.ToString(row["culture_code"]);
            cultures.IsoCode = DBValue.ToString(row["iso_code"]);

            // return the filled object
            return cultures;
        }

        public Cultures[] GetCulturess()
        {
            return GetCulturess(null);
        }

        private Cultures[] GetCulturess(SqlInterface si)
        {
            Cultures[] culturess = null;

            string storedProcName = "efrcrm_get_culturess";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    culturess = new Cultures[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            culturess[i] = LoadCultures(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return culturess;
        }



        #endregion

        #region CustomerStatus Methods

        private CustomerStatus LoadCustomerStatus(DataRow row)
        {
            CustomerStatus customerStatus = new CustomerStatus();

            // Store database values into our business object
            customerStatus.CustomerStatusId = DBValue.ToInt32(row["customer_status_id"]);
            customerStatus.CustomerStatusDesc = DBValue.ToString(row["customer_status_desc"]);
            customerStatus.CreateDate = DBValue.ToDateTime(row["create_date"]);

            // return the filled object
            return customerStatus;
        }

        public CustomerStatus[] GetCustomerStatuss()
        {
            return GetCustomerStatuss(null);
        }

        private CustomerStatus[] GetCustomerStatuss(SqlInterface si)
        {
            CustomerStatus[] customerStatuss = null;

            string storedProcName = "efrcrm_get_customer_statuss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    customerStatuss = new CustomerStatus[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            customerStatuss[i] = LoadCustomerStatus(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return customerStatuss;
        }


        public CustomerStatus GetCustomerStatusByID(int id)
        {
            return GetCustomerStatusByID(id, null);
        }

        private CustomerStatus GetCustomerStatusByID(int id, SqlInterface si)
        {
            CustomerStatus customerStatus = null;

            string storedProcName = "efrcrm_get_customer_status_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Customer_status_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        customerStatus = LoadCustomerStatus(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return customerStatus;
        }


        public int InsertCustomerStatus(CustomerStatus customerStatus)
        {
            return InsertCustomerStatus(customerStatus, null);
        }

        private int InsertCustomerStatus(CustomerStatus customerStatus, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_customer_status";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Customer_status_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Customer_status_desc", DbType.String, DBValue.ToDBString(customerStatus.CustomerStatusDesc)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(customerStatus.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    customerStatus.CustomerStatusId = DBValue.ToInt32(paramCol["@Customer_status_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateCustomerStatus(CustomerStatus customerStatus)
        {
            return UpdateCustomerStatus(customerStatus, null);
        }

        private int UpdateCustomerStatus(CustomerStatus customerStatus, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_customer_status";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Customer_status_id", DbType.Int32, DBValue.ToDBInt32(customerStatus.CustomerStatusId)));
                paramCol.Add(new SqlDataParameter("@Customer_status_desc", DbType.String, DBValue.ToDBString(customerStatus.CustomerStatusDesc)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(customerStatus.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region DefaultConsultantRate Methods

        private DefaultConsultantRate LoadDefaultConsultantRate(DataRow row)
        {
            DefaultConsultantRate defaultConsultantRate = new DefaultConsultantRate();

            // Store database values into our business object
            defaultConsultantRate.ConsultantID = DBValue.ToInt32(row["consultant_id"]);
            defaultConsultantRate.PromotionTypeCode = DBValue.ToString(row["promotion_type_code"]);
            defaultConsultantRate.DefaultCommissionRate = DBValue.ToInt16(row["default_commission_rate"]);

            // return the filled object
            return defaultConsultantRate;
        }

        public DefaultConsultantRate[] GetDefaultConsultantRates()
        {
            return GetDefaultConsultantRates(null);
        }

        private DefaultConsultantRate[] GetDefaultConsultantRates(SqlInterface si)
        {
            DefaultConsultantRate[] defaultConsultantRates = null;

            string storedProcName = "efrcrm_get_default_consultant_rates";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    defaultConsultantRates = new DefaultConsultantRate[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            defaultConsultantRates[i] = LoadDefaultConsultantRate(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return defaultConsultantRates;
        }


        public DefaultConsultantRate GetDefaultConsultantRateByID(int id)
        {
            return GetDefaultConsultantRateByID(id, null);
        }

        private DefaultConsultantRate GetDefaultConsultantRateByID(int id, SqlInterface si)
        {
            DefaultConsultantRate defaultConsultantRate = null;

            string storedProcName = "efrcrm_get_default_consultant_rate_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Consultant_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        defaultConsultantRate = LoadDefaultConsultantRate(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return defaultConsultantRate;
        }


        public int InsertDefaultConsultantRate(DefaultConsultantRate defaultConsultantRate)
        {
            return InsertDefaultConsultantRate(defaultConsultantRate, null);
        }

        private int InsertDefaultConsultantRate(DefaultConsultantRate defaultConsultantRate, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_default_consultant_rate";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Consultant_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Promotion_Type_Code", DbType.String, DBValue.ToDBString(defaultConsultantRate.PromotionTypeCode)));
                paramCol.Add(new SqlDataParameter("@Default_Commission_Rate", DbType.Double, DBValue.ToDBFloat(defaultConsultantRate.DefaultCommissionRate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    defaultConsultantRate.ConsultantID = DBValue.ToInt32(paramCol["@Consultant_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateDefaultConsultantRate(DefaultConsultantRate defaultConsultantRate)
        {
            return UpdateDefaultConsultantRate(defaultConsultantRate, null);
        }

        private int UpdateDefaultConsultantRate(DefaultConsultantRate defaultConsultantRate, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_default_consultant_rate";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Consultant_ID", DbType.Int32, DBValue.ToDBInt32(defaultConsultantRate.ConsultantID)));
                paramCol.Add(new SqlDataParameter("@Promotion_Type_Code", DbType.String, DBValue.ToDBString(defaultConsultantRate.PromotionTypeCode)));
                paramCol.Add(new SqlDataParameter("@Default_Commission_Rate", DbType.Double, DBValue.ToDBFloat(defaultConsultantRate.DefaultCommissionRate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region Department Methods

        private Department LoadDepartment(DataRow row)
        {
            Department department = new Department();

            // Store database values into our business object
            department.DepartmentId = DBValue.ToInt32(row["department_id"]);
            department.DepartmentName = DBValue.ToString(row["department_name"]);

            // return the filled object
            return department;
        }

        public Department[] GetDepartments()
        {
            return GetDepartments(null);
        }

        private Department[] GetDepartments(SqlInterface si)
        {
            Department[] departments = null;

            string storedProcName = "efrcrm_get_departments";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    departments = new Department[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            departments[i] = LoadDepartment(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return departments;
        }


        public Department GetDepartmentByID(int id)
        {
            return GetDepartmentByID(id, null);
        }

        private Department GetDepartmentByID(int id, SqlInterface si)
        {
            Department department = null;

            string storedProcName = "efrcrm_get_department_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Department_Id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        department = LoadDepartment(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return department;
        }


        public int InsertDepartment(Department department)
        {
            return InsertDepartment(department, null);
        }

        private int InsertDepartment(Department department, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_department";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Department_Id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Department_name", DbType.String, DBValue.ToDBString(department.DepartmentName)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    department.DepartmentId = DBValue.ToInt32(paramCol["@Department_Id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateDepartment(Department department)
        {
            return UpdateDepartment(department, null);
        }

        private int UpdateDepartment(Department department, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_department";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Department_Id", DbType.Int32, DBValue.ToDBInt32(department.DepartmentId)));
                paramCol.Add(new SqlDataParameter("@Department_name", DbType.String, DBValue.ToDBString(department.DepartmentName)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region Deposit Methods

        private Deposit LoadDeposit(DataRow row)
        {
            Deposit deposit = new Deposit();

            // Store database values into our business object
            deposit.DepositId = DBValue.ToInt32(row["deposit_id"]);
            deposit.PaymentMethodId = DBValue.ToInt16(row["payment_method_id"]);
            deposit.BankId = DBValue.ToInt32(row["bank_id"]);
            deposit.BankAccountNo = DBValue.ToString(row["bank_account_no"]);
            deposit.DepositDate = DBValue.ToDateTime(row["deposit_date"]);

            // return the filled object
            return deposit;
        }

        public Deposit[] GetDeposits()
        {
            return GetDeposits(null);
        }

        private Deposit[] GetDeposits(SqlInterface si)
        {
            Deposit[] deposits = null;

            string storedProcName = "efrcrm_get_deposits";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    deposits = new Deposit[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            deposits[i] = LoadDeposit(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return deposits;
        }


        public Deposit GetDepositByID(int id)
        {
            return GetDepositByID(id, null);
        }

        private Deposit GetDepositByID(int id, SqlInterface si)
        {
            Deposit deposit = null;

            string storedProcName = "efrcrm_get_deposit_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Deposit_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        deposit = LoadDeposit(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return deposit;
        }


        public int InsertDeposit(Deposit deposit)
        {
            return InsertDeposit(deposit, null);
        }

        private int InsertDeposit(Deposit deposit, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_deposit";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Deposit_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Payment_method_id", DbType.Int16, DBValue.ToDBInt16(deposit.PaymentMethodId)));
                paramCol.Add(new SqlDataParameter("@Bank_id", DbType.Int32, DBValue.ToDBInt32(deposit.BankId)));
                paramCol.Add(new SqlDataParameter("@Bank_account_no", DbType.String, DBValue.ToDBString(deposit.BankAccountNo)));
                paramCol.Add(new SqlDataParameter("@Deposit_date", DbType.DateTime, DBValue.ToDBDateTime(deposit.DepositDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    deposit.DepositId = DBValue.ToInt32(paramCol["@Deposit_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateDeposit(Deposit deposit)
        {
            return UpdateDeposit(deposit, null);
        }

        private int UpdateDeposit(Deposit deposit, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_deposit";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Deposit_id", DbType.Int32, DBValue.ToDBInt32(deposit.DepositId)));
                paramCol.Add(new SqlDataParameter("@Payment_method_id", DbType.Int16, DBValue.ToDBInt16(deposit.PaymentMethodId)));
                paramCol.Add(new SqlDataParameter("@Bank_id", DbType.Int32, DBValue.ToDBInt32(deposit.BankId)));
                paramCol.Add(new SqlDataParameter("@Bank_account_no", DbType.String, DBValue.ToDBString(deposit.BankAccountNo)));
                paramCol.Add(new SqlDataParameter("@Deposit_date", DbType.DateTime, DBValue.ToDBDateTime(deposit.DepositDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region DepositItem Methods

        private DepositItem LoadDepositItem(DataRow row)
        {
            DepositItem depositItem = new DepositItem();

            // Store database values into our business object
            depositItem.DepositID = DBValue.ToInt32(row["deposit_id"]);
            depositItem.SalesID = DBValue.ToInt32(row["sales_id"]);
            depositItem.PaiementNo = DBValue.ToInt32(row["paiement_no"]);

            // return the filled object
            return depositItem;
        }

        public DepositItem[] GetDepositItems()
        {
            return GetDepositItems(null);
        }

        private DepositItem[] GetDepositItems(SqlInterface si)
        {
            DepositItem[] depositItems = null;

            string storedProcName = "efrcrm_get_deposit_items";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    depositItems = new DepositItem[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            depositItems[i] = LoadDepositItem(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return depositItems;
        }


        public DepositItem GetDepositItemByID(int id)
        {
            return GetDepositItemByID(id, null);
        }

        private DepositItem GetDepositItemByID(int id, SqlInterface si)
        {
            DepositItem depositItem = null;

            string storedProcName = "efrcrm_get_deposit_item_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Deposit_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        depositItem = LoadDepositItem(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return depositItem;
        }


        public int InsertDepositItem(DepositItem depositItem)
        {
            return InsertDepositItem(depositItem, null);
        }

        private int InsertDepositItem(DepositItem depositItem, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_deposit_item";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Deposit_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(depositItem.SalesID)));
                paramCol.Add(new SqlDataParameter("@Paiement_No", DbType.Int32, DBValue.ToDBInt32(depositItem.PaiementNo)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    depositItem.DepositID = DBValue.ToInt32(paramCol["@Deposit_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateDepositItem(DepositItem depositItem)
        {
            return UpdateDepositItem(depositItem, null);
        }

        private int UpdateDepositItem(DepositItem depositItem, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_deposit_item";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Deposit_ID", DbType.Int32, DBValue.ToDBInt32(depositItem.DepositID)));
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(depositItem.SalesID)));
                paramCol.Add(new SqlDataParameter("@Paiement_No", DbType.Int32, DBValue.ToDBInt32(depositItem.PaiementNo)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region Destinations Methods

        private Destinations LoadDestinations(DataRow row)
        {
            Destinations destinations = new Destinations();

            // Store database values into our business object
            destinations.DestinationID = DBValue.ToInt32(row["destination_id"]);
            destinations.WebSiteID = DBValue.ToInt32(row["web_site_id"]);
            destinations.URL = DBValue.ToString(row["url"]);

            // return the filled object
            return destinations;
        }

        public Destinations[] GetDestinationss()
        {
            return GetDestinationss(null);
        }

        private Destinations[] GetDestinationss(SqlInterface si)
        {
            Destinations[] destinationss = null;

            string storedProcName = "efrcrm_get_destinationss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    destinationss = new Destinations[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            destinationss[i] = LoadDestinations(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return destinationss;
        }


        public Destinations GetDestinationsByID(int id)
        {
            return GetDestinationsByID(id, null);
        }

        private Destinations GetDestinationsByID(int id, SqlInterface si)
        {
            Destinations destinations = null;

            string storedProcName = "efrcrm_get_destinations_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Destination_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        destinations = LoadDestinations(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return destinations;
        }


        public int InsertDestinations(Destinations destinations)
        {
            return InsertDestinations(destinations, null);
        }

        private int InsertDestinations(Destinations destinations, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_destinations";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Destination_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Web_Site_ID", DbType.Int32, DBValue.ToDBInt32(destinations.WebSiteID)));
                paramCol.Add(new SqlDataParameter("@URL", DbType.String, DBValue.ToDBString(destinations.URL)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    destinations.DestinationID = DBValue.ToInt32(paramCol["@Destination_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateDestinations(Destinations destinations)
        {
            return UpdateDestinations(destinations, null);
        }

        private int UpdateDestinations(Destinations destinations, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_destinations";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Destination_ID", DbType.Int32, DBValue.ToDBInt32(destinations.DestinationID)));
                paramCol.Add(new SqlDataParameter("@Web_Site_ID", DbType.Int32, DBValue.ToDBInt32(destinations.WebSiteID)));
                paramCol.Add(new SqlDataParameter("@URL", DbType.String, DBValue.ToDBString(destinations.URL)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region Destinations2 Methods

        private Destinations2 LoadDestinations2(DataRow row)
        {
            Destinations2 destinations2 = new Destinations2();

            // Store database values into our business object
            destinations2.DestinationID = DBValue.ToInt32(row["destination_id"]);
            destinations2.WebSiteId = DBValue.ToInt32(row["web_site_id"]);
            destinations2.URL = DBValue.ToString(row["url"]);

            // return the filled object
            return destinations2;
        }

        public Destinations2[] GetDestinations2s()
        {
            return GetDestinations2s(null);
        }

        private Destinations2[] GetDestinations2s(SqlInterface si)
        {
            Destinations2[] destinations2s = null;

            string storedProcName = "efrcrm_get_destinations2s";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    destinations2s = new Destinations2[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            destinations2s[i] = LoadDestinations2(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return destinations2s;
        }


        public Destinations2 GetDestinations2ByID(int id)
        {
            return GetDestinations2ByID(id, null);
        }

        private Destinations2 GetDestinations2ByID(int id, SqlInterface si)
        {
            Destinations2 destinations2 = null;

            string storedProcName = "efrcrm_get_destinations2_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Destination_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        destinations2 = LoadDestinations2(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return destinations2;
        }


        public int InsertDestinations2(Destinations2 destinations2)
        {
            return InsertDestinations2(destinations2, null);
        }

        private int InsertDestinations2(Destinations2 destinations2, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_destinations2";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Destination_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Web_Site_Id", DbType.Int32, DBValue.ToDBInt32(destinations2.WebSiteId)));
                paramCol.Add(new SqlDataParameter("@URL", DbType.String, DBValue.ToDBString(destinations2.URL)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    destinations2.DestinationID = DBValue.ToInt32(paramCol["@Destination_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateDestinations2(Destinations2 destinations2)
        {
            return UpdateDestinations2(destinations2, null);
        }

        private int UpdateDestinations2(Destinations2 destinations2, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_destinations2";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Destination_ID", DbType.Int32, DBValue.ToDBInt32(destinations2.DestinationID)));
                paramCol.Add(new SqlDataParameter("@Web_Site_Id", DbType.Int32, DBValue.ToDBInt32(destinations2.WebSiteId)));
                paramCol.Add(new SqlDataParameter("@URL", DbType.String, DBValue.ToDBString(destinations2.URL)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region DetailedPromotion Methods

        private DetailedPromotion LoadDetailedPromotion(DataRow row)
        {
            DetailedPromotion detailedPromotion = new DetailedPromotion();

            // Store database values into our business object
            detailedPromotion.PromotionID = DBValue.ToInt32(row["promotion_id"]);
            detailedPromotion.PromotionTypeCode = DBValue.ToString(row["promotion_type_code"]);
            detailedPromotion.TargetAgeGroupCode = DBValue.ToString(row["target_age_group_code"]);
            detailedPromotion.TargetGenderGroupCode = DBValue.ToString(row["target_gender_group_code"]);
            detailedPromotion.TargetGroupCode = DBValue.ToString(row["target_group_code"]);
            detailedPromotion.PromotionYear = DBValue.ToInt32(row["promotion_year"]);
            detailedPromotion.PromotionMonth = DBValue.ToInt32(row["promotion_month"]);
            detailedPromotion.Description = DBValue.ToString(row["description"]);
            detailedPromotion.QuantitySent = DBValue.ToInt32(row["quantity_sent"]);
            detailedPromotion.CallGoal = DBValue.ToInt32(row["call_goal"]);
            detailedPromotion.CardBudget = DBValue.ToInt32(row["card_budget"]);

            // return the filled object
            return detailedPromotion;
        }

        public DetailedPromotion[] GetDetailedPromotions()
        {
            return GetDetailedPromotions(null);
        }

        private DetailedPromotion[] GetDetailedPromotions(SqlInterface si)
        {
            DetailedPromotion[] detailedPromotions = null;

            string storedProcName = "efrcrm_get_detailed_promotions";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    detailedPromotions = new DetailedPromotion[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            detailedPromotions[i] = LoadDetailedPromotion(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return detailedPromotions;
        }


        public DetailedPromotion GetDetailedPromotionByID(int id)
        {
            return GetDetailedPromotionByID(id, null);
        }

        private DetailedPromotion GetDetailedPromotionByID(int id, SqlInterface si)
        {
            DetailedPromotion detailedPromotion = null;

            string storedProcName = "efrcrm_get_detailed_promotion_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Promotion_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        detailedPromotion = LoadDetailedPromotion(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return detailedPromotion;
        }


        public int InsertDetailedPromotion(DetailedPromotion detailedPromotion)
        {
            return InsertDetailedPromotion(detailedPromotion, null);
        }

        private int InsertDetailedPromotion(DetailedPromotion detailedPromotion, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_detailed_promotion";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Promotion_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Promotion_Type_Code", DbType.String, DBValue.ToDBString(detailedPromotion.PromotionTypeCode)));
                paramCol.Add(new SqlDataParameter("@Target_Age_Group_Code", DbType.String, DBValue.ToDBString(detailedPromotion.TargetAgeGroupCode)));
                paramCol.Add(new SqlDataParameter("@Target_Gender_Group_Code", DbType.String, DBValue.ToDBString(detailedPromotion.TargetGenderGroupCode)));
                paramCol.Add(new SqlDataParameter("@Target_Group_Code", DbType.String, DBValue.ToDBString(detailedPromotion.TargetGroupCode)));
                paramCol.Add(new SqlDataParameter("@Promotion_Year", DbType.Int32, DBValue.ToDBInt32(detailedPromotion.PromotionYear)));
                paramCol.Add(new SqlDataParameter("@Promotion_Month", DbType.Int32, DBValue.ToDBInt32(detailedPromotion.PromotionMonth)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(detailedPromotion.Description)));
                paramCol.Add(new SqlDataParameter("@Quantity_Sent", DbType.Int32, DBValue.ToDBInt32(detailedPromotion.QuantitySent)));
                paramCol.Add(new SqlDataParameter("@Call_Goal", DbType.Int32, DBValue.ToDBInt32(detailedPromotion.CallGoal)));
                paramCol.Add(new SqlDataParameter("@Card_Budget", DbType.Int32, DBValue.ToDBInt32(detailedPromotion.CardBudget)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    detailedPromotion.PromotionID = DBValue.ToInt32(paramCol["@Promotion_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateDetailedPromotion(DetailedPromotion detailedPromotion)
        {
            return UpdateDetailedPromotion(detailedPromotion, null);
        }

        private int UpdateDetailedPromotion(DetailedPromotion detailedPromotion, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_detailed_promotion";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Promotion_ID", DbType.Int32, DBValue.ToDBInt32(detailedPromotion.PromotionID)));
                paramCol.Add(new SqlDataParameter("@Promotion_Type_Code", DbType.String, DBValue.ToDBString(detailedPromotion.PromotionTypeCode)));
                paramCol.Add(new SqlDataParameter("@Target_Age_Group_Code", DbType.String, DBValue.ToDBString(detailedPromotion.TargetAgeGroupCode)));
                paramCol.Add(new SqlDataParameter("@Target_Gender_Group_Code", DbType.String, DBValue.ToDBString(detailedPromotion.TargetGenderGroupCode)));
                paramCol.Add(new SqlDataParameter("@Target_Group_Code", DbType.String, DBValue.ToDBString(detailedPromotion.TargetGroupCode)));
                paramCol.Add(new SqlDataParameter("@Promotion_Year", DbType.Int32, DBValue.ToDBInt32(detailedPromotion.PromotionYear)));
                paramCol.Add(new SqlDataParameter("@Promotion_Month", DbType.Int32, DBValue.ToDBInt32(detailedPromotion.PromotionMonth)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(detailedPromotion.Description)));
                paramCol.Add(new SqlDataParameter("@Quantity_Sent", DbType.Int32, DBValue.ToDBInt32(detailedPromotion.QuantitySent)));
                paramCol.Add(new SqlDataParameter("@Call_Goal", DbType.Int32, DBValue.ToDBInt32(detailedPromotion.CallGoal)));
                paramCol.Add(new SqlDataParameter("@Card_Budget", DbType.Int32, DBValue.ToDBInt32(detailedPromotion.CardBudget)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region Division Methods

        private Division LoadDivision(DataRow row)
        {
            Division division = new Division();

            // Store database values into our business object
            division.DivisionId = DBValue.ToInt16(row["division_id"]);
            division.DivisionName = DBValue.ToString(row["division_name"]);
            division.Logo = DBValue.ToString(row["logo"]);
            division.ShortName = DBValue.ToString(row["short_name"]);

            // return the filled object
            return division;
        }

        public Division[] GetDivisions()
        {
            return GetDivisions(null);
        }

        private Division[] GetDivisions(SqlInterface si)
        {
            Division[] divisions = null;

            string storedProcName = "efrcrm_get_divisions";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    divisions = new Division[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            divisions[i] = LoadDivision(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return divisions;
        }



        #endregion

        #region DoubleLead Methods

        private DoubleLead LoadDoubleLead(DataRow row)
        {
            DoubleLead doubleLead = new DoubleLead();

            // Store database values into our business object
            doubleLead.DivisionID = DBValue.ToInt32(row["division_id"]);
            doubleLead.PromotionID = DBValue.ToInt32(row["promotion_id"]);
            doubleLead.TempLeadId = DBValue.ToInt32(row["temp_lead_id"]);
            doubleLead.ChannelCode = DBValue.ToString(row["channel_code"]);
            doubleLead.LeadStatusID = DBValue.ToInt32(row["lead_status_id"]);
            doubleLead.ConsultantID = DBValue.ToInt32(row["consultant_id"]);
            doubleLead.LeadEntryDate = DBValue.ToDateTime(row["lead_entry_date"]);
            doubleLead.Salutation = DBValue.ToString(row["salutation"]);
            doubleLead.FirstName = DBValue.ToString(row["first_name"]);
            doubleLead.LastName = DBValue.ToString(row["last_name"]);
            doubleLead.Organization = DBValue.ToString(row["organization"]);
            doubleLead.StreetAddress = DBValue.ToString(row["street_address"]);
            doubleLead.City = DBValue.ToString(row["city"]);
            doubleLead.StateCode = DBValue.ToString(row["state_code"]);
            doubleLead.CountryCode = DBValue.ToString(row["country_code"]);
            doubleLead.ZipCode = DBValue.ToString(row["zip_code"]);
            doubleLead.DayPhone = DBValue.ToString(row["day_phone"]);
            doubleLead.DayTimeCall = DBValue.ToString(row["day_time_call"]);
            doubleLead.EveningPhone = DBValue.ToString(row["evening_phone"]);
            doubleLead.Fax = DBValue.ToString(row["fax"]);
            doubleLead.Email = DBValue.ToString(row["email"]);
            doubleLead.GroupTypeID = DBValue.ToInt32(row["group_type_id"]);
            doubleLead.ParticipantCount = DBValue.ToInt32(row["participant_count"]);
            doubleLead.FundRaisingGoal = DBValue.ToInt32(row["fund_raising_goal"]);
            doubleLead.DecisionDate = DBValue.ToDateTime(row["decision_date"]);
            doubleLead.DecisionMaker = DBValue.ToInt32(row["decision_maker"]);
            doubleLead.FundRaiserStartDate = DBValue.ToDateTime(row["fund_raiser_start_date"]);
            doubleLead.OnEmailList = DBValue.ToInt32(row["onemaillist"]);
            doubleLead.Comments = DBValue.ToString(row["comments"]);
            doubleLead.HearId = DBValue.ToInt32(row["hear_id"]);
            doubleLead.KitToSend = DBValue.ToInt32(row["kit_to_send"]);
            doubleLead.KitSent = DBValue.ToInt32(row["kit_sent"]);
            doubleLead.KitSentDate = DBValue.ToDateTime(row["kit_sent_date"]);
            doubleLead.DayPhoneExt = DBValue.ToString(row["day_phone_ext"]);
            doubleLead.EveningPhoneExt = DBValue.ToString(row["evening_phone_ext"]);
            doubleLead.RejectionReason = DBValue.ToString(row["rejection_reason"]);
            doubleLead.OtherPhone = DBValue.ToString(row["other_phone"]);
            doubleLead.CookieContent = DBValue.ToString(row["cookie_content"]);
            doubleLead.GroupWebSite = DBValue.ToString(row["group_web_site"]);
            doubleLead.OrganizationTypeId = DBValue.ToInt32(row["organization_type_id"]);
            doubleLead.TitleId = DBValue.ToInt32(row["title_id"]);
            doubleLead.OtherPhoneExt = DBValue.ToString(row["other_phone_ext"]);
            doubleLead.CampaignReasonId = DBValue.ToInt32(row["campaign_reason_id"]);
            doubleLead.WebSiteId = DBValue.ToInt32(row["web_site_id"]);

            // return the filled object
            return doubleLead;
        }

        public DoubleLead[] GetDoubleLeads()
        {
            return GetDoubleLeads(null);
        }

        private DoubleLead[] GetDoubleLeads(SqlInterface si)
        {
            DoubleLead[] doubleLeads = null;

            string storedProcName = "efrcrm_get_double_leads";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    doubleLeads = new DoubleLead[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            doubleLeads[i] = LoadDoubleLead(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return doubleLeads;
        }


        public DoubleLead GetDoubleLeadByID(int id)
        {
            return GetDoubleLeadByID(id, null);
        }

        private DoubleLead GetDoubleLeadByID(int id, SqlInterface si)
        {
            DoubleLead doubleLead = null;

            string storedProcName = "efrcrm_get_double_lead_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Division_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        doubleLead = LoadDoubleLead(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return doubleLead;
        }


        public int InsertDoubleLead(DoubleLead doubleLead)
        {
            return InsertDoubleLead(doubleLead, null);
        }

        private int InsertDoubleLead(DoubleLead doubleLead, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_double_lead";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Division_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Promotion_ID", DbType.Int32, DBValue.ToDBInt32(doubleLead.PromotionID)));
                paramCol.Add(new SqlDataParameter("@Temp_Lead_Id", DbType.Int32, DBValue.ToDBInt32(doubleLead.TempLeadId)));
                paramCol.Add(new SqlDataParameter("@Channel_Code", DbType.String, DBValue.ToDBString(doubleLead.ChannelCode)));
                paramCol.Add(new SqlDataParameter("@Lead_Status_ID", DbType.Int32, DBValue.ToDBInt32(doubleLead.LeadStatusID)));
                paramCol.Add(new SqlDataParameter("@Consultant_ID", DbType.Int32, DBValue.ToDBInt32(doubleLead.ConsultantID)));
                paramCol.Add(new SqlDataParameter("@Lead_Entry_Date", DbType.DateTime, DBValue.ToDBDateTime(doubleLead.LeadEntryDate)));
                paramCol.Add(new SqlDataParameter("@Salutation", DbType.String, DBValue.ToDBString(doubleLead.Salutation)));
                paramCol.Add(new SqlDataParameter("@First_Name", DbType.String, DBValue.ToDBString(doubleLead.FirstName)));
                paramCol.Add(new SqlDataParameter("@Last_Name", DbType.String, DBValue.ToDBString(doubleLead.LastName)));
                paramCol.Add(new SqlDataParameter("@Organization", DbType.String, DBValue.ToDBString(doubleLead.Organization)));
                paramCol.Add(new SqlDataParameter("@Street_Address", DbType.String, DBValue.ToDBString(doubleLead.StreetAddress)));
                paramCol.Add(new SqlDataParameter("@City", DbType.String, DBValue.ToDBString(doubleLead.City)));
                paramCol.Add(new SqlDataParameter("@State_Code", DbType.String, DBValue.ToDBString(doubleLead.StateCode)));
                paramCol.Add(new SqlDataParameter("@Country_Code", DbType.String, DBValue.ToDBString(doubleLead.CountryCode)));
                paramCol.Add(new SqlDataParameter("@Zip_Code", DbType.String, DBValue.ToDBString(doubleLead.ZipCode)));
                paramCol.Add(new SqlDataParameter("@Day_Phone", DbType.String, DBValue.ToDBString(doubleLead.DayPhone)));
                paramCol.Add(new SqlDataParameter("@Day_Time_Call", DbType.String, DBValue.ToDBString(doubleLead.DayTimeCall)));
                paramCol.Add(new SqlDataParameter("@Evening_Phone", DbType.String, DBValue.ToDBString(doubleLead.EveningPhone)));
                paramCol.Add(new SqlDataParameter("@Fax", DbType.String, DBValue.ToDBString(doubleLead.Fax)));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(doubleLead.Email)));
                paramCol.Add(new SqlDataParameter("@Group_Type_ID", DbType.Int32, DBValue.ToDBInt32(doubleLead.GroupTypeID)));
                paramCol.Add(new SqlDataParameter("@Participant_Count", DbType.Int32, DBValue.ToDBInt32(doubleLead.ParticipantCount)));
                paramCol.Add(new SqlDataParameter("@Fund_Raising_Goal", DbType.Int32, DBValue.ToDBInt32(doubleLead.FundRaisingGoal)));
                paramCol.Add(new SqlDataParameter("@Decision_Date", DbType.DateTime, DBValue.ToDBDateTime(doubleLead.DecisionDate)));
                paramCol.Add(new SqlDataParameter("@Decision_Maker", DbType.Int32, DBValue.ToDBInt32(doubleLead.DecisionMaker)));
                paramCol.Add(new SqlDataParameter("@Fund_Raiser_Start_Date", DbType.DateTime, DBValue.ToDBDateTime(doubleLead.FundRaiserStartDate)));
                paramCol.Add(new SqlDataParameter("@OnEmailList", DbType.Int32, DBValue.ToDBInt32(doubleLead.OnEmailList)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(doubleLead.Comments)));
                paramCol.Add(new SqlDataParameter("@Hear_Id", DbType.Int32, DBValue.ToDBInt32(doubleLead.HearId)));
                paramCol.Add(new SqlDataParameter("@Kit_to_send", DbType.Int32, DBValue.ToDBInt32(doubleLead.KitToSend)));
                paramCol.Add(new SqlDataParameter("@Kit_sent", DbType.Int32, DBValue.ToDBInt32(doubleLead.KitSent)));
                paramCol.Add(new SqlDataParameter("@Kit_sent_date", DbType.DateTime, DBValue.ToDBDateTime(doubleLead.KitSentDate)));
                paramCol.Add(new SqlDataParameter("@Day_Phone_Ext", DbType.String, DBValue.ToDBString(doubleLead.DayPhoneExt)));
                paramCol.Add(new SqlDataParameter("@Evening_Phone_Ext", DbType.String, DBValue.ToDBString(doubleLead.EveningPhoneExt)));
                paramCol.Add(new SqlDataParameter("@Rejection_reason", DbType.String, DBValue.ToDBString(doubleLead.RejectionReason)));
                paramCol.Add(new SqlDataParameter("@Other_Phone", DbType.String, DBValue.ToDBString(doubleLead.OtherPhone)));
                paramCol.Add(new SqlDataParameter("@Cookie_Content", DbType.String, DBValue.ToDBString(doubleLead.CookieContent)));
                paramCol.Add(new SqlDataParameter("@Group_Web_Site", DbType.String, DBValue.ToDBString(doubleLead.GroupWebSite)));
                paramCol.Add(new SqlDataParameter("@Organization_Type_Id", DbType.Int32, DBValue.ToDBInt32(doubleLead.OrganizationTypeId)));
                paramCol.Add(new SqlDataParameter("@Title_Id", DbType.Int32, DBValue.ToDBInt32(doubleLead.TitleId)));
                paramCol.Add(new SqlDataParameter("@Other_Phone_Ext", DbType.String, DBValue.ToDBString(doubleLead.OtherPhoneExt)));
                paramCol.Add(new SqlDataParameter("@Campaign_Reason_Id", DbType.Int32, DBValue.ToDBInt32(doubleLead.CampaignReasonId)));
                paramCol.Add(new SqlDataParameter("@Web_Site_Id", DbType.Int32, DBValue.ToDBInt32(doubleLead.WebSiteId)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    doubleLead.DivisionID = DBValue.ToInt32(paramCol["@Division_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateDoubleLead(DoubleLead doubleLead)
        {
            return UpdateDoubleLead(doubleLead, null);
        }

        private int UpdateDoubleLead(DoubleLead doubleLead, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_double_lead";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Division_ID", DbType.Int32, DBValue.ToDBInt32(doubleLead.DivisionID)));
                paramCol.Add(new SqlDataParameter("@Promotion_ID", DbType.Int32, DBValue.ToDBInt32(doubleLead.PromotionID)));
                paramCol.Add(new SqlDataParameter("@Temp_Lead_Id", DbType.Int32, DBValue.ToDBInt32(doubleLead.TempLeadId)));
                paramCol.Add(new SqlDataParameter("@Channel_Code", DbType.String, DBValue.ToDBString(doubleLead.ChannelCode)));
                paramCol.Add(new SqlDataParameter("@Lead_Status_ID", DbType.Int32, DBValue.ToDBInt32(doubleLead.LeadStatusID)));
                paramCol.Add(new SqlDataParameter("@Consultant_ID", DbType.Int32, DBValue.ToDBInt32(doubleLead.ConsultantID)));
                paramCol.Add(new SqlDataParameter("@Lead_Entry_Date", DbType.DateTime, DBValue.ToDBDateTime(doubleLead.LeadEntryDate)));
                paramCol.Add(new SqlDataParameter("@Salutation", DbType.String, DBValue.ToDBString(doubleLead.Salutation)));
                paramCol.Add(new SqlDataParameter("@First_Name", DbType.String, DBValue.ToDBString(doubleLead.FirstName)));
                paramCol.Add(new SqlDataParameter("@Last_Name", DbType.String, DBValue.ToDBString(doubleLead.LastName)));
                paramCol.Add(new SqlDataParameter("@Organization", DbType.String, DBValue.ToDBString(doubleLead.Organization)));
                paramCol.Add(new SqlDataParameter("@Street_Address", DbType.String, DBValue.ToDBString(doubleLead.StreetAddress)));
                paramCol.Add(new SqlDataParameter("@City", DbType.String, DBValue.ToDBString(doubleLead.City)));
                paramCol.Add(new SqlDataParameter("@State_Code", DbType.String, DBValue.ToDBString(doubleLead.StateCode)));
                paramCol.Add(new SqlDataParameter("@Country_Code", DbType.String, DBValue.ToDBString(doubleLead.CountryCode)));
                paramCol.Add(new SqlDataParameter("@Zip_Code", DbType.String, DBValue.ToDBString(doubleLead.ZipCode)));
                paramCol.Add(new SqlDataParameter("@Day_Phone", DbType.String, DBValue.ToDBString(doubleLead.DayPhone)));
                paramCol.Add(new SqlDataParameter("@Day_Time_Call", DbType.String, DBValue.ToDBString(doubleLead.DayTimeCall)));
                paramCol.Add(new SqlDataParameter("@Evening_Phone", DbType.String, DBValue.ToDBString(doubleLead.EveningPhone)));
                paramCol.Add(new SqlDataParameter("@Fax", DbType.String, DBValue.ToDBString(doubleLead.Fax)));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(doubleLead.Email)));
                paramCol.Add(new SqlDataParameter("@Group_Type_ID", DbType.Int32, DBValue.ToDBInt32(doubleLead.GroupTypeID)));
                paramCol.Add(new SqlDataParameter("@Participant_Count", DbType.Int32, DBValue.ToDBInt32(doubleLead.ParticipantCount)));
                paramCol.Add(new SqlDataParameter("@Fund_Raising_Goal", DbType.Int32, DBValue.ToDBInt32(doubleLead.FundRaisingGoal)));
                paramCol.Add(new SqlDataParameter("@Decision_Date", DbType.DateTime, DBValue.ToDBDateTime(doubleLead.DecisionDate)));
                paramCol.Add(new SqlDataParameter("@Decision_Maker", DbType.Int32, DBValue.ToDBInt32(doubleLead.DecisionMaker)));
                paramCol.Add(new SqlDataParameter("@Fund_Raiser_Start_Date", DbType.DateTime, DBValue.ToDBDateTime(doubleLead.FundRaiserStartDate)));
                paramCol.Add(new SqlDataParameter("@OnEmailList", DbType.Int32, DBValue.ToDBInt32(doubleLead.OnEmailList)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(doubleLead.Comments)));
                paramCol.Add(new SqlDataParameter("@Hear_Id", DbType.Int32, DBValue.ToDBInt32(doubleLead.HearId)));
                paramCol.Add(new SqlDataParameter("@Kit_to_send", DbType.Int32, DBValue.ToDBInt32(doubleLead.KitToSend)));
                paramCol.Add(new SqlDataParameter("@Kit_sent", DbType.Int32, DBValue.ToDBInt32(doubleLead.KitSent)));
                paramCol.Add(new SqlDataParameter("@Kit_sent_date", DbType.DateTime, DBValue.ToDBDateTime(doubleLead.KitSentDate)));
                paramCol.Add(new SqlDataParameter("@Day_Phone_Ext", DbType.String, DBValue.ToDBString(doubleLead.DayPhoneExt)));
                paramCol.Add(new SqlDataParameter("@Evening_Phone_Ext", DbType.String, DBValue.ToDBString(doubleLead.EveningPhoneExt)));
                paramCol.Add(new SqlDataParameter("@Rejection_reason", DbType.String, DBValue.ToDBString(doubleLead.RejectionReason)));
                paramCol.Add(new SqlDataParameter("@Other_Phone", DbType.String, DBValue.ToDBString(doubleLead.OtherPhone)));
                paramCol.Add(new SqlDataParameter("@Cookie_Content", DbType.String, DBValue.ToDBString(doubleLead.CookieContent)));
                paramCol.Add(new SqlDataParameter("@Group_Web_Site", DbType.String, DBValue.ToDBString(doubleLead.GroupWebSite)));
                paramCol.Add(new SqlDataParameter("@Organization_Type_Id", DbType.Int32, DBValue.ToDBInt32(doubleLead.OrganizationTypeId)));
                paramCol.Add(new SqlDataParameter("@Title_Id", DbType.Int32, DBValue.ToDBInt32(doubleLead.TitleId)));
                paramCol.Add(new SqlDataParameter("@Other_Phone_Ext", DbType.String, DBValue.ToDBString(doubleLead.OtherPhoneExt)));
                paramCol.Add(new SqlDataParameter("@Campaign_Reason_Id", DbType.Int32, DBValue.ToDBInt32(doubleLead.CampaignReasonId)));
                paramCol.Add(new SqlDataParameter("@Web_Site_Id", DbType.Int32, DBValue.ToDBInt32(doubleLead.WebSiteId)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region EFOAdmin Methods

        private EFOAdmin LoadEFOAdmin(DataRow row)
        {
            EFOAdmin efoAdmin = new EFOAdmin();

            // Store database values into our business object
            efoAdmin.AdminID = DBValue.ToInt32(row["admin_id"]);
            efoAdmin.UID = DBValue.ToString(row["uid"]);
            efoAdmin.Password = DBValue.ToString(row["password"]);

            // return the filled object
            return efoAdmin;
        }

        public EFOAdmin[] GetEFOAdmins()
        {
            return GetEFOAdmins(null);
        }

        private EFOAdmin[] GetEFOAdmins(SqlInterface si)
        {
            EFOAdmin[] efoAdmins = null;

            string storedProcName = "efrcrm_get_efo_admins";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    efoAdmins = new EFOAdmin[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            efoAdmins[i] = LoadEFOAdmin(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoAdmins;
        }


        public EFOAdmin GetEFOAdminByID(int id)
        {
            return GetEFOAdminByID(id, null);
        }

        private EFOAdmin GetEFOAdminByID(int id, SqlInterface si)
        {
            EFOAdmin efoAdmin = null;

            string storedProcName = "efrcrm_get_efo_admin_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Admin_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        efoAdmin = LoadEFOAdmin(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoAdmin;
        }


        public int InsertEFOAdmin(EFOAdmin efoAdmin)
        {
            return InsertEFOAdmin(efoAdmin, null);
        }

        private int InsertEFOAdmin(EFOAdmin efoAdmin, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_efo_admin";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Admin_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@UID", DbType.String, DBValue.ToDBString(efoAdmin.UID)));
                paramCol.Add(new SqlDataParameter("@Password", DbType.String, DBValue.ToDBString(efoAdmin.Password)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    efoAdmin.AdminID = DBValue.ToInt32(paramCol["@Admin_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateEFOAdmin(EFOAdmin efoAdmin)
        {
            return UpdateEFOAdmin(efoAdmin, null);
        }

        private int UpdateEFOAdmin(EFOAdmin efoAdmin, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_efo_admin";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Admin_ID", DbType.Int32, DBValue.ToDBInt32(efoAdmin.AdminID)));
                paramCol.Add(new SqlDataParameter("@UID", DbType.String, DBValue.ToDBString(efoAdmin.UID)));
                paramCol.Add(new SqlDataParameter("@Password", DbType.String, DBValue.ToDBString(efoAdmin.Password)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region EFOCampaign Methods

        private EFOCampaign LoadEFOCampaign(DataRow row)
        {
            EFOCampaign efoCampaign = new EFOCampaign();

            // Store database values into our business object
            efoCampaign.CampaignID = DBValue.ToInt32(row["campaign_id"]);
            efoCampaign.GroupTypeID = DBValue.ToInt32(row["group_type_id"]);
            efoCampaign.QSPProgramID = DBValue.ToInt32(row["qsp_program_id"]);
            efoCampaign.CampaignImageID = DBValue.ToInt32(row["campaign_image_id"]);
            efoCampaign.OrganizerID = DBValue.ToInt32(row["organizer_id"]);
            efoCampaign.GroupName = DBValue.ToString(row["group_name"]);
            efoCampaign.CreationDate = DBValue.ToDateTime(row["creation_date"]);
            efoCampaign.FinancialGoal = DBValue.ToInt16(row["financial_goal"]);
            efoCampaign.FundRaisingReason = DBValue.ToString(row["fund_raising_reason"]);
            efoCampaign.BackgroundInfo = DBValue.ToString(row["background_info"]);
            efoCampaign.Comments = DBValue.ToString(row["comments"]);
            efoCampaign.IsLaunched = DBValue.ToInt32(row["is_launched"]);
            efoCampaign.IsOver = DBValue.ToInt32(row["is_over"]);
            efoCampaign.AccountNumber = DBValue.ToString(row["account_number"]);

            // return the filled object
            return efoCampaign;
        }

        public EFOCampaign[] GetEFOCampaigns()
        {
            return GetEFOCampaigns(null);
        }

        private EFOCampaign[] GetEFOCampaigns(SqlInterface si)
        {
            EFOCampaign[] efoCampaigns = null;

            string storedProcName = "efrcrm_get_efo_campaigns";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    efoCampaigns = new EFOCampaign[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            efoCampaigns[i] = LoadEFOCampaign(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoCampaigns;
        }


        public EFOCampaign GetEFOCampaignByID(int id)
        {
            return GetEFOCampaignByID(id, null);
        }

        private EFOCampaign GetEFOCampaignByID(int id, SqlInterface si)
        {
            EFOCampaign efoCampaign = null;

            string storedProcName = "efrcrm_get_efo_campaign_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Campaign_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        efoCampaign = LoadEFOCampaign(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoCampaign;
        }


        public int InsertEFOCampaign(EFOCampaign efoCampaign)
        {
            return InsertEFOCampaign(efoCampaign, null);
        }

        private int InsertEFOCampaign(EFOCampaign efoCampaign, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_efo_campaign";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Campaign_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Group_Type_ID", DbType.Int32, DBValue.ToDBInt32(efoCampaign.GroupTypeID)));
                paramCol.Add(new SqlDataParameter("@QSP_Program_ID", DbType.Int32, DBValue.ToDBInt32(efoCampaign.QSPProgramID)));
                paramCol.Add(new SqlDataParameter("@Campaign_Image_ID", DbType.Int32, DBValue.ToDBInt32(efoCampaign.CampaignImageID)));
                paramCol.Add(new SqlDataParameter("@Organizer_ID", DbType.Int32, DBValue.ToDBInt32(efoCampaign.OrganizerID)));
                paramCol.Add(new SqlDataParameter("@Group_Name", DbType.String, DBValue.ToDBString(efoCampaign.GroupName)));
                paramCol.Add(new SqlDataParameter("@Creation_Date", DbType.DateTime, DBValue.ToDBDateTime(efoCampaign.CreationDate)));
                paramCol.Add(new SqlDataParameter("@Financial_Goal", DbType.Double, DBValue.ToDBFloat(efoCampaign.FinancialGoal)));
                paramCol.Add(new SqlDataParameter("@Fund_Raising_Reason", DbType.String, DBValue.ToDBString(efoCampaign.FundRaisingReason)));
                paramCol.Add(new SqlDataParameter("@Background_Info", DbType.String, DBValue.ToDBString(efoCampaign.BackgroundInfo)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(efoCampaign.Comments)));
                paramCol.Add(new SqlDataParameter("@Is_Launched", DbType.Int32, DBValue.ToDBInt32(efoCampaign.IsLaunched)));
                paramCol.Add(new SqlDataParameter("@Is_Over", DbType.Int32, DBValue.ToDBInt32(efoCampaign.IsOver)));
                paramCol.Add(new SqlDataParameter("@Account_Number", DbType.String, DBValue.ToDBString(efoCampaign.AccountNumber)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    efoCampaign.CampaignID = DBValue.ToInt32(paramCol["@Campaign_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateEFOCampaign(EFOCampaign efoCampaign)
        {
            return UpdateEFOCampaign(efoCampaign, null);
        }

        private int UpdateEFOCampaign(EFOCampaign efoCampaign, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_efo_campaign";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Campaign_ID", DbType.Int32, DBValue.ToDBInt32(efoCampaign.CampaignID)));
                paramCol.Add(new SqlDataParameter("@Group_Type_ID", DbType.Int32, DBValue.ToDBInt32(efoCampaign.GroupTypeID)));
                paramCol.Add(new SqlDataParameter("@QSP_Program_ID", DbType.Int32, DBValue.ToDBInt32(efoCampaign.QSPProgramID)));
                paramCol.Add(new SqlDataParameter("@Campaign_Image_ID", DbType.Int32, DBValue.ToDBInt32(efoCampaign.CampaignImageID)));
                paramCol.Add(new SqlDataParameter("@Organizer_ID", DbType.Int32, DBValue.ToDBInt32(efoCampaign.OrganizerID)));
                paramCol.Add(new SqlDataParameter("@Group_Name", DbType.String, DBValue.ToDBString(efoCampaign.GroupName)));
                paramCol.Add(new SqlDataParameter("@Creation_Date", DbType.DateTime, DBValue.ToDBDateTime(efoCampaign.CreationDate)));
                paramCol.Add(new SqlDataParameter("@Financial_Goal", DbType.Double, DBValue.ToDBFloat(efoCampaign.FinancialGoal)));
                paramCol.Add(new SqlDataParameter("@Fund_Raising_Reason", DbType.String, DBValue.ToDBString(efoCampaign.FundRaisingReason)));
                paramCol.Add(new SqlDataParameter("@Background_Info", DbType.String, DBValue.ToDBString(efoCampaign.BackgroundInfo)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(efoCampaign.Comments)));
                paramCol.Add(new SqlDataParameter("@Is_Launched", DbType.Int32, DBValue.ToDBInt32(efoCampaign.IsLaunched)));
                paramCol.Add(new SqlDataParameter("@Is_Over", DbType.Int32, DBValue.ToDBInt32(efoCampaign.IsOver)));
                paramCol.Add(new SqlDataParameter("@Account_Number", DbType.String, DBValue.ToDBString(efoCampaign.AccountNumber)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region EFOCampaignImage Methods

        private EFOCampaignImage LoadEFOCampaignImage(DataRow row)
        {
            EFOCampaignImage efoCampaignImage = new EFOCampaignImage();

            // Store database values into our business object
            efoCampaignImage.CampaignImageID = DBValue.ToInt32(row["campaign_image_id"]);
            efoCampaignImage.ImageCatalogPath = DBValue.ToString(row["image_catalog_path"]);
            efoCampaignImage.ImageCatalogPathSel = DBValue.ToString(row["image_catalog_path_sel"]);
            efoCampaignImage.CatalogCategoryID = DBValue.ToInt32(row["catalog_category_id"]);
            efoCampaignImage.IsPersonalized = DBValue.ToInt32(row["is_personalized"]);

            // return the filled object
            return efoCampaignImage;
        }

        public EFOCampaignImage[] GetEFOCampaignImages()
        {
            return GetEFOCampaignImages(null);
        }

        private EFOCampaignImage[] GetEFOCampaignImages(SqlInterface si)
        {
            EFOCampaignImage[] efoCampaignImages = null;

            string storedProcName = "efrcrm_get_efo_campaign_images";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    efoCampaignImages = new EFOCampaignImage[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            efoCampaignImages[i] = LoadEFOCampaignImage(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoCampaignImages;
        }


        public EFOCampaignImage GetEFOCampaignImageByID(int id)
        {
            return GetEFOCampaignImageByID(id, null);
        }

        private EFOCampaignImage GetEFOCampaignImageByID(int id, SqlInterface si)
        {
            EFOCampaignImage efoCampaignImage = null;

            string storedProcName = "efrcrm_get_efo_campaign_image_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Campaign_Image_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        efoCampaignImage = LoadEFOCampaignImage(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoCampaignImage;
        }


        public int InsertEFOCampaignImage(EFOCampaignImage efoCampaignImage)
        {
            return InsertEFOCampaignImage(efoCampaignImage, null);
        }

        private int InsertEFOCampaignImage(EFOCampaignImage efoCampaignImage, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_efo_campaign_image";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Campaign_Image_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Image_Catalog_Path", DbType.String, DBValue.ToDBString(efoCampaignImage.ImageCatalogPath)));
                paramCol.Add(new SqlDataParameter("@Image_Catalog_Path_Sel", DbType.String, DBValue.ToDBString(efoCampaignImage.ImageCatalogPathSel)));
                paramCol.Add(new SqlDataParameter("@Catalog_Category_ID", DbType.Int32, DBValue.ToDBInt32(efoCampaignImage.CatalogCategoryID)));
                paramCol.Add(new SqlDataParameter("@Is_Personalized", DbType.Int32, DBValue.ToDBInt32(efoCampaignImage.IsPersonalized)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    efoCampaignImage.CampaignImageID = DBValue.ToInt32(paramCol["@Campaign_Image_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateEFOCampaignImage(EFOCampaignImage efoCampaignImage)
        {
            return UpdateEFOCampaignImage(efoCampaignImage, null);
        }

        private int UpdateEFOCampaignImage(EFOCampaignImage efoCampaignImage, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_efo_campaign_image";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Campaign_Image_ID", DbType.Int32, DBValue.ToDBInt32(efoCampaignImage.CampaignImageID)));
                paramCol.Add(new SqlDataParameter("@Image_Catalog_Path", DbType.String, DBValue.ToDBString(efoCampaignImage.ImageCatalogPath)));
                paramCol.Add(new SqlDataParameter("@Image_Catalog_Path_Sel", DbType.String, DBValue.ToDBString(efoCampaignImage.ImageCatalogPathSel)));
                paramCol.Add(new SqlDataParameter("@Catalog_Category_ID", DbType.Int32, DBValue.ToDBInt32(efoCampaignImage.CatalogCategoryID)));
                paramCol.Add(new SqlDataParameter("@Is_Personalized", DbType.Int32, DBValue.ToDBInt32(efoCampaignImage.IsPersonalized)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region EFOCampaignStatus Methods

        private EFOCampaignStatus LoadEFOCampaignStatus(DataRow row)
        {
            EFOCampaignStatus efoCampaignStatus = new EFOCampaignStatus();

            // Store database values into our business object
            efoCampaignStatus.CampaignID = DBValue.ToInt32(row["campaign_id"]);
            efoCampaignStatus.DateToChange = DBValue.ToDateTime(row["date_to_change"]);
            efoCampaignStatus.StatusID = DBValue.ToInt32(row["status_id"]);
            efoCampaignStatus.EmailTypeID = DBValue.ToInt32(row["email_type_id"]);

            // return the filled object
            return efoCampaignStatus;
        }

        public EFOCampaignStatus[] GetEFOCampaignStatuss()
        {
            return GetEFOCampaignStatuss(null);
        }

        private EFOCampaignStatus[] GetEFOCampaignStatuss(SqlInterface si)
        {
            EFOCampaignStatus[] efoCampaignStatuss = null;

            string storedProcName = "efrcrm_get_efo_campaign_statuss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    efoCampaignStatuss = new EFOCampaignStatus[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            efoCampaignStatuss[i] = LoadEFOCampaignStatus(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoCampaignStatuss;
        }


        public EFOCampaignStatus GetEFOCampaignStatusByID(int id)
        {
            return GetEFOCampaignStatusByID(id, null);
        }

        private EFOCampaignStatus GetEFOCampaignStatusByID(int id, SqlInterface si)
        {
            EFOCampaignStatus efoCampaignStatus = null;

            string storedProcName = "efrcrm_get_efo_campaign_status_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Campaign_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        efoCampaignStatus = LoadEFOCampaignStatus(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoCampaignStatus;
        }


        public int InsertEFOCampaignStatus(EFOCampaignStatus efoCampaignStatus)
        {
            return InsertEFOCampaignStatus(efoCampaignStatus, null);
        }

        private int InsertEFOCampaignStatus(EFOCampaignStatus efoCampaignStatus, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_efo_campaign_status";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Campaign_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Date_To_Change", DbType.DateTime, DBValue.ToDBDateTime(efoCampaignStatus.DateToChange)));
                paramCol.Add(new SqlDataParameter("@Status_ID", DbType.Int32, DBValue.ToDBInt32(efoCampaignStatus.StatusID)));
                paramCol.Add(new SqlDataParameter("@Email_Type_ID", DbType.Int32, DBValue.ToDBInt32(efoCampaignStatus.EmailTypeID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    efoCampaignStatus.CampaignID = DBValue.ToInt32(paramCol["@Campaign_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateEFOCampaignStatus(EFOCampaignStatus efoCampaignStatus)
        {
            return UpdateEFOCampaignStatus(efoCampaignStatus, null);
        }

        private int UpdateEFOCampaignStatus(EFOCampaignStatus efoCampaignStatus, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_efo_campaign_status";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Campaign_ID", DbType.Int32, DBValue.ToDBInt32(efoCampaignStatus.CampaignID)));
                paramCol.Add(new SqlDataParameter("@Date_To_Change", DbType.DateTime, DBValue.ToDBDateTime(efoCampaignStatus.DateToChange)));
                paramCol.Add(new SqlDataParameter("@Status_ID", DbType.Int32, DBValue.ToDBInt32(efoCampaignStatus.StatusID)));
                paramCol.Add(new SqlDataParameter("@Email_Type_ID", DbType.Int32, DBValue.ToDBInt32(efoCampaignStatus.EmailTypeID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region EFOCatalogCategory Methods

        private EFOCatalogCategory LoadEFOCatalogCategory(DataRow row)
        {
            EFOCatalogCategory efoCatalogCategory = new EFOCatalogCategory();

            // Store database values into our business object
            efoCatalogCategory.CatalogCategoryID = DBValue.ToInt32(row["catalog_category_id"]);
            efoCatalogCategory.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return efoCatalogCategory;
        }

        public EFOCatalogCategory[] GetEFOCatalogCategorys()
        {
            return GetEFOCatalogCategorys(null);
        }

        private EFOCatalogCategory[] GetEFOCatalogCategorys(SqlInterface si)
        {
            EFOCatalogCategory[] efoCatalogCategorys = null;

            string storedProcName = "efrcrm_get_efo_catalog_categorys";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    efoCatalogCategorys = new EFOCatalogCategory[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            efoCatalogCategorys[i] = LoadEFOCatalogCategory(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoCatalogCategorys;
        }


        public EFOCatalogCategory GetEFOCatalogCategoryByID(int id)
        {
            return GetEFOCatalogCategoryByID(id, null);
        }

        private EFOCatalogCategory GetEFOCatalogCategoryByID(int id, SqlInterface si)
        {
            EFOCatalogCategory efoCatalogCategory = null;

            string storedProcName = "efrcrm_get_efo_catalog_category_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Catalog_Category_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        efoCatalogCategory = LoadEFOCatalogCategory(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoCatalogCategory;
        }


        public int InsertEFOCatalogCategory(EFOCatalogCategory efoCatalogCategory)
        {
            return InsertEFOCatalogCategory(efoCatalogCategory, null);
        }

        private int InsertEFOCatalogCategory(EFOCatalogCategory efoCatalogCategory, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_efo_catalog_category";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Catalog_Category_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(efoCatalogCategory.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    efoCatalogCategory.CatalogCategoryID = DBValue.ToInt32(paramCol["@Catalog_Category_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateEFOCatalogCategory(EFOCatalogCategory efoCatalogCategory)
        {
            return UpdateEFOCatalogCategory(efoCatalogCategory, null);
        }

        private int UpdateEFOCatalogCategory(EFOCatalogCategory efoCatalogCategory, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_efo_catalog_category";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Catalog_Category_ID", DbType.Int32, DBValue.ToDBInt32(efoCatalogCategory.CatalogCategoryID)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(efoCatalogCategory.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region EFOEmailType Methods

        private EFOEmailType LoadEFOEmailType(DataRow row)
        {
            EFOEmailType efoEmailType = new EFOEmailType();

            // Store database values into our business object
            efoEmailType.EmailTypeID = DBValue.ToInt32(row["email_type_id"]);
            efoEmailType.Body = DBValue.ToString(row["body"]);
            efoEmailType.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return efoEmailType;
        }

        public EFOEmailType[] GetEFOEmailTypes()
        {
            return GetEFOEmailTypes(null);
        }

        private EFOEmailType[] GetEFOEmailTypes(SqlInterface si)
        {
            EFOEmailType[] efoEmailTypes = null;

            string storedProcName = "efrcrm_get_efo_email_types";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    efoEmailTypes = new EFOEmailType[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            efoEmailTypes[i] = LoadEFOEmailType(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoEmailTypes;
        }


        public EFOEmailType GetEFOEmailTypeByID(int id)
        {
            return GetEFOEmailTypeByID(id, null);
        }

        private EFOEmailType GetEFOEmailTypeByID(int id, SqlInterface si)
        {
            EFOEmailType efoEmailType = null;

            string storedProcName = "efrcrm_get_efo_email_type_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Email_Type_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        efoEmailType = LoadEFOEmailType(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoEmailType;
        }


        public int InsertEFOEmailType(EFOEmailType efoEmailType)
        {
            return InsertEFOEmailType(efoEmailType, null);
        }

        private int InsertEFOEmailType(EFOEmailType efoEmailType, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_efo_email_type";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Email_Type_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Body", DbType.String, DBValue.ToDBString(efoEmailType.Body)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(efoEmailType.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    efoEmailType.EmailTypeID = DBValue.ToInt32(paramCol["@Email_Type_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateEFOEmailType(EFOEmailType efoEmailType)
        {
            return UpdateEFOEmailType(efoEmailType, null);
        }

        private int UpdateEFOEmailType(EFOEmailType efoEmailType, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_efo_email_type";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Email_Type_ID", DbType.Int32, DBValue.ToDBInt32(efoEmailType.EmailTypeID)));
                paramCol.Add(new SqlDataParameter("@Body", DbType.String, DBValue.ToDBString(efoEmailType.Body)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(efoEmailType.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region EFOGroupType Methods

        private EFOGroupType LoadEFOGroupType(DataRow row)
        {
            EFOGroupType efoGroupType = new EFOGroupType();

            // Store database values into our business object
            efoGroupType.GroupTypeID = DBValue.ToInt32(row["group_type_id"]);
            efoGroupType.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return efoGroupType;
        }

        public EFOGroupType[] GetEFOGroupTypes()
        {
            return GetEFOGroupTypes(null);
        }

        private EFOGroupType[] GetEFOGroupTypes(SqlInterface si)
        {
            EFOGroupType[] efoGroupTypes = null;

            string storedProcName = "efrcrm_get_efo_group_types";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    efoGroupTypes = new EFOGroupType[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            efoGroupTypes[i] = LoadEFOGroupType(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoGroupTypes;
        }


        public EFOGroupType GetEFOGroupTypeByID(int id)
        {
            return GetEFOGroupTypeByID(id, null);
        }

        private EFOGroupType GetEFOGroupTypeByID(int id, SqlInterface si)
        {
            EFOGroupType efoGroupType = null;

            string storedProcName = "efrcrm_get_efo_group_type_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Group_Type_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        efoGroupType = LoadEFOGroupType(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoGroupType;
        }


        public int InsertEFOGroupType(EFOGroupType efoGroupType)
        {
            return InsertEFOGroupType(efoGroupType, null);
        }

        private int InsertEFOGroupType(EFOGroupType efoGroupType, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_efo_group_type";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Group_Type_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(efoGroupType.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    efoGroupType.GroupTypeID = DBValue.ToInt32(paramCol["@Group_Type_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateEFOGroupType(EFOGroupType efoGroupType)
        {
            return UpdateEFOGroupType(efoGroupType, null);
        }

        private int UpdateEFOGroupType(EFOGroupType efoGroupType, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_efo_group_type";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Group_Type_ID", DbType.Int32, DBValue.ToDBInt32(efoGroupType.GroupTypeID)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(efoGroupType.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region EFOItem Methods

        private EFOItem LoadEFOItem(DataRow row)
        {
            EFOItem efoItem = new EFOItem();

            // Store database values into our business object
            efoItem.ItemID = DBValue.ToInt32(row["item_id"]);
            efoItem.Title = DBValue.ToString(row["title"]);
            efoItem.Price = DBValue.ToInt16(row["price"]);
            efoItem.Amount2Supplier = DBValue.ToInt16(row["amount2supplier"]);
            efoItem.Amount2Group = DBValue.ToInt16(row["amount2group"]);
            efoItem.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return efoItem;
        }

        public EFOItem[] GetEFOItems()
        {
            return GetEFOItems(null);
        }

        private EFOItem[] GetEFOItems(SqlInterface si)
        {
            EFOItem[] efoItems = null;

            string storedProcName = "efrcrm_get_efo_items";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    efoItems = new EFOItem[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            efoItems[i] = LoadEFOItem(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoItems;
        }


        public EFOItem GetEFOItemByID(int id)
        {
            return GetEFOItemByID(id, null);
        }

        private EFOItem GetEFOItemByID(int id, SqlInterface si)
        {
            EFOItem efoItem = null;

            string storedProcName = "efrcrm_get_efo_item_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Item_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        efoItem = LoadEFOItem(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoItem;
        }


        public int InsertEFOItem(EFOItem efoItem)
        {
            return InsertEFOItem(efoItem, null);
        }

        private int InsertEFOItem(EFOItem efoItem, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_efo_item";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Item_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Title", DbType.String, DBValue.ToDBString(efoItem.Title)));
                paramCol.Add(new SqlDataParameter("@Price", DbType.Double, DBValue.ToDBFloat(efoItem.Price)));
                paramCol.Add(new SqlDataParameter("@Amount2Supplier", DbType.Double, DBValue.ToDBFloat(efoItem.Amount2Supplier)));
                paramCol.Add(new SqlDataParameter("@Amount2Group", DbType.Double, DBValue.ToDBFloat(efoItem.Amount2Group)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(efoItem.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    efoItem.ItemID = DBValue.ToInt32(paramCol["@Item_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateEFOItem(EFOItem efoItem)
        {
            return UpdateEFOItem(efoItem, null);
        }

        private int UpdateEFOItem(EFOItem efoItem, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_efo_item";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Item_ID", DbType.Int32, DBValue.ToDBInt32(efoItem.ItemID)));
                paramCol.Add(new SqlDataParameter("@Title", DbType.String, DBValue.ToDBString(efoItem.Title)));
                paramCol.Add(new SqlDataParameter("@Price", DbType.Double, DBValue.ToDBFloat(efoItem.Price)));
                paramCol.Add(new SqlDataParameter("@Amount2Supplier", DbType.Double, DBValue.ToDBFloat(efoItem.Amount2Supplier)));
                paramCol.Add(new SqlDataParameter("@Amount2Group", DbType.Double, DBValue.ToDBFloat(efoItem.Amount2Group)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(efoItem.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region EFOMessage Methods

        private EFOMessage LoadEFOMessage(DataRow row)
        {
            EFOMessage efoMessage = new EFOMessage();

            // Store database values into our business object
            efoMessage.MessageID = DBValue.ToInt32(row["message_id"]);
            efoMessage.ParticipantID = DBValue.ToInt32(row["participant_id"]);
            efoMessage.IsRead = DBValue.ToInt32(row["is_read"]);
            efoMessage.DateSent = DBValue.ToDateTime(row["date_sent"]);
            efoMessage.DateReceived = DBValue.ToDateTime(row["date_received"]);
            efoMessage.FromName = DBValue.ToString(row["from_name"]);
            efoMessage.FromEmail = DBValue.ToString(row["from_email"]);
            efoMessage.ToName = DBValue.ToString(row["to_name"]);
            efoMessage.ToEmail = DBValue.ToString(row["to_email"]);
            efoMessage.Subject = DBValue.ToString(row["subject"]);
            efoMessage.Body = DBValue.ToString(row["body"]);
            efoMessage.ContentType = DBValue.ToString(row["content_type"]);

            // return the filled object
            return efoMessage;
        }

        public EFOMessage[] GetEFOMessages()
        {
            return GetEFOMessages(null);
        }

        private EFOMessage[] GetEFOMessages(SqlInterface si)
        {
            EFOMessage[] efoMessages = null;

            string storedProcName = "efrcrm_get_efo_messages";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    efoMessages = new EFOMessage[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            efoMessages[i] = LoadEFOMessage(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoMessages;
        }


        public EFOMessage GetEFOMessageByID(int id)
        {
            return GetEFOMessageByID(id, null);
        }

        private EFOMessage GetEFOMessageByID(int id, SqlInterface si)
        {
            EFOMessage efoMessage = null;

            string storedProcName = "efrcrm_get_efo_message_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Message_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        efoMessage = LoadEFOMessage(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoMessage;
        }


        public int InsertEFOMessage(EFOMessage efoMessage)
        {
            return InsertEFOMessage(efoMessage, null);
        }

        private int InsertEFOMessage(EFOMessage efoMessage, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_efo_message";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Message_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Participant_ID", DbType.Int32, DBValue.ToDBInt32(efoMessage.ParticipantID)));
                paramCol.Add(new SqlDataParameter("@Is_Read", DbType.Int32, DBValue.ToDBInt32(efoMessage.IsRead)));
                paramCol.Add(new SqlDataParameter("@Date_Sent", DbType.DateTime, DBValue.ToDBDateTime(efoMessage.DateSent)));
                paramCol.Add(new SqlDataParameter("@Date_Received", DbType.DateTime, DBValue.ToDBDateTime(efoMessage.DateReceived)));
                paramCol.Add(new SqlDataParameter("@From_Name", DbType.String, DBValue.ToDBString(efoMessage.FromName)));
                paramCol.Add(new SqlDataParameter("@From_Email", DbType.String, DBValue.ToDBString(efoMessage.FromEmail)));
                paramCol.Add(new SqlDataParameter("@To_Name", DbType.String, DBValue.ToDBString(efoMessage.ToName)));
                paramCol.Add(new SqlDataParameter("@To_Email", DbType.String, DBValue.ToDBString(efoMessage.ToEmail)));
                paramCol.Add(new SqlDataParameter("@Subject", DbType.String, DBValue.ToDBString(efoMessage.Subject)));
                paramCol.Add(new SqlDataParameter("@Body", DbType.String, DBValue.ToDBString(efoMessage.Body)));
                paramCol.Add(new SqlDataParameter("@Content_Type", DbType.String, DBValue.ToDBString(efoMessage.ContentType)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    efoMessage.MessageID = DBValue.ToInt32(paramCol["@Message_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateEFOMessage(EFOMessage efoMessage)
        {
            return UpdateEFOMessage(efoMessage, null);
        }

        private int UpdateEFOMessage(EFOMessage efoMessage, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_efo_message";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Message_ID", DbType.Int32, DBValue.ToDBInt32(efoMessage.MessageID)));
                paramCol.Add(new SqlDataParameter("@Participant_ID", DbType.Int32, DBValue.ToDBInt32(efoMessage.ParticipantID)));
                paramCol.Add(new SqlDataParameter("@Is_Read", DbType.Int32, DBValue.ToDBInt32(efoMessage.IsRead)));
                paramCol.Add(new SqlDataParameter("@Date_Sent", DbType.DateTime, DBValue.ToDBDateTime(efoMessage.DateSent)));
                paramCol.Add(new SqlDataParameter("@Date_Received", DbType.DateTime, DBValue.ToDBDateTime(efoMessage.DateReceived)));
                paramCol.Add(new SqlDataParameter("@From_Name", DbType.String, DBValue.ToDBString(efoMessage.FromName)));
                paramCol.Add(new SqlDataParameter("@From_Email", DbType.String, DBValue.ToDBString(efoMessage.FromEmail)));
                paramCol.Add(new SqlDataParameter("@To_Name", DbType.String, DBValue.ToDBString(efoMessage.ToName)));
                paramCol.Add(new SqlDataParameter("@To_Email", DbType.String, DBValue.ToDBString(efoMessage.ToEmail)));
                paramCol.Add(new SqlDataParameter("@Subject", DbType.String, DBValue.ToDBString(efoMessage.Subject)));
                paramCol.Add(new SqlDataParameter("@Body", DbType.String, DBValue.ToDBString(efoMessage.Body)));
                paramCol.Add(new SqlDataParameter("@Content_Type", DbType.String, DBValue.ToDBString(efoMessage.ContentType)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region EFOOrganizer Methods

        private EFOOrganizer LoadEFOOrganizer(DataRow row)
        {
            EFOOrganizer efoOrganizer = new EFOOrganizer();

            // Store database values into our business object
            efoOrganizer.OrganizerID = DBValue.ToInt32(row["organizer_id"]);
            efoOrganizer.Name = DBValue.ToString(row["name"]);
            efoOrganizer.UserName = DBValue.ToString(row["user_name"]);
            efoOrganizer.Password = DBValue.ToString(row["password"]);
            efoOrganizer.Title = DBValue.ToString(row["title"]);
            efoOrganizer.Email = DBValue.ToString(row["email"]);
            efoOrganizer.BestTimeToCall = DBValue.ToString(row["best_time_to_call"]);
            efoOrganizer.EveningPhone = DBValue.ToString(row["evening_phone"]);
            efoOrganizer.DayPhone = DBValue.ToString(row["day_phone"]);
            efoOrganizer.FaxNumber = DBValue.ToString(row["fax_number"]);
            efoOrganizer.EntryDate = DBValue.ToDateTime(row["entry_date"]);
            efoOrganizer.Comments = DBValue.ToString(row["comments"]);
            efoOrganizer.OrganizationID = DBValue.ToInt32(row["organization_id"]);
            efoOrganizer.SchoolID = DBValue.ToInt32(row["school_id"]);

            // return the filled object
            return efoOrganizer;
        }

        public EFOOrganizer[] GetEFOOrganizers()
        {
            return GetEFOOrganizers(null);
        }

        private EFOOrganizer[] GetEFOOrganizers(SqlInterface si)
        {
            EFOOrganizer[] efoOrganizers = null;

            string storedProcName = "efrcrm_get_efo_organizers";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    efoOrganizers = new EFOOrganizer[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            efoOrganizers[i] = LoadEFOOrganizer(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoOrganizers;
        }


        public EFOOrganizer GetEFOOrganizerByID(int id)
        {
            return GetEFOOrganizerByID(id, null);
        }

        private EFOOrganizer GetEFOOrganizerByID(int id, SqlInterface si)
        {
            EFOOrganizer efoOrganizer = null;

            string storedProcName = "efrcrm_get_efo_organizer_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Organizer_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        efoOrganizer = LoadEFOOrganizer(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoOrganizer;
        }


        public int InsertEFOOrganizer(EFOOrganizer efoOrganizer)
        {
            return InsertEFOOrganizer(efoOrganizer, null);
        }

        private int InsertEFOOrganizer(EFOOrganizer efoOrganizer, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_efo_organizer";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Organizer_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Name", DbType.String, DBValue.ToDBString(efoOrganizer.Name)));
                paramCol.Add(new SqlDataParameter("@User_Name", DbType.String, DBValue.ToDBString(efoOrganizer.UserName)));
                paramCol.Add(new SqlDataParameter("@Password", DbType.String, DBValue.ToDBString(efoOrganizer.Password)));
                paramCol.Add(new SqlDataParameter("@Title", DbType.String, DBValue.ToDBString(efoOrganizer.Title)));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(efoOrganizer.Email)));
                paramCol.Add(new SqlDataParameter("@Best_Time_To_Call", DbType.String, DBValue.ToDBString(efoOrganizer.BestTimeToCall)));
                paramCol.Add(new SqlDataParameter("@Evening_Phone", DbType.String, DBValue.ToDBString(efoOrganizer.EveningPhone)));
                paramCol.Add(new SqlDataParameter("@Day_Phone", DbType.String, DBValue.ToDBString(efoOrganizer.DayPhone)));
                paramCol.Add(new SqlDataParameter("@Fax_Number", DbType.String, DBValue.ToDBString(efoOrganizer.FaxNumber)));
                paramCol.Add(new SqlDataParameter("@Entry_Date", DbType.DateTime, DBValue.ToDBDateTime(efoOrganizer.EntryDate)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(efoOrganizer.Comments)));
                paramCol.Add(new SqlDataParameter("@Organization_ID", DbType.Int32, DBValue.ToDBInt32(efoOrganizer.OrganizationID)));
                paramCol.Add(new SqlDataParameter("@School_ID", DbType.Int32, DBValue.ToDBInt32(efoOrganizer.SchoolID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    efoOrganizer.OrganizerID = DBValue.ToInt32(paramCol["@Organizer_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateEFOOrganizer(EFOOrganizer efoOrganizer)
        {
            return UpdateEFOOrganizer(efoOrganizer, null);
        }

        private int UpdateEFOOrganizer(EFOOrganizer efoOrganizer, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_efo_organizer";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Organizer_ID", DbType.Int32, DBValue.ToDBInt32(efoOrganizer.OrganizerID)));
                paramCol.Add(new SqlDataParameter("@Name", DbType.String, DBValue.ToDBString(efoOrganizer.Name)));
                paramCol.Add(new SqlDataParameter("@User_Name", DbType.String, DBValue.ToDBString(efoOrganizer.UserName)));
                paramCol.Add(new SqlDataParameter("@Password", DbType.String, DBValue.ToDBString(efoOrganizer.Password)));
                paramCol.Add(new SqlDataParameter("@Title", DbType.String, DBValue.ToDBString(efoOrganizer.Title)));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(efoOrganizer.Email)));
                paramCol.Add(new SqlDataParameter("@Best_Time_To_Call", DbType.String, DBValue.ToDBString(efoOrganizer.BestTimeToCall)));
                paramCol.Add(new SqlDataParameter("@Evening_Phone", DbType.String, DBValue.ToDBString(efoOrganizer.EveningPhone)));
                paramCol.Add(new SqlDataParameter("@Day_Phone", DbType.String, DBValue.ToDBString(efoOrganizer.DayPhone)));
                paramCol.Add(new SqlDataParameter("@Fax_Number", DbType.String, DBValue.ToDBString(efoOrganizer.FaxNumber)));
                paramCol.Add(new SqlDataParameter("@Entry_Date", DbType.DateTime, DBValue.ToDBDateTime(efoOrganizer.EntryDate)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(efoOrganizer.Comments)));
                paramCol.Add(new SqlDataParameter("@Organization_ID", DbType.Int32, DBValue.ToDBInt32(efoOrganizer.OrganizationID)));
                paramCol.Add(new SqlDataParameter("@School_ID", DbType.Int32, DBValue.ToDBInt32(efoOrganizer.SchoolID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region EFOParticipant Methods

        private EFOParticipant LoadEFOParticipant(DataRow row)
        {
            EFOParticipant efoParticipant = new EFOParticipant();

            // Store database values into our business object
            efoParticipant.ParticipantID = DBValue.ToInt32(row["participant_id"]);
            efoParticipant.Name = DBValue.ToString(row["name"]);
            efoParticipant.CampaignID = DBValue.ToInt32(row["campaign_id"]);
            efoParticipant.Email = DBValue.ToString(row["email"]);
            efoParticipant.Comments = DBValue.ToString(row["comments"]);
            efoParticipant.EmailSent = DBValue.ToInt32(row["email_sent"]);
            efoParticipant.IsActive = DBValue.ToInt32(row["is_active"]);
            efoParticipant.IsDefault = DBValue.ToInt32(row["is_default"]);
            efoParticipant.IsDeletable = DBValue.ToInt32(row["is_deletable"]);

            // return the filled object
            return efoParticipant;
        }

        public EFOParticipant[] GetEFOParticipants()
        {
            return GetEFOParticipants(null);
        }

        private EFOParticipant[] GetEFOParticipants(SqlInterface si)
        {
            EFOParticipant[] efoParticipants = null;

            string storedProcName = "efrcrm_get_efo_participants";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    efoParticipants = new EFOParticipant[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            efoParticipants[i] = LoadEFOParticipant(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoParticipants;
        }


        public EFOParticipant GetEFOParticipantByID(int id)
        {
            return GetEFOParticipantByID(id, null);
        }

        private EFOParticipant GetEFOParticipantByID(int id, SqlInterface si)
        {
            EFOParticipant efoParticipant = null;

            string storedProcName = "efrcrm_get_efo_participant_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Participant_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        efoParticipant = LoadEFOParticipant(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoParticipant;
        }


        public int InsertEFOParticipant(EFOParticipant efoParticipant)
        {
            return InsertEFOParticipant(efoParticipant, null);
        }

        private int InsertEFOParticipant(EFOParticipant efoParticipant, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_efo_participant";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Participant_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Name", DbType.String, DBValue.ToDBString(efoParticipant.Name)));
                paramCol.Add(new SqlDataParameter("@Campaign_ID", DbType.Int32, DBValue.ToDBInt32(efoParticipant.CampaignID)));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(efoParticipant.Email)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(efoParticipant.Comments)));
                paramCol.Add(new SqlDataParameter("@Email_Sent", DbType.Int32, DBValue.ToDBInt32(efoParticipant.EmailSent)));
                paramCol.Add(new SqlDataParameter("@Is_Active", DbType.Int32, DBValue.ToDBInt32(efoParticipant.IsActive)));
                paramCol.Add(new SqlDataParameter("@Is_Default", DbType.Int32, DBValue.ToDBInt32(efoParticipant.IsDefault)));
                paramCol.Add(new SqlDataParameter("@Is_Deletable", DbType.Int32, DBValue.ToDBInt32(efoParticipant.IsDeletable)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    efoParticipant.ParticipantID = DBValue.ToInt32(paramCol["@Participant_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateEFOParticipant(EFOParticipant efoParticipant)
        {
            return UpdateEFOParticipant(efoParticipant, null);
        }

        private int UpdateEFOParticipant(EFOParticipant efoParticipant, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_efo_participant";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Participant_ID", DbType.Int32, DBValue.ToDBInt32(efoParticipant.ParticipantID)));
                paramCol.Add(new SqlDataParameter("@Name", DbType.String, DBValue.ToDBString(efoParticipant.Name)));
                paramCol.Add(new SqlDataParameter("@Campaign_ID", DbType.Int32, DBValue.ToDBInt32(efoParticipant.CampaignID)));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(efoParticipant.Email)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(efoParticipant.Comments)));
                paramCol.Add(new SqlDataParameter("@Email_Sent", DbType.Int32, DBValue.ToDBInt32(efoParticipant.EmailSent)));
                paramCol.Add(new SqlDataParameter("@Is_Active", DbType.Int32, DBValue.ToDBInt32(efoParticipant.IsActive)));
                paramCol.Add(new SqlDataParameter("@Is_Default", DbType.Int32, DBValue.ToDBInt32(efoParticipant.IsDefault)));
                paramCol.Add(new SqlDataParameter("@Is_Deletable", DbType.Int32, DBValue.ToDBInt32(efoParticipant.IsDeletable)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region EFOSale Methods

        private EFOSale LoadEFOSale(DataRow row)
        {
            EFOSale efoSale = new EFOSale();

            // Store database values into our business object
            efoSale.SaleID = DBValue.ToInt32(row["sale_id"]);
            efoSale.SupporterID = DBValue.ToInt32(row["supporter_id"]);
            efoSale.SaleDate = DBValue.ToDateTime(row["sale_date"]);
            efoSale.AmountToGroup = DBValue.ToInt16(row["amount_to_group"]);
            efoSale.AmountToSupplier = DBValue.ToInt16(row["amount_to_supplier"]);
            efoSale.Amount = DBValue.ToInt16(row["amount"]);
            efoSale.DeliveryAddress = DBValue.ToString(row["delivery_address"]);
            efoSale.StateCode = DBValue.ToString(row["state_code"]);
            efoSale.CountryCode = DBValue.ToString(row["country_code"]);
            efoSale.DeliveryCity = DBValue.ToString(row["delivery_city"]);
            efoSale.DeliveryZipCode = DBValue.ToString(row["delivery_zip_code"]);
            efoSale.CardName = DBValue.ToString(row["card_name"]);
            efoSale.CardAddress = DBValue.ToString(row["card_address"]);
            efoSale.TransactionID = DBValue.ToString(row["transaction_id"]);

            // return the filled object
            return efoSale;
        }

        public EFOSale[] GetEFOSales()
        {
            return GetEFOSales(null);
        }

        private EFOSale[] GetEFOSales(SqlInterface si)
        {
            EFOSale[] efoSales = null;

            string storedProcName = "efrcrm_get_efo_sales";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    efoSales = new EFOSale[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            efoSales[i] = LoadEFOSale(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoSales;
        }


        public EFOSale GetEFOSaleByID(int id)
        {
            return GetEFOSaleByID(id, null);
        }

        private EFOSale GetEFOSaleByID(int id, SqlInterface si)
        {
            EFOSale efoSale = null;

            string storedProcName = "efrcrm_get_efo_sale_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sale_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        efoSale = LoadEFOSale(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoSale;
        }


        public int InsertEFOSale(EFOSale efoSale)
        {
            return InsertEFOSale(efoSale, null);
        }

        private int InsertEFOSale(EFOSale efoSale, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_efo_sale";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sale_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Supporter_ID", DbType.Int32, DBValue.ToDBInt32(efoSale.SupporterID)));
                paramCol.Add(new SqlDataParameter("@Sale_Date", DbType.DateTime, DBValue.ToDBDateTime(efoSale.SaleDate)));
                paramCol.Add(new SqlDataParameter("@Amount_To_Group", DbType.Double, DBValue.ToDBFloat(efoSale.AmountToGroup)));
                paramCol.Add(new SqlDataParameter("@Amount_To_Supplier", DbType.Double, DBValue.ToDBFloat(efoSale.AmountToSupplier)));
                paramCol.Add(new SqlDataParameter("@Amount", DbType.Double, DBValue.ToDBFloat(efoSale.Amount)));
                paramCol.Add(new SqlDataParameter("@Delivery_Address", DbType.String, DBValue.ToDBString(efoSale.DeliveryAddress)));
                paramCol.Add(new SqlDataParameter("@State_Code", DbType.String, DBValue.ToDBString(efoSale.StateCode)));
                paramCol.Add(new SqlDataParameter("@Country_Code", DbType.String, DBValue.ToDBString(efoSale.CountryCode)));
                paramCol.Add(new SqlDataParameter("@Delivery_City", DbType.String, DBValue.ToDBString(efoSale.DeliveryCity)));
                paramCol.Add(new SqlDataParameter("@Delivery_Zip_Code", DbType.String, DBValue.ToDBString(efoSale.DeliveryZipCode)));
                paramCol.Add(new SqlDataParameter("@Card_Name", DbType.String, DBValue.ToDBString(efoSale.CardName)));
                paramCol.Add(new SqlDataParameter("@Card_Address", DbType.String, DBValue.ToDBString(efoSale.CardAddress)));
                paramCol.Add(new SqlDataParameter("@Transaction_ID", DbType.String, DBValue.ToDBString(efoSale.TransactionID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    efoSale.SaleID = DBValue.ToInt32(paramCol["@Sale_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateEFOSale(EFOSale efoSale)
        {
            return UpdateEFOSale(efoSale, null);
        }

        private int UpdateEFOSale(EFOSale efoSale, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_efo_sale";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sale_ID", DbType.Int32, DBValue.ToDBInt32(efoSale.SaleID)));
                paramCol.Add(new SqlDataParameter("@Supporter_ID", DbType.Int32, DBValue.ToDBInt32(efoSale.SupporterID)));
                paramCol.Add(new SqlDataParameter("@Sale_Date", DbType.DateTime, DBValue.ToDBDateTime(efoSale.SaleDate)));
                paramCol.Add(new SqlDataParameter("@Amount_To_Group", DbType.Double, DBValue.ToDBFloat(efoSale.AmountToGroup)));
                paramCol.Add(new SqlDataParameter("@Amount_To_Supplier", DbType.Double, DBValue.ToDBFloat(efoSale.AmountToSupplier)));
                paramCol.Add(new SqlDataParameter("@Amount", DbType.Double, DBValue.ToDBFloat(efoSale.Amount)));
                paramCol.Add(new SqlDataParameter("@Delivery_Address", DbType.String, DBValue.ToDBString(efoSale.DeliveryAddress)));
                paramCol.Add(new SqlDataParameter("@State_Code", DbType.String, DBValue.ToDBString(efoSale.StateCode)));
                paramCol.Add(new SqlDataParameter("@Country_Code", DbType.String, DBValue.ToDBString(efoSale.CountryCode)));
                paramCol.Add(new SqlDataParameter("@Delivery_City", DbType.String, DBValue.ToDBString(efoSale.DeliveryCity)));
                paramCol.Add(new SqlDataParameter("@Delivery_Zip_Code", DbType.String, DBValue.ToDBString(efoSale.DeliveryZipCode)));
                paramCol.Add(new SqlDataParameter("@Card_Name", DbType.String, DBValue.ToDBString(efoSale.CardName)));
                paramCol.Add(new SqlDataParameter("@Card_Address", DbType.String, DBValue.ToDBString(efoSale.CardAddress)));
                paramCol.Add(new SqlDataParameter("@Transaction_ID", DbType.String, DBValue.ToDBString(efoSale.TransactionID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region EFOSaleItem Methods

        private EFOSaleItem LoadEFOSaleItem(DataRow row)
        {
            EFOSaleItem efoSaleItem = new EFOSaleItem();

            // Store database values into our business object
            efoSaleItem.ItemID = DBValue.ToInt32(row["item_id"]);
            efoSaleItem.SaleID = DBValue.ToInt32(row["sale_id"]);
            efoSaleItem.Quantity = DBValue.ToInt16(row["quantity"]);

            // return the filled object
            return efoSaleItem;
        }

        public EFOSaleItem[] GetEFOSaleItems()
        {
            return GetEFOSaleItems(null);
        }

        private EFOSaleItem[] GetEFOSaleItems(SqlInterface si)
        {
            EFOSaleItem[] efoSaleItems = null;

            string storedProcName = "efrcrm_get_efo_sale_items";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    efoSaleItems = new EFOSaleItem[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            efoSaleItems[i] = LoadEFOSaleItem(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoSaleItems;
        }


        public EFOSaleItem GetEFOSaleItemByID(int id)
        {
            return GetEFOSaleItemByID(id, null);
        }

        private EFOSaleItem GetEFOSaleItemByID(int id, SqlInterface si)
        {
            EFOSaleItem efoSaleItem = null;

            string storedProcName = "efrcrm_get_efo_sale_item_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Item_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        efoSaleItem = LoadEFOSaleItem(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoSaleItem;
        }


        public int InsertEFOSaleItem(EFOSaleItem efoSaleItem)
        {
            return InsertEFOSaleItem(efoSaleItem, null);
        }

        private int InsertEFOSaleItem(EFOSaleItem efoSaleItem, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_efo_sale_item";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Item_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Sale_ID", DbType.Int32, DBValue.ToDBInt32(efoSaleItem.SaleID)));
                paramCol.Add(new SqlDataParameter("@Quantity", DbType.Double, DBValue.ToDBFloat(efoSaleItem.Quantity)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    efoSaleItem.ItemID = DBValue.ToInt32(paramCol["@Item_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateEFOSaleItem(EFOSaleItem efoSaleItem)
        {
            return UpdateEFOSaleItem(efoSaleItem, null);
        }

        private int UpdateEFOSaleItem(EFOSaleItem efoSaleItem, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_efo_sale_item";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Item_ID", DbType.Int32, DBValue.ToDBInt32(efoSaleItem.ItemID)));
                paramCol.Add(new SqlDataParameter("@Sale_ID", DbType.Int32, DBValue.ToDBInt32(efoSaleItem.SaleID)));
                paramCol.Add(new SqlDataParameter("@Quantity", DbType.Double, DBValue.ToDBFloat(efoSaleItem.Quantity)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region EFOStatus Methods

        private EFOStatus LoadEFOStatus(DataRow row)
        {
            EFOStatus efoStatus = new EFOStatus();

            // Store database values into our business object
            efoStatus.StatusID = DBValue.ToInt32(row["status_id"]);
            efoStatus.Status = DBValue.ToString(row["status"]);

            // return the filled object
            return efoStatus;
        }

        public EFOStatus[] GetEFOStatuss()
        {
            return GetEFOStatuss(null);
        }

        private EFOStatus[] GetEFOStatuss(SqlInterface si)
        {
            EFOStatus[] efoStatuss = null;

            string storedProcName = "efrcrm_get_efo_statuss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    efoStatuss = new EFOStatus[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            efoStatuss[i] = LoadEFOStatus(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoStatuss;
        }


        public EFOStatus GetEFOStatusByID(int id)
        {
            return GetEFOStatusByID(id, null);
        }

        private EFOStatus GetEFOStatusByID(int id, SqlInterface si)
        {
            EFOStatus efoStatus = null;

            string storedProcName = "efrcrm_get_efo_status_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Status_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        efoStatus = LoadEFOStatus(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoStatus;
        }


        public int InsertEFOStatus(EFOStatus efoStatus)
        {
            return InsertEFOStatus(efoStatus, null);
        }

        private int InsertEFOStatus(EFOStatus efoStatus, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_efo_status";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Status_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Status", DbType.String, DBValue.ToDBString(efoStatus.Status)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    efoStatus.StatusID = DBValue.ToInt32(paramCol["@Status_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateEFOStatus(EFOStatus efoStatus)
        {
            return UpdateEFOStatus(efoStatus, null);
        }

        private int UpdateEFOStatus(EFOStatus efoStatus, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_efo_status";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Status_ID", DbType.Int32, DBValue.ToDBInt32(efoStatus.StatusID)));
                paramCol.Add(new SqlDataParameter("@Status", DbType.String, DBValue.ToDBString(efoStatus.Status)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region EFOStatusEmail Methods

        private EFOStatusEmail LoadEFOStatusEmail(DataRow row)
        {
            EFOStatusEmail efoStatusEmail = new EFOStatusEmail();

            // Store database values into our business object
            efoStatusEmail.EmailTypeID = DBValue.ToInt32(row["email_type_id"]);
            efoStatusEmail.StatusID = DBValue.ToInt32(row["status_id"]);

            // return the filled object
            return efoStatusEmail;
        }

        public EFOStatusEmail[] GetEFOStatusEmails()
        {
            return GetEFOStatusEmails(null);
        }

        private EFOStatusEmail[] GetEFOStatusEmails(SqlInterface si)
        {
            EFOStatusEmail[] efoStatusEmails = null;

            string storedProcName = "efrcrm_get_efo_status_emails";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    efoStatusEmails = new EFOStatusEmail[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            efoStatusEmails[i] = LoadEFOStatusEmail(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoStatusEmails;
        }


        public EFOStatusEmail GetEFOStatusEmailByID(int id)
        {
            return GetEFOStatusEmailByID(id, null);
        }

        private EFOStatusEmail GetEFOStatusEmailByID(int id, SqlInterface si)
        {
            EFOStatusEmail efoStatusEmail = null;

            string storedProcName = "efrcrm_get_efo_status_email_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Email_Type_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        efoStatusEmail = LoadEFOStatusEmail(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoStatusEmail;
        }


        public int InsertEFOStatusEmail(EFOStatusEmail efoStatusEmail)
        {
            return InsertEFOStatusEmail(efoStatusEmail, null);
        }

        private int InsertEFOStatusEmail(EFOStatusEmail efoStatusEmail, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_efo_status_email";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Email_Type_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Status_ID", DbType.Int32, DBValue.ToDBInt32(efoStatusEmail.StatusID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    efoStatusEmail.EmailTypeID = DBValue.ToInt32(paramCol["@Email_Type_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateEFOStatusEmail(EFOStatusEmail efoStatusEmail)
        {
            return UpdateEFOStatusEmail(efoStatusEmail, null);
        }

        private int UpdateEFOStatusEmail(EFOStatusEmail efoStatusEmail, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_efo_status_email";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Email_Type_ID", DbType.Int32, DBValue.ToDBInt32(efoStatusEmail.EmailTypeID)));
                paramCol.Add(new SqlDataParameter("@Status_ID", DbType.Int32, DBValue.ToDBInt32(efoStatusEmail.StatusID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region EFOSupporter Methods

        private EFOSupporter LoadEFOSupporter(DataRow row)
        {
            EFOSupporter efoSupporter = new EFOSupporter();

            // Store database values into our business object
            efoSupporter.SupporterID = DBValue.ToInt32(row["supporter_id"]);
            efoSupporter.Name = DBValue.ToString(row["name"]);
            efoSupporter.ParticipantID = DBValue.ToInt32(row["participant_id"]);
            efoSupporter.Email = DBValue.ToString(row["email"]);
            efoSupporter.IsEmailGood = DBValue.ToInt32(row["is_email_good"]);
            efoSupporter.IsActive = DBValue.ToInt32(row["is_active"]);
            efoSupporter.Comments = DBValue.ToString(row["comments"]);
            efoSupporter.EmailSent = DBValue.ToInt32(row["email_sent"]);
            efoSupporter.IsDeletable = DBValue.ToInt32(row["is_deletable"]);
            efoSupporter.Relation = DBValue.ToString(row["relation"]);

            // return the filled object
            return efoSupporter;
        }

        public EFOSupporter[] GetEFOSupporters()
        {
            return GetEFOSupporters(null);
        }

        private EFOSupporter[] GetEFOSupporters(SqlInterface si)
        {
            EFOSupporter[] efoSupporters = null;

            string storedProcName = "efrcrm_get_efo_supporters";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    efoSupporters = new EFOSupporter[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            efoSupporters[i] = LoadEFOSupporter(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoSupporters;
        }


        public EFOSupporter GetEFOSupporterByID(int id)
        {
            return GetEFOSupporterByID(id, null);
        }

        private EFOSupporter GetEFOSupporterByID(int id, SqlInterface si)
        {
            EFOSupporter efoSupporter = null;

            string storedProcName = "efrcrm_get_efo_supporter_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Supporter_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        efoSupporter = LoadEFOSupporter(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoSupporter;
        }


        public int InsertEFOSupporter(EFOSupporter efoSupporter)
        {
            return InsertEFOSupporter(efoSupporter, null);
        }

        private int InsertEFOSupporter(EFOSupporter efoSupporter, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_efo_supporter";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Supporter_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Name", DbType.String, DBValue.ToDBString(efoSupporter.Name)));
                paramCol.Add(new SqlDataParameter("@Participant_ID", DbType.Int32, DBValue.ToDBInt32(efoSupporter.ParticipantID)));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(efoSupporter.Email)));
                paramCol.Add(new SqlDataParameter("@Is_Email_Good", DbType.Int32, DBValue.ToDBInt32(efoSupporter.IsEmailGood)));
                paramCol.Add(new SqlDataParameter("@Is_Active", DbType.Int32, DBValue.ToDBInt32(efoSupporter.IsActive)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(efoSupporter.Comments)));
                paramCol.Add(new SqlDataParameter("@Email_Sent", DbType.Int32, DBValue.ToDBInt32(efoSupporter.EmailSent)));
                paramCol.Add(new SqlDataParameter("@Is_Deletable", DbType.Int32, DBValue.ToDBInt32(efoSupporter.IsDeletable)));
                paramCol.Add(new SqlDataParameter("@Relation", DbType.String, DBValue.ToDBString(efoSupporter.Relation)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    efoSupporter.SupporterID = DBValue.ToInt32(paramCol["@Supporter_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateEFOSupporter(EFOSupporter efoSupporter)
        {
            return UpdateEFOSupporter(efoSupporter, null);
        }

        private int UpdateEFOSupporter(EFOSupporter efoSupporter, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_efo_supporter";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Supporter_ID", DbType.Int32, DBValue.ToDBInt32(efoSupporter.SupporterID)));
                paramCol.Add(new SqlDataParameter("@Name", DbType.String, DBValue.ToDBString(efoSupporter.Name)));
                paramCol.Add(new SqlDataParameter("@Participant_ID", DbType.Int32, DBValue.ToDBInt32(efoSupporter.ParticipantID)));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(efoSupporter.Email)));
                paramCol.Add(new SqlDataParameter("@Is_Email_Good", DbType.Int32, DBValue.ToDBInt32(efoSupporter.IsEmailGood)));
                paramCol.Add(new SqlDataParameter("@Is_Active", DbType.Int32, DBValue.ToDBInt32(efoSupporter.IsActive)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(efoSupporter.Comments)));
                paramCol.Add(new SqlDataParameter("@Email_Sent", DbType.Int32, DBValue.ToDBInt32(efoSupporter.EmailSent)));
                paramCol.Add(new SqlDataParameter("@Is_Deletable", DbType.Int32, DBValue.ToDBInt32(efoSupporter.IsDeletable)));
                paramCol.Add(new SqlDataParameter("@Relation", DbType.String, DBValue.ToDBString(efoSupporter.Relation)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region EFOSupporterEmailSent Methods

        private EFOSupporterEmailSent LoadEFOSupporterEmailSent(DataRow row)
        {
            EFOSupporterEmailSent efoSupporterEmailSent = new EFOSupporterEmailSent();

            // Store database values into our business object
            efoSupporterEmailSent.SupporterEmailSentID = DBValue.ToInt32(row["supporter_email_sent_id"]);
            efoSupporterEmailSent.EmailTypeID = DBValue.ToInt32(row["email_type_id"]);
            efoSupporterEmailSent.SupporterID = DBValue.ToInt32(row["supporter_id"]);
            efoSupporterEmailSent.DateSent = DBValue.ToDateTime(row["date_sent"]);

            // return the filled object
            return efoSupporterEmailSent;
        }

        public EFOSupporterEmailSent[] GetEFOSupporterEmailSents()
        {
            return GetEFOSupporterEmailSents(null);
        }

        private EFOSupporterEmailSent[] GetEFOSupporterEmailSents(SqlInterface si)
        {
            EFOSupporterEmailSent[] efoSupporterEmailSents = null;

            string storedProcName = "efrcrm_get_efo_supporter_email_sents";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    efoSupporterEmailSents = new EFOSupporterEmailSent[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            efoSupporterEmailSents[i] = LoadEFOSupporterEmailSent(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoSupporterEmailSents;
        }


        public EFOSupporterEmailSent GetEFOSupporterEmailSentByID(int id)
        {
            return GetEFOSupporterEmailSentByID(id, null);
        }

        private EFOSupporterEmailSent GetEFOSupporterEmailSentByID(int id, SqlInterface si)
        {
            EFOSupporterEmailSent efoSupporterEmailSent = null;

            string storedProcName = "efrcrm_get_efo_supporter_email_sent_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Supporter_Email_Sent_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        efoSupporterEmailSent = LoadEFOSupporterEmailSent(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoSupporterEmailSent;
        }


        public int InsertEFOSupporterEmailSent(EFOSupporterEmailSent efoSupporterEmailSent)
        {
            return InsertEFOSupporterEmailSent(efoSupporterEmailSent, null);
        }

        private int InsertEFOSupporterEmailSent(EFOSupporterEmailSent efoSupporterEmailSent, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_efo_supporter_email_sent";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Supporter_Email_Sent_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Email_Type_ID", DbType.Int32, DBValue.ToDBInt32(efoSupporterEmailSent.EmailTypeID)));
                paramCol.Add(new SqlDataParameter("@Supporter_ID", DbType.Int32, DBValue.ToDBInt32(efoSupporterEmailSent.SupporterID)));
                paramCol.Add(new SqlDataParameter("@Date_Sent", DbType.DateTime, DBValue.ToDBDateTime(efoSupporterEmailSent.DateSent)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    efoSupporterEmailSent.SupporterEmailSentID = DBValue.ToInt32(paramCol["@Supporter_Email_Sent_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateEFOSupporterEmailSent(EFOSupporterEmailSent efoSupporterEmailSent)
        {
            return UpdateEFOSupporterEmailSent(efoSupporterEmailSent, null);
        }

        private int UpdateEFOSupporterEmailSent(EFOSupporterEmailSent efoSupporterEmailSent, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_efo_supporter_email_sent";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Supporter_Email_Sent_ID", DbType.Int32, DBValue.ToDBInt32(efoSupporterEmailSent.SupporterEmailSentID)));
                paramCol.Add(new SqlDataParameter("@Email_Type_ID", DbType.Int32, DBValue.ToDBInt32(efoSupporterEmailSent.EmailTypeID)));
                paramCol.Add(new SqlDataParameter("@Supporter_ID", DbType.Int32, DBValue.ToDBInt32(efoSupporterEmailSent.SupporterID)));
                paramCol.Add(new SqlDataParameter("@Date_Sent", DbType.DateTime, DBValue.ToDBDateTime(efoSupporterEmailSent.DateSent)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region EFOTag Methods

        private EFOTag LoadEFOTag(DataRow row)
        {
            EFOTag efoTag = new EFOTag();

            // Store database values into our business object
            efoTag.EmailTypeID = DBValue.ToInt32(row["email_type_id"]);
            efoTag.TagName = DBValue.ToString(row["tag_name"]);
            efoTag.TagID = DBValue.ToInt32(row["tag_id"]);

            // return the filled object
            return efoTag;
        }

        public EFOTag[] GetEFOTags()
        {
            return GetEFOTags(null);
        }

        private EFOTag[] GetEFOTags(SqlInterface si)
        {
            EFOTag[] efoTags = null;

            string storedProcName = "efrcrm_get_efo_tags";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    efoTags = new EFOTag[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            efoTags[i] = LoadEFOTag(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoTags;
        }


        public EFOTag GetEFOTagByID(int id)
        {
            return GetEFOTagByID(id, null);
        }

        private EFOTag GetEFOTagByID(int id, SqlInterface si)
        {
            EFOTag efoTag = null;

            string storedProcName = "efrcrm_get_efo_tag_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Email_Type_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        efoTag = LoadEFOTag(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efoTag;
        }


        public int InsertEFOTag(EFOTag efoTag)
        {
            return InsertEFOTag(efoTag, null);
        }

        private int InsertEFOTag(EFOTag efoTag, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_efo_tag";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Email_Type_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Tag_Name", DbType.String, DBValue.ToDBString(efoTag.TagName)));
                paramCol.Add(new SqlDataParameter("@Tag_ID", DbType.Int32, DBValue.ToDBInt32(efoTag.TagID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    efoTag.EmailTypeID = DBValue.ToInt32(paramCol["@Email_Type_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateEFOTag(EFOTag efoTag)
        {
            return UpdateEFOTag(efoTag, null);
        }

        private int UpdateEFOTag(EFOTag efoTag, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_efo_tag";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Email_Type_ID", DbType.Int32, DBValue.ToDBInt32(efoTag.EmailTypeID)));
                paramCol.Add(new SqlDataParameter("@Tag_Name", DbType.String, DBValue.ToDBString(efoTag.TagName)));
                paramCol.Add(new SqlDataParameter("@Tag_ID", DbType.Int32, DBValue.ToDBInt32(efoTag.TagID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region EFRLead Methods

        private EFRLead LoadEFRLead(DataRow row)
        {
            EFRLead efrLead = new EFRLead();

            // Store database values into our business object
            efrLead.LeadID = DBValue.ToInt32(row["lead_id"]);
            efrLead.FirstName = DBValue.ToString(row["first_name"]);
            efrLead.LastName = DBValue.ToString(row["last_name"]);
            efrLead.OrganizationName = DBValue.ToString(row["organization_name"]);
            efrLead.PromotionDescription = DBValue.ToString(row["promotion_description"]);
            efrLead.LeadActivityDetail = DBValue.ToString(row["lead_activity_detail"]);
            efrLead.LeadComment = DBValue.ToString(row["lead_comment"]);
            efrLead.ActivityScheduledDate = DBValue.ToDateTime(row["activity_scheduled_date"]);
            efrLead.ConsultantID = DBValue.ToInt32(row["consultant_id"]);
            efrLead.ConsultantExt = DBValue.ToInt32(row["consultant_ext"]);
            efrLead.IsDone = DBValue.ToInt32(row["is_done"]);
            efrLead.PhoneNumber = DBValue.ToString(row["phone_number"]);
            efrLead.PhoneExtension = DBValue.ToString(row["phone_extension"]);
            efrLead.PromotionType = DBValue.ToString(row["promotion_type"]);
            efrLead.SecondPhoneNumber = DBValue.ToString(row["2ndphone_number"]);
            efrLead.SecondPhoneExtension = DBValue.ToString(row["2ndphone_extension"]);

            // return the filled object
            return efrLead;
        }

        public EFRLead[] GetEFRLeads()
        {
            return GetEFRLeads(null);
        }

        private EFRLead[] GetEFRLeads(SqlInterface si)
        {
            EFRLead[] efrLeads = null;

            string storedProcName = "efrcrm_get_efr_leads";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    efrLeads = new EFRLead[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            efrLeads[i] = LoadEFRLead(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efrLeads;
        }


        public EFRLead GetEFRLeadByID(int id)
        {
            return GetEFRLeadByID(id, null);
        }

        private EFRLead GetEFRLeadByID(int id, SqlInterface si)
        {
            EFRLead efrLead = null;

            string storedProcName = "efrcrm_get_efr_lead_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        efrLead = LoadEFRLead(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efrLead;
        }


        public int InsertEFRLead(EFRLead efrLead)
        {
            return InsertEFRLead(efrLead, null);
        }

        private int InsertEFRLead(EFRLead efrLead, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_efr_lead";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@First_Name", DbType.String, DBValue.ToDBString(efrLead.FirstName)));
                paramCol.Add(new SqlDataParameter("@Last_Name", DbType.String, DBValue.ToDBString(efrLead.LastName)));
                paramCol.Add(new SqlDataParameter("@Organization_Name", DbType.String, DBValue.ToDBString(efrLead.OrganizationName)));
                paramCol.Add(new SqlDataParameter("@Promotion_Description", DbType.String, DBValue.ToDBString(efrLead.PromotionDescription)));
                paramCol.Add(new SqlDataParameter("@Lead_Activity_Detail", DbType.String, DBValue.ToDBString(efrLead.LeadActivityDetail)));
                paramCol.Add(new SqlDataParameter("@Lead_Comment", DbType.String, DBValue.ToDBString(efrLead.LeadComment)));
                paramCol.Add(new SqlDataParameter("@Activity_Scheduled_Date", DbType.DateTime, DBValue.ToDBDateTime(efrLead.ActivityScheduledDate)));
                paramCol.Add(new SqlDataParameter("@Consultant_ID", DbType.Int32, DBValue.ToDBInt32(efrLead.ConsultantID)));
                paramCol.Add(new SqlDataParameter("@Consultant_Ext", DbType.Int32, DBValue.ToDBInt32(efrLead.ConsultantExt)));
                paramCol.Add(new SqlDataParameter("@Is_Done", DbType.Int32, DBValue.ToDBInt32(efrLead.IsDone)));
                paramCol.Add(new SqlDataParameter("@Phone_Number", DbType.String, DBValue.ToDBString(efrLead.PhoneNumber)));
                paramCol.Add(new SqlDataParameter("@Phone_extension", DbType.String, DBValue.ToDBString(efrLead.PhoneExtension)));
                paramCol.Add(new SqlDataParameter("@Promotion_Type", DbType.String, DBValue.ToDBString(efrLead.PromotionType)));
                paramCol.Add(new SqlDataParameter("@2ndPhone_Number", DbType.String, DBValue.ToDBString(efrLead.SecondPhoneNumber)));
                paramCol.Add(new SqlDataParameter("@2ndPhone_Extension", DbType.String, DBValue.ToDBString(efrLead.SecondPhoneExtension)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    efrLead.LeadID = DBValue.ToInt32(paramCol["@Lead_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateEFRLead(EFRLead efrLead)
        {
            return UpdateEFRLead(efrLead, null);
        }

        private int UpdateEFRLead(EFRLead efrLead, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_efr_lead";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_ID", DbType.Int32, DBValue.ToDBInt32(efrLead.LeadID)));
                paramCol.Add(new SqlDataParameter("@First_Name", DbType.String, DBValue.ToDBString(efrLead.FirstName)));
                paramCol.Add(new SqlDataParameter("@Last_Name", DbType.String, DBValue.ToDBString(efrLead.LastName)));
                paramCol.Add(new SqlDataParameter("@Organization_Name", DbType.String, DBValue.ToDBString(efrLead.OrganizationName)));
                paramCol.Add(new SqlDataParameter("@Promotion_Description", DbType.String, DBValue.ToDBString(efrLead.PromotionDescription)));
                paramCol.Add(new SqlDataParameter("@Lead_Activity_Detail", DbType.String, DBValue.ToDBString(efrLead.LeadActivityDetail)));
                paramCol.Add(new SqlDataParameter("@Lead_Comment", DbType.String, DBValue.ToDBString(efrLead.LeadComment)));
                paramCol.Add(new SqlDataParameter("@Activity_Scheduled_Date", DbType.DateTime, DBValue.ToDBDateTime(efrLead.ActivityScheduledDate)));
                paramCol.Add(new SqlDataParameter("@Consultant_ID", DbType.Int32, DBValue.ToDBInt32(efrLead.ConsultantID)));
                paramCol.Add(new SqlDataParameter("@Consultant_Ext", DbType.Int32, DBValue.ToDBInt32(efrLead.ConsultantExt)));
                paramCol.Add(new SqlDataParameter("@Is_Done", DbType.Int32, DBValue.ToDBInt32(efrLead.IsDone)));
                paramCol.Add(new SqlDataParameter("@Phone_Number", DbType.String, DBValue.ToDBString(efrLead.PhoneNumber)));
                paramCol.Add(new SqlDataParameter("@Phone_extension", DbType.String, DBValue.ToDBString(efrLead.PhoneExtension)));
                paramCol.Add(new SqlDataParameter("@Promotion_Type", DbType.String, DBValue.ToDBString(efrLead.PromotionType)));
                paramCol.Add(new SqlDataParameter("@2ndPhone_Number", DbType.String, DBValue.ToDBString(efrLead.SecondPhoneNumber)));
                paramCol.Add(new SqlDataParameter("@2ndPhone_Extension", DbType.String, DBValue.ToDBString(efrLead.SecondPhoneExtension)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region EfrLeadActivity Methods

        private EfrLeadActivity LoadEfrLeadActivity(DataRow row)
        {
            EfrLeadActivity efrLeadActivity = new EfrLeadActivity();

            // Store database values into our business object
            efrLeadActivity.LeadActivityId = DBValue.ToInt32(row["lead_activity_id"]);
            efrLeadActivity.LeadId = DBValue.ToInt32(row["lead_id"]);
            efrLeadActivity.LeadActivityTypeId = DBValue.ToInt32(row["lead_activity_type_id"]);
            efrLeadActivity.LeadActivityDate = DBValue.ToDateTime(row["lead_activity_date"]);
            efrLeadActivity.CompletedDate = DBValue.ToDateTime(row["completed_date"]);
            efrLeadActivity.Comments = DBValue.ToString(row["comments"]);

            // return the filled object
            return efrLeadActivity;
        }

        public EfrLeadActivity[] GetEfrLeadActivitys()
        {
            return GetEfrLeadActivitys(null);
        }

        private EfrLeadActivity[] GetEfrLeadActivitys(SqlInterface si)
        {
            EfrLeadActivity[] efrLeadActivitys = null;

            string storedProcName = "efrcrm_get_efr_lead_activitys";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    efrLeadActivitys = new EfrLeadActivity[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            efrLeadActivitys[i] = LoadEfrLeadActivity(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efrLeadActivitys;
        }


        public EfrLeadActivity GetEfrLeadActivityByID(int id)
        {
            return GetEfrLeadActivityByID(id, null);
        }

        private EfrLeadActivity GetEfrLeadActivityByID(int id, SqlInterface si)
        {
            EfrLeadActivity efrLeadActivity = null;

            string storedProcName = "efrcrm_get_efr_lead_activity_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_Activity_Id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        efrLeadActivity = LoadEfrLeadActivity(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return efrLeadActivity;
        }


        public int InsertEfrLeadActivity(EfrLeadActivity efrLeadActivity)
        {
            return InsertEfrLeadActivity(efrLeadActivity, null);
        }

        private int InsertEfrLeadActivity(EfrLeadActivity efrLeadActivity, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_efr_lead_activity";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_Activity_Id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Lead_Id", DbType.Int32, DBValue.ToDBInt32(efrLeadActivity.LeadId)));
                paramCol.Add(new SqlDataParameter("@Lead_Activity_Type_Id", DbType.Int32, DBValue.ToDBInt32(efrLeadActivity.LeadActivityTypeId)));
                paramCol.Add(new SqlDataParameter("@Lead_Activity_Date", DbType.DateTime, DBValue.ToDBDateTime(efrLeadActivity.LeadActivityDate)));
                paramCol.Add(new SqlDataParameter("@Completed_Date", DbType.DateTime, DBValue.ToDBDateTime(efrLeadActivity.CompletedDate)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(efrLeadActivity.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    efrLeadActivity.LeadActivityId = DBValue.ToInt32(paramCol["@Lead_Activity_Id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateEfrLeadActivity(EfrLeadActivity efrLeadActivity)
        {
            return UpdateEfrLeadActivity(efrLeadActivity, null);
        }

        private int UpdateEfrLeadActivity(EfrLeadActivity efrLeadActivity, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_efr_lead_activity";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_Activity_Id", DbType.Int32, DBValue.ToDBInt32(efrLeadActivity.LeadActivityId)));
                paramCol.Add(new SqlDataParameter("@Lead_Id", DbType.Int32, DBValue.ToDBInt32(efrLeadActivity.LeadId)));
                paramCol.Add(new SqlDataParameter("@Lead_Activity_Type_Id", DbType.Int32, DBValue.ToDBInt32(efrLeadActivity.LeadActivityTypeId)));
                paramCol.Add(new SqlDataParameter("@Lead_Activity_Date", DbType.DateTime, DBValue.ToDBDateTime(efrLeadActivity.LeadActivityDate)));
                paramCol.Add(new SqlDataParameter("@Completed_Date", DbType.DateTime, DBValue.ToDBDateTime(efrLeadActivity.CompletedDate)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(efrLeadActivity.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region EMailIwon1 Methods

        private EMailIwon1 LoadEMailIwon1(DataRow row)
        {
            EMailIwon1 emailIwon1 = new EMailIwon1();

            // Store database values into our business object
            emailIwon1.ID = DBValue.ToInt32(row["id"]);
            emailIwon1.GoodEmail = DBValue.ToString(row["goodemail"]);

            // return the filled object
            return emailIwon1;
        }

        public EMailIwon1[] GetEMailIwon1s()
        {
            return GetEMailIwon1s(null);
        }

        private EMailIwon1[] GetEMailIwon1s(SqlInterface si)
        {
            EMailIwon1[] emailIwon1s = null;

            string storedProcName = "efrcrm_get_email_iwon1s";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    emailIwon1s = new EMailIwon1[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            emailIwon1s[i] = LoadEMailIwon1(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return emailIwon1s;
        }


        public EMailIwon1 GetEMailIwon1ByID(int id)
        {
            return GetEMailIwon1ByID(id, null);
        }

        private EMailIwon1 GetEMailIwon1ByID(int id, SqlInterface si)
        {
            EMailIwon1 emailIwon1 = null;

            string storedProcName = "efrcrm_get_email_iwon1_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        emailIwon1 = LoadEMailIwon1(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return emailIwon1;
        }


        public int InsertEMailIwon1(EMailIwon1 emailIwon1)
        {
            return InsertEMailIwon1(emailIwon1, null);
        }

        private int InsertEMailIwon1(EMailIwon1 emailIwon1, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_email_iwon1";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@GoodEmail", DbType.String, DBValue.ToDBString(emailIwon1.GoodEmail)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    emailIwon1.ID = DBValue.ToInt32(paramCol["@ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateEMailIwon1(EMailIwon1 emailIwon1)
        {
            return UpdateEMailIwon1(emailIwon1, null);
        }

        private int UpdateEMailIwon1(EMailIwon1 emailIwon1, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_email_iwon1";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@ID", DbType.Int32, DBValue.ToDBInt32(emailIwon1.ID)));
                paramCol.Add(new SqlDataParameter("@GoodEmail", DbType.String, DBValue.ToDBString(emailIwon1.GoodEmail)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region EMailIwon2 Methods

        private EMailIwon2 LoadEMailIwon2(DataRow row)
        {
            EMailIwon2 emailIwon2 = new EMailIwon2();

            // Store database values into our business object
            emailIwon2.ID = DBValue.ToInt32(row["id"]);
            emailIwon2.GoodEmail = DBValue.ToString(row["goodemail"]);

            // return the filled object
            return emailIwon2;
        }

        public EMailIwon2[] GetEMailIwon2s()
        {
            return GetEMailIwon2s(null);
        }

        private EMailIwon2[] GetEMailIwon2s(SqlInterface si)
        {
            EMailIwon2[] emailIwon2s = null;

            string storedProcName = "efrcrm_get_email_iwon2s";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    emailIwon2s = new EMailIwon2[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            emailIwon2s[i] = LoadEMailIwon2(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return emailIwon2s;
        }


        public EMailIwon2 GetEMailIwon2ByID(int id)
        {
            return GetEMailIwon2ByID(id, null);
        }

        private EMailIwon2 GetEMailIwon2ByID(int id, SqlInterface si)
        {
            EMailIwon2 emailIwon2 = null;

            string storedProcName = "efrcrm_get_email_iwon2_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        emailIwon2 = LoadEMailIwon2(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return emailIwon2;
        }


        public int InsertEMailIwon2(EMailIwon2 emailIwon2)
        {
            return InsertEMailIwon2(emailIwon2, null);
        }

        private int InsertEMailIwon2(EMailIwon2 emailIwon2, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_email_iwon2";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@GoodEmail", DbType.String, DBValue.ToDBString(emailIwon2.GoodEmail)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    emailIwon2.ID = DBValue.ToInt32(paramCol["@ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateEMailIwon2(EMailIwon2 emailIwon2)
        {
            return UpdateEMailIwon2(emailIwon2, null);
        }

        private int UpdateEMailIwon2(EMailIwon2 emailIwon2, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_email_iwon2";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@ID", DbType.Int32, DBValue.ToDBInt32(emailIwon2.ID)));
                paramCol.Add(new SqlDataParameter("@GoodEmail", DbType.String, DBValue.ToDBString(emailIwon2.GoodEmail)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region EMailPaulStanton Methods

        private EMailPaulStanton LoadEMailPaulStanton(DataRow row)
        {
            EMailPaulStanton emailPaulstanton = new EMailPaulStanton();

            // Store database values into our business object
            emailPaulstanton.ID = DBValue.ToInt32(row["id"]);
            emailPaulstanton.GoodEmail = DBValue.ToString(row["goodemail"]);

            // return the filled object
            return emailPaulstanton;
        }

        public EMailPaulStanton[] GetEMailPaulStantons()
        {
            return GetEMailPaulStantons(null);
        }

        private EMailPaulStanton[] GetEMailPaulStantons(SqlInterface si)
        {
            EMailPaulStanton[] emailPaulstantons = null;

            string storedProcName = "efrcrm_get_email_paulstantons";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    emailPaulstantons = new EMailPaulStanton[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            emailPaulstantons[i] = LoadEMailPaulStanton(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return emailPaulstantons;
        }


        public EMailPaulStanton GetEMailPaulStantonByID(int id)
        {
            return GetEMailPaulStantonByID(id, null);
        }

        private EMailPaulStanton GetEMailPaulStantonByID(int id, SqlInterface si)
        {
            EMailPaulStanton emailPaulstanton = null;

            string storedProcName = "efrcrm_get_email_paulstanton_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        emailPaulstanton = LoadEMailPaulStanton(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return emailPaulstanton;
        }


        public int InsertEMailPaulStanton(EMailPaulStanton emailPaulstanton)
        {
            return InsertEMailPaulStanton(emailPaulstanton, null);
        }

        private int InsertEMailPaulStanton(EMailPaulStanton emailPaulstanton, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_email_paulstanton";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@GoodEmail", DbType.String, DBValue.ToDBString(emailPaulstanton.GoodEmail)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    emailPaulstanton.ID = DBValue.ToInt32(paramCol["@ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateEMailPaulStanton(EMailPaulStanton emailPaulstanton)
        {
            return UpdateEMailPaulStanton(emailPaulstanton, null);
        }

        private int UpdateEMailPaulStanton(EMailPaulStanton emailPaulstanton, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_email_paulstanton";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@ID", DbType.Int32, DBValue.ToDBInt32(emailPaulstanton.ID)));
                paramCol.Add(new SqlDataParameter("@GoodEmail", DbType.String, DBValue.ToDBString(emailPaulstanton.GoodEmail)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region EntryForm Methods

        private EntryForm LoadEntryForm(DataRow row)
        {
            EntryForm entryForm = new EntryForm();

            // Store database values into our business object
            entryForm.EntryFormID = DBValue.ToInt32(row["entry_form_id"]);
            entryForm.EntryFormDesc = DBValue.ToString(row["entry_form_desc"]);
            entryForm.MasterTemplate = DBValue.ToString(row["master_template"]);
            entryForm.ContentTemplate = DBValue.ToString(row["content_template"]);
            entryForm.WebSiteID = DBValue.ToInt32(row["web_site_id"]);

            // return the filled object
            return entryForm;
        }

        public EntryForm[] GetEntryForms()
        {
            return GetEntryForms(null);
        }

        private EntryForm[] GetEntryForms(SqlInterface si)
        {
            EntryForm[] entryForms = null;

            string storedProcName = "efrcrm_get_entry_forms";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    entryForms = new EntryForm[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            entryForms[i] = LoadEntryForm(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return entryForms;
        }


        public EntryForm GetEntryFormByID(int id)
        {
            return GetEntryFormByID(id, null);
        }

        private EntryForm GetEntryFormByID(int id, SqlInterface si)
        {
            EntryForm entryForm = null;

            string storedProcName = "efrcrm_get_entry_form_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Entry_Form_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        entryForm = LoadEntryForm(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return entryForm;
        }


        public int InsertEntryForm(EntryForm entryForm)
        {
            return InsertEntryForm(entryForm, null);
        }

        private int InsertEntryForm(EntryForm entryForm, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_entry_form";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Entry_Form_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Entry_Form_Desc", DbType.String, DBValue.ToDBString(entryForm.EntryFormDesc)));
                paramCol.Add(new SqlDataParameter("@Master_Template", DbType.String, DBValue.ToDBString(entryForm.MasterTemplate)));
                paramCol.Add(new SqlDataParameter("@Content_Template", DbType.String, DBValue.ToDBString(entryForm.ContentTemplate)));
                paramCol.Add(new SqlDataParameter("@Web_Site_ID", DbType.Int32, DBValue.ToDBInt32(entryForm.WebSiteID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    entryForm.EntryFormID = DBValue.ToInt32(paramCol["@Entry_Form_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateEntryForm(EntryForm entryForm)
        {
            return UpdateEntryForm(entryForm, null);
        }

        private int UpdateEntryForm(EntryForm entryForm, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_entry_form";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Entry_Form_ID", DbType.Int32, DBValue.ToDBInt32(entryForm.EntryFormID)));
                paramCol.Add(new SqlDataParameter("@Entry_Form_Desc", DbType.String, DBValue.ToDBString(entryForm.EntryFormDesc)));
                paramCol.Add(new SqlDataParameter("@Master_Template", DbType.String, DBValue.ToDBString(entryForm.MasterTemplate)));
                paramCol.Add(new SqlDataParameter("@Content_Template", DbType.String, DBValue.ToDBString(entryForm.ContentTemplate)));
                paramCol.Add(new SqlDataParameter("@Web_Site_ID", DbType.Int32, DBValue.ToDBInt32(entryForm.WebSiteID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region FieldSalesManager Methods

        private FieldSalesManager LoadFieldSalesManager(DataRow row)
        {
            FieldSalesManager fieldSalesManager = new FieldSalesManager();

            // Store database values into our business object
            fieldSalesManager.FSMID = DBValue.ToInt32(row["fsm_id"]);
            fieldSalesManager.QSPID = DBValue.ToString(row["qsp_id"]);
            fieldSalesManager.AreaManagerID = DBValue.ToInt32(row["area_manager_id"]);
            fieldSalesManager.FirstName = DBValue.ToString(row["first_name"]);
            fieldSalesManager.Password = DBValue.ToString(row["password"]);
            fieldSalesManager.LastName = DBValue.ToString(row["last_name"]);
            fieldSalesManager.Email = DBValue.ToString(row["email"]);
            fieldSalesManager.HomePhone = DBValue.ToString(row["home_phone"]);
            fieldSalesManager.WorkPhone = DBValue.ToString(row["work_phone"]);
            fieldSalesManager.FaxNumber = DBValue.ToString(row["fax_number"]);
            fieldSalesManager.TollFreePhone = DBValue.ToString(row["toll_free_phone"]);
            fieldSalesManager.MobilePhone = DBValue.ToString(row["mobile_phone"]);
            fieldSalesManager.PagerPhone = DBValue.ToString(row["pager_phone"]);
            fieldSalesManager.Region = DBValue.ToString(row["region"]);

            // return the filled object
            return fieldSalesManager;
        }

        public FieldSalesManager[] GetFieldSalesManagers()
        {
            return GetFieldSalesManagers(null);
        }

        private FieldSalesManager[] GetFieldSalesManagers(SqlInterface si)
        {
            FieldSalesManager[] fieldSalesManagers = null;

            string storedProcName = "efrcrm_get_field_sales_managers";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    fieldSalesManagers = new FieldSalesManager[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            fieldSalesManagers[i] = LoadFieldSalesManager(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return fieldSalesManagers;
        }


        public FieldSalesManager GetFieldSalesManagerByID(int id)
        {
            return GetFieldSalesManagerByID(id, null);
        }

        private FieldSalesManager GetFieldSalesManagerByID(int id, SqlInterface si)
        {
            FieldSalesManager fieldSalesManager = null;

            string storedProcName = "efrcrm_get_field_sales_manager_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@FSM_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        fieldSalesManager = LoadFieldSalesManager(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return fieldSalesManager;
        }


        public int InsertFieldSalesManager(FieldSalesManager fieldSalesManager)
        {
            return InsertFieldSalesManager(fieldSalesManager, null);
        }

        private int InsertFieldSalesManager(FieldSalesManager fieldSalesManager, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_field_sales_manager";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@FSM_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@QSP_ID", DbType.String, DBValue.ToDBString(fieldSalesManager.QSPID)));
                paramCol.Add(new SqlDataParameter("@Area_Manager_ID", DbType.Int32, DBValue.ToDBInt32(fieldSalesManager.AreaManagerID)));
                paramCol.Add(new SqlDataParameter("@First_Name", DbType.String, DBValue.ToDBString(fieldSalesManager.FirstName)));
                paramCol.Add(new SqlDataParameter("@Password", DbType.String, DBValue.ToDBString(fieldSalesManager.Password)));
                paramCol.Add(new SqlDataParameter("@Last_Name", DbType.String, DBValue.ToDBString(fieldSalesManager.LastName)));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(fieldSalesManager.Email)));
                paramCol.Add(new SqlDataParameter("@Home_Phone", DbType.String, DBValue.ToDBString(fieldSalesManager.HomePhone)));
                paramCol.Add(new SqlDataParameter("@Work_Phone", DbType.String, DBValue.ToDBString(fieldSalesManager.WorkPhone)));
                paramCol.Add(new SqlDataParameter("@Fax_Number", DbType.String, DBValue.ToDBString(fieldSalesManager.FaxNumber)));
                paramCol.Add(new SqlDataParameter("@Toll_Free_Phone", DbType.String, DBValue.ToDBString(fieldSalesManager.TollFreePhone)));
                paramCol.Add(new SqlDataParameter("@Mobile_Phone", DbType.String, DBValue.ToDBString(fieldSalesManager.MobilePhone)));
                paramCol.Add(new SqlDataParameter("@Pager_Phone", DbType.String, DBValue.ToDBString(fieldSalesManager.PagerPhone)));
                paramCol.Add(new SqlDataParameter("@Region", DbType.String, DBValue.ToDBString(fieldSalesManager.Region)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    fieldSalesManager.FSMID = DBValue.ToInt32(paramCol["@FSM_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateFieldSalesManager(FieldSalesManager fieldSalesManager)
        {
            return UpdateFieldSalesManager(fieldSalesManager, null);
        }

        private int UpdateFieldSalesManager(FieldSalesManager fieldSalesManager, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_field_sales_manager";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@FSM_ID", DbType.Int32, DBValue.ToDBInt32(fieldSalesManager.FSMID)));
                paramCol.Add(new SqlDataParameter("@QSP_ID", DbType.String, DBValue.ToDBString(fieldSalesManager.QSPID)));
                paramCol.Add(new SqlDataParameter("@Area_Manager_ID", DbType.Int32, DBValue.ToDBInt32(fieldSalesManager.AreaManagerID)));
                paramCol.Add(new SqlDataParameter("@First_Name", DbType.String, DBValue.ToDBString(fieldSalesManager.FirstName)));
                paramCol.Add(new SqlDataParameter("@Password", DbType.String, DBValue.ToDBString(fieldSalesManager.Password)));
                paramCol.Add(new SqlDataParameter("@Last_Name", DbType.String, DBValue.ToDBString(fieldSalesManager.LastName)));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(fieldSalesManager.Email)));
                paramCol.Add(new SqlDataParameter("@Home_Phone", DbType.String, DBValue.ToDBString(fieldSalesManager.HomePhone)));
                paramCol.Add(new SqlDataParameter("@Work_Phone", DbType.String, DBValue.ToDBString(fieldSalesManager.WorkPhone)));
                paramCol.Add(new SqlDataParameter("@Fax_Number", DbType.String, DBValue.ToDBString(fieldSalesManager.FaxNumber)));
                paramCol.Add(new SqlDataParameter("@Toll_Free_Phone", DbType.String, DBValue.ToDBString(fieldSalesManager.TollFreePhone)));
                paramCol.Add(new SqlDataParameter("@Mobile_Phone", DbType.String, DBValue.ToDBString(fieldSalesManager.MobilePhone)));
                paramCol.Add(new SqlDataParameter("@Pager_Phone", DbType.String, DBValue.ToDBString(fieldSalesManager.PagerPhone)));
                paramCol.Add(new SqlDataParameter("@Region", DbType.String, DBValue.ToDBString(fieldSalesManager.Region)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region FlagPole Methods

        private FlagPole LoadFlagPole(DataRow row)
        {
            FlagPole flagPole = new FlagPole();

            // Store database values into our business object
            flagPole.FlagPoleID = DBValue.ToInt32(row["flag_pole_id"]);
            flagPole.MDRID = DBValue.ToString(row["mdr_id"]);

            // return the filled object
            return flagPole;
        }

        public FlagPole[] GetFlagPoles()
        {
            return GetFlagPoles(null);
        }

        private FlagPole[] GetFlagPoles(SqlInterface si)
        {
            FlagPole[] flagPoles = null;

            string storedProcName = "efrcrm_get_flag_poles";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    flagPoles = new FlagPole[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            flagPoles[i] = LoadFlagPole(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return flagPoles;
        }


        public FlagPole GetFlagPoleByID(int id)
        {
            return GetFlagPoleByID(id, null);
        }

        private FlagPole GetFlagPoleByID(int id, SqlInterface si)
        {
            FlagPole flagPole = null;

            string storedProcName = "efrcrm_get_flag_pole_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Flag_Pole_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        flagPole = LoadFlagPole(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return flagPole;
        }


        public int InsertFlagPole(FlagPole flagPole)
        {
            return InsertFlagPole(flagPole, null);
        }

        private int InsertFlagPole(FlagPole flagPole, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_flag_pole";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Flag_Pole_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@MDR_ID", DbType.String, DBValue.ToDBString(flagPole.MDRID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    flagPole.FlagPoleID = DBValue.ToInt32(paramCol["@Flag_Pole_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateFlagPole(FlagPole flagPole)
        {
            return UpdateFlagPole(flagPole, null);
        }

        private int UpdateFlagPole(FlagPole flagPole, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_flag_pole";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Flag_Pole_ID", DbType.Int32, DBValue.ToDBInt32(flagPole.FlagPoleID)));
                paramCol.Add(new SqlDataParameter("@MDR_ID", DbType.String, DBValue.ToDBString(flagPole.MDRID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region FSMAddress Methods

        private FSMAddress LoadFSMAddress(DataRow row)
        {
            FSMAddress fsmAddress = new FSMAddress();

            // Store database values into our business object
            fsmAddress.FSMAddressID = DBValue.ToInt32(row["fsm_address_id"]);
            fsmAddress.FSMID = DBValue.ToInt32(row["fsm_id"]);
            fsmAddress.CountryCode = DBValue.ToString(row["country_code"]);
            fsmAddress.StateCode = DBValue.ToString(row["state_code"]);
            fsmAddress.FSMAddressType = DBValue.ToString(row["fsm_address_type"]);
            fsmAddress.City = DBValue.ToString(row["city"]);
            fsmAddress.Zip = DBValue.ToString(row["zip"]);
            fsmAddress.StreetAddress = DBValue.ToString(row["street_address"]);

            // return the filled object
            return fsmAddress;
        }

        public FSMAddress[] GetFSMAddresss()
        {
            return GetFSMAddresss(null);
        }

        private FSMAddress[] GetFSMAddresss(SqlInterface si)
        {
            FSMAddress[] fsmAddresss = null;

            string storedProcName = "efrcrm_get_fsm_addresss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    fsmAddresss = new FSMAddress[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            fsmAddresss[i] = LoadFSMAddress(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return fsmAddresss;
        }


        public FSMAddress GetFSMAddressByID(int id)
        {
            return GetFSMAddressByID(id, null);
        }

        private FSMAddress GetFSMAddressByID(int id, SqlInterface si)
        {
            FSMAddress fsmAddress = null;

            string storedProcName = "efrcrm_get_fsm_address_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@FSM_Address_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        fsmAddress = LoadFSMAddress(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return fsmAddress;
        }


        public int InsertFSMAddress(FSMAddress fsmAddress)
        {
            return InsertFSMAddress(fsmAddress, null);
        }

        private int InsertFSMAddress(FSMAddress fsmAddress, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_fsm_address";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@FSM_Address_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@FSM_ID", DbType.Int32, DBValue.ToDBInt32(fsmAddress.FSMID)));
                paramCol.Add(new SqlDataParameter("@Country_Code", DbType.String, DBValue.ToDBString(fsmAddress.CountryCode)));
                paramCol.Add(new SqlDataParameter("@State_Code", DbType.String, DBValue.ToDBString(fsmAddress.StateCode)));
                paramCol.Add(new SqlDataParameter("@FSM_Address_Type", DbType.String, DBValue.ToDBString(fsmAddress.FSMAddressType)));
                paramCol.Add(new SqlDataParameter("@City", DbType.String, DBValue.ToDBString(fsmAddress.City)));
                paramCol.Add(new SqlDataParameter("@Zip", DbType.String, DBValue.ToDBString(fsmAddress.Zip)));
                paramCol.Add(new SqlDataParameter("@Street_Address", DbType.String, DBValue.ToDBString(fsmAddress.StreetAddress)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    fsmAddress.FSMAddressID = DBValue.ToInt32(paramCol["@FSM_Address_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateFSMAddress(FSMAddress fsmAddress)
        {
            return UpdateFSMAddress(fsmAddress, null);
        }

        private int UpdateFSMAddress(FSMAddress fsmAddress, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_fsm_address";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@FSM_Address_ID", DbType.Int32, DBValue.ToDBInt32(fsmAddress.FSMAddressID)));
                paramCol.Add(new SqlDataParameter("@FSM_ID", DbType.Int32, DBValue.ToDBInt32(fsmAddress.FSMID)));
                paramCol.Add(new SqlDataParameter("@Country_Code", DbType.String, DBValue.ToDBString(fsmAddress.CountryCode)));
                paramCol.Add(new SqlDataParameter("@State_Code", DbType.String, DBValue.ToDBString(fsmAddress.StateCode)));
                paramCol.Add(new SqlDataParameter("@FSM_Address_Type", DbType.String, DBValue.ToDBString(fsmAddress.FSMAddressType)));
                paramCol.Add(new SqlDataParameter("@City", DbType.String, DBValue.ToDBString(fsmAddress.City)));
                paramCol.Add(new SqlDataParameter("@Zip", DbType.String, DBValue.ToDBString(fsmAddress.Zip)));
                paramCol.Add(new SqlDataParameter("@Street_Address", DbType.String, DBValue.ToDBString(fsmAddress.StreetAddress)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region GeneralComment Methods

        private GeneralComment LoadGeneralComment(DataRow row)
        {
            GeneralComment generalComment = new GeneralComment();

            // Store database values into our business object
            generalComment.GeneralCommentId = DBValue.ToInt32(row["general_comment_id"]);
            generalComment.LeadId = DBValue.ToInt32(row["lead_id"]);
            generalComment.SalesId = DBValue.ToInt32(row["sales_id"]);
            generalComment.EntryDate = DBValue.ToDateTime(row["entry_date"]);
            generalComment.GeneralCommentValue = DBValue.ToString(row["general_comment"]);
            generalComment.UserName = DBValue.ToString(row["user_name"]);
            generalComment.DepartmentID = DBValue.ToInt32(row["department_id"]);

            // return the filled object
            return generalComment;
        }

        public GeneralComment[] GetGeneralComments()
        {
            return GetGeneralComments(null);
        }

        private GeneralComment[] GetGeneralComments(SqlInterface si)
        {
            GeneralComment[] generalComments = null;

            string storedProcName = "efrcrm_get_general_comments";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    generalComments = new GeneralComment[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            generalComments[i] = LoadGeneralComment(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return generalComments;
        }


        public GeneralComment GetGeneralCommentByID(int id)
        {
            return GetGeneralCommentByID(id, null);
        }

        private GeneralComment GetGeneralCommentByID(int id, SqlInterface si)
        {
            GeneralComment generalComment = null;

            string storedProcName = "efrcrm_get_general_comment_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@General_Comment_Id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        generalComment = LoadGeneralComment(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return generalComment;
        }


        public int InsertGeneralComment(GeneralComment generalComment)
        {
            return InsertGeneralComment(generalComment, null);
        }

        private int InsertGeneralComment(GeneralComment generalComment, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_general_comment";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@General_Comment_Id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Lead_Id", DbType.Int32, DBValue.ToDBInt32(generalComment.LeadId)));
                paramCol.Add(new SqlDataParameter("@Sales_Id", DbType.Int32, DBValue.ToDBInt32(generalComment.SalesId)));
                paramCol.Add(new SqlDataParameter("@Entry_Date", DbType.DateTime, DBValue.ToDBDateTime(generalComment.EntryDate)));
                paramCol.Add(new SqlDataParameter("@General_Comment", DbType.String, DBValue.ToDBString(generalComment.GeneralCommentValue)));
                paramCol.Add(new SqlDataParameter("@User_Name", DbType.String, DBValue.ToDBString(generalComment.UserName)));
                paramCol.Add(new SqlDataParameter("@Department_ID", DbType.Int32, DBValue.ToDBInt32(generalComment.DepartmentID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    generalComment.GeneralCommentId = DBValue.ToInt32(paramCol["@General_Comment_Id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateGeneralComment(GeneralComment generalComment)
        {
            return UpdateGeneralComment(generalComment, null);
        }

        private int UpdateGeneralComment(GeneralComment generalComment, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_general_comment";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@General_Comment_Id", DbType.Int32, DBValue.ToDBInt32(generalComment.GeneralCommentId)));
                paramCol.Add(new SqlDataParameter("@Lead_Id", DbType.Int32, DBValue.ToDBInt32(generalComment.LeadId)));
                paramCol.Add(new SqlDataParameter("@Sales_Id", DbType.Int32, DBValue.ToDBInt32(generalComment.SalesId)));
                paramCol.Add(new SqlDataParameter("@Entry_Date", DbType.DateTime, DBValue.ToDBDateTime(generalComment.EntryDate)));
                paramCol.Add(new SqlDataParameter("@General_Comment", DbType.String, DBValue.ToDBString(generalComment.GeneralCommentValue)));
                paramCol.Add(new SqlDataParameter("@User_Name", DbType.String, DBValue.ToDBString(generalComment.UserName)));
                paramCol.Add(new SqlDataParameter("@Department_ID", DbType.Int32, DBValue.ToDBInt32(generalComment.DepartmentID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region GLTable Methods

        private GLTable LoadGLTable(DataRow row)
        {
            GLTable glTable = new GLTable();

            // Store database values into our business object
            glTable.GLCode = DBValue.ToString(row["gl_code"]);
            glTable.Description = DBValue.ToString(row["description"]);
            glTable.GLAccountNo = DBValue.ToString(row["gl_account_no"]);
            glTable.DebitCredit = DBValue.ToString(row["debit_credit"]);

            // return the filled object
            return glTable;
        }

        public GLTable[] GetGLTables()
        {
            return GetGLTables(null);
        }

        private GLTable[] GetGLTables(SqlInterface si)
        {
            GLTable[] glTables = null;

            string storedProcName = "efrcrm_get_gl_tables";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    glTables = new GLTable[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            glTables[i] = LoadGLTable(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return glTables;
        }



        #endregion

        #region Grabber Methods

        private Grabber LoadGrabber(DataRow row)
        {
            Grabber grabber = new Grabber();

            // Store database values into our business object
            grabber.GrabberId = DBValue.ToInt32(row["grabber_id"]);
            grabber.GrabberDesc = DBValue.ToString(row["grabber_desc"]);

            // return the filled object
            return grabber;
        }

        public Grabber[] GetGrabbers()
        {
            return GetGrabbers(null);
        }

        private Grabber[] GetGrabbers(SqlInterface si)
        {
            Grabber[] grabbers = null;

            string storedProcName = "efrcrm_get_grabbers";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    grabbers = new Grabber[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            grabbers[i] = LoadGrabber(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return grabbers;
        }


        public Grabber GetGrabberByID(int id)
        {
            return GetGrabberByID(id, null);
        }

        private Grabber GetGrabberByID(int id, SqlInterface si)
        {
            Grabber grabber = null;

            string storedProcName = "efrcrm_get_grabber_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Grabber_Id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        grabber = LoadGrabber(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return grabber;
        }


        public int InsertGrabber(Grabber grabber)
        {
            return InsertGrabber(grabber, null);
        }

        private int InsertGrabber(Grabber grabber, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_grabber";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Grabber_Id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Grabber_Desc", DbType.String, DBValue.ToDBString(grabber.GrabberDesc)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    grabber.GrabberId = DBValue.ToInt32(paramCol["@Grabber_Id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateGrabber(Grabber grabber)
        {
            return UpdateGrabber(grabber, null);
        }

        private int UpdateGrabber(Grabber grabber, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_grabber";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Grabber_Id", DbType.Int32, DBValue.ToDBInt32(grabber.GrabberId)));
                paramCol.Add(new SqlDataParameter("@Grabber_Desc", DbType.String, DBValue.ToDBString(grabber.GrabberDesc)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region GroupType Methods

        private GroupType LoadGroupType(DataRow row)
        {
            GroupType groupType = new GroupType();

            // Store database values into our business object
            groupType.GroupTypeId = DBValue.ToInt16(row["group_type_id"]);
            groupType.PartyTypeId = DBValue.ToInt16(row["party_type_id"]);
            groupType.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return groupType;
        }
        public GroupType GetGroupTypeByLeadID(int leadID)
        {
            return GetGroupTypeByLeadID(leadID, null);
        }
        private GroupType GetGroupTypeByLeadID(int leadID, SqlInterface si)
        {
            string storedProcName = "efrcrm_get_group_type_by_lead_id";
            GroupType groupTypes = null;

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;

            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@leadid", DbType.Int32, DBValue.ToInt32(leadID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {

                    // fill our objects
                    try
                    {
                        groupTypes = LoadGroupType(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message.ToString());
            }
            finally
            {
                if (newConnection)
                {
                    si.Close();
                }
            }
            return groupTypes;
        }
        public GroupType[] GetGroupTypes()
        {
            return GetGroupTypes(null);
        }

        private GroupType[] GetGroupTypes(SqlInterface si)
        {
            GroupType[] groupTypes = null;

            string storedProcName = "efrcrm_get_group_types";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    groupTypes = new GroupType[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            groupTypes[i] = LoadGroupType(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return groupTypes;
        }



        #endregion

        #region GroupTypeDesc Methods

        private GroupTypeDesc LoadGroupTypeDesc(DataRow row)
        {
            GroupTypeDesc groupTypeDesc = new GroupTypeDesc();

            // Store database values into our business object
            groupTypeDesc.GroupTypeId = DBValue.ToInt16(row["group_type_id"]);
            groupTypeDesc.LanguageId = DBValue.ToInt16(row["language_id"]);
            groupTypeDesc.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return groupTypeDesc;
        }

        public GroupTypeDesc[] GetGroupTypeDescs()
        {
            return GetGroupTypeDescs(null);
        }

        private GroupTypeDesc[] GetGroupTypeDescs(SqlInterface si)
        {
            GroupTypeDesc[] groupTypeDescs = null;

            string storedProcName = "efrcrm_get_group_type_descs";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    groupTypeDescs = new GroupTypeDesc[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            groupTypeDescs[i] = LoadGroupTypeDesc(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return groupTypeDescs;
        }



        #endregion

        #region HarmonyListTransfer Methods

        private HarmonyListTransfer LoadHarmonyListTransfer(DataRow row)
        {
            HarmonyListTransfer harmonyListTransfer = new HarmonyListTransfer();

            // Store database values into our business object
            harmonyListTransfer.Id = DBValue.ToInt32(row["id"]);
            harmonyListTransfer.ListName = DBValue.ToString(row["list_name"]);
            harmonyListTransfer.ListDesc = DBValue.ToString(row["list_desc"]);

            // return the filled object
            return harmonyListTransfer;
        }

        public HarmonyListTransfer[] GetHarmonyListTransfers()
        {
            return GetHarmonyListTransfers(null);
        }

        private HarmonyListTransfer[] GetHarmonyListTransfers(SqlInterface si)
        {
            HarmonyListTransfer[] harmonyListTransfers = null;

            string storedProcName = "efrcrm_get_harmony_list_transfers";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    harmonyListTransfers = new HarmonyListTransfer[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            harmonyListTransfers[i] = LoadHarmonyListTransfer(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return harmonyListTransfers;
        }


        public HarmonyListTransfer GetHarmonyListTransferByID(int id)
        {
            return GetHarmonyListTransferByID(id, null);
        }

        private HarmonyListTransfer GetHarmonyListTransferByID(int id, SqlInterface si)
        {
            HarmonyListTransfer harmonyListTransfer = null;

            string storedProcName = "efrcrm_get_harmony_list_transfer_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        harmonyListTransfer = LoadHarmonyListTransfer(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return harmonyListTransfer;
        }


        public int InsertHarmonyListTransfer(HarmonyListTransfer harmonyListTransfer)
        {
            return InsertHarmonyListTransfer(harmonyListTransfer, null);
        }

        private int InsertHarmonyListTransfer(HarmonyListTransfer harmonyListTransfer, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_harmony_list_transfer";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@List_name", DbType.String, DBValue.ToDBString(harmonyListTransfer.ListName)));
                paramCol.Add(new SqlDataParameter("@List_desc", DbType.String, DBValue.ToDBString(harmonyListTransfer.ListDesc)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    harmonyListTransfer.Id = DBValue.ToInt32(paramCol["@Id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateHarmonyListTransfer(HarmonyListTransfer harmonyListTransfer)
        {
            return UpdateHarmonyListTransfer(harmonyListTransfer, null);
        }

        private int UpdateHarmonyListTransfer(HarmonyListTransfer harmonyListTransfer, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_harmony_list_transfer";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Id", DbType.Int32, DBValue.ToDBInt32(harmonyListTransfer.Id)));
                paramCol.Add(new SqlDataParameter("@List_name", DbType.String, DBValue.ToDBString(harmonyListTransfer.ListName)));
                paramCol.Add(new SqlDataParameter("@List_desc", DbType.String, DBValue.ToDBString(harmonyListTransfer.ListDesc)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region HearAboutUs Methods

        private HearAboutUs LoadHearAboutUs(DataRow row)
        {
            HearAboutUs hearAboutUs = new HearAboutUs();

            // Store database values into our business object
            hearAboutUs.HearId = DBValue.ToInt16(row["hear_id"]);
            hearAboutUs.PartyTypeId = DBValue.ToInt16(row["party_type_id"]);
            hearAboutUs.Name = DBValue.ToString(row["name"]);
            hearAboutUs.OrderOnWeb = DBValue.ToInt16(row["order_on_web"]);
            hearAboutUs.IsActive = DBValue.ToInt32(row["is_active"]);

            // return the filled object
            return hearAboutUs;
        }

        public HearAboutUs[] GetHearAboutUss()
        {
            return GetHearAboutUss(null);
        }

        private HearAboutUs[] GetHearAboutUss(SqlInterface si)
        {
            HearAboutUs[] hearAboutUss = null;

            string storedProcName = "efrcrm_get_hear_about_uss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    hearAboutUss = new HearAboutUs[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            hearAboutUss[i] = LoadHearAboutUs(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return hearAboutUss;
        }



        #endregion

        #region HearAboutUsDesc Methods

        private HearAboutUsDesc LoadHearAboutUsDesc(DataRow row)
        {
            HearAboutUsDesc hearAboutUsDesc = new HearAboutUsDesc();

            // Store database values into our business object
            hearAboutUsDesc.HearId = DBValue.ToInt16(row["hear_id"]);
            hearAboutUsDesc.LanguageId = DBValue.ToInt16(row["language_id"]);
            hearAboutUsDesc.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return hearAboutUsDesc;
        }

        public HearAboutUsDesc[] GetHearAboutUsDescs()
        {
            return GetHearAboutUsDescs(null);
        }

        private HearAboutUsDesc[] GetHearAboutUsDescs(SqlInterface si)
        {
            HearAboutUsDesc[] hearAboutUsDescs = null;

            string storedProcName = "efrcrm_get_hear_about_us_descs";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    hearAboutUsDescs = new HearAboutUsDesc[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            hearAboutUsDescs[i] = LoadHearAboutUsDesc(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return hearAboutUsDescs;
        }



        #endregion

        #region InventoryAdjustment Methods

        private InventoryAdjustment LoadInventoryAdjustment(DataRow row)
        {
            InventoryAdjustment inventoryAdjustment = new InventoryAdjustment();

            // Store database values into our business object
            inventoryAdjustment.InventoryAdjustmentID = DBValue.ToInt32(row["inventory_adjustment_id"]);
            inventoryAdjustment.InventoryAdjustmentTypeID = DBValue.ToInt32(row["inventory_adjustment_type_id"]);
            inventoryAdjustment.ScratchBookId = DBValue.ToInt32(row["scratch_book_id"]);
            inventoryAdjustment.AdjustmentDate = DBValue.ToDateTime(row["adjustment_date"]);
            inventoryAdjustment.Quantity = DBValue.ToInt32(row["quantity"]);

            // return the filled object
            return inventoryAdjustment;
        }

        public InventoryAdjustment[] GetInventoryAdjustments()
        {
            return GetInventoryAdjustments(null);
        }

        private InventoryAdjustment[] GetInventoryAdjustments(SqlInterface si)
        {
            InventoryAdjustment[] inventoryAdjustments = null;

            string storedProcName = "efrcrm_get_inventory_adjustments";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    inventoryAdjustments = new InventoryAdjustment[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            inventoryAdjustments[i] = LoadInventoryAdjustment(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return inventoryAdjustments;
        }


        public InventoryAdjustment GetInventoryAdjustmentByID(int id)
        {
            return GetInventoryAdjustmentByID(id, null);
        }

        private InventoryAdjustment GetInventoryAdjustmentByID(int id, SqlInterface si)
        {
            InventoryAdjustment inventoryAdjustment = null;

            string storedProcName = "efrcrm_get_inventory_adjustment_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Inventory_Adjustment_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        inventoryAdjustment = LoadInventoryAdjustment(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return inventoryAdjustment;
        }


        public int InsertInventoryAdjustment(InventoryAdjustment inventoryAdjustment)
        {
            return InsertInventoryAdjustment(inventoryAdjustment, null);
        }

        private int InsertInventoryAdjustment(InventoryAdjustment inventoryAdjustment, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_inventory_adjustment";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Inventory_Adjustment_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Inventory_Adjustment_Type_ID", DbType.Int32, DBValue.ToDBInt32(inventoryAdjustment.InventoryAdjustmentTypeID)));
                paramCol.Add(new SqlDataParameter("@Scratch_Book_Id", DbType.Int32, DBValue.ToDBInt32(inventoryAdjustment.ScratchBookId)));
                paramCol.Add(new SqlDataParameter("@Adjustment_Date", DbType.DateTime, DBValue.ToDBDateTime(inventoryAdjustment.AdjustmentDate)));
                paramCol.Add(new SqlDataParameter("@Quantity", DbType.Int32, DBValue.ToDBInt32(inventoryAdjustment.Quantity)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    inventoryAdjustment.InventoryAdjustmentID = DBValue.ToInt32(paramCol["@Inventory_Adjustment_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateInventoryAdjustment(InventoryAdjustment inventoryAdjustment)
        {
            return UpdateInventoryAdjustment(inventoryAdjustment, null);
        }

        private int UpdateInventoryAdjustment(InventoryAdjustment inventoryAdjustment, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_inventory_adjustment";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Inventory_Adjustment_ID", DbType.Int32, DBValue.ToDBInt32(inventoryAdjustment.InventoryAdjustmentID)));
                paramCol.Add(new SqlDataParameter("@Inventory_Adjustment_Type_ID", DbType.Int32, DBValue.ToDBInt32(inventoryAdjustment.InventoryAdjustmentTypeID)));
                paramCol.Add(new SqlDataParameter("@Scratch_Book_Id", DbType.Int32, DBValue.ToDBInt32(inventoryAdjustment.ScratchBookId)));
                paramCol.Add(new SqlDataParameter("@Adjustment_Date", DbType.DateTime, DBValue.ToDBDateTime(inventoryAdjustment.AdjustmentDate)));
                paramCol.Add(new SqlDataParameter("@Quantity", DbType.Int32, DBValue.ToDBInt32(inventoryAdjustment.Quantity)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region InventoryAdjustmentType Methods

        private InventoryAdjustmentType LoadInventoryAdjustmentType(DataRow row)
        {
            InventoryAdjustmentType inventoryAdjustmentType = new InventoryAdjustmentType();

            // Store database values into our business object
            inventoryAdjustmentType.InventoryAdjustmentTypeID = DBValue.ToInt32(row["inventory_adjustment_type_id"]);
            inventoryAdjustmentType.InventoryAdjustmentTypeDesc = DBValue.ToString(row["inventory_adjustment_type_desc"]);

            // return the filled object
            return inventoryAdjustmentType;
        }

        public InventoryAdjustmentType[] GetInventoryAdjustmentTypes()
        {
            return GetInventoryAdjustmentTypes(null);
        }

        private InventoryAdjustmentType[] GetInventoryAdjustmentTypes(SqlInterface si)
        {
            InventoryAdjustmentType[] inventoryAdjustmentTypes = null;

            string storedProcName = "efrcrm_get_inventory_adjustment_types";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    inventoryAdjustmentTypes = new InventoryAdjustmentType[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            inventoryAdjustmentTypes[i] = LoadInventoryAdjustmentType(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return inventoryAdjustmentTypes;
        }


        public InventoryAdjustmentType GetInventoryAdjustmentTypeByID(int id)
        {
            return GetInventoryAdjustmentTypeByID(id, null);
        }

        private InventoryAdjustmentType GetInventoryAdjustmentTypeByID(int id, SqlInterface si)
        {
            InventoryAdjustmentType inventoryAdjustmentType = null;

            string storedProcName = "efrcrm_get_inventory_adjustment_type_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Inventory_Adjustment_Type_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        inventoryAdjustmentType = LoadInventoryAdjustmentType(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return inventoryAdjustmentType;
        }


        public int InsertInventoryAdjustmentType(InventoryAdjustmentType inventoryAdjustmentType)
        {
            return InsertInventoryAdjustmentType(inventoryAdjustmentType, null);
        }

        private int InsertInventoryAdjustmentType(InventoryAdjustmentType inventoryAdjustmentType, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_inventory_adjustment_type";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Inventory_Adjustment_Type_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Inventory_Adjustment_Type_Desc", DbType.String, DBValue.ToDBString(inventoryAdjustmentType.InventoryAdjustmentTypeDesc)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    inventoryAdjustmentType.InventoryAdjustmentTypeID = DBValue.ToInt32(paramCol["@Inventory_Adjustment_Type_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateInventoryAdjustmentType(InventoryAdjustmentType inventoryAdjustmentType)
        {
            return UpdateInventoryAdjustmentType(inventoryAdjustmentType, null);
        }

        private int UpdateInventoryAdjustmentType(InventoryAdjustmentType inventoryAdjustmentType, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_inventory_adjustment_type";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Inventory_Adjustment_Type_ID", DbType.Int32, DBValue.ToDBInt32(inventoryAdjustmentType.InventoryAdjustmentTypeID)));
                paramCol.Add(new SqlDataParameter("@Inventory_Adjustment_Type_Desc", DbType.String, DBValue.ToDBString(inventoryAdjustmentType.InventoryAdjustmentTypeDesc)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region JavaErrors Methods

        private JavaErrors LoadJavaErrors(DataRow row)
        {
            JavaErrors javaErrors = new JavaErrors();

            // Store database values into our business object
            javaErrors.ErrorID = DBValue.ToInt32(row["error_id"]);
            javaErrors.ClassName = DBValue.ToString(row["class_name"]);
            javaErrors.ErrorMessage = DBValue.ToString(row["error_message"]);
            javaErrors.ErrorDate = DBValue.ToDateTime(row["error_date"]);

            // return the filled object
            return javaErrors;
        }

        public JavaErrors[] GetJavaErrorss()
        {
            return GetJavaErrorss(null);
        }

        private JavaErrors[] GetJavaErrorss(SqlInterface si)
        {
            JavaErrors[] javaErrorss = null;

            string storedProcName = "efrcrm_get_java_errorss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    javaErrorss = new JavaErrors[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            javaErrorss[i] = LoadJavaErrors(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return javaErrorss;
        }


        public JavaErrors GetJavaErrorsByID(int id)
        {
            return GetJavaErrorsByID(id, null);
        }

        private JavaErrors GetJavaErrorsByID(int id, SqlInterface si)
        {
            JavaErrors javaErrors = null;

            string storedProcName = "efrcrm_get_java_errors_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Error_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        javaErrors = LoadJavaErrors(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return javaErrors;
        }


        public int InsertJavaErrors(JavaErrors javaErrors)
        {
            return InsertJavaErrors(javaErrors, null);
        }

        private int InsertJavaErrors(JavaErrors javaErrors, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_java_errors";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Error_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Class_Name", DbType.String, DBValue.ToDBString(javaErrors.ClassName)));
                paramCol.Add(new SqlDataParameter("@Error_Message", DbType.String, DBValue.ToDBString(javaErrors.ErrorMessage)));
                paramCol.Add(new SqlDataParameter("@Error_Date", DbType.DateTime, DBValue.ToDBDateTime(javaErrors.ErrorDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    javaErrors.ErrorID = DBValue.ToInt32(paramCol["@Error_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateJavaErrors(JavaErrors javaErrors)
        {
            return UpdateJavaErrors(javaErrors, null);
        }

        private int UpdateJavaErrors(JavaErrors javaErrors, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_java_errors";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Error_ID", DbType.Int32, DBValue.ToDBInt32(javaErrors.ErrorID)));
                paramCol.Add(new SqlDataParameter("@Class_Name", DbType.String, DBValue.ToDBString(javaErrors.ClassName)));
                paramCol.Add(new SqlDataParameter("@Error_Message", DbType.String, DBValue.ToDBString(javaErrors.ErrorMessage)));
                paramCol.Add(new SqlDataParameter("@Error_Date", DbType.DateTime, DBValue.ToDBDateTime(javaErrors.ErrorDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region KitType Methods

        private KitType LoadKitType(DataRow row)
        {
            KitType kitType = new KitType();

            // Store database values into our business object
            kitType.KitTypeID = DBValue.ToInt32(row["kit_type_id"]);
            kitType.Description = DBValue.ToString(row["description"]);
            kitType.DeliveryTime = DBValue.ToDateTime(row["delivery_time"]);
            kitType.Comments = DBValue.ToString(row["comments"]);
            kitType.IsDefault = DBValue.ToInt32(row["is_default"]);

            // return the filled object
            return kitType;
        }

        public KitType[] GetKitTypes()
        {
            return GetKitTypes(null);
        }

        private KitType[] GetKitTypes(SqlInterface si)
        {
            KitType[] kitTypes = null;

            string storedProcName = "efrcrm_get_kit_types";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    kitTypes = new KitType[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            kitTypes[i] = LoadKitType(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return kitTypes;
        }
        public KitType[] GetKitTypesActive()
        {
            return GetKitTypesActive(null);
        }

        private KitType[] GetKitTypesActive(SqlInterface si)
        {
            KitType[] kitTypes = null;

            string storedProcName = "efrcrm_get_kit_types_active";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    kitTypes = new KitType[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            kitTypes[i] = LoadKitType(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return kitTypes;
        }
        //  dbo.efrcrm_get_kit_type_by_lead_information
        public KitType GetKitTypeByID(int id)
        {
            return GetKitTypeByID(id, null);
        }

        private KitType GetKitTypeByID(int id, SqlInterface si)
        {
            KitType kitType = null;

            string storedProcName = "efrcrm_get_kit_type_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Kit_Type_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        kitType = LoadKitType(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return kitType;
        }

        public KitType GetProperKitTypeFromLeadInformation(int consultantId, string channelCode, int promotionId, int partnerId, string stateCode, string countryCode)
        {
            return GetProperKitTypeFromLeadInformation(int.MinValue, consultantId, channelCode, promotionId, partnerId, stateCode, countryCode, null);
        }

        //overloaded method for new get kit type form - Farrell
        public KitType GetProperKitTypeFromLeadInformation(int kittype, int consultantId, string channelCode, int promotionId, int partnerId, string stateCode, string countryCode)
        {
            return GetProperKitTypeFromLeadInformation(kittype, consultantId, channelCode, promotionId, partnerId, stateCode, countryCode, null);
        }

        //private KitType GetProperKitTypeFromLeadInformation(int consultantId, string channelCode, int promotionId, int partnerId, string stateCode, string countryCode, SqlInterface si)
        //{
        //    KitType kitType = null;

        //    string storedProcName = "efrcrm_get_kit_type_by_lead_information";

        //    // if the SqlInterface is passed as argument it means that 
        //    // this call should be applied to an already open connection
        //    // and the method which call this method is using transaction
        //    bool newConnection = true;
        //    if (si == null)
        //    {
        //        si = new SqlInterface(dataProvider, connectionString);
        //    }
        //    else
        //    {
        //        newConnection = false;
        //    }

        //    try
        //    {
        //        // declare stored procedure parameters
        //        SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
        //        paramCol.Add(new SqlDataParameter("@consultant_id ", DbType.Int32, DBValue.ToDBInt32(consultantId)));
        //        paramCol.Add(new SqlDataParameter("@channel_code", DbType.String, DBValue.ToDBString(channelCode)));
        //        paramCol.Add(new SqlDataParameter("@promotion_id", DbType.Int32, DBValue.ToDBInt32(promotionId)));
        //        paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32(partnerId)));
        //        paramCol.Add(new SqlDataParameter("@state_code", DbType.String, DBValue.ToDBString(stateCode)));
        //        paramCol.Add(new SqlDataParameter("@country_code", DbType.String, DBValue.ToDBString(countryCode)));

        //        if (newConnection)
        //        {
        //            // open the connection
        //            si.Open();
        //        }

        //        DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

        //        if (dt != null && dt.Rows.Count > 0)
        //        {
        //            // fill our objects
        //            try
        //            {
        //                kitType = LoadKitType(dt.Rows[0]);
        //            }
        //            catch (Exception ex)
        //            {
        //                throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
        //            }
        //        }

        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }

        //    finally
        //    {
        //        if (newConnection)
        //        {
        //            // Always close connection.
        //            si.Close();
        //        }
        //    }
        //    return kitType;
        //}

        private KitType GetProperKitTypeFromLeadInformation(int kittype, int consultantId, string channelCode, int promotionId, int partnerId, string stateCode, string countryCode, SqlInterface si)
        {
            KitType kitType = null;

            string storedProcName = "efrcrm_get_kit_type_by_lead_information";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@kit_type_id ", DbType.Int32, DBValue.ToDBInt32(kittype)));
                paramCol.Add(new SqlDataParameter("@consultant_id ", DbType.Int32, DBValue.ToDBInt32(consultantId)));
                paramCol.Add(new SqlDataParameter("@channel_code", DbType.String, DBValue.ToDBString(channelCode)));
                paramCol.Add(new SqlDataParameter("@promotion_id", DbType.Int32, DBValue.ToDBInt32(promotionId)));
                paramCol.Add(new SqlDataParameter("@partner_id", DbType.Int32, DBValue.ToDBInt32(partnerId)));
                paramCol.Add(new SqlDataParameter("@state_code", DbType.String, DBValue.ToDBString(stateCode)));
                paramCol.Add(new SqlDataParameter("@country_code", DbType.String, DBValue.ToDBString(countryCode)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        kitType = LoadKitType(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }

            }
            catch (Exception ex)
            {
                throw ex;
            }

            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return kitType;
        }





        public int InsertKitType(KitType kitType)
        {
            return InsertKitType(kitType, null);
        }

        private int InsertKitType(KitType kitType, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_kit_type";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Kit_Type_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(kitType.Description)));
                paramCol.Add(new SqlDataParameter("@Delivery_Time", DbType.DateTime, DBValue.ToDBDateTime(kitType.DeliveryTime)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(kitType.Comments)));
                paramCol.Add(new SqlDataParameter("@Is_Default", DbType.Int32, DBValue.ToDBInt32(kitType.IsDefault)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    kitType.KitTypeID = DBValue.ToInt32(paramCol["@Kit_Type_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateKitType(KitType kitType)
        {
            return UpdateKitType(kitType, null);
        }

        private int UpdateKitType(KitType kitType, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_kit_type";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Kit_Type_ID", DbType.Int32, DBValue.ToDBInt32(kitType.KitTypeID)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(kitType.Description)));
                paramCol.Add(new SqlDataParameter("@Delivery_Time", DbType.DateTime, DBValue.ToDBDateTime(kitType.DeliveryTime)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(kitType.Comments)));
                paramCol.Add(new SqlDataParameter("@Is_Default", DbType.Int32, DBValue.ToDBInt32(kitType.IsDefault)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region LanguageDesc Methods

        private LanguageDesc LoadLanguageDesc(DataRow row)
        {
            LanguageDesc languageDesc = new LanguageDesc();

            // Store database values into our business object
            languageDesc.LanguageId = DBValue.ToInt16(row["language_id"]);
            languageDesc.DisplayLanguageId = DBValue.ToInt16(row["display_language_id"]);
            languageDesc.LanguageName = DBValue.ToString(row["language_name"]);

            // return the filled object
            return languageDesc;
        }

        public LanguageDesc[] GetLanguageDescs()
        {
            return GetLanguageDescs(null);
        }

        private LanguageDesc[] GetLanguageDescs(SqlInterface si)
        {
            LanguageDesc[] languageDescs = null;

            string storedProcName = "efrcrm_get_language_descs";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    languageDescs = new LanguageDesc[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            languageDescs[i] = LoadLanguageDesc(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return languageDescs;
        }



        #endregion

        #region Languages Methods

        private Languages LoadLanguages(DataRow row)
        {
            Languages languages = new Languages();

            // Store database values into our business object
            languages.LanguageId = DBValue.ToInt16(row["language_id"]);
            languages.LanguageName = DBValue.ToString(row["language_name"]);
            languages.LongLanguageCode = DBValue.ToString(row["long_language_code"]);
            languages.ShortLanguageCode = DBValue.ToString(row["short_language_code"]);

            // return the filled object
            return languages;
        }

        public Languages[] GetLanguagess()
        {
            return GetLanguagess(null);
        }

        private Languages[] GetLanguagess(SqlInterface si)
        {
            Languages[] languagess = null;

            string storedProcName = "efrcrm_get_languagess";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    languagess = new Languages[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            languagess[i] = LoadLanguages(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return languagess;
        }



        #endregion

        #region Lead Methods

        private Lead LoadLead(DataRow row)
        {
            Lead lead = new Lead();

            // Store database values into our business object
            lead.LeadId = DBValue.ToInt32(row["lead_id"]);
            lead.LeadStatusId = DBValue.ToInt32(row["lead_status_id"]);
            lead.LeadQualificationTypeId = DBValue.ToInt32(row["lead_qualification_type_id"]);
            lead.LeadPriorityId = DBValue.ToInt32(row["lead_priority_id"]);
            lead.TempLeadId = DBValue.ToInt32(row["temp_lead_id"]);
            lead.DivisionId = DBValue.ToInt16(row["division_id"]);
            lead.PromotionId = DBValue.ToInt32(row["promotion_id"]);
            lead.ChannelCode = DBValue.ToString(row["channel_code"]);
            lead.ConsultantId = DBValue.ToInt32(row["consultant_id"]);
            lead.GroupTypeId = DBValue.ToInt16(row["group_type_id"]);
            lead.OrganizationTypeId = DBValue.ToInt16(row["organization_type_id"]);
            lead.HearId = DBValue.ToInt16(row["hear_id"]);
            lead.FkKitTypeId = DBValue.ToInt32(row["fk_kit_type_id"]);
            lead.OldLeadId = DBValue.ToInt32(row["old_lead_id"]);
            lead.AssignerId = DBValue.ToInt32(row["assigner_id"]);
            lead.RefereeId = DBValue.ToInt32(row["referee_id"]);
            lead.TitleId = DBValue.ToInt16(row["title_id"]);
            lead.CampaignReasonId = DBValue.ToInt16(row["campaign_reason_id"]);
            lead.WebSiteId = DBValue.ToInt32(row["web_site_id"]);
            lead.PromotionCodeId = DBValue.ToInt32(row["promotion_code_id"]);
            lead.ActivityClosingReasonId = DBValue.ToInt16(row["activity_closing_reason_id"]);
            lead.ExtConsultantId = DBValue.ToInt32(row["ext_consultant_id"]);
            lead.Salutation = DBValue.ToString(row["salutation"]);
            lead.FirstName = DBValue.ToString(row["first_name"]);
            lead.LastName = DBValue.ToString(row["last_name"]);
            lead.Organization = DBValue.ToString(row["organization"]);
            lead.StreetAddress = DBValue.ToString(row["street_address"]);
            lead.City = DBValue.ToString(row["city"]);
            lead.StateCode = DBValue.ToString(row["state_code"]);
            lead.CountryCode = DBValue.ToString(row["country_code"]);
            lead.ZipCode = DBValue.ToString(row["zip_code"]);
            lead.DayPhone = DBValue.ToString(row["day_phone"]);
            lead.DayTimeCall = DBValue.ToString(row["day_time_call"]);
            lead.EveningPhone = DBValue.ToString(row["evening_phone"]);
            lead.EveningTimeCall = DBValue.ToString(row["evening_time_call"]);
            lead.Fax = DBValue.ToString(row["fax"]);
            lead.Email = DBValue.ToString(row["email"]);
            lead.LeadEntryDate = DBValue.ToDateTime(row["lead_entry_date"]);
            lead.MemberCount = DBValue.ToInt32(row["member_count"]);
            lead.ParticipantCount = DBValue.ToInt32(row["participant_count"]);
            lead.FundRaisingGoal = DBValue.ToInt32(row["fund_raising_goal"]);
            lead.DecisionDate = DBValue.ToDateTime(row["decision_date"]);
            lead.DecisionMaker = DBValue.ToBoolean(row["decision_maker"]);
            lead.CommitteeMeetingRequired = DBValue.ToBoolean(row["committee_meeting_required"]);
            lead.CommitteeMeetingDate = DBValue.ToDateTime(row["committee_meeting_date"]);
            lead.FundRaiserStartDate = DBValue.ToDateTime(row["fund_raiser_start_date"]);
            lead.Onemaillist = DBValue.ToBoolean(row["onemaillist"]);
            lead.Faxkit = DBValue.ToBoolean(row["faxkit"]);
            lead.Emailkit = DBValue.ToBoolean(row["emailkit"]);
            lead.Comments = DBValue.ToString(row["comments"]);
            lead.KitToSend = DBValue.ToBoolean(row["kit_to_send"]);
            lead.KitSent = DBValue.ToBoolean(row["kit_sent"]);
            lead.KitSentDate = DBValue.ToDateTime(row["kit_sent_date"]);
            lead.LeadAssignmentDate = DBValue.ToDateTime(row["lead_assignment_date"]);
            lead.Interests = DBValue.ToString(row["interests"]);
            lead.HasBeenContacted = DBValue.ToBoolean(row["has_been_contacted"]);
            lead.DayPhoneExt = DBValue.ToString(row["day_phone_ext"]);
            lead.EveningPhoneExt = DBValue.ToString(row["evening_phone_ext"]);
            lead.OtherPhone = DBValue.ToString(row["other_phone"]);
            lead.GroupWebSite = DBValue.ToString(row["group_web_site"]);
            lead.NbQueries = DBValue.ToInt32(row["nb_queries"]);
            lead.SubmitDate = DBValue.ToDateTime(row["submit_date"]);
            lead.CookieContent = DBValue.ToString(row["cookie_content"]);
            lead.Vif = DBValue.ToString(row["vif"]);
            lead.FirstContactDate = DBValue.ToDateTime(row["first_contact_date"]);
            lead.DayPhoneIsGood = DBValue.ToBoolean(row["day_phone_is_good"]);
            lead.EveningPhoneIsGood = DBValue.ToBoolean(row["evening_phone_is_good"]);
            lead.AccountNumber = DBValue.ToInt32(row["account_number"]);
            lead.ValidEmail = DBValue.ToBoolean(row["valid_email"]);
            lead.OtherClosingActivityReason = DBValue.ToString(row["other_closing_activity_reason"]);
            lead.TransferedDate = DBValue.ToDateTime(row["transfered_date"]);
            lead.MatchingCode = DBValue.ToString(row["matching_code"]);
            lead.PhoneNumberTrackingId = DBValue.ToInt32(row["phone_number_tracking_id"]);
            lead.CustomerStatusId = DBValue.ToInt32(row["customer_status_id"]);
            lead.ClientStatusId = DBValue.ToInt32(row["client_status_id"]);

            lead.FundraisersPerYear = DBValue.ToByte(row["fundraisers_per_year"]);
            if (row.Table.Columns.Contains("address_zone_id"))
                lead.AddressZoneId = DBValue.ToInt32(row["address_zone_id"]);
            /*	lead.CreditRatingID = DBValue.ToInt32(row["credit_rating_id"]);
                lead.MaximumCreditAmount = DBValue.ToFloat(row["maximum_credit_amount"]);   
                lead.CreditRatingEndDate = DBValue.ToDateTime(row["credit_rating_end_date"]);   
    */
            // return the filled object
            return lead;
        }

        public Lead[] GetLeads()
        {
            return GetLeads(null);
        }

        private Lead[] GetLeads(SqlInterface si)
        {
            Lead[] leads = null;

            string storedProcName = "efrcrm_get_leads";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    leads = new Lead[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            leads[i] = LoadLead(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return leads;
        }

        public Lead[] GetLeadsWithoutLeadVisits()
        {
            return GetLeadsWithoutLeadVisits(null);
        }

        private Lead[] GetLeadsWithoutLeadVisits(SqlInterface si)
        {
            Lead[] leads = null;

            string storedProcName = "efrcrm_get_leads_without_lead_visits";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    leads = new Lead[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            leads[i] = LoadLead(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return leads;
        }

        public Lead GetLeadByID(int id)
        {
            return GetLeadByID(id, null);
        }

        private Lead GetLeadByID(int id, SqlInterface si)
        {
            Lead lead = null;

            string storedProcName = "efrcrm_get_lead_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        lead = LoadLead(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return lead;
        }

        public Lead LoadExtLead(DataRow dr)
        {
            Lead lead = new Lead();
            lead.LeadId = DBValue.ToInt32(dr["lead_id"]);
            lead.FirstName = DBValue.ToString(dr["first_name"]);
            lead.LastName = DBValue.ToString(dr["last_name"]);
            lead.Organization = DBValue.ToString(dr["organization"]);
            lead.StreetAddress = DBValue.ToString(dr["street_address"]);
            lead.City = DBValue.ToString(dr["city"]);
            lead.DayPhone = DBValue.ToString(dr["day_phone"]);
            lead.EveningPhone = DBValue.ToString(dr["evening_phone"]);
            lead.ParticipantCount = DBValue.ToInt32(dr["participant_count"]);
            lead.ConsultantId = DBValue.ToInt32(dr["consultant_id"]);
            try
            {
                lead.PartnerID = DBValue.ToInt32(dr["partner_id"]);
            }
            catch { }
            //lead.PartnerID = DBValue.ToInt32(dr["partner_id"]);
            lead.PromotionId = DBValue.ToInt32(dr["promotion_id"]);
            lead.Email = DBValue.ToString(dr["email_address"]);
            lead.CountryCode = DBValue.ToString(dr["country_code"]);
            lead.ZipCode = DBValue.ToString(dr["zip_code"]);
            lead.LeadStatusId = DBValue.ToInt32(dr["lead_status_id"]);
            lead.IsConsultantActive = DBValue.ToBoolean(dr["consultant_active"]);
            return lead;
        }
        public LeadCollection GetMatchingLeads(string firstName, string lastName, string street, string zipCode, string dayPhone, string eveningPhone, string email)
        {
            LeadCollection leads = new LeadCollection();

            bool useTransaction = false;
            string storedProcName = "es_get_lead_doubles";

            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@first_name", DbType.String, DBValue.ToDBString(firstName)));
                paramCol.Add(new SqlDataParameter("@last_name", DbType.String, DBValue.ToDBString(lastName)));
                paramCol.Add(new SqlDataParameter("@street_address", DbType.String, DBValue.ToDBString(street)));
                paramCol.Add(new SqlDataParameter("@zip_code", DbType.String, DBValue.ToDBString(zipCode)));
                paramCol.Add(new SqlDataParameter("@day_phone", DbType.String, DBValue.ToDBString(dayPhone)));
                paramCol.Add(new SqlDataParameter("@evening_phone", DbType.String, DBValue.ToDBString(eveningPhone)));
                paramCol.Add(new SqlDataParameter("@email", DbType.String, DBValue.ToDBString(email)));

                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                // fill our objects
                try
                {
                    if (dt != null)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {

                            leads.Add(LoadExtLead(dt.Rows[i]));
                        }
                    }

                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch (Exception ex)
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw ex;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }

            return leads;

        }

        // Insert a new lead ORIGINAL METHOD

        /// Insert a new lead.
        /// </summary>
        public int InsertNewLead(string firstName, string lastName, string email, string streetAddress,
                    string city, string state, string zipCode, string country, string fundraisingDate, string dayPhone,
                    string eveningPhone, string dayPhoneExt, string eveningPhoneExt, string groupName, string title,
                    string bestTimeToCall, string productsInterest, string comments, string partnerName, int leadVisitID,
                    int leadStatusID, int organizationTypeID, byte groupTypeID, int participantCount, int consultantID,
                    int promotionID, int partnerID, bool isConsultantActive, bool onEmailList, bool decisionMaker,
                    int isPostalAddressValidated, int tempLeadID, byte fundraisersPerYear, int addressZoneId, string bestTimeToCallAlt)
        {
            int outputLeadID = int.MinValue;
            string storedProcName = "efr_insert_new_lead";
            bool useTransaction = false;

            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@first_name", DbType.String, DBValue.ToDBString(firstName)));
                paramCol.Add(new SqlDataParameter("@last_name", DbType.String, DBValue.ToDBString(lastName)));
                paramCol.Add(new SqlDataParameter("@email", DbType.String, DBValue.ToDBString(email)));
                paramCol.Add(new SqlDataParameter("@street_address", DbType.String, DBValue.ToDBString(streetAddress)));
                paramCol.Add(new SqlDataParameter("@city", DbType.String, DBValue.ToDBString(city)));
                paramCol.Add(new SqlDataParameter("@state_code", DbType.String, DBValue.ToDBString(state)));
                paramCol.Add(new SqlDataParameter("@zip_code", DbType.String, DBValue.ToDBString(zipCode)));
                paramCol.Add(new SqlDataParameter("@country_code", DbType.String, DBValue.ToDBString(country)));
                paramCol.Add(new SqlDataParameter("@day_phone", DbType.String, DBValue.ToDBString(dayPhone)));
                paramCol.Add(new SqlDataParameter("@evening_phone", DbType.String, DBValue.ToDBString(eveningPhone)));
                paramCol.Add(new SqlDataParameter("@participant_count", DbType.Int32, DBValue.ToDBInt32(participantCount)));
                paramCol.Add(new SqlDataParameter("@organization", DbType.String, DBValue.ToDBString(groupName)));

                if (promotionID == -1)
                    paramCol.Add(new SqlDataParameter("@promotion_id", DbType.Int32, DBNull.Value));
                else
                    paramCol.Add(new SqlDataParameter("@promotion_id", DbType.Int32, DBValue.ToDBInt32(promotionID)));

                paramCol.Add(new SqlDataParameter("@title", DbType.String, DBValue.ToDBString(title)));
                paramCol.Add(new SqlDataParameter("@evening_phone_ext", DbType.String, DBValue.ToDBString(eveningPhone)));
                paramCol.Add(new SqlDataParameter("@day_phone_ext", DbType.String, DBValue.ToDBString(dayPhoneExt)));
                paramCol.Add(new SqlDataParameter("@best_time_to_call", DbType.String, DBValue.ToDBString(bestTimeToCall)));
                paramCol.Add(new SqlDataParameter("@organization_type_id", DbType.Int32, DBValue.ToDBInt32(organizationTypeID)));
                paramCol.Add(new SqlDataParameter("@group_type_id", DbType.Byte, DBValue.ToDBByte(groupTypeID)));
                try
                {
                    // Make sure FundraisingDate is valid DateTime because internally the database uses a datetime field
                    // and will throw exception if FundraisingDate is invalid.
                    DateTime realDate = DateTime.Parse(fundraisingDate);
                    paramCol.Add(new SqlDataParameter("@Fundraising_Date", DbType.DateTime, DBValue.ToDBDateTime(realDate)));
                }
                catch
                {
                    paramCol.Add(new SqlDataParameter("@Fundraising_Date", DbType.DateTime, DBValue.ToDBDateTime(DateTime.Now)));
                }
                paramCol.Add(new SqlDataParameter("@decision_maker", DbType.Boolean, DBValue.ToDBBoolean(decisionMaker)));
                paramCol.Add(new SqlDataParameter("@products_interest_in", DbType.String, DBValue.ToDBString(productsInterest)));
                paramCol.Add(new SqlDataParameter("@on_email_list", DbType.Boolean, DBValue.ToDBBoolean(onEmailList)));
                paramCol.Add(new SqlDataParameter("@comments", DbType.String, DBValue.ToDBString(comments)));
                paramCol.Add(new SqlDataParameter("@lead_status_id", DbType.Int32, DBValue.ToDBInt32(leadStatusID)));
                paramCol.Add(new SqlDataParameter("@temp_lead_id", DbType.Int32, DBValue.ToDBInt32(tempLeadID)));
                paramCol.Add(new SqlDataParameter("@consultant_id", DbType.Int32, DBValue.ToDBInt32(consultantID)));
                paramCol.Add(new SqlDataParameter("@is_postal_address_validated", DbType.Int32, DBValue.ToDBInt32(isPostalAddressValidated)));
                paramCol.Add(new SqlDataParameter("@fundraisers_per_year", DbType.Byte, DBValue.ToDBByte(fundraisersPerYear)));
                paramCol.Add(new SqlDataParameter("@address_zone_id", DbType.Int32, DBValue.ToDBInt32(addressZoneId)));
                paramCol.Add(new SqlDataParameter("@evening_time_call", DbType.String, DBValue.ToDBString(bestTimeToCallAlt)));
                paramCol.Add(new SqlDataParameter("@lead_id", DbType.Int32, ParameterDirection.ReturnValue));
                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Execute
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                outputLeadID = DBValue.ToInt32(paramCol["@lead_id"].Value);

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();

                return outputLeadID;
            }
            catch (Exception ex)
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();


                throw ex;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }
        // End


        //Insert a new lead Overloaded Method added kittype parameter
        /// <summary>
        /// Insert a new lead.
        /// </summary>
        public int InsertNewLead(string firstName, string lastName, string email, string streetAddress,
                    string city, string state, string zipCode, string country, string fundraisingDate, string dayPhone,
                    string eveningPhone, string dayPhoneExt, string eveningPhoneExt, string groupName, string title,
                    string bestTimeToCall, string productsInterest, string comments, string partnerName, int leadVisitID,
                    int leadStatusID, int organizationTypeID, byte groupTypeID, int participantCount, int consultantID,
                    int promotionID, int partnerID, bool isConsultantActive, bool onEmailList, bool decisionMaker,
                    int isPostalAddressValidated, int tempLeadID, byte fundraisersPerYear, int addressZoneId, string bestTimeToCallAlt, string groupwebsite, int kittype)
        {
            int outputLeadID = int.MinValue;
            string storedProcName = "efr_insert_new_lead";
            bool useTransaction = false;

            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@first_name", DbType.String, DBValue.ToDBString(firstName)));
                paramCol.Add(new SqlDataParameter("@last_name", DbType.String, DBValue.ToDBString(lastName)));
                paramCol.Add(new SqlDataParameter("@email", DbType.String, DBValue.ToDBString(email)));
                paramCol.Add(new SqlDataParameter("@street_address", DbType.String, DBValue.ToDBString(streetAddress)));
                paramCol.Add(new SqlDataParameter("@city", DbType.String, DBValue.ToDBString(city)));
                paramCol.Add(new SqlDataParameter("@state_code", DbType.String, DBValue.ToDBString(state)));
                paramCol.Add(new SqlDataParameter("@zip_code", DbType.String, DBValue.ToDBString(zipCode)));
                paramCol.Add(new SqlDataParameter("@country_code", DbType.String, DBValue.ToDBString(country)));
                paramCol.Add(new SqlDataParameter("@day_phone", DbType.String, DBValue.ToDBString(dayPhone)));
                paramCol.Add(new SqlDataParameter("@evening_phone", DbType.String, DBValue.ToDBString(eveningPhone)));
                paramCol.Add(new SqlDataParameter("@participant_count", DbType.Int32, DBValue.ToDBInt32(participantCount)));
                paramCol.Add(new SqlDataParameter("@organization", DbType.String, DBValue.ToDBString(groupName)));

                if (promotionID == -1)
                    paramCol.Add(new SqlDataParameter("@promotion_id", DbType.Int32, DBNull.Value));
                else
                    paramCol.Add(new SqlDataParameter("@promotion_id", DbType.Int32, DBValue.ToDBInt32(promotionID)));

                paramCol.Add(new SqlDataParameter("@title", DbType.String, DBValue.ToDBString(title)));
                paramCol.Add(new SqlDataParameter("@evening_phone_ext", DbType.String, DBValue.ToDBString(eveningPhoneExt)));
                paramCol.Add(new SqlDataParameter("@day_phone_ext", DbType.String, DBValue.ToDBString(dayPhoneExt)));
                paramCol.Add(new SqlDataParameter("@best_time_to_call", DbType.String, DBValue.ToDBString(bestTimeToCall)));
                paramCol.Add(new SqlDataParameter("@organization_type_id", DbType.Int32, DBValue.ToDBInt32(organizationTypeID)));
                paramCol.Add(new SqlDataParameter("@group_type_id", DbType.Byte, DBValue.ToDBByte(groupTypeID)));
                try
                {
                    // Make sure FundraisingDate is valid DateTime because internally the database uses a datetime field
                    // and will throw exception if FundraisingDate is invalid.
                    DateTime realDate = DateTime.Parse(fundraisingDate);
                    paramCol.Add(new SqlDataParameter("@Fundraising_Date", DbType.DateTime, DBValue.ToDBDateTime(realDate)));
                }
                catch
                {
                    paramCol.Add(new SqlDataParameter("@Fundraising_Date", DbType.DateTime, DBValue.ToDBDateTime(DateTime.Now)));
                }
                paramCol.Add(new SqlDataParameter("@decision_maker", DbType.Boolean, DBValue.ToDBBoolean(decisionMaker)));
                paramCol.Add(new SqlDataParameter("@products_interest_in", DbType.String, DBValue.ToDBString(productsInterest)));
                paramCol.Add(new SqlDataParameter("@on_email_list", DbType.Boolean, DBValue.ToDBBoolean(onEmailList)));
                paramCol.Add(new SqlDataParameter("@comments", DbType.String, DBValue.ToDBString(comments)));
                paramCol.Add(new SqlDataParameter("@lead_status_id", DbType.Int32, DBValue.ToDBInt32(leadStatusID)));
                paramCol.Add(new SqlDataParameter("@temp_lead_id", DbType.Int32, DBValue.ToDBInt32(tempLeadID)));
                paramCol.Add(new SqlDataParameter("@consultant_id", DbType.Int32, DBValue.ToDBInt32(consultantID)));
                paramCol.Add(new SqlDataParameter("@is_postal_address_validated", DbType.Int32, DBValue.ToDBInt32(isPostalAddressValidated)));
                paramCol.Add(new SqlDataParameter("@fundraisers_per_year", DbType.Byte, DBValue.ToDBByte(fundraisersPerYear)));
                paramCol.Add(new SqlDataParameter("@address_zone_id", DbType.Int32, DBValue.ToDBInt32(addressZoneId)));
                paramCol.Add(new SqlDataParameter("@evening_time_call", DbType.String, DBValue.ToDBString(bestTimeToCallAlt)));
                paramCol.Add(new SqlDataParameter("@group_web_site", DbType.String, DBValue.ToDBString(groupwebsite)));
                paramCol.Add(new SqlDataParameter("@fk_kit_type_id", DbType.Int32, DBValue.ToDBInt32(kittype)));
                paramCol.Add(new SqlDataParameter("@lead_id", DbType.Int32, ParameterDirection.ReturnValue));
                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Execute
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                outputLeadID = DBValue.ToInt32(paramCol["@lead_id"].Value);

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();

                return outputLeadID;
            }
            catch (Exception ex)
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();


                throw ex;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }
        //END


        //Insert a new lead Overloaded Method added groupwebsite parameter
        /// <summary>
        /// Insert a new lead.
        /// </summary>
        public int InsertNewLead(string firstName, string lastName, string email, string streetAddress,
                    string city, string state, string zipCode, string country, string fundraisingDate, string dayPhone,
                    string eveningPhone, string dayPhoneExt, string eveningPhoneExt, string groupName, string title,
                    string bestTimeToCall, string productsInterest, string comments, string partnerName, int leadVisitID,
                    int leadStatusID, int organizationTypeID, byte groupTypeID, int participantCount, int consultantID,
                    int promotionID, int partnerID, bool isConsultantActive, bool onEmailList, bool decisionMaker,
                    int isPostalAddressValidated, int tempLeadID, byte fundraisersPerYear, int addressZoneId, string bestTimeToCallAlt, string groupwebsite)
        {
            int outputLeadID = int.MinValue;
            string storedProcName = "efr_insert_new_lead";
            bool useTransaction = false;

            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@first_name", DbType.String, DBValue.ToDBString(firstName)));
                paramCol.Add(new SqlDataParameter("@last_name", DbType.String, DBValue.ToDBString(lastName)));
                paramCol.Add(new SqlDataParameter("@email", DbType.String, DBValue.ToDBString(email)));
                paramCol.Add(new SqlDataParameter("@street_address", DbType.String, DBValue.ToDBString(streetAddress)));
                paramCol.Add(new SqlDataParameter("@city", DbType.String, DBValue.ToDBString(city)));
                paramCol.Add(new SqlDataParameter("@state_code", DbType.String, DBValue.ToDBString(state)));
                paramCol.Add(new SqlDataParameter("@zip_code", DbType.String, DBValue.ToDBString(zipCode)));
                paramCol.Add(new SqlDataParameter("@country_code", DbType.String, DBValue.ToDBString(country)));
                paramCol.Add(new SqlDataParameter("@day_phone", DbType.String, DBValue.ToDBString(dayPhone)));
                paramCol.Add(new SqlDataParameter("@evening_phone", DbType.String, DBValue.ToDBString(eveningPhone)));
                paramCol.Add(new SqlDataParameter("@participant_count", DbType.Int32, DBValue.ToDBInt32(participantCount)));
                paramCol.Add(new SqlDataParameter("@organization", DbType.String, DBValue.ToDBString(groupName)));

                if (promotionID == -1)
                    paramCol.Add(new SqlDataParameter("@promotion_id", DbType.Int32, DBNull.Value));
                else
                    paramCol.Add(new SqlDataParameter("@promotion_id", DbType.Int32, DBValue.ToDBInt32(promotionID)));

                paramCol.Add(new SqlDataParameter("@title", DbType.String, DBValue.ToDBString(title)));
                paramCol.Add(new SqlDataParameter("@evening_phone_ext", DbType.String, DBValue.ToDBString(eveningPhone)));
                paramCol.Add(new SqlDataParameter("@day_phone_ext", DbType.String, DBValue.ToDBString(dayPhoneExt)));
                paramCol.Add(new SqlDataParameter("@best_time_to_call", DbType.String, DBValue.ToDBString(bestTimeToCall)));
                paramCol.Add(new SqlDataParameter("@organization_type_id", DbType.Int32, DBValue.ToDBInt32(organizationTypeID)));
                paramCol.Add(new SqlDataParameter("@group_type_id", DbType.Byte, DBValue.ToDBByte(groupTypeID)));
                try
                {
                    // Make sure FundraisingDate is valid DateTime because internally the database uses a datetime field
                    // and will throw exception if FundraisingDate is invalid.
                    DateTime realDate = DateTime.Parse(fundraisingDate);
                    paramCol.Add(new SqlDataParameter("@Fundraising_Date", DbType.DateTime, DBValue.ToDBDateTime(realDate)));
                }
                catch
                {
                    paramCol.Add(new SqlDataParameter("@Fundraising_Date", DbType.DateTime, DBValue.ToDBDateTime(DateTime.Now)));
                }
                paramCol.Add(new SqlDataParameter("@decision_maker", DbType.Boolean, DBValue.ToDBBoolean(decisionMaker)));
                paramCol.Add(new SqlDataParameter("@products_interest_in", DbType.String, DBValue.ToDBString(productsInterest)));
                paramCol.Add(new SqlDataParameter("@on_email_list", DbType.Boolean, DBValue.ToDBBoolean(onEmailList)));
                paramCol.Add(new SqlDataParameter("@comments", DbType.String, DBValue.ToDBString(comments)));
                paramCol.Add(new SqlDataParameter("@lead_status_id", DbType.Int32, DBValue.ToDBInt32(leadStatusID)));
                paramCol.Add(new SqlDataParameter("@temp_lead_id", DbType.Int32, DBValue.ToDBInt32(tempLeadID)));
                paramCol.Add(new SqlDataParameter("@consultant_id", DbType.Int32, DBValue.ToDBInt32(consultantID)));
                paramCol.Add(new SqlDataParameter("@is_postal_address_validated", DbType.Int32, DBValue.ToDBInt32(isPostalAddressValidated)));
                paramCol.Add(new SqlDataParameter("@fundraisers_per_year", DbType.Byte, DBValue.ToDBByte(fundraisersPerYear)));
                paramCol.Add(new SqlDataParameter("@address_zone_id", DbType.Int32, DBValue.ToDBInt32(addressZoneId)));
                paramCol.Add(new SqlDataParameter("@evening_time_call", DbType.String, DBValue.ToDBString(bestTimeToCallAlt)));
                paramCol.Add(new SqlDataParameter("@group_web_site", DbType.String, DBValue.ToDBString(groupwebsite)));
                paramCol.Add(new SqlDataParameter("@lead_id", DbType.Int32, ParameterDirection.ReturnValue));
                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Execute
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                outputLeadID = DBValue.ToInt32(paramCol["@lead_id"].Value);

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();

                return outputLeadID;
            }
            catch (Exception ex)
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();


                throw ex;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }


        //Insert a new lead Overloaded Method added groupwebsite parameter
        /// <summary>
        /// Insert a new lead.
        /// </summary>
        public int InsertNewLeadWithFCID(string firstName, string lastName, string email, string streetAddress,
                    string city, string state, string zipCode, string country, string fundraisingDate, string dayPhone,
                    string eveningPhone, string dayPhoneExt, string eveningPhoneExt, string groupName, string title,
                    string bestTimeToCall, string productsInterest, string comments, string partnerName, int leadVisitID,
                    int leadStatusID, int organizationTypeID, byte groupTypeID, int participantCount, int consultantID,
                    int promotionID, int partnerID, bool isConsultantActive, bool onEmailList, bool decisionMaker,
                    int isPostalAddressValidated, int tempLeadID, byte fundraisersPerYear, int addressZoneId, string bestTimeToCallAlt, string groupwebsite, int FCID)
        {
            int outputLeadID = int.MinValue;
            string storedProcName = "efr_insert_new_lead_with_ext_consultant_id";
            bool useTransaction = false;

            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@first_name", DbType.String, DBValue.ToDBString(firstName)));
                paramCol.Add(new SqlDataParameter("@last_name", DbType.String, DBValue.ToDBString(lastName)));
                paramCol.Add(new SqlDataParameter("@email", DbType.String, DBValue.ToDBString(email)));
                paramCol.Add(new SqlDataParameter("@street_address", DbType.String, DBValue.ToDBString(streetAddress)));
                paramCol.Add(new SqlDataParameter("@city", DbType.String, DBValue.ToDBString(city)));
                paramCol.Add(new SqlDataParameter("@state_code", DbType.String, DBValue.ToDBString(state)));
                paramCol.Add(new SqlDataParameter("@zip_code", DbType.String, DBValue.ToDBString(zipCode)));
                paramCol.Add(new SqlDataParameter("@country_code", DbType.String, DBValue.ToDBString(country)));
                paramCol.Add(new SqlDataParameter("@day_phone", DbType.String, DBValue.ToDBString(dayPhone)));
                paramCol.Add(new SqlDataParameter("@evening_phone", DbType.String, DBValue.ToDBString(eveningPhone)));
                paramCol.Add(new SqlDataParameter("@participant_count", DbType.Int32, DBValue.ToDBInt32(participantCount)));
                paramCol.Add(new SqlDataParameter("@organization", DbType.String, DBValue.ToDBString(groupName)));

                if (promotionID == -1)
                    paramCol.Add(new SqlDataParameter("@promotion_id", DbType.Int32, DBNull.Value));
                else
                    paramCol.Add(new SqlDataParameter("@promotion_id", DbType.Int32, DBValue.ToDBInt32(promotionID)));

                paramCol.Add(new SqlDataParameter("@title", DbType.String, DBValue.ToDBString(title)));
                paramCol.Add(new SqlDataParameter("@evening_phone_ext", DbType.String, DBValue.ToDBString(eveningPhone)));
                paramCol.Add(new SqlDataParameter("@day_phone_ext", DbType.String, DBValue.ToDBString(dayPhoneExt)));
                paramCol.Add(new SqlDataParameter("@best_time_to_call", DbType.String, DBValue.ToDBString(bestTimeToCall)));
                paramCol.Add(new SqlDataParameter("@organization_type_id", DbType.Int32, DBValue.ToDBInt32(organizationTypeID)));
                paramCol.Add(new SqlDataParameter("@group_type_id", DbType.Byte, DBValue.ToDBByte(groupTypeID)));
                try
                {
                    // Make sure FundraisingDate is valid DateTime because internally the database uses a datetime field
                    // and will throw exception if FundraisingDate is invalid.
                    DateTime realDate = DateTime.Parse(fundraisingDate);
                    paramCol.Add(new SqlDataParameter("@Fundraising_Date", DbType.DateTime, DBValue.ToDBDateTime(realDate)));
                }
                catch
                {
                    paramCol.Add(new SqlDataParameter("@Fundraising_Date", DbType.DateTime, DBValue.ToDBDateTime(DateTime.Now)));
                }
                paramCol.Add(new SqlDataParameter("@decision_maker", DbType.Boolean, DBValue.ToDBBoolean(decisionMaker)));
                paramCol.Add(new SqlDataParameter("@products_interest_in", DbType.String, DBValue.ToDBString(productsInterest)));
                paramCol.Add(new SqlDataParameter("@on_email_list", DbType.Boolean, DBValue.ToDBBoolean(onEmailList)));
                paramCol.Add(new SqlDataParameter("@comments", DbType.String, DBValue.ToDBString(comments)));
                paramCol.Add(new SqlDataParameter("@lead_status_id", DbType.Int32, DBValue.ToDBInt32(leadStatusID)));
                paramCol.Add(new SqlDataParameter("@temp_lead_id", DbType.Int32, DBValue.ToDBInt32(tempLeadID)));
                paramCol.Add(new SqlDataParameter("@consultant_id", DbType.Int32, DBValue.ToDBInt32(consultantID)));
                paramCol.Add(new SqlDataParameter("@is_postal_address_validated", DbType.Int32, DBValue.ToDBInt32(isPostalAddressValidated)));
                paramCol.Add(new SqlDataParameter("@fundraisers_per_year", DbType.Byte, DBValue.ToDBByte(fundraisersPerYear)));
                paramCol.Add(new SqlDataParameter("@address_zone_id", DbType.Int32, DBValue.ToDBInt32(addressZoneId)));
                paramCol.Add(new SqlDataParameter("@evening_time_call", DbType.String, DBValue.ToDBString(bestTimeToCallAlt)));
                paramCol.Add(new SqlDataParameter("@group_web_site", DbType.String, DBValue.ToDBString(groupwebsite)));
                paramCol.Add(new SqlDataParameter("@ext_consultant_id", DbType.Int32, DBValue.ToDBInt32(FCID)));
                paramCol.Add(new SqlDataParameter("@lead_id", DbType.Int32, ParameterDirection.ReturnValue));
                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Execute
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                outputLeadID = DBValue.ToInt32(paramCol["@lead_id"].Value);

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();

                return outputLeadID;
            }
            catch (Exception ex)
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();


                throw ex;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }

        public void UnassignLead(int leadID, int consultantID, int userID)
        {
            string storedProcName = "crm_unassign_lead";
            bool useTransaction = false;

            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@lead_id", DbType.Int32, DBValue.ToDBInt32(leadID)));
                paramCol.Add(new SqlDataParameter("@consultant_id", DbType.Int32, DBValue.ToDBInt32(consultantID)));
                paramCol.Add(new SqlDataParameter("@user_id", DbType.Int32, DBValue.ToDBInt32(userID)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Execute
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }

        /****************************** FOR TESTING MUST BE REMOVED *************************************/

        public LeadCollection GetLeadByDates(DateTime lowerDate, DateTime upperDate)
        {

            DataTable dt = null;
            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();

                string sqlString = string.Empty;

                if (lowerDate == DateTime.MinValue || upperDate == DateTime.MinValue)
                {
                    sqlString = @"select top 1000
Lead_id, Lead_status_id, Lead_qualification_type_id, Lead_priority_id, Temp_lead_id, Division_id, Promotion_id, Channel_code, Consultant_id, Group_type_id, Organization_type_id, Hear_id, Fk_kit_type_id, Old_lead_id, Assigner_id, Referee_id, Title_id, Campaign_reason_id, Web_site_id, Promotion_code_id, Activity_closing_reason_id, Ext_consultant_id, Salutation, First_name, Last_name, Organization, Street_address, City, State_code, Country_code, Zip_code, Day_phone, Day_time_call, Evening_phone, Evening_time_call, Fax, Email, Lead_entry_date, Member_count, Participant_count, Fund_raising_goal, Decision_date, Decision_maker, Committee_meeting_required, Committee_meeting_date, Fund_raiser_start_date, Onemaillist, Faxkit, Emailkit, Comments, Kit_to_send, Kit_sent, Kit_sent_date, Lead_assignment_date, Interests, Has_been_contacted, Day_phone_ext, Evening_phone_ext, Other_phone, Group_web_site, Nb_queries, Submit_date, Cookie_content, First_contact_date, Day_phone_is_good, Evening_phone_is_good, Account_number, Valid_email, Other_closing_activity_reason, Transfered_date, Matching_code, Phone_number_tracking_id, Customer_status_id, address_zone_id 
from Lead";
                }
                else if (lowerDate == upperDate && lowerDate != DateTime.MinValue)
                {
                    sqlString = @"select 
Lead_id, Lead_status_id, Lead_qualification_type_id, Lead_priority_id, Temp_lead_id, Division_id, Promotion_id, Channel_code, Consultant_id, Group_type_id, Organization_type_id, Hear_id, Fk_kit_type_id, Old_lead_id, Assigner_id, Referee_id, Title_id, Campaign_reason_id, Web_site_id, Promotion_code_id, Activity_closing_reason_id, Ext_consultant_id, Salutation, First_name, Last_name, Organization, Street_address, City, State_code, Country_code, Zip_code, Day_phone, Day_time_call, Evening_phone, Evening_time_call, Fax, Email, Lead_entry_date, Member_count, Participant_count, Fund_raising_goal, Decision_date, Decision_maker, Committee_meeting_required, Committee_meeting_date, Fund_raiser_start_date, Onemaillist, Faxkit, Emailkit, Comments, Kit_to_send, Kit_sent, Kit_sent_date, Lead_assignment_date, Interests, Has_been_contacted, Day_phone_ext, Evening_phone_ext, Other_phone, Group_web_site, Nb_queries, Submit_date, Cookie_content, First_contact_date, Day_phone_is_good, Evening_phone_is_good, Account_number, Valid_email, Other_closing_activity_reason, Transfered_date, Matching_code, Phone_number_tracking_id, Customer_status_id, address_zone_id 
from Lead
where lead_entry_date = @lowerDate";

                    paramCol.Add(new SqlDataParameter("@lowerDate", DbType.DateTime, DBValue.ToDateTime(lowerDate)));
                }
                else if (lowerDate < upperDate)
                {
                    sqlString = @"select
Lead_id, Lead_status_id, Lead_qualification_type_id, Lead_priority_id, Temp_lead_id, Division_id, Promotion_id, Channel_code, Consultant_id, Group_type_id, Organization_type_id, Hear_id, Fk_kit_type_id, Old_lead_id, Assigner_id, Referee_id, Title_id, Campaign_reason_id, Web_site_id, Promotion_code_id, Activity_closing_reason_id, Ext_consultant_id, Salutation, First_name, Last_name, Organization, Street_address, City, State_code, Country_code, Zip_code, Day_phone, Day_time_call, Evening_phone, Evening_time_call, Fax, Email, Lead_entry_date, Member_count, Participant_count, Fund_raising_goal, Decision_date, Decision_maker, Committee_meeting_required, Committee_meeting_date, Fund_raiser_start_date, Onemaillist, Faxkit, Emailkit, Comments, Kit_to_send, Kit_sent, Kit_sent_date, Lead_assignment_date, Interests, Has_been_contacted, Day_phone_ext, Evening_phone_ext, Other_phone, Group_web_site, Nb_queries, Submit_date, Cookie_content, First_contact_date, Day_phone_is_good, Evening_phone_is_good, Account_number, Valid_email, Other_closing_activity_reason, Transfered_date, Matching_code, Phone_number_tracking_id, Customer_status_id, address_zone_id 
from Lead
where lead_entry_date >= @lowerDate and lead_entry_date <= @upperDate";



                    paramCol.Add(new SqlDataParameter("@lowerDate", DbType.DateTime, DBValue.ToDateTime(lowerDate)));
                    paramCol.Add(new SqlDataParameter("@upperDate", DbType.DateTime, DBValue.ToDateTime(upperDate)));
                }
                else
                    return null;

                dt = si.ExecuteFetchDataTable(sqlString, CommandType.Text, paramCol);
                if (dt != null && dt.Rows.Count > 0)
                {
                    LeadCollection leadCollection = new LeadCollection();
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        leadCollection.Add(LoadLead(dt.Rows[i]));
                    }
                    return leadCollection;
                }
                else
                    return null;
            }
            catch (Exception ex)
            {
                throw new Exception("GetLeadByDates error", ex);
            }
            finally
            {
                si.Close();
            }
        }

        //TODO Insert admin url into lead comment field
        public void InsertLeadAdvertisingComment(int id, string comments)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_lead_Comment_Advertising_Url";

            bool useTransaction = false;

            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction


            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@lead_id", DbType.Int32, DBValue.ToDBInt32(id)));
                paramCol.Add(new SqlDataParameter("@comments", DbType.String, DBValue.ToDBString(comments)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Execute
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch (Exception ex)
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw ex;
            }

            finally
            {
                si.Close();

            }

        }


        //TODO InsertLead EFRCRM
        public int InsertLead(Lead lead)
        {
            return InsertLead(lead, null);
        }

        private int InsertLead(Lead lead, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_lead";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Lead_status_id", DbType.Int32, DBValue.ToDBInt32(lead.LeadStatusId)));
                paramCol.Add(new SqlDataParameter("@Lead_qualification_type_id", DbType.Int32, DBValue.ToDBInt32(lead.LeadQualificationTypeId)));
                paramCol.Add(new SqlDataParameter("@Lead_priority_id", DbType.Int32, DBValue.ToDBInt32(lead.LeadPriorityId)));
                paramCol.Add(new SqlDataParameter("@Temp_lead_id", DbType.Int32, DBValue.ToDBInt32(lead.TempLeadId)));
                paramCol.Add(new SqlDataParameter("@Division_id", DbType.Int16, DBValue.ToDBInt16(lead.DivisionId)));
                paramCol.Add(new SqlDataParameter("@Promotion_id", DbType.Int32, DBValue.ToDBInt32(lead.PromotionId)));
                paramCol.Add(new SqlDataParameter("@Channel_code", DbType.String, DBValue.ToDBString(lead.ChannelCode)));
                paramCol.Add(new SqlDataParameter("@Consultant_id", DbType.Int32, DBValue.ToDBInt32(lead.ConsultantId)));
                paramCol.Add(new SqlDataParameter("@Group_type_id", DbType.Int16, DBValue.ToDBInt16(lead.GroupTypeId)));
                paramCol.Add(new SqlDataParameter("@Organization_type_id", DbType.Int16, DBValue.ToDBInt16(lead.OrganizationTypeId)));
                paramCol.Add(new SqlDataParameter("@Hear_id", DbType.Int16, DBValue.ToDBInt16(lead.HearId)));
                paramCol.Add(new SqlDataParameter("@Fk_kit_type_id", DbType.Int32, DBValue.ToDBInt32(lead.FkKitTypeId)));
                paramCol.Add(new SqlDataParameter("@Old_lead_id", DbType.Int32, DBValue.ToDBInt32(lead.OldLeadId)));
                paramCol.Add(new SqlDataParameter("@Assigner_id", DbType.Int32, DBValue.ToDBInt32(lead.AssignerId)));
                paramCol.Add(new SqlDataParameter("@Referee_id", DbType.Int32, DBValue.ToDBInt32(lead.RefereeId)));
                paramCol.Add(new SqlDataParameter("@Title_id", DbType.Int16, DBValue.ToDBInt16(lead.TitleId)));
                paramCol.Add(new SqlDataParameter("@Campaign_reason_id", DbType.Int16, DBValue.ToDBInt16(lead.CampaignReasonId)));
                paramCol.Add(new SqlDataParameter("@Web_site_id", DbType.Int32, DBValue.ToDBInt32(lead.WebSiteId)));
                paramCol.Add(new SqlDataParameter("@Promotion_code_id", DbType.Int32, DBValue.ToDBInt32(lead.PromotionCodeId)));
                paramCol.Add(new SqlDataParameter("@Activity_closing_reason_id", DbType.Int16, DBValue.ToDBInt16(lead.ActivityClosingReasonId)));
                paramCol.Add(new SqlDataParameter("@Ext_consultant_id", DbType.Int32, DBValue.ToDBInt32(lead.ExtConsultantId)));
                paramCol.Add(new SqlDataParameter("@Salutation", DbType.String, DBValue.ToDBString(lead.Salutation)));
                paramCol.Add(new SqlDataParameter("@First_name", DbType.String, DBValue.ToDBString(lead.FirstName)));
                paramCol.Add(new SqlDataParameter("@Last_name", DbType.String, DBValue.ToDBString(lead.LastName)));
                paramCol.Add(new SqlDataParameter("@Organization", DbType.String, DBValue.ToDBString(lead.Organization)));
                paramCol.Add(new SqlDataParameter("@Street_address", DbType.String, DBValue.ToDBString(lead.StreetAddress)));
                paramCol.Add(new SqlDataParameter("@City", DbType.String, DBValue.ToDBString(lead.City)));
                paramCol.Add(new SqlDataParameter("@State_code", DbType.String, DBValue.ToDBString(lead.StateCode)));
                paramCol.Add(new SqlDataParameter("@Country_code", DbType.String, DBValue.ToDBString(lead.CountryCode)));
                paramCol.Add(new SqlDataParameter("@Zip_code", DbType.String, DBValue.ToDBString(lead.ZipCode)));
                paramCol.Add(new SqlDataParameter("@Day_phone", DbType.String, DBValue.ToDBString(lead.DayPhone)));
                paramCol.Add(new SqlDataParameter("@Day_time_call", DbType.String, DBValue.ToDBString(lead.DayTimeCall)));
                paramCol.Add(new SqlDataParameter("@Evening_phone", DbType.String, DBValue.ToDBString(lead.EveningPhone)));
                paramCol.Add(new SqlDataParameter("@Evening_time_call", DbType.String, DBValue.ToDBString(lead.EveningTimeCall)));
                paramCol.Add(new SqlDataParameter("@Fax", DbType.String, DBValue.ToDBString(lead.Fax)));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(lead.Email)));
                paramCol.Add(new SqlDataParameter("@Lead_entry_date", DbType.DateTime, DBValue.ToDBDateTime(lead.LeadEntryDate)));
                paramCol.Add(new SqlDataParameter("@Member_count", DbType.Int32, DBValue.ToDBInt32(lead.MemberCount)));
                paramCol.Add(new SqlDataParameter("@Participant_count", DbType.Int32, DBValue.ToDBInt32(lead.ParticipantCount)));
                paramCol.Add(new SqlDataParameter("@Fund_raising_goal", DbType.Int32, DBValue.ToDBInt32(lead.FundRaisingGoal)));
                paramCol.Add(new SqlDataParameter("@Decision_date", DbType.DateTime, DBValue.ToDBDateTime(lead.DecisionDate)));
                paramCol.Add(new SqlDataParameter("@Decision_maker", DbType.Boolean, DBValue.ToDBBoolean(lead.DecisionMaker)));
                paramCol.Add(new SqlDataParameter("@Committee_meeting_required", DbType.Boolean, DBValue.ToDBBoolean(lead.CommitteeMeetingRequired)));
                paramCol.Add(new SqlDataParameter("@Committee_meeting_date", DbType.DateTime, DBValue.ToDBDateTime(lead.CommitteeMeetingDate)));
                paramCol.Add(new SqlDataParameter("@Fund_raiser_start_date", DbType.DateTime, DBValue.ToDBDateTime(lead.FundRaiserStartDate)));
                paramCol.Add(new SqlDataParameter("@Onemaillist", DbType.Boolean, DBValue.ToDBBoolean(lead.Onemaillist)));
                paramCol.Add(new SqlDataParameter("@Faxkit", DbType.Boolean, DBValue.ToDBBoolean(lead.Faxkit)));
                paramCol.Add(new SqlDataParameter("@Emailkit", DbType.Boolean, DBValue.ToDBBoolean(lead.Emailkit)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(lead.Comments)));
                paramCol.Add(new SqlDataParameter("@Kit_to_send", DbType.Boolean, DBValue.ToDBBoolean(lead.KitToSend)));
                paramCol.Add(new SqlDataParameter("@Kit_sent", DbType.Boolean, DBValue.ToDBBoolean(lead.KitSent)));
                paramCol.Add(new SqlDataParameter("@Kit_sent_date", DbType.DateTime, DBValue.ToDBDateTime(lead.KitSentDate)));
                paramCol.Add(new SqlDataParameter("@Lead_assignment_date", DbType.DateTime, DBValue.ToDBDateTime(lead.LeadAssignmentDate)));
                paramCol.Add(new SqlDataParameter("@Interests", DbType.String, DBValue.ToDBString(lead.Interests)));
                paramCol.Add(new SqlDataParameter("@Has_been_contacted", DbType.Boolean, DBValue.ToDBBoolean(lead.HasBeenContacted)));
                paramCol.Add(new SqlDataParameter("@Day_phone_ext", DbType.String, DBValue.ToDBString(lead.DayPhoneExt)));
                paramCol.Add(new SqlDataParameter("@Evening_phone_ext", DbType.String, DBValue.ToDBString(lead.EveningPhoneExt)));
                paramCol.Add(new SqlDataParameter("@Other_phone", DbType.String, DBValue.ToDBString(lead.OtherPhone)));
                paramCol.Add(new SqlDataParameter("@Group_web_site", DbType.String, DBValue.ToDBString(lead.GroupWebSite)));
                paramCol.Add(new SqlDataParameter("@Nb_queries", DbType.Int32, DBValue.ToDBInt32(lead.NbQueries)));
                paramCol.Add(new SqlDataParameter("@Submit_date", DbType.DateTime, DBValue.ToDBDateTime(lead.SubmitDate)));
                paramCol.Add(new SqlDataParameter("@Cookie_content", DbType.String, DBValue.ToDBString(lead.CookieContent)));
                paramCol.Add(new SqlDataParameter("@First_contact_date", DbType.DateTime, DBValue.ToDBDateTime(lead.FirstContactDate)));
                paramCol.Add(new SqlDataParameter("@Day_phone_is_good", DbType.Boolean, DBValue.ToDBBoolean(lead.DayPhoneIsGood)));
                paramCol.Add(new SqlDataParameter("@Evening_phone_is_good", DbType.Boolean, DBValue.ToDBBoolean(lead.EveningPhoneIsGood)));
                paramCol.Add(new SqlDataParameter("@Account_number", DbType.Int32, DBValue.ToDBInt32(lead.AccountNumber)));
                paramCol.Add(new SqlDataParameter("@Valid_email", DbType.Boolean, DBValue.ToDBBoolean(lead.ValidEmail)));
                paramCol.Add(new SqlDataParameter("@Other_closing_activity_reason", DbType.String, DBValue.ToDBString(lead.OtherClosingActivityReason)));
                paramCol.Add(new SqlDataParameter("@Transfered_date", DbType.DateTime, DBValue.ToDBDateTime(lead.TransferedDate)));
                paramCol.Add(new SqlDataParameter("@Matching_code", DbType.String, DBValue.ToDBString(lead.MatchingCode)));
                paramCol.Add(new SqlDataParameter("@Phone_number_tracking_id", DbType.Int32, DBValue.ToDBInt32(lead.PhoneNumberTrackingId)));
                paramCol.Add(new SqlDataParameter("@Customer_status_id", DbType.Int32, DBValue.ToDBInt32(lead.CustomerStatusId)));
                paramCol.Add(new SqlDataParameter("@Client_status_id", DbType.Int32, DBValue.ToDBInt32(lead.ClientStatusId)));
                paramCol.Add(new SqlDataParameter("@address_zone_id", DbType.Int32, DBValue.ToDBInt32(lead.AddressZoneId)));
                paramCol.Add(new SqlDataParameter("@fundraisers_per_year", DbType.Byte, DBValue.ToDBByte(lead.FundraisersPerYear)));
                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    lead.LeadId = DBValue.ToInt32(paramCol["@Lead_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateLead(Lead lead)
        {
            return UpdateLead(lead, null);
        }

        private int UpdateLead(Lead lead, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_lead";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_id", DbType.Int32, DBValue.ToDBInt32(lead.LeadId)));
                paramCol.Add(new SqlDataParameter("@Lead_status_id", DbType.Int32, DBValue.ToDBInt32(lead.LeadStatusId)));
                paramCol.Add(new SqlDataParameter("@Lead_qualification_type_id", DbType.Int32, DBValue.ToDBInt32(lead.LeadQualificationTypeId)));
                paramCol.Add(new SqlDataParameter("@Lead_priority_id", DbType.Int32, DBValue.ToDBInt32(lead.LeadPriorityId)));
                paramCol.Add(new SqlDataParameter("@Temp_lead_id", DbType.Int32, DBValue.ToDBInt32(lead.TempLeadId)));
                paramCol.Add(new SqlDataParameter("@Division_id", DbType.Int16, DBValue.ToDBInt16(lead.DivisionId)));
                paramCol.Add(new SqlDataParameter("@Promotion_id", DbType.Int32, DBValue.ToDBInt32(lead.PromotionId)));
                paramCol.Add(new SqlDataParameter("@Channel_code", DbType.String, DBValue.ToDBString(lead.ChannelCode)));
                paramCol.Add(new SqlDataParameter("@Consultant_id", DbType.Int32, DBValue.ToDBInt32(lead.ConsultantId)));
                paramCol.Add(new SqlDataParameter("@Group_type_id", DbType.Int16, DBValue.ToDBInt16(lead.GroupTypeId)));
                paramCol.Add(new SqlDataParameter("@Organization_type_id", DbType.Int16, DBValue.ToDBInt16(lead.OrganizationTypeId)));
                paramCol.Add(new SqlDataParameter("@Hear_id", DbType.Int16, DBValue.ToDBInt16(lead.HearId)));
                paramCol.Add(new SqlDataParameter("@Fk_kit_type_id", DbType.Int32, DBValue.ToDBInt32(lead.FkKitTypeId)));
                paramCol.Add(new SqlDataParameter("@Old_lead_id", DbType.Int32, DBValue.ToDBInt32(lead.OldLeadId)));
                paramCol.Add(new SqlDataParameter("@Assigner_id", DbType.Int32, DBValue.ToDBInt32(lead.AssignerId)));
                paramCol.Add(new SqlDataParameter("@Referee_id", DbType.Int32, DBValue.ToDBInt32(lead.RefereeId)));
                paramCol.Add(new SqlDataParameter("@Title_id", DbType.Int16, DBValue.ToDBInt16(lead.TitleId)));
                paramCol.Add(new SqlDataParameter("@Campaign_reason_id", DbType.Int16, DBValue.ToDBInt16(lead.CampaignReasonId)));
                paramCol.Add(new SqlDataParameter("@Web_site_id", DbType.Int32, DBValue.ToDBInt32(lead.WebSiteId)));
                paramCol.Add(new SqlDataParameter("@Promotion_code_id", DbType.Int32, DBValue.ToDBInt32(lead.PromotionCodeId)));
                paramCol.Add(new SqlDataParameter("@Activity_closing_reason_id", DbType.Int16, DBValue.ToDBInt16(lead.ActivityClosingReasonId)));
                paramCol.Add(new SqlDataParameter("@Ext_consultant_id", DbType.Int32, DBValue.ToDBInt32(lead.ExtConsultantId)));
                paramCol.Add(new SqlDataParameter("@Salutation", DbType.String, DBValue.ToDBString(lead.Salutation)));
                paramCol.Add(new SqlDataParameter("@First_name", DbType.String, DBValue.ToDBString(lead.FirstName)));
                paramCol.Add(new SqlDataParameter("@Last_name", DbType.String, DBValue.ToDBString(lead.LastName)));
                paramCol.Add(new SqlDataParameter("@Organization", DbType.String, DBValue.ToDBString(lead.Organization)));
                paramCol.Add(new SqlDataParameter("@Street_address", DbType.String, DBValue.ToDBString(lead.StreetAddress)));
                paramCol.Add(new SqlDataParameter("@City", DbType.String, DBValue.ToDBString(lead.City)));
                paramCol.Add(new SqlDataParameter("@State_code", DbType.String, DBValue.ToDBString(lead.StateCode)));
                paramCol.Add(new SqlDataParameter("@Country_code", DbType.String, DBValue.ToDBString(lead.CountryCode)));
                paramCol.Add(new SqlDataParameter("@Zip_code", DbType.String, DBValue.ToDBString(lead.ZipCode)));
                paramCol.Add(new SqlDataParameter("@Day_phone", DbType.String, DBValue.ToDBString(lead.DayPhone)));
                paramCol.Add(new SqlDataParameter("@Day_time_call", DbType.String, DBValue.ToDBString(lead.DayTimeCall)));
                paramCol.Add(new SqlDataParameter("@Evening_phone", DbType.String, DBValue.ToDBString(lead.EveningPhone)));
                paramCol.Add(new SqlDataParameter("@Evening_time_call", DbType.String, DBValue.ToDBString(lead.EveningTimeCall)));
                paramCol.Add(new SqlDataParameter("@Fax", DbType.String, DBValue.ToDBString(lead.Fax)));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(lead.Email)));
                paramCol.Add(new SqlDataParameter("@Lead_entry_date", DbType.DateTime, DBValue.ToDBDateTime(lead.LeadEntryDate)));
                paramCol.Add(new SqlDataParameter("@Member_count", DbType.Int32, DBValue.ToDBInt32(lead.MemberCount)));
                paramCol.Add(new SqlDataParameter("@Participant_count", DbType.Int32, DBValue.ToDBInt32(lead.ParticipantCount)));
                paramCol.Add(new SqlDataParameter("@Fund_raising_goal", DbType.Int32, DBValue.ToDBInt32(lead.FundRaisingGoal)));
                paramCol.Add(new SqlDataParameter("@Decision_date", DbType.DateTime, DBValue.ToDBDateTime(lead.DecisionDate)));
                paramCol.Add(new SqlDataParameter("@Decision_maker", DbType.Boolean, DBValue.ToDBBoolean(lead.DecisionMaker)));
                paramCol.Add(new SqlDataParameter("@Committee_meeting_required", DbType.Boolean, DBValue.ToDBBoolean(lead.CommitteeMeetingRequired)));
                paramCol.Add(new SqlDataParameter("@Committee_meeting_date", DbType.DateTime, DBValue.ToDBDateTime(lead.CommitteeMeetingDate)));
                paramCol.Add(new SqlDataParameter("@Fund_raiser_start_date", DbType.DateTime, DBValue.ToDBDateTime(lead.FundRaiserStartDate)));
                paramCol.Add(new SqlDataParameter("@Onemaillist", DbType.Boolean, DBValue.ToDBBoolean(lead.Onemaillist)));
                paramCol.Add(new SqlDataParameter("@Faxkit", DbType.Boolean, DBValue.ToDBBoolean(lead.Faxkit)));
                paramCol.Add(new SqlDataParameter("@Emailkit", DbType.Boolean, DBValue.ToDBBoolean(lead.Emailkit)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(lead.Comments)));
                paramCol.Add(new SqlDataParameter("@Kit_to_send", DbType.Boolean, DBValue.ToDBBoolean(lead.KitToSend)));
                paramCol.Add(new SqlDataParameter("@Kit_sent", DbType.Boolean, DBValue.ToDBBoolean(lead.KitSent)));
                paramCol.Add(new SqlDataParameter("@Kit_sent_date", DbType.DateTime, DBValue.ToDBDateTime(lead.KitSentDate)));
                paramCol.Add(new SqlDataParameter("@Lead_assignment_date", DbType.DateTime, DBValue.ToDBDateTime(lead.LeadAssignmentDate)));
                paramCol.Add(new SqlDataParameter("@Interests", DbType.String, DBValue.ToDBString(lead.Interests)));
                paramCol.Add(new SqlDataParameter("@Has_been_contacted", DbType.Boolean, DBValue.ToDBBoolean(lead.HasBeenContacted)));
                paramCol.Add(new SqlDataParameter("@Day_phone_ext", DbType.String, DBValue.ToDBString(lead.DayPhoneExt)));
                paramCol.Add(new SqlDataParameter("@Evening_phone_ext", DbType.String, DBValue.ToDBString(lead.EveningPhoneExt)));
                paramCol.Add(new SqlDataParameter("@Other_phone", DbType.String, DBValue.ToDBString(lead.OtherPhone)));
                paramCol.Add(new SqlDataParameter("@Group_web_site", DbType.String, DBValue.ToDBString(lead.GroupWebSite)));
                paramCol.Add(new SqlDataParameter("@Nb_queries", DbType.Int32, DBValue.ToDBInt32(lead.NbQueries)));
                paramCol.Add(new SqlDataParameter("@Submit_date", DbType.DateTime, DBValue.ToDBDateTime(lead.SubmitDate)));
                paramCol.Add(new SqlDataParameter("@Cookie_content", DbType.String, DBValue.ToDBString(lead.CookieContent)));
                paramCol.Add(new SqlDataParameter("@First_contact_date", DbType.DateTime, DBValue.ToDBDateTime(lead.FirstContactDate)));
                paramCol.Add(new SqlDataParameter("@Day_phone_is_good", DbType.Boolean, DBValue.ToDBBoolean(lead.DayPhoneIsGood)));
                paramCol.Add(new SqlDataParameter("@Evening_phone_is_good", DbType.Boolean, DBValue.ToDBBoolean(lead.EveningPhoneIsGood)));
                paramCol.Add(new SqlDataParameter("@Account_number", DbType.Int32, DBValue.ToDBInt32(lead.AccountNumber)));
                paramCol.Add(new SqlDataParameter("@Valid_email", DbType.Boolean, DBValue.ToDBBoolean(lead.ValidEmail)));
                paramCol.Add(new SqlDataParameter("@Other_closing_activity_reason", DbType.String, DBValue.ToDBString(lead.OtherClosingActivityReason)));
                paramCol.Add(new SqlDataParameter("@Transfered_date", DbType.DateTime, DBValue.ToDBDateTime(lead.TransferedDate)));
                paramCol.Add(new SqlDataParameter("@Matching_code", DbType.String, DBValue.ToDBString(lead.MatchingCode)));
                paramCol.Add(new SqlDataParameter("@Phone_number_tracking_id", DbType.Int32, DBValue.ToDBInt32(lead.PhoneNumberTrackingId)));
                paramCol.Add(new SqlDataParameter("@Customer_status_id", DbType.Int32, DBValue.ToDBInt32(lead.CustomerStatusId)));
                paramCol.Add(new SqlDataParameter("@Client_status_id", DbType.Int32, DBValue.ToDBInt32(lead.ClientStatusId)));
                paramCol.Add(new SqlDataParameter("@address_zone_id", DbType.Int32, DBValue.ToDBInt32(lead.AddressZoneId)));
                paramCol.Add(new SqlDataParameter("@fundraisers_per_year", DbType.Byte, DBValue.ToDBByte(lead.FundraisersPerYear)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }

        //duplicateLeadUpdate
        public void duplicateLeadUpdate(int dupLead, string FirstName, string LastName, string Email, string StreetAddress, string City, string State,
            string ZipCode, string Country, string DayPhone, string EveningPhone, string DayPhoneExt, string EveningPhoneExt, string GroupName, 
            string Comments, int OrganizationTypeID, int GroupTypeID, int ParticipantCount, int PromotionID,
            bool DecisionMaker, string GroupWebsite, int KitType)
        {
                duplicateLeadUpdate(dupLead, FirstName, LastName, Email, StreetAddress, City, State, ZipCode, Country, DayPhone, EveningPhone, 
                DayPhoneExt, EveningPhoneExt, GroupName, Comments, OrganizationTypeID,  GroupTypeID,  
                ParticipantCount,  PromotionID,   DecisionMaker,  GroupWebsite,  KitType, null);
            
        }
        
       
        public void duplicateLeadUpdate(int dupLead, string FirstName, string LastName, string Email, string StreetAddress, string City, string State,
            string ZipCode, string Country, string DayPhone, string EveningPhone, string DayPhoneExt, string EveningPhoneExt, string GroupName, 
            string Comments, int OrganizationTypeID, int GroupTypeID, int ParticipantCount, int PromotionID,
            bool DecisionMaker, string GroupWebsite, int KitType, SqlInterface si )
        {
        
            string storedProcName = "efrcrm_update_duplicate_lead";
            int result = int.MinValue; 

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_id", DbType.Int32, DBValue.ToDBInt32(dupLead)));
                paramCol.Add(new SqlDataParameter("@Promotion_id", DbType.Int32, DBValue.ToDBInt32(PromotionID)));
                paramCol.Add(new SqlDataParameter("@Group_type_id", DbType.Int16, DBValue.ToDBInt16(GroupTypeID)));
                paramCol.Add(new SqlDataParameter("@Organization_type_id", DbType.Int16, DBValue.ToDBInt16(OrganizationTypeID)));
                paramCol.Add(new SqlDataParameter("@Fk_kit_type_id", DbType.Int32, DBValue.ToDBInt32(KitType)));
                paramCol.Add(new SqlDataParameter("@First_name", DbType.String, DBValue.ToDBString(FirstName)));
                paramCol.Add(new SqlDataParameter("@Last_name", DbType.String, DBValue.ToDBString(LastName)));
                paramCol.Add(new SqlDataParameter("@Organization", DbType.String, DBValue.ToDBString(GroupName)));
                paramCol.Add(new SqlDataParameter("@Street_address", DbType.String, DBValue.ToDBString(StreetAddress)));
                paramCol.Add(new SqlDataParameter("@City", DbType.String, DBValue.ToDBString(City)));
                paramCol.Add(new SqlDataParameter("@State_code", DbType.String, DBValue.ToDBString(State)));
                paramCol.Add(new SqlDataParameter("@Country_code", DbType.String, DBValue.ToDBString(Country)));
                paramCol.Add(new SqlDataParameter("@Zip_code", DbType.String, DBValue.ToDBString(ZipCode)));
                paramCol.Add(new SqlDataParameter("@Day_phone", DbType.String, DBValue.ToDBString(DayPhone)));
                paramCol.Add(new SqlDataParameter("@Evening_phone", DbType.String, DBValue.ToDBString(EveningPhone)));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(Email)));
                paramCol.Add(new SqlDataParameter("@Participant_count", DbType.Int32, DBValue.ToDBInt32(ParticipantCount)));
                paramCol.Add(new SqlDataParameter("@Decision_maker", DbType.Boolean, DBValue.ToDBBoolean(DecisionMaker)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(Comments)));
                paramCol.Add(new SqlDataParameter("@Day_phone_ext", DbType.String, DBValue.ToDBString(DayPhoneExt)));
                paramCol.Add(new SqlDataParameter("@Evening_phone_ext", DbType.String, DBValue.ToDBString(EveningPhoneExt)));
                paramCol.Add(new SqlDataParameter("@Group_web_site", DbType.String, DBValue.ToDBString(GroupWebsite)));
               
               
                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result < 0)
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName); ;
                }
            }

            catch (Exception ex)
            {
                throw ex;

            }

            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
          
        }





        //TODO New overloaded method for updating 2 Step Sample Kit page.
        public int UpdateLead(int LeadID, int LeadStatusID, int LeadQualificationTypeId, int LeadPriorityId, int TempLeadID, int DivisionId, int PromotionID,
            string ChannelCode, int ConsultantID, int GroupTypeID, int OrganizationTypeID, int HearId, int FkKitTypeId, int OldLeadId, int AssignerId,
            int RefereeId, int TitleId, int CampaignReasonId, int WebSiteId, int PromotionCodeId, int ActivityClosingReasonId, int ExtConsultantId,
            string Salutation, string FirstName, string LastName, string Organization, string StreetAddress, string City, string StateCode, string CountryCode,
            string ZipCode, string DayPhone, string DayTimeCall, string EveningPhone, string EveningTimeCall, string Fax, string Email, DateTime LeadEntryDate,
            int MemberCount, int ParticipantCount, int FundRaisingGoal, DateTime DecisionDate, bool DecisionMaker, bool CommitteeMeetingRequired,
            DateTime CommitteeMeetingDate, DateTime FundRaiserStartDate, bool Onemaillist, bool Faxkit, bool Emailkit, string Comments, bool KitToSend, bool KitSent,
            DateTime KitSentDate, DateTime LeadAssignmentDate, string Interests, bool HasBeenContacted, string DayPhoneExt, string EveningPhoneExt,
            string OtherPhone, string GroupWebSite, int NbQueries, DateTime SubmitDate, string CookieContent, DateTime FirstContactDate, bool DayPhoneIsGood,
            bool EveningPhoneIsGood, int AccountNumber, bool ValidEmail, string OtherClosingActivityReason, DateTime TransferedDate, string MatchingCode,
            int PhoneNumberTrackingId, int CustomerStatusId, int ClientStatusId, int AddressZoneId, int FundraisersPerYear, string BestTimeToCallAlt)
        {
            return UpdateLead(LeadID, LeadStatusID, LeadQualificationTypeId, LeadPriorityId, TempLeadID, DivisionId, PromotionID, ChannelCode,
            ConsultantID, GroupTypeID, OrganizationTypeID, HearId, FkKitTypeId, OldLeadId, AssignerId, RefereeId, TitleId, CampaignReasonId, WebSiteId,
            PromotionCodeId, ActivityClosingReasonId, ExtConsultantId, Salutation, FirstName, LastName, Organization, StreetAddress, City,
            StateCode, CountryCode, ZipCode, DayPhone, DayTimeCall, EveningPhone, EveningTimeCall, Fax, Email, LeadEntryDate, MemberCount, ParticipantCount,
            FundRaisingGoal, DecisionDate, DecisionMaker, CommitteeMeetingRequired, CommitteeMeetingDate, FundRaiserStartDate, Onemaillist, Faxkit,
            Emailkit, Comments, KitToSend, KitSent, KitSentDate, LeadAssignmentDate, Interests, HasBeenContacted, DayPhoneExt, EveningPhoneExt,
            OtherPhone, GroupWebSite, NbQueries, SubmitDate, CookieContent, FirstContactDate, DayPhoneIsGood, EveningPhoneIsGood, AccountNumber,
            ValidEmail, OtherClosingActivityReason, TransferedDate, MatchingCode, PhoneNumberTrackingId, CustomerStatusId, ClientStatusId, AddressZoneId,
            FundraisersPerYear, BestTimeToCallAlt, null);
        }


        public int UpdateLead(int LeadID, int LeadStatusID, int LeadQualificationTypeId, int LeadPriorityId, int TempLeadID, int DivisionId, int PromotionID,
            string ChannelCode, int ConsultantID, int GroupTypeID, int OrganizationTypeID, int HearId, int FkKitTypeId, int OldLeadId, int AssignerId,
            int RefereeId, int TitleId, int CampaignReasonId, int WebSiteId, int PromotionCodeId, int ActivityClosingReasonId, int ExtConsultantId,
            string Salutation, string FirstName, string LastName, string Organization, string StreetAddress, string City, string StateCode, string CountryCode,
            string ZipCode, string DayPhone, string DayTimeCall, string EveningPhone, string EveningTimeCall, string Fax, string Email, DateTime LeadEntryDate,
            int MemberCount, int ParticipantCount, int FundRaisingGoal, DateTime DecisionDate, bool DecisionMaker, bool CommitteeMeetingRequired,
            DateTime CommitteeMeetingDate, DateTime FundRaiserStartDate, bool Onemaillist, bool Faxkit, bool Emailkit, string Comments, bool KitToSend, bool KitSent,
            DateTime KitSentDate, DateTime LeadAssignmentDate, string Interests, bool HasBeenContacted, string DayPhoneExt, string EveningPhoneExt,
            string OtherPhone, string GroupWebSite, int NbQueries, DateTime SubmitDate, string CookieContent, DateTime FirstContactDate, bool DayPhoneIsGood,
            bool EveningPhoneIsGood, int AccountNumber, bool ValidEmail, string OtherClosingActivityReason, DateTime TransferedDate, string MatchingCode,
            int PhoneNumberTrackingId, int CustomerStatusId, int ClientStatusId, int AddressZoneId, int FundraisersPerYear, string BestTimeToCallAlt, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_lead";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_id", DbType.Int32, DBValue.ToDBInt32(LeadID)));
                paramCol.Add(new SqlDataParameter("@Lead_status_id", DbType.Int32, DBValue.ToDBInt32(LeadStatusID)));
                paramCol.Add(new SqlDataParameter("@Lead_qualification_type_id", DbType.Int32, DBValue.ToDBInt32(LeadQualificationTypeId)));
                paramCol.Add(new SqlDataParameter("@Lead_priority_id", DbType.Int32, DBValue.ToDBInt32(LeadPriorityId)));
                paramCol.Add(new SqlDataParameter("@Temp_lead_id", DbType.Int32, DBValue.ToDBInt32(TempLeadID)));
                paramCol.Add(new SqlDataParameter("@Division_id", DbType.Int16, DBValue.ToDBInt16(DivisionId)));
                paramCol.Add(new SqlDataParameter("@Promotion_id", DbType.Int32, DBValue.ToDBInt32(PromotionID)));
                paramCol.Add(new SqlDataParameter("@Channel_code", DbType.String, DBValue.ToDBString(ChannelCode)));
                paramCol.Add(new SqlDataParameter("@Consultant_id", DbType.Int32, DBValue.ToDBInt32(ConsultantID)));
                paramCol.Add(new SqlDataParameter("@Group_type_id", DbType.Int16, DBValue.ToDBInt16(GroupTypeID)));
                paramCol.Add(new SqlDataParameter("@Organization_type_id", DbType.Int16, DBValue.ToDBInt16(OrganizationTypeID)));
                paramCol.Add(new SqlDataParameter("@Hear_id", DbType.Int16, DBValue.ToDBInt16(HearId)));
                paramCol.Add(new SqlDataParameter("@Fk_kit_type_id", DbType.Int32, DBValue.ToDBInt32(FkKitTypeId)));
                paramCol.Add(new SqlDataParameter("@Old_lead_id", DbType.Int32, DBValue.ToDBInt32(OldLeadId)));
                paramCol.Add(new SqlDataParameter("@Assigner_id", DbType.Int32, DBValue.ToDBInt32(AssignerId)));
                paramCol.Add(new SqlDataParameter("@Referee_id", DbType.Int32, DBValue.ToDBInt32(RefereeId)));
                paramCol.Add(new SqlDataParameter("@Title_id", DbType.Int16, DBValue.ToDBInt16(TitleId)));
                paramCol.Add(new SqlDataParameter("@Campaign_reason_id", DbType.Int16, DBValue.ToDBInt16(CampaignReasonId)));
                paramCol.Add(new SqlDataParameter("@Web_site_id", DbType.Int32, DBValue.ToDBInt32(WebSiteId)));
                paramCol.Add(new SqlDataParameter("@Promotion_code_id", DbType.Int32, DBValue.ToDBInt32(PromotionCodeId)));
                paramCol.Add(new SqlDataParameter("@Activity_closing_reason_id", DbType.Int16, DBValue.ToDBInt16(ActivityClosingReasonId)));
                paramCol.Add(new SqlDataParameter("@Ext_consultant_id", DbType.Int32, DBValue.ToDBInt32(ExtConsultantId)));
                paramCol.Add(new SqlDataParameter("@Salutation", DbType.String, DBValue.ToDBString(Salutation)));
                paramCol.Add(new SqlDataParameter("@First_name", DbType.String, DBValue.ToDBString(FirstName)));
                paramCol.Add(new SqlDataParameter("@Last_name", DbType.String, DBValue.ToDBString(LastName)));
                paramCol.Add(new SqlDataParameter("@Organization", DbType.String, DBValue.ToDBString(Organization)));
                paramCol.Add(new SqlDataParameter("@Street_address", DbType.String, DBValue.ToDBString(StreetAddress)));
                paramCol.Add(new SqlDataParameter("@City", DbType.String, DBValue.ToDBString(City)));
                paramCol.Add(new SqlDataParameter("@State_code", DbType.String, DBValue.ToDBString(StateCode)));
                paramCol.Add(new SqlDataParameter("@Country_code", DbType.String, DBValue.ToDBString(CountryCode)));
                paramCol.Add(new SqlDataParameter("@Zip_code", DbType.String, DBValue.ToDBString(ZipCode)));
                paramCol.Add(new SqlDataParameter("@Day_phone", DbType.String, DBValue.ToDBString(DayPhone)));
                paramCol.Add(new SqlDataParameter("@Day_time_call", DbType.String, DBValue.ToDBString(DayTimeCall)));
                paramCol.Add(new SqlDataParameter("@Evening_phone", DbType.String, DBValue.ToDBString(EveningPhone)));
                paramCol.Add(new SqlDataParameter("@Evening_time_call", DbType.String, DBValue.ToDBString(EveningTimeCall)));
                paramCol.Add(new SqlDataParameter("@Fax", DbType.String, DBValue.ToDBString(Fax)));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(Email)));
                paramCol.Add(new SqlDataParameter("@Lead_entry_date", DbType.DateTime, DBValue.ToDBDateTime(LeadEntryDate)));
                paramCol.Add(new SqlDataParameter("@Member_count", DbType.Int32, DBValue.ToDBInt32(MemberCount)));
                paramCol.Add(new SqlDataParameter("@Participant_count", DbType.Int32, DBValue.ToDBInt32(ParticipantCount)));
                paramCol.Add(new SqlDataParameter("@Fund_raising_goal", DbType.Int32, DBValue.ToDBInt32(FundRaisingGoal)));
                paramCol.Add(new SqlDataParameter("@Decision_date", DbType.DateTime, DBValue.ToDBDateTime(DecisionDate)));
                paramCol.Add(new SqlDataParameter("@Decision_maker", DbType.Boolean, DBValue.ToDBBoolean(DecisionMaker)));
                paramCol.Add(new SqlDataParameter("@Committee_meeting_required", DbType.Boolean, DBValue.ToDBBoolean(CommitteeMeetingRequired)));
                paramCol.Add(new SqlDataParameter("@Committee_meeting_date", DbType.DateTime, DBValue.ToDBDateTime(CommitteeMeetingDate)));
                paramCol.Add(new SqlDataParameter("@Fund_raiser_start_date", DbType.DateTime, DBValue.ToDBDateTime(FundRaiserStartDate)));
                paramCol.Add(new SqlDataParameter("@Onemaillist", DbType.Boolean, DBValue.ToDBBoolean(Onemaillist)));
                paramCol.Add(new SqlDataParameter("@Faxkit", DbType.Boolean, DBValue.ToDBBoolean(Faxkit)));
                paramCol.Add(new SqlDataParameter("@Emailkit", DbType.Boolean, DBValue.ToDBBoolean(Emailkit)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(Comments)));
                paramCol.Add(new SqlDataParameter("@Kit_to_send", DbType.Boolean, DBValue.ToDBBoolean(KitToSend)));
                paramCol.Add(new SqlDataParameter("@Kit_sent", DbType.Boolean, DBValue.ToDBBoolean(KitSent)));
                paramCol.Add(new SqlDataParameter("@Kit_sent_date", DbType.DateTime, DBValue.ToDBDateTime(KitSentDate)));
                paramCol.Add(new SqlDataParameter("@Lead_assignment_date", DbType.DateTime, DBValue.ToDBDateTime(LeadAssignmentDate)));
                paramCol.Add(new SqlDataParameter("@Interests", DbType.String, DBValue.ToDBString(Interests)));
                paramCol.Add(new SqlDataParameter("@Has_been_contacted", DbType.Boolean, DBValue.ToDBBoolean(HasBeenContacted)));
                paramCol.Add(new SqlDataParameter("@Day_phone_ext", DbType.String, DBValue.ToDBString(DayPhoneExt)));
                paramCol.Add(new SqlDataParameter("@Evening_phone_ext", DbType.String, DBValue.ToDBString(EveningPhoneExt)));
                paramCol.Add(new SqlDataParameter("@Other_phone", DbType.String, DBValue.ToDBString(OtherPhone)));
                paramCol.Add(new SqlDataParameter("@Group_web_site", DbType.String, DBValue.ToDBString(GroupWebSite)));
                paramCol.Add(new SqlDataParameter("@Nb_queries", DbType.Int32, DBValue.ToDBInt32(NbQueries)));
                paramCol.Add(new SqlDataParameter("@Submit_date", DbType.DateTime, DBValue.ToDBDateTime(SubmitDate)));
                paramCol.Add(new SqlDataParameter("@Cookie_content", DbType.String, DBValue.ToDBString(CookieContent)));
                paramCol.Add(new SqlDataParameter("@First_contact_date", DbType.DateTime, DBValue.ToDBDateTime(FirstContactDate)));
                paramCol.Add(new SqlDataParameter("@Day_phone_is_good", DbType.Boolean, DBValue.ToDBBoolean(DayPhoneIsGood)));
                paramCol.Add(new SqlDataParameter("@Evening_phone_is_good", DbType.Boolean, DBValue.ToDBBoolean(EveningPhoneIsGood)));
                paramCol.Add(new SqlDataParameter("@Account_number", DbType.Int32, DBValue.ToDBInt32(AccountNumber)));
                paramCol.Add(new SqlDataParameter("@Valid_email", DbType.Boolean, DBValue.ToDBBoolean(ValidEmail)));
                paramCol.Add(new SqlDataParameter("@Other_closing_activity_reason", DbType.String, DBValue.ToDBString(OtherClosingActivityReason)));
                paramCol.Add(new SqlDataParameter("@Transfered_date", DbType.DateTime, DBValue.ToDBDateTime(TransferedDate)));
                paramCol.Add(new SqlDataParameter("@Matching_code", DbType.String, DBValue.ToDBString(MatchingCode)));
                paramCol.Add(new SqlDataParameter("@Phone_number_tracking_id", DbType.Int32, DBValue.ToDBInt32(PhoneNumberTrackingId)));
                paramCol.Add(new SqlDataParameter("@Customer_status_id", DbType.Int32, DBValue.ToDBInt32(CustomerStatusId)));
                paramCol.Add(new SqlDataParameter("@Client_status_id", DbType.Int32, DBValue.ToDBInt32(ClientStatusId)));
                paramCol.Add(new SqlDataParameter("@address_zone_id", DbType.Int32, DBValue.ToDBInt32(AddressZoneId)));
                paramCol.Add(new SqlDataParameter("@fundraisers_per_year", DbType.Int16, DBValue.ToDBInt16(FundraisersPerYear)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }

            catch (Exception ex)
            {
                throw ex;

            }

            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region LeadActivity Methods

        private LeadActivity LoadLeadActivity(DataRow row)
        {
            LeadActivity leadActivity = new LeadActivity();

            // Store database values into our business object
            leadActivity.LeadActivityId = DBValue.ToInt32(row["lead_activity_id"]);
            leadActivity.LeadId = DBValue.ToInt32(row["lead_id"]);
            leadActivity.LeadActivityTypeId = DBValue.ToInt32(row["lead_activity_type_id"]);
            leadActivity.LeadActivityDate = DBValue.ToDateTime(row["lead_activity_date"]);
            leadActivity.CompletedDate = DBValue.ToDateTime(row["completed_date"]);
            leadActivity.Comments = DBValue.ToString(row["comments"]);

            // return the filled object
            return leadActivity;
        }

        public LeadActivity[] GetLeadActivitys()
        {
            return GetLeadActivitys(null);
        }

        private LeadActivity[] GetLeadActivitys(SqlInterface si)
        {
            LeadActivity[] leadActivitys = null;

            string storedProcName = "efrcrm_get_lead_activitys";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    leadActivitys = new LeadActivity[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            leadActivitys[i] = LoadLeadActivity(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return leadActivitys;
        }


        public LeadActivity GetLeadActivityByID(int id)
        {
            return GetLeadActivityByID(id, null);
        }

        private LeadActivity GetLeadActivityByID(int id, SqlInterface si)
        {
            LeadActivity leadActivity = null;

            string storedProcName = "efrcrm_get_lead_activity_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_activity_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        leadActivity = LoadLeadActivity(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return leadActivity;
        }


        public int InsertLeadActivity(LeadActivity leadActivity)
        {
            return InsertLeadActivity(leadActivity, null);
        }

        private int InsertLeadActivity(LeadActivity leadActivity, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_lead_activity";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_activity_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Lead_id", DbType.Int32, DBValue.ToDBInt32(leadActivity.LeadId)));
                paramCol.Add(new SqlDataParameter("@Lead_activity_type_id", DbType.Int32, DBValue.ToDBInt32(leadActivity.LeadActivityTypeId)));
                paramCol.Add(new SqlDataParameter("@Lead_activity_date", DbType.DateTime, DBValue.ToDBDateTime(leadActivity.LeadActivityDate)));
                paramCol.Add(new SqlDataParameter("@Completed_date", DbType.DateTime, DBValue.ToDBDateTime(leadActivity.CompletedDate)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(leadActivity.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    leadActivity.LeadActivityId = DBValue.ToInt32(paramCol["@Lead_activity_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public void InsertLeadActivity(int leadID, int leadActivityTypeID, string comments)
        {
            string storedProcName = "efr_insert_lead_activity";
            bool useTransaction = false;

            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@lead_id", DbType.Int32, DBValue.ToDBInt32(leadID)));
                paramCol.Add(new SqlDataParameter("@lead_activity_type_id", DbType.Int32, DBValue.ToDBInt32(leadActivityTypeID)));
                paramCol.Add(new SqlDataParameter("@comments", DbType.String, DBValue.ToDBString(comments)));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Execute
                int ret = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (ret <= 0)
                    throw new SqlDataException("Insert lead activity failed.");

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }


        public int UpdateLeadActivity(LeadActivity leadActivity)
        {
            return UpdateLeadActivity(leadActivity, null);
        }

        private int UpdateLeadActivity(LeadActivity leadActivity, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_lead_activity";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_activity_id", DbType.Int32, DBValue.ToDBInt32(leadActivity.LeadActivityId)));
                paramCol.Add(new SqlDataParameter("@Lead_id", DbType.Int32, DBValue.ToDBInt32(leadActivity.LeadId)));
                paramCol.Add(new SqlDataParameter("@Lead_activity_type_id", DbType.Int32, DBValue.ToDBInt32(leadActivity.LeadActivityTypeId)));
                paramCol.Add(new SqlDataParameter("@Lead_activity_date", DbType.DateTime, DBValue.ToDBDateTime(leadActivity.LeadActivityDate)));
                paramCol.Add(new SqlDataParameter("@Completed_date", DbType.DateTime, DBValue.ToDBDateTime(leadActivity.CompletedDate)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(leadActivity.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public void UpdateLeadActivity(int leadActivityID, int leadID, int leadActivityTypeID, DateTime leadActivityDate,
            DateTime completedDate, string comments)
        {
            string storedProcName = "efr_update_lead_activity";

            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@lead_activity_id", DbType.Int32, DBValue.ToDBInt32(leadActivityID)));
                paramCol.Add(new SqlDataParameter("@lead_id", DbType.Int32, DBValue.ToDBInt32(leadID)));
                paramCol.Add(new SqlDataParameter("@lead_activity_type_id", DbType.Int32, DBValue.ToDBInt32(leadActivityTypeID)));
                paramCol.Add(new SqlDataParameter("@lead_activity_date", DbType.DateTime, DBValue.ToDBDateTime(leadActivityDate)));
                paramCol.Add(new SqlDataParameter("@completed_date", DbType.DateTime, DBValue.ToDBDateTime(completedDate)));
                paramCol.Add(new SqlDataParameter("@comments", DbType.String, DBValue.ToDBString(comments)));

                si.Open();

                // Execute
                int ret = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (ret <= 0)
                    throw new SqlDataException("Update lead activity failed.");


            }
            catch
            {
                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }


        #endregion

        #region LeadActivityClosingReason Methods

        private LeadActivityClosingReason LoadLeadActivityClosingReason(DataRow row)
        {
            LeadActivityClosingReason leadActivityClosingReason = new LeadActivityClosingReason();

            // Store database values into our business object
            leadActivityClosingReason.ActivityClosingReasonID = DBValue.ToInt16(row["activity_closing_reason_id"]);
            leadActivityClosingReason.Reason = DBValue.ToString(row["reason"]);

            // return the filled object
            return leadActivityClosingReason;
        }

        public LeadActivityClosingReason[] GetLeadActivityClosingReasons()
        {
            return GetLeadActivityClosingReasons(null);
        }

        private LeadActivityClosingReason[] GetLeadActivityClosingReasons(SqlInterface si)
        {
            LeadActivityClosingReason[] leadActivityClosingReasons = null;

            string storedProcName = "efrcrm_get_lead_activity_closing_reasons";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    leadActivityClosingReasons = new LeadActivityClosingReason[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            leadActivityClosingReasons[i] = LoadLeadActivityClosingReason(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return leadActivityClosingReasons;
        }



        #endregion

        #region LeadActivityCopy Methods

        private LeadActivityCopy LoadLeadActivityCopy(DataRow row)
        {
            LeadActivityCopy leadActivityCopy = new LeadActivityCopy();

            // Store database values into our business object
            leadActivityCopy.LeadActivityId = DBValue.ToInt32(row["lead_activity_id"]);
            leadActivityCopy.LeadId = DBValue.ToInt32(row["lead_id"]);
            leadActivityCopy.LeadActivityTypeId = DBValue.ToInt32(row["lead_activity_type_id"]);
            leadActivityCopy.LeadActivityDate = DBValue.ToDateTime(row["lead_activity_date"]);
            leadActivityCopy.CompletedDate = DBValue.ToDateTime(row["completed_date"]);
            leadActivityCopy.Comments = DBValue.ToString(row["comments"]);

            // return the filled object
            return leadActivityCopy;
        }

        public LeadActivityCopy[] GetLeadActivityCopys()
        {
            return GetLeadActivityCopys(null);
        }

        private LeadActivityCopy[] GetLeadActivityCopys(SqlInterface si)
        {
            LeadActivityCopy[] leadActivityCopys = null;

            string storedProcName = "efrcrm_get_lead_activity_copys";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    leadActivityCopys = new LeadActivityCopy[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            leadActivityCopys[i] = LoadLeadActivityCopy(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return leadActivityCopys;
        }


        public LeadActivityCopy GetLeadActivityCopyByID(int id)
        {
            return GetLeadActivityCopyByID(id, null);
        }

        private LeadActivityCopy GetLeadActivityCopyByID(int id, SqlInterface si)
        {
            LeadActivityCopy leadActivityCopy = null;

            string storedProcName = "efrcrm_get_lead_activity_copy_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_Activity_Id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        leadActivityCopy = LoadLeadActivityCopy(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return leadActivityCopy;
        }


        public int InsertLeadActivityCopy(LeadActivityCopy leadActivityCopy)
        {
            return InsertLeadActivityCopy(leadActivityCopy, null);
        }

        private int InsertLeadActivityCopy(LeadActivityCopy leadActivityCopy, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_lead_activity_copy";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_Activity_Id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Lead_Id", DbType.Int32, DBValue.ToDBInt32(leadActivityCopy.LeadId)));
                paramCol.Add(new SqlDataParameter("@Lead_Activity_Type_Id", DbType.Int32, DBValue.ToDBInt32(leadActivityCopy.LeadActivityTypeId)));
                paramCol.Add(new SqlDataParameter("@Lead_Activity_Date", DbType.DateTime, DBValue.ToDBDateTime(leadActivityCopy.LeadActivityDate)));
                paramCol.Add(new SqlDataParameter("@Completed_Date", DbType.DateTime, DBValue.ToDBDateTime(leadActivityCopy.CompletedDate)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(leadActivityCopy.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    leadActivityCopy.LeadActivityId = DBValue.ToInt32(paramCol["@Lead_Activity_Id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateLeadActivityCopy(LeadActivityCopy leadActivityCopy)
        {
            return UpdateLeadActivityCopy(leadActivityCopy, null);
        }

        private int UpdateLeadActivityCopy(LeadActivityCopy leadActivityCopy, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_lead_activity_copy";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_Activity_Id", DbType.Int32, DBValue.ToDBInt32(leadActivityCopy.LeadActivityId)));
                paramCol.Add(new SqlDataParameter("@Lead_Id", DbType.Int32, DBValue.ToDBInt32(leadActivityCopy.LeadId)));
                paramCol.Add(new SqlDataParameter("@Lead_Activity_Type_Id", DbType.Int32, DBValue.ToDBInt32(leadActivityCopy.LeadActivityTypeId)));
                paramCol.Add(new SqlDataParameter("@Lead_Activity_Date", DbType.DateTime, DBValue.ToDBDateTime(leadActivityCopy.LeadActivityDate)));
                paramCol.Add(new SqlDataParameter("@Completed_Date", DbType.DateTime, DBValue.ToDBDateTime(leadActivityCopy.CompletedDate)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(leadActivityCopy.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region LeadActivityType Methods

        private LeadActivityType LoadLeadActivityType(DataRow row)
        {
            LeadActivityType leadActivityType = new LeadActivityType();

            // Store database values into our business object
            leadActivityType.LeadActivityTypeId = DBValue.ToInt32(row["lead_activity_type_id"]);
            leadActivityType.Description = DBValue.ToString(row["description"]);
            leadActivityType.Priority = DBValue.ToInt32(row["priority"]);

            // return the filled object
            return leadActivityType;
        }

        public LeadActivityType[] GetLeadActivityTypes()
        {
            return GetLeadActivityTypes(null);
        }

        private LeadActivityType[] GetLeadActivityTypes(SqlInterface si)
        {
            LeadActivityType[] leadActivityTypes = null;

            string storedProcName = "efrcrm_get_lead_activity_types";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    leadActivityTypes = new LeadActivityType[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            leadActivityTypes[i] = LoadLeadActivityType(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return leadActivityTypes;
        }


        public LeadActivityType GetLeadActivityTypeByID(int id)
        {
            return GetLeadActivityTypeByID(id, null);
        }

        private LeadActivityType GetLeadActivityTypeByID(int id, SqlInterface si)
        {
            LeadActivityType leadActivityType = null;

            string storedProcName = "efrcrm_get_lead_activity_type_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_Activity_Type_Id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        leadActivityType = LoadLeadActivityType(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return leadActivityType;
        }


        public int InsertLeadActivityType(LeadActivityType leadActivityType)
        {
            return InsertLeadActivityType(leadActivityType, null);
        }

        private int InsertLeadActivityType(LeadActivityType leadActivityType, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_lead_activity_type";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_Activity_Type_Id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(leadActivityType.Description)));
                paramCol.Add(new SqlDataParameter("@Priority", DbType.Int32, DBValue.ToDBInt32(leadActivityType.Priority)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    leadActivityType.LeadActivityTypeId = DBValue.ToInt32(paramCol["@Lead_Activity_Type_Id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateLeadActivityType(LeadActivityType leadActivityType)
        {
            return UpdateLeadActivityType(leadActivityType, null);
        }

        private int UpdateLeadActivityType(LeadActivityType leadActivityType, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_lead_activity_type";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_Activity_Type_Id", DbType.Int32, DBValue.ToDBInt32(leadActivityType.LeadActivityTypeId)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(leadActivityType.Description)));
                paramCol.Add(new SqlDataParameter("@Priority", DbType.Int32, DBValue.ToDBInt32(leadActivityType.Priority)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region LeadChannel Methods

        private LeadChannel LoadLeadChannel(DataRow row)
        {
            LeadChannel leadChannel = new LeadChannel();

            // Store database values into our business object
            leadChannel.ChannelCode = DBValue.ToString(row["channel_code"]);
            leadChannel.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return leadChannel;
        }

        public LeadChannel[] GetLeadChannels()
        {
            return GetLeadChannels(null);
        }

        private LeadChannel[] GetLeadChannels(SqlInterface si)
        {
            LeadChannel[] leadChannels = null;

            string storedProcName = "efrcrm_get_lead_channels";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    leadChannels = new LeadChannel[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            leadChannels[i] = LoadLeadChannel(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return leadChannels;
        }

        public LeadChannel GetLeadChannelByID(string ID)
        {
            return GetLeadChannelByID(ID, null);
        }

        private LeadChannel GetLeadChannelByID(string ID, SqlInterface si)
        {
            LeadChannel leadChannel = null;

            string storedProcName = "efrcrm_get_lead_channel_by_ID";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@channel_code", DbType.String, ID));



                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {

                    // fill our objects
                    try
                    {
                        leadChannel = LoadLeadChannel(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }

                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return leadChannel;
        }


        #endregion

        #region LeadCombinaisons Methods

        private LeadCombinaisons LoadLeadCombinaisons(DataRow row)
        {
            LeadCombinaisons leadCombinaisons = new LeadCombinaisons();

            // Store database values into our business object
            leadCombinaisons.LeadCombinaisonID = DBValue.ToInt32(row["lead_combinaison_id"]);
            leadCombinaisons.ConditionID = DBValue.ToInt32(row["condition_id"]);
            leadCombinaisons.LeadQualificationTypeID = DBValue.ToInt32(row["lead_qualification_type_id"]);

            // return the filled object
            return leadCombinaisons;
        }

        public LeadCombinaisons[] GetLeadCombinaisonss()
        {
            return GetLeadCombinaisonss(null);
        }

        private LeadCombinaisons[] GetLeadCombinaisonss(SqlInterface si)
        {
            LeadCombinaisons[] leadCombinaisonss = null;

            string storedProcName = "efrcrm_get_lead_combinaisonss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    leadCombinaisonss = new LeadCombinaisons[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            leadCombinaisonss[i] = LoadLeadCombinaisons(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return leadCombinaisonss;
        }


        public LeadCombinaisons GetLeadCombinaisonsByID(int id)
        {
            return GetLeadCombinaisonsByID(id, null);
        }

        private LeadCombinaisons GetLeadCombinaisonsByID(int id, SqlInterface si)
        {
            LeadCombinaisons leadCombinaisons = null;

            string storedProcName = "efrcrm_get_lead_combinaisons_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_Combinaison_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        leadCombinaisons = LoadLeadCombinaisons(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return leadCombinaisons;
        }


        public int InsertLeadCombinaisons(LeadCombinaisons leadCombinaisons)
        {
            return InsertLeadCombinaisons(leadCombinaisons, null);
        }

        private int InsertLeadCombinaisons(LeadCombinaisons leadCombinaisons, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_lead_combinaisons";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_Combinaison_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Condition_ID", DbType.Int32, DBValue.ToDBInt32(leadCombinaisons.ConditionID)));
                paramCol.Add(new SqlDataParameter("@Lead_Qualification_Type_ID", DbType.Int32, DBValue.ToDBInt32(leadCombinaisons.LeadQualificationTypeID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    leadCombinaisons.LeadCombinaisonID = DBValue.ToInt32(paramCol["@Lead_Combinaison_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateLeadCombinaisons(LeadCombinaisons leadCombinaisons)
        {
            return UpdateLeadCombinaisons(leadCombinaisons, null);
        }

        private int UpdateLeadCombinaisons(LeadCombinaisons leadCombinaisons, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_lead_combinaisons";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_Combinaison_ID", DbType.Int32, DBValue.ToDBInt32(leadCombinaisons.LeadCombinaisonID)));
                paramCol.Add(new SqlDataParameter("@Condition_ID", DbType.Int32, DBValue.ToDBInt32(leadCombinaisons.ConditionID)));
                paramCol.Add(new SqlDataParameter("@Lead_Qualification_Type_ID", DbType.Int32, DBValue.ToDBInt32(leadCombinaisons.LeadQualificationTypeID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region LeadConditions Methods

        private LeadConditions LoadLeadConditions(DataRow row)
        {
            LeadConditions leadConditions = new LeadConditions();

            // Store database values into our business object
            leadConditions.ConditionID = DBValue.ToInt32(row["condition_id"]);
            leadConditions.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return leadConditions;
        }

        public LeadConditions[] GetLeadConditionss()
        {
            return GetLeadConditionss(null);
        }

        private LeadConditions[] GetLeadConditionss(SqlInterface si)
        {
            LeadConditions[] leadConditionss = null;

            string storedProcName = "efrcrm_get_lead_conditionss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    leadConditionss = new LeadConditions[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            leadConditionss[i] = LoadLeadConditions(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return leadConditionss;
        }


        public LeadConditions GetLeadConditionsByID(int id)
        {
            return GetLeadConditionsByID(id, null);
        }

        private LeadConditions GetLeadConditionsByID(int id, SqlInterface si)
        {
            LeadConditions leadConditions = null;

            string storedProcName = "efrcrm_get_lead_conditions_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Condition_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        leadConditions = LoadLeadConditions(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return leadConditions;
        }


        public int InsertLeadConditions(LeadConditions leadConditions)
        {
            return InsertLeadConditions(leadConditions, null);
        }

        private int InsertLeadConditions(LeadConditions leadConditions, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_lead_conditions";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Condition_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(leadConditions.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    leadConditions.ConditionID = DBValue.ToInt32(paramCol["@Condition_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateLeadConditions(LeadConditions leadConditions)
        {
            return UpdateLeadConditions(leadConditions, null);
        }

        private int UpdateLeadConditions(LeadConditions leadConditions, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_lead_conditions";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Condition_ID", DbType.Int32, DBValue.ToDBInt32(leadConditions.ConditionID)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(leadConditions.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region LeadCreditRating Methods

        private LeadCreditRating LoadLeadCreditRating(DataRow dr)
        {

            // Store database values into our business object
            LeadCreditRating lcr = new LeadCreditRating();
            lcr.LeadCreditRatingID = DBValue.ToInt32(dr["lead_credit_rating_id"]);
            lcr.Description = dr["description"].ToString();

            return lcr;
        }

        public LeadCreditRating GetLeadCreditRatingByID(int id)
        {
            return GetLeadCreditRatingByID(id, null);
        }

        private LeadCreditRating GetLeadCreditRatingByID(int id, SqlInterface si)
        {
            LeadCreditRating lcr = null;

            string storedProcName = "efrcrm_get_lead_credit_rating_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@lead_credit_rating_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        lcr = LoadLeadCreditRating(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return lcr;
        }

        public LeadCreditRating[] GetLeadCreditRating()
        {
            return GetLeadCreditRating(null);
        }

        private LeadCreditRating[] GetLeadCreditRating(SqlInterface si)
        {
            LeadCreditRating[] lcr = null;

            string storedProcName = "efrcrm_get_lead_credit_rating";



            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    lcr = new LeadCreditRating[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            lcr[i] = LoadLeadCreditRating(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }

            return lcr;
        }

        #endregion

        #region LeadDuplicatesLogin Methods

        private LeadDuplicatesLogin LoadLeadDuplicatesLogin(DataRow row)
        {
            LeadDuplicatesLogin leadDuplicatesLogin = new LeadDuplicatesLogin();

            // Store database values into our business object
            leadDuplicatesLogin.LEADDUPLICATESLOGINID = DBValue.ToInt32(row["lead_duplicates_login_id"]);
            leadDuplicatesLogin.DUPLICATESFOUND = DBValue.ToString(row["duplicates_found"]);
            leadDuplicatesLogin.RELATEDTABLE = DBValue.ToString(row["related_table"]);
            leadDuplicatesLogin.DETECTEDFIELDS = DBValue.ToString(row["detected_fields"]);
            leadDuplicatesLogin.FIELDSVALUES = DBValue.ToString(row["fields_values"]);
            leadDuplicatesLogin.NTLOGIN = DBValue.ToString(row["nt_login"]);
            leadDuplicatesLogin.MACHINE = DBValue.ToString(row["machine"]);
            leadDuplicatesLogin.TIMESTAMP = DBValue.ToDateTime(row["time_stamp"]);

            // return the filled object
            return leadDuplicatesLogin;
        }

        public LeadDuplicatesLogin[] GetLeadDuplicatesLogins()
        {
            return GetLeadDuplicatesLogins(null);
        }

        private LeadDuplicatesLogin[] GetLeadDuplicatesLogins(SqlInterface si)
        {
            LeadDuplicatesLogin[] leadDuplicatesLogins = null;

            string storedProcName = "efrcrm_get_lead_duplicates_logins";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    leadDuplicatesLogins = new LeadDuplicatesLogin[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            leadDuplicatesLogins[i] = LoadLeadDuplicatesLogin(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return leadDuplicatesLogins;
        }


        public LeadDuplicatesLogin GetLeadDuplicatesLoginByID(int id)
        {
            return GetLeadDuplicatesLoginByID(id, null);
        }

        private LeadDuplicatesLogin GetLeadDuplicatesLoginByID(int id, SqlInterface si)
        {
            LeadDuplicatesLogin leadDuplicatesLogin = null;

            string storedProcName = "efrcrm_get_lead_duplicates_login_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@LEAD_DUPLICATES_LOGIN_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        leadDuplicatesLogin = LoadLeadDuplicatesLogin(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return leadDuplicatesLogin;
        }


        public int InsertLeadDuplicatesLogin(LeadDuplicatesLogin leadDuplicatesLogin)
        {
            return InsertLeadDuplicatesLogin(leadDuplicatesLogin, null);
        }

        private int InsertLeadDuplicatesLogin(LeadDuplicatesLogin leadDuplicatesLogin, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_lead_duplicates_login";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@LEAD_DUPLICATES_LOGIN_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@DUPLICATES_FOUND", DbType.String, DBValue.ToDBString(leadDuplicatesLogin.DUPLICATESFOUND)));
                paramCol.Add(new SqlDataParameter("@RELATED_TABLE", DbType.String, DBValue.ToDBString(leadDuplicatesLogin.RELATEDTABLE)));
                paramCol.Add(new SqlDataParameter("@DETECTED_FIELDS", DbType.String, DBValue.ToDBString(leadDuplicatesLogin.DETECTEDFIELDS)));
                paramCol.Add(new SqlDataParameter("@FIELDS_VALUES", DbType.String, DBValue.ToDBString(leadDuplicatesLogin.FIELDSVALUES)));
                paramCol.Add(new SqlDataParameter("@NT_LOGIN", DbType.String, DBValue.ToDBString(leadDuplicatesLogin.NTLOGIN)));
                paramCol.Add(new SqlDataParameter("@MACHINE", DbType.String, DBValue.ToDBString(leadDuplicatesLogin.MACHINE)));
                paramCol.Add(new SqlDataParameter("@TIME_STAMP", DbType.DateTime, DBValue.ToDBDateTime(leadDuplicatesLogin.TIMESTAMP)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    leadDuplicatesLogin.LEADDUPLICATESLOGINID = DBValue.ToInt32(paramCol["@LEAD_DUPLICATES_LOGIN_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateLeadDuplicatesLogin(LeadDuplicatesLogin leadDuplicatesLogin)
        {
            return UpdateLeadDuplicatesLogin(leadDuplicatesLogin, null);
        }

        private int UpdateLeadDuplicatesLogin(LeadDuplicatesLogin leadDuplicatesLogin, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_lead_duplicates_login";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@LEAD_DUPLICATES_LOGIN_ID", DbType.Int32, DBValue.ToDBInt32(leadDuplicatesLogin.LEADDUPLICATESLOGINID)));
                paramCol.Add(new SqlDataParameter("@DUPLICATES_FOUND", DbType.String, DBValue.ToDBString(leadDuplicatesLogin.DUPLICATESFOUND)));
                paramCol.Add(new SqlDataParameter("@RELATED_TABLE", DbType.String, DBValue.ToDBString(leadDuplicatesLogin.RELATEDTABLE)));
                paramCol.Add(new SqlDataParameter("@DETECTED_FIELDS", DbType.String, DBValue.ToDBString(leadDuplicatesLogin.DETECTEDFIELDS)));
                paramCol.Add(new SqlDataParameter("@FIELDS_VALUES", DbType.String, DBValue.ToDBString(leadDuplicatesLogin.FIELDSVALUES)));
                paramCol.Add(new SqlDataParameter("@NT_LOGIN", DbType.String, DBValue.ToDBString(leadDuplicatesLogin.NTLOGIN)));
                paramCol.Add(new SqlDataParameter("@MACHINE", DbType.String, DBValue.ToDBString(leadDuplicatesLogin.MACHINE)));
                paramCol.Add(new SqlDataParameter("@TIME_STAMP", DbType.DateTime, DBValue.ToDBDateTime(leadDuplicatesLogin.TIMESTAMP)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region LeadInterestProductClass Methods

        private LeadInterestProductClass LoadLeadInterestProductClass(DataRow row)
        {
            LeadInterestProductClass leadInterestProductClass = new LeadInterestProductClass();

            // Store database values into our business object
            leadInterestProductClass.LeadId = DBValue.ToInt32(row["lead_id"]);
            leadInterestProductClass.ProductClassId = DBValue.ToByte(row["product_class_id"]);

            // return the filled object
            return leadInterestProductClass;
        }

        public LeadInterestProductClass[] GetLeadInterestProductClasss()
        {
            return GetLeadInterestProductClasss(null);
        }

        private LeadInterestProductClass[] GetLeadInterestProductClasss(SqlInterface si)
        {
            LeadInterestProductClass[] leadInterestProductClasss = null;

            string storedProcName = "efrcrm_get_lead_interest_product_classs";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    leadInterestProductClasss = new LeadInterestProductClass[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            leadInterestProductClasss[i] = LoadLeadInterestProductClass(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return leadInterestProductClasss;
        }


        public LeadInterestProductClass GetLeadInterestProductClassByID(int id)
        {
            return GetLeadInterestProductClassByID(id, null);
        }

        private LeadInterestProductClass GetLeadInterestProductClassByID(int id, SqlInterface si)
        {
            LeadInterestProductClass leadInterestProductClass = null;

            string storedProcName = "efrcrm_get_lead_interest_product_class_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        leadInterestProductClass = LoadLeadInterestProductClass(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return leadInterestProductClass;
        }


        public int InsertLeadInterestProductClass(LeadInterestProductClass leadInterestProductClass)
        {
            return InsertLeadInterestProductClass(leadInterestProductClass, null);
        }

        private int InsertLeadInterestProductClass(LeadInterestProductClass leadInterestProductClass, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_lead_interest_product_class";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_id", DbType.Int32, DBValue.ToDBInt32(leadInterestProductClass.LeadId)));
                paramCol.Add(new SqlDataParameter("@Product_class_id", DbType.Byte, DBValue.ToDBByte(leadInterestProductClass.ProductClassId)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    leadInterestProductClass.LeadId = DBValue.ToInt32(paramCol["@Lead_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateLeadInterestProductClass(LeadInterestProductClass leadInterestProductClass)
        {
            return UpdateLeadInterestProductClass(leadInterestProductClass, null);
        }

        private int UpdateLeadInterestProductClass(LeadInterestProductClass leadInterestProductClass, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_lead_interest_product_class";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_id", DbType.Int32, DBValue.ToDBInt32(leadInterestProductClass.LeadId)));
                paramCol.Add(new SqlDataParameter("@Product_class_id", DbType.Byte, DBValue.ToDBByte(leadInterestProductClass.ProductClassId)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion


        #region LeadPriority Methods

        private LeadPriority LoadLeadPriority(DataRow row)
        {
            LeadPriority leadPriority = new LeadPriority();

            // Store database values into our business object
            leadPriority.LeadPriorityId = DBValue.ToInt32(row["lead_priority_id"]);
            leadPriority.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return leadPriority;
        }

        public LeadPriority[] GetLeadPrioritys()
        {
            return GetLeadPrioritys(null);
        }

        private LeadPriority[] GetLeadPrioritys(SqlInterface si)
        {
            LeadPriority[] leadPrioritys = null;

            string storedProcName = "efrcrm_get_lead_prioritys";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    leadPrioritys = new LeadPriority[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            leadPrioritys[i] = LoadLeadPriority(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return leadPrioritys;
        }


        public LeadPriority GetLeadPriorityByID(int id)
        {
            return GetLeadPriorityByID(id, null);
        }

        private LeadPriority GetLeadPriorityByID(int id, SqlInterface si)
        {
            LeadPriority leadPriority = null;

            string storedProcName = "efrcrm_get_lead_priority_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_Priority_Id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        leadPriority = LoadLeadPriority(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return leadPriority;
        }


        public int InsertLeadPriority(LeadPriority leadPriority)
        {
            return InsertLeadPriority(leadPriority, null);
        }

        private int InsertLeadPriority(LeadPriority leadPriority, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_lead_priority";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_Priority_Id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(leadPriority.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    leadPriority.LeadPriorityId = DBValue.ToInt32(paramCol["@Lead_Priority_Id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateLeadPriority(LeadPriority leadPriority)
        {
            return UpdateLeadPriority(leadPriority, null);
        }

        private int UpdateLeadPriority(LeadPriority leadPriority, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_lead_priority";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_Priority_Id", DbType.Int32, DBValue.ToDBInt32(leadPriority.LeadPriorityId)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(leadPriority.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region LeadPromotion Methods

        private LeadPromotion LoadLeadPromotion(DataRow row)
        {
            LeadPromotion leadPromotion = new LeadPromotion();

            // Store database values into our business object
            leadPromotion.LeadPromotionId = DBValue.ToInt32(row["lead_promotion_id"]);
            leadPromotion.LeadId = DBValue.ToInt32(row["lead_id"]);
            leadPromotion.PromotionId = DBValue.ToInt32(row["promotion_id"]);
            leadPromotion.EntryDate = DBValue.ToDateTime(row["entry_date"]);

            // return the filled object
            return leadPromotion;
        }

        public LeadPromotion[] GetLeadPromotions()
        {
            return GetLeadPromotions(null);
        }

        private LeadPromotion[] GetLeadPromotions(SqlInterface si)
        {
            LeadPromotion[] leadPromotions = null;

            string storedProcName = "efrcrm_get_lead_promotions";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    leadPromotions = new LeadPromotion[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            leadPromotions[i] = LoadLeadPromotion(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return leadPromotions;
        }


        public LeadPromotion GetLeadPromotionByID(int id)
        {
            return GetLeadPromotionByID(id, null);
        }

        private LeadPromotion GetLeadPromotionByID(int id, SqlInterface si)
        {
            LeadPromotion leadPromotion = null;

            string storedProcName = "efrcrm_get_lead_promotion_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_Promotion_Id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        leadPromotion = LoadLeadPromotion(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return leadPromotion;
        }


        public int InsertLeadPromotion(LeadPromotion leadPromotion)
        {
            return InsertLeadPromotion(leadPromotion, null);
        }

        private int InsertLeadPromotion(LeadPromotion leadPromotion, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_lead_promotion";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_Promotion_Id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Lead_Id", DbType.Int32, DBValue.ToDBInt32(leadPromotion.LeadId)));
                paramCol.Add(new SqlDataParameter("@Promotion_Id", DbType.Int32, DBValue.ToDBInt32(leadPromotion.PromotionId)));
                paramCol.Add(new SqlDataParameter("@Entry_Date", DbType.DateTime, DBValue.ToDBDateTime(leadPromotion.EntryDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    leadPromotion.LeadPromotionId = DBValue.ToInt32(paramCol["@Lead_Promotion_Id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateLeadPromotion(LeadPromotion leadPromotion)
        {
            return UpdateLeadPromotion(leadPromotion, null);
        }

        private int UpdateLeadPromotion(LeadPromotion leadPromotion, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_lead_promotion";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_Promotion_Id", DbType.Int32, DBValue.ToDBInt32(leadPromotion.LeadPromotionId)));
                paramCol.Add(new SqlDataParameter("@Lead_Id", DbType.Int32, DBValue.ToDBInt32(leadPromotion.LeadId)));
                paramCol.Add(new SqlDataParameter("@Promotion_Id", DbType.Int32, DBValue.ToDBInt32(leadPromotion.PromotionId)));
                paramCol.Add(new SqlDataParameter("@Entry_Date", DbType.DateTime, DBValue.ToDBDateTime(leadPromotion.EntryDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region LeadQualificationType Methods

        private LeadQualificationType LoadLeadQualificationType(DataRow row)
        {
            LeadQualificationType leadQualificationType = new LeadQualificationType();

            // Store database values into our business object
            leadQualificationType.LeadQualificationTypeID = DBValue.ToInt32(row["lead_qualification_type_id"]);
            leadQualificationType.Description = DBValue.ToString(row["description"]);
            leadQualificationType.Weight = DBValue.ToInt32(row["weight"]);

            // return the filled object
            return leadQualificationType;
        }

        public LeadQualificationType[] GetLeadQualificationTypes()
        {
            return GetLeadQualificationTypes(null);
        }

        private LeadQualificationType[] GetLeadQualificationTypes(SqlInterface si)
        {
            LeadQualificationType[] leadQualificationTypes = null;

            string storedProcName = "efrcrm_get_lead_qualification_types";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    leadQualificationTypes = new LeadQualificationType[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            leadQualificationTypes[i] = LoadLeadQualificationType(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return leadQualificationTypes;
        }


        public LeadQualificationType GetLeadQualificationTypeByID(int id)
        {
            return GetLeadQualificationTypeByID(id, null);
        }

        private LeadQualificationType GetLeadQualificationTypeByID(int id, SqlInterface si)
        {
            LeadQualificationType leadQualificationType = null;

            string storedProcName = "efrcrm_get_lead_qualification_type_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_Qualification_Type_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        leadQualificationType = LoadLeadQualificationType(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return leadQualificationType;
        }


        public int InsertLeadQualificationType(LeadQualificationType leadQualificationType)
        {
            return InsertLeadQualificationType(leadQualificationType, null);
        }

        private int InsertLeadQualificationType(LeadQualificationType leadQualificationType, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_lead_qualification_type";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_Qualification_Type_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(leadQualificationType.Description)));
                paramCol.Add(new SqlDataParameter("@Weight", DbType.Int32, DBValue.ToDBInt32(leadQualificationType.Weight)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    leadQualificationType.LeadQualificationTypeID = DBValue.ToInt32(paramCol["@Lead_Qualification_Type_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateLeadQualificationType(LeadQualificationType leadQualificationType)
        {
            return UpdateLeadQualificationType(leadQualificationType, null);
        }

        private int UpdateLeadQualificationType(LeadQualificationType leadQualificationType, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_lead_qualification_type";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_Qualification_Type_ID", DbType.Int32, DBValue.ToDBInt32(leadQualificationType.LeadQualificationTypeID)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(leadQualificationType.Description)));
                paramCol.Add(new SqlDataParameter("@Weight", DbType.Int32, DBValue.ToDBInt32(leadQualificationType.Weight)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region LeadStatus Methods

        private LeadStatus LoadLeadStatus(DataRow row)
        {
            LeadStatus leadStatus = new LeadStatus();

            // Store database values into our business object
            leadStatus.LeadStatusID = DBValue.ToInt32(row["lead_status_id"]);
            leadStatus.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return leadStatus;
        }

        public LeadStatus[] GetLeadStatuss()
        {
            return GetLeadStatuss(null);
        }

        private LeadStatus[] GetLeadStatuss(SqlInterface si)
        {
            LeadStatus[] leadStatuss = null;

            string storedProcName = "efrcrm_get_lead_statuss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    leadStatuss = new LeadStatus[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            leadStatuss[i] = LoadLeadStatus(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return leadStatuss;
        }


        public LeadStatus GetLeadStatusByID(int id)
        {
            return GetLeadStatusByID(id, null);
        }

        private LeadStatus GetLeadStatusByID(int id, SqlInterface si)
        {
            LeadStatus leadStatus = null;

            string storedProcName = "efrcrm_get_lead_status_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_Status_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        leadStatus = LoadLeadStatus(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return leadStatus;
        }


        public int InsertLeadStatus(LeadStatus leadStatus)
        {
            return InsertLeadStatus(leadStatus, null);
        }

        private int InsertLeadStatus(LeadStatus leadStatus, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_lead_status";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_Status_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(leadStatus.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    leadStatus.LeadStatusID = DBValue.ToInt32(paramCol["@Lead_Status_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateLeadStatus(LeadStatus leadStatus)
        {
            return UpdateLeadStatus(leadStatus, null);
        }

        private int UpdateLeadStatus(LeadStatus leadStatus, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_lead_status";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_Status_ID", DbType.Int32, DBValue.ToDBInt32(leadStatus.LeadStatusID)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(leadStatus.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region LeadVisit Methods

        private LeadVisit LoadLeadVisit(DataRow row)
        {
            LeadVisit leadVisit = new LeadVisit();

            // Store database values into our business object
            leadVisit.LeadVisitID = DBValue.ToInt32(row["lead_visit_id"]);
            leadVisit.PromotionID = DBValue.ToInt32(row["promotion_id"]);
            leadVisit.LeadID = DBValue.ToInt32(row["lead_id"]);
            leadVisit.TempLeadID = DBValue.ToInt32(row["temp_lead_id"]);
            leadVisit.VisitDate = DBValue.ToDateTime(row["visit_date"]);
            leadVisit.ChannelCode = DBValue.ToString(row["channel_code"]);

            // return the filled object
            return leadVisit;
        }

        public LeadVisit[] GetLeadVisits()
        {
            return GetLeadVisits(null);
        }

        private LeadVisit[] GetLeadVisits(SqlInterface si)
        {
            LeadVisit[] leadVisits = null;

            string storedProcName = "efrcrm_get_lead_visits";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    leadVisits = new LeadVisit[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            leadVisits[i] = LoadLeadVisit(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return leadVisits;
        }

        public LeadVisit[] GetLeadVisitsByLeadID(int leadID)
        {
            return GetLeadVisitsByLeadID(leadID, null);
        }

        private LeadVisit[] GetLeadVisitsByLeadID(int leadID, SqlInterface si)
        {
            LeadVisit[] leadVisits = null;

            string storedProcName = "efrcrm_get_lead_visits_by_lead_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_ID", DbType.Int32, DBValue.ToDBInt32(leadID)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    leadVisits = new LeadVisit[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            leadVisits[i] = LoadLeadVisit(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return leadVisits;
        }

        public LeadVisit[] GetLeadVisitWithoutPromoKit()
        {
            return GetLeadVisitWithoutPromoKit(null);
        }
        private LeadVisit[] GetLeadVisitWithoutPromoKit(SqlInterface si)
        {
            LeadVisit[] leadVisits = null;

            string storedProcName = "efrcrm_get_lead_visits_wihout_promotional_kit";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    leadVisits = new LeadVisit[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            leadVisits[i] = LoadLeadVisit(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return leadVisits;
        }
        public LeadVisit GetLeadVisitByID(int id)
        {
            return GetLeadVisitByID(id, null);
        }

        private LeadVisit GetLeadVisitByID(int id, SqlInterface si)
        {
            LeadVisit leadVisit = null;

            string storedProcName = "efrcrm_get_lead_visit_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_Visit_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        leadVisit = LoadLeadVisit(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return leadVisit;
        }

        public LeadVisit GetLastLeadVisitByLeadID(int leadID)
        {
            return GetLastLeadVisitByLeadID(leadID, null);
        }
        private LeadVisit GetLastLeadVisitByLeadID(int leadID, SqlInterface si)
        {
            LeadVisit leadVisit = null;

            string storedProcName = "efrcrm_get_lead_visit_last_by_lead_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_ID", DbType.Int32, DBValue.ToDBInt32(leadID)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        leadVisit = LoadLeadVisit(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return leadVisit;
        }

        public int InsertLeadVisit(LeadVisit leadVisit)
        {
            return InsertLeadVisit(leadVisit, null);
        }

        private int InsertLeadVisit(LeadVisit leadVisit, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_lead_visit";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_Visit_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Promotion_ID", DbType.Int32, DBValue.ToDBInt32(leadVisit.PromotionID)));
                paramCol.Add(new SqlDataParameter("@Lead_ID", DbType.Int32, DBValue.ToDBInt32(leadVisit.LeadID)));
                paramCol.Add(new SqlDataParameter("@Temp_Lead_ID", DbType.Int32, DBValue.ToDBInt32(leadVisit.TempLeadID)));
                paramCol.Add(new SqlDataParameter("@Visit_Date", DbType.DateTime, DBValue.ToDBDateTime(leadVisit.VisitDate)));
                paramCol.Add(new SqlDataParameter("@Channel_Code", DbType.String, DBValue.ToDBString(leadVisit.ChannelCode)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    leadVisit.LeadVisitID = DBValue.ToInt32(paramCol["@Lead_Visit_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }

        // please pay attion because this function is designed to use properties of Lead class from efundraisingCore and not from efundraisingCRM
        // function was introduced during Link server retirement when it became clear that we have at least 3 leads types classes
        // in solution (EfundraisingCRM.Lead, EfundraisingCore.Lead, efundraising.Lead) that completely independent from each other. 
        // Ideally that should be migrate to one unique classes with some extra inherited if needed,
        // otherwise it will cause the greate deal of confusion

        public int InsertLeadVisit(int leadID, int promotionID, int tempLeadID)
        {
            string storedProcName = "es_insert_lead_visit";
            int leadVisitID = int.MinValue;
            bool useTransaction = false;

            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@lead_id", DbType.Int32, DBValue.ToDBInt32(leadID)));
                paramCol.Add(new SqlDataParameter("@promotion_id", DbType.Int32, DBValue.ToDBInt32(promotionID)));
                paramCol.Add(new SqlDataParameter("@temp_lead_id", DbType.Int32, DBValue.ToDBInt32(tempLeadID)));
                paramCol.Add(new SqlDataParameter("@lead_visit_id", DbType.Int32, ParameterDirection.ReturnValue));

                si.Open();

                if (useTransaction)
                    si.BeginTransaction();

                // Execute
                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                leadVisitID = DBValue.ToInt32(paramCol["@lead_visit_id"].Value);

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();

                return leadVisitID;

            }
            catch (Exception ex)
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw ex;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }

        public int UpdateLeadVisit(LeadVisit leadVisit)
        {
            return UpdateLeadVisit(leadVisit, null);
        }

        private int UpdateLeadVisit(LeadVisit leadVisit, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_lead_visit";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_Visit_ID", DbType.Int32, DBValue.ToDBInt32(leadVisit.LeadVisitID)));
                paramCol.Add(new SqlDataParameter("@Promotion_ID", DbType.Int32, DBValue.ToDBInt32(leadVisit.PromotionID)));
                paramCol.Add(new SqlDataParameter("@Lead_ID", DbType.Int32, DBValue.ToDBInt32(leadVisit.LeadID)));
                paramCol.Add(new SqlDataParameter("@Temp_Lead_ID", DbType.Int32, DBValue.ToDBInt32(leadVisit.TempLeadID)));
                paramCol.Add(new SqlDataParameter("@Visit_Date", DbType.DateTime, DBValue.ToDBDateTime(leadVisit.VisitDate)));
                paramCol.Add(new SqlDataParameter("@Channel_Code", DbType.String, DBValue.ToDBString(leadVisit.ChannelCode)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region LocalSponsor Methods

        private LocalSponsor LoadLocalSponsor(DataRow row)
        {
            LocalSponsor localSponsor = new LocalSponsor();

            // Store database values into our business object
            localSponsor.BrandID = DBValue.ToInt32(row["brand_id"]);
            localSponsor.LocalSponsorID = DBValue.ToInt32(row["local_sponsor_id"]);
            localSponsor.Salutation = DBValue.ToString(row["salutation"]);
            localSponsor.FirstName = DBValue.ToString(row["first_name"]);
            localSponsor.MiddleInitial = DBValue.ToString(row["middle_initial"]);
            localSponsor.LastName = DBValue.ToString(row["last_name"]);
            localSponsor.Title = DBValue.ToString(row["title"]);
            localSponsor.StreetAddress = DBValue.ToString(row["street_address"]);
            localSponsor.CityName = DBValue.ToString(row["city_name"]);
            localSponsor.StateCode = DBValue.ToString(row["state_code"]);
            localSponsor.ZipCode = DBValue.ToString(row["zip_code"]);
            localSponsor.CountryCode = DBValue.ToString(row["country_code"]);
            localSponsor.DayPhone = DBValue.ToString(row["day_phone"]);
            localSponsor.DayTimeCall = DBValue.ToString(row["day_time_call"]);
            localSponsor.EveningPhone = DBValue.ToString(row["evening_phone"]);
            localSponsor.EveningTimeCall = DBValue.ToString(row["evening_time_call"]);
            localSponsor.AlternatePhone = DBValue.ToString(row["alternate_phone"]);
            localSponsor.FaxNumber = DBValue.ToString(row["fax_number"]);
            localSponsor.Email = DBValue.ToString(row["email"]);
            localSponsor.ApprovalDate = DBValue.ToDateTime(row["approval_date"]);
            localSponsor.Comment = DBValue.ToString(row["comment"]);
            localSponsor.SponsorConsultantID = DBValue.ToInt32(row["sponsor_consultant_id"]);
            localSponsor.LastContact = DBValue.ToDateTime(row["last_contact"]);
            localSponsor.LocalSponsorStepsId = DBValue.ToInt32(row["local_sponsor_steps_id"]);

            // return the filled object
            return localSponsor;
        }

        public LocalSponsor[] GetLocalSponsors()
        {
            return GetLocalSponsors(null);
        }

        private LocalSponsor[] GetLocalSponsors(SqlInterface si)
        {
            LocalSponsor[] localSponsors = null;

            string storedProcName = "efrcrm_get_local_sponsors";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    localSponsors = new LocalSponsor[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            localSponsors[i] = LoadLocalSponsor(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return localSponsors;
        }


        public LocalSponsor GetLocalSponsorByID(int id)
        {
            return GetLocalSponsorByID(id, null);
        }

        private LocalSponsor GetLocalSponsorByID(int id, SqlInterface si)
        {
            LocalSponsor localSponsor = null;

            string storedProcName = "efrcrm_get_local_sponsor_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Brand_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        localSponsor = LoadLocalSponsor(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return localSponsor;
        }


        public int InsertLocalSponsor(LocalSponsor localSponsor)
        {
            return InsertLocalSponsor(localSponsor, null);
        }

        private int InsertLocalSponsor(LocalSponsor localSponsor, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_local_sponsor";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Brand_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Local_Sponsor_ID", DbType.Int32, DBValue.ToDBInt32(localSponsor.LocalSponsorID)));
                paramCol.Add(new SqlDataParameter("@Salutation", DbType.String, DBValue.ToDBString(localSponsor.Salutation)));
                paramCol.Add(new SqlDataParameter("@First_Name", DbType.String, DBValue.ToDBString(localSponsor.FirstName)));
                paramCol.Add(new SqlDataParameter("@Middle_Initial", DbType.String, DBValue.ToDBString(localSponsor.MiddleInitial)));
                paramCol.Add(new SqlDataParameter("@Last_Name", DbType.String, DBValue.ToDBString(localSponsor.LastName)));
                paramCol.Add(new SqlDataParameter("@Title", DbType.String, DBValue.ToDBString(localSponsor.Title)));
                paramCol.Add(new SqlDataParameter("@Street_Address", DbType.String, DBValue.ToDBString(localSponsor.StreetAddress)));
                paramCol.Add(new SqlDataParameter("@City_Name", DbType.String, DBValue.ToDBString(localSponsor.CityName)));
                paramCol.Add(new SqlDataParameter("@State_Code", DbType.String, DBValue.ToDBString(localSponsor.StateCode)));
                paramCol.Add(new SqlDataParameter("@Zip_Code", DbType.String, DBValue.ToDBString(localSponsor.ZipCode)));
                paramCol.Add(new SqlDataParameter("@Country_Code", DbType.String, DBValue.ToDBString(localSponsor.CountryCode)));
                paramCol.Add(new SqlDataParameter("@Day_Phone", DbType.String, DBValue.ToDBString(localSponsor.DayPhone)));
                paramCol.Add(new SqlDataParameter("@Day_Time_Call", DbType.String, DBValue.ToDBString(localSponsor.DayTimeCall)));
                paramCol.Add(new SqlDataParameter("@Evening_Phone", DbType.String, DBValue.ToDBString(localSponsor.EveningPhone)));
                paramCol.Add(new SqlDataParameter("@Evening_Time_Call", DbType.String, DBValue.ToDBString(localSponsor.EveningTimeCall)));
                paramCol.Add(new SqlDataParameter("@Alternate_Phone", DbType.String, DBValue.ToDBString(localSponsor.AlternatePhone)));
                paramCol.Add(new SqlDataParameter("@Fax_Number", DbType.String, DBValue.ToDBString(localSponsor.FaxNumber)));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(localSponsor.Email)));
                paramCol.Add(new SqlDataParameter("@Approval_Date", DbType.DateTime, DBValue.ToDBDateTime(localSponsor.ApprovalDate)));
                paramCol.Add(new SqlDataParameter("@Comment", DbType.String, DBValue.ToDBString(localSponsor.Comment)));
                paramCol.Add(new SqlDataParameter("@Sponsor_Consultant_ID", DbType.Int32, DBValue.ToDBInt32(localSponsor.SponsorConsultantID)));
                paramCol.Add(new SqlDataParameter("@Last_Contact", DbType.DateTime, DBValue.ToDBDateTime(localSponsor.LastContact)));
                paramCol.Add(new SqlDataParameter("@Local_Sponsor_Steps_Id", DbType.Int32, DBValue.ToDBInt32(localSponsor.LocalSponsorStepsId)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    localSponsor.BrandID = DBValue.ToInt32(paramCol["@Brand_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateLocalSponsor(LocalSponsor localSponsor)
        {
            return UpdateLocalSponsor(localSponsor, null);
        }

        private int UpdateLocalSponsor(LocalSponsor localSponsor, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_local_sponsor";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Brand_ID", DbType.Int32, DBValue.ToDBInt32(localSponsor.BrandID)));
                paramCol.Add(new SqlDataParameter("@Local_Sponsor_ID", DbType.Int32, DBValue.ToDBInt32(localSponsor.LocalSponsorID)));
                paramCol.Add(new SqlDataParameter("@Salutation", DbType.String, DBValue.ToDBString(localSponsor.Salutation)));
                paramCol.Add(new SqlDataParameter("@First_Name", DbType.String, DBValue.ToDBString(localSponsor.FirstName)));
                paramCol.Add(new SqlDataParameter("@Middle_Initial", DbType.String, DBValue.ToDBString(localSponsor.MiddleInitial)));
                paramCol.Add(new SqlDataParameter("@Last_Name", DbType.String, DBValue.ToDBString(localSponsor.LastName)));
                paramCol.Add(new SqlDataParameter("@Title", DbType.String, DBValue.ToDBString(localSponsor.Title)));
                paramCol.Add(new SqlDataParameter("@Street_Address", DbType.String, DBValue.ToDBString(localSponsor.StreetAddress)));
                paramCol.Add(new SqlDataParameter("@City_Name", DbType.String, DBValue.ToDBString(localSponsor.CityName)));
                paramCol.Add(new SqlDataParameter("@State_Code", DbType.String, DBValue.ToDBString(localSponsor.StateCode)));
                paramCol.Add(new SqlDataParameter("@Zip_Code", DbType.String, DBValue.ToDBString(localSponsor.ZipCode)));
                paramCol.Add(new SqlDataParameter("@Country_Code", DbType.String, DBValue.ToDBString(localSponsor.CountryCode)));
                paramCol.Add(new SqlDataParameter("@Day_Phone", DbType.String, DBValue.ToDBString(localSponsor.DayPhone)));
                paramCol.Add(new SqlDataParameter("@Day_Time_Call", DbType.String, DBValue.ToDBString(localSponsor.DayTimeCall)));
                paramCol.Add(new SqlDataParameter("@Evening_Phone", DbType.String, DBValue.ToDBString(localSponsor.EveningPhone)));
                paramCol.Add(new SqlDataParameter("@Evening_Time_Call", DbType.String, DBValue.ToDBString(localSponsor.EveningTimeCall)));
                paramCol.Add(new SqlDataParameter("@Alternate_Phone", DbType.String, DBValue.ToDBString(localSponsor.AlternatePhone)));
                paramCol.Add(new SqlDataParameter("@Fax_Number", DbType.String, DBValue.ToDBString(localSponsor.FaxNumber)));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(localSponsor.Email)));
                paramCol.Add(new SqlDataParameter("@Approval_Date", DbType.DateTime, DBValue.ToDBDateTime(localSponsor.ApprovalDate)));
                paramCol.Add(new SqlDataParameter("@Comment", DbType.String, DBValue.ToDBString(localSponsor.Comment)));
                paramCol.Add(new SqlDataParameter("@Sponsor_Consultant_ID", DbType.Int32, DBValue.ToDBInt32(localSponsor.SponsorConsultantID)));
                paramCol.Add(new SqlDataParameter("@Last_Contact", DbType.DateTime, DBValue.ToDBDateTime(localSponsor.LastContact)));
                paramCol.Add(new SqlDataParameter("@Local_Sponsor_Steps_Id", DbType.Int32, DBValue.ToDBInt32(localSponsor.LocalSponsorStepsId)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region LocalSponsorActivity Methods

        private LocalSponsorActivity LoadLocalSponsorActivity(DataRow row)
        {
            LocalSponsorActivity localSponsorActivity = new LocalSponsorActivity();

            // Store database values into our business object
            localSponsorActivity.LocalSponsorActivityID = DBValue.ToInt32(row["local_sponsor_activity_id"]);
            localSponsorActivity.LocalSponsorActivityTypeID = DBValue.ToInt32(row["local_sponsor_activity_type_id"]);
            localSponsorActivity.SalesID = DBValue.ToInt32(row["sales_id"]);
            localSponsorActivity.SponsorConsultantID = DBValue.ToInt32(row["sponsor_consultant_id"]);
            localSponsorActivity.LocalSponsorActivityDate = DBValue.ToDateTime(row["local_sponsor_activity_date"]);
            localSponsorActivity.CompletedDate = DBValue.ToDateTime(row["completed_date"]);
            localSponsorActivity.Comments = DBValue.ToString(row["comments"]);
            localSponsorActivity.BrandID = DBValue.ToInt32(row["brand_id"]);
            localSponsorActivity.LocalSponsorID = DBValue.ToInt32(row["local_sponsor_id"]);

            // return the filled object
            return localSponsorActivity;
        }

        public LocalSponsorActivity[] GetLocalSponsorActivitys()
        {
            return GetLocalSponsorActivitys(null);
        }

        private LocalSponsorActivity[] GetLocalSponsorActivitys(SqlInterface si)
        {
            LocalSponsorActivity[] localSponsorActivitys = null;

            string storedProcName = "efrcrm_get_local_sponsor_activitys";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    localSponsorActivitys = new LocalSponsorActivity[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            localSponsorActivitys[i] = LoadLocalSponsorActivity(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return localSponsorActivitys;
        }


        public LocalSponsorActivity GetLocalSponsorActivityByID(int id)
        {
            return GetLocalSponsorActivityByID(id, null);
        }

        private LocalSponsorActivity GetLocalSponsorActivityByID(int id, SqlInterface si)
        {
            LocalSponsorActivity localSponsorActivity = null;

            string storedProcName = "efrcrm_get_local_sponsor_activity_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Local_Sponsor_Activity_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        localSponsorActivity = LoadLocalSponsorActivity(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return localSponsorActivity;
        }


        public int InsertLocalSponsorActivity(LocalSponsorActivity localSponsorActivity)
        {
            return InsertLocalSponsorActivity(localSponsorActivity, null);
        }

        private int InsertLocalSponsorActivity(LocalSponsorActivity localSponsorActivity, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_local_sponsor_activity";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Local_Sponsor_Activity_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Local_Sponsor_Activity_Type_ID", DbType.Int32, DBValue.ToDBInt32(localSponsorActivity.LocalSponsorActivityTypeID)));
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(localSponsorActivity.SalesID)));
                paramCol.Add(new SqlDataParameter("@Sponsor_Consultant_ID", DbType.Int32, DBValue.ToDBInt32(localSponsorActivity.SponsorConsultantID)));
                paramCol.Add(new SqlDataParameter("@Local_Sponsor_Activity_Date", DbType.DateTime, DBValue.ToDBDateTime(localSponsorActivity.LocalSponsorActivityDate)));
                paramCol.Add(new SqlDataParameter("@Completed_Date", DbType.DateTime, DBValue.ToDBDateTime(localSponsorActivity.CompletedDate)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(localSponsorActivity.Comments)));
                paramCol.Add(new SqlDataParameter("@Brand_ID", DbType.Int32, DBValue.ToDBInt32(localSponsorActivity.BrandID)));
                paramCol.Add(new SqlDataParameter("@Local_Sponsor_ID", DbType.Int32, DBValue.ToDBInt32(localSponsorActivity.LocalSponsorID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    localSponsorActivity.LocalSponsorActivityID = DBValue.ToInt32(paramCol["@Local_Sponsor_Activity_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateLocalSponsorActivity(LocalSponsorActivity localSponsorActivity)
        {
            return UpdateLocalSponsorActivity(localSponsorActivity, null);
        }

        private int UpdateLocalSponsorActivity(LocalSponsorActivity localSponsorActivity, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_local_sponsor_activity";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Local_Sponsor_Activity_ID", DbType.Int32, DBValue.ToDBInt32(localSponsorActivity.LocalSponsorActivityID)));
                paramCol.Add(new SqlDataParameter("@Local_Sponsor_Activity_Type_ID", DbType.Int32, DBValue.ToDBInt32(localSponsorActivity.LocalSponsorActivityTypeID)));
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(localSponsorActivity.SalesID)));
                paramCol.Add(new SqlDataParameter("@Sponsor_Consultant_ID", DbType.Int32, DBValue.ToDBInt32(localSponsorActivity.SponsorConsultantID)));
                paramCol.Add(new SqlDataParameter("@Local_Sponsor_Activity_Date", DbType.DateTime, DBValue.ToDBDateTime(localSponsorActivity.LocalSponsorActivityDate)));
                paramCol.Add(new SqlDataParameter("@Completed_Date", DbType.DateTime, DBValue.ToDBDateTime(localSponsorActivity.CompletedDate)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(localSponsorActivity.Comments)));
                paramCol.Add(new SqlDataParameter("@Brand_ID", DbType.Int32, DBValue.ToDBInt32(localSponsorActivity.BrandID)));
                paramCol.Add(new SqlDataParameter("@Local_Sponsor_ID", DbType.Int32, DBValue.ToDBInt32(localSponsorActivity.LocalSponsorID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region LocalSponsorActivityType Methods

        private LocalSponsorActivityType LoadLocalSponsorActivityType(DataRow row)
        {
            LocalSponsorActivityType localSponsorActivityType = new LocalSponsorActivityType();

            // Store database values into our business object
            localSponsorActivityType.LocalSponsorActivityTypeId = DBValue.ToInt32(row["local_sponsor_activity_type_id"]);
            localSponsorActivityType.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return localSponsorActivityType;
        }

        public LocalSponsorActivityType[] GetLocalSponsorActivityTypes()
        {
            return GetLocalSponsorActivityTypes(null);
        }

        private LocalSponsorActivityType[] GetLocalSponsorActivityTypes(SqlInterface si)
        {
            LocalSponsorActivityType[] localSponsorActivityTypes = null;

            string storedProcName = "efrcrm_get_local_sponsor_activity_types";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    localSponsorActivityTypes = new LocalSponsorActivityType[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            localSponsorActivityTypes[i] = LoadLocalSponsorActivityType(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return localSponsorActivityTypes;
        }


        public LocalSponsorActivityType GetLocalSponsorActivityTypeByID(int id)
        {
            return GetLocalSponsorActivityTypeByID(id, null);
        }

        private LocalSponsorActivityType GetLocalSponsorActivityTypeByID(int id, SqlInterface si)
        {
            LocalSponsorActivityType localSponsorActivityType = null;

            string storedProcName = "efrcrm_get_local_sponsor_activity_type_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Local_Sponsor_Activity_Type_Id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        localSponsorActivityType = LoadLocalSponsorActivityType(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return localSponsorActivityType;
        }


        public int InsertLocalSponsorActivityType(LocalSponsorActivityType localSponsorActivityType)
        {
            return InsertLocalSponsorActivityType(localSponsorActivityType, null);
        }

        private int InsertLocalSponsorActivityType(LocalSponsorActivityType localSponsorActivityType, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_local_sponsor_activity_type";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Local_Sponsor_Activity_Type_Id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(localSponsorActivityType.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    localSponsorActivityType.LocalSponsorActivityTypeId = DBValue.ToInt32(paramCol["@Local_Sponsor_Activity_Type_Id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateLocalSponsorActivityType(LocalSponsorActivityType localSponsorActivityType)
        {
            return UpdateLocalSponsorActivityType(localSponsorActivityType, null);
        }

        private int UpdateLocalSponsorActivityType(LocalSponsorActivityType localSponsorActivityType, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_local_sponsor_activity_type";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Local_Sponsor_Activity_Type_Id", DbType.Int32, DBValue.ToDBInt32(localSponsorActivityType.LocalSponsorActivityTypeId)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(localSponsorActivityType.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region LocalSponsorSalesItem Methods

        private LocalSponsorSalesItem LoadLocalSponsorSalesItem(DataRow row)
        {
            LocalSponsorSalesItem localSponsorSalesItem = new LocalSponsorSalesItem();

            // Store database values into our business object
            localSponsorSalesItem.BrandID = DBValue.ToInt32(row["brand_id"]);
            localSponsorSalesItem.LocalSponsorID = DBValue.ToInt32(row["local_sponsor_id"]);
            localSponsorSalesItem.SalesID = DBValue.ToInt32(row["sales_id"]);
            localSponsorSalesItem.SalesItemNo = DBValue.ToInt32(row["sales_item_no"]);

            // return the filled object
            return localSponsorSalesItem;
        }

        public LocalSponsorSalesItem[] GetLocalSponsorSalesItems()
        {
            return GetLocalSponsorSalesItems(null);
        }

        private LocalSponsorSalesItem[] GetLocalSponsorSalesItems(SqlInterface si)
        {
            LocalSponsorSalesItem[] localSponsorSalesItems = null;

            string storedProcName = "efrcrm_get_local_sponsor_sales_items";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    localSponsorSalesItems = new LocalSponsorSalesItem[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            localSponsorSalesItems[i] = LoadLocalSponsorSalesItem(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return localSponsorSalesItems;
        }


        public LocalSponsorSalesItem GetLocalSponsorSalesItemByID(int id)
        {
            return GetLocalSponsorSalesItemByID(id, null);
        }

        private LocalSponsorSalesItem GetLocalSponsorSalesItemByID(int id, SqlInterface si)
        {
            LocalSponsorSalesItem localSponsorSalesItem = null;

            string storedProcName = "efrcrm_get_local_sponsor_sales_item_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Brand_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        localSponsorSalesItem = LoadLocalSponsorSalesItem(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return localSponsorSalesItem;
        }


        public int InsertLocalSponsorSalesItem(LocalSponsorSalesItem localSponsorSalesItem)
        {
            return InsertLocalSponsorSalesItem(localSponsorSalesItem, null);
        }

        private int InsertLocalSponsorSalesItem(LocalSponsorSalesItem localSponsorSalesItem, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_local_sponsor_sales_item";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Brand_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Local_Sponsor_ID", DbType.Int32, DBValue.ToDBInt32(localSponsorSalesItem.LocalSponsorID)));
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(localSponsorSalesItem.SalesID)));
                paramCol.Add(new SqlDataParameter("@Sales_Item_No", DbType.Int32, DBValue.ToDBInt32(localSponsorSalesItem.SalesItemNo)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    localSponsorSalesItem.BrandID = DBValue.ToInt32(paramCol["@Brand_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateLocalSponsorSalesItem(LocalSponsorSalesItem localSponsorSalesItem)
        {
            return UpdateLocalSponsorSalesItem(localSponsorSalesItem, null);
        }

        private int UpdateLocalSponsorSalesItem(LocalSponsorSalesItem localSponsorSalesItem, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_local_sponsor_sales_item";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Brand_ID", DbType.Int32, DBValue.ToDBInt32(localSponsorSalesItem.BrandID)));
                paramCol.Add(new SqlDataParameter("@Local_Sponsor_ID", DbType.Int32, DBValue.ToDBInt32(localSponsorSalesItem.LocalSponsorID)));
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(localSponsorSalesItem.SalesID)));
                paramCol.Add(new SqlDataParameter("@Sales_Item_No", DbType.Int32, DBValue.ToDBInt32(localSponsorSalesItem.SalesItemNo)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region LocalSponsorSteps Methods

        private LocalSponsorSteps LoadLocalSponsorSteps(DataRow row)
        {
            LocalSponsorSteps localSponsorSteps = new LocalSponsorSteps();

            // Store database values into our business object
            localSponsorSteps.StepId = DBValue.ToInt32(row["step_id"]);
            localSponsorSteps.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return localSponsorSteps;
        }

        public LocalSponsorSteps[] GetLocalSponsorStepss()
        {
            return GetLocalSponsorStepss(null);
        }

        private LocalSponsorSteps[] GetLocalSponsorStepss(SqlInterface si)
        {
            LocalSponsorSteps[] localSponsorStepss = null;

            string storedProcName = "efrcrm_get_local_sponsor_stepss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    localSponsorStepss = new LocalSponsorSteps[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            localSponsorStepss[i] = LoadLocalSponsorSteps(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return localSponsorStepss;
        }


        public LocalSponsorSteps GetLocalSponsorStepsByID(int id)
        {
            return GetLocalSponsorStepsByID(id, null);
        }

        private LocalSponsorSteps GetLocalSponsorStepsByID(int id, SqlInterface si)
        {
            LocalSponsorSteps localSponsorSteps = null;

            string storedProcName = "efrcrm_get_local_sponsor_steps_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Step_Id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        localSponsorSteps = LoadLocalSponsorSteps(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return localSponsorSteps;
        }


        public int InsertLocalSponsorSteps(LocalSponsorSteps localSponsorSteps)
        {
            return InsertLocalSponsorSteps(localSponsorSteps, null);
        }

        private int InsertLocalSponsorSteps(LocalSponsorSteps localSponsorSteps, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_local_sponsor_steps";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Step_Id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(localSponsorSteps.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    localSponsorSteps.StepId = DBValue.ToInt32(paramCol["@Step_Id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateLocalSponsorSteps(LocalSponsorSteps localSponsorSteps)
        {
            return UpdateLocalSponsorSteps(localSponsorSteps, null);
        }

        private int UpdateLocalSponsorSteps(LocalSponsorSteps localSponsorSteps, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_local_sponsor_steps";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Step_Id", DbType.Int32, DBValue.ToDBInt32(localSponsorSteps.StepId)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(localSponsorSteps.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region LogHarmonyTransferLeads Methods

        private LogHarmonyTransferLeads LoadLogHarmonyTransferLeads(DataRow row)
        {
            LogHarmonyTransferLeads logHarmonyTransferLeads = new LogHarmonyTransferLeads();

            // Store database values into our business object
            logHarmonyTransferLeads.ID = DBValue.ToInt32(row["id"]);
            logHarmonyTransferLeads.ListName = DBValue.ToString(row["list_name"]);
            logHarmonyTransferLeads.ListDesc = DBValue.ToString(row["list_desc"]);
            logHarmonyTransferLeads.OldConsultantId = DBValue.ToInt32(row["old_consultant_id"]);
            logHarmonyTransferLeads.NewConsultantId = DBValue.ToInt32(row["new_consultant_id"]);
            logHarmonyTransferLeads.TransfererId = DBValue.ToInt32(row["transferer_id"]);
            logHarmonyTransferLeads.TransferDate = DBValue.ToDateTime(row["transfer_date"]);
            logHarmonyTransferLeads.LeadId = DBValue.ToInt32(row["lead_id"]);

            // return the filled object
            return logHarmonyTransferLeads;
        }

        public LogHarmonyTransferLeads[] GetLogHarmonyTransferLeadss()
        {
            return GetLogHarmonyTransferLeadss(null);
        }

        private LogHarmonyTransferLeads[] GetLogHarmonyTransferLeadss(SqlInterface si)
        {
            LogHarmonyTransferLeads[] logHarmonyTransferLeadss = null;

            string storedProcName = "efrcrm_get_log_harmony_transfer_leadss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    logHarmonyTransferLeadss = new LogHarmonyTransferLeads[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            logHarmonyTransferLeadss[i] = LoadLogHarmonyTransferLeads(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return logHarmonyTransferLeadss;
        }


        public LogHarmonyTransferLeads GetLogHarmonyTransferLeadsByID(int id)
        {
            return GetLogHarmonyTransferLeadsByID(id, null);
        }

        private LogHarmonyTransferLeads GetLogHarmonyTransferLeadsByID(int id, SqlInterface si)
        {
            LogHarmonyTransferLeads logHarmonyTransferLeads = null;

            string storedProcName = "efrcrm_get_log_harmony_transfer_leads_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        logHarmonyTransferLeads = LoadLogHarmonyTransferLeads(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return logHarmonyTransferLeads;
        }


        public int InsertLogHarmonyTransferLeads(LogHarmonyTransferLeads logHarmonyTransferLeads)
        {
            return InsertLogHarmonyTransferLeads(logHarmonyTransferLeads, null);
        }

        private int InsertLogHarmonyTransferLeads(LogHarmonyTransferLeads logHarmonyTransferLeads, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_log_harmony_transfer_leads";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@List_name", DbType.String, DBValue.ToDBString(logHarmonyTransferLeads.ListName)));
                paramCol.Add(new SqlDataParameter("@List_desc", DbType.String, DBValue.ToDBString(logHarmonyTransferLeads.ListDesc)));
                paramCol.Add(new SqlDataParameter("@Old_consultant_id", DbType.Int32, DBValue.ToDBInt32(logHarmonyTransferLeads.OldConsultantId)));
                paramCol.Add(new SqlDataParameter("@New_consultant_id", DbType.Int32, DBValue.ToDBInt32(logHarmonyTransferLeads.NewConsultantId)));
                paramCol.Add(new SqlDataParameter("@Transferer_id", DbType.Int32, DBValue.ToDBInt32(logHarmonyTransferLeads.TransfererId)));
                paramCol.Add(new SqlDataParameter("@Transfer_date", DbType.DateTime, DBValue.ToDBDateTime(logHarmonyTransferLeads.TransferDate)));
                paramCol.Add(new SqlDataParameter("@Lead_id", DbType.Int32, DBValue.ToDBInt32(logHarmonyTransferLeads.LeadId)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    logHarmonyTransferLeads.ID = DBValue.ToInt32(paramCol["@ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateLogHarmonyTransferLeads(LogHarmonyTransferLeads logHarmonyTransferLeads)
        {
            return UpdateLogHarmonyTransferLeads(logHarmonyTransferLeads, null);
        }

        private int UpdateLogHarmonyTransferLeads(LogHarmonyTransferLeads logHarmonyTransferLeads, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_log_harmony_transfer_leads";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@ID", DbType.Int32, DBValue.ToDBInt32(logHarmonyTransferLeads.ID)));
                paramCol.Add(new SqlDataParameter("@List_name", DbType.String, DBValue.ToDBString(logHarmonyTransferLeads.ListName)));
                paramCol.Add(new SqlDataParameter("@List_desc", DbType.String, DBValue.ToDBString(logHarmonyTransferLeads.ListDesc)));
                paramCol.Add(new SqlDataParameter("@Old_consultant_id", DbType.Int32, DBValue.ToDBInt32(logHarmonyTransferLeads.OldConsultantId)));
                paramCol.Add(new SqlDataParameter("@New_consultant_id", DbType.Int32, DBValue.ToDBInt32(logHarmonyTransferLeads.NewConsultantId)));
                paramCol.Add(new SqlDataParameter("@Transferer_id", DbType.Int32, DBValue.ToDBInt32(logHarmonyTransferLeads.TransfererId)));
                paramCol.Add(new SqlDataParameter("@Transfer_date", DbType.DateTime, DBValue.ToDBDateTime(logHarmonyTransferLeads.TransferDate)));
                paramCol.Add(new SqlDataParameter("@Lead_id", DbType.Int32, DBValue.ToDBInt32(logHarmonyTransferLeads.LeadId)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region MailingCode Methods

        private MailingCode LoadMailingCode(DataRow row)
        {
            MailingCode mailingCode = new MailingCode();

            // Store database values into our business object
            mailingCode.MailingCodeID = DBValue.ToInt32(row["mailing_code_id"]);
            mailingCode.ListName = DBValue.ToString(row["list_name"]);
            mailingCode.ListID = DBValue.ToInt32(row["list_id"]);
            mailingCode.FlyerCode = DBValue.ToString(row["flyer_code"]);
            mailingCode.LaunchDate = DBValue.ToDateTime(row["launch_date"]);
            mailingCode.MailingCodeLabel = DBValue.ToString(row["mailing_code_label"]);
            mailingCode.MailingNameID = DBValue.ToInt32(row["mailing_name_id"]);

            // return the filled object
            return mailingCode;
        }

        public MailingCode[] GetMailingCodes()
        {
            return GetMailingCodes(null);
        }

        private MailingCode[] GetMailingCodes(SqlInterface si)
        {
            MailingCode[] mailingCodes = null;

            string storedProcName = "efrcrm_get_mailing_codes";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    mailingCodes = new MailingCode[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            mailingCodes[i] = LoadMailingCode(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return mailingCodes;
        }


        public MailingCode GetMailingCodeByID(int id)
        {
            return GetMailingCodeByID(id, null);
        }

        private MailingCode GetMailingCodeByID(int id, SqlInterface si)
        {
            MailingCode mailingCode = null;

            string storedProcName = "efrcrm_get_mailing_code_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Mailing_Code_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        mailingCode = LoadMailingCode(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return mailingCode;
        }


        public int InsertMailingCode(MailingCode mailingCode)
        {
            return InsertMailingCode(mailingCode, null);
        }

        private int InsertMailingCode(MailingCode mailingCode, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_mailing_code";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Mailing_Code_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@List_Name", DbType.String, DBValue.ToDBString(mailingCode.ListName)));
                paramCol.Add(new SqlDataParameter("@List_ID", DbType.Int32, DBValue.ToDBInt32(mailingCode.ListID)));
                paramCol.Add(new SqlDataParameter("@Flyer_Code", DbType.String, DBValue.ToDBString(mailingCode.FlyerCode)));
                paramCol.Add(new SqlDataParameter("@Launch_Date", DbType.DateTime, DBValue.ToDBDateTime(mailingCode.LaunchDate)));
                paramCol.Add(new SqlDataParameter("@Mailing_Code_Label", DbType.String, DBValue.ToDBString(mailingCode.MailingCodeLabel)));
                paramCol.Add(new SqlDataParameter("@Mailing_Name_ID", DbType.Int32, DBValue.ToDBInt32(mailingCode.MailingNameID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    mailingCode.MailingCodeID = DBValue.ToInt32(paramCol["@Mailing_Code_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateMailingCode(MailingCode mailingCode)
        {
            return UpdateMailingCode(mailingCode, null);
        }

        private int UpdateMailingCode(MailingCode mailingCode, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_mailing_code";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Mailing_Code_ID", DbType.Int32, DBValue.ToDBInt32(mailingCode.MailingCodeID)));
                paramCol.Add(new SqlDataParameter("@List_Name", DbType.String, DBValue.ToDBString(mailingCode.ListName)));
                paramCol.Add(new SqlDataParameter("@List_ID", DbType.Int32, DBValue.ToDBInt32(mailingCode.ListID)));
                paramCol.Add(new SqlDataParameter("@Flyer_Code", DbType.String, DBValue.ToDBString(mailingCode.FlyerCode)));
                paramCol.Add(new SqlDataParameter("@Launch_Date", DbType.DateTime, DBValue.ToDBDateTime(mailingCode.LaunchDate)));
                paramCol.Add(new SqlDataParameter("@Mailing_Code_Label", DbType.String, DBValue.ToDBString(mailingCode.MailingCodeLabel)));
                paramCol.Add(new SqlDataParameter("@Mailing_Name_ID", DbType.Int32, DBValue.ToDBInt32(mailingCode.MailingNameID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region MailingName Methods

        private MailingName LoadMailingName(DataRow row)
        {
            MailingName mailingName = new MailingName();

            // Store database values into our business object
            mailingName.MailingNameID = DBValue.ToInt32(row["mailing_name_id"]);
            mailingName.ListName = DBValue.ToString(row["list_name"]);
            mailingName.ListID = DBValue.ToInt32(row["list_id"]);
            mailingName.ContactName = DBValue.ToString(row["contact_name"]);
            mailingName.Title = DBValue.ToString(row["title"]);
            mailingName.SchoolName = DBValue.ToString(row["school_name"]);
            mailingName.SchoolAddress = DBValue.ToString(row["school_address"]);
            mailingName.City = DBValue.ToString(row["city"]);
            mailingName.StateCode = DBValue.ToString(row["state_code"]);
            mailingName.Zip = DBValue.ToString(row["zip"]);
            mailingName.PhoneNumber = DBValue.ToString(row["phone_number"]);
            mailingName.FaxNumber = DBValue.ToString(row["fax_number"]);
            mailingName.Email = DBValue.ToString(row["email"]);
            mailingName.SchoolType = DBValue.ToString(row["school_type"]);

            // return the filled object
            return mailingName;
        }

        public MailingName[] GetMailingNames()
        {
            return GetMailingNames(null);
        }

        private MailingName[] GetMailingNames(SqlInterface si)
        {
            MailingName[] mailingNames = null;

            string storedProcName = "efrcrm_get_mailing_names";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    mailingNames = new MailingName[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            mailingNames[i] = LoadMailingName(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return mailingNames;
        }


        public MailingName GetMailingNameByID(int id)
        {
            return GetMailingNameByID(id, null);
        }

        private MailingName GetMailingNameByID(int id, SqlInterface si)
        {
            MailingName mailingName = null;

            string storedProcName = "efrcrm_get_mailing_name_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Mailing_Name_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        mailingName = LoadMailingName(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return mailingName;
        }


        public int InsertMailingName(MailingName mailingName)
        {
            return InsertMailingName(mailingName, null);
        }

        private int InsertMailingName(MailingName mailingName, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_mailing_name";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Mailing_Name_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@List_Name", DbType.String, DBValue.ToDBString(mailingName.ListName)));
                paramCol.Add(new SqlDataParameter("@List_ID", DbType.Int32, DBValue.ToDBInt32(mailingName.ListID)));
                paramCol.Add(new SqlDataParameter("@Contact_Name", DbType.String, DBValue.ToDBString(mailingName.ContactName)));
                paramCol.Add(new SqlDataParameter("@Title", DbType.String, DBValue.ToDBString(mailingName.Title)));
                paramCol.Add(new SqlDataParameter("@School_Name", DbType.String, DBValue.ToDBString(mailingName.SchoolName)));
                paramCol.Add(new SqlDataParameter("@School_Address", DbType.String, DBValue.ToDBString(mailingName.SchoolAddress)));
                paramCol.Add(new SqlDataParameter("@City", DbType.String, DBValue.ToDBString(mailingName.City)));
                paramCol.Add(new SqlDataParameter("@State_Code", DbType.String, DBValue.ToDBString(mailingName.StateCode)));
                paramCol.Add(new SqlDataParameter("@Zip", DbType.String, DBValue.ToDBString(mailingName.Zip)));
                paramCol.Add(new SqlDataParameter("@Phone_Number", DbType.String, DBValue.ToDBString(mailingName.PhoneNumber)));
                paramCol.Add(new SqlDataParameter("@Fax_Number", DbType.String, DBValue.ToDBString(mailingName.FaxNumber)));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(mailingName.Email)));
                paramCol.Add(new SqlDataParameter("@School_Type", DbType.String, DBValue.ToDBString(mailingName.SchoolType)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    mailingName.MailingNameID = DBValue.ToInt32(paramCol["@Mailing_Name_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateMailingName(MailingName mailingName)
        {
            return UpdateMailingName(mailingName, null);
        }

        private int UpdateMailingName(MailingName mailingName, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_mailing_name";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Mailing_Name_ID", DbType.Int32, DBValue.ToDBInt32(mailingName.MailingNameID)));
                paramCol.Add(new SqlDataParameter("@List_Name", DbType.String, DBValue.ToDBString(mailingName.ListName)));
                paramCol.Add(new SqlDataParameter("@List_ID", DbType.Int32, DBValue.ToDBInt32(mailingName.ListID)));
                paramCol.Add(new SqlDataParameter("@Contact_Name", DbType.String, DBValue.ToDBString(mailingName.ContactName)));
                paramCol.Add(new SqlDataParameter("@Title", DbType.String, DBValue.ToDBString(mailingName.Title)));
                paramCol.Add(new SqlDataParameter("@School_Name", DbType.String, DBValue.ToDBString(mailingName.SchoolName)));
                paramCol.Add(new SqlDataParameter("@School_Address", DbType.String, DBValue.ToDBString(mailingName.SchoolAddress)));
                paramCol.Add(new SqlDataParameter("@City", DbType.String, DBValue.ToDBString(mailingName.City)));
                paramCol.Add(new SqlDataParameter("@State_Code", DbType.String, DBValue.ToDBString(mailingName.StateCode)));
                paramCol.Add(new SqlDataParameter("@Zip", DbType.String, DBValue.ToDBString(mailingName.Zip)));
                paramCol.Add(new SqlDataParameter("@Phone_Number", DbType.String, DBValue.ToDBString(mailingName.PhoneNumber)));
                paramCol.Add(new SqlDataParameter("@Fax_Number", DbType.String, DBValue.ToDBString(mailingName.FaxNumber)));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(mailingName.Email)));
                paramCol.Add(new SqlDataParameter("@School_Type", DbType.String, DBValue.ToDBString(mailingName.SchoolType)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region MSysConf Methods

        private MSysConf LoadMSysConf(DataRow row)
        {
            MSysConf msysconf = new MSysConf();

            // Store database values into our business object
            msysconf.Config = DBValue.ToInt32(row["config"]);
            msysconf.CHValue = DBValue.ToString(row["chvalue"]);
            msysconf.NValue = DBValue.ToInt32(row["nvalue"]);
            msysconf.Comments = DBValue.ToString(row["comments"]);

            // return the filled object
            return msysconf;
        }

        public MSysConf[] GetMSysConfs()
        {
            return GetMSysConfs(null);
        }

        private MSysConf[] GetMSysConfs(SqlInterface si)
        {
            MSysConf[] msysconfs = null;

            string storedProcName = "efrcrm_get_msysconfs";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    msysconfs = new MSysConf[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            msysconfs[i] = LoadMSysConf(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return msysconfs;
        }


        public MSysConf GetMSysConfByID(int id)
        {
            return GetMSysConfByID(id, null);
        }

        private MSysConf GetMSysConfByID(int id, SqlInterface si)
        {
            MSysConf msysconf = null;

            string storedProcName = "efrcrm_get_msysconf_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Config", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        msysconf = LoadMSysConf(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return msysconf;
        }


        public int InsertMSysConf(MSysConf msysconf)
        {
            return InsertMSysConf(msysconf, null);
        }

        private int InsertMSysConf(MSysConf msysconf, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_msysconf";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Config", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@CHValue", DbType.String, DBValue.ToDBString(msysconf.CHValue)));
                paramCol.Add(new SqlDataParameter("@NValue", DbType.Int32, DBValue.ToDBInt32(msysconf.NValue)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(msysconf.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    msysconf.Config = DBValue.ToInt32(paramCol["@Config"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateMSysConf(MSysConf msysconf)
        {
            return UpdateMSysConf(msysconf, null);
        }

        private int UpdateMSysConf(MSysConf msysconf, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_msysconf";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Config", DbType.Int32, DBValue.ToDBInt32(msysconf.Config)));
                paramCol.Add(new SqlDataParameter("@CHValue", DbType.String, DBValue.ToDBString(msysconf.CHValue)));
                paramCol.Add(new SqlDataParameter("@NValue", DbType.Int32, DBValue.ToDBInt32(msysconf.NValue)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(msysconf.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region Newsletter Methods

        private Newsletter LoadNewsletter(DataRow row)
        {
            Newsletter newsletter = new Newsletter();

            // Store database values into our business object
            newsletter.NewsletterID = DBValue.ToInt32(row["newsletter_id"]);
            newsletter.Referrer = DBValue.ToString(row["referrer"]);
            newsletter.Email = DBValue.ToString(row["email"]);
            newsletter.Fullname = DBValue.ToString(row["fullname"]);
            newsletter.Unsubscribed = DBValue.ToInt32(row["unsubscribed"]);

            // return the filled object
            return newsletter;
        }

        public Newsletter[] GetNewsletters()
        {
            return GetNewsletters(null);
        }

        private Newsletter[] GetNewsletters(SqlInterface si)
        {
            Newsletter[] newsletters = null;

            string storedProcName = "efrcrm_get_newsletters";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    newsletters = new Newsletter[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            newsletters[i] = LoadNewsletter(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return newsletters;
        }


        public Newsletter GetNewsletterByID(int id)
        {
            return GetNewsletterByID(id, null);
        }

        private Newsletter GetNewsletterByID(int id, SqlInterface si)
        {
            Newsletter newsletter = null;

            string storedProcName = "efrcrm_get_newsletter_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Newsletter_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        newsletter = LoadNewsletter(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return newsletter;
        }


        public int InsertNewsletter(Newsletter newsletter)
        {
            return InsertNewsletter(newsletter, null);
        }

        private int InsertNewsletter(Newsletter newsletter, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_newsletter";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Newsletter_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Referrer", DbType.String, DBValue.ToDBString(newsletter.Referrer)));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(newsletter.Email)));
                paramCol.Add(new SqlDataParameter("@Fullname", DbType.String, DBValue.ToDBString(newsletter.Fullname)));
                paramCol.Add(new SqlDataParameter("@Unsubscribed", DbType.Int32, DBValue.ToDBInt32(newsletter.Unsubscribed)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    newsletter.NewsletterID = DBValue.ToInt32(paramCol["@Newsletter_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateNewsletter(Newsletter newsletter)
        {
            return UpdateNewsletter(newsletter, null);
        }

        private int UpdateNewsletter(Newsletter newsletter, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_newsletter";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Newsletter_ID", DbType.Int32, DBValue.ToDBInt32(newsletter.NewsletterID)));
                paramCol.Add(new SqlDataParameter("@Referrer", DbType.String, DBValue.ToDBString(newsletter.Referrer)));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(newsletter.Email)));
                paramCol.Add(new SqlDataParameter("@Fullname", DbType.String, DBValue.ToDBString(newsletter.Fullname)));
                paramCol.Add(new SqlDataParameter("@Unsubscribed", DbType.Int32, DBValue.ToDBInt32(newsletter.Unsubscribed)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        //TODO RetrieveDataFromEFRMailList
        public DataTable RetrieveDataFromMailListTables(int partnerID, string beginDate, string endDate, string countrySelected)
        {
            return RetrieveDataFromMailListTables(partnerID, beginDate, endDate, countrySelected, null);
        }

        public DataTable RetrieveDataFromMailListTables(int partnerID, string beginDate, string endDate, string countrySelected, SqlInterface si)
        {
            string storedProcName = "efr_get_Customers";

            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }
            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Partner_id", DbType.Int32, DBValue.ToDBInt32(partnerID)));
                paramCol.Add(new SqlDataParameter("@date_from", DbType.String, DBValue.ToDBString(beginDate)));
                paramCol.Add(new SqlDataParameter("@date_to", DbType.String, DBValue.ToDBString(endDate)));
                paramCol.Add(new SqlDataParameter("@country_Selected", DbType.String, DBValue.ToDBString(countrySelected)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);
                if (dt != null)
                {
                    return dt;
                }
            }
            catch (Exception ex)
            {
                throw ex;

            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return null;
        }





        #endregion

        #region OrdersSale Methods

        private OrdersSale LoadOrdersSale(DataRow row)
        {
            OrdersSale ordersSale = new OrdersSale();

            // Store database values into our business object
            ordersSale.OrderId = DBValue.ToInt32(row["order_id"]);
            ordersSale.SalesId = DBValue.ToInt32(row["sales_id"]);
            ordersSale.DateCreated = DBValue.ToDateTime(row["date_created"]);

            // return the filled object
            return ordersSale;
        }

        public OrdersSale[] GetOrdersSales()
        {
            return GetOrdersSales(null);
        }

        private OrdersSale[] GetOrdersSales(SqlInterface si)
        {
            OrdersSale[] ordersSales = null;

            string storedProcName = "efrcrm_get_orders_sales";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    ordersSales = new OrdersSale[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            ordersSales[i] = LoadOrdersSale(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return ordersSales;
        }


        public OrdersSale GetOrdersSaleByID(int id)
        {
            return GetOrdersSaleByID(id, null);
        }

        private OrdersSale GetOrdersSaleByID(int id, SqlInterface si)
        {
            OrdersSale ordersSale = null;

            string storedProcName = "efrcrm_get_orders_sale_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Order_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        ordersSale = LoadOrdersSale(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return ordersSale;
        }


        public int InsertOrdersSale(OrdersSale ordersSale)
        {
            return InsertOrdersSale(ordersSale, null);
        }

        private int InsertOrdersSale(OrdersSale ordersSale, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_orders_sale";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Order_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Sales_id", DbType.Int32, DBValue.ToDBInt32(ordersSale.SalesId)));
                paramCol.Add(new SqlDataParameter("@Date_created", DbType.DateTime, DBValue.ToDBDateTime(ordersSale.DateCreated)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    ordersSale.OrderId = DBValue.ToInt32(paramCol["@Order_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateOrdersSale(OrdersSale ordersSale)
        {
            return UpdateOrdersSale(ordersSale, null);
        }

        private int UpdateOrdersSale(OrdersSale ordersSale, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_orders_sale";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Order_id", DbType.Int32, DBValue.ToDBInt32(ordersSale.OrderId)));
                paramCol.Add(new SqlDataParameter("@Sales_id", DbType.Int32, DBValue.ToDBInt32(ordersSale.SalesId)));
                paramCol.Add(new SqlDataParameter("@Date_created", DbType.DateTime, DBValue.ToDBDateTime(ordersSale.DateCreated)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region Organization Methods

        private Organization LoadOrganization(DataRow row)
        {
            Organization organization = new Organization();

            // Store database values into our business object
            organization.OrganizationID = DBValue.ToInt32(row["organization_id"]);
            organization.FSMID = DBValue.ToInt32(row["fsm_id"]);
            organization.FlagPoleID = DBValue.ToInt32(row["flag_pole_id"]);
            organization.OrganizationName = DBValue.ToString(row["organization_name"]);
            organization.OrganizationStatusID = DBValue.ToInt32(row["organization_status_id"]);
            organization.Address = DBValue.ToString(row["address"]);
            organization.City = DBValue.ToString(row["city"]);
            organization.OrganizationTypeID = DBValue.ToInt32(row["organization_type_id"]);
            organization.Zip = DBValue.ToString(row["zip"]);
            organization.NumberOfMembers = DBValue.ToInt32(row["number_of_members"]);
            organization.NumberOfClassRooms = DBValue.ToInt32(row["number_of_class_rooms"]);
            organization.StateCode = DBValue.ToString(row["state_code"]);
            organization.CountryCode = DBValue.ToString(row["country_code"]);
            organization.AgentID = DBValue.ToInt32(row["agent_id"]);

            // return the filled object
            return organization;
        }

        public Organization[] GetOrganizations()
        {
            return GetOrganizations(null);
        }

        private Organization[] GetOrganizations(SqlInterface si)
        {
            Organization[] organizations = null;

            string storedProcName = "efrcrm_get_organizations";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    organizations = new Organization[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            organizations[i] = LoadOrganization(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return organizations;
        }


        public Organization GetOrganizationByID(int id)
        {
            return GetOrganizationByID(id, null);
        }

        private Organization GetOrganizationByID(int id, SqlInterface si)
        {
            Organization organization = null;

            string storedProcName = "efrcrm_get_organization_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Organization_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        organization = LoadOrganization(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return organization;
        }


        public int InsertOrganization(Organization organization)
        {
            return InsertOrganization(organization, null);
        }

        private int InsertOrganization(Organization organization, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_organization";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Organization_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@FSM_ID", DbType.Int32, DBValue.ToDBInt32(organization.FSMID)));
                paramCol.Add(new SqlDataParameter("@Flag_Pole_ID", DbType.Int32, DBValue.ToDBInt32(organization.FlagPoleID)));
                paramCol.Add(new SqlDataParameter("@Organization_Name", DbType.String, DBValue.ToDBString(organization.OrganizationName)));
                paramCol.Add(new SqlDataParameter("@Organization_Status_ID", DbType.Int32, DBValue.ToDBInt32(organization.OrganizationStatusID)));
                paramCol.Add(new SqlDataParameter("@Address", DbType.String, DBValue.ToDBString(organization.Address)));
                paramCol.Add(new SqlDataParameter("@City", DbType.String, DBValue.ToDBString(organization.City)));
                paramCol.Add(new SqlDataParameter("@Organization_Type_ID", DbType.Int32, DBValue.ToDBInt32(organization.OrganizationTypeID)));
                paramCol.Add(new SqlDataParameter("@Zip", DbType.String, DBValue.ToDBString(organization.Zip)));
                paramCol.Add(new SqlDataParameter("@Number_of_Members", DbType.Int32, DBValue.ToDBInt32(organization.NumberOfMembers)));
                paramCol.Add(new SqlDataParameter("@Number_of_Class_Rooms", DbType.Int32, DBValue.ToDBInt32(organization.NumberOfClassRooms)));
                paramCol.Add(new SqlDataParameter("@State_Code", DbType.String, DBValue.ToDBString(organization.StateCode)));
                paramCol.Add(new SqlDataParameter("@Country_Code", DbType.String, DBValue.ToDBString(organization.CountryCode)));
                paramCol.Add(new SqlDataParameter("@Agent_ID", DbType.Int32, DBValue.ToDBInt32(organization.AgentID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    organization.OrganizationID = DBValue.ToInt32(paramCol["@Organization_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateOrganization(Organization organization)
        {
            return UpdateOrganization(organization, null);
        }

        private int UpdateOrganization(Organization organization, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_organization";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Organization_ID", DbType.Int32, DBValue.ToDBInt32(organization.OrganizationID)));
                paramCol.Add(new SqlDataParameter("@FSM_ID", DbType.Int32, DBValue.ToDBInt32(organization.FSMID)));
                paramCol.Add(new SqlDataParameter("@Flag_Pole_ID", DbType.Int32, DBValue.ToDBInt32(organization.FlagPoleID)));
                paramCol.Add(new SqlDataParameter("@Organization_Name", DbType.String, DBValue.ToDBString(organization.OrganizationName)));
                paramCol.Add(new SqlDataParameter("@Organization_Status_ID", DbType.Int32, DBValue.ToDBInt32(organization.OrganizationStatusID)));
                paramCol.Add(new SqlDataParameter("@Address", DbType.String, DBValue.ToDBString(organization.Address)));
                paramCol.Add(new SqlDataParameter("@City", DbType.String, DBValue.ToDBString(organization.City)));
                paramCol.Add(new SqlDataParameter("@Organization_Type_ID", DbType.Int32, DBValue.ToDBInt32(organization.OrganizationTypeID)));
                paramCol.Add(new SqlDataParameter("@Zip", DbType.String, DBValue.ToDBString(organization.Zip)));
                paramCol.Add(new SqlDataParameter("@Number_of_Members", DbType.Int32, DBValue.ToDBInt32(organization.NumberOfMembers)));
                paramCol.Add(new SqlDataParameter("@Number_of_Class_Rooms", DbType.Int32, DBValue.ToDBInt32(organization.NumberOfClassRooms)));
                paramCol.Add(new SqlDataParameter("@State_Code", DbType.String, DBValue.ToDBString(organization.StateCode)));
                paramCol.Add(new SqlDataParameter("@Country_Code", DbType.String, DBValue.ToDBString(organization.CountryCode)));
                paramCol.Add(new SqlDataParameter("@Agent_ID", DbType.Int32, DBValue.ToDBInt32(organization.AgentID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region OrganizationClass Methods

        private OrganizationClass LoadOrganizationClass(DataRow row)
        {
            OrganizationClass organizationClass = new OrganizationClass();

            // Store database values into our business object
            organizationClass.OrganizationClassCode = DBValue.ToString(row["organization_class_code"]);
            organizationClass.Description = DBValue.ToString(row["description"]);
            organizationClass.AcceptPO = DBValue.ToInt32(row["accept_po"]);
            organizationClass.IsDistributor = DBValue.ToInt32(row["is_distributor"]);

            // return the filled object
            return organizationClass;
        }

        public OrganizationClass[] GetOrganizationClasss()
        {
            return GetOrganizationClasss(null);
        }

        private OrganizationClass[] GetOrganizationClasss(SqlInterface si)
        {
            OrganizationClass[] organizationClasss = null;

            string storedProcName = "efrcrm_get_organization_classs";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    organizationClasss = new OrganizationClass[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            organizationClasss[i] = LoadOrganizationClass(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return organizationClasss;
        }



        #endregion

        #region OrganizationStatus Methods

        private OrganizationStatus LoadOrganizationStatus(DataRow row)
        {
            OrganizationStatus organizationStatus = new OrganizationStatus();

            // Store database values into our business object
            organizationStatus.OrganizationStatusID = DBValue.ToInt32(row["organization_status_id"]);
            organizationStatus.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return organizationStatus;
        }

        public OrganizationStatus[] GetOrganizationStatuss()
        {
            return GetOrganizationStatuss(null);
        }

        private OrganizationStatus[] GetOrganizationStatuss(SqlInterface si)
        {
            OrganizationStatus[] organizationStatuss = null;

            string storedProcName = "efrcrm_get_organization_statuss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    organizationStatuss = new OrganizationStatus[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            organizationStatuss[i] = LoadOrganizationStatus(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return organizationStatuss;
        }


        public OrganizationStatus GetOrganizationStatusByID(int id)
        {
            return GetOrganizationStatusByID(id, null);
        }

        private OrganizationStatus GetOrganizationStatusByID(int id, SqlInterface si)
        {
            OrganizationStatus organizationStatus = null;

            string storedProcName = "efrcrm_get_organization_status_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Organization_Status_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        organizationStatus = LoadOrganizationStatus(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return organizationStatus;
        }


        public int InsertOrganizationStatus(OrganizationStatus organizationStatus)
        {
            return InsertOrganizationStatus(organizationStatus, null);
        }

        private int InsertOrganizationStatus(OrganizationStatus organizationStatus, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_organization_status";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Organization_Status_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(organizationStatus.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    organizationStatus.OrganizationStatusID = DBValue.ToInt32(paramCol["@Organization_Status_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateOrganizationStatus(OrganizationStatus organizationStatus)
        {
            return UpdateOrganizationStatus(organizationStatus, null);
        }

        private int UpdateOrganizationStatus(OrganizationStatus organizationStatus, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_organization_status";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Organization_Status_ID", DbType.Int32, DBValue.ToDBInt32(organizationStatus.OrganizationStatusID)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(organizationStatus.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region OrganizationType Methods

        private OrganizationType LoadOrganizationType(DataRow row)
        {
            OrganizationType organizationType = new OrganizationType();

            // Store database values into our business object
            organizationType.OrganizationTypeId = DBValue.ToInt16(row["organization_type_id"]);
            organizationType.PartyTypeId = DBValue.ToInt16(row["party_type_id"]);
            organizationType.OrganizationTypeDesc = DBValue.ToString(row["organization_type_desc"]);
            organizationType.IsSchool = DBValue.ToInt32(row["is_school"]);

            // return the filled object
            return organizationType;
        }

        public OrganizationType[] GetOrganizationTypes()
        {
            return GetOrganizationTypes(null);
        }

        private OrganizationType[] GetOrganizationTypes(SqlInterface si)
        {
            OrganizationType[] organizationTypes = null;

            string storedProcName = "efrcrm_get_organization_types";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    organizationTypes = new OrganizationType[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            organizationTypes[i] = LoadOrganizationType(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return organizationTypes;
        }


        public string GetOrganizationTypeByID(int orgTypeID)
        {
            return GetOrganizationTypeByID(orgTypeID, null);
        }

        private string GetOrganizationTypeByID(int orgTypeID, SqlInterface si)
        {
            string organizationType = "";

            string storedProcName = "efrcrm_get_organization_type_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@organization_type_id", DbType.Int32, orgTypeID));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    // fill our objects
                    try
                    {
                        organizationType = dt.Rows[0]["Organization_type_desc"].ToString();
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }

                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return organizationType;
        }


        #endregion

        #region OrganizationTypeDesc Methods

        private OrganizationTypeDesc LoadOrganizationTypeDesc(DataRow row)
        {
            OrganizationTypeDesc organizationTypeDesc = new OrganizationTypeDesc();

            // Store database values into our business object
            organizationTypeDesc.OrganizationTypeId = DBValue.ToInt16(row["organization_type_id"]);
            organizationTypeDesc.LanguageId = DBValue.ToInt16(row["language_id"]);
            organizationTypeDesc.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return organizationTypeDesc;
        }

        public OrganizationTypeDesc[] GetOrganizationTypeDescs()
        {
            return GetOrganizationTypeDescs(null);
        }

        private OrganizationTypeDesc[] GetOrganizationTypeDescs(SqlInterface si)
        {
            OrganizationTypeDesc[] organizationTypeDescs = null;

            string storedProcName = "efrcrm_get_organization_type_descs";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    organizationTypeDescs = new OrganizationTypeDesc[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            organizationTypeDescs[i] = LoadOrganizationTypeDesc(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return organizationTypeDescs;
        }



        #endregion

        #region PostalAddress Methods

        private PostalAddress LoadPostalAddress(DataRow row)
        {
            PostalAddress postalAddress = new PostalAddress();

            // Store database values into our business object
            postalAddress.PostalAddressId = DBValue.ToInt32(row["postal_address_id"]);
            postalAddress.Address = DBValue.ToString(row["address"]);
            postalAddress.City = DBValue.ToString(row["city"]);
            postalAddress.ZipCode = DBValue.ToString(row["zip_code"]);
            postalAddress.CountryCode = DBValue.ToString(row["country_code"]);
            postalAddress.SubdivisionCode = DBValue.ToString(row["subdivision_code"]);
            postalAddress.CreateDate = DBValue.ToDateTime(row["create_date"]);

            // return the filled object
            return postalAddress;
        }

        public PostalAddress[] GetPostalAddresss()
        {
            return GetPostalAddresss(null);
        }

        private PostalAddress[] GetPostalAddresss(SqlInterface si)
        {
            PostalAddress[] postalAddresss = null;

            string storedProcName = "efrcrm_get_postal_addresss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    postalAddresss = new PostalAddress[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            postalAddresss[i] = LoadPostalAddress(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return postalAddresss;
        }


        public PostalAddress GetPostalAddressByID(int id)
        {
            return GetPostalAddressByID(id, null);
        }

        private PostalAddress GetPostalAddressByID(int id, SqlInterface si)
        {
            PostalAddress postalAddress = null;

            string storedProcName = "efrcrm_get_postal_address_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Postal_address_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        postalAddress = LoadPostalAddress(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return postalAddress;
        }


        public int InsertPostalAddress(PostalAddress postalAddress)
        {
            return InsertPostalAddress(postalAddress, null);
        }

        private int InsertPostalAddress(PostalAddress postalAddress, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_postal_address";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Postal_address_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Address", DbType.String, DBValue.ToDBString(postalAddress.Address)));
                paramCol.Add(new SqlDataParameter("@City", DbType.String, DBValue.ToDBString(postalAddress.City)));
                paramCol.Add(new SqlDataParameter("@Zip_code", DbType.String, DBValue.ToDBString(postalAddress.ZipCode)));
                paramCol.Add(new SqlDataParameter("@Country_code", DbType.String, DBValue.ToDBString(postalAddress.CountryCode)));
                paramCol.Add(new SqlDataParameter("@Subdivision_code", DbType.String, DBValue.ToDBString(postalAddress.SubdivisionCode)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(postalAddress.CreateDate)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    postalAddress.PostalAddressId = DBValue.ToInt32(paramCol["@Postal_address_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        public int UpdatePostalAddress(PostalAddress postalAddress)
        {
            return UpdatePostalAddress(postalAddress, null);
        }

        private int UpdatePostalAddress(PostalAddress postalAddress, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_postal_address";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Postal_address_id", DbType.Int32, DBValue.ToDBInt32(postalAddress.PostalAddressId)));
                paramCol.Add(new SqlDataParameter("@Address", DbType.String, DBValue.ToDBString(postalAddress.Address)));
                paramCol.Add(new SqlDataParameter("@City", DbType.String, DBValue.ToDBString(postalAddress.City)));
                paramCol.Add(new SqlDataParameter("@Zip_code", DbType.String, DBValue.ToDBString(postalAddress.ZipCode)));
                paramCol.Add(new SqlDataParameter("@Country_code", DbType.String, DBValue.ToDBString(postalAddress.CountryCode)));
                paramCol.Add(new SqlDataParameter("@Subdivision_code", DbType.String, DBValue.ToDBString(postalAddress.SubdivisionCode)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(postalAddress.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region PromotionalKit Methods

        private PromotionalKit LoadPromotionalKit(DataRow row)
        {
            PromotionalKit promotionalKit = new PromotionalKit();

            // Store database values into our business object
            promotionalKit.PromotionalKitId = DBValue.ToInt32(row["promotional_kit_id"]);
            promotionalKit.LeadId = DBValue.ToInt32(row["lead_id"]);
            promotionalKit.LeadVisitId = DBValue.ToInt32(row["lead_visit_id"]);
            promotionalKit.KitTypeId = DBValue.ToInt32(row["kit_type_id"]);
            promotionalKit.CarrierId = DBValue.ToInt32(row["carrier_id"]);
            promotionalKit.CarrierTrackingId = DBValue.ToInt32(row["carrier_tracking_id"]);
            promotionalKit.PostalAddressId = DBValue.ToInt32(row["postal_address_id"]);
            promotionalKit.Validated = DBValue.ToInt32(row["validated"]);
            promotionalKit.Valid.Valid = DBValue.ToString(row["validated"]);
            promotionalKit.CreateDate = DBValue.ToDateTime(row["create_date"]);
            promotionalKit.SentDate = DBValue.ToDateTime(row["sent_date"]);
            promotionalKit.SampleID = DBValue.ToInt32(row["sample_id"]);
            // return the filled object
            return promotionalKit;
        }

        public PromotionalKit[] GetPromotionalKits()
        {
            return GetPromotionalKits(null);
        }

        private PromotionalKit[] GetPromotionalKits(SqlInterface si)
        {
            PromotionalKit[] promotionalKits = null;

            string storedProcName = "efrcrm_get_promotional_kits";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    promotionalKits = new PromotionalKit[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            promotionalKits[i] = LoadPromotionalKit(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return promotionalKits;
        }
        public PromotionalKitCollection GetPromotionalKitsByKitTypeIDAndCarrierID(int kitTypeID, int carrierID)
        {
            return GetPromotionalKitsByKitTypeIDAndCarrierID(kitTypeID, carrierID, null);
        }
        private PromotionalKitCollection GetPromotionalKitsByKitTypeIDAndCarrierID(int kitTypeID, int carrierID, SqlInterface si)
        {
            PromotionalKitCollection promoKitCollection = new PromotionalKitCollection();
            string storedProc = "efrcrm_get_promotional_kits_by_carrierid_and_kittypeid";
            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@kittypeid", DbType.Int32, DBValue.ToDBInt32(kitTypeID)));
                paramCol.Add(new SqlDataParameter("@carrierid", DbType.Int32, DBValue.ToDBInt32(carrierID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProc, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        // fill our objects
                        try
                        {
                            promoKitCollection.Add(LoadPromotionalKit(dt.Rows[i]));
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProc, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return null;
        }

        public PromotionalKitCollection GetPromotionalKitsByCarrierId(int carrierId)
        {
            return GetPromotionalKitsByCarrierId(carrierId, null);
        }

        private PromotionalKitCollection GetPromotionalKitsByCarrierId(int carrierId, SqlInterface si)
        {
            PromotionalKitCollection promotionalKits = null;

            string storedProcName = "efrcrm_get_promotional_kits_by_carrier_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@carrier_id", DbType.Int32, DBValue.ToDBInt32(carrierId)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);


                if (dt != null)
                {
                    promotionalKits = new PromotionalKitCollection();

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            promotionalKits.Add(LoadPromotionalKit(dt.Rows[i]));
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return promotionalKits;
        }

        public PromotionalKitCollection GetPromotionalKitsToProcessByKitTypeID(int kitTypeID)
        {
            return GetPromotionalKitsToProcessByKitTypeID(kitTypeID, null);
        }

        private PromotionalKitCollection GetPromotionalKitsToProcessByKitTypeID(int kitTypeID, SqlInterface si)
        {
            PromotionalKitCollection promotionalKits = null;

            string storedProcName = "efrcrm_get_promotional_kits_to_process_by_kit_type_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new GA.BDC.Core.Data.Sql.SqlDataParameter("@kit_type_id", DbType.Int32, ParameterDirection.Input, kitTypeID));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    promotionalKits = new PromotionalKitCollection();

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            promotionalKits.Add(LoadPromotionalKit(dt.Rows[i]));
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }
            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return promotionalKits;
        }

        public PromotionalKitCollection GetPromotionalKitsToProcess()
        {
            return GetPromotionalKitsToProcess(null);
        }

        private PromotionalKitCollection GetPromotionalKitsToProcess(SqlInterface si)
        {
            PromotionalKitCollection promotionalKits = null;

            string storedProcName = "efrcrm_get_promotional_kits_to_process";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    promotionalKits = new PromotionalKitCollection();

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            promotionalKits.Add(LoadPromotionalKit(dt.Rows[i]));
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return promotionalKits;
        }

        public PromotionalKit GetPromotionalKitByID(int id)
        {
            return GetPromotionalKitByID(id, null);
        }

        private PromotionalKit GetPromotionalKitByID(int id, SqlInterface si)
        {
            PromotionalKit promotionalKit = null;

            string storedProcName = "efrcrm_get_promotional_kit_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Promotional_kit_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        promotionalKit = LoadPromotionalKit(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return promotionalKit;
        }

        public PromotionalKitCollection GetPromotionalKitByLeadID(int leadID)
        {
            return GetPromotionalKitByLeadID(leadID, null);
        }
        private PromotionalKitCollection GetPromotionalKitByLeadID(int leadID, SqlInterface si)
        {
            PromotionalKitCollection promotionalKits = null;

            string storedProcName = "efrcrm_get_promotional_kits_by_lead_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@leadid", DbType.Int32, DBValue.ToDBInt32(leadID)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    promotionalKits = new PromotionalKitCollection();

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            promotionalKits.Add(LoadPromotionalKit(dt.Rows[i]));
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return promotionalKits;
        }

        public PromotionalKit[] GetPromotionalKitsReadyForFedex()
        {
            return GetPromotionalKitsReadyForFedex(null);
        }
        private PromotionalKit[] GetPromotionalKitsReadyForFedex(SqlInterface si)
        {
            PromotionalKit[] promotionalKits = null;

            string storedProcName = "efrcrm_get_promotional_kits_ready_for_fedex";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters

                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    promotionalKits = new PromotionalKit[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            promotionalKits[i] = LoadPromotionalKit(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return promotionalKits;
        }


        public int InsertPromotionalKit(PromotionalKit promotionalKit)
        {
            return InsertPromotionalKit(promotionalKit, null);
        }

        private int InsertPromotionalKit(PromotionalKit promotionalKit, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_promotional_kit";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Promotional_kit_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Lead_id", DbType.Int32, DBValue.ToDBInt32(promotionalKit.LeadId)));
                paramCol.Add(new SqlDataParameter("@Lead_visit_id", DbType.Int32, DBValue.ToDBInt32(promotionalKit.LeadVisitId)));
                paramCol.Add(new SqlDataParameter("@Kit_type_id", DbType.Int32, DBValue.ToDBInt32(promotionalKit.KitTypeId)));
                paramCol.Add(new SqlDataParameter("@Carrier_id", DbType.Int32, DBValue.ToDBInt32(promotionalKit.CarrierId)));
                paramCol.Add(new SqlDataParameter("@Carrier_tracking_id", DbType.Int32, DBValue.ToDBInt32(promotionalKit.CarrierTrackingId)));
                paramCol.Add(new SqlDataParameter("@Postal_address_id", DbType.Int32, DBValue.ToDBInt32(promotionalKit.PostalAddressId)));
                paramCol.Add(new SqlDataParameter("@Validated", DbType.Int32, DBValue.ToDBInt32(promotionalKit.Validated)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(promotionalKit.CreateDate)));
                paramCol.Add(new SqlDataParameter("@Sent_date", DbType.DateTime, DBValue.ToDBDateTime(promotionalKit.SentDate)));
                paramCol.Add(new SqlDataParameter("@Sample_ID", DbType.Int32, DBValue.ToDBInt32(promotionalKit.SampleID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    promotionalKit.PromotionalKitId = DBValue.ToInt32(paramCol["@Promotional_kit_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }

        public void InsertPromotionalKitAndPostalAddress(PromotionalKit promoKit, PostalAddress postalAddress)
        {
            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            try
            {
                si.Open();
                si.BeginTransaction();
                InsertPostalAddress(postalAddress, si);
                if (postalAddress.PostalAddressId != int.MinValue)
                {
                    promoKit.PostalAddressId = postalAddress.PostalAddressId;
                    InsertPromotionalKit(promoKit, si);
                    if (promoKit.PromotionalKitId == int.MinValue)
                    {
                        throw new EFundraisingCRMException("Failed to insert promotional kit entry  into DB.");
                    }
                }
                else
                {
                    throw new EFundraisingCRMException("Failed to insert postal address entry into DB.");
                }

                si.Commit();

            }
            catch (Exception e)
            {
                si.Rollback();
                throw e;
            }
            finally
            {
                si.Close();
            }
        }
        public int UpdatePromotionalKit(PromotionalKit promotionalKit)
        {
            return UpdatePromotionalKit(promotionalKit, null);
        }

        private int UpdatePromotionalKit(PromotionalKit promotionalKit, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_promotional_kit";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Promotional_kit_id", DbType.Int32, DBValue.ToDBInt32(promotionalKit.PromotionalKitId)));
                paramCol.Add(new SqlDataParameter("@Lead_id", DbType.Int32, DBValue.ToDBInt32(promotionalKit.LeadId)));
                paramCol.Add(new SqlDataParameter("@Lead_visit_id", DbType.Int32, DBValue.ToDBInt32(promotionalKit.LeadVisitId)));
                paramCol.Add(new SqlDataParameter("@Kit_type_id", DbType.Int32, DBValue.ToDBInt32(promotionalKit.KitTypeId)));
                paramCol.Add(new SqlDataParameter("@Carrier_id", DbType.Int32, DBValue.ToDBInt32(promotionalKit.CarrierId)));
                paramCol.Add(new SqlDataParameter("@Carrier_tracking_id", DbType.Int32, DBValue.ToDBInt32(promotionalKit.CarrierTrackingId)));
                paramCol.Add(new SqlDataParameter("@Postal_address_id", DbType.Int32, DBValue.ToDBInt32(promotionalKit.PostalAddressId)));
                paramCol.Add(new SqlDataParameter("@Validated", DbType.Int32, DBValue.ToDBInt32(promotionalKit.Validated)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(promotionalKit.CreateDate)));
                paramCol.Add(new SqlDataParameter("@Sent_date", DbType.DateTime, DBValue.ToDBDateTime(promotionalKit.SentDate)));
                paramCol.Add(new SqlDataParameter("@Sample_ID", DbType.Int32, DBValue.ToDBInt32(promotionalKit.SampleID)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }

        #endregion

        #region Package Methods

        private Package LoadPackage(DataRow row)
        {
            Package package = new Package();

            // Store database values into our business object
            package.PackageId = DBValue.ToInt32(row["package_id"]);
            package.Description = DBValue.ToString(row["description"]);
            package.Comments = DBValue.ToString(row["comments"]);
            package.PackageImage = DBValue.ToString(row["package_image"]);
            package.PackageProfit = DBValue.ToString(row["package_profit"]);
            package.PackageWebDesc = DBValue.ToString(row["package_web_desc"]);
            package.PackageTitleImage = DBValue.ToString(row["package_title_image"]);
            package.IsDisplayable = DBValue.ToInt32(row["is_displayable"]);

            if (row.Table.Columns.Contains("profit_min"))
                package.ProfitMin = DBValue.ToDecimal(row["profit_min"]);
            if (row.Table.Columns.Contains("profit_max"))
                package.ProfitMax = DBValue.ToDecimal(row["profit_max"]);
            if (row.Table.Columns.Contains("profit_default"))
                package.ProfitDefault = DBValue.ToDecimal(row["profit_default"]);
            if (row.Table.Columns.Contains("product_class_id"))
                package.ProductClassId = DBValue.ToInt32(row["product_class_id"]);

            // return the filled object
            return package;
        }

        public Package[] GetPackages()
        {
            return GetPackages(null);
        }

        private Package[] GetPackages(SqlInterface si)
        {
            Package[] packages = null;

            string storedProcName = "efrcrm_get_packages";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    packages = new Package[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            packages[i] = LoadPackage(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return packages;
        }


        public Package GetPackageByID(int id)
        {
            return GetPackageByID(id, null);
        }

        private Package GetPackageByID(int id, SqlInterface si)
        {
            Package package = null;

            string storedProcName = "efrcrm_get_package_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Package_Id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        package = LoadPackage(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return package;
        }


        public int InsertPackage(Package package)
        {
            return InsertPackage(package, null);
        }

        private int InsertPackage(Package package, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_package";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Package_Id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(package.Description)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(package.Comments)));
                paramCol.Add(new SqlDataParameter("@Package_Image", DbType.String, DBValue.ToDBString(package.PackageImage)));
                paramCol.Add(new SqlDataParameter("@Package_Profit", DbType.String, DBValue.ToDBString(package.PackageProfit)));
                paramCol.Add(new SqlDataParameter("@Package_Web_Desc", DbType.String, DBValue.ToDBString(package.PackageWebDesc)));
                paramCol.Add(new SqlDataParameter("@Package_Title_Image", DbType.String, DBValue.ToDBString(package.PackageTitleImage)));
                paramCol.Add(new SqlDataParameter("@Is_Displayable", DbType.Int32, DBValue.ToDBInt32(package.IsDisplayable)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    package.PackageId = DBValue.ToInt32(paramCol["@Package_Id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdatePackage(Package package)
        {
            return UpdatePackage(package, null);
        }

        private int UpdatePackage(Package package, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_package";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Package_Id", DbType.Int32, DBValue.ToDBInt32(package.PackageId)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(package.Description)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(package.Comments)));
                paramCol.Add(new SqlDataParameter("@Package_Image", DbType.String, DBValue.ToDBString(package.PackageImage)));
                paramCol.Add(new SqlDataParameter("@Package_Profit", DbType.String, DBValue.ToDBString(package.PackageProfit)));
                paramCol.Add(new SqlDataParameter("@Package_Web_Desc", DbType.String, DBValue.ToDBString(package.PackageWebDesc)));
                paramCol.Add(new SqlDataParameter("@Package_Title_Image", DbType.String, DBValue.ToDBString(package.PackageTitleImage)));
                paramCol.Add(new SqlDataParameter("@Is_Displayable", DbType.Int32, DBValue.ToDBInt32(package.IsDisplayable)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region PackageDesc Methods

        private PackageDesc LoadPackageDesc(DataRow row)
        {
            PackageDesc packageDesc = new PackageDesc();

            // Store database values into our business object
            packageDesc.PackageId = DBValue.ToInt16(row["package_id"]);
            packageDesc.LanguageId = DBValue.ToInt16(row["language_id"]);
            packageDesc.PackageName = DBValue.ToString(row["package_name"]);
            packageDesc.PackageShortDesc = DBValue.ToString(row["package_short_desc"]);
            packageDesc.PackageLongDesc = DBValue.ToString(row["package_long_desc"]);
            packageDesc.PackageExtraDesc = DBValue.ToString(row["package_extra_desc"]);
            packageDesc.PackageSmallImg = DBValue.ToString(row["package_small_img"]);
            packageDesc.PackageLargeImg = DBValue.ToString(row["package_large_img"]);
            packageDesc.PageUrl = DBValue.ToString(row["page_url"]);

            // return the filled object
            return packageDesc;
        }

        public PackageDesc[] GetPackageDescs()
        {
            return GetPackageDescs(null);
        }

        private PackageDesc[] GetPackageDescs(SqlInterface si)
        {
            PackageDesc[] packageDescs = null;

            string storedProcName = "efrcrm_get_package_descs";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    packageDescs = new PackageDesc[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            packageDescs[i] = LoadPackageDesc(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return packageDescs;
        }



        #endregion

        #region PackageTemplates Methods

        private PackageTemplates LoadPackageTemplates(DataRow row)
        {
            PackageTemplates packageTemplates = new PackageTemplates();

            // Store database values into our business object
            packageTemplates.PackageTemplateId = DBValue.ToInt16(row["package_template_id"]);
            packageTemplates.PackageTemplateDesc = DBValue.ToString(row["package_template_desc"]);

            // return the filled object
            return packageTemplates;
        }

        public PackageTemplates[] GetPackageTemplatess()
        {
            return GetPackageTemplatess(null);
        }

        private PackageTemplates[] GetPackageTemplatess(SqlInterface si)
        {
            PackageTemplates[] packageTemplatess = null;

            string storedProcName = "efrcrm_get_package_templatess";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    packageTemplatess = new PackageTemplates[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            packageTemplatess[i] = LoadPackageTemplates(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return packageTemplatess;
        }



        #endregion

        #region Packages Methods

        private Packages LoadPackages(DataRow row)
        {
            Packages packages = new Packages();

            // Store database values into our business object
            packages.PackageId = DBValue.ToInt16(row["package_id"]);
            packages.ParentPackageId = DBValue.ToInt16(row["parent_package_id"]);
            packages.PackageTemplateId = DBValue.ToInt16(row["package_template_id"]);
            packages.AccountingClassId = DBValue.ToInt16(row["accounting_class_id"]);
            packages.PackageName = DBValue.ToString(row["package_name"]);
            packages.ProfitPercentage = DBValue.ToInt16(row["profit_percentage"]);
            packages.DisplayOrder = DBValue.ToInt16(row["display_order"]);
            packages.PackageEnabled = DBValue.ToInt32(row["package_enabled"]);
            packages.ContainsProducts = DBValue.ToInt32(row["contains_products"]);
            packages.NbParticipantsPerCase = DBValue.ToInt16(row["nb_participants_per_case"]);

            // return the filled object
            return packages;
        }

        public Packages[] GetPackagess()
        {
            return GetPackagess(null);
        }

        private Packages[] GetPackagess(SqlInterface si)
        {
            Packages[] packagess = null;

            string storedProcName = "efrcrm_get_packagess";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    packagess = new Packages[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            packagess[i] = LoadPackages(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return packagess;
        }



        #endregion

        #region Partner Methods

        private Partner LoadPartner(DataRow row)
        {
            Partner partner = new Partner();

            // Store database values into our business object
            partner.PartnerId = DBValue.ToInt32(row["partner_id"]);
            partner.PartnerGroupTypeId = DBValue.ToInt16(row["partner_group_type_id"]);
            partner.PartnerSubgroupTypeId = DBValue.ToInt16(row["partner_subgroup_type_id"]);
            partner.PartnerName = DBValue.ToString(row["partner_name"]);
            partner.PartnerPath = DBValue.ToString(row["partner_path"]);
            partner.EsubsUrl = DBValue.ToString(row["esubs_url"]);
            partner.EstoreUrl = DBValue.ToString(row["estore_url"]);
            partner.FreeKitUrl = DBValue.ToString(row["free_kit_url"]);
            partner.Logo = DBValue.ToString(row["logo"]);
            partner.PhoneNumber = DBValue.ToString(row["phone_number"]);
            partner.EmailExt = DBValue.ToString(row["email_ext"]);
            partner.Url = DBValue.ToString(row["url"]);
            partner.Guid = DBValue.ToString(row["guid"]);
            partner.PrizeEligible = DBValue.ToInt32(row["prize_eligible"]);
            partner.HasCollectionSite = DBValue.ToInt32(row["has_collection_site"]);

            // return the filled object
            return partner;
        }
        public Partner GetPartnerByLeadID(int leadID)
        {
            return GetPartnerByLeadID(leadID, null);
        }
        private Partner GetPartnerByLeadID(int leadID, SqlInterface si)
        {
            string storedProcName = "efrcrm_get_partner_by_lead_id";
            Partner partner = null;

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;

            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@leadid", DbType.Int32, DBValue.ToInt32(leadID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {

                    // fill our objects
                    try
                    {
                        partner = LoadPartner(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message.ToString());
            }
            finally
            {
                if (newConnection)
                {
                    si.Close();
                }
            }
            return partner;
        }
        public Partner[] GetPartners()
        {
            return GetPartners(null);
        }

        private Partner[] GetPartners(SqlInterface si)
        {
            Partner[] partners = null;

            string storedProcName = "efrcrm_get_partners";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    partners = new Partner[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            partners[i] = LoadPartner(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return partners;
        }

        public Partner[] GetPartnersByName(string name)
        {
            return GetPartnersByName(name, null);
        }

        private Partner[] GetPartnersByName(string name, SqlInterface si)
        {
            Partner[] partners = null;

            string storedProcName = "efrcrm_get_partners_by_name";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new GA.BDC.Core.Data.Sql.SqlDataParameter("@partnerName", DbType.String, ParameterDirection.Input, name));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    partners = new Partner[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            partners[i] = LoadPartner(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return partners;
        }

        public Partner GetPartnerByID(int id)
        {
            return GetPartnerByID(id, null);
        }

        private Partner GetPartnerByID(int id, SqlInterface si)
        {
            Partner partner = null;

            string storedProcName = "efrcrm_get_partner_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Partner_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        partner = LoadPartner(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return partner;
        }


        public int InsertPartner(Partner partner)
        {
            return InsertPartner(partner, null);
        }

        private int InsertPartner(Partner partner, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_partner";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Partner_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Partner_group_type_id", DbType.Int16, DBValue.ToDBInt16(partner.PartnerGroupTypeId)));
                paramCol.Add(new SqlDataParameter("@Partner_subgroup_type_id", DbType.Int16, DBValue.ToDBInt16(partner.PartnerSubgroupTypeId)));
                paramCol.Add(new SqlDataParameter("@Partner_name", DbType.String, DBValue.ToDBString(partner.PartnerName)));
                paramCol.Add(new SqlDataParameter("@Partner_path", DbType.String, DBValue.ToDBString(partner.PartnerPath)));
                paramCol.Add(new SqlDataParameter("@Esubs_url", DbType.String, DBValue.ToDBString(partner.EsubsUrl)));
                paramCol.Add(new SqlDataParameter("@Estore_url", DbType.String, DBValue.ToDBString(partner.EstoreUrl)));
                paramCol.Add(new SqlDataParameter("@Free_kit_url", DbType.String, DBValue.ToDBString(partner.FreeKitUrl)));
                paramCol.Add(new SqlDataParameter("@Logo", DbType.String, DBValue.ToDBString(partner.Logo)));
                paramCol.Add(new SqlDataParameter("@Phone_number", DbType.String, DBValue.ToDBString(partner.PhoneNumber)));
                paramCol.Add(new SqlDataParameter("@Email_ext", DbType.String, DBValue.ToDBString(partner.EmailExt)));
                paramCol.Add(new SqlDataParameter("@Url", DbType.String, DBValue.ToDBString(partner.Url)));
                paramCol.Add(new SqlDataParameter("@Guid", DbType.String, DBValue.ToDBString(partner.Guid)));
                paramCol.Add(new SqlDataParameter("@Prize_eligible", DbType.Int32, DBValue.ToDBInt32(partner.PrizeEligible)));
                paramCol.Add(new SqlDataParameter("@Has_collection_site", DbType.Int32, DBValue.ToDBInt32(partner.HasCollectionSite)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    partner.PartnerId = DBValue.ToInt32(paramCol["@Partner_id"].Value);
                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdatePartner(Partner partner)
        {
            return UpdatePartner(partner, null);
        }

        private int UpdatePartner(Partner partner, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_partner";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Partner_id", DbType.Int32, DBValue.ToDBInt32(partner.PartnerId)));
                paramCol.Add(new SqlDataParameter("@Partner_group_type_id", DbType.Int16, DBValue.ToDBInt16(partner.PartnerGroupTypeId)));
                paramCol.Add(new SqlDataParameter("@Partner_subgroup_type_id", DbType.Int16, DBValue.ToDBInt16(partner.PartnerSubgroupTypeId)));
                paramCol.Add(new SqlDataParameter("@Partner_name", DbType.String, DBValue.ToDBString(partner.PartnerName)));
                paramCol.Add(new SqlDataParameter("@Partner_path", DbType.String, DBValue.ToDBString(partner.PartnerPath)));
                paramCol.Add(new SqlDataParameter("@Esubs_url", DbType.String, DBValue.ToDBString(partner.EsubsUrl)));
                paramCol.Add(new SqlDataParameter("@Estore_url", DbType.String, DBValue.ToDBString(partner.EstoreUrl)));
                paramCol.Add(new SqlDataParameter("@Free_kit_url", DbType.String, DBValue.ToDBString(partner.FreeKitUrl)));
                paramCol.Add(new SqlDataParameter("@Logo", DbType.String, DBValue.ToDBString(partner.Logo)));
                paramCol.Add(new SqlDataParameter("@Phone_number", DbType.String, DBValue.ToDBString(partner.PhoneNumber)));
                paramCol.Add(new SqlDataParameter("@Email_ext", DbType.String, DBValue.ToDBString(partner.EmailExt)));
                paramCol.Add(new SqlDataParameter("@Url", DbType.String, DBValue.ToDBString(partner.Url)));
                paramCol.Add(new SqlDataParameter("@Guid", DbType.String, DBValue.ToDBString(partner.Guid)));
                paramCol.Add(new SqlDataParameter("@Prize_eligible", DbType.Int32, DBValue.ToDBInt32(partner.PrizeEligible)));
                paramCol.Add(new SqlDataParameter("@Has_collection_site", DbType.Int32, DBValue.ToDBInt32(partner.HasCollectionSite)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region PartnerCommission Methods

        private PartnerCommission LoadPartnerCommission(DataRow row)
        {
            PartnerCommission partnerCommission = new PartnerCommission();

            // Store database values into our business object
            partnerCommission.PartnerId = DBValue.ToInt32(row["partner_id"]);
            partnerCommission.ProductClassId = DBValue.ToInt16(row["product_class_id"]);
            partnerCommission.CommissionRate = DBValue.ToInt16(row["commission_rate"]);

            // return the filled object
            return partnerCommission;
        }

        public PartnerCommission[] GetPartnerCommissions()
        {
            return GetPartnerCommissions(null);
        }

        private PartnerCommission[] GetPartnerCommissions(SqlInterface si)
        {
            PartnerCommission[] partnerCommissions = null;

            string storedProcName = "efrcrm_get_partner_commissions";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    partnerCommissions = new PartnerCommission[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            partnerCommissions[i] = LoadPartnerCommission(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return partnerCommissions;
        }


        public PartnerCommission GetPartnerCommissionByID(int id)
        {
            return GetPartnerCommissionByID(id, null);
        }

        private PartnerCommission GetPartnerCommissionByID(int id, SqlInterface si)
        {
            PartnerCommission partnerCommission = null;

            string storedProcName = "efrcrm_get_partner_commission_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Partner_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        partnerCommission = LoadPartnerCommission(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return partnerCommission;
        }


        public int InsertPartnerCommission(PartnerCommission partnerCommission)
        {
            return InsertPartnerCommission(partnerCommission, null);
        }

        private int InsertPartnerCommission(PartnerCommission partnerCommission, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_partner_commission";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Partner_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Product_class_id", DbType.Int16, DBValue.ToDBInt16(partnerCommission.ProductClassId)));
                paramCol.Add(new SqlDataParameter("@Commission_rate", DbType.Double, DBValue.ToDBFloat(partnerCommission.CommissionRate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    partnerCommission.PartnerId = DBValue.ToInt32(paramCol["@Partner_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdatePartnerCommission(PartnerCommission partnerCommission)
        {
            return UpdatePartnerCommission(partnerCommission, null);
        }

        private int UpdatePartnerCommission(PartnerCommission partnerCommission, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_partner_commission";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Partner_id", DbType.Int32, DBValue.ToDBInt32(partnerCommission.PartnerId)));
                paramCol.Add(new SqlDataParameter("@Product_class_id", DbType.Int16, DBValue.ToDBInt16(partnerCommission.ProductClassId)));
                paramCol.Add(new SqlDataParameter("@Commission_rate", DbType.Double, DBValue.ToDBFloat(partnerCommission.CommissionRate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region PartnerContacts Methods

        private PartnerContacts LoadPartnerContacts(DataRow row)
        {
            PartnerContacts partnerContacts = new PartnerContacts();

            // Store database values into our business object
            partnerContacts.PartnerContactId = DBValue.ToInt32(row["partner_contact_id"]);
            partnerContacts.PartnerId = DBValue.ToInt32(row["partner_id"]);
            partnerContacts.LanguageId = DBValue.ToInt16(row["language_id"]);
            partnerContacts.SectionName = DBValue.ToString(row["section_name"]);
            partnerContacts.SectionValue = DBValue.ToString(row["section_value"]);
            partnerContacts.DisplayOrder = DBValue.ToInt16(row["display_order"]);

            // return the filled object
            return partnerContacts;
        }

        public PartnerContacts[] GetPartnerContactss()
        {
            return GetPartnerContactss(null);
        }

        private PartnerContacts[] GetPartnerContactss(SqlInterface si)
        {
            PartnerContacts[] partnerContactss = null;

            string storedProcName = "efrcrm_get_partner_contactss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    partnerContactss = new PartnerContacts[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            partnerContactss[i] = LoadPartnerContacts(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return partnerContactss;
        }


        public PartnerContacts GetPartnerContactsByID(int id)
        {
            return GetPartnerContactsByID(id, null);
        }

        private PartnerContacts GetPartnerContactsByID(int id, SqlInterface si)
        {
            PartnerContacts partnerContacts = null;

            string storedProcName = "efrcrm_get_partner_contacts_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Partner_contact_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        partnerContacts = LoadPartnerContacts(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return partnerContacts;
        }


        public int InsertPartnerContacts(PartnerContacts partnerContacts)
        {
            return InsertPartnerContacts(partnerContacts, null);
        }

        private int InsertPartnerContacts(PartnerContacts partnerContacts, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_partner_contacts";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Partner_contact_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Partner_id", DbType.Int32, DBValue.ToDBInt32(partnerContacts.PartnerId)));
                paramCol.Add(new SqlDataParameter("@Language_id", DbType.Int16, DBValue.ToDBInt16(partnerContacts.LanguageId)));
                paramCol.Add(new SqlDataParameter("@Section_name", DbType.String, DBValue.ToDBString(partnerContacts.SectionName)));
                paramCol.Add(new SqlDataParameter("@Section_value", DbType.String, DBValue.ToDBString(partnerContacts.SectionValue)));
                paramCol.Add(new SqlDataParameter("@Display_order", DbType.Int16, DBValue.ToDBInt16(partnerContacts.DisplayOrder)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    partnerContacts.PartnerContactId = DBValue.ToInt32(paramCol["@Partner_contact_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdatePartnerContacts(PartnerContacts partnerContacts)
        {
            return UpdatePartnerContacts(partnerContacts, null);
        }

        private int UpdatePartnerContacts(PartnerContacts partnerContacts, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_partner_contacts";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Partner_contact_id", DbType.Int32, DBValue.ToDBInt32(partnerContacts.PartnerContactId)));
                paramCol.Add(new SqlDataParameter("@Partner_id", DbType.Int32, DBValue.ToDBInt32(partnerContacts.PartnerId)));
                paramCol.Add(new SqlDataParameter("@Language_id", DbType.Int16, DBValue.ToDBInt16(partnerContacts.LanguageId)));
                paramCol.Add(new SqlDataParameter("@Section_name", DbType.String, DBValue.ToDBString(partnerContacts.SectionName)));
                paramCol.Add(new SqlDataParameter("@Section_value", DbType.String, DBValue.ToDBString(partnerContacts.SectionValue)));
                paramCol.Add(new SqlDataParameter("@Display_order", DbType.Int16, DBValue.ToDBInt16(partnerContacts.DisplayOrder)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region PartnerFixedCost Methods

        private PartnerFixedCost LoadPartnerFixedCost(DataRow row)
        {
            PartnerFixedCost partnerFixedCost = new PartnerFixedCost();

            // Store database values into our business object
            partnerFixedCost.PartnerID = DBValue.ToInt32(row["partner_id"]);
            partnerFixedCost.CostByLead = DBValue.ToInt16(row["cost_by_lead"]);

            // return the filled object
            return partnerFixedCost;
        }

        public PartnerFixedCost[] GetPartnerFixedCosts()
        {
            return GetPartnerFixedCosts(null);
        }

        private PartnerFixedCost[] GetPartnerFixedCosts(SqlInterface si)
        {
            PartnerFixedCost[] partnerFixedCosts = null;

            string storedProcName = "efrcrm_get_partner_fixed_costs";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    partnerFixedCosts = new PartnerFixedCost[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            partnerFixedCosts[i] = LoadPartnerFixedCost(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return partnerFixedCosts;
        }


        public PartnerFixedCost GetPartnerFixedCostByID(int id)
        {
            return GetPartnerFixedCostByID(id, null);
        }

        private PartnerFixedCost GetPartnerFixedCostByID(int id, SqlInterface si)
        {
            PartnerFixedCost partnerFixedCost = null;

            string storedProcName = "efrcrm_get_partner_fixed_cost_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Partner_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        partnerFixedCost = LoadPartnerFixedCost(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return partnerFixedCost;
        }


        public int InsertPartnerFixedCost(PartnerFixedCost partnerFixedCost)
        {
            return InsertPartnerFixedCost(partnerFixedCost, null);
        }

        private int InsertPartnerFixedCost(PartnerFixedCost partnerFixedCost, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_partner_fixed_cost";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Partner_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Cost_By_Lead", DbType.Double, DBValue.ToDBFloat(partnerFixedCost.CostByLead)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    partnerFixedCost.PartnerID = DBValue.ToInt32(paramCol["@Partner_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdatePartnerFixedCost(PartnerFixedCost partnerFixedCost)
        {
            return UpdatePartnerFixedCost(partnerFixedCost, null);
        }

        private int UpdatePartnerFixedCost(PartnerFixedCost partnerFixedCost, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_partner_fixed_cost";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Partner_ID", DbType.Int32, DBValue.ToDBInt32(partnerFixedCost.PartnerID)));
                paramCol.Add(new SqlDataParameter("@Cost_By_Lead", DbType.Double, DBValue.ToDBFloat(partnerFixedCost.CostByLead)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region PartnerGroupTypes Methods

        private PartnerGroupTypes LoadPartnerGroupTypes(DataRow row)
        {
            PartnerGroupTypes partnerGroupTypes = new PartnerGroupTypes();

            // Store database values into our business object
            partnerGroupTypes.PartnerGroupTypeId = DBValue.ToInt16(row["partner_group_type_id"]);
            partnerGroupTypes.PartnerGroupTypeDesc = DBValue.ToString(row["partner_group_type_desc"]);

            // return the filled object
            return partnerGroupTypes;
        }

        public PartnerGroupTypes[] GetPartnerGroupTypess()
        {
            return GetPartnerGroupTypess(null);
        }

        private PartnerGroupTypes[] GetPartnerGroupTypess(SqlInterface si)
        {
            PartnerGroupTypes[] partnerGroupTypess = null;

            string storedProcName = "efrcrm_get_partner_group_typess";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    partnerGroupTypess = new PartnerGroupTypes[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            partnerGroupTypess[i] = LoadPartnerGroupTypes(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return partnerGroupTypess;
        }



        #endregion

        #region PartnerPackages Methods

        private PartnerPackages LoadPartnerPackages(DataRow row)
        {
            PartnerPackages partnerPackages = new PartnerPackages();

            // Store database values into our business object
            partnerPackages.PartnerId = DBValue.ToInt32(row["partner_id"]);
            partnerPackages.PackageId = DBValue.ToInt16(row["package_id"]);

            // return the filled object
            return partnerPackages;
        }

        public PartnerPackages[] GetPartnerPackagess()
        {
            return GetPartnerPackagess(null);
        }

        private PartnerPackages[] GetPartnerPackagess(SqlInterface si)
        {
            PartnerPackages[] partnerPackagess = null;

            string storedProcName = "efrcrm_get_partner_packagess";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    partnerPackagess = new PartnerPackages[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            partnerPackagess[i] = LoadPartnerPackages(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return partnerPackagess;
        }


        public PartnerPackages GetPartnerPackagesByID(int id)
        {
            return GetPartnerPackagesByID(id, null);
        }

        private PartnerPackages GetPartnerPackagesByID(int id, SqlInterface si)
        {
            PartnerPackages partnerPackages = null;

            string storedProcName = "efrcrm_get_partner_packages_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Partner_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        partnerPackages = LoadPartnerPackages(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return partnerPackages;
        }


        public int InsertPartnerPackages(PartnerPackages partnerPackages)
        {
            return InsertPartnerPackages(partnerPackages, null);
        }

        private int InsertPartnerPackages(PartnerPackages partnerPackages, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_partner_packages";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Partner_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Package_id", DbType.Int16, DBValue.ToDBInt16(partnerPackages.PackageId)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    partnerPackages.PartnerId = DBValue.ToInt32(paramCol["@Partner_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdatePartnerPackages(PartnerPackages partnerPackages)
        {
            return UpdatePartnerPackages(partnerPackages, null);
        }

        private int UpdatePartnerPackages(PartnerPackages partnerPackages, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_partner_packages";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Partner_id", DbType.Int32, DBValue.ToDBInt32(partnerPackages.PartnerId)));
                paramCol.Add(new SqlDataParameter("@Package_id", DbType.Int16, DBValue.ToDBInt16(partnerPackages.PackageId)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region PartnerWebDetails Methods

        private PartnerWebDetails LoadPartnerWebDetails(DataRow row)
        {
            PartnerWebDetails partnerWebDetails = new PartnerWebDetails();

            // Store database values into our business object
            partnerWebDetails.PartnerId = DBValue.ToInt32(row["partner_id"]);
            partnerWebDetails.TopMenu = DBValue.ToString(row["top_menu"]);
            partnerWebDetails.LeftMenu = DBValue.ToString(row["left_menu"]);
            partnerWebDetails.RightMenu = DBValue.ToString(row["right_menu"]);
            partnerWebDetails.ImagesPath = DBValue.ToString(row["images_path"]);
            partnerWebDetails.DefaultColor = DBValue.ToString(row["default_color"]);
            partnerWebDetails.ShortCutMenu = DBValue.ToString(row["short_cut_menu"]);
            partnerWebDetails.ProductImageMap = DBValue.ToString(row["product_image_map"]);

            // return the filled object
            return partnerWebDetails;
        }

        public PartnerWebDetails[] GetPartnerWebDetailss()
        {
            return GetPartnerWebDetailss(null);
        }

        private PartnerWebDetails[] GetPartnerWebDetailss(SqlInterface si)
        {
            PartnerWebDetails[] partnerWebDetailss = null;

            string storedProcName = "efrcrm_get_partner_web_detailss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    partnerWebDetailss = new PartnerWebDetails[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            partnerWebDetailss[i] = LoadPartnerWebDetails(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return partnerWebDetailss;
        }


        public PartnerWebDetails GetPartnerWebDetailsByID(int id)
        {
            return GetPartnerWebDetailsByID(id, null);
        }

        private PartnerWebDetails GetPartnerWebDetailsByID(int id, SqlInterface si)
        {
            PartnerWebDetails partnerWebDetails = null;

            string storedProcName = "efrcrm_get_partner_web_details_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Partner_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        partnerWebDetails = LoadPartnerWebDetails(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return partnerWebDetails;
        }


        public int InsertPartnerWebDetails(PartnerWebDetails partnerWebDetails)
        {
            return InsertPartnerWebDetails(partnerWebDetails, null);
        }

        private int InsertPartnerWebDetails(PartnerWebDetails partnerWebDetails, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_partner_web_details";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Partner_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Top_menu", DbType.String, DBValue.ToDBString(partnerWebDetails.TopMenu)));
                paramCol.Add(new SqlDataParameter("@Left_menu", DbType.String, DBValue.ToDBString(partnerWebDetails.LeftMenu)));
                paramCol.Add(new SqlDataParameter("@Right_menu", DbType.String, DBValue.ToDBString(partnerWebDetails.RightMenu)));
                paramCol.Add(new SqlDataParameter("@Images_path", DbType.String, DBValue.ToDBString(partnerWebDetails.ImagesPath)));
                paramCol.Add(new SqlDataParameter("@Default_color", DbType.String, DBValue.ToDBString(partnerWebDetails.DefaultColor)));
                paramCol.Add(new SqlDataParameter("@Short_cut_menu", DbType.String, DBValue.ToDBString(partnerWebDetails.ShortCutMenu)));
                paramCol.Add(new SqlDataParameter("@Product_image_map", DbType.String, DBValue.ToDBString(partnerWebDetails.ProductImageMap)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    partnerWebDetails.PartnerId = DBValue.ToInt32(paramCol["@Partner_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdatePartnerWebDetails(PartnerWebDetails partnerWebDetails)
        {
            return UpdatePartnerWebDetails(partnerWebDetails, null);
        }

        private int UpdatePartnerWebDetails(PartnerWebDetails partnerWebDetails, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_partner_web_details";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Partner_id", DbType.Int32, DBValue.ToDBInt32(partnerWebDetails.PartnerId)));
                paramCol.Add(new SqlDataParameter("@Top_menu", DbType.String, DBValue.ToDBString(partnerWebDetails.TopMenu)));
                paramCol.Add(new SqlDataParameter("@Left_menu", DbType.String, DBValue.ToDBString(partnerWebDetails.LeftMenu)));
                paramCol.Add(new SqlDataParameter("@Right_menu", DbType.String, DBValue.ToDBString(partnerWebDetails.RightMenu)));
                paramCol.Add(new SqlDataParameter("@Images_path", DbType.String, DBValue.ToDBString(partnerWebDetails.ImagesPath)));
                paramCol.Add(new SqlDataParameter("@Default_color", DbType.String, DBValue.ToDBString(partnerWebDetails.DefaultColor)));
                paramCol.Add(new SqlDataParameter("@Short_cut_menu", DbType.String, DBValue.ToDBString(partnerWebDetails.ShortCutMenu)));
                paramCol.Add(new SqlDataParameter("@Product_image_map", DbType.String, DBValue.ToDBString(partnerWebDetails.ProductImageMap)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region PartyType Methods

        private PartyType LoadPartyType(DataRow row)
        {
            PartyType partyType = new PartyType();

            // Store database values into our business object
            partyType.PartyTypeId = DBValue.ToInt16(row["party_type_id"]);
            partyType.PartyTypeDesc = DBValue.ToString(row["party_type_desc"]);

            // return the filled object
            return partyType;
        }

        public PartyType[] GetPartyTypes()
        {
            return GetPartyTypes(null);
        }

        private PartyType[] GetPartyTypes(SqlInterface si)
        {
            PartyType[] partyTypes = null;

            string storedProcName = "efrcrm_get_party_types";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    partyTypes = new PartyType[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            partyTypes[i] = LoadPartyType(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return partyTypes;
        }



        #endregion

        #region Payment Methods

        private Payment LoadPayment(DataRow row)
        {
            Payment payment = new Payment();

            // Store database values into our business object
            payment.SalesId = DBValue.ToInt32(row["sales_id"]);
            payment.PaymentNo = DBValue.ToInt32(row["payment_no"]);
            payment.PaymentMethodId = DBValue.ToByte(row["payment_method_id"]);
            payment.CollectionStatusId = DBValue.ToInt32(row["collection_status_id"]);
            payment.PaymentEntryDate = DBValue.ToDateTime(row["payment_entry_date"]);
            payment.CashableDate = DBValue.ToDateTime(row["cashable_date"]);
            payment.CreditCardNo = DBValue.ToString(row["credit_card_no"]);
            payment.ExpiryDate = DBValue.ToString(row["expiry_date"]);
            payment.NameOnCard = DBValue.ToString(row["name_on_card"]);
            payment.AuthorizationNumber = DBValue.ToString(row["authorization_number"]);
            payment.PaymentAmount = DBValue.ToDouble(row["payment_amount"]);
            payment.CommissionPaid = DBValue.ToBoolean(row["commission_paid"]);
            payment.ForeignOrderId = DBValue.ToInt32(row["foreign_orderid"]);

            // return the filled object
            return payment;
        }

        public Payment[] GetPayments()
        {
            return GetPayments(null);
        }

        private Payment[] GetPayments(SqlInterface si)
        {
            Payment[] payments = null;

            string storedProcName = "efrcrm_get_payments";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    payments = new Payment[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            payments[i] = LoadPayment(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return payments;
        }


        public PaymentCollection GetPaymentsBySaleId(int saleId)
        {
            return GetPaymentsBySaleId(saleId, null);
        }

        private PaymentCollection GetPaymentsBySaleId(int saleId, SqlInterface si)
        {
            PaymentCollection payments = null;

            string storedProcName = "efrcrm_get_payments_by_sale_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_id", DbType.Int32, DBValue.ToDBInt32(saleId)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    payments = new PaymentCollection();

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            payments.Add(LoadPayment(dt.Rows[i]));
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return payments;
        }

        public PaymentCollection GetPaymentsByForeignOrderId(int foreignOrderId)
        {
            return GetPaymentsByForeignOrderId(foreignOrderId, null);
        }

        private PaymentCollection GetPaymentsByForeignOrderId(int foreignOrderId, SqlInterface si)
        {
            PaymentCollection payments = null;

            string storedProcName = "efrcrm_get_payments_by_foreign_orderid ";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@foreign_orderid", DbType.Int32, DBValue.ToDBInt32(foreignOrderId)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    payments = new PaymentCollection();

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            payments.Add(LoadPayment(dt.Rows[i]));
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return payments;
        }

        public Payment GetPaymentBySaleIDandPaymentNo(int saleId, int paymentNo)
        {
            return GetPaymentBySaleIDandPaymentNo(saleId, paymentNo, null);
        }

        private Payment GetPaymentBySaleIDandPaymentNo(int saleId, int paymentNo, SqlInterface si)
        {
            Payment payment = null;

            string storedProcName = "efrcrm_get_payment_by_sale_id_and_payment_no";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_id", DbType.Int32, DBValue.ToDBInt32(saleId)));
                paramCol.Add(new SqlDataParameter("@payment_no", DbType.Int32, DBValue.ToDBInt32(paymentNo)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    try
                    {
                        payment = LoadPayment(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return payment;
        }


        public Payment GetPaymentByID(int id)
        {
            return GetPaymentByID(id, null);
        }

        private Payment GetPaymentByID(int id, SqlInterface si)
        {
            Payment payment = null;

            string storedProcName = "efrcrm_get_payment_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        payment = LoadPayment(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return payment;
        }

        public decimal GetPaymentReceivableBySaleID(int saleID)
        {
            return GetPaymentReceivableBySaleID(saleID, null);
        }

        private decimal GetPaymentReceivableBySaleID(int saleID, SqlInterface si)
        {
            decimal receivable = 0;

            string storedProcName = "efrcrm_get_payment_receivable_by_sale_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@sale_id", DbType.Int32, DBValue.ToDBInt32(saleID)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                receivable = Convert.ToDecimal(si.ExecuteScalar(storedProcName, CommandType.StoredProcedure, paramCol));


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return receivable;
        }

        public void InsertPayment(Payment payment)
        {
            InsertPayment(payment, null);
        }

        private void InsertPayment(Payment payment, SqlInterface si)
        {
            string storedProcName = "efrcrm_insert_payment";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_id", DbType.Int32, DBValue.ToDBInt32(payment.SalesId)));
                paramCol.Add(new SqlDataParameter("@Payment_no", DbType.Int32, DBValue.ToDBInt32(payment.PaymentNo)));
                paramCol.Add(new SqlDataParameter("@Payment_method_id", DbType.Byte, DBValue.ToDBByte(payment.PaymentMethodId)));
                paramCol.Add(new SqlDataParameter("@Collection_status_id", DbType.Int32, DBValue.ToDBInt32(payment.CollectionStatusId)));
                paramCol.Add(new SqlDataParameter("@Payment_entry_date", DbType.DateTime, DBValue.ToDBDateTime(payment.PaymentEntryDate)));
                paramCol.Add(new SqlDataParameter("@Cashable_date", DbType.DateTime, DBValue.ToDBDateTime(payment.CashableDate)));
                paramCol.Add(new SqlDataParameter("@Credit_card_no", DbType.String, DBValue.ToDBString(payment.CreditCardNo)));
                paramCol.Add(new SqlDataParameter("@Expiry_date", DbType.String, DBValue.ToDBString(payment.ExpiryDate)));
                paramCol.Add(new SqlDataParameter("@Name_on_card", DbType.String, DBValue.ToDBString(payment.NameOnCard)));
                paramCol.Add(new SqlDataParameter("@Authorization_number", DbType.String, DBValue.ToDBString(payment.AuthorizationNumber)));
                paramCol.Add(new SqlDataParameter("@Payment_amount", DbType.Double, DBValue.ToDBDouble(payment.PaymentAmount)));
                paramCol.Add(new SqlDataParameter("@Commission_paid", DbType.Boolean, DBValue.ToDBBoolean(payment.CommissionPaid)));
                paramCol.Add(new SqlDataParameter("@foreign_orderid", DbType.Int32, DBValue.ToDBInt32(payment.ForeignOrderId)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

            }
            catch (System.Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }

        }

        private DateTime getExpiryDate(string date)
        {
            try
            {
                int pos = date.IndexOf("/");
                if (pos == -1)
                {
                    return new DateTime(1, 1, 1);
                }
                else
                {
                    int month = Convert.ToInt32(date.Substring(0, pos));
                    string year = date.Substring(pos + 1, date.Length - pos - 1);
                    if (year.Length == 2)
                    {
                        year = "20" + year;
                    }


                    return new DateTime(Convert.ToInt32(year), month, 1);
                }
            }
            catch (Exception x)
            {
                throw x;
            }

        }

        /*
        public void InsertPaymentQSP(Payment payment, int createUserID)
        {
            int debug = 0;
            bool error = true;
            int oeID = -2;
            try
            {
                //GET  qsp's order id from efr's sale table
                EFundraisingCRM.Sale s = EFundraisingCRM.Sale.GetSaleByID(payment.SalesId);
                oeID = s.ExtOrderID;

                debug = 1;
                if (oeID > 1)
                {
                    //get card type
                    efundraising.EFundraisingCRM.PaymentMethod pm = efundraising.EFundraisingCRM.PaymentMethod.GetPaymentMethodByID(payment.PaymentMethodId);
                    if (pm != null)
                    {
                        debug = 2;
                        //get cc id
                        ICriteria criteria = QSP.Business.Fulfillment.CreditCardType.CreateCriteria();
                        string desc = pm.Description;
                        if (pm.Description == "AMEX")
                        {
                            desc = "American Express";
                        }
                        criteria.Add(Expression.Eq(QSP.Business.Fulfillment.CreditCardType.CreditCardTypeNameProperty, desc));
                        List<QSP.Business.Fulfillment.CreditCardType> creditCard = QSP.Business.Fulfillment.CreditCardType.GetCreditCardTypeList(criteria);
                        if (creditCard != null && creditCard.Count > 0)
                        {
                            debug = 3;
                            QSP.Business.Fulfillment.CreditCard c = new QSP.Business.Fulfillment.CreditCard();
                            c.CreateDate = DateTime.Now;
                            c.CreditCardExpirationDate = getExpiryDate(payment.ExpiryDate);
                            c.CreditCardName = payment.NameOnCard;
                            c.CreditCardNumber = payment.CreditCardNo;
                            c.CreditCardTypeId = creditCard[0].CreditCardTypeId;
                            if (payment.CreditCardNo.Length >= 15)
                            {
                                c.LastCcDigits = payment.CreditCardNo.Substring(payment.CreditCardNo.Length - 4, 4);
                            }
                            else
                            {
                                c.LastCcDigits = "0000";
                            }

                            c.UpdateDate = DateTime.Now;
                            c.Save();
                            debug = 4;

                            QSP.Business.Fulfillment.Payment p = new QSP.Business.Fulfillment.Payment();
                            p.Amount = Convert.ToDecimal(payment.PaymentAmount);
                            p.CreateDate = DateTime.Now;
                            p.CreditCardId = c.CreditCardId;
                            p.PaymentTypeId = 3;// paymentType[0].PaymentTypeId;
                            p.CreateUserId = createUserID;
                            p.Save();

                            debug = 5;
                            QSP.Business.Fulfillment.Invoice i = new QSP.Business.Fulfillment.Invoice();
                            i.Amount = Convert.ToDecimal(payment.PaymentAmount);
                            i.CreateDate = DateTime.Now;
                            i.OrderId = oeID;
                            i.InvoiceDate = DateTime.Now;
                            i.CreateUserId = createUserID;
                            i.Save();

                            debug = 6;
                            QSP.Business.Fulfillment.PaymentInvoice pi = new QSP.Business.Fulfillment.PaymentInvoice();
                            pi.PaymentId = p.PaymentId;
                            pi.InvoiceId = i.InvoiceId;
                            pi.CreateDate = DateTime.Now;
                            pi.CreateUserId = createUserID;
                            pi.Save();

                            debug = 7;
                            QSP.Business.Fulfillment.CreditCardAuthorization auth = new QSP.Business.Fulfillment.CreditCardAuthorization();
                            auth.Amount = Convert.ToDecimal(payment.PaymentAmount);
                            auth.CreateDate = DateTime.Now;
                            auth.CreditCardId = c.CreditCardId;
                            auth.ResponseAuthCode = payment.AuthorizationNumber;
                            auth.ResponseOrderId = payment.ForeignOrderId;
                            auth.CreateUserId = 0;
                            auth.Save();
                            error = false;


                        }
                    }
                }
                if (error)
                {
                    efundraising.Diagnostics.Logger.LogError("Error processing payment in OE. sale: " + s.SalesId + " debug ID=" + debug);
                }


            }
            catch (Exception ex)
            {
                efundraising.Diagnostics.Logger.LogError(ex + "   --OEID:" + oeID);
            }

        }
        */

        public void InsertPaymentsForCompletedTransactions(PaymentCollection payments)
        {
            try
            {
                foreach (Payment p in payments)
                {
                    InsertPayment(p);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        public int UpdatePayment(Payment payment)
        {
            return UpdatePayment(payment, null);
        }

        private int UpdatePayment(Payment payment, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_payment";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_id", DbType.Int32, DBValue.ToDBInt32(payment.SalesId)));
                paramCol.Add(new SqlDataParameter("@Payment_no", DbType.Int32, DBValue.ToDBInt32(payment.PaymentNo)));
                paramCol.Add(new SqlDataParameter("@Payment_method_id", DbType.Byte, DBValue.ToDBByte(payment.PaymentMethodId)));
                paramCol.Add(new SqlDataParameter("@Collection_status_id", DbType.Int32, DBValue.ToDBInt32(payment.CollectionStatusId)));
                paramCol.Add(new SqlDataParameter("@Payment_entry_date", DbType.DateTime, DBValue.ToDBDateTime(payment.PaymentEntryDate)));
                paramCol.Add(new SqlDataParameter("@Cashable_date", DbType.DateTime, DBValue.ToDBDateTime(payment.CashableDate)));
                paramCol.Add(new SqlDataParameter("@Credit_card_no", DbType.String, DBValue.ToDBString(payment.CreditCardNo)));
                paramCol.Add(new SqlDataParameter("@Expiry_date", DbType.String, DBValue.ToDBString(payment.ExpiryDate)));
                paramCol.Add(new SqlDataParameter("@Name_on_card", DbType.String, DBValue.ToDBString(payment.NameOnCard)));
                paramCol.Add(new SqlDataParameter("@Authorization_number", DbType.String, DBValue.ToDBString(payment.AuthorizationNumber)));
                paramCol.Add(new SqlDataParameter("@Payment_amount", DbType.Double, DBValue.ToDBDouble(payment.PaymentAmount)));
                paramCol.Add(new SqlDataParameter("@Commission_paid", DbType.Boolean, DBValue.ToDBBoolean(payment.CommissionPaid)));
                paramCol.Add(new SqlDataParameter("@foreign_orderid", DbType.Int32, DBValue.ToDBInt32(payment.ForeignOrderId)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion


        #region PaymentMethod Methods

        private PaymentMethod LoadPaymentMethod(DataRow row)
        {
            PaymentMethod paymentMethod = new PaymentMethod();

            // Store database values into our business object
            paymentMethod.PaymentMethodId = DBValue.ToInt16(row["payment_method_id"]);
            paymentMethod.Description = DBValue.ToString(row["description"]);
            paymentMethod.IsNegative = DBValue.ToInt32(row["is_negative"]);
            paymentMethod.DiscountPercentage = DBValue.ToInt16(row["discount_percentage"]);

            // return the filled object
            return paymentMethod;
        }

        public PaymentMethod[] GetPaymentMethods()
        {
            return GetPaymentMethods(null);
        }

        private PaymentMethod[] GetPaymentMethods(SqlInterface si)
        {
            PaymentMethod[] paymentMethods = null;

            string storedProcName = "efrcrm_get_payment_methods";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    paymentMethods = new PaymentMethod[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            paymentMethods[i] = LoadPaymentMethod(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return paymentMethods;
        }


        public PaymentMethod GetPaymentMethodByID(int id)
        {
            return GetPaymentMethodByID(id, null);
        }

        private PaymentMethod GetPaymentMethodByID(int id, SqlInterface si)
        {
            PaymentMethod paymentMethod = null;

            string storedProcName = "efrcrm_get_payment_method_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Payment_method_id", DbType.Int16, ParameterDirection.Input, id));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    paymentMethod = new PaymentMethod();

                    // fill our objects
                    try
                    {
                        paymentMethod = LoadPaymentMethod(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }
            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return paymentMethod;
        }


        #endregion

        #region PaymentTerm Methods

        private PaymentTerm LoadPaymentTerm(DataRow row)
        {
            PaymentTerm paymentTerm = new PaymentTerm();

            // Store database values into our business object
            paymentTerm.PaymentTermId = DBValue.ToInt16(row["payment_term_id"]);
            paymentTerm.Description = DBValue.ToString(row["description"]);
            paymentTerm.DiscountPercent = DBValue.ToInt16(row["discount_percent"]);
            paymentTerm.LeadDays = DBValue.ToInt32(row["lead_days"]);
            paymentTerm.DefaultArStatus = DBValue.ToInt32(row["default_ar_status"]);
            paymentTerm.HideFromConsultants = DBValue.ToInt32(row["hide_from_consultants"]);

            // return the filled object
            return paymentTerm;
        }

        public PaymentTerm[] GetPaymentTerms()
        {
            return GetPaymentTerms(null);
        }

        private PaymentTerm[] GetPaymentTerms(SqlInterface si)
        {
            PaymentTerm[] paymentTerms = null;

            string storedProcName = "efrcrm_get_payment_terms";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    paymentTerms = new PaymentTerm[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            paymentTerms[i] = LoadPaymentTerm(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return paymentTerms;
        }

        public PaymentTerm GetPaymentTermByID(int id)
        {
            return GetPaymentTermByID(id, null);
        }

        private PaymentTerm GetPaymentTermByID(int id, SqlInterface si)
        {
            PaymentTerm paymentTerm = null;

            string storedProcName = "efrcrm_get_payment_term_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@payment_term_id", DbType.Int32, DBValue.ToDBInt32(id)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {

                    // fill our objects
                    try
                    {
                        paymentTerm = LoadPaymentTerm(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName + " id:" + id, ex);
                    }

                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return paymentTerm;
        }


        #endregion

        #region PhoneNumberTracking Methods

        private PhoneNumberTracking LoadPhoneNumberTracking(DataRow row)
        {
            PhoneNumberTracking phoneNumberTracking = new PhoneNumberTracking();

            // Store database values into our business object
            phoneNumberTracking.PhoneNumberTrackingId = DBValue.ToInt32(row["phone_number_tracking_id"]);
            phoneNumberTracking.PhoneNumberTrackingDesc = DBValue.ToString(row["phone_number_tracking_desc"]);

            // return the filled object
            return phoneNumberTracking;
        }

        public PhoneNumberTracking[] GetPhoneNumberTrackings()
        {
            return GetPhoneNumberTrackings(null);
        }

        private PhoneNumberTracking[] GetPhoneNumberTrackings(SqlInterface si)
        {
            PhoneNumberTracking[] phoneNumberTrackings = null;

            string storedProcName = "efrcrm_get_phone_number_trackings";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    phoneNumberTrackings = new PhoneNumberTracking[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            phoneNumberTrackings[i] = LoadPhoneNumberTracking(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return phoneNumberTrackings;
        }


        public PhoneNumberTracking GetPhoneNumberTrackingByID(int id)
        {
            return GetPhoneNumberTrackingByID(id, null);
        }

        private PhoneNumberTracking GetPhoneNumberTrackingByID(int id, SqlInterface si)
        {
            PhoneNumberTracking phoneNumberTracking = null;

            string storedProcName = "efrcrm_get_phone_number_tracking_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Phone_number_tracking_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        phoneNumberTracking = LoadPhoneNumberTracking(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return phoneNumberTracking;
        }


        public int InsertPhoneNumberTracking(PhoneNumberTracking phoneNumberTracking)
        {
            return InsertPhoneNumberTracking(phoneNumberTracking, null);
        }

        private int InsertPhoneNumberTracking(PhoneNumberTracking phoneNumberTracking, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_phone_number_tracking";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Phone_number_tracking_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Phone_number_tracking_desc", DbType.String, DBValue.ToDBString(phoneNumberTracking.PhoneNumberTrackingDesc)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    phoneNumberTracking.PhoneNumberTrackingId = DBValue.ToInt32(paramCol["@Phone_number_tracking_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdatePhoneNumberTracking(PhoneNumberTracking phoneNumberTracking)
        {
            return UpdatePhoneNumberTracking(phoneNumberTracking, null);
        }

        private int UpdatePhoneNumberTracking(PhoneNumberTracking phoneNumberTracking, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_phone_number_tracking";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Phone_number_tracking_id", DbType.Int32, DBValue.ToDBInt32(phoneNumberTracking.PhoneNumberTrackingId)));
                paramCol.Add(new SqlDataParameter("@Phone_number_tracking_desc", DbType.String, DBValue.ToDBString(phoneNumberTracking.PhoneNumberTrackingDesc)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region PoStatus Methods

        private PoStatus LoadPoStatus(DataRow row)
        {
            PoStatus poStatus = new PoStatus();

            // Store database values into our business object
            poStatus.PoStatusId = DBValue.ToInt16(row["po_status_id"]);
            poStatus.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return poStatus;
        }

        public PoStatus[] GetPoStatuss()
        {
            return GetPoStatuss(null);
        }

        private PoStatus[] GetPoStatuss(SqlInterface si)
        {
            PoStatus[] poStatuss = null;

            string storedProcName = "efrcrm_get_po_statuss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    poStatuss = new PoStatus[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            poStatuss[i] = LoadPoStatus(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return poStatuss;
        }

        public PoStatus GetPoStatusByID(int id)
        {
            return GetPoStatusByID(id, null);
        }

        private PoStatus GetPoStatusByID(int id, SqlInterface si)
        {
            PoStatus poStatus = null;

            string storedProcName = "efrcrm_get_po_status_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Po_Status_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        poStatus = LoadPoStatus(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return poStatus;
        }





        #endregion

        #region PostponedSale Methods

        private PostponedSale LoadPostponedSale(DataRow row)
        {
            PostponedSale postponedSale = new PostponedSale();

            // Store database values into our business object
            postponedSale.SalesID = DBValue.ToInt32(row["sales_id"]);
            postponedSale.PostponedStatusID = DBValue.ToInt32(row["postponed_status_id"]);
            postponedSale.Comments = DBValue.ToString(row["comments"]);

            // return the filled object
            return postponedSale;
        }

        public PostponedSale[] GetPostponedSales()
        {
            return GetPostponedSales(null);
        }

        private PostponedSale[] GetPostponedSales(SqlInterface si)
        {
            PostponedSale[] postponedSales = null;

            string storedProcName = "efrcrm_get_postponed_sales";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    postponedSales = new PostponedSale[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            postponedSales[i] = LoadPostponedSale(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return postponedSales;
        }


        public PostponedSale GetPostponedSaleByID(int id)
        {
            return GetPostponedSaleByID(id, null);
        }

        private PostponedSale GetPostponedSaleByID(int id, SqlInterface si)
        {
            PostponedSale postponedSale = null;

            string storedProcName = "efrcrm_get_postponed_sale_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        postponedSale = LoadPostponedSale(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return postponedSale;
        }


        public int InsertPostponedSale(PostponedSale postponedSale)
        {
            return InsertPostponedSale(postponedSale, null);
        }

        private int InsertPostponedSale(PostponedSale postponedSale, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_postponed_sale";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Postponed_Status_ID", DbType.Int32, DBValue.ToDBInt32(postponedSale.PostponedStatusID)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(postponedSale.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    postponedSale.SalesID = DBValue.ToInt32(paramCol["@Sales_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdatePostponedSale(PostponedSale postponedSale)
        {
            return UpdatePostponedSale(postponedSale, null);
        }

        private int UpdatePostponedSale(PostponedSale postponedSale, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_postponed_sale";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(postponedSale.SalesID)));
                paramCol.Add(new SqlDataParameter("@Postponed_Status_ID", DbType.Int32, DBValue.ToDBInt32(postponedSale.PostponedStatusID)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(postponedSale.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region PostponedStatus Methods

        private PostponedStatus LoadPostponedStatus(DataRow row)
        {
            PostponedStatus postponedStatus = new PostponedStatus();

            // Store database values into our business object
            postponedStatus.PostponedStatusID = DBValue.ToInt32(row["postponed_status_id"]);
            postponedStatus.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return postponedStatus;
        }

        public PostponedStatus[] GetPostponedStatuss()
        {
            return GetPostponedStatuss(null);
        }

        private PostponedStatus[] GetPostponedStatuss(SqlInterface si)
        {
            PostponedStatus[] postponedStatuss = null;

            string storedProcName = "efrcrm_get_postponed_statuss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    postponedStatuss = new PostponedStatus[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            postponedStatuss[i] = LoadPostponedStatus(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return postponedStatuss;
        }


        public PostponedStatus GetPostponedStatusByID(int id)
        {
            return GetPostponedStatusByID(id, null);
        }

        private PostponedStatus GetPostponedStatusByID(int id, SqlInterface si)
        {
            PostponedStatus postponedStatus = null;

            string storedProcName = "efrcrm_get_postponed_status_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Postponed_Status_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        postponedStatus = LoadPostponedStatus(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return postponedStatus;
        }


        public int InsertPostponedStatus(PostponedStatus postponedStatus)
        {
            return InsertPostponedStatus(postponedStatus, null);
        }

        private int InsertPostponedStatus(PostponedStatus postponedStatus, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_postponed_status";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Postponed_Status_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(postponedStatus.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    postponedStatus.PostponedStatusID = DBValue.ToInt32(paramCol["@Postponed_Status_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdatePostponedStatus(PostponedStatus postponedStatus)
        {
            return UpdatePostponedStatus(postponedStatus, null);
        }

        private int UpdatePostponedStatus(PostponedStatus postponedStatus, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_postponed_status";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Postponed_Status_ID", DbType.Int32, DBValue.ToDBInt32(postponedStatus.PostponedStatusID)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(postponedStatus.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region PriceRange Methods

        private PriceRange LoadPriceRange(DataRow row)
        {
            PriceRange priceRange = new PriceRange();

            // Store database values into our business object
            priceRange.PriceRangeID = DBValue.ToInt32(row["price_range_id"]);
            priceRange.PackageID = DBValue.ToInt32(row["package_id"]);
            priceRange.MinimumQty = DBValue.ToInt32(row["minimum_qty"]);
            priceRange.MaximumQty = DBValue.ToInt32(row["maximum_qty"]);
            priceRange.UnitPriceSold = DBValue.ToInt16(row["unit_price_sold"]);

            // return the filled object
            return priceRange;
        }

        public PriceRange[] GetPriceRanges()
        {
            return GetPriceRanges(null);
        }

        private PriceRange[] GetPriceRanges(SqlInterface si)
        {
            PriceRange[] priceRanges = null;

            string storedProcName = "efrcrm_get_price_ranges";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    priceRanges = new PriceRange[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            priceRanges[i] = LoadPriceRange(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return priceRanges;
        }


        public PriceRange GetPriceRangeByID(int id)
        {
            return GetPriceRangeByID(id, null);
        }

        private PriceRange GetPriceRangeByID(int id, SqlInterface si)
        {
            PriceRange priceRange = null;

            string storedProcName = "efrcrm_get_price_range_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Price_Range_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        priceRange = LoadPriceRange(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return priceRange;
        }


        public int InsertPriceRange(PriceRange priceRange)
        {
            return InsertPriceRange(priceRange, null);
        }

        private int InsertPriceRange(PriceRange priceRange, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_price_range";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Price_Range_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Package_ID", DbType.Int32, DBValue.ToDBInt32(priceRange.PackageID)));
                paramCol.Add(new SqlDataParameter("@Minimum_Qty", DbType.Int32, DBValue.ToDBInt32(priceRange.MinimumQty)));
                paramCol.Add(new SqlDataParameter("@Maximum_Qty", DbType.Int32, DBValue.ToDBInt32(priceRange.MaximumQty)));
                paramCol.Add(new SqlDataParameter("@Unit_Price_Sold", DbType.Double, DBValue.ToDBFloat(priceRange.UnitPriceSold)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    priceRange.PriceRangeID = DBValue.ToInt32(paramCol["@Price_Range_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdatePriceRange(PriceRange priceRange)
        {
            return UpdatePriceRange(priceRange, null);
        }

        private int UpdatePriceRange(PriceRange priceRange, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_price_range";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Price_Range_ID", DbType.Int32, DBValue.ToDBInt32(priceRange.PriceRangeID)));
                paramCol.Add(new SqlDataParameter("@Package_ID", DbType.Int32, DBValue.ToDBInt32(priceRange.PackageID)));
                paramCol.Add(new SqlDataParameter("@Minimum_Qty", DbType.Int32, DBValue.ToDBInt32(priceRange.MinimumQty)));
                paramCol.Add(new SqlDataParameter("@Maximum_Qty", DbType.Int32, DBValue.ToDBInt32(priceRange.MaximumQty)));
                paramCol.Add(new SqlDataParameter("@Unit_Price_Sold", DbType.Double, DBValue.ToDBFloat(priceRange.UnitPriceSold)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region ProductBusinessRules

        private ProductBusinessRules LoadProductBusinessRules(DataRow row)
        {
            ProductBusinessRules productBusinessRules = new ProductBusinessRules();

            // Store database values into our business object
            productBusinessRules.ProductBusinessRuleID = DBValue.ToInt32(row["product_business_rule_id"]);
            productBusinessRules.ProductClassID = DBValue.ToInt32(row["product_class_id"]);
            productBusinessRules.ProductID = DBValue.ToInt32(row["product_id"]);
            productBusinessRules.MinOrder = DBValue.ToInt32(row["min_order"]);
            if (row["free"] == DBNull.Value)
            {
                productBusinessRules.Free = 0;
            }
            else
            {
                productBusinessRules.Free = Convert.ToDecimal(row["free"]);
            }

            productBusinessRules.AverageDeliveryTime = DBValue.ToInt32(row["average_delivery_time"]);
            // return the filled object
            return productBusinessRules;
        }

        public ProductBusinessRules GetProductBusinessRulesByProductID(int productID)
        {
            return GetProductBusinessRulesByProductID(productID, null);
        }

        private ProductBusinessRules GetProductBusinessRulesByProductID(int productID, SqlInterface si)
        {
            ProductBusinessRules productBusinessRules = null;

            string storedProcName = "efrcrm_get_product_business_rules_by_product_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@product_id", DbType.Int32, DBValue.ToDBInt32(productID)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        productBusinessRules = LoadProductBusinessRules(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return productBusinessRules;
        }


        public ProductBusinessRules GetProductBusinessRulesByPackageID(int packageID)
        {
            return GetProductBusinessRulesByPackageID(packageID, null);
        }

        private ProductBusinessRules GetProductBusinessRulesByPackageID(int packageID, SqlInterface si)
        {
            ProductBusinessRules productBusinessRules = null;

            string storedProcName = "efrcrm_get_product_business_rules_by_package_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@package_id", DbType.Int32, DBValue.ToDBInt32(packageID)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        productBusinessRules = LoadProductBusinessRules(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return productBusinessRules;
        }

        public ProductBusinessRules GetProductBusinessRulesByProductClassID(int productClassID)
        {
            return GetProductBusinessRulesByProductClassID(productClassID, null);
        }

        private ProductBusinessRules GetProductBusinessRulesByProductClassID(int productClassID, SqlInterface si)
        {
            ProductBusinessRules productBusinessRules = null;

            string storedProcName = "efrcrm_get_product_business_rules_by_product_class_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@product_class_id", DbType.Int32, DBValue.ToDBInt32(productClassID)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        productBusinessRules = LoadProductBusinessRules(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return productBusinessRules;
        }
        #endregion


        #region ProfitRange

        private ProfitRange LoadProfitRange(DataRow row)
        {
            ProfitRange profitRange = new ProfitRange();

            // Store database values into our business object
            profitRange.ProfitRangeID = DBValue.ToInt32(row["profit_range_id"]);
            profitRange.ItemNbrMin = DBValue.ToInt32(row["item_nbr_min"]);
            profitRange.ItemNbrMax = DBValue.ToInt32(row["item_nbr_max"]);
            profitRange.ProfitPercentage = DBValue.ToInt32(row["profit_percentage"]);
            // return the filled object
            return profitRange;
        }

        public ProfitRange GetProfitRangeByProductBusinessRuleID(int productBusinessRuleID)
        {
            return GetProfitRangeByProductBusinessRuleID(productBusinessRuleID, null);
        }

        private ProfitRange GetProfitRangeByProductBusinessRuleID(int productBusinessRuleID, SqlInterface si)
        {
            ProfitRange profitRange = null;

            string storedProcName = "efrcrm_get_profit_range_by_product_business_rule_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@product_business_rule_id", DbType.Int32, DBValue.ToDBInt32(productBusinessRuleID)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        profitRange = LoadProfitRange(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return profitRange;
        }



        #endregion

        #region Priority Methods

        private Priority LoadPriority(DataRow row)
        {
            Priority priority = new Priority();

            // Store database values into our business object
            priority.PriorityID = DBValue.ToInt32(row["priority_id"]);
            priority.Description = DBValue.ToString(row["description"]);
            priority.ColorCode = DBValue.ToInt32(row["color_code"]);

            // return the filled object
            return priority;
        }

        public Priority[] GetPrioritys()
        {
            return GetPrioritys(null);
        }

        private Priority[] GetPrioritys(SqlInterface si)
        {
            Priority[] prioritys = null;

            string storedProcName = "efrcrm_get_prioritys";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    prioritys = new Priority[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            prioritys[i] = LoadPriority(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return prioritys;
        }


        public Priority GetPriorityByID(int id)
        {
            return GetPriorityByID(id, null);
        }

        private Priority GetPriorityByID(int id, SqlInterface si)
        {
            Priority priority = null;

            string storedProcName = "efrcrm_get_priority_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Priority_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        priority = LoadPriority(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return priority;
        }


        public int InsertPriority(Priority priority)
        {
            return InsertPriority(priority, null);
        }

        private int InsertPriority(Priority priority, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_priority";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Priority_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(priority.Description)));
                paramCol.Add(new SqlDataParameter("@Color_Code", DbType.Int32, DBValue.ToDBInt32(priority.ColorCode)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    priority.PriorityID = DBValue.ToInt32(paramCol["@Priority_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdatePriority(Priority priority)
        {
            return UpdatePriority(priority, null);
        }

        private int UpdatePriority(Priority priority, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_priority";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Priority_ID", DbType.Int32, DBValue.ToDBInt32(priority.PriorityID)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(priority.Description)));
                paramCol.Add(new SqlDataParameter("@Color_Code", DbType.Int32, DBValue.ToDBInt32(priority.ColorCode)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region ProductClass Methods

        private ProductClass LoadProductClass(DataRow row)
        {
            ProductClass productClass = new ProductClass();

            // Store database values into our business object
            productClass.ProductClassId = DBValue.ToInt16(row["product_class_id"]);
            productClass.DivisionId = DBValue.ToInt16(row["division_id"]);
            productClass.AccountingClassId = DBValue.ToInt16(row["accounting_class_id"]);
            productClass.Description = DBValue.ToString(row["description"]);
            productClass.ProductCode = DBValue.ToString(row["product_code"]);
            productClass.DisplayName = DBValue.ToString(row["display_name"]);
            productClass.IsDisplayable = DBValue.ToInt32(row["is_displayable"]);
            productClass.MinimumOrderQty = DBValue.ToInt16(row["minimum_order_qty"]);

            // return the filled object
            return productClass;
        }

        public ProductClass[] GetProductClasss()
        {

            ProductClass[] productClasss = null;

            string storedProcName = "efrcrm_get_product_classs";

            SqlConnection conn = new SqlConnection(connectionString);
            try
            {
                SqlCommand cmd = new SqlCommand(storedProcName, conn);
                cmd.CommandType = CommandType.StoredProcedure;

                conn.Open();

                // Use DataAdapter to fill dataset
                SqlDataAdapter da = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                da.Fill(dt);



                if (dt != null)
                {
                    productClasss = new ProductClass[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            productClasss[i] = LoadProductClass(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                conn.Close();
                /*if(newConnection) {
                    // Always close connection.
                    si.Close();
                }*/
            }
            return productClasss;
        }

        public ProductClass GetProductClassById(int id)
        {
            return GetProductClassById(id, null);
        }

        private ProductClass GetProductClassById(int id, SqlInterface si)
        {
            ProductClass productClasss = null;

            string storedProcName = "efrcrm_get_product_class_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@product_class_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            productClasss = LoadProductClass(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return productClasss;
        }

        public ProductClass GetProductClassByName(string name)
        {
            return GetProductClassByName(name, null);
        }

        private ProductClass GetProductClassByName(string name, SqlInterface si)
        {
            ProductClass productClasss = null;

            string storedProcName = "efrcrm_get_product_class_by_name";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@description", DbType.String, name));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            productClasss = LoadProductClass(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return productClasss;
        }
        #endregion

        #region ProductClassDesc Methods

        private ProductClassDesc LoadProductClassDesc(DataRow row)
        {
            ProductClassDesc productClassDesc = new ProductClassDesc();

            // Store database values into our business object
            productClassDesc.ProductClassId = DBValue.ToInt16(row["product_class_id"]);
            productClassDesc.LanguageId = DBValue.ToInt16(row["language_id"]);
            productClassDesc.ProductClassDescription = DBValue.ToString(row["product_class_desc"]);
            productClassDesc.MinRequirements = DBValue.ToString(row["min_requirements"]);

            // return the filled object
            return productClassDesc;
        }

        public ProductClassDesc[] GetProductClassDescs()
        {
            return GetProductClassDescs(null);
        }

        private ProductClassDesc[] GetProductClassDescs(SqlInterface si)
        {
            ProductClassDesc[] productClassDescs = null;

            string storedProcName = "efrcrm_get_product_class_descs";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    productClassDescs = new ProductClassDesc[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            productClassDescs[i] = LoadProductClassDesc(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return productClassDescs;
        }



        #endregion

        #region ProductDesc Methods

        private ProductDesc LoadProductDesc(DataRow row)
        {
            ProductDesc productDesc = new ProductDesc();

            // Store database values into our business object
            productDesc.ProductDescId = DBValue.ToInt32(row["product_desc_id"]);
            productDesc.ProductId = DBValue.ToInt32(row["product_id"]);
            productDesc.LanguageId = DBValue.ToInt16(row["language_id"]);
            productDesc.ProductName = DBValue.ToString(row["product_name"]);
            productDesc.ProductShortDesc = DBValue.ToString(row["product_short_desc"]);
            productDesc.ProductLongDesc = DBValue.ToString(row["product_long_desc"]);
            productDesc.ProductSmallImg = DBValue.ToString(row["product_small_img"]);
            productDesc.ProductLargeImg = DBValue.ToString(row["product_large_img"]);
            productDesc.AvailableOnline = DBValue.ToInt32(row["available_online"]);

            // return the filled object
            return productDesc;
        }

        public ProductDesc[] GetProductDescs()
        {
            return GetProductDescs(null);
        }

        private ProductDesc[] GetProductDescs(SqlInterface si)
        {
            ProductDesc[] productDescs = null;

            string storedProcName = "efrcrm_get_product_descs";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    productDescs = new ProductDesc[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            productDescs[i] = LoadProductDesc(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return productDescs;
        }


        public ProductDesc GetProductDescByID(int id)
        {
            return GetProductDescByID(id, null);
        }

        private ProductDesc GetProductDescByID(int id, SqlInterface si)
        {
            ProductDesc productDesc = null;

            string storedProcName = "efrcrm_get_product_desc_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Product_desc_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        productDesc = LoadProductDesc(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return productDesc;
        }


        public int InsertProductDesc(ProductDesc productDesc)
        {
            return InsertProductDesc(productDesc, null);
        }

        private int InsertProductDesc(ProductDesc productDesc, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_product_desc";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Product_desc_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Product_id", DbType.Int32, DBValue.ToDBInt32(productDesc.ProductId)));
                paramCol.Add(new SqlDataParameter("@Language_id", DbType.Int16, DBValue.ToDBInt16(productDesc.LanguageId)));
                paramCol.Add(new SqlDataParameter("@Product_name", DbType.String, DBValue.ToDBString(productDesc.ProductName)));
                paramCol.Add(new SqlDataParameter("@Product_short_desc", DbType.String, DBValue.ToDBString(productDesc.ProductShortDesc)));
                paramCol.Add(new SqlDataParameter("@Product_long_desc", DbType.String, DBValue.ToDBString(productDesc.ProductLongDesc)));
                paramCol.Add(new SqlDataParameter("@Product_small_img", DbType.String, DBValue.ToDBString(productDesc.ProductSmallImg)));
                paramCol.Add(new SqlDataParameter("@Product_large_img", DbType.String, DBValue.ToDBString(productDesc.ProductLargeImg)));
                paramCol.Add(new SqlDataParameter("@Available_online", DbType.Int32, DBValue.ToDBInt32(productDesc.AvailableOnline)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    productDesc.ProductDescId = DBValue.ToInt32(paramCol["@Product_desc_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateProductDesc(ProductDesc productDesc)
        {
            return UpdateProductDesc(productDesc, null);
        }

        private int UpdateProductDesc(ProductDesc productDesc, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_product_desc";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Product_desc_id", DbType.Int32, DBValue.ToDBInt32(productDesc.ProductDescId)));
                paramCol.Add(new SqlDataParameter("@Product_id", DbType.Int32, DBValue.ToDBInt32(productDesc.ProductId)));
                paramCol.Add(new SqlDataParameter("@Language_id", DbType.Int16, DBValue.ToDBInt16(productDesc.LanguageId)));
                paramCol.Add(new SqlDataParameter("@Product_name", DbType.String, DBValue.ToDBString(productDesc.ProductName)));
                paramCol.Add(new SqlDataParameter("@Product_short_desc", DbType.String, DBValue.ToDBString(productDesc.ProductShortDesc)));
                paramCol.Add(new SqlDataParameter("@Product_long_desc", DbType.String, DBValue.ToDBString(productDesc.ProductLongDesc)));
                paramCol.Add(new SqlDataParameter("@Product_small_img", DbType.String, DBValue.ToDBString(productDesc.ProductSmallImg)));
                paramCol.Add(new SqlDataParameter("@Product_large_img", DbType.String, DBValue.ToDBString(productDesc.ProductLargeImg)));
                paramCol.Add(new SqlDataParameter("@Available_online", DbType.Int32, DBValue.ToDBInt32(productDesc.AvailableOnline)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region ProductQuantity Methods

        private ProductQuantity LoadProductQuantity(DataRow row)
        {
            ProductQuantity productQuantity = new ProductQuantity();

            // Store database values into our business object
            productQuantity.ProductQuantityID = DBValue.ToInt32(row["product_quantity_id"]);
            productQuantity.ScratchBookID = DBValue.ToInt32(row["scratch_book_id"]);
            productQuantity.Quantity = DBValue.ToInt32(row["quantity"]);
            productQuantity.Comments = DBValue.ToString(row["comments"]);

            // return the filled object
            return productQuantity;
        }

        public ProductQuantity[] GetProductQuantitys()
        {
            return GetProductQuantitys(null);
        }

        private ProductQuantity[] GetProductQuantitys(SqlInterface si)
        {
            ProductQuantity[] productQuantitys = null;

            string storedProcName = "efrcrm_get_product_quantitys";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    productQuantitys = new ProductQuantity[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            productQuantitys[i] = LoadProductQuantity(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return productQuantitys;
        }


        public ProductQuantity GetProductQuantityByID(int id)
        {
            return GetProductQuantityByID(id, null);
        }

        private ProductQuantity GetProductQuantityByID(int id, SqlInterface si)
        {
            ProductQuantity productQuantity = null;

            string storedProcName = "efrcrm_get_product_quantity_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Product_Quantity_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        productQuantity = LoadProductQuantity(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return productQuantity;
        }


        public int InsertProductQuantity(ProductQuantity productQuantity)
        {
            return InsertProductQuantity(productQuantity, null);
        }

        private int InsertProductQuantity(ProductQuantity productQuantity, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_product_quantity";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Product_Quantity_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Scratch_Book_ID", DbType.Int32, DBValue.ToDBInt32(productQuantity.ScratchBookID)));
                paramCol.Add(new SqlDataParameter("@Quantity", DbType.Int32, DBValue.ToDBInt32(productQuantity.Quantity)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(productQuantity.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    productQuantity.ProductQuantityID = DBValue.ToInt32(paramCol["@Product_Quantity_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateProductQuantity(ProductQuantity productQuantity)
        {
            return UpdateProductQuantity(productQuantity, null);
        }

        private int UpdateProductQuantity(ProductQuantity productQuantity, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_product_quantity";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Product_Quantity_ID", DbType.Int32, DBValue.ToDBInt32(productQuantity.ProductQuantityID)));
                paramCol.Add(new SqlDataParameter("@Scratch_Book_ID", DbType.Int32, DBValue.ToDBInt32(productQuantity.ScratchBookID)));
                paramCol.Add(new SqlDataParameter("@Quantity", DbType.Int32, DBValue.ToDBInt32(productQuantity.Quantity)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(productQuantity.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region ProductionStatus Methods

        private ProductionStatus LoadProductionStatus(DataRow row)
        {
            ProductionStatus productionStatus = new ProductionStatus();

            // Store database values into our business object
            productionStatus.ProductionStatusID = DBValue.ToInt32(row["production_status_id"]);
            productionStatus.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return productionStatus;
        }

        public ProductionStatus[] GetProductionStatuss()
        {
            return GetProductionStatuss(null);
        }

        private ProductionStatus[] GetProductionStatuss(SqlInterface si)
        {
            ProductionStatus[] productionStatuss = null;

            string storedProcName = "efrcrm_get_production_statuss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    productionStatuss = new ProductionStatus[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            productionStatuss[i] = LoadProductionStatus(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return productionStatuss;
        }


        public ProductionStatus GetProductionStatusByID(int id)
        {
            return GetProductionStatusByID(id, null);
        }

        private ProductionStatus GetProductionStatusByID(int id, SqlInterface si)
        {
            ProductionStatus productionStatus = null;

            string storedProcName = "efrcrm_get_production_status_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Production_Status_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        productionStatus = LoadProductionStatus(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return productionStatus;
        }


        public int InsertProductionStatus(ProductionStatus productionStatus)
        {
            return InsertProductionStatus(productionStatus, null);
        }

        private int InsertProductionStatus(ProductionStatus productionStatus, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_production_status";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Production_Status_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(productionStatus.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    productionStatus.ProductionStatusID = DBValue.ToInt32(paramCol["@Production_Status_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateProductionStatus(ProductionStatus productionStatus)
        {
            return UpdateProductionStatus(productionStatus, null);
        }

        private int UpdateProductionStatus(ProductionStatus productionStatus, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_production_status";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Production_Status_ID", DbType.Int32, DBValue.ToDBInt32(productionStatus.ProductionStatusID)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(productionStatus.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region ProductsCultures Methods

        private ProductsCultures LoadProductsCultures(DataRow row)
        {
            ProductsCultures productsCultures = new ProductsCultures();

            // Store database values into our business object
            productsCultures.ProductId = DBValue.ToInt32(row["product_id"]);
            productsCultures.CultureId = DBValue.ToInt16(row["culture_id"]);

            // return the filled object
            return productsCultures;
        }

        public ProductsCultures[] GetProductsCulturess()
        {
            return GetProductsCulturess(null);
        }

        private ProductsCultures[] GetProductsCulturess(SqlInterface si)
        {
            ProductsCultures[] productsCulturess = null;

            string storedProcName = "efrcrm_get_products_culturess";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    productsCulturess = new ProductsCultures[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            productsCulturess[i] = LoadProductsCultures(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return productsCulturess;
        }


        public ProductsCultures GetProductsCulturesByID(int id)
        {
            return GetProductsCulturesByID(id, null);
        }

        private ProductsCultures GetProductsCulturesByID(int id, SqlInterface si)
        {
            ProductsCultures productsCultures = null;

            string storedProcName = "efrcrm_get_products_cultures_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Product_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        productsCultures = LoadProductsCultures(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return productsCultures;
        }


        public int InsertProductsCultures(ProductsCultures productsCultures)
        {
            return InsertProductsCultures(productsCultures, null);
        }

        private int InsertProductsCultures(ProductsCultures productsCultures, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_products_cultures";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Product_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Culture_id", DbType.Int16, DBValue.ToDBInt16(productsCultures.CultureId)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    productsCultures.ProductId = DBValue.ToInt32(paramCol["@Product_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateProductsCultures(ProductsCultures productsCultures)
        {
            return UpdateProductsCultures(productsCultures, null);
        }

        private int UpdateProductsCultures(ProductsCultures productsCultures, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_products_cultures";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Product_id", DbType.Int32, DBValue.ToDBInt32(productsCultures.ProductId)));
                paramCol.Add(new SqlDataParameter("@Culture_id", DbType.Int16, DBValue.ToDBInt16(productsCultures.CultureId)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region ProductsPackages Methods

        private ProductsPackages LoadProductsPackages(DataRow row)
        {
            ProductsPackages productsPackages = new ProductsPackages();

            // Store database values into our business object
            productsPackages.ProductId = DBValue.ToInt32(row["product_id"]);
            productsPackages.PackageId = DBValue.ToInt16(row["package_id"]);
            productsPackages.DisplayOrder = DBValue.ToInt16(row["display_order"]);
            productsPackages.Displayable = DBValue.ToInt16(row["displayable"]);

            // return the filled object
            return productsPackages;
        }

        public ProductsPackages[] GetProductsPackagess()
        {
            return GetProductsPackagess(null);
        }

        private ProductsPackages[] GetProductsPackagess(SqlInterface si)
        {
            ProductsPackages[] productsPackagess = null;

            string storedProcName = "efrcrm_get_products_packagess";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    productsPackagess = new ProductsPackages[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            productsPackagess[i] = LoadProductsPackages(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return productsPackagess;
        }


        public ProductsPackages GetProductsPackagesByID(int id)
        {
            return GetProductsPackagesByID(id, null);
        }

        private ProductsPackages GetProductsPackagesByID(int id, SqlInterface si)
        {
            ProductsPackages productsPackages = null;

            string storedProcName = "efrcrm_get_products_packages_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Product_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        productsPackages = LoadProductsPackages(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return productsPackages;
        }


        public int InsertProductsPackages(ProductsPackages productsPackages)
        {
            return InsertProductsPackages(productsPackages, null);
        }

        private int InsertProductsPackages(ProductsPackages productsPackages, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_products_packages";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Product_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Package_id", DbType.Int16, DBValue.ToDBInt16(productsPackages.PackageId)));
                paramCol.Add(new SqlDataParameter("@Display_order", DbType.Int16, DBValue.ToDBInt16(productsPackages.DisplayOrder)));
                paramCol.Add(new SqlDataParameter("@Displayable", DbType.Int32, DBValue.ToDBInt32(productsPackages.Displayable)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    productsPackages.ProductId = DBValue.ToInt32(paramCol["@Product_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateProductsPackages(ProductsPackages productsPackages)
        {
            return UpdateProductsPackages(productsPackages, null);
        }

        private int UpdateProductsPackages(ProductsPackages productsPackages, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_products_packages";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Product_id", DbType.Int32, DBValue.ToDBInt32(productsPackages.ProductId)));
                paramCol.Add(new SqlDataParameter("@Package_id", DbType.Int16, DBValue.ToDBInt16(productsPackages.PackageId)));
                paramCol.Add(new SqlDataParameter("@Display_order", DbType.Int16, DBValue.ToDBInt16(productsPackages.DisplayOrder)));
                paramCol.Add(new SqlDataParameter("@Displayable", DbType.Int32, DBValue.ToDBInt32(productsPackages.Displayable)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region Promotion Methods

        private Promotion LoadPromotion(DataRow row)
        {
            Promotion promotion = new Promotion();

            // Store database values into our business object
            promotion.PromotionId = DBValue.ToInt32(row["promotion_id"]);
            promotion.PromotionTypeCode = DBValue.ToString(row["promotion_type_code"]);
            promotion.TargetedMarketId = DBValue.ToInt32(row["targeted_market_id"]);
            promotion.AdvertisingSupportId = DBValue.ToInt32(row["advertising_support_id"]);
            promotion.AdvertisementId = DBValue.ToInt32(row["advertisement_id"]);
            promotion.PartnerId = DBValue.ToInt32(row["partner_id"]);
            promotion.AdvertiserId = DBValue.ToInt32(row["advertiser_id"]);
            promotion.TransferStatusId = DBValue.ToInt16(row["transfer_status_id"]);
            promotion.AdvertismentTypeId = DBValue.ToInt32(row["advertisment_type_id"]);
            promotion.DestinationId = DBValue.ToInt32(row["destination_id"]);
            promotion.AdvertiserPartnerId = DBValue.ToInt32(row["advertiser_partner_id"]);
            promotion.GrabberId = DBValue.ToInt32(row["grabber_id"]);
            promotion.Description = DBValue.ToString(row["description"]);
            promotion.ScriptName = DBValue.ToString(row["script_name"]);
            promotion.ContactName = DBValue.ToString(row["contact_name"]);
            promotion.Visibility = DBValue.ToString(row["visibility"]);
            promotion.TrackingSerial = DBValue.ToString(row["tracking_serial"]);
            promotion.NbImpressionBought = DBValue.ToInt32(row["nb_impression_bought"]);
            promotion.IsActive = DBValue.ToInt32(row["is_active"]);
            promotion.CookieContent = DBValue.ToString(row["cookie_content"]);
            promotion.IsPredictive = DBValue.ToInt32(row["is_predictive"]);
            promotion.Keyword = DBValue.ToString(row["keyword"]);
            promotion.IsDisplayable = DBValue.ToInt32(row["is_displayable"]);

            // return the filled object
            return promotion;
        }
        public Promotion GetPromotionByLeadID(int leadID)
        {
            return GetPromotionByLeadID(leadID, null);
        }
        private Promotion GetPromotionByLeadID(int leadID, SqlInterface si)
        {
            string storedProcName = "efrcrm_get_promotion_by_lead_id";
            Promotion promo = null;

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;

            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@leadid", DbType.Int32, DBValue.ToInt32(leadID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {

                    // fill our objects
                    try
                    {
                        promo = LoadPromotion(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message.ToString());
            }
            finally
            {
                if (newConnection)
                {
                    si.Close();
                }
            }
            return promo;
        }
        public Promotion[] GetPromotions()
        {
            return GetPromotions(null);
        }

        private Promotion[] GetPromotions(SqlInterface si)
        {
            Promotion[] promotions = null;

            string storedProcName = "efrcrm_get_promotions";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    promotions = new Promotion[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            promotions[i] = LoadPromotion(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return promotions;
        }


        public Promotion GetPromotionByID(int id)
        {
            return GetPromotionByID(id, null);
        }

        private Promotion GetPromotionByID(int id, SqlInterface si)
        {
            Promotion promotion = null;

            string storedProcName = "efrcrm_get_promotion_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Promotion_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        promotion = LoadPromotion(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return promotion;
        }


        public int InsertPromotion(Promotion promotion)
        {
            return InsertPromotion(promotion, null);
        }

        private int InsertPromotion(Promotion promotion, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_promotion";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Promotion_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Promotion_type_code", DbType.String, DBValue.ToDBString(promotion.PromotionTypeCode)));
                paramCol.Add(new SqlDataParameter("@Targeted_market_id", DbType.Int32, DBValue.ToDBInt32(promotion.TargetedMarketId)));
                paramCol.Add(new SqlDataParameter("@Advertising_support_id", DbType.Int32, DBValue.ToDBInt32(promotion.AdvertisingSupportId)));
                paramCol.Add(new SqlDataParameter("@Advertisement_id", DbType.Int32, DBValue.ToDBInt32(promotion.AdvertisementId)));
                paramCol.Add(new SqlDataParameter("@Partner_id", DbType.Int32, DBValue.ToDBInt32(promotion.PartnerId)));
                paramCol.Add(new SqlDataParameter("@Advertiser_id", DbType.Int32, DBValue.ToDBInt32(promotion.AdvertiserId)));
                paramCol.Add(new SqlDataParameter("@Transfer_status_id", DbType.Int16, DBValue.ToDBInt16(promotion.TransferStatusId)));
                paramCol.Add(new SqlDataParameter("@Advertisment_type_id", DbType.Int32, DBValue.ToDBInt32(promotion.AdvertismentTypeId)));
                paramCol.Add(new SqlDataParameter("@Destination_id", DbType.Int32, DBValue.ToDBInt32(promotion.DestinationId)));
                paramCol.Add(new SqlDataParameter("@Advertiser_partner_id", DbType.Int32, DBValue.ToDBInt32(promotion.AdvertiserPartnerId)));
                paramCol.Add(new SqlDataParameter("@Grabber_id", DbType.Int32, DBValue.ToDBInt32(promotion.GrabberId)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(promotion.Description)));
                paramCol.Add(new SqlDataParameter("@Script_name", DbType.String, DBValue.ToDBString(promotion.ScriptName)));
                paramCol.Add(new SqlDataParameter("@Contact_name", DbType.String, DBValue.ToDBString(promotion.ContactName)));
                paramCol.Add(new SqlDataParameter("@Visibility", DbType.String, DBValue.ToDBString(promotion.Visibility)));
                paramCol.Add(new SqlDataParameter("@Tracking_serial", DbType.String, DBValue.ToDBString(promotion.TrackingSerial)));
                paramCol.Add(new SqlDataParameter("@Nb_impression_bought", DbType.Int32, DBValue.ToDBInt32(promotion.NbImpressionBought)));
                paramCol.Add(new SqlDataParameter("@Is_active", DbType.Int32, DBValue.ToDBInt32(promotion.IsActive)));
                paramCol.Add(new SqlDataParameter("@Cookie_content", DbType.String, DBValue.ToDBString(promotion.CookieContent)));
                paramCol.Add(new SqlDataParameter("@Is_predictive", DbType.Int32, DBValue.ToDBInt32(promotion.IsPredictive)));
                paramCol.Add(new SqlDataParameter("@Keyword", DbType.String, DBValue.ToDBString(promotion.Keyword)));
                paramCol.Add(new SqlDataParameter("@Is_displayable", DbType.Int32, DBValue.ToDBInt32(promotion.IsDisplayable)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    promotion.PromotionId = DBValue.ToInt32(paramCol["@Promotion_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdatePromotion(Promotion promotion)
        {
            return UpdatePromotion(promotion, null);
        }

        private int UpdatePromotion(Promotion promotion, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_promotion";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Promotion_id", DbType.Int32, DBValue.ToDBInt32(promotion.PromotionId)));
                paramCol.Add(new SqlDataParameter("@Promotion_type_code", DbType.String, DBValue.ToDBString(promotion.PromotionTypeCode)));
                paramCol.Add(new SqlDataParameter("@Targeted_market_id", DbType.Int32, DBValue.ToDBInt32(promotion.TargetedMarketId)));
                paramCol.Add(new SqlDataParameter("@Advertising_support_id", DbType.Int32, DBValue.ToDBInt32(promotion.AdvertisingSupportId)));
                paramCol.Add(new SqlDataParameter("@Advertisement_id", DbType.Int32, DBValue.ToDBInt32(promotion.AdvertisementId)));
                paramCol.Add(new SqlDataParameter("@Partner_id", DbType.Int32, DBValue.ToDBInt32(promotion.PartnerId)));
                paramCol.Add(new SqlDataParameter("@Advertiser_id", DbType.Int32, DBValue.ToDBInt32(promotion.AdvertiserId)));
                paramCol.Add(new SqlDataParameter("@Transfer_status_id", DbType.Int16, DBValue.ToDBInt16(promotion.TransferStatusId)));
                paramCol.Add(new SqlDataParameter("@Advertisment_type_id", DbType.Int32, DBValue.ToDBInt32(promotion.AdvertismentTypeId)));
                paramCol.Add(new SqlDataParameter("@Destination_id", DbType.Int32, DBValue.ToDBInt32(promotion.DestinationId)));
                paramCol.Add(new SqlDataParameter("@Advertiser_partner_id", DbType.Int32, DBValue.ToDBInt32(promotion.AdvertiserPartnerId)));
                paramCol.Add(new SqlDataParameter("@Grabber_id", DbType.Int32, DBValue.ToDBInt32(promotion.GrabberId)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(promotion.Description)));
                paramCol.Add(new SqlDataParameter("@Script_name", DbType.String, DBValue.ToDBString(promotion.ScriptName)));
                paramCol.Add(new SqlDataParameter("@Contact_name", DbType.String, DBValue.ToDBString(promotion.ContactName)));
                paramCol.Add(new SqlDataParameter("@Visibility", DbType.String, DBValue.ToDBString(promotion.Visibility)));
                paramCol.Add(new SqlDataParameter("@Tracking_serial", DbType.String, DBValue.ToDBString(promotion.TrackingSerial)));
                paramCol.Add(new SqlDataParameter("@Nb_impression_bought", DbType.Int32, DBValue.ToDBInt32(promotion.NbImpressionBought)));
                paramCol.Add(new SqlDataParameter("@Is_active", DbType.Int32, DBValue.ToDBInt32(promotion.IsActive)));
                paramCol.Add(new SqlDataParameter("@Cookie_content", DbType.String, DBValue.ToDBString(promotion.CookieContent)));
                paramCol.Add(new SqlDataParameter("@Is_predictive", DbType.Int32, DBValue.ToDBInt32(promotion.IsPredictive)));
                paramCol.Add(new SqlDataParameter("@Keyword", DbType.String, DBValue.ToDBString(promotion.Keyword)));
                paramCol.Add(new SqlDataParameter("@Is_displayable", DbType.Int32, DBValue.ToDBInt32(promotion.IsDisplayable)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region PromotionCode Methods

        private PromotionCode LoadPromotionCode(DataRow row)
        {
            PromotionCode promotionCode = new PromotionCode();

            // Store database values into our business object
            promotionCode.PromotionCodeID = DBValue.ToInt32(row["promotion_code_id"]);
            promotionCode.PromotionCodeDesc = DBValue.ToString(row["promotion_code_desc"]);

            // return the filled object
            return promotionCode;
        }

        public PromotionCode[] GetPromotionCodes()
        {
            return GetPromotionCodes(null);
        }

        private PromotionCode[] GetPromotionCodes(SqlInterface si)
        {
            PromotionCode[] promotionCodes = null;

            string storedProcName = "efrcrm_get_promotion_codes";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    promotionCodes = new PromotionCode[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            promotionCodes[i] = LoadPromotionCode(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return promotionCodes;
        }


        public PromotionCode GetPromotionCodeByID(int id)
        {
            return GetPromotionCodeByID(id, null);
        }

        private PromotionCode GetPromotionCodeByID(int id, SqlInterface si)
        {
            PromotionCode promotionCode = null;

            string storedProcName = "efrcrm_get_promotion_code_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Promotion_Code_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        promotionCode = LoadPromotionCode(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return promotionCode;
        }


        public int InsertPromotionCode(PromotionCode promotionCode)
        {
            return InsertPromotionCode(promotionCode, null);
        }

        private int InsertPromotionCode(PromotionCode promotionCode, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_promotion_code";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Promotion_Code_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Promotion_Code_Desc", DbType.String, DBValue.ToDBString(promotionCode.PromotionCodeDesc)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    promotionCode.PromotionCodeID = DBValue.ToInt32(paramCol["@Promotion_Code_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdatePromotionCode(PromotionCode promotionCode)
        {
            return UpdatePromotionCode(promotionCode, null);
        }

        private int UpdatePromotionCode(PromotionCode promotionCode, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_promotion_code";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Promotion_Code_ID", DbType.Int32, DBValue.ToDBInt32(promotionCode.PromotionCodeID)));
                paramCol.Add(new SqlDataParameter("@Promotion_Code_Desc", DbType.String, DBValue.ToDBString(promotionCode.PromotionCodeDesc)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region PromotionCost Methods

        private PromotionCost LoadPromotionCost(DataRow row)
        {
            PromotionCost promotionCost = new PromotionCost();

            // Store database values into our business object
            promotionCost.PromotionID = DBValue.ToInt32(row["promotion_id"]);
            promotionCost.PeriodMonth = DBValue.ToInt32(row["period_month"]);
            promotionCost.PeriodYear = DBValue.ToInt32(row["period_year"]);
            promotionCost.Cost = DBValue.ToInt16(row["cost"]);

            // return the filled object
            return promotionCost;
        }

        public PromotionCost[] GetPromotionCosts()
        {
            return GetPromotionCosts(null);
        }

        private PromotionCost[] GetPromotionCosts(SqlInterface si)
        {
            PromotionCost[] promotionCosts = null;

            string storedProcName = "efrcrm_get_promotion_costs";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    promotionCosts = new PromotionCost[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            promotionCosts[i] = LoadPromotionCost(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return promotionCosts;
        }


        public PromotionCost GetPromotionCostByID(int id)
        {
            return GetPromotionCostByID(id, null);
        }

        private PromotionCost GetPromotionCostByID(int id, SqlInterface si)
        {
            PromotionCost promotionCost = null;

            string storedProcName = "efrcrm_get_promotion_cost_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Promotion_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        promotionCost = LoadPromotionCost(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return promotionCost;
        }


        public int InsertPromotionCost(PromotionCost promotionCost)
        {
            return InsertPromotionCost(promotionCost, null);
        }

        private int InsertPromotionCost(PromotionCost promotionCost, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_promotion_cost";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Promotion_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Period_Month", DbType.Int32, DBValue.ToDBInt32(promotionCost.PeriodMonth)));
                paramCol.Add(new SqlDataParameter("@Period_Year", DbType.Int32, DBValue.ToDBInt32(promotionCost.PeriodYear)));
                paramCol.Add(new SqlDataParameter("@Cost", DbType.Double, DBValue.ToDBFloat(promotionCost.Cost)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    promotionCost.PromotionID = DBValue.ToInt32(paramCol["@Promotion_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdatePromotionCost(PromotionCost promotionCost)
        {
            return UpdatePromotionCost(promotionCost, null);
        }

        private int UpdatePromotionCost(PromotionCost promotionCost, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_promotion_cost";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Promotion_ID", DbType.Int32, DBValue.ToDBInt32(promotionCost.PromotionID)));
                paramCol.Add(new SqlDataParameter("@Period_Month", DbType.Int32, DBValue.ToDBInt32(promotionCost.PeriodMonth)));
                paramCol.Add(new SqlDataParameter("@Period_Year", DbType.Int32, DBValue.ToDBInt32(promotionCost.PeriodYear)));
                paramCol.Add(new SqlDataParameter("@Cost", DbType.Double, DBValue.ToDBFloat(promotionCost.Cost)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region PromotionGroup Methods

        private PromotionGroup LoadPromotionGroup(DataRow row)
        {
            PromotionGroup promotionGroup = new PromotionGroup();

            // Store database values into our business object
            promotionGroup.PromoGroupID = DBValue.ToInt32(row["promo_group_id"]);
            promotionGroup.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return promotionGroup;
        }

        public PromotionGroup[] GetPromotionGroups()
        {
            return GetPromotionGroups(null);
        }

        private PromotionGroup[] GetPromotionGroups(SqlInterface si)
        {
            PromotionGroup[] promotionGroups = null;

            string storedProcName = "efrcrm_get_promotion_groups";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    promotionGroups = new PromotionGroup[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            promotionGroups[i] = LoadPromotionGroup(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return promotionGroups;
        }


        public PromotionGroup GetPromotionGroupByID(int id)
        {
            return GetPromotionGroupByID(id, null);
        }

        private PromotionGroup GetPromotionGroupByID(int id, SqlInterface si)
        {
            PromotionGroup promotionGroup = null;

            string storedProcName = "efrcrm_get_promotion_group_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Promo_Group_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        promotionGroup = LoadPromotionGroup(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return promotionGroup;
        }


        public int InsertPromotionGroup(PromotionGroup promotionGroup)
        {
            return InsertPromotionGroup(promotionGroup, null);
        }

        private int InsertPromotionGroup(PromotionGroup promotionGroup, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_promotion_group";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Promo_Group_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(promotionGroup.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    promotionGroup.PromoGroupID = DBValue.ToInt32(paramCol["@Promo_Group_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdatePromotionGroup(PromotionGroup promotionGroup)
        {
            return UpdatePromotionGroup(promotionGroup, null);
        }

        private int UpdatePromotionGroup(PromotionGroup promotionGroup, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_promotion_group";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Promo_Group_ID", DbType.Int32, DBValue.ToDBInt32(promotionGroup.PromoGroupID)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(promotionGroup.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region PromotionGroupPromotion Methods

        private PromotionGroupPromotion LoadPromotionGroupPromotion(DataRow row)
        {
            PromotionGroupPromotion promotionGroupPromotion = new PromotionGroupPromotion();

            // Store database values into our business object
            promotionGroupPromotion.PromoGroupID = DBValue.ToInt32(row["promo_group_id"]);
            promotionGroupPromotion.PromotionID = DBValue.ToInt32(row["promotion_id"]);

            // return the filled object
            return promotionGroupPromotion;
        }

        public PromotionGroupPromotion[] GetPromotionGroupPromotions()
        {
            return GetPromotionGroupPromotions(null);
        }

        private PromotionGroupPromotion[] GetPromotionGroupPromotions(SqlInterface si)
        {
            PromotionGroupPromotion[] promotionGroupPromotions = null;

            string storedProcName = "efrcrm_get_promotion_group_promotions";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    promotionGroupPromotions = new PromotionGroupPromotion[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            promotionGroupPromotions[i] = LoadPromotionGroupPromotion(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return promotionGroupPromotions;
        }


        public PromotionGroupPromotion GetPromotionGroupPromotionByID(int id)
        {
            return GetPromotionGroupPromotionByID(id, null);
        }

        private PromotionGroupPromotion GetPromotionGroupPromotionByID(int id, SqlInterface si)
        {
            PromotionGroupPromotion promotionGroupPromotion = null;

            string storedProcName = "efrcrm_get_promotion_group_promotion_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Promo_Group_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        promotionGroupPromotion = LoadPromotionGroupPromotion(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return promotionGroupPromotion;
        }


        public int InsertPromotionGroupPromotion(PromotionGroupPromotion promotionGroupPromotion)
        {
            return InsertPromotionGroupPromotion(promotionGroupPromotion, null);
        }

        private int InsertPromotionGroupPromotion(PromotionGroupPromotion promotionGroupPromotion, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_promotion_group_promotion";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Promo_Group_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Promotion_ID", DbType.Int32, DBValue.ToDBInt32(promotionGroupPromotion.PromotionID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    promotionGroupPromotion.PromoGroupID = DBValue.ToInt32(paramCol["@Promo_Group_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdatePromotionGroupPromotion(PromotionGroupPromotion promotionGroupPromotion)
        {
            return UpdatePromotionGroupPromotion(promotionGroupPromotion, null);
        }

        private int UpdatePromotionGroupPromotion(PromotionGroupPromotion promotionGroupPromotion, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_promotion_group_promotion";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Promo_Group_ID", DbType.Int32, DBValue.ToDBInt32(promotionGroupPromotion.PromoGroupID)));
                paramCol.Add(new SqlDataParameter("@Promotion_ID", DbType.Int32, DBValue.ToDBInt32(promotionGroupPromotion.PromotionID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region PromotionOld Methods

        private PromotionOld LoadPromotionOld(DataRow row)
        {
            PromotionOld promotionOld = new PromotionOld();

            // Store database values into our business object
            promotionOld.PromotionID = DBValue.ToInt32(row["promotion_id"]);
            promotionOld.PromotionTypeCode = DBValue.ToString(row["promotion_type_code"]);
            promotionOld.Description = DBValue.ToString(row["description"]);
            promotionOld.Visibility = DBValue.ToString(row["visibility"]);
            promotionOld.ContactName = DBValue.ToString(row["contact_name"]);
            promotionOld.TrackingSerial = DBValue.ToString(row["tracking_serial"]);
            promotionOld.NbImpressionBought = DBValue.ToInt32(row["nb_impression_bought"]);
            promotionOld.IsActive = DBValue.ToInt32(row["is_active"]);
            promotionOld.TargetedMarketID = DBValue.ToInt32(row["targeted_market_id"]);
            promotionOld.AdvertisingSupportID = DBValue.ToInt32(row["advertising_support_id"]);
            promotionOld.AdvertisementId = DBValue.ToInt32(row["advertisement_id"]);
            promotionOld.PartnerID = DBValue.ToInt32(row["partner_id"]);
            promotionOld.CookieContent = DBValue.ToString(row["cookie_content"]);
            promotionOld.GrabberId = DBValue.ToInt32(row["grabber_id"]);
            promotionOld.IsPredictive = DBValue.ToInt32(row["is_predictive"]);
            promotionOld.AdvertiserID = DBValue.ToInt32(row["advertiser_id"]);
            promotionOld.Keyword = DBValue.ToString(row["keyword"]);
            promotionOld.ScriptName = DBValue.ToString(row["script_name"]);
            promotionOld.AdvertismentTypeID = DBValue.ToInt32(row["advertisment_type_id"]);
            promotionOld.DestinationID = DBValue.ToInt32(row["destination_id"]);
            promotionOld.AdvertiserPartnerID = DBValue.ToInt32(row["advertiser_partner_id"]);

            // return the filled object
            return promotionOld;
        }

        public PromotionOld[] GetPromotionOlds()
        {
            return GetPromotionOlds(null);
        }

        private PromotionOld[] GetPromotionOlds(SqlInterface si)
        {
            PromotionOld[] promotionOlds = null;

            string storedProcName = "efrcrm_get_promotion_olds";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    promotionOlds = new PromotionOld[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            promotionOlds[i] = LoadPromotionOld(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return promotionOlds;
        }


        public PromotionOld GetPromotionOldByID(int id)
        {
            return GetPromotionOldByID(id, null);
        }

        private PromotionOld GetPromotionOldByID(int id, SqlInterface si)
        {
            PromotionOld promotionOld = null;

            string storedProcName = "efrcrm_get_promotion_old_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Promotion_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        promotionOld = LoadPromotionOld(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return promotionOld;
        }


        public int InsertPromotionOld(PromotionOld promotionOld)
        {
            return InsertPromotionOld(promotionOld, null);
        }

        private int InsertPromotionOld(PromotionOld promotionOld, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_promotion_old";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Promotion_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Promotion_Type_Code", DbType.String, DBValue.ToDBString(promotionOld.PromotionTypeCode)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(promotionOld.Description)));
                paramCol.Add(new SqlDataParameter("@Visibility", DbType.String, DBValue.ToDBString(promotionOld.Visibility)));
                paramCol.Add(new SqlDataParameter("@Contact_Name", DbType.String, DBValue.ToDBString(promotionOld.ContactName)));
                paramCol.Add(new SqlDataParameter("@Tracking_Serial", DbType.String, DBValue.ToDBString(promotionOld.TrackingSerial)));
                paramCol.Add(new SqlDataParameter("@Nb_Impression_Bought", DbType.Int32, DBValue.ToDBInt32(promotionOld.NbImpressionBought)));
                paramCol.Add(new SqlDataParameter("@Is_Active", DbType.Int32, DBValue.ToDBInt32(promotionOld.IsActive)));
                paramCol.Add(new SqlDataParameter("@Targeted_Market_ID", DbType.Int32, DBValue.ToDBInt32(promotionOld.TargetedMarketID)));
                paramCol.Add(new SqlDataParameter("@Advertising_Support_ID", DbType.Int32, DBValue.ToDBInt32(promotionOld.AdvertisingSupportID)));
                paramCol.Add(new SqlDataParameter("@Advertisement_Id", DbType.Int32, DBValue.ToDBInt32(promotionOld.AdvertisementId)));
                paramCol.Add(new SqlDataParameter("@Partner_ID", DbType.Int32, DBValue.ToDBInt32(promotionOld.PartnerID)));
                paramCol.Add(new SqlDataParameter("@Cookie_Content", DbType.String, DBValue.ToDBString(promotionOld.CookieContent)));
                paramCol.Add(new SqlDataParameter("@Grabber_Id", DbType.Int32, DBValue.ToDBInt32(promotionOld.GrabberId)));
                paramCol.Add(new SqlDataParameter("@Is_Predictive", DbType.Int32, DBValue.ToDBInt32(promotionOld.IsPredictive)));
                paramCol.Add(new SqlDataParameter("@Advertiser_ID", DbType.Int32, DBValue.ToDBInt32(promotionOld.AdvertiserID)));
                paramCol.Add(new SqlDataParameter("@Keyword", DbType.String, DBValue.ToDBString(promotionOld.Keyword)));
                paramCol.Add(new SqlDataParameter("@Script_Name", DbType.String, DBValue.ToDBString(promotionOld.ScriptName)));
                paramCol.Add(new SqlDataParameter("@Advertisment_Type_ID", DbType.Int32, DBValue.ToDBInt32(promotionOld.AdvertismentTypeID)));
                paramCol.Add(new SqlDataParameter("@Destination_ID", DbType.Int32, DBValue.ToDBInt32(promotionOld.DestinationID)));
                paramCol.Add(new SqlDataParameter("@Advertiser_Partner_ID", DbType.Int32, DBValue.ToDBInt32(promotionOld.AdvertiserPartnerID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    promotionOld.PromotionID = DBValue.ToInt32(paramCol["@Promotion_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdatePromotionOld(PromotionOld promotionOld)
        {
            return UpdatePromotionOld(promotionOld, null);
        }

        private int UpdatePromotionOld(PromotionOld promotionOld, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_promotion_old";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Promotion_ID", DbType.Int32, DBValue.ToDBInt32(promotionOld.PromotionID)));
                paramCol.Add(new SqlDataParameter("@Promotion_Type_Code", DbType.String, DBValue.ToDBString(promotionOld.PromotionTypeCode)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(promotionOld.Description)));
                paramCol.Add(new SqlDataParameter("@Visibility", DbType.String, DBValue.ToDBString(promotionOld.Visibility)));
                paramCol.Add(new SqlDataParameter("@Contact_Name", DbType.String, DBValue.ToDBString(promotionOld.ContactName)));
                paramCol.Add(new SqlDataParameter("@Tracking_Serial", DbType.String, DBValue.ToDBString(promotionOld.TrackingSerial)));
                paramCol.Add(new SqlDataParameter("@Nb_Impression_Bought", DbType.Int32, DBValue.ToDBInt32(promotionOld.NbImpressionBought)));
                paramCol.Add(new SqlDataParameter("@Is_Active", DbType.Int32, DBValue.ToDBInt32(promotionOld.IsActive)));
                paramCol.Add(new SqlDataParameter("@Targeted_Market_ID", DbType.Int32, DBValue.ToDBInt32(promotionOld.TargetedMarketID)));
                paramCol.Add(new SqlDataParameter("@Advertising_Support_ID", DbType.Int32, DBValue.ToDBInt32(promotionOld.AdvertisingSupportID)));
                paramCol.Add(new SqlDataParameter("@Advertisement_Id", DbType.Int32, DBValue.ToDBInt32(promotionOld.AdvertisementId)));
                paramCol.Add(new SqlDataParameter("@Partner_ID", DbType.Int32, DBValue.ToDBInt32(promotionOld.PartnerID)));
                paramCol.Add(new SqlDataParameter("@Cookie_Content", DbType.String, DBValue.ToDBString(promotionOld.CookieContent)));
                paramCol.Add(new SqlDataParameter("@Grabber_Id", DbType.Int32, DBValue.ToDBInt32(promotionOld.GrabberId)));
                paramCol.Add(new SqlDataParameter("@Is_Predictive", DbType.Int32, DBValue.ToDBInt32(promotionOld.IsPredictive)));
                paramCol.Add(new SqlDataParameter("@Advertiser_ID", DbType.Int32, DBValue.ToDBInt32(promotionOld.AdvertiserID)));
                paramCol.Add(new SqlDataParameter("@Keyword", DbType.String, DBValue.ToDBString(promotionOld.Keyword)));
                paramCol.Add(new SqlDataParameter("@Script_Name", DbType.String, DBValue.ToDBString(promotionOld.ScriptName)));
                paramCol.Add(new SqlDataParameter("@Advertisment_Type_ID", DbType.Int32, DBValue.ToDBInt32(promotionOld.AdvertismentTypeID)));
                paramCol.Add(new SqlDataParameter("@Destination_ID", DbType.Int32, DBValue.ToDBInt32(promotionOld.DestinationID)));
                paramCol.Add(new SqlDataParameter("@Advertiser_Partner_ID", DbType.Int32, DBValue.ToDBInt32(promotionOld.AdvertiserPartnerID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region PromotionType Methods

        private PromotionType LoadPromotionType(DataRow row)
        {
            PromotionType promotionType = new PromotionType();

            // Store database values into our business object
            promotionType.PromotionTypeCode = DBValue.ToString(row["promotion_type_code"]);
            promotionType.Description = DBValue.ToString(row["description"]);
            promotionType.DefaultCommissionRate = DBValue.ToInt16(row["default_commission_rate"]);
            promotionType.Channel = DBValue.ToInt32(row["channel"]);

            // return the filled object
            return promotionType;
        }

        public PromotionType[] GetPromotionTypes()
        {
            return GetPromotionTypes(null);
        }

        private PromotionType[] GetPromotionTypes(SqlInterface si)
        {
            PromotionType[] promotionTypes = null;

            string storedProcName = "efrcrm_get_promotion_types";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    promotionTypes = new PromotionType[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            promotionTypes[i] = LoadPromotionType(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return promotionTypes;
        }



        #endregion

        #region Proposal Methods

        private Proposal LoadProposal(DataRow row)
        {
            Proposal proposal = new Proposal();

            // Store database values into our business object
            proposal.ProposalID = DBValue.ToInt32(row["proposal_id"]);
            proposal.FaxName = DBValue.ToString(row["fax_name"]);
            proposal.EmailName = DBValue.ToString(row["email_name"]);
            proposal.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return proposal;
        }

        public Proposal[] GetProposals()
        {
            return GetProposals(null);
        }

        private Proposal[] GetProposals(SqlInterface si)
        {
            Proposal[] proposals = null;

            string storedProcName = "efrcrm_get_proposals";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    proposals = new Proposal[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            proposals[i] = LoadProposal(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return proposals;
        }


        public Proposal GetProposalByID(int id)
        {
            return GetProposalByID(id, null);
        }

        private Proposal GetProposalByID(int id, SqlInterface si)
        {
            Proposal proposal = null;

            string storedProcName = "efrcrm_get_proposal_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Proposal_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        proposal = LoadProposal(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return proposal;
        }


        public int InsertProposal(Proposal proposal)
        {
            return InsertProposal(proposal, null);
        }

        private int InsertProposal(Proposal proposal, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_proposal";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Proposal_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Fax_Name", DbType.String, DBValue.ToDBString(proposal.FaxName)));
                paramCol.Add(new SqlDataParameter("@Email_Name", DbType.String, DBValue.ToDBString(proposal.EmailName)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(proposal.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    proposal.ProposalID = DBValue.ToInt32(paramCol["@Proposal_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateProposal(Proposal proposal)
        {
            return UpdateProposal(proposal, null);
        }

        private int UpdateProposal(Proposal proposal, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_proposal";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Proposal_ID", DbType.Int32, DBValue.ToDBInt32(proposal.ProposalID)));
                paramCol.Add(new SqlDataParameter("@Fax_Name", DbType.String, DBValue.ToDBString(proposal.FaxName)));
                paramCol.Add(new SqlDataParameter("@Email_Name", DbType.String, DBValue.ToDBString(proposal.EmailName)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(proposal.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region ProposalTags Methods

        private ProposalTags LoadProposalTags(DataRow row)
        {
            ProposalTags proposalTags = new ProposalTags();

            // Store database values into our business object
            proposalTags.ProposalID = DBValue.ToInt32(row["proposal_id"]);
            proposalTags.TagsID = DBValue.ToInt32(row["tags_id"]);

            // return the filled object
            return proposalTags;
        }

        public ProposalTags[] GetProposalTagss()
        {
            return GetProposalTagss(null);
        }

        private ProposalTags[] GetProposalTagss(SqlInterface si)
        {
            ProposalTags[] proposalTagss = null;

            string storedProcName = "efrcrm_get_proposal_tagss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    proposalTagss = new ProposalTags[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            proposalTagss[i] = LoadProposalTags(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return proposalTagss;
        }


        public ProposalTags GetProposalTagsByID(int id)
        {
            return GetProposalTagsByID(id, null);
        }

        private ProposalTags GetProposalTagsByID(int id, SqlInterface si)
        {
            ProposalTags proposalTags = null;

            string storedProcName = "efrcrm_get_proposal_tags_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Proposal_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        proposalTags = LoadProposalTags(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return proposalTags;
        }


        public int InsertProposalTags(ProposalTags proposalTags)
        {
            return InsertProposalTags(proposalTags, null);
        }

        private int InsertProposalTags(ProposalTags proposalTags, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_proposal_tags";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Proposal_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Tags_ID", DbType.Int32, DBValue.ToDBInt32(proposalTags.TagsID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    proposalTags.ProposalID = DBValue.ToInt32(paramCol["@Proposal_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateProposalTags(ProposalTags proposalTags)
        {
            return UpdateProposalTags(proposalTags, null);
        }

        private int UpdateProposalTags(ProposalTags proposalTags, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_proposal_tags";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Proposal_ID", DbType.Int32, DBValue.ToDBInt32(proposalTags.ProposalID)));
                paramCol.Add(new SqlDataParameter("@Tags_ID", DbType.Int32, DBValue.ToDBInt32(proposalTags.TagsID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region QspMatchingCode Methods

        private QspMatchingCode LoadQspMatchingCode(DataRow row)
        {
            QspMatchingCode qspMatchingCode = new QspMatchingCode();

            // Store database values into our business object
            qspMatchingCode.Id = DBValue.ToInt32(row["id"]);
            qspMatchingCode.GroupName = DBValue.ToString(row["group_name"]);
            qspMatchingCode.Address = DBValue.ToString(row["address"]);
            qspMatchingCode.ZipCode = DBValue.ToString(row["zip_code"]);
            qspMatchingCode.Zzzzz = DBValue.ToString(row["zzzzz"]);
            qspMatchingCode.Nnn = DBValue.ToString(row["nnn"]);
            qspMatchingCode.Aa99 = DBValue.ToString(row["aa99"]);
            qspMatchingCode.Zzzzzaa99 = DBValue.ToString(row["zzzzzaa99"]);
            qspMatchingCode.Zzzzznnnaa99 = DBValue.ToString(row["zzzzznnnaa99"]);

            // return the filled object
            return qspMatchingCode;
        }

        public QspMatchingCode[] GetQspMatchingCodes()
        {
            return GetQspMatchingCodes(null);
        }

        private QspMatchingCode[] GetQspMatchingCodes(SqlInterface si)
        {
            QspMatchingCode[] qspMatchingCodes = null;

            string storedProcName = "efrcrm_get_qsp_matching_codes";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    qspMatchingCodes = new QspMatchingCode[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            qspMatchingCodes[i] = LoadQspMatchingCode(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return qspMatchingCodes;
        }


        public QspMatchingCode GetQspMatchingCodeByID(int id)
        {
            return GetQspMatchingCodeByID(id, null);
        }

        private QspMatchingCode GetQspMatchingCodeByID(int id, SqlInterface si)
        {
            QspMatchingCode qspMatchingCode = null;

            string storedProcName = "efrcrm_get_qsp_matching_code_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        qspMatchingCode = LoadQspMatchingCode(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return qspMatchingCode;
        }


        public int InsertQspMatchingCode(QspMatchingCode qspMatchingCode)
        {
            return InsertQspMatchingCode(qspMatchingCode, null);
        }

        private int InsertQspMatchingCode(QspMatchingCode qspMatchingCode, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_qsp_matching_code";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Group_name", DbType.String, DBValue.ToDBString(qspMatchingCode.GroupName)));
                paramCol.Add(new SqlDataParameter("@Address", DbType.String, DBValue.ToDBString(qspMatchingCode.Address)));
                paramCol.Add(new SqlDataParameter("@Zip_code", DbType.String, DBValue.ToDBString(qspMatchingCode.ZipCode)));
                paramCol.Add(new SqlDataParameter("@Zzzzz", DbType.String, DBValue.ToDBString(qspMatchingCode.Zzzzz)));
                paramCol.Add(new SqlDataParameter("@Nnn", DbType.String, DBValue.ToDBString(qspMatchingCode.Nnn)));
                paramCol.Add(new SqlDataParameter("@Aa99", DbType.String, DBValue.ToDBString(qspMatchingCode.Aa99)));
                paramCol.Add(new SqlDataParameter("@Zzzzzaa99", DbType.String, DBValue.ToDBString(qspMatchingCode.Zzzzzaa99)));
                paramCol.Add(new SqlDataParameter("@Zzzzznnnaa99", DbType.String, DBValue.ToDBString(qspMatchingCode.Zzzzznnnaa99)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    qspMatchingCode.Id = DBValue.ToInt32(paramCol["@Id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateQspMatchingCode(QspMatchingCode qspMatchingCode)
        {
            return UpdateQspMatchingCode(qspMatchingCode, null);
        }

        private int UpdateQspMatchingCode(QspMatchingCode qspMatchingCode, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_qsp_matching_code";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Id", DbType.Int32, DBValue.ToDBInt32(qspMatchingCode.Id)));
                paramCol.Add(new SqlDataParameter("@Group_name", DbType.String, DBValue.ToDBString(qspMatchingCode.GroupName)));
                paramCol.Add(new SqlDataParameter("@Address", DbType.String, DBValue.ToDBString(qspMatchingCode.Address)));
                paramCol.Add(new SqlDataParameter("@Zip_code", DbType.String, DBValue.ToDBString(qspMatchingCode.ZipCode)));
                paramCol.Add(new SqlDataParameter("@Zzzzz", DbType.String, DBValue.ToDBString(qspMatchingCode.Zzzzz)));
                paramCol.Add(new SqlDataParameter("@Nnn", DbType.String, DBValue.ToDBString(qspMatchingCode.Nnn)));
                paramCol.Add(new SqlDataParameter("@Aa99", DbType.String, DBValue.ToDBString(qspMatchingCode.Aa99)));
                paramCol.Add(new SqlDataParameter("@Zzzzzaa99", DbType.String, DBValue.ToDBString(qspMatchingCode.Zzzzzaa99)));
                paramCol.Add(new SqlDataParameter("@Zzzzznnnaa99", DbType.String, DBValue.ToDBString(qspMatchingCode.Zzzzznnnaa99)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region QSPProgram Methods

        private QSPProgram LoadQSPProgram(DataRow row)
        {
            QSPProgram qspProgram = new QSPProgram();

            // Store database values into our business object
            qspProgram.QSPProgramID = DBValue.ToInt32(row["qsp_program_id"]);
            qspProgram.Description = DBValue.ToString(row["description"]);
            qspProgram.BaseDirectory = DBValue.ToString(row["base_directory"]);

            // return the filled object
            return qspProgram;
        }

        public QSPProgram[] GetQSPPrograms()
        {
            return GetQSPPrograms(null);
        }

        private QSPProgram[] GetQSPPrograms(SqlInterface si)
        {
            QSPProgram[] qspPrograms = null;

            string storedProcName = "efrcrm_get_qsp_programs";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    qspPrograms = new QSPProgram[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            qspPrograms[i] = LoadQSPProgram(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return qspPrograms;
        }


        public QSPProgram GetQSPProgramByID(int id)
        {
            return GetQSPProgramByID(id, null);
        }

        private QSPProgram GetQSPProgramByID(int id, SqlInterface si)
        {
            QSPProgram qspProgram = null;

            string storedProcName = "efrcrm_get_qsp_program_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@QSP_Program_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        qspProgram = LoadQSPProgram(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return qspProgram;
        }


        public int InsertQSPProgram(QSPProgram qspProgram)
        {
            return InsertQSPProgram(qspProgram, null);
        }

        private int InsertQSPProgram(QSPProgram qspProgram, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_qsp_program";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@QSP_Program_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(qspProgram.Description)));
                paramCol.Add(new SqlDataParameter("@Base_Directory", DbType.String, DBValue.ToDBString(qspProgram.BaseDirectory)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    qspProgram.QSPProgramID = DBValue.ToInt32(paramCol["@QSP_Program_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateQSPProgram(QSPProgram qspProgram)
        {
            return UpdateQSPProgram(qspProgram, null);
        }

        private int UpdateQSPProgram(QSPProgram qspProgram, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_qsp_program";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@QSP_Program_ID", DbType.Int32, DBValue.ToDBInt32(qspProgram.QSPProgramID)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(qspProgram.Description)));
                paramCol.Add(new SqlDataParameter("@Base_Directory", DbType.String, DBValue.ToDBString(qspProgram.BaseDirectory)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region QuestionEntryForm Methods

        private QuestionEntryForm LoadQuestionEntryForm(DataRow row)
        {
            QuestionEntryForm questionEntryForm = new QuestionEntryForm();

            // Store database values into our business object
            questionEntryForm.EntryFormID = DBValue.ToInt32(row["entry_form_id"]);
            questionEntryForm.QuestionID = DBValue.ToInt32(row["question_id"]);
            questionEntryForm.IsRequired = DBValue.ToInt32(row["is_required"]);

            // return the filled object
            return questionEntryForm;
        }

        public QuestionEntryForm[] GetQuestionEntryForms()
        {
            return GetQuestionEntryForms(null);
        }

        private QuestionEntryForm[] GetQuestionEntryForms(SqlInterface si)
        {
            QuestionEntryForm[] questionEntryForms = null;

            string storedProcName = "efrcrm_get_question_entry_forms";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    questionEntryForms = new QuestionEntryForm[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            questionEntryForms[i] = LoadQuestionEntryForm(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return questionEntryForms;
        }


        public QuestionEntryForm GetQuestionEntryFormByID(int id)
        {
            return GetQuestionEntryFormByID(id, null);
        }

        private QuestionEntryForm GetQuestionEntryFormByID(int id, SqlInterface si)
        {
            QuestionEntryForm questionEntryForm = null;

            string storedProcName = "efrcrm_get_question_entry_form_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Entry_Form_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        questionEntryForm = LoadQuestionEntryForm(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return questionEntryForm;
        }


        public int InsertQuestionEntryForm(QuestionEntryForm questionEntryForm)
        {
            return InsertQuestionEntryForm(questionEntryForm, null);
        }

        private int InsertQuestionEntryForm(QuestionEntryForm questionEntryForm, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_question_entry_form";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Entry_Form_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Question_ID", DbType.Int32, DBValue.ToDBInt32(questionEntryForm.QuestionID)));
                paramCol.Add(new SqlDataParameter("@Is_Required", DbType.Int32, DBValue.ToDBInt32(questionEntryForm.IsRequired)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    questionEntryForm.EntryFormID = DBValue.ToInt32(paramCol["@Entry_Form_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateQuestionEntryForm(QuestionEntryForm questionEntryForm)
        {
            return UpdateQuestionEntryForm(questionEntryForm, null);
        }

        private int UpdateQuestionEntryForm(QuestionEntryForm questionEntryForm, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_question_entry_form";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Entry_Form_ID", DbType.Int32, DBValue.ToDBInt32(questionEntryForm.EntryFormID)));
                paramCol.Add(new SqlDataParameter("@Question_ID", DbType.Int32, DBValue.ToDBInt32(questionEntryForm.QuestionID)));
                paramCol.Add(new SqlDataParameter("@Is_Required", DbType.Int32, DBValue.ToDBInt32(questionEntryForm.IsRequired)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region Reason Methods

        private Reason LoadReason(DataRow row)
        {
            Reason reason = new Reason();

            // Store database values into our business object
            reason.ReasonID = DBValue.ToInt32(row["reason_id"]);
            reason.Description = DBValue.ToString(row["description"]);
            reason.IsActive = DBValue.ToInt32(row["is_active"]);

            // return the filled object
            return reason;
        }

        public Reason[] GetReasons()
        {
            return GetReasons(null);
        }

        private Reason[] GetReasons(SqlInterface si)
        {
            Reason[] reasons = null;

            string storedProcName = "efrcrm_get_reasons";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    reasons = new Reason[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            reasons[i] = LoadReason(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return reasons;
        }


        public Reason GetReasonByID(int id)
        {
            return GetReasonByID(id, null);
        }

        private Reason GetReasonByID(int id, SqlInterface si)
        {
            Reason reason = null;

            string storedProcName = "efrcrm_get_reason_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Reason_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        reason = LoadReason(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return reason;
        }


        public int InsertReason(Reason reason)
        {
            return InsertReason(reason, null);
        }

        private int InsertReason(Reason reason, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_reason";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Reason_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(reason.Description)));
                paramCol.Add(new SqlDataParameter("@Is_Active", DbType.Int32, DBValue.ToDBInt32(reason.IsActive)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    reason.ReasonID = DBValue.ToInt32(paramCol["@Reason_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateReason(Reason reason)
        {
            return UpdateReason(reason, null);
        }

        private int UpdateReason(Reason reason, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_reason";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Reason_ID", DbType.Int32, DBValue.ToDBInt32(reason.ReasonID)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(reason.Description)));
                paramCol.Add(new SqlDataParameter("@Is_Active", DbType.Int32, DBValue.ToDBInt32(reason.IsActive)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region Referee Methods

        private Referee LoadReferee(DataRow row)
        {
            Referee referee = new Referee();

            // Store database values into our business object
            referee.RefereeId = DBValue.ToInt32(row["referee_id"]);
            referee.LeadId = DBValue.ToInt32(row["lead_id"]);
            referee.EntryDate = DBValue.ToDateTime(row["entry_date"]);
            referee.FirstName = DBValue.ToString(row["first_name"]);
            referee.LastName = DBValue.ToString(row["last_name"]);
            referee.Email = DBValue.ToString(row["email"]);
            referee.PhoneNumber = DBValue.ToString(row["phone_number"]);
            referee.IsEntered = DBValue.ToInt32(row["is_entered"]);

            // return the filled object
            return referee;
        }

        public Referee[] GetReferees()
        {
            return GetReferees(null);
        }

        private Referee[] GetReferees(SqlInterface si)
        {
            Referee[] referees = null;

            string storedProcName = "efrcrm_get_referees";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    referees = new Referee[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            referees[i] = LoadReferee(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return referees;
        }


        public Referee GetRefereeByID(int id)
        {
            return GetRefereeByID(id, null);
        }

        private Referee GetRefereeByID(int id, SqlInterface si)
        {
            Referee referee = null;

            string storedProcName = "efrcrm_get_referee_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Referee_Id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        referee = LoadReferee(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return referee;
        }


        public int InsertReferee(Referee referee)
        {
            return InsertReferee(referee, null);
        }

        private int InsertReferee(Referee referee, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_referee";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Referee_Id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Lead_Id", DbType.Int32, DBValue.ToDBInt32(referee.LeadId)));
                paramCol.Add(new SqlDataParameter("@Entry_Date", DbType.DateTime, DBValue.ToDBDateTime(referee.EntryDate)));
                paramCol.Add(new SqlDataParameter("@First_Name", DbType.String, DBValue.ToDBString(referee.FirstName)));
                paramCol.Add(new SqlDataParameter("@Last_Name", DbType.String, DBValue.ToDBString(referee.LastName)));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(referee.Email)));
                paramCol.Add(new SqlDataParameter("@Phone_Number", DbType.String, DBValue.ToDBString(referee.PhoneNumber)));
                paramCol.Add(new SqlDataParameter("@Is_Entered", DbType.Int32, DBValue.ToDBInt32(referee.IsEntered)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    referee.RefereeId = DBValue.ToInt32(paramCol["@Referee_Id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateReferee(Referee referee)
        {
            return UpdateReferee(referee, null);
        }

        private int UpdateReferee(Referee referee, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_referee";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Referee_Id", DbType.Int32, DBValue.ToDBInt32(referee.RefereeId)));
                paramCol.Add(new SqlDataParameter("@Lead_Id", DbType.Int32, DBValue.ToDBInt32(referee.LeadId)));
                paramCol.Add(new SqlDataParameter("@Entry_Date", DbType.DateTime, DBValue.ToDBDateTime(referee.EntryDate)));
                paramCol.Add(new SqlDataParameter("@First_Name", DbType.String, DBValue.ToDBString(referee.FirstName)));
                paramCol.Add(new SqlDataParameter("@Last_Name", DbType.String, DBValue.ToDBString(referee.LastName)));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(referee.Email)));
                paramCol.Add(new SqlDataParameter("@Phone_Number", DbType.String, DBValue.ToDBString(referee.PhoneNumber)));
                paramCol.Add(new SqlDataParameter("@Is_Entered", DbType.Int32, DBValue.ToDBInt32(referee.IsEntered)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region ReplicationMonitoring Methods

        private ReplicationMonitoring LoadReplicationMonitoring(DataRow row)
        {
            ReplicationMonitoring replicationMonitoring = new ReplicationMonitoring();

            // Store database values into our business object
            replicationMonitoring.ReplicationID = DBValue.ToInt32(row["replication_id"]);
            replicationMonitoring.Msg = DBValue.ToString(row["msg"]);

            // return the filled object
            return replicationMonitoring;
        }

        public ReplicationMonitoring[] GetReplicationMonitorings()
        {
            return GetReplicationMonitorings(null);
        }

        private ReplicationMonitoring[] GetReplicationMonitorings(SqlInterface si)
        {
            ReplicationMonitoring[] replicationMonitorings = null;

            string storedProcName = "efrcrm_get_replication_monitorings";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    replicationMonitorings = new ReplicationMonitoring[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            replicationMonitorings[i] = LoadReplicationMonitoring(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return replicationMonitorings;
        }


        public ReplicationMonitoring GetReplicationMonitoringByID(int id)
        {
            return GetReplicationMonitoringByID(id, null);
        }

        private ReplicationMonitoring GetReplicationMonitoringByID(int id, SqlInterface si)
        {
            ReplicationMonitoring replicationMonitoring = null;

            string storedProcName = "efrcrm_get_replication_monitoring_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Replication_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        replicationMonitoring = LoadReplicationMonitoring(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return replicationMonitoring;
        }


        public int InsertReplicationMonitoring(ReplicationMonitoring replicationMonitoring)
        {
            return InsertReplicationMonitoring(replicationMonitoring, null);
        }

        private int InsertReplicationMonitoring(ReplicationMonitoring replicationMonitoring, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_replication_monitoring";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Replication_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Msg", DbType.String, DBValue.ToDBString(replicationMonitoring.Msg)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    replicationMonitoring.ReplicationID = DBValue.ToInt32(paramCol["@Replication_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateReplicationMonitoring(ReplicationMonitoring replicationMonitoring)
        {
            return UpdateReplicationMonitoring(replicationMonitoring, null);
        }

        private int UpdateReplicationMonitoring(ReplicationMonitoring replicationMonitoring, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_replication_monitoring";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Replication_ID", DbType.Int32, DBValue.ToDBInt32(replicationMonitoring.ReplicationID)));
                paramCol.Add(new SqlDataParameter("@Msg", DbType.String, DBValue.ToDBString(replicationMonitoring.Msg)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region ReqDecision Methods

        private ReqDecision LoadReqDecision(DataRow row)
        {
            ReqDecision reqDecision = new ReqDecision();

            // Store database values into our business object
            reqDecision.DecisionId = DBValue.ToInt32(row["decision_id"]);
            reqDecision.LanguageId = DBValue.ToInt32(row["language_id"]);
            reqDecision.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return reqDecision;
        }

        public ReqDecision[] GetReqDecisions()
        {
            return GetReqDecisions(null);
        }

        private ReqDecision[] GetReqDecisions(SqlInterface si)
        {
            ReqDecision[] reqDecisions = null;

            string storedProcName = "efrcrm_get_req_decisions";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    reqDecisions = new ReqDecision[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            reqDecisions[i] = LoadReqDecision(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return reqDecisions;
        }


        public ReqDecision GetReqDecisionByID(int id)
        {
            return GetReqDecisionByID(id, null);
        }

        private ReqDecision GetReqDecisionByID(int id, SqlInterface si)
        {
            ReqDecision reqDecision = null;

            string storedProcName = "efrcrm_get_req_decision_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Decision_Id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        reqDecision = LoadReqDecision(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return reqDecision;
        }


        public int InsertReqDecision(ReqDecision reqDecision)
        {
            return InsertReqDecision(reqDecision, null);
        }

        private int InsertReqDecision(ReqDecision reqDecision, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_req_decision";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Decision_Id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Language_Id", DbType.Int32, DBValue.ToDBInt32(reqDecision.LanguageId)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(reqDecision.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    reqDecision.DecisionId = DBValue.ToInt32(paramCol["@Decision_Id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateReqDecision(ReqDecision reqDecision)
        {
            return UpdateReqDecision(reqDecision, null);
        }

        private int UpdateReqDecision(ReqDecision reqDecision, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_req_decision";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Decision_Id", DbType.Int32, DBValue.ToDBInt32(reqDecision.DecisionId)));
                paramCol.Add(new SqlDataParameter("@Language_Id", DbType.Int32, DBValue.ToDBInt32(reqDecision.LanguageId)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(reqDecision.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region ReqEmployees Methods

        private ReqEmployees LoadReqEmployees(DataRow row)
        {
            ReqEmployees reqEmployees = new ReqEmployees();

            // Store database values into our business object
            reqEmployees.EmployeeId = DBValue.ToInt32(row["employee_id"]);
            reqEmployees.EmployeeName = DBValue.ToString(row["employee_name"]);
            reqEmployees.IsMIS = DBValue.ToInt32(row["is_mis"]);
            reqEmployees.Password = DBValue.ToString(row["password"]);
            reqEmployees.Email = DBValue.ToString(row["email"]);
            reqEmployees.IsManager = DBValue.ToInt32(row["is_manager"]);
            reqEmployees.IsActive = DBValue.ToInt32(row["is_active"]);

            // return the filled object
            return reqEmployees;
        }

        public ReqEmployees[] GetReqEmployeess()
        {
            return GetReqEmployeess(null);
        }

        private ReqEmployees[] GetReqEmployeess(SqlInterface si)
        {
            ReqEmployees[] reqEmployeess = null;

            string storedProcName = "efrcrm_get_req_employeess";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    reqEmployeess = new ReqEmployees[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            reqEmployeess[i] = LoadReqEmployees(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return reqEmployeess;
        }


        public ReqEmployees GetReqEmployeesByID(int id)
        {
            return GetReqEmployeesByID(id, null);
        }

        private ReqEmployees GetReqEmployeesByID(int id, SqlInterface si)
        {
            ReqEmployees reqEmployees = null;

            string storedProcName = "efrcrm_get_req_employees_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Employee_Id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        reqEmployees = LoadReqEmployees(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return reqEmployees;
        }


        public int InsertReqEmployees(ReqEmployees reqEmployees)
        {
            return InsertReqEmployees(reqEmployees, null);
        }

        private int InsertReqEmployees(ReqEmployees reqEmployees, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_req_employees";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Employee_Id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Employee_Name", DbType.String, DBValue.ToDBString(reqEmployees.EmployeeName)));
                paramCol.Add(new SqlDataParameter("@Is_MIS", DbType.Int32, DBValue.ToDBInt32(reqEmployees.IsMIS)));
                paramCol.Add(new SqlDataParameter("@Password", DbType.String, DBValue.ToDBString(reqEmployees.Password)));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(reqEmployees.Email)));
                paramCol.Add(new SqlDataParameter("@Is_Manager", DbType.Int32, DBValue.ToDBInt32(reqEmployees.IsManager)));
                paramCol.Add(new SqlDataParameter("@Is_Active", DbType.Int32, DBValue.ToDBInt32(reqEmployees.IsActive)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    reqEmployees.EmployeeId = DBValue.ToInt32(paramCol["@Employee_Id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateReqEmployees(ReqEmployees reqEmployees)
        {
            return UpdateReqEmployees(reqEmployees, null);
        }

        private int UpdateReqEmployees(ReqEmployees reqEmployees, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_req_employees";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Employee_Id", DbType.Int32, DBValue.ToDBInt32(reqEmployees.EmployeeId)));
                paramCol.Add(new SqlDataParameter("@Employee_Name", DbType.String, DBValue.ToDBString(reqEmployees.EmployeeName)));
                paramCol.Add(new SqlDataParameter("@Is_MIS", DbType.Int32, DBValue.ToDBInt32(reqEmployees.IsMIS)));
                paramCol.Add(new SqlDataParameter("@Password", DbType.String, DBValue.ToDBString(reqEmployees.Password)));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(reqEmployees.Email)));
                paramCol.Add(new SqlDataParameter("@Is_Manager", DbType.Int32, DBValue.ToDBInt32(reqEmployees.IsManager)));
                paramCol.Add(new SqlDataParameter("@Is_Active", DbType.Int32, DBValue.ToDBInt32(reqEmployees.IsActive)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region ReqLanguage Methods

        private ReqLanguage LoadReqLanguage(DataRow row)
        {
            ReqLanguage reqLanguage = new ReqLanguage();

            // Store database values into our business object
            reqLanguage.LanguageId = DBValue.ToInt32(row["language_id"]);
            reqLanguage.Language = DBValue.ToString(row["language"]);

            // return the filled object
            return reqLanguage;
        }

        public ReqLanguage[] GetReqLanguages()
        {
            return GetReqLanguages(null);
        }

        private ReqLanguage[] GetReqLanguages(SqlInterface si)
        {
            ReqLanguage[] reqLanguages = null;

            string storedProcName = "efrcrm_get_req_languages";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    reqLanguages = new ReqLanguage[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            reqLanguages[i] = LoadReqLanguage(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return reqLanguages;
        }


        public ReqLanguage GetReqLanguageByID(int id)
        {
            return GetReqLanguageByID(id, null);
        }

        private ReqLanguage GetReqLanguageByID(int id, SqlInterface si)
        {
            ReqLanguage reqLanguage = null;

            string storedProcName = "efrcrm_get_req_language_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Language_Id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        reqLanguage = LoadReqLanguage(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return reqLanguage;
        }


        public int InsertReqLanguage(ReqLanguage reqLanguage)
        {
            return InsertReqLanguage(reqLanguage, null);
        }

        private int InsertReqLanguage(ReqLanguage reqLanguage, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_req_language";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Language_Id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Language", DbType.String, DBValue.ToDBString(reqLanguage.Language)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    reqLanguage.LanguageId = DBValue.ToInt32(paramCol["@Language_Id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateReqLanguage(ReqLanguage reqLanguage)
        {
            return UpdateReqLanguage(reqLanguage, null);
        }

        private int UpdateReqLanguage(ReqLanguage reqLanguage, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_req_language";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Language_Id", DbType.Int32, DBValue.ToDBInt32(reqLanguage.LanguageId)));
                paramCol.Add(new SqlDataParameter("@Language", DbType.String, DBValue.ToDBString(reqLanguage.Language)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region ReqPriority Methods

        private ReqPriority LoadReqPriority(DataRow row)
        {
            ReqPriority reqPriority = new ReqPriority();

            // Store database values into our business object
            reqPriority.PriorityId = DBValue.ToInt32(row["priority_id"]);
            reqPriority.LanguageId = DBValue.ToInt32(row["language_id"]);
            reqPriority.Description = DBValue.ToString(row["description"]);
            reqPriority.IsDefault = DBValue.ToInt32(row["is_default"]);

            // return the filled object
            return reqPriority;
        }

        public ReqPriority[] GetReqPrioritys()
        {
            return GetReqPrioritys(null);
        }

        private ReqPriority[] GetReqPrioritys(SqlInterface si)
        {
            ReqPriority[] reqPrioritys = null;

            string storedProcName = "efrcrm_get_req_prioritys";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    reqPrioritys = new ReqPriority[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            reqPrioritys[i] = LoadReqPriority(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return reqPrioritys;
        }


        public ReqPriority GetReqPriorityByID(int id)
        {
            return GetReqPriorityByID(id, null);
        }

        private ReqPriority GetReqPriorityByID(int id, SqlInterface si)
        {
            ReqPriority reqPriority = null;

            string storedProcName = "efrcrm_get_req_priority_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Priority_Id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        reqPriority = LoadReqPriority(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return reqPriority;
        }


        public int InsertReqPriority(ReqPriority reqPriority)
        {
            return InsertReqPriority(reqPriority, null);
        }

        private int InsertReqPriority(ReqPriority reqPriority, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_req_priority";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Priority_Id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Language_Id", DbType.Int32, DBValue.ToDBInt32(reqPriority.LanguageId)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(reqPriority.Description)));
                paramCol.Add(new SqlDataParameter("@Is_Default", DbType.Int32, DBValue.ToDBInt32(reqPriority.IsDefault)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    reqPriority.PriorityId = DBValue.ToInt32(paramCol["@Priority_Id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateReqPriority(ReqPriority reqPriority)
        {
            return UpdateReqPriority(reqPriority, null);
        }

        private int UpdateReqPriority(ReqPriority reqPriority, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_req_priority";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Priority_Id", DbType.Int32, DBValue.ToDBInt32(reqPriority.PriorityId)));
                paramCol.Add(new SqlDataParameter("@Language_Id", DbType.Int32, DBValue.ToDBInt32(reqPriority.LanguageId)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(reqPriority.Description)));
                paramCol.Add(new SqlDataParameter("@Is_Default", DbType.Int32, DBValue.ToDBInt32(reqPriority.IsDefault)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region ReqProjectType Methods

        private ReqProjectType LoadReqProjectType(DataRow row)
        {
            ReqProjectType reqProjectType = new ReqProjectType();

            // Store database values into our business object
            reqProjectType.ProjectTypeID = DBValue.ToInt32(row["project_type_id"]);
            reqProjectType.LanguageId = DBValue.ToInt32(row["language_id"]);
            reqProjectType.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return reqProjectType;
        }

        public ReqProjectType[] GetReqProjectTypes()
        {
            return GetReqProjectTypes(null);
        }

        private ReqProjectType[] GetReqProjectTypes(SqlInterface si)
        {
            ReqProjectType[] reqProjectTypes = null;

            string storedProcName = "efrcrm_get_req_project_types";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    reqProjectTypes = new ReqProjectType[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            reqProjectTypes[i] = LoadReqProjectType(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return reqProjectTypes;
        }


        public ReqProjectType GetReqProjectTypeByID(int id)
        {
            return GetReqProjectTypeByID(id, null);
        }

        private ReqProjectType GetReqProjectTypeByID(int id, SqlInterface si)
        {
            ReqProjectType reqProjectType = null;

            string storedProcName = "efrcrm_get_req_project_type_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Project_Type_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        reqProjectType = LoadReqProjectType(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return reqProjectType;
        }


        public int InsertReqProjectType(ReqProjectType reqProjectType)
        {
            return InsertReqProjectType(reqProjectType, null);
        }

        private int InsertReqProjectType(ReqProjectType reqProjectType, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_req_project_type";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Project_Type_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Language_Id", DbType.Int32, DBValue.ToDBInt32(reqProjectType.LanguageId)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(reqProjectType.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    reqProjectType.ProjectTypeID = DBValue.ToInt32(paramCol["@Project_Type_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateReqProjectType(ReqProjectType reqProjectType)
        {
            return UpdateReqProjectType(reqProjectType, null);
        }

        private int UpdateReqProjectType(ReqProjectType reqProjectType, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_req_project_type";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Project_Type_ID", DbType.Int32, DBValue.ToDBInt32(reqProjectType.ProjectTypeID)));
                paramCol.Add(new SqlDataParameter("@Language_Id", DbType.Int32, DBValue.ToDBInt32(reqProjectType.LanguageId)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(reqProjectType.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region ReqRequest Methods

        private ReqRequest LoadReqRequest(DataRow row)
        {
            ReqRequest reqRequest = new ReqRequest();

            // Store database values into our business object
            reqRequest.RequestId = DBValue.ToInt32(row["request_id"]);
            reqRequest.LanguageId = DBValue.ToInt32(row["language_id"]);
            reqRequest.RequestTypeID = DBValue.ToInt32(row["request_type_id"]);
            reqRequest.ProjectTypeID = DBValue.ToInt32(row["project_type_id"]);
            reqRequest.PriorityId = DBValue.ToInt32(row["priority_id"]);
            reqRequest.ProjectName = DBValue.ToString(row["project_name"]);
            reqRequest.SummaryDescription = DBValue.ToString(row["summary_description"]);
            reqRequest.RequestDate = DBValue.ToDateTime(row["request_date"]);
            reqRequest.DecisionRequiredDate = DBValue.ToDateTime(row["decision_required_date"]);
            reqRequest.ImpactDescription = DBValue.ToString(row["impact_description"]);
            reqRequest.MisImpactDescription = DBValue.ToString(row["mis_impact_description"]);
            reqRequest.DecisionDescription = DBValue.ToString(row["decision_description"]);
            reqRequest.DecisionId = DBValue.ToInt32(row["decision_id"]);
            reqRequest.DecisionDate = DBValue.ToDateTime(row["decision_date"]);
            reqRequest.ProjectSheduledStartDate = DBValue.ToDateTime(row["project_sheduled_start_date"]);
            reqRequest.ProjectSheduledEndDate = DBValue.ToDateTime(row["project_sheduled_end_date"]);
            reqRequest.ProjectStartDate = DBValue.ToDateTime(row["project_start_date"]);
            reqRequest.ProjectEndDate = DBValue.ToDateTime(row["project_end_date"]);
            reqRequest.ManagerID = DBValue.ToInt32(row["manager_id"]);
            reqRequest.EmployeeId = DBValue.ToInt32(row["employee_id"]);
            reqRequest.MISID = DBValue.ToInt32(row["mis_id"]);

            // return the filled object
            return reqRequest;
        }

        public ReqRequest[] GetReqRequests()
        {
            return GetReqRequests(null);
        }

        private ReqRequest[] GetReqRequests(SqlInterface si)
        {
            ReqRequest[] reqRequests = null;

            string storedProcName = "efrcrm_get_req_requests";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    reqRequests = new ReqRequest[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            reqRequests[i] = LoadReqRequest(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return reqRequests;
        }


        public ReqRequest GetReqRequestByID(int id)
        {
            return GetReqRequestByID(id, null);
        }

        private ReqRequest GetReqRequestByID(int id, SqlInterface si)
        {
            ReqRequest reqRequest = null;

            string storedProcName = "efrcrm_get_req_request_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Request_Id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        reqRequest = LoadReqRequest(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return reqRequest;
        }


        public int InsertReqRequest(ReqRequest reqRequest)
        {
            return InsertReqRequest(reqRequest, null);
        }

        private int InsertReqRequest(ReqRequest reqRequest, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_req_request";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Request_Id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Language_Id", DbType.Int32, DBValue.ToDBInt32(reqRequest.LanguageId)));
                paramCol.Add(new SqlDataParameter("@Request_Type_ID", DbType.Int32, DBValue.ToDBInt32(reqRequest.RequestTypeID)));
                paramCol.Add(new SqlDataParameter("@Project_Type_ID", DbType.Int32, DBValue.ToDBInt32(reqRequest.ProjectTypeID)));
                paramCol.Add(new SqlDataParameter("@Priority_Id", DbType.Int32, DBValue.ToDBInt32(reqRequest.PriorityId)));
                paramCol.Add(new SqlDataParameter("@Project_Name", DbType.String, DBValue.ToDBString(reqRequest.ProjectName)));
                paramCol.Add(new SqlDataParameter("@Summary_Description", DbType.String, DBValue.ToDBString(reqRequest.SummaryDescription)));
                paramCol.Add(new SqlDataParameter("@Request_Date", DbType.DateTime, DBValue.ToDBDateTime(reqRequest.RequestDate)));
                paramCol.Add(new SqlDataParameter("@Decision_Required_Date", DbType.DateTime, DBValue.ToDBDateTime(reqRequest.DecisionRequiredDate)));
                paramCol.Add(new SqlDataParameter("@Impact_Description", DbType.String, DBValue.ToDBString(reqRequest.ImpactDescription)));
                paramCol.Add(new SqlDataParameter("@Mis_Impact_Description", DbType.String, DBValue.ToDBString(reqRequest.MisImpactDescription)));
                paramCol.Add(new SqlDataParameter("@Decision_Description", DbType.String, DBValue.ToDBString(reqRequest.DecisionDescription)));
                paramCol.Add(new SqlDataParameter("@Decision_Id", DbType.Int32, DBValue.ToDBInt32(reqRequest.DecisionId)));
                paramCol.Add(new SqlDataParameter("@Decision_Date", DbType.DateTime, DBValue.ToDBDateTime(reqRequest.DecisionDate)));
                paramCol.Add(new SqlDataParameter("@Project_Sheduled_Start_Date", DbType.DateTime, DBValue.ToDBDateTime(reqRequest.ProjectSheduledStartDate)));
                paramCol.Add(new SqlDataParameter("@Project_Sheduled_End_Date", DbType.DateTime, DBValue.ToDBDateTime(reqRequest.ProjectSheduledEndDate)));
                paramCol.Add(new SqlDataParameter("@Project_Start_Date", DbType.DateTime, DBValue.ToDBDateTime(reqRequest.ProjectStartDate)));
                paramCol.Add(new SqlDataParameter("@Project_End_Date", DbType.DateTime, DBValue.ToDBDateTime(reqRequest.ProjectEndDate)));
                paramCol.Add(new SqlDataParameter("@Manager_ID", DbType.Int32, DBValue.ToDBInt32(reqRequest.ManagerID)));
                paramCol.Add(new SqlDataParameter("@Employee_Id", DbType.Int32, DBValue.ToDBInt32(reqRequest.EmployeeId)));
                paramCol.Add(new SqlDataParameter("@MIS_ID", DbType.Int32, DBValue.ToDBInt32(reqRequest.MISID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    reqRequest.RequestId = DBValue.ToInt32(paramCol["@Request_Id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateReqRequest(ReqRequest reqRequest)
        {
            return UpdateReqRequest(reqRequest, null);
        }

        private int UpdateReqRequest(ReqRequest reqRequest, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_req_request";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Request_Id", DbType.Int32, DBValue.ToDBInt32(reqRequest.RequestId)));
                paramCol.Add(new SqlDataParameter("@Language_Id", DbType.Int32, DBValue.ToDBInt32(reqRequest.LanguageId)));
                paramCol.Add(new SqlDataParameter("@Request_Type_ID", DbType.Int32, DBValue.ToDBInt32(reqRequest.RequestTypeID)));
                paramCol.Add(new SqlDataParameter("@Project_Type_ID", DbType.Int32, DBValue.ToDBInt32(reqRequest.ProjectTypeID)));
                paramCol.Add(new SqlDataParameter("@Priority_Id", DbType.Int32, DBValue.ToDBInt32(reqRequest.PriorityId)));
                paramCol.Add(new SqlDataParameter("@Project_Name", DbType.String, DBValue.ToDBString(reqRequest.ProjectName)));
                paramCol.Add(new SqlDataParameter("@Summary_Description", DbType.String, DBValue.ToDBString(reqRequest.SummaryDescription)));
                paramCol.Add(new SqlDataParameter("@Request_Date", DbType.DateTime, DBValue.ToDBDateTime(reqRequest.RequestDate)));
                paramCol.Add(new SqlDataParameter("@Decision_Required_Date", DbType.DateTime, DBValue.ToDBDateTime(reqRequest.DecisionRequiredDate)));
                paramCol.Add(new SqlDataParameter("@Impact_Description", DbType.String, DBValue.ToDBString(reqRequest.ImpactDescription)));
                paramCol.Add(new SqlDataParameter("@Mis_Impact_Description", DbType.String, DBValue.ToDBString(reqRequest.MisImpactDescription)));
                paramCol.Add(new SqlDataParameter("@Decision_Description", DbType.String, DBValue.ToDBString(reqRequest.DecisionDescription)));
                paramCol.Add(new SqlDataParameter("@Decision_Id", DbType.Int32, DBValue.ToDBInt32(reqRequest.DecisionId)));
                paramCol.Add(new SqlDataParameter("@Decision_Date", DbType.DateTime, DBValue.ToDBDateTime(reqRequest.DecisionDate)));
                paramCol.Add(new SqlDataParameter("@Project_Sheduled_Start_Date", DbType.DateTime, DBValue.ToDBDateTime(reqRequest.ProjectSheduledStartDate)));
                paramCol.Add(new SqlDataParameter("@Project_Sheduled_End_Date", DbType.DateTime, DBValue.ToDBDateTime(reqRequest.ProjectSheduledEndDate)));
                paramCol.Add(new SqlDataParameter("@Project_Start_Date", DbType.DateTime, DBValue.ToDBDateTime(reqRequest.ProjectStartDate)));
                paramCol.Add(new SqlDataParameter("@Project_End_Date", DbType.DateTime, DBValue.ToDBDateTime(reqRequest.ProjectEndDate)));
                paramCol.Add(new SqlDataParameter("@Manager_ID", DbType.Int32, DBValue.ToDBInt32(reqRequest.ManagerID)));
                paramCol.Add(new SqlDataParameter("@Employee_Id", DbType.Int32, DBValue.ToDBInt32(reqRequest.EmployeeId)));
                paramCol.Add(new SqlDataParameter("@MIS_ID", DbType.Int32, DBValue.ToDBInt32(reqRequest.MISID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region ReqRequestType Methods

        private ReqRequestType LoadReqRequestType(DataRow row)
        {
            ReqRequestType reqRequestType = new ReqRequestType();

            // Store database values into our business object
            reqRequestType.RequestTypeID = DBValue.ToInt32(row["request_type_id"]);
            reqRequestType.LanguageId = DBValue.ToInt32(row["language_id"]);
            reqRequestType.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return reqRequestType;
        }

        public ReqRequestType[] GetReqRequestTypes()
        {
            return GetReqRequestTypes(null);
        }

        private ReqRequestType[] GetReqRequestTypes(SqlInterface si)
        {
            ReqRequestType[] reqRequestTypes = null;

            string storedProcName = "efrcrm_get_req_request_types";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    reqRequestTypes = new ReqRequestType[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            reqRequestTypes[i] = LoadReqRequestType(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return reqRequestTypes;
        }


        public ReqRequestType GetReqRequestTypeByID(int id)
        {
            return GetReqRequestTypeByID(id, null);
        }

        private ReqRequestType GetReqRequestTypeByID(int id, SqlInterface si)
        {
            ReqRequestType reqRequestType = null;

            string storedProcName = "efrcrm_get_req_request_type_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Request_Type_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        reqRequestType = LoadReqRequestType(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return reqRequestType;
        }


        public int InsertReqRequestType(ReqRequestType reqRequestType)
        {
            return InsertReqRequestType(reqRequestType, null);
        }

        private int InsertReqRequestType(ReqRequestType reqRequestType, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_req_request_type";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Request_Type_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Language_Id", DbType.Int32, DBValue.ToDBInt32(reqRequestType.LanguageId)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(reqRequestType.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    reqRequestType.RequestTypeID = DBValue.ToInt32(paramCol["@Request_Type_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateReqRequestType(ReqRequestType reqRequestType)
        {
            return UpdateReqRequestType(reqRequestType, null);
        }

        private int UpdateReqRequestType(ReqRequestType reqRequestType, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_req_request_type";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Request_Type_ID", DbType.Int32, DBValue.ToDBInt32(reqRequestType.RequestTypeID)));
                paramCol.Add(new SqlDataParameter("@Language_Id", DbType.Int32, DBValue.ToDBInt32(reqRequestType.LanguageId)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(reqRequestType.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region Sale Methods

        public Sale[] GetSales()
        {
            return GetSales(null);
        }

        private Sale[] GetSales(SqlInterface si)
        {
            Sale[] sales = null;

            string storedProcName = "efrcrm_get_sales";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    sales = new Sale[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            sales[i] = LoadSale(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return sales;
        }


        public Sale[] GetSalesReadyForFedex()
        {
            return GetSalesReadyForFedex(null);
        }

        private Sale[] GetSalesReadyForFedex(SqlInterface si)
        {
            Sale[] sales = null;

            string storedProcName = "efrcrm_get_sales_ready_for_fedex";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    sales = new Sale[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            sales[i] = LoadSale(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return sales;
        }

        public Sale GetSaleByID(int id)
        {
            return GetSaleByID(id, "", null);
        }

        public Sale GetSaleByID(int id, string passphrase)
        {
            return GetSaleByID(id, passphrase, null);
        }

        private Sale GetSaleByID(int id, string passphrase, SqlInterface si)
        {
            Sale sale = null;

            string storedProcName = "";
            if (passphrase == "")
            {
                storedProcName = "efrcrm_get_sale_by_id";
            }
            else
            {
                storedProcName = "efrcrm_get_sale_by_id_with_passphrase";
            }



            SqlConnection conn = new SqlConnection(connectionString);
            try
            {
                SqlCommand cmd = new SqlCommand(storedProcName, conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@Sales_id", id);
                if (passphrase != "")
                {
                    cmd.Parameters.Add("@Passphrase", passphrase);
                }

                conn.Open();

                // Use DataAdapter to fill dataset
                SqlDataAdapter da = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                da.Fill(dt);

                /* 
                 SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                 paramCol.Add(new SqlDataParameter("@Sales_id", DbType.Int32, DBValue.ToDBInt32(id)));
                 if (passphrase != "")
                 {
                    paramCol.Add(new SqlDataParameter("@Passphrase", DbType.String, DBValue.ToDBString(passphrase)));
                 }
		
                 if (newConnection) {
                     // open the connection
                     si.Open();
                 }

                 DataTable dt = si.ExecuteFetchDataTable( storedProcName, CommandType.StoredProcedure, paramCol);
                 */
                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        sale = LoadSale(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                conn.Close();
            }
            return sale;
        }


        public int InsertSale(Sale sale)
        {
            return InsertSale(sale, null);
        }

        private int InsertSale(Sale sale, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_sale";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Consultant_id", DbType.Int32, DBValue.ToDBInt32(sale.ConsultantId)));
                paramCol.Add(new SqlDataParameter("@Carrier_id", DbType.Int16, DBValue.ToDBInt16(sale.CarrierId)));
                paramCol.Add(new SqlDataParameter("@Shipping_option_id", DbType.Int16, DBValue.ToDBInt16(sale.ShippingOptionId)));
                paramCol.Add(new SqlDataParameter("@Payment_term_id", DbType.Int16, DBValue.ToDBInt16(sale.PaymentTermId)));
                paramCol.Add(new SqlDataParameter("@Client_sequence_code", DbType.String, DBValue.ToDBString(sale.ClientSequenceCode)));
                paramCol.Add(new SqlDataParameter("@Client_id", DbType.Int32, DBValue.ToDBInt32(sale.ClientId)));
                paramCol.Add(new SqlDataParameter("@Sales_status_id", DbType.Int32, DBValue.ToDBInt32(sale.SalesStatusId)));
                paramCol.Add(new SqlDataParameter("@Payment_method_id", DbType.Int16, DBValue.ToDBInt16(sale.PaymentMethodId)));
                paramCol.Add(new SqlDataParameter("@Po_status_id", DbType.Int16, DBValue.ToDBInt16(sale.PoStatusId)));
                paramCol.Add(new SqlDataParameter("@Production_status_id", DbType.Int32, DBValue.ToDBInt32(sale.ProductionStatusId)));
                paramCol.Add(new SqlDataParameter("@Sponsor_consultant_id", DbType.Int32, DBValue.ToDBInt32(sale.SponsorConsultantId)));
                paramCol.Add(new SqlDataParameter("@Ar_consultant_id", DbType.Int32, DBValue.ToDBInt32(sale.ArConsultantId)));
                paramCol.Add(new SqlDataParameter("@Ar_status_id", DbType.Int32, DBValue.ToDBInt32(sale.ArStatusId)));
                paramCol.Add(new SqlDataParameter("@Lead_id", DbType.Int32, DBValue.ToDBInt32(sale.LeadId)));
                paramCol.Add(new SqlDataParameter("@Billing_company_id", DbType.Int32, DBValue.ToDBInt32(sale.BillingCompanyId)));
                paramCol.Add(new SqlDataParameter("@Upfront_payment_method_id", DbType.Int16, DBValue.ToDBInt16(sale.UpfrontPaymentMethodId)));
                paramCol.Add(new SqlDataParameter("@Confirmer_id", DbType.Int32, DBValue.ToDBInt32(sale.ConfirmerId)));
                paramCol.Add(new SqlDataParameter("@Collection_status_id", DbType.Int32, DBValue.ToDBInt32(sale.CollectionStatusId)));
                paramCol.Add(new SqlDataParameter("@Confirmation_method_id", DbType.Int32, DBValue.ToDBInt32(sale.ConfirmationMethodId)));
                paramCol.Add(new SqlDataParameter("@Credit_approval_method_id", DbType.Int32, DBValue.ToDBInt32(sale.CreditApprovalMethodId)));
                paramCol.Add(new SqlDataParameter("@Po_number", DbType.String, DBValue.ToDBString(sale.PoNumber)));
                paramCol.Add(new SqlDataParameter("@Credit_card_no", DbType.String, DBValue.ToDBString(sale.CreditCardNo)));
                paramCol.Add(new SqlDataParameter("@Expiry_date", DbType.String, DBValue.ToDBString(sale.ExpiryDate)));
                paramCol.Add(new SqlDataParameter("@Sales_date", DbType.DateTime, DBValue.ToDBDateTime(sale.SalesDate)));
                paramCol.Add(new SqlDataParameter("@Shipping_fees", DbType.Decimal, DBValue.ToDBDecimal(sale.ShippingFees)));
                paramCol.Add(new SqlDataParameter("@Shipping_fees_discount", DbType.Decimal, DBValue.ToDBDecimal(sale.ShippingFeesDiscount)));
                paramCol.Add(new SqlDataParameter("@Payment_due_date", DbType.DateTime, DBValue.ToDBDateTime(sale.PaymentDueDate)));
                paramCol.Add(new SqlDataParameter("@Confirmed_date", DbType.DateTime, DBValue.ToDBDateTime(sale.ConfirmedDate)));
                paramCol.Add(new SqlDataParameter("@Scheduled_delivery_date", DbType.DateTime, DBValue.ToDBDateTime(sale.ScheduledDeliveryDate)));
                paramCol.Add(new SqlDataParameter("@Scheduled_ship_date", DbType.DateTime, DBValue.ToDBDateTime(sale.ScheduledShipDate)));
                paramCol.Add(new SqlDataParameter("@Actual_ship_date", DbType.DateTime, DBValue.ToDBDateTime(sale.ActualShipDate)));
                paramCol.Add(new SqlDataParameter("@Waybill_no", DbType.String, DBValue.ToDBString(sale.WaybillNo)));
                paramCol.Add(new SqlDataParameter("@Comment", DbType.String, DBValue.ToDBString(sale.Comment)));
                paramCol.Add(new SqlDataParameter("@Coupon_sheet_assigned", DbType.Int32, DBValue.ToDBInt32(sale.CouponSheetAssigned)));
                //paramCol.Add(new SqlDataParameter("@Total_amount", DbType.Decimal, DBValue.ToDBDecimal(sale.TotalAmount)));
                paramCol.Add(new SqlDataParameter("@Total_amount", DbType.Double, DBValue.ToDBDouble(sale.TotalAmount)));
                paramCol.Add(new SqlDataParameter("@Invoice_date", DbType.DateTime, DBValue.ToDBDateTime(sale.InvoiceDate)));
                paramCol.Add(new SqlDataParameter("@Cancellation_date", DbType.DateTime, DBValue.ToDBDateTime(sale.CancellationDate)));
                paramCol.Add(new SqlDataParameter("@Is_ordered", DbType.Int32, DBValue.ToDBInt32(sale.IsOrdered)));
                paramCol.Add(new SqlDataParameter("@Po_received_on", DbType.DateTime, DBValue.ToDBDateTime(sale.PoReceivedOn)));
                paramCol.Add(new SqlDataParameter("@Is_delivered", DbType.Int32, DBValue.ToDBInt32(sale.IsDelivered)));
                paramCol.Add(new SqlDataParameter("@Local_sponsor_found", DbType.Int32, DBValue.ToDBInt32(sale.LocalSponsorFound)));
                paramCol.Add(new SqlDataParameter("@Box_return_date", DbType.DateTime, DBValue.ToDBDateTime(sale.BoxReturnDate)));
                paramCol.Add(new SqlDataParameter("@Reship_date", DbType.DateTime, DBValue.ToDBDateTime(sale.ReshipDate)));
                paramCol.Add(new SqlDataParameter("@Upfront_payment_required", DbType.Decimal, DBValue.ToDBDecimal(sale.UpfrontPaymentRequired)));
                paramCol.Add(new SqlDataParameter("@Upfront_payment_due_date", DbType.DateTime, DBValue.ToDBDateTime(sale.UpfrontPaymentDueDate)));
                paramCol.Add(new SqlDataParameter("@Sponsor_required", DbType.Int32, DBValue.ToDBInt32(sale.SponsorRequired)));
                paramCol.Add(new SqlDataParameter("@Actual_delivery_date", DbType.DateTime, DBValue.ToDBDateTime(sale.ActualDeliveryDate)));
                paramCol.Add(new SqlDataParameter("@Accounting_comments", DbType.String, DBValue.ToDBString(sale.AccountingComments)));
                paramCol.Add(new SqlDataParameter("@Ssn_number", DbType.String, DBValue.ToDBString(sale.SsnNumber)));
                paramCol.Add(new SqlDataParameter("@Ssn_address", DbType.String, DBValue.ToDBString(sale.SsnAddress)));
                paramCol.Add(new SqlDataParameter("@Ssn_city", DbType.String, DBValue.ToDBString(sale.SsnCity)));
                paramCol.Add(new SqlDataParameter("@Ssn_state_code", DbType.String, DBValue.ToDBString(sale.SsnStateCode)));
                paramCol.Add(new SqlDataParameter("@Ssn_country_code", DbType.String, DBValue.ToDBString(sale.SsnCountryCode)));
                paramCol.Add(new SqlDataParameter("@Ssn_zip_code", DbType.String, DBValue.ToDBString(sale.SsnZipCode)));
                paramCol.Add(new SqlDataParameter("@Is_validated", DbType.Int32, DBValue.ToDBInt32(sale.IsValidated)));
                paramCol.Add(new SqlDataParameter("@Promised_due_date", DbType.DateTime, DBValue.ToDBDateTime(sale.PromisedDueDate)));
                paramCol.Add(new SqlDataParameter("@General_flag", DbType.Int32, DBValue.ToDBInt32(sale.GeneralFlag)));
                paramCol.Add(new SqlDataParameter("@Fuelsurcharge", DbType.Int16, DBValue.ToDBInt16(sale.Fuelsurcharge)));
                paramCol.Add(new SqlDataParameter("@IsPackedByStudent", DbType.Boolean, DBValue.ToDBBoolean(sale.IsPackedByStudent)));
                paramCol.Add(new SqlDataParameter("@carrier_tracking_id", DbType.Int32, DBValue.ToDBInt32(sale.CarrierTrackingId)));
                paramCol.Add(new SqlDataParameter("@ext_order_id", DbType.Int32, DBValue.ToDBInt32(sale.ExtOrderID)));
                paramCol.Add(new SqlDataParameter("@cvv2", DbType.String, DBValue.ToDBString(sale.CVV2)));

                //paramCol.Add(new SqlDataParameter("@qsp_order_id", DbType.Int32, DBValue.ToDBInt32(sale.QspOrderID)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    sale.SalesId = DBValue.ToInt32(paramCol["@Sales_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return sale.SalesId;
        }



        internal PostalAddress GetSaleAddressBySaleId(int sId)
        {
            PostalAddress result = null;
            SalePostalAddress sPA = GetActiveSalePostalAddressBySaleId(sId);
            if (sPA != null)
            {
                result = GetPostalAddressByID(sPA.PostalAddressId);
            }
            return result;
        }


        public int UpdateSale(Sale sale)
        {
            return UpdateSale(sale, null);
        }

        private int UpdateSale(Sale sale, SqlInterface si)
        {
            int result = int.MinValue;

            // change the ar_status of the sale if the sale is paid in full
            if ((sale.TotalAmount - sale.CalculateTotalPaymentsAndAdjustmentsAmount()) == 0)
                sale.ArStatusId = ARStatus.Paid.ARStatusID;


            string storedProcName = "efrcrm_update_sale";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_id", DbType.Int32, DBValue.ToDBInt32(sale.SalesId)));
                paramCol.Add(new SqlDataParameter("@Consultant_id", DbType.Int32, DBValue.ToDBInt32(sale.ConsultantId)));
                paramCol.Add(new SqlDataParameter("@Carrier_id", DbType.Int16, DBValue.ToDBInt16(sale.CarrierId)));
                paramCol.Add(new SqlDataParameter("@Shipping_option_id", DbType.Int16, DBValue.ToDBInt16(sale.ShippingOptionId)));
                paramCol.Add(new SqlDataParameter("@Payment_term_id", DbType.Int16, DBValue.ToDBInt16(sale.PaymentTermId)));
                paramCol.Add(new SqlDataParameter("@Client_sequence_code", DbType.String, DBValue.ToDBString(sale.ClientSequenceCode)));
                paramCol.Add(new SqlDataParameter("@Client_id", DbType.Int32, DBValue.ToDBInt32(sale.ClientId)));
                paramCol.Add(new SqlDataParameter("@Sales_status_id", DbType.Int32, DBValue.ToDBInt32(sale.SalesStatusId)));
                paramCol.Add(new SqlDataParameter("@Payment_method_id", DbType.Int16, DBValue.ToDBInt16(sale.PaymentMethodId)));
                paramCol.Add(new SqlDataParameter("@Po_status_id", DbType.Int16, DBValue.ToDBInt16(sale.PoStatusId)));
                paramCol.Add(new SqlDataParameter("@Production_status_id", DbType.Int32, DBValue.ToDBInt32(sale.ProductionStatusId)));
                paramCol.Add(new SqlDataParameter("@Sponsor_consultant_id", DbType.Int32, DBValue.ToDBInt32(sale.SponsorConsultantId)));
                paramCol.Add(new SqlDataParameter("@Ar_consultant_id", DbType.Int32, DBValue.ToDBInt32(sale.ArConsultantId)));
                paramCol.Add(new SqlDataParameter("@Ar_status_id", DbType.Int32, DBValue.ToDBInt32(sale.ArStatusId)));
                paramCol.Add(new SqlDataParameter("@Lead_id", DbType.Int32, DBValue.ToDBInt32(sale.LeadId)));
                paramCol.Add(new SqlDataParameter("@Billing_company_id", DbType.Int32, DBValue.ToDBInt32(sale.BillingCompanyId)));
                paramCol.Add(new SqlDataParameter("@Upfront_payment_method_id", DbType.Int16, DBValue.ToDBInt16(sale.UpfrontPaymentMethodId)));
                paramCol.Add(new SqlDataParameter("@Confirmer_id", DbType.Int32, DBValue.ToDBInt32(sale.ConfirmerId)));
                paramCol.Add(new SqlDataParameter("@Collection_status_id", DbType.Int32, DBValue.ToDBInt32(sale.CollectionStatusId)));
                paramCol.Add(new SqlDataParameter("@Confirmation_method_id", DbType.Int32, DBValue.ToDBInt32(sale.ConfirmationMethodId)));
                paramCol.Add(new SqlDataParameter("@Credit_approval_method_id", DbType.Int32, DBValue.ToDBInt32(sale.CreditApprovalMethodId)));
                paramCol.Add(new SqlDataParameter("@Po_number", DbType.String, DBValue.ToDBString(sale.PoNumber)));
                //paramCol.Add(new SqlDataParameter("@Credit_card_no", DbType.String, DBValue.ToDBString(sale.CreditCardNo)));
                paramCol.Add(new SqlDataParameter("@Credit_card_no", DbType.String, "1111"));
                paramCol.Add(new SqlDataParameter("@Expiry_date", DbType.String, DBValue.ToDBString(sale.ExpiryDate)));
                paramCol.Add(new SqlDataParameter("@Sales_date", DbType.DateTime, DBValue.ToDBDateTime(sale.SalesDate)));
                paramCol.Add(new SqlDataParameter("@Shipping_fees", DbType.Decimal, DBValue.ToDBDecimal(sale.ShippingFees)));
                paramCol.Add(new SqlDataParameter("@Shipping_fees_discount", DbType.Decimal, DBValue.ToDBDecimal(sale.ShippingFeesDiscount)));
                paramCol.Add(new SqlDataParameter("@Payment_due_date", DbType.DateTime, DBValue.ToDBDateTime(sale.PaymentDueDate)));
                paramCol.Add(new SqlDataParameter("@Confirmed_date", DbType.DateTime, DBValue.ToDBDateTime(sale.ConfirmedDate)));
                paramCol.Add(new SqlDataParameter("@Scheduled_delivery_date", DbType.DateTime, DBValue.ToDBDateTime(sale.ScheduledDeliveryDate)));
                paramCol.Add(new SqlDataParameter("@Scheduled_ship_date", DbType.DateTime, DBValue.ToDBDateTime(sale.ScheduledShipDate)));
                paramCol.Add(new SqlDataParameter("@Actual_ship_date", DbType.DateTime, DBValue.ToDBDateTime(sale.ActualShipDate)));
                paramCol.Add(new SqlDataParameter("@Waybill_no", DbType.String, DBValue.ToDBString(sale.WaybillNo)));
                paramCol.Add(new SqlDataParameter("@Comment", DbType.String, DBValue.ToDBString(sale.Comment)));
                paramCol.Add(new SqlDataParameter("@Coupon_sheet_assigned", DbType.Int32, DBValue.ToDBInt32(sale.CouponSheetAssigned)));
                paramCol.Add(new SqlDataParameter("@Total_amount", DbType.Double, DBValue.ToDBDouble(sale.TotalAmount)));
                paramCol.Add(new SqlDataParameter("@Invoice_date", DbType.DateTime, DBValue.ToDBDateTime(sale.InvoiceDate)));
                paramCol.Add(new SqlDataParameter("@Cancellation_date", DbType.DateTime, DBValue.ToDBDateTime(sale.CancellationDate)));
                paramCol.Add(new SqlDataParameter("@Is_ordered", DbType.Int32, DBValue.ToDBInt32(sale.IsOrdered)));
                paramCol.Add(new SqlDataParameter("@Po_received_on", DbType.DateTime, DBValue.ToDBDateTime(sale.PoReceivedOn)));
                paramCol.Add(new SqlDataParameter("@Is_delivered", DbType.Int32, DBValue.ToDBInt32(sale.IsDelivered)));
                paramCol.Add(new SqlDataParameter("@Local_sponsor_found", DbType.Int32, DBValue.ToDBInt32(sale.LocalSponsorFound)));
                paramCol.Add(new SqlDataParameter("@Box_return_date", DbType.DateTime, DBValue.ToDBDateTime(sale.BoxReturnDate)));
                paramCol.Add(new SqlDataParameter("@Reship_date", DbType.DateTime, DBValue.ToDBDateTime(sale.ReshipDate)));
                paramCol.Add(new SqlDataParameter("@Upfront_payment_required", DbType.Decimal, DBValue.ToDBDecimal(sale.UpfrontPaymentRequired)));
                paramCol.Add(new SqlDataParameter("@Upfront_payment_due_date", DbType.DateTime, DBValue.ToDBDateTime(sale.UpfrontPaymentDueDate)));
                paramCol.Add(new SqlDataParameter("@Sponsor_required", DbType.Int32, DBValue.ToDBInt32(sale.SponsorRequired)));
                paramCol.Add(new SqlDataParameter("@Actual_delivery_date", DbType.DateTime, DBValue.ToDBDateTime(sale.ActualDeliveryDate)));
                paramCol.Add(new SqlDataParameter("@Accounting_comments", DbType.String, DBValue.ToDBString(sale.AccountingComments)));
                paramCol.Add(new SqlDataParameter("@Ssn_number", DbType.String, DBValue.ToDBString(sale.SsnNumber)));
                paramCol.Add(new SqlDataParameter("@Ssn_address", DbType.String, DBValue.ToDBString(sale.SsnAddress)));
                paramCol.Add(new SqlDataParameter("@Ssn_city", DbType.String, DBValue.ToDBString(sale.SsnCity)));
                paramCol.Add(new SqlDataParameter("@Ssn_state_code", DbType.String, DBValue.ToDBString(sale.SsnStateCode)));
                paramCol.Add(new SqlDataParameter("@Ssn_country_code", DbType.String, DBValue.ToDBString(sale.SsnCountryCode)));
                paramCol.Add(new SqlDataParameter("@Ssn_zip_code", DbType.String, DBValue.ToDBString(sale.SsnZipCode)));
                paramCol.Add(new SqlDataParameter("@Is_validated", DbType.Int32, DBValue.ToDBInt32(sale.IsValidated)));
                paramCol.Add(new SqlDataParameter("@Promised_due_date", DbType.DateTime, DBValue.ToDBDateTime(sale.PromisedDueDate)));
                paramCol.Add(new SqlDataParameter("@General_flag", DbType.Int32, DBValue.ToDBInt32(sale.GeneralFlag)));
                paramCol.Add(new SqlDataParameter("@Fuelsurcharge", DbType.Int16, DBValue.ToDBInt16(sale.Fuelsurcharge)));
                paramCol.Add(new SqlDataParameter("@IsPackedByStudent", DbType.Boolean, DBValue.ToDBBoolean(sale.IsPackedByStudent)));
                paramCol.Add(new SqlDataParameter("@carrier_tracking_id", DbType.Int32, DBValue.ToDBInt32(sale.CarrierTrackingId)));
                paramCol.Add(new SqlDataParameter("@ext_order_id", DbType.Int32, DBValue.ToDBInt32(sale.ExtOrderID)));
                paramCol.Add(new SqlDataParameter("@qsp_order_id", DbType.Int32, DBValue.ToDBInt32(sale.QspOrderID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            catch (Exception ex)
            {
                throw;
            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public Sale[] GetSalesByClientId(int clientID, string client_sequence_code)
        {
            return GetSalesByClientIdAndSequenceCode(clientID, client_sequence_code, null);
        }


        public Sale[] GetSalesByClientIdAndSequenceCode(int clientID, string clientSequenceCode, SqlInterface si)
        {
            DataTable dt = null;
            string storedProcName = "efrcrm_get_sales_by_client_id_and_sequence_code";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Client_id", DbType.Int32, clientID));
                paramCol.Add(new SqlDataParameter("@Client_sequence_code", DbType.String, clientSequenceCode));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);



            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }



            Sale[] sales = null;
            if (dt != null && dt.Rows.Count > 0)
            {
                sales = new Sale[dt.Rows.Count];
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    // fill our objects
                    try
                    {
                        sales[i] = LoadSale(dt.Rows[i]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Error when loading in GetSalesByClientId ", ex);
                    }
                }
                return sales;
            }
            else
                return null;

        }



        public void InsertSalesForExistingClient(Client client, SaleCollection sales, CommentsCollection comments)
        {

            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            try
            {
                si.Open();
                si.BeginTransaction();
                foreach (Sale s in sales)
                {
                    s.ClientId = client.ClientId;
                    s.AccountingComments += " ";
                    InsertSale(s, si);

                    if (comments != null)
                    {
                        // Assign a sales id for each comment.
                        for (int i = 0; i < comments.Count; i++)
                        {
                            Comments c = (Comments)comments[i];
                            if (c.SalesID == int.MinValue)
                            {
                                c.SalesID = s.SalesId;
                                break;
                            }
                        }
                    }

                    for (int i = 0; i < s.SalesItems.Count; i++)
                    {
                        SalesItem item = (SalesItem)s.SalesItems[i];
                        item.SalesId = s.SalesId;
                        InsertSalesItem(item, si);
                    }
                }

                if (comments != null)
                {
                    foreach (Comments c in comments)
                    {
                        InsertComments(c, si);
                    }
                }

                si.Commit();
            }
            catch (Exception ex)
            {
                si.Rollback();
                throw ex;
            }
            finally
            {
                si.Close();
            }

        }

        public void InsertSalesPackByParticipants(Client client, SaleCollection sales, CommentsCollection comments)
        {

            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            try
            {
                si.Open();
                si.BeginTransaction();
                foreach (Sale s in sales)
                {
                    s.ClientId = client.ClientId;
                    s.AccountingComments += " ";
                    InsertSale(s, si);

                    if (s.SalesId == int.MinValue)
                    {
                        si.Rollback();
                        throw new EFundraisingCRMException("Failed to insert a sale into Database before inserting sale items");
                    }

                    if (comments != null)
                    {
                        // Assign a sales id for each comment.
                        for (int i = 0; i < comments.Count; i++)
                        {
                            Comments c = (Comments)comments[i];
                            if (c.SalesID == int.MinValue)
                            {
                                c.SalesID = s.SalesId;
                                break;
                            }
                        }
                    }

                    for (int i = 0; i < s.Participants.Count; i++)
                    {
                        Participant p = s.Participants[i] as Participant;
                        if (p != null)
                        {
                            if (p.ParticipantId == int.MinValue) // Insert new participants
                                InsertParticipant(p, si);

                            for (int k = 0; k < p.SalesItems.Count; k++)
                            {
                                if (p.ParticipantId != int.MinValue)
                                {
                                    SalesItem item = (SalesItem)p.SalesItems[k];
                                    item.ParticipantId = p.ParticipantId;
                                    item.SalesId = s.SalesId;
                                    // Insert sale item.
                                    InsertSalesItem(item, si);
                                }
                            }
                        }
                    }
                }

                if (comments != null)
                {
                    foreach (Comments c in comments)
                    {
                        InsertComments(c, si);
                    }
                }
                si.Commit();
            }
            catch (Exception ex)
            {
                si.Rollback();
                throw ex;
            }
            finally
            {
                si.Close();
            }

        }


        public void UpdateSalesAndInsertComments(SaleCollection sales, CommentsCollection comments)
        {
            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            try
            {
                si.Open();
                si.BeginTransaction();
                foreach (Sale s in sales)
                {
                    UpdateSale(s, si);
                }

                foreach (Comments c in comments)
                {
                    InsertComments(c, si);
                }

                si.Commit();
            }
            catch (Exception ex)
            {
                si.Rollback();
                throw ex;
            }
            finally
            {
                si.Close();
            }
        }

        public void UpdateFedexObjects(PromotionalKit[] kits, Sale[] sales, Fedex[] fedexs)
        {
            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            try
            {
                si.Open();
                si.BeginTransaction();
                if (kits != null)
                {
                    foreach (PromotionalKit k in kits)
                    {
                        UpdatePromotionalKit(k, si);
                    }
                }
                if (sales != null)
                {
                    foreach (Sale s in sales)
                    {
                        UpdateSale(s, si);
                    }
                }
                if (fedexs != null)
                {
                    foreach (Fedex f in fedexs)
                    {
                        UpdateFedex(f, si);
                    }
                }

                si.Commit();
            }
            catch (Exception ex)
            {
                si.Rollback();
                throw ex;
            }
            finally
            {
                si.Close();
            }
        }

        public void UpdatePromotionalKitsAndInsertComments(PromotionalKitCollection promotionalKits, CommentsCollection comments)
        {
            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            try
            {
                si.Open();
                si.BeginTransaction();
                foreach (PromotionalKit pk in promotionalKits)
                {
                    UpdatePromotionalKit(pk, si);
                }

                foreach (Comments c in comments)
                {
                    InsertComments(c, si);
                }

                si.Commit();
            }
            catch (Exception ex)
            {
                si.Rollback();
                throw ex;
            }
            finally
            {
                si.Close();
            }
        }

        public void InsertPaymentsAndUpdateSales(PaymentCollection payments, SaleCollection sales)
        {
            try
            {
                foreach (Payment p in payments)
                {
                    InsertPayment(p);
                }

                foreach (Sale s in sales)
                {
                    UpdateSale(s);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }
        /*
                public void InsertPaymentsAndCommentsAndUpdateSales(PaymentCollection payments, SaleCollection sales, CommentsCollection comments, int createUserID)
                {
                    try
                    {
                        foreach (Payment p in payments)
                        {
                            InsertPayment(p);
                            InsertPaymentQSP(p, createUserID);
                        }

                        foreach (Sale s in sales)
                        {
                            UpdateSale(s);
                        }

                        foreach (Comments c in comments)
                        {
                            InsertComments(c);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw ex;
                    }

                }
           */
        public void InsertPaymentAndCommentsAndUpdateSale(Payment payment, Sale sale, Comments comments, int createUserID)
        {
            try
            {
                //InsertPaymentQSP(p, createUserID);  ????
                InsertPayment(payment);
                UpdateSale(sale);
                InsertComments(comments);
            }
            catch (Exception ex)
            {
                throw;
            }

        }

        private void InsertClientAndSalesBK(Client client, ClientActivity clientActivity, ClientAddress billingAddress, ClientAddress shippingAddress, ref SaleCollection sales, CommentsCollection comments)
        {
            try
            {
                client.ExtraComment += " ";
                InsertClient(client);
                clientActivity.ClientId = client.ClientId;
                clientActivity.Comments += " ";
                InsertClientActivity(clientActivity);
                billingAddress.ClientId = client.ClientId;
                shippingAddress.ClientId = client.ClientId;
                InsertClientAddress(billingAddress);
                InsertClientAddress(shippingAddress);


                foreach (Sale s in sales)
                {
                    s.ClientId = client.ClientId;
                    s.AccountingComments += " ";
                    InsertSale(s);

                    // Assign a sales id for each comment.
                    for (int i = 0; i < comments.Count; i++)
                    {
                        Comments c = (Comments)comments[i];
                        if (c.SalesID == int.MinValue)
                        {
                            c.SalesID = s.SalesId;
                            break;
                        }
                    }


                    for (int i = 0; i < s.SalesItems.Count; i++)
                    {
                        SalesItem item = (SalesItem)s.SalesItems[i];
                        item.SalesId = s.SalesId;
                        InsertSalesItem(item);

                    }
                }

                foreach (Comments c in comments)
                {
                    InsertComments(c);
                }


            }
            catch (Exception ex)
            {
                throw ex;
            }

        }


        public void InsertClientAndSales(Client client, ClientActivity clientActivity, ClientAddress billingAddress, ClientAddress shippingAddress, ref SaleCollection sales, CommentsCollection comments)
        {
            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            try
            {
                si.Open();
                si.BeginTransaction();
                client.ExtraComment += " ";
                InsertClient(client, si);
                clientActivity.ClientId = client.ClientId;
                clientActivity.Comments += " ";
                InsertClientActivity(clientActivity, si);
                billingAddress.ClientId = client.ClientId;
                shippingAddress.ClientId = client.ClientId;
                InsertClientAddress(billingAddress, si);
                InsertClientAddress(shippingAddress, si);


                foreach (Sale s in sales)
                {
                    s.ClientId = client.ClientId;
                    s.AccountingComments += " ";
                    InsertSale(s, si);

                    // Assign a sales id for each comment.
                    for (int i = 0; i < comments.Count; i++)
                    {
                        Comments c = (Comments)comments[i];
                        if (c.SalesID == int.MinValue)
                        {
                            c.SalesID = s.SalesId;
                            break;
                        }
                    }


                    for (int i = 0; i < s.SalesItems.Count; i++)
                    {
                        SalesItem item = (SalesItem)s.SalesItems[i];
                        item.SalesId = s.SalesId;
                        InsertSalesItem(item, si);

                    }
                }

                foreach (Comments c in comments)
                {
                    InsertComments(c, si);
                }
                si.Commit();

            }
            catch (Exception ex)
            {
                si.Rollback();
                throw ex;
            }
            finally
            {
                si.Close();
            }

        }

        public void InsertClientAndSalesNoTransaction(Client client, ClientActivity clientActivity, ClientAddress billingAddress, ClientAddress shippingAddress, ref SaleCollection sales, CommentsCollection comments)
        {

            try
            {
                client.ExtraComment += " ";
                InsertClient(client);
                clientActivity.ClientId = client.ClientId;
                clientActivity.Comments += " ";
                InsertClientActivity(clientActivity);
                billingAddress.ClientId = client.ClientId;
                shippingAddress.ClientId = client.ClientId;
                InsertClientAddress(billingAddress);
                InsertClientAddress(shippingAddress);


                foreach (Sale s in sales)
                {
                    s.ClientId = client.ClientId;
                    s.AccountingComments += " ";
                    InsertSale(s);

                    // Assign a sales id for each comment.
                    for (int i = 0; i < comments.Count; i++)
                    {
                        Comments c = (Comments)comments[i];
                        if (c.SalesID == int.MinValue)
                        {
                            c.SalesID = s.SalesId;
                            break;
                        }
                    }


                    for (int i = 0; i < s.SalesItems.Count; i++)
                    {
                        SalesItem item = (SalesItem)s.SalesItems[i];
                        item.SalesId = s.SalesId;
                        InsertSalesItem(item);

                    }
                }

                foreach (Comments c in comments)
                {
                    InsertComments(c);
                }

            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        public int RecalculeTotalSaleAmount(int salesID)
        {
            return RecalculeTotalSaleAmount(salesID, null);
        }
        private int RecalculeTotalSaleAmount(int salesID, SqlInterface si)
        {

            int result = int.MinValue;
            string storedProcName = "writeTotalSalesAmount";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@nSalesId", DbType.Int32, salesID));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);



            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        public Sale[] GetUnpaidSaleByLeadID(int LeadID)
        {
            return GetUnpaidSaleByLeadID(LeadID, null);
        }


        private Sale[] GetUnpaidSaleByLeadID(int LeadID, SqlInterface si)
        {
            Sale[] sales = null;

            string storedProcName = "efrcrm_get_sale_unpaid_by_lead_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_id", DbType.Int32, DBValue.ToDBInt32(LeadID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    sales = new Sale[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            sales[i] = LoadSale(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return sales;
        }

        public SaleCollection GetSamplesByCarrierId(int carrierID)
        {
            return GetSamplesByCarrierId(carrierID, null);
        }


        private SaleCollection GetSamplesByCarrierId(int carrierID, SqlInterface si)
        {
            SaleCollection sales = null;

            string storedProcName = "efrcrm_get_samples_by_carrier_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Carrier_id", DbType.Int32, DBValue.ToDBInt32(carrierID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    sales = new SaleCollection();

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            sales.Add(LoadSale(dt.Rows[i]));
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return sales;
        }

        /*		public SaleCollection GetSalesByCarrierIdAndProductClassId(int carrierID, int productClassId) 
                {
                    return GetSalesByCarrierIdAndProductClassId(carrierID, productClassId, null);
                }*/


        public SaleCollection GetSalesNewWFC()
        {
            return GetSalesNewWFC(null);
        }

        private SaleCollection GetSalesNewWFC(SqlInterface si)
        {
            SaleCollection sales = null;

            string storedProcName = "efrcrm_get_sales_new_wfc";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    sales = new SaleCollection();

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            sales.Add(LoadSale(dt.Rows[i]));
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return sales;
        }

        public SaleCollection GetSalesByProductClassAndStatusID(int productClassID, int statusID)
        {
            return GetSalesByProductClassAndStatusID(productClassID, statusID, null);
        }


        private SaleCollection GetSalesByProductClassAndStatusID(int productClassID, int statusID, SqlInterface si)
        {
            SaleCollection sales = null;

            string storedProcName = "efrcrm_get_sales_by_status_id_and_product_class";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sale_status_id", DbType.Int32, DBValue.ToDBInt32(statusID)));
                paramCol.Add(new SqlDataParameter("@Product_Class_id", DbType.Int32, DBValue.ToDBInt32(productClassID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    sales = new SaleCollection();

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            sales.Add(LoadSale(dt.Rows[i]));
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return sales;
        }

        public SaleCollection GetSalesByCarrierIdAndProductClassId(int carrierID, int productClassId)
        {
            return GetSalesByCarrierIdAndProductClassId(carrierID, productClassId, null);
        }

        private SaleCollection GetSalesByCarrierIdAndProductClassId(int carrierID, int productClassId, SqlInterface si)
        {
            SaleCollection sales = null;

            string storedProcName = "efrcrm_get_sales_by_carrier_id_and_product_class_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Carrier_id", DbType.Int32, DBValue.ToDBInt32(carrierID)));
                paramCol.Add(new SqlDataParameter("@Product_class_id", DbType.Int32, DBValue.ToDBInt32(productClassId)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    sales = new SaleCollection();

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            sales.Add(LoadSale(dt.Rows[i]));
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return sales;
        }

        public Sale GetLatestSaleByLeadID(int LeadID)
        {
            return GetLatestSaleByLeadID(LeadID, null);
        }


        private Sale GetLatestSaleByLeadID(int LeadID, SqlInterface si)
        {
            Sale sale = null;

            string storedProcName = "efrcrm_get_sale_latest_by_lead_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_id", DbType.Int32, DBValue.ToDBInt32(LeadID)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        sale = LoadSale(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return sale;
        }


        private Sale LoadSale(DataRow row)
        {
            Sale sale = new Sale();

            // Store database values into our business object
            sale.SalesId = DBValue.ToInt32(row["sales_id"]);
            sale.ConsultantId = DBValue.ToInt32(row["consultant_id"]);
            sale.CarrierId = DBValue.ToInt16(row["carrier_id"]);
            sale.ShippingOptionId = DBValue.ToInt16(row["shipping_option_id"]);
            sale.PaymentTermId = DBValue.ToInt16(row["payment_term_id"]);
            sale.ClientSequenceCode = DBValue.ToString(row["client_sequence_code"]);
            sale.ClientId = DBValue.ToInt32(row["client_id"]);
            sale.SalesStatusId = DBValue.ToInt32(row["sales_status_id"]);
            sale.PaymentMethodId = DBValue.ToInt16(row["payment_method_id"]);
            sale.PoStatusId = DBValue.ToInt16(row["po_status_id"]);
            sale.ProductionStatusId = DBValue.ToInt32(row["production_status_id"]);
            sale.SponsorConsultantId = DBValue.ToInt32(row["sponsor_consultant_id"]);
            sale.ArConsultantId = DBValue.ToInt32(row["ar_consultant_id"]);
            sale.ArStatusId = DBValue.ToInt32(row["ar_status_id"]);
            sale.LeadId = DBValue.ToInt32(row["lead_id"]);
            sale.BillingCompanyId = DBValue.ToInt32(row["billing_company_id"]);
            sale.UpfrontPaymentMethodId = DBValue.ToInt16(row["upfront_payment_method_id"]);
            sale.ConfirmerId = DBValue.ToInt32(row["confirmer_id"]);
            sale.CollectionStatusId = DBValue.ToInt32(row["collection_status_id"]);
            sale.ConfirmationMethodId = DBValue.ToInt32(row["confirmation_method_id"]);
            sale.CreditApprovalMethodId = DBValue.ToInt32(row["credit_approval_method_id"]);
            sale.PoNumber = DBValue.ToString(row["po_number"]);
            sale.CreditCardNo = DBValue.ToString(row["credit_card_no"]);

            /*    byte[] Data = null;
                if (row["credit_card_no"] != System.DBNull.Value)
                {
                    Data = (byte[])row["credit_card_no"];
                    sale.CreditCardNo = BitConverter.ToString(Data);
                    sale.CreditCardNo = Convert.ToBase64String(Data);

                    Data = (byte[])sale.CreditCardNo;
                 
                }else{
                    sale.CreditCardNo = "";
                }*/
            //sale.CreditCardNo = BitConverter.ToString(Data);
            //sale.CreditCardNo = Convert.ToBase64String(Data);


            sale.ExpiryDate = DBValue.ToString(row["expiry_date"]);
            sale.SalesDate = DBValue.ToDateTime(row["sales_date"]);
            sale.ShippingFees = DBValue.ToDecimal(row["shipping_fees"]);
            sale.ShippingFeesDiscount = DBValue.ToDecimal(row["shipping_fees_discount"]);
            sale.PaymentDueDate = DBValue.ToDateTime(row["payment_due_date"]);
            sale.ConfirmedDate = DBValue.ToDateTime(row["confirmed_date"]);
            sale.ScheduledDeliveryDate = DBValue.ToDateTime(row["scheduled_delivery_date"]);
            sale.ScheduledShipDate = DBValue.ToDateTime(row["scheduled_ship_date"]);
            sale.ActualShipDate = DBValue.ToDateTime(row["actual_ship_date"]);
            sale.WaybillNo = DBValue.ToString(row["waybill_no"]);
            sale.Comment = DBValue.ToString(row["comment"]);
            sale.CouponSheetAssigned = DBValue.ToInt32(row["coupon_sheet_assigned"]);
            //sale.TotalAmount = DBValue.ToDecimal(row["total_amount"]);
            if (row["total_amount"] == null || row["total_amount"] == DBNull.Value)
            {
                sale.TotalAmount = 0;
            }
            else
            {
                sale.TotalAmount = DBValue.ToDouble(row["total_amount"]);
            }

            sale.InvoiceDate = DBValue.ToDateTime(row["invoice_date"]);
            sale.CancellationDate = DBValue.ToDateTime(row["cancellation_date"]);
            sale.IsOrdered = DBValue.ToInt32(row["is_ordered"]);
            sale.PoReceivedOn = DBValue.ToDateTime(row["po_received_on"]);
            sale.IsDelivered = DBValue.ToInt32(row["is_delivered"]);
            sale.LocalSponsorFound = DBValue.ToInt32(row["local_sponsor_found"]);
            sale.BoxReturnDate = DBValue.ToDateTime(row["box_return_date"]);
            sale.ReshipDate = DBValue.ToDateTime(row["reship_date"]);
            sale.UpfrontPaymentRequired = DBValue.ToInt16(row["upfront_payment_required"]);
            sale.UpfrontPaymentDueDate = DBValue.ToDateTime(row["upfront_payment_due_date"]);
            sale.SponsorRequired = DBValue.ToInt32(row["sponsor_required"]);
            sale.ActualDeliveryDate = DBValue.ToDateTime(row["actual_delivery_date"]);
            sale.AccountingComments = DBValue.ToString(row["accounting_comments"]);
            sale.SsnNumber = DBValue.ToString(row["ssn_number"]);
            sale.SsnAddress = DBValue.ToString(row["ssn_address"]);
            sale.SsnCity = DBValue.ToString(row["ssn_city"]);
            sale.SsnStateCode = DBValue.ToString(row["ssn_state_code"]);
            sale.SsnCountryCode = DBValue.ToString(row["ssn_country_code"]);
            sale.SsnZipCode = DBValue.ToString(row["ssn_zip_code"]);
            sale.IsValidated = DBValue.ToInt32(row["is_validated"]);
            sale.PromisedDueDate = DBValue.ToDateTime(row["promised_due_date"]);
            sale.GeneralFlag = DBValue.ToInt32(row["general_flag"]);
            sale.Fuelsurcharge = DBValue.ToInt16(row["fuelsurcharge"]);

            if (row.Table.Columns.Contains("package_description"))
                sale.PackageDescription = DBValue.ToString(row["package_description"]);

            if (row.Table.Columns.Contains("is_packed_by_participant"))
                sale.IsPackedByStudent = DBValue.ToBoolean(row["is_packed_by_participant"]);

            sale.CarrierTrackingId = DBValue.ToInt32(row["carrier_tracking_id"]);
            sale.ExtOrderID = DBValue.ToInt32(row["ext_order_id"]);
            sale.QspOrderID = DBValue.ToInt32(row["qsp_order_id"]);

            // return the filled object
            return sale;
        }


        public int UpdateSaleAddress(Sale s, PostalAddress saleAddress)
        {
            return UpdateSaleAddress(s, saleAddress, null);
        }

        internal int UpdateSaleAddress(Sale s, PostalAddress saleAddress, SqlInterface si)
        {
            int result = int.MinValue;
            string storedProcName = "efrcrm_create_sale_address";
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_id", DbType.Int32, DBValue.ToDBInt32(s.SalesId)));
                paramCol.Add(new SqlDataParameter("@Postal_address_id", DbType.Int32, ParameterDirection.InputOutput, DBValue.ToDBInt32(saleAddress.PostalAddressId)));
                paramCol.Add(new SqlDataParameter("@Address", DbType.String, DBValue.ToDBString(saleAddress.Address)));
                paramCol.Add(new SqlDataParameter("@City", DbType.String, DBValue.ToDBString(saleAddress.City)));
                paramCol.Add(new SqlDataParameter("@Zip_code", DbType.String, DBValue.ToDBString(saleAddress.ZipCode)));
                paramCol.Add(new SqlDataParameter("@Country_code", DbType.String, DBValue.ToDBString(saleAddress.CountryCode)));
                paramCol.Add(new SqlDataParameter("@Subdivision_code", DbType.String, DBValue.ToDBString(saleAddress.SubdivisionCode)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(saleAddress.CreateDate)));
                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error UpdateSaleAddress calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
        }



        #endregion

        #region Sale Postal Address

        private int InsertSalePostalAddress(SalePostalAddress salePostalAddress, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efr_insert_sale_postal_address";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                // @Sales_id int , @Postal_address_id int, @Create_date
                paramCol.Add(new SqlDataParameter("@Sales_id", DbType.Int32, DBValue.ToDBInt32(salePostalAddress.SalesId)));
                paramCol.Add(new SqlDataParameter("@Postal_address_id", DbType.Int32, DBValue.ToDBInt32(salePostalAddress.PostalAddressId)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.Date, DBValue.ToDBDateTime(salePostalAddress.CreateDate)));




                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result <= 0)
                {
                    throw new SqlDataException("Error InsertSalePostalAddress into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        public int InsertSalePostalAddress(SalePostalAddress salePostalAddress)
        {
            return InsertSalePostalAddress(salePostalAddress, null);
        }

        private SalePostalAddress LoadSalePostalAddress(DataRow row)
        {
            SalePostalAddress sPostalAddress = new SalePostalAddress();

            // Store database values into our business object
            sPostalAddress.SalesId = DBValue.ToInt32(row["sales_id"]);
            sPostalAddress.PostalAddressId = DBValue.ToInt32(row["postal_address_id"]);
            sPostalAddress.CreateDate = DBValue.ToDateTime(row["create_date"]);
            sPostalAddress.Active = DBValue.ToBoolean(row["active"]);

            // return the filled object
            return sPostalAddress;
        }

        private SalePostalAddress[] GetSalePostalAddressBySaleId(int sId, SqlInterface si)
        {

            SalePostalAddress[] salePstAddress = null;

            string storedProcName = "efrcrm_get_sale_postal_address_by_sales_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_id", DbType.Int32, DBValue.ToDBInt32(sId)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    salePstAddress = new SalePostalAddress[dt.Rows.Count];
                    try
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            // fill our objects
                            salePstAddress[i] = LoadSalePostalAddress(dt.Rows[0]);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return salePstAddress;
        }

        public SalePostalAddress[] GetSalePostalAddressBySaleId(int sId)
        {
            return GetSalePostalAddressBySaleId(sId, null);
        }

        public SalePostalAddress GetActiveSalePostalAddressBySaleId(int sId)
        {
            SalePostalAddress[] salePostalAddress = GetSalePostalAddressBySaleId(sId, null);
            for (int i = 0; i < salePostalAddress.Length; i++)
            {
                if (salePostalAddress[i].Active)
                    return salePostalAddress[i];
            }
            return null;
        }

        private ClientPostalAddress[] GetClientPostalAddressByClientId(int ClId, SqlInterface si)
        {

            ClientPostalAddress[] clientPstAddress = null;

            string storedProcName = "efrcrm_get_client_postal_address_by_client_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Client_id", DbType.Int32, DBValue.ToDBInt32(ClId)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    clientPstAddress = new ClientPostalAddress[dt.Rows.Count];
                    try
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            // fill our objects
                            clientPstAddress[i] = LoadClientPostalAddress(dt.Rows[0]);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return clientPstAddress;
        }




        public ClientPostalAddress[] GetClientPostalAddressByClientId(int ClId)
        {
            return GetClientPostalAddressByClientId(ClId, null);
        }

        public ClientPostalAddress GetActiveClientPostalAddressByClientId(int ClId)
        {
            ClientPostalAddress[] ClPostalAddress = GetClientPostalAddressByClientId(ClId, null);
            for (int i = 0; i < ClPostalAddress.Length; i++)
            {
                if (ClPostalAddress[i].Active)
                    return ClPostalAddress[i];
            }
            return null;
        }

        private int InsertClientPostalAddress(ClientPostalAddress clientPostalAddress, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efr_insert_client_postal_address";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                // @Client_id int, @Client_Sequence_Code varchar(2), @Postal_address_id int, @Create_date datetime, @Client_Address_Type
                paramCol.Add(new SqlDataParameter("@Client_id", DbType.Int32, DBValue.ToDBInt32(clientPostalAddress.ClientId)));
                paramCol.Add(new SqlDataParameter("@Client_Sequence_Code", DbType.String, DBValue.ToDBString(clientPostalAddress.ClientSequenceCode)));
                paramCol.Add(new SqlDataParameter("@Postal_address_id", DbType.Int32, DBValue.ToDBInt32(clientPostalAddress.PostalAddressId)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(clientPostalAddress.CreateDate)));
                paramCol.Add(new SqlDataParameter("@Client_Address_Type", DbType.String, DBValue.ToDBString(clientPostalAddress.ClientAddressType)));




                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result <= 0)
                {
                    throw new SqlDataException("Error InsertSalePostalAddress into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int InsertClientPostalAddress(ClientPostalAddress clientPostalAddress)
        {
            return InsertClientPostalAddress(clientPostalAddress, null);
        }

        #endregion

        #region SaleCarrierShippingStatus Methods

        private SaleCarrierShippingStatus LoadSaleCarrierShippingStatus(DataRow row)
        {
            SaleCarrierShippingStatus saleCarrierShippingStatus = new SaleCarrierShippingStatus();

            // Store database values into our business object
            saleCarrierShippingStatus.CarrierShippingStatusId = DBValue.ToInt16(row["carrier_shipping_status_id"]);
            saleCarrierShippingStatus.SalesId = DBValue.ToInt32(row["sales_id"]);
            saleCarrierShippingStatus.StatusEntryDate = DBValue.ToDateTime(row["status_entry_date"]);

            // return the filled object
            return saleCarrierShippingStatus;
        }

        public SaleCarrierShippingStatus[] GetSaleCarrierShippingStatuss()
        {
            return GetSaleCarrierShippingStatuss(null);
        }

        private SaleCarrierShippingStatus[] GetSaleCarrierShippingStatuss(SqlInterface si)
        {
            SaleCarrierShippingStatus[] saleCarrierShippingStatuss = null;

            string storedProcName = "efrcrm_get_sale_carrier_shipping_statuss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    saleCarrierShippingStatuss = new SaleCarrierShippingStatus[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            saleCarrierShippingStatuss[i] = LoadSaleCarrierShippingStatus(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return saleCarrierShippingStatuss;
        }



        #endregion

        #region SaleToAdd Methods

        private SaleToAdd LoadSaleToAdd(DataRow row)
        {
            SaleToAdd saleToAdd = new SaleToAdd();

            // Store database values into our business object
            saleToAdd.SaleToAddId = DBValue.ToInt32(row["sale_to_add_id"]);
            saleToAdd.ConsultantId = DBValue.ToInt32(row["consultant_id"]);
            saleToAdd.PaymentMethodId = DBValue.ToInt16(row["payment_method_id"]);
            saleToAdd.PoStatusId = DBValue.ToInt16(row["po_status_id"]);
            saleToAdd.SalesStatusId = DBValue.ToInt32(row["sales_status_id"]);
            saleToAdd.LeadId = DBValue.ToInt32(row["lead_id"]);
            saleToAdd.PaymentTermId = DBValue.ToInt16(row["payment_term_id"]);
            saleToAdd.CarrierId = DBValue.ToInt16(row["carrier_id"]);
            saleToAdd.ShippingOptionId = DBValue.ToInt16(row["shipping_option_id"]);
            saleToAdd.UpfrontPaymentMethodId = DBValue.ToInt16(row["upfront_payment_method_id"]);
            saleToAdd.PoNumber = DBValue.ToString(row["po_number"]);
            saleToAdd.CreditCardNo = DBValue.ToString(row["credit_card_no"]);
            saleToAdd.ExpiryDate = DBValue.ToString(row["expiry_date"]);
            saleToAdd.SalesDate = DBValue.ToDateTime(row["sales_date"]);
            saleToAdd.ShippingFees = DBValue.ToInt16(row["shipping_fees"]);
            saleToAdd.ShippingFeesDiscount = DBValue.ToInt16(row["shipping_fees_discount"]);
            saleToAdd.PaymentDueDate = DBValue.ToDateTime(row["payment_due_date"]);
            saleToAdd.ScheduledDeliveryDate = DBValue.ToDateTime(row["scheduled_delivery_date"]);
            saleToAdd.Comment = DBValue.ToString(row["comment"]);
            saleToAdd.TotalAmount = DBValue.ToInt16(row["total_amount"]);
            saleToAdd.ConfirmedDate = DBValue.ToDateTime(row["confirmed_date"]);
            saleToAdd.UpfrontPaymentRequired = DBValue.ToInt16(row["upfront_payment_required"]);
            saleToAdd.UpfrontPaymentDueDate = DBValue.ToDateTime(row["upfront_payment_due_date"]);
            saleToAdd.IsNew = DBValue.ToInt32(row["is_new"]);
            saleToAdd.SponsorRequired = DBValue.ToInt32(row["sponsor_required"]);
            saleToAdd.SsnNumber = DBValue.ToString(row["ssn_number"]);
            saleToAdd.SsnAddress = DBValue.ToString(row["ssn_address"]);
            saleToAdd.SsnCity = DBValue.ToString(row["ssn_city"]);
            saleToAdd.SsnStateCode = DBValue.ToString(row["ssn_state_code"]);
            saleToAdd.SsnCountryCode = DBValue.ToString(row["ssn_country_code"]);
            saleToAdd.SsnZipCode = DBValue.ToString(row["ssn_zip_code"]);

            // return the filled object
            return saleToAdd;
        }

        public SaleToAdd[] GetSaleToAdds()
        {
            return GetSaleToAdds(null);
        }

        private SaleToAdd[] GetSaleToAdds(SqlInterface si)
        {
            SaleToAdd[] saleToAdds = null;

            string storedProcName = "efrcrm_get_sale_to_adds";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    saleToAdds = new SaleToAdd[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            saleToAdds[i] = LoadSaleToAdd(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return saleToAdds;
        }


        public SaleToAdd GetSaleToAddByID(int id)
        {
            return GetSaleToAddByID(id, null);
        }

        private SaleToAdd GetSaleToAddByID(int id, SqlInterface si)
        {
            SaleToAdd saleToAdd = null;

            string storedProcName = "efrcrm_get_sale_to_add_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sale_to_add_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        saleToAdd = LoadSaleToAdd(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return saleToAdd;
        }


        public int InsertSaleToAdd(SaleToAdd saleToAdd)
        {
            return InsertSaleToAdd(saleToAdd, null);
        }

        private int InsertSaleToAdd(SaleToAdd saleToAdd, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_sale_to_add";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sale_to_add_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Consultant_id", DbType.Int32, DBValue.ToDBInt32(saleToAdd.ConsultantId)));
                paramCol.Add(new SqlDataParameter("@Payment_method_id", DbType.Int16, DBValue.ToDBInt16(saleToAdd.PaymentMethodId)));
                paramCol.Add(new SqlDataParameter("@Po_status_id", DbType.Int16, DBValue.ToDBInt16(saleToAdd.PoStatusId)));
                paramCol.Add(new SqlDataParameter("@Sales_status_id", DbType.Int32, DBValue.ToDBInt32(saleToAdd.SalesStatusId)));
                paramCol.Add(new SqlDataParameter("@Lead_id", DbType.Int32, DBValue.ToDBInt32(saleToAdd.LeadId)));
                paramCol.Add(new SqlDataParameter("@Payment_term_id", DbType.Int16, DBValue.ToDBInt16(saleToAdd.PaymentTermId)));
                paramCol.Add(new SqlDataParameter("@Carrier_id", DbType.Int16, DBValue.ToDBInt16(saleToAdd.CarrierId)));
                paramCol.Add(new SqlDataParameter("@Shipping_option_id", DbType.Int16, DBValue.ToDBInt16(saleToAdd.ShippingOptionId)));
                paramCol.Add(new SqlDataParameter("@Upfront_payment_method_id", DbType.Int16, DBValue.ToDBInt16(saleToAdd.UpfrontPaymentMethodId)));
                paramCol.Add(new SqlDataParameter("@Po_number", DbType.String, DBValue.ToDBString(saleToAdd.PoNumber)));
                paramCol.Add(new SqlDataParameter("@Credit_card_no", DbType.String, DBValue.ToDBString(saleToAdd.CreditCardNo)));
                paramCol.Add(new SqlDataParameter("@Expiry_date", DbType.String, DBValue.ToDBString(saleToAdd.ExpiryDate)));
                paramCol.Add(new SqlDataParameter("@Sales_date", DbType.DateTime, DBValue.ToDBDateTime(saleToAdd.SalesDate)));
                paramCol.Add(new SqlDataParameter("@Shipping_fees", DbType.Double, DBValue.ToDBFloat(saleToAdd.ShippingFees)));
                paramCol.Add(new SqlDataParameter("@Shipping_fees_discount", DbType.Double, DBValue.ToDBFloat(saleToAdd.ShippingFeesDiscount)));
                paramCol.Add(new SqlDataParameter("@Payment_due_date", DbType.DateTime, DBValue.ToDBDateTime(saleToAdd.PaymentDueDate)));
                paramCol.Add(new SqlDataParameter("@Scheduled_delivery_date", DbType.DateTime, DBValue.ToDBDateTime(saleToAdd.ScheduledDeliveryDate)));
                paramCol.Add(new SqlDataParameter("@Comment", DbType.String, DBValue.ToDBString(saleToAdd.Comment)));
                paramCol.Add(new SqlDataParameter("@Total_amount", DbType.Double, DBValue.ToDBFloat(saleToAdd.TotalAmount)));
                paramCol.Add(new SqlDataParameter("@Confirmed_date", DbType.DateTime, DBValue.ToDBDateTime(saleToAdd.ConfirmedDate)));
                paramCol.Add(new SqlDataParameter("@Upfront_payment_required", DbType.Double, DBValue.ToDBFloat(saleToAdd.UpfrontPaymentRequired)));
                paramCol.Add(new SqlDataParameter("@Upfront_payment_due_date", DbType.DateTime, DBValue.ToDBDateTime(saleToAdd.UpfrontPaymentDueDate)));
                paramCol.Add(new SqlDataParameter("@Is_new", DbType.Int32, DBValue.ToDBInt32(saleToAdd.IsNew)));
                paramCol.Add(new SqlDataParameter("@Sponsor_required", DbType.Int32, DBValue.ToDBInt32(saleToAdd.SponsorRequired)));
                paramCol.Add(new SqlDataParameter("@Ssn_number", DbType.String, DBValue.ToDBString(saleToAdd.SsnNumber)));
                paramCol.Add(new SqlDataParameter("@Ssn_address", DbType.String, DBValue.ToDBString(saleToAdd.SsnAddress)));
                paramCol.Add(new SqlDataParameter("@Ssn_city", DbType.String, DBValue.ToDBString(saleToAdd.SsnCity)));
                paramCol.Add(new SqlDataParameter("@Ssn_state_code", DbType.String, DBValue.ToDBString(saleToAdd.SsnStateCode)));
                paramCol.Add(new SqlDataParameter("@Ssn_country_code", DbType.String, DBValue.ToDBString(saleToAdd.SsnCountryCode)));
                paramCol.Add(new SqlDataParameter("@Ssn_zip_code", DbType.String, DBValue.ToDBString(saleToAdd.SsnZipCode)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    saleToAdd.SaleToAddId = DBValue.ToInt32(paramCol["@Sale_to_add_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateSaleToAdd(SaleToAdd saleToAdd)
        {
            return UpdateSaleToAdd(saleToAdd, null);
        }

        private int UpdateSaleToAdd(SaleToAdd saleToAdd, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_sale_to_add";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sale_to_add_id", DbType.Int32, DBValue.ToDBInt32(saleToAdd.SaleToAddId)));
                paramCol.Add(new SqlDataParameter("@Consultant_id", DbType.Int32, DBValue.ToDBInt32(saleToAdd.ConsultantId)));
                paramCol.Add(new SqlDataParameter("@Payment_method_id", DbType.Int16, DBValue.ToDBInt16(saleToAdd.PaymentMethodId)));
                paramCol.Add(new SqlDataParameter("@Po_status_id", DbType.Int16, DBValue.ToDBInt16(saleToAdd.PoStatusId)));
                paramCol.Add(new SqlDataParameter("@Sales_status_id", DbType.Int32, DBValue.ToDBInt32(saleToAdd.SalesStatusId)));
                paramCol.Add(new SqlDataParameter("@Lead_id", DbType.Int32, DBValue.ToDBInt32(saleToAdd.LeadId)));
                paramCol.Add(new SqlDataParameter("@Payment_term_id", DbType.Int16, DBValue.ToDBInt16(saleToAdd.PaymentTermId)));
                paramCol.Add(new SqlDataParameter("@Carrier_id", DbType.Int16, DBValue.ToDBInt16(saleToAdd.CarrierId)));
                paramCol.Add(new SqlDataParameter("@Shipping_option_id", DbType.Int16, DBValue.ToDBInt16(saleToAdd.ShippingOptionId)));
                paramCol.Add(new SqlDataParameter("@Upfront_payment_method_id", DbType.Int16, DBValue.ToDBInt16(saleToAdd.UpfrontPaymentMethodId)));
                paramCol.Add(new SqlDataParameter("@Po_number", DbType.String, DBValue.ToDBString(saleToAdd.PoNumber)));
                paramCol.Add(new SqlDataParameter("@Credit_card_no", DbType.String, DBValue.ToDBString(saleToAdd.CreditCardNo)));
                paramCol.Add(new SqlDataParameter("@Expiry_date", DbType.String, DBValue.ToDBString(saleToAdd.ExpiryDate)));
                paramCol.Add(new SqlDataParameter("@Sales_date", DbType.DateTime, DBValue.ToDBDateTime(saleToAdd.SalesDate)));
                paramCol.Add(new SqlDataParameter("@Shipping_fees", DbType.Double, DBValue.ToDBFloat(saleToAdd.ShippingFees)));
                paramCol.Add(new SqlDataParameter("@Shipping_fees_discount", DbType.Double, DBValue.ToDBFloat(saleToAdd.ShippingFeesDiscount)));
                paramCol.Add(new SqlDataParameter("@Payment_due_date", DbType.DateTime, DBValue.ToDBDateTime(saleToAdd.PaymentDueDate)));
                paramCol.Add(new SqlDataParameter("@Scheduled_delivery_date", DbType.DateTime, DBValue.ToDBDateTime(saleToAdd.ScheduledDeliveryDate)));
                paramCol.Add(new SqlDataParameter("@Comment", DbType.String, DBValue.ToDBString(saleToAdd.Comment)));
                paramCol.Add(new SqlDataParameter("@Total_amount", DbType.Double, DBValue.ToDBFloat(saleToAdd.TotalAmount)));
                paramCol.Add(new SqlDataParameter("@Confirmed_date", DbType.DateTime, DBValue.ToDBDateTime(saleToAdd.ConfirmedDate)));
                paramCol.Add(new SqlDataParameter("@Upfront_payment_required", DbType.Double, DBValue.ToDBFloat(saleToAdd.UpfrontPaymentRequired)));
                paramCol.Add(new SqlDataParameter("@Upfront_payment_due_date", DbType.DateTime, DBValue.ToDBDateTime(saleToAdd.UpfrontPaymentDueDate)));
                paramCol.Add(new SqlDataParameter("@Is_new", DbType.Int32, DBValue.ToDBInt32(saleToAdd.IsNew)));
                paramCol.Add(new SqlDataParameter("@Sponsor_required", DbType.Int32, DBValue.ToDBInt32(saleToAdd.SponsorRequired)));
                paramCol.Add(new SqlDataParameter("@Ssn_number", DbType.String, DBValue.ToDBString(saleToAdd.SsnNumber)));
                paramCol.Add(new SqlDataParameter("@Ssn_address", DbType.String, DBValue.ToDBString(saleToAdd.SsnAddress)));
                paramCol.Add(new SqlDataParameter("@Ssn_city", DbType.String, DBValue.ToDBString(saleToAdd.SsnCity)));
                paramCol.Add(new SqlDataParameter("@Ssn_state_code", DbType.String, DBValue.ToDBString(saleToAdd.SsnStateCode)));
                paramCol.Add(new SqlDataParameter("@Ssn_country_code", DbType.String, DBValue.ToDBString(saleToAdd.SsnCountryCode)));
                paramCol.Add(new SqlDataParameter("@Ssn_zip_code", DbType.String, DBValue.ToDBString(saleToAdd.SsnZipCode)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region SaleToLocalSponsor Methods

        private SaleToLocalSponsor LoadSaleToLocalSponsor(DataRow row)
        {
            SaleToLocalSponsor saleToLocalSponsor = new SaleToLocalSponsor();

            // Store database values into our business object
            saleToLocalSponsor.SalesID = DBValue.ToInt32(row["sales_id"]);
            saleToLocalSponsor.BrandID = DBValue.ToInt32(row["brand_id"]);
            saleToLocalSponsor.LocalSponsorID = DBValue.ToInt32(row["local_sponsor_id"]);
            saleToLocalSponsor.AssignedDate = DBValue.ToDateTime(row["assigned_date"]);
            saleToLocalSponsor.Comments = DBValue.ToString(row["comments"]);

            // return the filled object
            return saleToLocalSponsor;
        }

        public SaleToLocalSponsor[] GetSaleToLocalSponsors()
        {
            return GetSaleToLocalSponsors(null);
        }

        private SaleToLocalSponsor[] GetSaleToLocalSponsors(SqlInterface si)
        {
            SaleToLocalSponsor[] saleToLocalSponsors = null;

            string storedProcName = "efrcrm_get_sale_to_local_sponsors";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    saleToLocalSponsors = new SaleToLocalSponsor[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            saleToLocalSponsors[i] = LoadSaleToLocalSponsor(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return saleToLocalSponsors;
        }


        public SaleToLocalSponsor GetSaleToLocalSponsorByID(int id)
        {
            return GetSaleToLocalSponsorByID(id, null);
        }

        private SaleToLocalSponsor GetSaleToLocalSponsorByID(int id, SqlInterface si)
        {
            SaleToLocalSponsor saleToLocalSponsor = null;

            string storedProcName = "efrcrm_get_sale_to_local_sponsor_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        saleToLocalSponsor = LoadSaleToLocalSponsor(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return saleToLocalSponsor;
        }


        public int InsertSaleToLocalSponsor(SaleToLocalSponsor saleToLocalSponsor)
        {
            return InsertSaleToLocalSponsor(saleToLocalSponsor, null);
        }

        private int InsertSaleToLocalSponsor(SaleToLocalSponsor saleToLocalSponsor, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_sale_to_local_sponsor";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Brand_ID", DbType.Int32, DBValue.ToDBInt32(saleToLocalSponsor.BrandID)));
                paramCol.Add(new SqlDataParameter("@Local_Sponsor_ID", DbType.Int32, DBValue.ToDBInt32(saleToLocalSponsor.LocalSponsorID)));
                paramCol.Add(new SqlDataParameter("@Assigned_Date", DbType.DateTime, DBValue.ToDBDateTime(saleToLocalSponsor.AssignedDate)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(saleToLocalSponsor.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    saleToLocalSponsor.SalesID = DBValue.ToInt32(paramCol["@Sales_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateSaleToLocalSponsor(SaleToLocalSponsor saleToLocalSponsor)
        {
            return UpdateSaleToLocalSponsor(saleToLocalSponsor, null);
        }

        private int UpdateSaleToLocalSponsor(SaleToLocalSponsor saleToLocalSponsor, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_sale_to_local_sponsor";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(saleToLocalSponsor.SalesID)));
                paramCol.Add(new SqlDataParameter("@Brand_ID", DbType.Int32, DBValue.ToDBInt32(saleToLocalSponsor.BrandID)));
                paramCol.Add(new SqlDataParameter("@Local_Sponsor_ID", DbType.Int32, DBValue.ToDBInt32(saleToLocalSponsor.LocalSponsorID)));
                paramCol.Add(new SqlDataParameter("@Assigned_Date", DbType.DateTime, DBValue.ToDBDateTime(saleToLocalSponsor.AssignedDate)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(saleToLocalSponsor.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region SaleZipCode Methods

        private SaleZipCode LoadSaleZipCode(DataRow row)
        {
            SaleZipCode saleZipCode = new SaleZipCode();

            // Store database values into our business object
            saleZipCode.ZipCode = DBValue.ToString(row["zip_code"]);
            saleZipCode.SalesID = DBValue.ToInt32(row["sales_id"]);

            // return the filled object
            return saleZipCode;
        }

        public SaleZipCode[] GetSaleZipCodes()
        {
            return GetSaleZipCodes(null);
        }

        private SaleZipCode[] GetSaleZipCodes(SqlInterface si)
        {
            SaleZipCode[] saleZipCodes = null;

            string storedProcName = "efrcrm_get_sale_zip_codes";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    saleZipCodes = new SaleZipCode[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            saleZipCodes[i] = LoadSaleZipCode(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return saleZipCodes;
        }



        #endregion

        #region SalesChangeLog Methods

        private SalesChangeLog LoadSalesChangeLog(DataRow row)
        {
            SalesChangeLog salesChangeLog = new SalesChangeLog();

            // Store database values into our business object
            salesChangeLog.SalesID = DBValue.ToInt32(row["sales_id"]);
            salesChangeLog.TableName = DBValue.ToString(row["table_name"]);
            salesChangeLog.ColumnName = DBValue.ToString(row["column_name"]);
            salesChangeLog.ChangeDateTime = DBValue.ToDateTime(row["change_date_time"]);
            salesChangeLog.UserName = DBValue.ToString(row["user_name"]);
            salesChangeLog.FromValue = DBValue.ToString(row["from_value"]);
            salesChangeLog.ToValue = DBValue.ToString(row["to_value"]);
            salesChangeLog.Comment = DBValue.ToString(row["comment"]);
            salesChangeLog.ComputerName = DBValue.ToString(row["computer_name"]);
            salesChangeLog.CancelationReasonId = DBValue.ToInt32(row["cancelation_reason_id"]);
            salesChangeLog.OtherReason = DBValue.ToString(row["other_reason"]);

            // return the filled object
            return salesChangeLog;
        }

        public SalesChangeLog[] GetSalesChangeLogs()
        {
            return GetSalesChangeLogs(null);
        }

        private SalesChangeLog[] GetSalesChangeLogs(SqlInterface si)
        {
            SalesChangeLog[] salesChangeLogs = null;

            string storedProcName = "efrcrm_get_sales_change_logs";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    salesChangeLogs = new SalesChangeLog[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            salesChangeLogs[i] = LoadSalesChangeLog(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return salesChangeLogs;
        }


        public SalesChangeLog GetSalesChangeLogByID(int id)
        {
            return GetSalesChangeLogByID(id, null);
        }

        private SalesChangeLog GetSalesChangeLogByID(int id, SqlInterface si)
        {
            SalesChangeLog salesChangeLog = null;

            string storedProcName = "efrcrm_get_sales_change_log_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        salesChangeLog = LoadSalesChangeLog(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return salesChangeLog;
        }


        public int InsertSalesChangeLog(SalesChangeLog salesChangeLog)
        {
            return InsertSalesChangeLog(salesChangeLog, null);
        }

        private int InsertSalesChangeLog(SalesChangeLog salesChangeLog, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_sales_change_log";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Table_Name", DbType.String, DBValue.ToDBString(salesChangeLog.TableName)));
                paramCol.Add(new SqlDataParameter("@Column_Name", DbType.String, DBValue.ToDBString(salesChangeLog.ColumnName)));
                paramCol.Add(new SqlDataParameter("@Change_Date_Time", DbType.DateTime, DBValue.ToDBDateTime(salesChangeLog.ChangeDateTime)));
                paramCol.Add(new SqlDataParameter("@User_Name", DbType.String, DBValue.ToDBString(salesChangeLog.UserName)));
                paramCol.Add(new SqlDataParameter("@From_Value", DbType.String, DBValue.ToDBString(salesChangeLog.FromValue)));
                paramCol.Add(new SqlDataParameter("@To_Value", DbType.String, DBValue.ToDBString(salesChangeLog.ToValue)));
                paramCol.Add(new SqlDataParameter("@Comment", DbType.String, DBValue.ToDBString(salesChangeLog.Comment)));
                paramCol.Add(new SqlDataParameter("@Computer_Name", DbType.String, DBValue.ToDBString(salesChangeLog.ComputerName)));
                paramCol.Add(new SqlDataParameter("@Cancelation_reason_Id", DbType.Int32, DBValue.ToDBInt32(salesChangeLog.CancelationReasonId)));
                paramCol.Add(new SqlDataParameter("@Other_Reason", DbType.String, DBValue.ToDBString(salesChangeLog.OtherReason)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    salesChangeLog.SalesID = DBValue.ToInt32(paramCol["@Sales_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateSalesChangeLog(SalesChangeLog salesChangeLog)
        {
            return UpdateSalesChangeLog(salesChangeLog, null);
        }

        private int UpdateSalesChangeLog(SalesChangeLog salesChangeLog, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_sales_change_log";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(salesChangeLog.SalesID)));
                paramCol.Add(new SqlDataParameter("@Table_Name", DbType.String, DBValue.ToDBString(salesChangeLog.TableName)));
                paramCol.Add(new SqlDataParameter("@Column_Name", DbType.String, DBValue.ToDBString(salesChangeLog.ColumnName)));
                paramCol.Add(new SqlDataParameter("@Change_Date_Time", DbType.DateTime, DBValue.ToDBDateTime(salesChangeLog.ChangeDateTime)));
                paramCol.Add(new SqlDataParameter("@User_Name", DbType.String, DBValue.ToDBString(salesChangeLog.UserName)));
                paramCol.Add(new SqlDataParameter("@From_Value", DbType.String, DBValue.ToDBString(salesChangeLog.FromValue)));
                paramCol.Add(new SqlDataParameter("@To_Value", DbType.String, DBValue.ToDBString(salesChangeLog.ToValue)));
                paramCol.Add(new SqlDataParameter("@Comment", DbType.String, DBValue.ToDBString(salesChangeLog.Comment)));
                paramCol.Add(new SqlDataParameter("@Computer_Name", DbType.String, DBValue.ToDBString(salesChangeLog.ComputerName)));
                paramCol.Add(new SqlDataParameter("@Cancelation_reason_Id", DbType.Int32, DBValue.ToDBInt32(salesChangeLog.CancelationReasonId)));
                paramCol.Add(new SqlDataParameter("@Other_Reason", DbType.String, DBValue.ToDBString(salesChangeLog.OtherReason)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region SalesConstraints Methods

        private SalesConstraints LoadSalesConstraints(DataRow row)
        {
            SalesConstraints salesConstraints = new SalesConstraints();

            // Store database values into our business object
            salesConstraints.SalesConstraintId = DBValue.ToInt16(row["sales_constraint_id"]);
            salesConstraints.ProductClassId = DBValue.ToInt16(row["product_class_id"]);
            salesConstraints.Description = DBValue.ToString(row["description"]);
            salesConstraints.HighLevel = DBValue.ToInt32(row["high_level"]);

            // return the filled object
            return salesConstraints;
        }

        public SalesConstraints[] GetSalesConstraintss()
        {
            return GetSalesConstraintss(null);
        }

        private SalesConstraints[] GetSalesConstraintss(SqlInterface si)
        {
            SalesConstraints[] salesConstraintss = null;

            string storedProcName = "efrcrm_get_sales_constraintss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    salesConstraintss = new SalesConstraints[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            salesConstraintss[i] = LoadSalesConstraints(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return salesConstraintss;
        }



        #endregion

        #region SalesItem Methods

        private SalesItem LoadSalesItem(DataRow row)
        {
            SalesItem salesItem = new SalesItem();

            // Store database values into our business object
            salesItem.SalesId = DBValue.ToInt32(row["sales_id"]);
            salesItem.SalesItemNo = DBValue.ToInt32(row["sales_item_no"]);
            salesItem.ScratchBookId = DBValue.ToInt32(row["scratch_book_id"]);
            salesItem.ServiceTypeId = DBValue.ToInt16(row["service_type_id"]);
            salesItem.ProductClassId = DBValue.ToInt16(row["product_class_id"]);
            salesItem.GroupName = DBValue.ToString(row["group_name"]);
            salesItem.QuantitySold = DBValue.ToInt32(row["quantity_sold"]);
            salesItem.UnitPriceSold = DBValue.ToDecimal(row["unit_price_sold"]);
            salesItem.QuantityFree = DBValue.ToInt32(row["quantity_free"]);
            salesItem.SuggestedCoupons = DBValue.ToString(row["suggested_coupons"]);
            salesItem.SalesAmount = DBValue.ToDecimal(row["sales_amount"]);
            salesItem.PaidAmount = DBValue.ToDecimal(row["paid_amount"]);
            salesItem.AdjustedAmount = DBValue.ToDecimal(row["adjusted_amount"]);
            salesItem.DiscountAmount = DBValue.ToDecimal(row["discount_amount"]);
            salesItem.SalesCommissionAmount = DBValue.ToDecimal(row["sales_commission_amount"]);
            salesItem.SponsorCommissionAmount = DBValue.ToDecimal(row["sponsor_commission_amount"]);
            salesItem.NbUnitsSold = DBValue.ToDecimal(row["nb_units_sold"]);
            salesItem.ManualProductDescription = DBValue.ToString(row["manual_product_description"]);
            if (row.Table.Columns.Contains("participant_id"))
            {
                salesItem.ParticipantId = DBValue.ToInt32(row["participant_id"]);
            }

            // return the filled object
            return salesItem;
        }

        public SalesItem[] GetSalesItems()
        {
            return GetSalesItems(null);
        }

        private SalesItem[] GetSalesItems(SqlInterface si)
        {
            SalesItem[] salesItems = null;

            string storedProcName = "efrcrm_get_sales_items";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    salesItems = new SalesItem[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            salesItems[i] = LoadSalesItem(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return salesItems;
        }

        public SalesItem[] GetSalesBySaleId(int Sales_id)
        {
            return GetSalesItemsBySaleId(Sales_id, null);
            //			DataTable dt = null;
            //			SqlInterface si = new SqlInterface(dataProvider, connectionString);
            //			try
            //			{
            //				SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
            //				SqlDataParameter sqlPam = new SqlDataParameter("@Sales_id", DbType.Int32, Sales_id);
            //				paramCol.Add(sqlPam);
            //				dt = si.ExecuteFetchDataTable(
            //@"SELECT Sales_id, Sales_item_no, Scratch_book_id, Service_type_id, Product_class_id, Group_name, Quantity_sold, Unit_price_sold, Quantity_free, Suggested_coupons, Sales_amount, Paid_amount, Adjusted_amount, Discount_amount, Sales_commission_amount, Sponsor_commission_amount, Nb_units_sold, Manual_product_description, participant_id 
            //FROM Sales_item
            //WHERE Sales_id=@Sales_id
            //", 
            //					CommandType.Text ,paramCol);
            //			}
            //			catch (Exception ex)
            //			{
            //				throw new  EFundraisingCRMException(string.Format("GetSalesBySaleId: {0} error", Sales_id.ToString()), ex);
            //			}
            //			finally
            //			{
            //				si.Close ();
            //			}
            //			SalesItem[] salesItems = null;
            //
            //			if (dt != null && dt.Rows.Count > 0)
            //			{
            //				salesItems = new SalesItem[dt.Rows.Count];
            //				for (int i = 0; i < dt.Rows.Count; i++)	
            //				{
            //					// fill our objects
            //					try 
            //					{
            //						salesItems[i] = LoadSalesItem(dt.Rows[i]);
            //					} 
            //					catch(Exception ex) 
            //					{
            //						throw new SqlDataException("Error when loading in GetSalesBySaleId " , ex);
            //					}
            //				}
            //				return salesItems;
            //			}
            //			else
            //				return null;
        }

        private SalesItem[] GetSalesItemsBySaleId(int salesId, SqlInterface si)
        {
            SalesItem[] salesItems = null;
            DataTable dt = null;

            string storedProcName = "efrcrm_get_sales_items_by_sales_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_id", DbType.Int32, salesId));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);
            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }


            if (dt != null)
            {
                salesItems = new SalesItem[dt.Rows.Count];
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    // fill our objects
                    try
                    {
                        salesItems[i] = LoadSalesItem(dt.Rows[i]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }
            }
            return salesItems;


        }


        public int GetMaxSalesItemNo(int SaleId)
        {
            string sql =
                @"SELECT max(sales_item_no)
FROM sales_item
WHERE sales_id = @sales_id";



            int saleItemMaxNo = int.MinValue;
            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            try
            {
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@sales_id", DbType.Int32, DBValue.ToDBInt32(SaleId)));
                si.Open();

                object theObj = si.ExecuteScalar(sql, CommandType.Text, paramCol);
                if (theObj != null)
                    saleItemMaxNo = Convert.ToInt32(theObj);
            }
            catch (Exception ex)
            {
                throw new Exception("GetSimilarCampaign error", ex);
            }
            finally
            {
                si.Close();
            }
            return saleItemMaxNo;

        }

        private EFundraisingCRMCollectionBase GetCollectionSalesItems(SqlInterface si)
        {
            SalesItemCollection salesItems = new SalesItemCollection();

            string storedProcName = "efrcrm_get_sales_items";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            salesItems.Add(LoadSalesItem(dt.Rows[i]));
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            salesItems.Sort();
            return salesItems;
        }


        public SalesItemCollection GetSaleItemsBySaleID(int saleID)
        {
            return GetSaleItemsBySaleID(saleID, null);
        }

        private SalesItemCollection GetSaleItemsBySaleID(int saleID, SqlInterface si)
        {
            SalesItemCollection salesItems = new SalesItemCollection();

            string storedProcName = "efrcrm_get_sales_item_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@sales_id", DbType.Int32, DBValue.ToDBInt32(saleID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            salesItems.Add(LoadSalesItem(dt.Rows[i]));
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            salesItems.Sort();
            return salesItems;
        }


        public EFundraisingCRMCollectionBase GetCollectionSalesItems()
        {
            return GetCollectionSalesItems(null);
        }

        public SalesItem GetSalesItemByID(int id)
        {
            return GetSalesItemByID(id, null);
        }

        private SalesItem GetSalesItemByID(int id, SqlInterface si)
        {
            SalesItem salesItem = null;

            string storedProcName = "efrcrm_get_sales_item_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        salesItem = LoadSalesItem(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return salesItem;
        }

        public SalesItem GetSalesItemBySaleIdAndSaleItemNo(int Sales_id, int Sales_item_no)
        {
            return GetSalesItemBySaleIdAndSaleItemNo(Sales_id, Sales_item_no, null);
            //			DataTable dt = null;
            //			SqlInterface si = new SqlInterface(dataProvider, connectionString);
            //			try
            //			{
            //				SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
            //				SqlDataParameter sqlPam = new SqlDataParameter("@Sales_id", DbType.Int32, Sales_id);
            //				paramCol.Add(sqlPam);
            //				paramCol.Add(new SqlDataParameter("@Sales_item_no", DbType.Int32, Sales_item_no));
            //				dt = si.ExecuteFetchDataTable(
            //@"SELECT Sales_id, Sales_item_no, Scratch_book_id, Service_type_id, Product_class_id, Group_name, Quantity_sold, Unit_price_sold, 
            //Quantity_free, Suggested_coupons, Sales_amount, Paid_amount, Adjusted_amount, Discount_amount, Sales_commission_amount, 
            //Sponsor_commission_amount, Nb_units_sold, Manual_product_description, participant_id 
            //FROM Sales_item
            //WHERE Sales_id=@Sales_id and Sales_item_no=@Sales_item_no
            //", 
            //					CommandType.Text ,paramCol);
            //			}
            //			catch (Exception ex)
            //			{
            //				throw new  EFundraisingCRMException(string.Format("GetSalesBySaleId: {0} error", Sales_id.ToString()), ex);
            //			}
            //			finally
            //			{
            //				si.Close ();
            //			}
            //			SalesItem salesItem = null;
            //
            //			if (dt != null && dt.Rows.Count > 0)
            //			{
            //				salesItem = LoadSalesItem(dt.Rows[0]);
            //				return salesItem;
            //			}
            //			else
            //				return null;
        }

        private SalesItem GetSalesItemBySaleIdAndSaleItemNo(int salesId, int salesItemNo, SqlInterface si)
        {
            SalesItem salesItem = null;
            DataTable dt = null;

            string storedProcName = "efrcrm_get_sales_item_by_sales_id_and_sale_item_no";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_id", DbType.Int32, salesId));
                paramCol.Add(new SqlDataParameter("@Sales_item_no", DbType.Int32, salesItemNo));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);
            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }


            if (dt != null && dt.Rows.Count > 0)
            {
                salesItem = LoadSalesItem(dt.Rows[0]);
            }
            return salesItem;


        }



        public int InsertSalesItem(SalesItem salesItem)
        {
            return InsertSalesItem(salesItem, null);
        }

        private int InsertSalesItemBKOLD(SalesItem salesItem, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_sales_item";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_id", DbType.Int32, DBValue.ToDBInt32(salesItem.SalesId)));
                paramCol.Add(new SqlDataParameter("@Sales_item_no", DbType.Int32, DBValue.ToDBInt32(salesItem.SalesItemNo)));
                paramCol.Add(new SqlDataParameter("@Scratch_book_id", DbType.Int32, DBValue.ToDBInt32(salesItem.ScratchBookId)));
                paramCol.Add(new SqlDataParameter("@Service_type_id", DbType.Int16, DBValue.ToDBInt16(salesItem.ServiceTypeId)));
                paramCol.Add(new SqlDataParameter("@Product_class_id", DbType.Int16, DBValue.ToDBInt16(salesItem.ProductClassId)));
                paramCol.Add(new SqlDataParameter("@Group_name", DbType.String, DBValue.ToDBString(salesItem.GroupName)));
                paramCol.Add(new SqlDataParameter("@Quantity_sold", DbType.Int32, DBValue.ToDBInt32(salesItem.QuantitySold)));
                paramCol.Add(new SqlDataParameter("@Unit_price_sold", DbType.Decimal, DBValue.ToDBDecimal(salesItem.UnitPriceSold)));
                paramCol.Add(new SqlDataParameter("@Quantity_free", DbType.Int32, DBValue.ToDBInt32(salesItem.QuantityFree)));
                paramCol.Add(new SqlDataParameter("@Suggested_coupons", DbType.String, DBValue.ToDBString(salesItem.SuggestedCoupons)));
                paramCol.Add(new SqlDataParameter("@Sales_amount", DbType.Decimal, DBValue.ToDBDecimal(salesItem.SalesAmount)));
                paramCol.Add(new SqlDataParameter("@Paid_amount", DbType.Decimal, DBValue.ToDBDecimal(salesItem.PaidAmount)));
                paramCol.Add(new SqlDataParameter("@Adjusted_amount", DbType.Decimal, DBValue.ToDBDecimal(salesItem.AdjustedAmount)));
                paramCol.Add(new SqlDataParameter("@Discount_amount", DbType.Decimal, DBValue.ToDBDecimal(salesItem.DiscountAmount)));
                paramCol.Add(new SqlDataParameter("@Sales_commission_amount", DbType.Decimal, DBValue.ToDBDecimal(salesItem.SalesCommissionAmount)));
                paramCol.Add(new SqlDataParameter("@Sponsor_commission_amount", DbType.Decimal, DBValue.ToDBDecimal(salesItem.SponsorCommissionAmount)));
                paramCol.Add(new SqlDataParameter("@Nb_units_sold", DbType.Decimal, DBValue.ToDBDecimal(salesItem.NbUnitsSold)));
                paramCol.Add(new SqlDataParameter("@Manual_product_description", DbType.String, DBValue.ToDBString(salesItem.ManualProductDescription)));
                paramCol.Add(new SqlDataParameter("@Participant_id", DbType.Int32, DBValue.ToDBInt32(salesItem.ParticipantId)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    salesItem.SalesId = DBValue.ToInt32(paramCol["@Sales_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }
        /*
                public int DeleteSalesItem(int scratchBookID, int itemNo)
                {
                    return DeleteSalesItem(scratchBookID, itemNo, null);}

                private int DeleteSalesItem(int scratchBookID, int itemNo, SqlInterface si) 
                {
                    int result = int.MinValue;

                    string storedProcName = "efrcrm_delete_sales_item";

                    // if the SqlInterface is passed as argument it means that 
                    // this call should be applied to an already open connection
                    // and the method which call this method is using transaction
                    bool newConnection = true;
                    if (si == null) 
                    {
                        si = new SqlInterface(dataProvider, connectionString);
                    } 
                    else 
                    {
                        newConnection = false;
                    }

                    try 
                    {
                        // declare stored procedure parameters
                        SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                        paramCol.Add(new SqlDataParameter("@Scrath_book_id", DbType.Int32, DBValue.ToDBInt32(salesItem.SalesId)));
                        paramCol.Add(new SqlDataParameter("@Sales_item_no", DbType.Int32, DBValue.ToDBInt32(salesItem.SalesItemNo)));

                        if (newConnection) 
                        {
                            // open the connection
                            si.Open();
                        }

                        result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                        if (result > 0) 
                        {
                            // Get generated id
                            salesItem.SalesId = DBValue.ToInt32(paramCol["@Sales_id"].Value);

                        } 
                        else 
                        {
                            throw new SqlDataException("Error inserting into database calling " + storedProcName);
                        }	


                    } 
                    finally 
                    {
                        if(newConnection) 
                        {
                            // Always close connection.
                            si.Close();
                        }
                    }
                    return result;
                }

        */
        private int InsertSalesItem(SalesItem salesItem, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_sales_item";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_id", DbType.Int32, DBValue.ToDBInt32(salesItem.SalesId)));
                paramCol.Add(new SqlDataParameter("@Sales_item_no", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Scratch_book_id", DbType.Int32, DBValue.ToDBInt32(salesItem.ScratchBookId)));
                paramCol.Add(new SqlDataParameter("@Service_type_id", DbType.Int16, DBValue.ToDBInt16(salesItem.ServiceTypeId)));
                paramCol.Add(new SqlDataParameter("@Product_class_id", DbType.Int16, DBValue.ToDBInt16(salesItem.ProductClassId)));
                paramCol.Add(new SqlDataParameter("@Group_name", DbType.String, DBValue.ToDBString(salesItem.GroupName)));
                paramCol.Add(new SqlDataParameter("@Quantity_sold", DbType.Int32, DBValue.ToDBInt32(salesItem.QuantitySold)));
                paramCol.Add(new SqlDataParameter("@Unit_price_sold", DbType.Decimal, DBValue.ToDBDecimal(salesItem.UnitPriceSold)));
                paramCol.Add(new SqlDataParameter("@Quantity_free", DbType.Int32, DBValue.ToDBInt32(salesItem.QuantityFree)));
                paramCol.Add(new SqlDataParameter("@Suggested_coupons", DbType.String, DBValue.ToDBString(salesItem.SuggestedCoupons)));
                paramCol.Add(new SqlDataParameter("@Sales_amount", DbType.Decimal, DBValue.ToDBDecimal(salesItem.SalesAmount)));
                paramCol.Add(new SqlDataParameter("@Paid_amount", DbType.Decimal, DBValue.ToDBDecimal(salesItem.PaidAmount)));
                paramCol.Add(new SqlDataParameter("@Adjusted_amount", DbType.Decimal, DBValue.ToDBDecimal(salesItem.AdjustedAmount)));
                paramCol.Add(new SqlDataParameter("@Discount_amount", DbType.Decimal, DBValue.ToDBDecimal(salesItem.DiscountAmount)));
                paramCol.Add(new SqlDataParameter("@Sales_commission_amount", DbType.Decimal, DBValue.ToDBDecimal(salesItem.SalesCommissionAmount)));
                paramCol.Add(new SqlDataParameter("@Sponsor_commission_amount", DbType.Decimal, DBValue.ToDBDecimal(salesItem.SponsorCommissionAmount)));
                paramCol.Add(new SqlDataParameter("@Nb_units_sold", DbType.Decimal, DBValue.ToDBDecimal(salesItem.NbUnitsSold)));
                paramCol.Add(new SqlDataParameter("@Manual_product_description", DbType.String, DBValue.ToDBString(salesItem.ManualProductDescription)));
                paramCol.Add(new SqlDataParameter("@Participant_id", DbType.Int32, DBValue.ToDBInt32(salesItem.ParticipantId)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    salesItem.SalesItemNo = DBValue.ToInt32(paramCol["@Sales_item_no"].Value);
                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }

        public int UpdateSalesItem(SalesItem salesItem)
        {
            return UpdateSalesItem(salesItem, null);
        }

        private int UpdateSalesItem(SalesItem salesItem, SqlInterface si)
        {
            int returnValue = int.MinValue;

            string storedProcName = "efrcrm_update_sales_item";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {

                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_id", DbType.Int32, DBValue.ToDBInt32(salesItem.SalesId)));
                paramCol.Add(new SqlDataParameter("@Sales_item_no", DbType.Int32, DBValue.ToDBInt32(salesItem.SalesItemNo)));
                paramCol.Add(new SqlDataParameter("@Scratch_book_id", DbType.Int32, DBValue.ToDBInt32(salesItem.ScratchBookId)));
                paramCol.Add(new SqlDataParameter("@Service_type_id", DbType.Int16, DBValue.ToDBInt16(salesItem.ServiceTypeId)));
                paramCol.Add(new SqlDataParameter("@Product_class_id", DbType.Int16, DBValue.ToDBInt16(salesItem.ProductClassId)));
                paramCol.Add(new SqlDataParameter("@Group_name", DbType.String, DBValue.ToDBString(salesItem.GroupName)));
                paramCol.Add(new SqlDataParameter("@Quantity_sold", DbType.Int32, DBValue.ToDBInt32(salesItem.QuantitySold)));
                paramCol.Add(new SqlDataParameter("@Unit_price_sold", DbType.Decimal, DBValue.ToDBDecimal(salesItem.UnitPriceSold)));
                paramCol.Add(new SqlDataParameter("@Quantity_free", DbType.Int32, DBValue.ToDBInt32(salesItem.QuantityFree)));
                paramCol.Add(new SqlDataParameter("@Suggested_coupons", DbType.String, DBValue.ToDBString(salesItem.SuggestedCoupons)));
                paramCol.Add(new SqlDataParameter("@Sales_amount", DbType.Decimal, DBValue.ToDBDecimal(salesItem.SalesAmount)));
                paramCol.Add(new SqlDataParameter("@Paid_amount", DbType.Decimal, DBValue.ToDBDecimal(salesItem.PaidAmount)));
                paramCol.Add(new SqlDataParameter("@Adjusted_amount", DbType.Decimal, DBValue.ToDBDecimal(salesItem.AdjustedAmount)));
                paramCol.Add(new SqlDataParameter("@Discount_amount", DbType.Decimal, DBValue.ToDBDecimal(salesItem.DiscountAmount)));
                paramCol.Add(new SqlDataParameter("@Sales_commission_amount", DbType.Decimal, DBValue.ToDBDecimal(salesItem.SalesCommissionAmount)));
                paramCol.Add(new SqlDataParameter("@Sponsor_commission_amount", DbType.Decimal, DBValue.ToDBDecimal(salesItem.SponsorCommissionAmount)));
                paramCol.Add(new SqlDataParameter("@Nb_units_sold", DbType.Decimal, DBValue.ToDBDecimal(salesItem.NbUnitsSold)));
                paramCol.Add(new SqlDataParameter("@Manual_product_description", DbType.String, DBValue.ToDBString(salesItem.ManualProductDescription)));
                paramCol.Add(new SqlDataParameter("@participant_id", DbType.Int32, DBValue.ToDBInt32(salesItem.ParticipantId)));
                //paramCol.Add(new SqlDataParameter("@return", DbType.Int32, ParameterDirection.ReturnValue));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                returnValue = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);


            }
            catch (Exception ex)
            {
                throw new EFundraisingCRMException("UpdateSalesItem", ex);
            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return returnValue;
        }



        public void UpdateAndInsertSalesItemsPackByParticipants(Client client, SaleCollection sales, CommentsCollection comments)
        {
            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            try
            {
                si.Open();
                si.BeginTransaction();
                foreach (Sale s in sales)
                {
                    for (int i = 0; i < s.Participants.Count; i++)
                    {
                        Participant p = s.Participants[i] as Participant;
                        if (p != null)
                        {
                            if (p.ParticipantId == int.MinValue) // Insert new participants
                                InsertParticipant(p, si);

                            if (s.Convert2TallySalePackByParticipants)
                            {
                                if (p.ParticipantId != int.MinValue)
                                {
                                    SalesItem[] saleItems = GetSalesItemsBySaleId(s.SalesId, si);
                                    Hashtable hashTblItems = new Hashtable();
                                    // Reset existing sale items.
                                    for (int t = 0; t < saleItems.Length; t++)
                                    {
                                        saleItems[t].QuantitySold = 0;
                                        saleItems[t].NbUnitsSold = Decimal.Zero;
                                        saleItems[t].SalesAmount = 0;
                                        saleItems[t].ParticipantId = p.ParticipantId;
                                        hashTblItems[saleItems[t].ScratchBookId] = saleItems[t];
                                    }
                                    for (int k = 0; k < p.SalesItems.Count; k++)
                                    {
                                        SalesItem item = (SalesItem)p.SalesItems[k];
                                        if (item.SalesId == s.SalesId)
                                        {
                                            if (hashTblItems[item.ScratchBookId] != null)
                                            {
                                                SalesItem tmpSaleItem = hashTblItems[item.ScratchBookId] as SalesItem;
                                                if (tmpSaleItem != null)
                                                {
                                                    // Set old sale item to the new sale item.
                                                    tmpSaleItem.QuantitySold = item.QuantitySold;
                                                    tmpSaleItem.NbUnitsSold = item.NbUnitsSold;
                                                    tmpSaleItem.UnitPriceSold = item.UnitPriceSold;
                                                    tmpSaleItem.SalesAmount = item.SalesAmount;
                                                }
                                            }
                                            else
                                            {
                                                // Insert sale item.
                                                item.ParticipantId = p.ParticipantId;
                                                InsertSalesItem(item, si);
                                            }
                                        }
                                    }
                                    // Update sale items.
                                    for (int t = 0; t < saleItems.Length; t++)
                                        UpdateSalesItem(saleItems[t], si);

                                    s.Convert2TallySalePackByParticipants = false;
                                }
                            }
                            else
                            {
                                for (int k = 0; k < p.SalesItems.Count; k++)
                                {
                                    if (p.ParticipantId != int.MinValue)
                                    {
                                        SalesItem item = (SalesItem)p.SalesItems[k];
                                        item.ParticipantId = p.ParticipantId;
                                        if (item.SalesId == s.SalesId)
                                        {
                                            if (item.SalesItemNo > 0)
                                            {
                                                UpdateSalesItem(item, si);
                                            }
                                            else
                                            {
                                                // Insert sale item.
                                                InsertSalesItem(item, si);
                                            }
                                        }
                                    }
                                }
                            }

                            if (comments != null)
                            {
                                // Update comments.
                                foreach (Comments c in comments)
                                {
                                    if (c.SalesID == s.SalesId)
                                    {
                                        c.Comment = s.Comment;
                                        UpdateComments(c, si);
                                    }
                                }
                            }
                            UpdateSale(s, si);
                        }
                    }
                }
                si.Commit();
            }
            catch (Exception ex)
            {
                si.Rollback();
                throw ex;
            }
            finally
            {
                si.Close();
            }

        }

        public void UpdateAndInsertSalesItems(Client client, Sale sale, SalesItemCollection insertItems,
            SalesItemCollection updateItems, CommentsCollection comments)
        {

            SqlInterface si = new SqlInterface(dataProvider, connectionString);
            try
            {
                si.Open();
                si.BeginTransaction();
                if (insertItems != null && insertItems.Count > 0)
                {
                    // Insert salesItems
                    for (int i = 0; i < insertItems.Count; i++)
                    {
                        SalesItem item = (SalesItem)insertItems[i];
                        item.SalesId = sale.SalesId;
                        InsertSalesItem(item, si);
                    }
                }

                if (updateItems != null && updateItems.Count > 0)
                {
                    // Update salesItems
                    for (int i = 0; i < updateItems.Count; i++)
                    {
                        SalesItem item = (SalesItem)updateItems[i];
                        if (item.SalesId == sale.SalesId)
                            UpdateSalesItem(item, si);
                    }
                }

                if (comments != null)
                {
                    // Update comments.
                    foreach (Comments c in comments)
                    {
                        if (c.SalesID == sale.SalesId)
                        {
                            c.Comment = sale.Comment;
                            UpdateComments(c, si);
                        }
                    }
                }

                // Update sale
                UpdateSale(sale, si);
                //Comment c = Comments.
                si.Commit();
            }
            catch (Exception ex)
            {
                si.Rollback();
                throw ex;
            }
            finally
            {
                si.Close();
            }
        }

        #endregion

        #region SalesItemCouponSheet Methods

        private SalesItemCouponSheet LoadSalesItemCouponSheet(DataRow row)
        {
            SalesItemCouponSheet salesItemCouponSheet = new SalesItemCouponSheet();

            // Store database values into our business object
            salesItemCouponSheet.CouponSheetID = DBValue.ToInt32(row["coupon_sheet_id"]);
            salesItemCouponSheet.SalesID = DBValue.ToInt32(row["sales_id"]);
            salesItemCouponSheet.SalesItemNo = DBValue.ToInt32(row["sales_item_no"]);
            salesItemCouponSheet.DateAssigned = DBValue.ToDateTime(row["date_assigned"]);
            salesItemCouponSheet.SheetPerBooklet = DBValue.ToInt32(row["sheet_per_booklet"]);
            salesItemCouponSheet.SponsorConsultantID = DBValue.ToInt32(row["sponsor_consultant_id"]);
            salesItemCouponSheet.BrandID = DBValue.ToInt32(row["brand_id"]);
            salesItemCouponSheet.LocalSponsorID = DBValue.ToInt32(row["local_sponsor_id"]);

            // return the filled object
            return salesItemCouponSheet;
        }

        public SalesItemCouponSheet[] GetSalesItemCouponSheets()
        {
            return GetSalesItemCouponSheets(null);
        }

        private SalesItemCouponSheet[] GetSalesItemCouponSheets(SqlInterface si)
        {
            SalesItemCouponSheet[] salesItemCouponSheets = null;

            string storedProcName = "efrcrm_get_sales_item_coupon_sheets";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    salesItemCouponSheets = new SalesItemCouponSheet[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            salesItemCouponSheets[i] = LoadSalesItemCouponSheet(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return salesItemCouponSheets;
        }


        public SalesItemCouponSheet GetSalesItemCouponSheetByID(int id)
        {
            return GetSalesItemCouponSheetByID(id, null);
        }

        private SalesItemCouponSheet GetSalesItemCouponSheetByID(int id, SqlInterface si)
        {
            SalesItemCouponSheet salesItemCouponSheet = null;

            string storedProcName = "efrcrm_get_sales_item_coupon_sheet_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Coupon_Sheet_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        salesItemCouponSheet = LoadSalesItemCouponSheet(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return salesItemCouponSheet;
        }


        public int InsertSalesItemCouponSheet(SalesItemCouponSheet salesItemCouponSheet)
        {
            return InsertSalesItemCouponSheet(salesItemCouponSheet, null);
        }

        private int InsertSalesItemCouponSheet(SalesItemCouponSheet salesItemCouponSheet, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_sales_item_coupon_sheet";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Coupon_Sheet_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(salesItemCouponSheet.SalesID)));
                paramCol.Add(new SqlDataParameter("@Sales_Item_No", DbType.Int32, DBValue.ToDBInt32(salesItemCouponSheet.SalesItemNo)));
                paramCol.Add(new SqlDataParameter("@Date_Assigned", DbType.DateTime, DBValue.ToDBDateTime(salesItemCouponSheet.DateAssigned)));
                paramCol.Add(new SqlDataParameter("@Sheet_Per_Booklet", DbType.Int32, DBValue.ToDBInt32(salesItemCouponSheet.SheetPerBooklet)));
                paramCol.Add(new SqlDataParameter("@Sponsor_Consultant_ID", DbType.Int32, DBValue.ToDBInt32(salesItemCouponSheet.SponsorConsultantID)));
                paramCol.Add(new SqlDataParameter("@Brand_ID", DbType.Int32, DBValue.ToDBInt32(salesItemCouponSheet.BrandID)));
                paramCol.Add(new SqlDataParameter("@Local_Sponsor_ID", DbType.Int32, DBValue.ToDBInt32(salesItemCouponSheet.LocalSponsorID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    salesItemCouponSheet.CouponSheetID = DBValue.ToInt32(paramCol["@Coupon_Sheet_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateSalesItemCouponSheet(SalesItemCouponSheet salesItemCouponSheet)
        {
            return UpdateSalesItemCouponSheet(salesItemCouponSheet, null);
        }

        private int UpdateSalesItemCouponSheet(SalesItemCouponSheet salesItemCouponSheet, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_sales_item_coupon_sheet";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Coupon_Sheet_ID", DbType.Int32, DBValue.ToDBInt32(salesItemCouponSheet.CouponSheetID)));
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(salesItemCouponSheet.SalesID)));
                paramCol.Add(new SqlDataParameter("@Sales_Item_No", DbType.Int32, DBValue.ToDBInt32(salesItemCouponSheet.SalesItemNo)));
                paramCol.Add(new SqlDataParameter("@Date_Assigned", DbType.DateTime, DBValue.ToDBDateTime(salesItemCouponSheet.DateAssigned)));
                paramCol.Add(new SqlDataParameter("@Sheet_Per_Booklet", DbType.Int32, DBValue.ToDBInt32(salesItemCouponSheet.SheetPerBooklet)));
                paramCol.Add(new SqlDataParameter("@Sponsor_Consultant_ID", DbType.Int32, DBValue.ToDBInt32(salesItemCouponSheet.SponsorConsultantID)));
                paramCol.Add(new SqlDataParameter("@Brand_ID", DbType.Int32, DBValue.ToDBInt32(salesItemCouponSheet.BrandID)));
                paramCol.Add(new SqlDataParameter("@Local_Sponsor_ID", DbType.Int32, DBValue.ToDBInt32(salesItemCouponSheet.LocalSponsorID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region SalesItemToAdd Methods

        private SalesItemToAdd LoadSalesItemToAdd(DataRow row)
        {
            SalesItemToAdd salesItemToAdd = new SalesItemToAdd();

            // Store database values into our business object
            salesItemToAdd.SalesItemToAddNo = DBValue.ToInt32(row["sales_item_to_add_no"]);
            salesItemToAdd.SaleToAddId = DBValue.ToInt32(row["sale_to_add_id"]);
            salesItemToAdd.ScratchBookId = DBValue.ToInt32(row["scratch_book_id"]);
            salesItemToAdd.ServiceTypeId = DBValue.ToInt16(row["service_type_id"]);
            salesItemToAdd.GroupName = DBValue.ToString(row["group_name"]);
            salesItemToAdd.QuantitySold = DBValue.ToInt32(row["quantity_sold"]);
            salesItemToAdd.UnitPriceSold = DBValue.ToInt16(row["unit_price_sold"]);
            salesItemToAdd.QuantityFree = DBValue.ToInt32(row["quantity_free"]);
            salesItemToAdd.SuggestedCoupons = DBValue.ToString(row["suggested_coupons"]);
            salesItemToAdd.SalesAmount = DBValue.ToInt16(row["sales_amount"]);
            salesItemToAdd.PaidAmount = DBValue.ToInt16(row["paid_amount"]);
            salesItemToAdd.AdjustedAmount = DBValue.ToInt16(row["adjusted_amount"]);
            salesItemToAdd.DiscountAmount = DBValue.ToInt16(row["discount_amount"]);
            salesItemToAdd.SalesCommissionAmount = DBValue.ToInt16(row["sales_commission_amount"]);
            salesItemToAdd.SponsorCommissionAmount = DBValue.ToInt16(row["sponsor_commission_amount"]);
            salesItemToAdd.NbUnitsSold = DBValue.ToInt16(row["nb_units_sold"]);
            salesItemToAdd.ManualProductDescription = DBValue.ToString(row["manual_product_description"]);

            // return the filled object
            return salesItemToAdd;
        }

        public SalesItemToAdd[] GetSalesItemToAdds()
        {
            return GetSalesItemToAdds(null);
        }

        private SalesItemToAdd[] GetSalesItemToAdds(SqlInterface si)
        {
            SalesItemToAdd[] salesItemToAdds = null;

            string storedProcName = "efrcrm_get_sales_item_to_adds";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    salesItemToAdds = new SalesItemToAdd[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            salesItemToAdds[i] = LoadSalesItemToAdd(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return salesItemToAdds;
        }


        public SalesItemToAdd GetSalesItemToAddByID(int id)
        {
            return GetSalesItemToAddByID(id, null);
        }

        private SalesItemToAdd GetSalesItemToAddByID(int id, SqlInterface si)
        {
            SalesItemToAdd salesItemToAdd = null;

            string storedProcName = "efrcrm_get_sales_item_to_add_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_item_to_add_no", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        salesItemToAdd = LoadSalesItemToAdd(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return salesItemToAdd;
        }


        public int InsertSalesItemToAdd(SalesItemToAdd salesItemToAdd)
        {
            return InsertSalesItemToAdd(salesItemToAdd, null);
        }

        private int InsertSalesItemToAdd(SalesItemToAdd salesItemToAdd, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_sales_item_to_add";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_item_to_add_no", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Sale_to_add_id", DbType.Int32, DBValue.ToDBInt32(salesItemToAdd.SaleToAddId)));
                paramCol.Add(new SqlDataParameter("@Scratch_book_id", DbType.Int32, DBValue.ToDBInt32(salesItemToAdd.ScratchBookId)));
                paramCol.Add(new SqlDataParameter("@Service_type_id", DbType.Int16, DBValue.ToDBInt16(salesItemToAdd.ServiceTypeId)));
                paramCol.Add(new SqlDataParameter("@Group_name", DbType.String, DBValue.ToDBString(salesItemToAdd.GroupName)));
                paramCol.Add(new SqlDataParameter("@Quantity_sold", DbType.Int32, DBValue.ToDBInt32(salesItemToAdd.QuantitySold)));
                paramCol.Add(new SqlDataParameter("@Unit_price_sold", DbType.Double, DBValue.ToDBFloat(salesItemToAdd.UnitPriceSold)));
                paramCol.Add(new SqlDataParameter("@Quantity_free", DbType.Int32, DBValue.ToDBInt32(salesItemToAdd.QuantityFree)));
                paramCol.Add(new SqlDataParameter("@Suggested_coupons", DbType.String, DBValue.ToDBString(salesItemToAdd.SuggestedCoupons)));
                paramCol.Add(new SqlDataParameter("@Sales_amount", DbType.Double, DBValue.ToDBFloat(salesItemToAdd.SalesAmount)));
                paramCol.Add(new SqlDataParameter("@Paid_amount", DbType.Double, DBValue.ToDBFloat(salesItemToAdd.PaidAmount)));
                paramCol.Add(new SqlDataParameter("@Adjusted_amount", DbType.Double, DBValue.ToDBFloat(salesItemToAdd.AdjustedAmount)));
                paramCol.Add(new SqlDataParameter("@Discount_amount", DbType.Double, DBValue.ToDBFloat(salesItemToAdd.DiscountAmount)));
                paramCol.Add(new SqlDataParameter("@Sales_commission_amount", DbType.Double, DBValue.ToDBFloat(salesItemToAdd.SalesCommissionAmount)));
                paramCol.Add(new SqlDataParameter("@Sponsor_commission_amount", DbType.Double, DBValue.ToDBFloat(salesItemToAdd.SponsorCommissionAmount)));
                paramCol.Add(new SqlDataParameter("@Nb_units_sold", DbType.Double, DBValue.ToDBFloat(salesItemToAdd.NbUnitsSold)));
                paramCol.Add(new SqlDataParameter("@Manual_product_description", DbType.String, DBValue.ToDBString(salesItemToAdd.ManualProductDescription)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    salesItemToAdd.SalesItemToAddNo = DBValue.ToInt32(paramCol["@Sales_item_to_add_no"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateSalesItemToAdd(SalesItemToAdd salesItemToAdd)
        {
            return UpdateSalesItemToAdd(salesItemToAdd, null);
        }

        private int UpdateSalesItemToAdd(SalesItemToAdd salesItemToAdd, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_sales_item_to_add";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_item_to_add_no", DbType.Int32, DBValue.ToDBInt32(salesItemToAdd.SalesItemToAddNo)));
                paramCol.Add(new SqlDataParameter("@Sale_to_add_id", DbType.Int32, DBValue.ToDBInt32(salesItemToAdd.SaleToAddId)));
                paramCol.Add(new SqlDataParameter("@Scratch_book_id", DbType.Int32, DBValue.ToDBInt32(salesItemToAdd.ScratchBookId)));
                paramCol.Add(new SqlDataParameter("@Service_type_id", DbType.Int16, DBValue.ToDBInt16(salesItemToAdd.ServiceTypeId)));
                paramCol.Add(new SqlDataParameter("@Group_name", DbType.String, DBValue.ToDBString(salesItemToAdd.GroupName)));
                paramCol.Add(new SqlDataParameter("@Quantity_sold", DbType.Int32, DBValue.ToDBInt32(salesItemToAdd.QuantitySold)));
                paramCol.Add(new SqlDataParameter("@Unit_price_sold", DbType.Double, DBValue.ToDBFloat(salesItemToAdd.UnitPriceSold)));
                paramCol.Add(new SqlDataParameter("@Quantity_free", DbType.Int32, DBValue.ToDBInt32(salesItemToAdd.QuantityFree)));
                paramCol.Add(new SqlDataParameter("@Suggested_coupons", DbType.String, DBValue.ToDBString(salesItemToAdd.SuggestedCoupons)));
                paramCol.Add(new SqlDataParameter("@Sales_amount", DbType.Double, DBValue.ToDBFloat(salesItemToAdd.SalesAmount)));
                paramCol.Add(new SqlDataParameter("@Paid_amount", DbType.Double, DBValue.ToDBFloat(salesItemToAdd.PaidAmount)));
                paramCol.Add(new SqlDataParameter("@Adjusted_amount", DbType.Double, DBValue.ToDBFloat(salesItemToAdd.AdjustedAmount)));
                paramCol.Add(new SqlDataParameter("@Discount_amount", DbType.Double, DBValue.ToDBFloat(salesItemToAdd.DiscountAmount)));
                paramCol.Add(new SqlDataParameter("@Sales_commission_amount", DbType.Double, DBValue.ToDBFloat(salesItemToAdd.SalesCommissionAmount)));
                paramCol.Add(new SqlDataParameter("@Sponsor_commission_amount", DbType.Double, DBValue.ToDBFloat(salesItemToAdd.SponsorCommissionAmount)));
                paramCol.Add(new SqlDataParameter("@Nb_units_sold", DbType.Double, DBValue.ToDBFloat(salesItemToAdd.NbUnitsSold)));
                paramCol.Add(new SqlDataParameter("@Manual_product_description", DbType.String, DBValue.ToDBString(salesItemToAdd.ManualProductDescription)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region SalesStatus Methods

        private SalesStatus LoadSalesStatus(DataRow row)
        {
            SalesStatus salesStatus = new SalesStatus();

            // Store database values into our business object
            salesStatus.SalesStatusID = DBValue.ToInt32(row["sales_status_id"]);
            salesStatus.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return salesStatus;
        }

        public SalesStatus[] GetSalesStatuss()
        {
            return GetSalesStatuss(null);
        }

        private SalesStatus[] GetSalesStatuss(SqlInterface si)
        {
            SalesStatus[] salesStatuss = null;

            string storedProcName = "efrcrm_get_sales_statuss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    salesStatuss = new SalesStatus[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            salesStatuss[i] = LoadSalesStatus(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return salesStatuss;
        }


        public SalesStatus GetSalesStatusByID(int id)
        {
            return GetSalesStatusByID(id, null);
        }

        private SalesStatus GetSalesStatusByID(int id, SqlInterface si)
        {
            SalesStatus salesStatus = null;

            string storedProcName = "efrcrm_get_sales_status_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_Status_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        salesStatus = LoadSalesStatus(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return salesStatus;
        }


        public int InsertSalesStatus(SalesStatus salesStatus)
        {
            return InsertSalesStatus(salesStatus, null);
        }

        private int InsertSalesStatus(SalesStatus salesStatus, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_sales_status";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_Status_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(salesStatus.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    salesStatus.SalesStatusID = DBValue.ToInt32(paramCol["@Sales_Status_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateSalesStatus(SalesStatus salesStatus)
        {
            return UpdateSalesStatus(salesStatus, null);
        }

        private int UpdateSalesStatus(SalesStatus salesStatus, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_sales_status";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_Status_ID", DbType.Int32, DBValue.ToDBInt32(salesStatus.SalesStatusID)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(salesStatus.Description)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region SalesWarnings Methods

        private SalesWarnings LoadSalesWarnings(DataRow row)
        {
            SalesWarnings salesWarnings = new SalesWarnings();

            // Store database values into our business object
            salesWarnings.SalesID = DBValue.ToInt32(row["sales_id"]);
            salesWarnings.SalesItemNo = DBValue.ToInt32(row["sales_item_no"]);
            salesWarnings.SalesConstraintId = DBValue.ToInt32(row["sales_constraint_id"]);

            // return the filled object
            return salesWarnings;
        }

        public SalesWarnings[] GetSalesWarningss()
        {
            return GetSalesWarningss(null);
        }

        private SalesWarnings[] GetSalesWarningss(SqlInterface si)
        {
            SalesWarnings[] salesWarningss = null;

            string storedProcName = "efrcrm_get_sales_warningss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    salesWarningss = new SalesWarnings[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            salesWarningss[i] = LoadSalesWarnings(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return salesWarningss;
        }


        public SalesWarnings GetSalesWarningsByID(int id)
        {
            return GetSalesWarningsByID(id, null);
        }

        private SalesWarnings GetSalesWarningsByID(int id, SqlInterface si)
        {
            SalesWarnings salesWarnings = null;

            string storedProcName = "efrcrm_get_sales_warnings_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        salesWarnings = LoadSalesWarnings(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return salesWarnings;
        }


        public int InsertSalesWarnings(SalesWarnings salesWarnings)
        {
            return InsertSalesWarnings(salesWarnings, null);
        }

        private int InsertSalesWarnings(SalesWarnings salesWarnings, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_sales_warnings";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Sales_Item_No", DbType.Int32, DBValue.ToDBInt32(salesWarnings.SalesItemNo)));
                paramCol.Add(new SqlDataParameter("@Sales_Constraint_Id", DbType.Int32, DBValue.ToDBInt32(salesWarnings.SalesConstraintId)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    salesWarnings.SalesID = DBValue.ToInt32(paramCol["@Sales_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateSalesWarnings(SalesWarnings salesWarnings)
        {
            return UpdateSalesWarnings(salesWarnings, null);
        }

        private int UpdateSalesWarnings(SalesWarnings salesWarnings, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_sales_warnings";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(salesWarnings.SalesID)));
                paramCol.Add(new SqlDataParameter("@Sales_Item_No", DbType.Int32, DBValue.ToDBInt32(salesWarnings.SalesItemNo)));
                paramCol.Add(new SqlDataParameter("@Sales_Constraint_Id", DbType.Int32, DBValue.ToDBInt32(salesWarnings.SalesConstraintId)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region SalesWarningsTemp Methods

        private SalesWarningsTemp LoadSalesWarningsTemp(DataRow row)
        {
            SalesWarningsTemp salesWarningsTemp = new SalesWarningsTemp();

            // Store database values into our business object
            salesWarningsTemp.SaleToAddID = DBValue.ToInt32(row["sale_to_add_id"]);
            salesWarningsTemp.SalesItemNo = DBValue.ToInt32(row["sales_item_no"]);
            salesWarningsTemp.SalesConstraintID = DBValue.ToInt32(row["sales_constraint_id"]);

            // return the filled object
            return salesWarningsTemp;
        }

        public SalesWarningsTemp[] GetSalesWarningsTemps()
        {
            return GetSalesWarningsTemps(null);
        }

        private SalesWarningsTemp[] GetSalesWarningsTemps(SqlInterface si)
        {
            SalesWarningsTemp[] salesWarningsTemps = null;

            string storedProcName = "efrcrm_get_sales_warnings_temps";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    salesWarningsTemps = new SalesWarningsTemp[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            salesWarningsTemps[i] = LoadSalesWarningsTemp(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return salesWarningsTemps;
        }


        public SalesWarningsTemp GetSalesWarningsTempByID(int id)
        {
            return GetSalesWarningsTempByID(id, null);
        }

        private SalesWarningsTemp GetSalesWarningsTempByID(int id, SqlInterface si)
        {
            SalesWarningsTemp salesWarningsTemp = null;

            string storedProcName = "efrcrm_get_sales_warnings_temp_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sale_To_Add_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        salesWarningsTemp = LoadSalesWarningsTemp(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return salesWarningsTemp;
        }


        public int InsertSalesWarningsTemp(SalesWarningsTemp salesWarningsTemp)
        {
            return InsertSalesWarningsTemp(salesWarningsTemp, null);
        }

        private int InsertSalesWarningsTemp(SalesWarningsTemp salesWarningsTemp, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_sales_warnings_temp";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sale_To_Add_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Sales_Item_No", DbType.Int32, DBValue.ToDBInt32(salesWarningsTemp.SalesItemNo)));
                paramCol.Add(new SqlDataParameter("@Sales_Constraint_ID", DbType.Int32, DBValue.ToDBInt32(salesWarningsTemp.SalesConstraintID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    salesWarningsTemp.SaleToAddID = DBValue.ToInt32(paramCol["@Sale_To_Add_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateSalesWarningsTemp(SalesWarningsTemp salesWarningsTemp)
        {
            return UpdateSalesWarningsTemp(salesWarningsTemp, null);
        }

        private int UpdateSalesWarningsTemp(SalesWarningsTemp salesWarningsTemp, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_sales_warnings_temp";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sale_To_Add_ID", DbType.Int32, DBValue.ToDBInt32(salesWarningsTemp.SaleToAddID)));
                paramCol.Add(new SqlDataParameter("@Sales_Item_No", DbType.Int32, DBValue.ToDBInt32(salesWarningsTemp.SalesItemNo)));
                paramCol.Add(new SqlDataParameter("@Sales_Constraint_ID", DbType.Int32, DBValue.ToDBInt32(salesWarningsTemp.SalesConstraintID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region Salutation Methods

        private Salutation LoadSalutation(DataRow row)
        {
            Salutation salutation = new Salutation();

            // Store database values into our business object
            salutation.SalutationId = DBValue.ToInt16(row["salutation_id"]);
            salutation.SalutationDesc = DBValue.ToString(row["salutation_desc"]);

            // return the filled object
            return salutation;
        }

        public Salutation[] GetSalutations()
        {
            return GetSalutations(null);
        }

        private Salutation[] GetSalutations(SqlInterface si)
        {
            Salutation[] salutations = null;

            string storedProcName = "efrcrm_get_salutations";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    salutations = new Salutation[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            salutations[i] = LoadSalutation(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return salutations;
        }



        #endregion

        #region SalutationDesc Methods

        private SalutationDesc LoadSalutationDesc(DataRow row)
        {
            SalutationDesc salutationDesc = new SalutationDesc();

            // Store database values into our business object
            salutationDesc.SalutationId = DBValue.ToInt16(row["salutation_id"]);
            salutationDesc.LanguageId = DBValue.ToInt16(row["language_id"]);
            salutationDesc.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return salutationDesc;
        }

        public SalutationDesc[] GetSalutationDescs()
        {
            return GetSalutationDescs(null);
        }

        private SalutationDesc[] GetSalutationDescs(SqlInterface si)
        {
            SalutationDesc[] salutationDescs = null;

            string storedProcName = "efrcrm_get_salutation_descs";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    salutationDescs = new SalutationDesc[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            salutationDescs[i] = LoadSalutationDesc(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return salutationDescs;
        }



        #endregion

        #region Sample

        private Sample LoadSample(DataRow input)
        {
            Sample output = new Sample();
            output.SampleID = DBValue.ToInt32(input["SampleID"]);
            output.SampleName = DBValue.ToString(input["SampleName"]);
            output.Description = DBValue.ToString(input["Description"]);
            output.Active = DBValue.ToBoolean(input["Active"]);
            return output;

        }


        public List<Sample> GetSamples()
        {
            List<Sample> output = new List<Sample>();

            bool useTransaction = false;
            string storedProcName = "efrcrm_get_samples";
            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {

                si.Open();
                if (useTransaction)
                    si.BeginTransaction();


                // Fetch and store into database.
                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, null);

                if (dt.Rows.Count < 1)
                {
                    throw new SqlDataException("No records on " + storedProcName);
                }

                // fill our objects
                try
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        output.Add(LoadSample(dr));
                    }

                    return output;
                }
                catch (System.Exception ex)
                {
                    throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                }

                // Commit our transaction.
                if (useTransaction)
                    si.Commit();
            }
            catch
            {
                // Rollback on error.
                if (useTransaction)
                    si.Rollback();

                // throw exception
                throw;
            }
            finally
            {
                // Always close connection.
                si.Close();
            }
        }

        #endregion

        #region SCSECTION Methods

        private SCSECTION LoadSCSECTION(DataRow row)
        {
            SCSECTION scSection = new SCSECTION();

            // Store database values into our business object
            scSection.SectionId = DBValue.ToInt32(row["section_id"]);
            scSection.SectionTitle = DBValue.ToString(row["section_title"]);
            scSection.SectionImage = DBValue.ToString(row["section_image"]);
            scSection.SectionText = DBValue.ToString(row["section_text"]);
            scSection.SectionTemplate = DBValue.ToString(row["section_template"]);
            scSection.SectionSubTitle = DBValue.ToString(row["section_sub_title"]);

            // return the filled object
            return scSection;
        }

        public SCSECTION[] GetSCSECTIONs()
        {
            return GetSCSECTIONs(null);
        }

        private SCSECTION[] GetSCSECTIONs(SqlInterface si)
        {
            SCSECTION[] scSections = null;

            string storedProcName = "efrcrm_get_sc_sections";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    scSections = new SCSECTION[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            scSections[i] = LoadSCSECTION(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return scSections;
        }


        public SCSECTION GetSCSECTIONByID(int id)
        {
            return GetSCSECTIONByID(id, null);
        }

        private SCSECTION GetSCSECTIONByID(int id, SqlInterface si)
        {
            SCSECTION scSection = null;

            string storedProcName = "efrcrm_get_sc_section_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Section_Id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        scSection = LoadSCSECTION(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return scSection;
        }


        public int InsertSCSECTION(SCSECTION scSection)
        {
            return InsertSCSECTION(scSection, null);
        }

        private int InsertSCSECTION(SCSECTION scSection, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_sc_section";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Section_Id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Section_Title", DbType.String, DBValue.ToDBString(scSection.SectionTitle)));
                paramCol.Add(new SqlDataParameter("@Section_Image", DbType.String, DBValue.ToDBString(scSection.SectionImage)));
                paramCol.Add(new SqlDataParameter("@Section_Text", DbType.String, DBValue.ToDBString(scSection.SectionText)));
                paramCol.Add(new SqlDataParameter("@Section_Template", DbType.String, DBValue.ToDBString(scSection.SectionTemplate)));
                paramCol.Add(new SqlDataParameter("@Section_Sub_Title", DbType.String, DBValue.ToDBString(scSection.SectionSubTitle)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    scSection.SectionId = DBValue.ToInt32(paramCol["@Section_Id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateSCSECTION(SCSECTION scSection)
        {
            return UpdateSCSECTION(scSection, null);
        }

        private int UpdateSCSECTION(SCSECTION scSection, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_sc_section";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Section_Id", DbType.Int32, DBValue.ToDBInt32(scSection.SectionId)));
                paramCol.Add(new SqlDataParameter("@Section_Title", DbType.String, DBValue.ToDBString(scSection.SectionTitle)));
                paramCol.Add(new SqlDataParameter("@Section_Image", DbType.String, DBValue.ToDBString(scSection.SectionImage)));
                paramCol.Add(new SqlDataParameter("@Section_Text", DbType.String, DBValue.ToDBString(scSection.SectionText)));
                paramCol.Add(new SqlDataParameter("@Section_Template", DbType.String, DBValue.ToDBString(scSection.SectionTemplate)));
                paramCol.Add(new SqlDataParameter("@Section_Sub_Title", DbType.String, DBValue.ToDBString(scSection.SectionSubTitle)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region ScratchBook Methods

        private ScratchBook LoadScratchBook(DataRow row)
        {
            ScratchBook scratchBook = new ScratchBook();

            // Store database values into our business object
            scratchBook.ScratchBookId = DBValue.ToInt32(row["scratch_book_id"]);
            scratchBook.ProductClassId = DBValue.ToInt16(row["product_class_id"]);
            scratchBook.SupplierId = DBValue.ToInt16(row["supplier_id"]);
            scratchBook.PackageId = DBValue.ToInt32(row["package_id"]);
            scratchBook.Description = DBValue.ToString(row["description"]);
            scratchBook.RaisingPotential = (float)DBValue.ToDecimal(row["raising_potential"]);
            scratchBook.ProductCode = DBValue.ToString(row["product_code"]);
            scratchBook.CurrentDescription = DBValue.ToString(row["current_description"]);
            scratchBook.IsActive = DBValue.ToInt32(row["is_active"]);
            scratchBook.IsDisplayable = DBValue.ToInt32(row["is_displayable"]);
            scratchBook.TotalQty = DBValue.ToInt32(row["total_qty"]);
            if (row.Table.Columns.Contains("fixed_profit"))
                scratchBook.FixedProfit = DBValue.ToDecimal(row["fixed_profit"]);

            // return the filled object
            return scratchBook;
        }

        public ScratchBook[] GetScratchBooks()
        {
            return GetScratchBooks(null);
        }

        private ScratchBook[] GetScratchBooks(SqlInterface si)
        {
            ScratchBook[] scratchBooks = null;

            string storedProcName = "efrcrm_get_scratch_books";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    scratchBooks = new ScratchBook[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            scratchBooks[i] = LoadScratchBook(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return scratchBooks;
        }

        public ScratchBook[] GetScratchBooksByProductClassID(int productClassID)
        {

            ScratchBook[] scratchBooks = null;

            string storedProcName = "efrcrm_get_scratch_books_by_product_class_id";


            SqlConnection conn = new SqlConnection(connectionString);
            try
            {
                SqlCommand cmd = new SqlCommand(storedProcName, conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@Product_class_id", productClassID);
                conn.Open();

                // Use DataAdapter to fill dataset
                SqlDataAdapter da = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                da.Fill(dt);



                if (dt != null)
                {
                    scratchBooks = new ScratchBook[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            scratchBooks[i] = LoadScratchBook(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                conn.Close();
            }
            return scratchBooks;
        }



        public EFundraisingCRMCollectionBase GetCollectionScratchBooks()
        {
            return GetCollectionScratchBooks(null);
        }

        private EFundraisingCRMCollectionBase GetCollectionScratchBooks(SqlInterface si)
        {
            ScratchBookCollection scratchBooks = new ScratchBookCollection();

            string storedProcName = "efrcrm_get_scratch_books";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            scratchBooks.Add(LoadScratchBook(dt.Rows[i]));
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            scratchBooks.Sort();
            return scratchBooks;
        }

        public ScratchBook GetScratchBookByID(int id)
        {

            ScratchBook scratchBook = null;

            string storedProcName = "efrcrm_get_scratch_book_by_id";



            SqlConnection conn = new SqlConnection(connectionString);
            try
            {
                SqlCommand cmd = new SqlCommand(storedProcName, conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@Scratch_book_id", id);

                conn.Open();

                // Use DataAdapter to fill dataset
                SqlDataAdapter da = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                da.Fill(dt);



                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        scratchBook = LoadScratchBook(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                conn.Close();
            }
            return scratchBook;
        }


        public ScratchBook GetScratchBookByProductCode(string productCode)
        {
            return GetScratchBookByProductCode(productCode, null);
        }

        private ScratchBook GetScratchBookByProductCode(string productCode, SqlInterface si)
        {
            ScratchBook scratchBook = null;

            string storedProcName = "efrcrm_get_scratch_book_by_product_code";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Product_code", DbType.String, DBValue.ToDBString(productCode)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        scratchBook = LoadScratchBook(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return scratchBook;
        }


        public ScratchBook GetScratchBookNonPromoByProductCode(string productCode)
        {
            return GetScratchBookNonPromoByProductCode(productCode, null);
        }

        private ScratchBook GetScratchBookNonPromoByProductCode(string productCode, SqlInterface si)
        {
            ScratchBook scratchBook = null;

            string storedProcName = "efrcrm_get_scratch_book_by_product_code";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Product_code", DbType.String, DBValue.ToDBString(productCode)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        //

                        foreach (DataRow dr in dt.Rows)
                        {
                            decimal raising = DBValue.ToDecimal(dr["raising_potential"]);
                            if (raising > 0)
                            {
                                scratchBook = LoadScratchBook(dt.Rows[0]);
                            }
                        }


                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return scratchBook;
        }


        public int InsertScratchBook(ScratchBook scratchBook)
        {
            return InsertScratchBook(scratchBook, null);
        }

        private int InsertScratchBook(ScratchBook scratchBook, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_scratch_book";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Scratch_book_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Product_class_id", DbType.Int16, DBValue.ToDBInt16(scratchBook.ProductClassId)));
                paramCol.Add(new SqlDataParameter("@Supplier_id", DbType.Int16, DBValue.ToDBInt16(scratchBook.SupplierId)));
                paramCol.Add(new SqlDataParameter("@Package_id", DbType.Int32, DBValue.ToDBInt32(scratchBook.PackageId)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(scratchBook.Description)));
                paramCol.Add(new SqlDataParameter("@Raising_potential", DbType.Double, DBValue.ToDBDecimal(scratchBook.RaisingPotential)));
                paramCol.Add(new SqlDataParameter("@Product_code", DbType.String, DBValue.ToDBString(scratchBook.ProductCode)));
                paramCol.Add(new SqlDataParameter("@Current_description", DbType.String, DBValue.ToDBString(scratchBook.CurrentDescription)));
                paramCol.Add(new SqlDataParameter("@Is_active", DbType.Int32, DBValue.ToDBInt32(scratchBook.IsActive)));
                paramCol.Add(new SqlDataParameter("@Is_displayable", DbType.Int32, DBValue.ToDBInt32(scratchBook.IsDisplayable)));
                paramCol.Add(new SqlDataParameter("@Total_qty", DbType.Int32, DBValue.ToDBInt32(scratchBook.TotalQty)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    scratchBook.ScratchBookId = DBValue.ToInt32(paramCol["@Scratch_book_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }
            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }

        public bool UpdateProductsOnEfundWeb(int id)
        {
            bool update = false;

            string storedProcName = "efrcrm_update_products_efundweb";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction


            SqlInterface si = new SqlInterface(dataProvider, connectionString);

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Root_package_id", DbType.Int32, DBValue.ToDBInt32(id)));

                // open the connection
                si.Open();


                int result = Convert.ToInt32(si.ExecuteScalar(storedProcName, CommandType.StoredProcedure, paramCol));

                if (result == 0 || result == 1)
                {
                    if (result == 1)
                    {
                        update = true;
                    }

                }
                else
                {
                    throw new SqlDataException("Error updating products to efundweb");
                }
            }
            finally
            {
                // Always close connection.
                si.Close();

            }
            return update;
        }

        /*  public int UpdateScratchBook(ScratchBook scratchBook)
          {

              int result = int.MinValue;

              string storedProcName = "efrcrm_update_scratch_book";

              SqlConnection conn = new SqlConnection(connectionString);


              try
              {

                  SqlCommand cmd = new SqlCommand(storedProcName, conn);
                  cmd.CommandType = CommandType.StoredProcedure;



                  cmd.Parameters.Add(new SqlParameter("@Scratch_book_id", DBValue.ToDBInt32(scratchBook.ScratchBookId)));

                  cmd.Parameters.Add(new SqlParameter("@Product_class_id", DBValue.ToDBInt16(scratchBook.ProductClassId)));
                  cmd.Parameters.Add(new SqlParameter("@Supplier_id", DBValue.ToDBInt16(scratchBook.SupplierId)));
                  cmd.Parameters.Add(new SqlParameter("@Package_id", DBValue.ToDBInt32(scratchBook.PackageId)));
                  cmd.Parameters.Add(new SqlParameter("@Description", DBValue.ToDBString(scratchBook.Description)));
                  cmd.Parameters.Add(new SqlParameter("@Raising_potential", DBValue.ToDBFloat(scratchBook.RaisingPotential)));
                  cmd.Parameters.Add(new SqlParameter("@Product_code", DBValue.ToDBString(scratchBook.ProductCode)));
                  cmd.Parameters.Add(new SqlParameter("@Current_description", DBValue.ToDBString(scratchBook.CurrentDescription)));
                  cmd.Parameters.Add(new SqlParameter("@Is_active", DBValue.ToDBInt32(scratchBook.IsActive)));
                  cmd.Parameters.Add(new SqlParameter("@Is_displayable", DBValue.ToDBInt32(scratchBook.IsDisplayable)));
                  cmd.Parameters.Add(new SqlParameter("@Total_qty", DBValue.ToDBInt32(scratchBook.TotalQty)));
                  cmd.Parameters.Add(new SqlParameter("@Replicated", DBValue.ToDBInt32(scratchBook.Replicated)));


                  conn.Open();

                  result = cmd.ExecuteNonQuery();

                  if (result > 0)
                  {
                      return result;
                  }
                  else
                  {
                      throw new SqlDataException("Error updating database calling " + storedProcName);
                  }


              }
              finally
              {
                  conn.Close();
              }
              return result;
          }

          */

        #endregion

        #region ScratchBookPriceInfo Methods

        private ScratchBookPriceInfo LoadScratchBookPriceInfo(DataRow row)
        {
            ScratchBookPriceInfo scratchBookPriceInfo = new ScratchBookPriceInfo();

            // Store database values into our business object
            scratchBookPriceInfo.CountryCode = DBValue.ToString(row["country_code"]);
            scratchBookPriceInfo.ScratchBookId = DBValue.ToInt32(row["scratch_book_id"]);
            scratchBookPriceInfo.ProductClassId = DBValue.ToInt16(row["product_class_id"]);
            scratchBookPriceInfo.EffectiveDate = DBValue.ToDateTime(row["effective_date"]);
            scratchBookPriceInfo.UnitPrice = DBValue.ToInt16(row["unit_price"]);

            // return the filled object
            return scratchBookPriceInfo;
        }

        public ScratchBookPriceInfo[] GetScratchBookPriceInfos()
        {
            return GetScratchBookPriceInfos(null);
        }

        private ScratchBookPriceInfo[] GetScratchBookPriceInfos(SqlInterface si)
        {
            ScratchBookPriceInfo[] scratchBookPriceInfos = null;

            string storedProcName = "efrcrm_get_scratch_book_price_infos";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    scratchBookPriceInfos = new ScratchBookPriceInfo[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            scratchBookPriceInfos[i] = LoadScratchBookPriceInfo(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return scratchBookPriceInfos;
        }



        public decimal GetScratchBookCurrentPriceByID(int scratchBookID)
        {
            return GetScratchBookCurrentPriceByID(scratchBookID, null);
        }

        private decimal GetScratchBookCurrentPriceByID(int scratchBookID, SqlInterface si)
        {
            decimal scratchBookCurrentPrice = 0;

            string storedProcName = "efrcrm_get_scratch_book_current_price_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Scratch_book_id", DbType.Int32, DBValue.ToDBInt32(scratchBookID)));



                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                scratchBookCurrentPrice = Convert.ToDecimal(si.ExecuteScalar(storedProcName, CommandType.StoredProcedure, paramCol));

            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return scratchBookCurrentPrice;
        }

        #endregion

        #region ServiceType Methods

        private ServiceType LoadServiceType(DataRow row)
        {
            ServiceType serviceType = new ServiceType();

            // Store database values into our business object
            serviceType.ServiceTypeId = DBValue.ToInt16(row["service_type_id"]);
            serviceType.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return serviceType;
        }

        public ServiceType[] GetServiceTypes()
        {
            return GetServiceTypes(null);
        }

        private ServiceType[] GetServiceTypes(SqlInterface si)
        {
            ServiceType[] serviceTypes = null;

            string storedProcName = "efrcrm_get_service_types";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    serviceTypes = new ServiceType[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            serviceTypes[i] = LoadServiceType(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return serviceTypes;
        }



        #endregion

        #region Site Methods

        private Site LoadSite(DataRow row)
        {
            Site site = new Site();

            // Store database values into our business object
            site.SiteId = DBValue.ToInt32(row["site_id"]);
            site.SiteTitle = DBValue.ToString(row["site_title"]);
            site.SiteContent = DBValue.ToString(row["site_content"]);

            // return the filled object
            return site;
        }

        public Site[] GetSites()
        {
            return GetSites(null);
        }

        private Site[] GetSites(SqlInterface si)
        {
            Site[] sites = null;

            string storedProcName = "efrcrm_get_sites";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    sites = new Site[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            sites[i] = LoadSite(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return sites;
        }


        public Site GetSiteByID(int id)
        {
            return GetSiteByID(id, null);
        }

        private Site GetSiteByID(int id, SqlInterface si)
        {
            Site site = null;

            string storedProcName = "efrcrm_get_site_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Site_Id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        site = LoadSite(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return site;
        }


        public int InsertSite(Site site)
        {
            return InsertSite(site, null);
        }

        private int InsertSite(Site site, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_site";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Site_Id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Site_Title", DbType.String, DBValue.ToDBString(site.SiteTitle)));
                paramCol.Add(new SqlDataParameter("@Site_Content", DbType.String, DBValue.ToDBString(site.SiteContent)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    site.SiteId = DBValue.ToInt32(paramCol["@Site_Id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateSite(Site site)
        {
            return UpdateSite(site, null);
        }

        private int UpdateSite(Site site, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_site";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Site_Id", DbType.Int32, DBValue.ToDBInt32(site.SiteId)));
                paramCol.Add(new SqlDataParameter("@Site_Title", DbType.String, DBValue.ToDBString(site.SiteTitle)));
                paramCol.Add(new SqlDataParameter("@Site_Content", DbType.String, DBValue.ToDBString(site.SiteContent)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region ShippingFee methods


        private ShippingFee LoadShippingFee(DataRow row)
        {
            ShippingFee shippingFee = new ShippingFee();

            // Store database values into our business object
            shippingFee.ShippingFeeID = DBValue.ToInt32(row["shipping_fee_id"]);
            shippingFee.SaleAmtMin = DBValue.ToInt32(row["sale_amt_min"]);
            shippingFee.SaleAmtMax = DBValue.ToInt32(row["sale_amt_max"]);
            shippingFee._ShippingFee = DBValue.ToInt32(row["shipping_fee"]);
            // return the filled object
            return shippingFee;
        }


        public ShippingFee GetShippingFeeByBusinessRuleIDAndTotalAmount(int businessRuleID, decimal totalAmount)
        {
            return GetShippingFeeByBusinessRuleIDAndTotalAmount(businessRuleID, totalAmount, null);
        }

        private ShippingFee GetShippingFeeByBusinessRuleIDAndTotalAmount(int businessRuleID, decimal totalAmount, SqlInterface si)
        {
            ShippingFee shippingFee = null;

            string storedProcName = "efrcrm_get_shipping_fee_by_business_rule_id_and_total_amount";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@product_business_rule_id", DbType.Int32, DBValue.ToDBInt32(businessRuleID)));
                paramCol.Add(new SqlDataParameter("@total_amount", DbType.Decimal, DBValue.ToDBDecimal(totalAmount)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        shippingFee = LoadShippingFee(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return shippingFee;
        }


        #endregion

        #region SpecialOffer Methods

        private SpecialOffer LoadSpecialOffer(DataRow row)
        {
            SpecialOffer specialOffer = new SpecialOffer();

            // Store database values into our business object
            specialOffer.SpecialOfferId = DBValue.ToInt16(row["special_offer_id"]);
            specialOffer.BrandId = DBValue.ToInt32(row["brand_id"]);
            specialOffer.ProductClassId = DBValue.ToInt16(row["product_class_id"]);
            specialOffer.SpecialOfferText = DBValue.ToString(row["special_offer_text"]);

            // return the filled object
            return specialOffer;
        }

        public SpecialOffer[] GetSpecialOffers()
        {
            return GetSpecialOffers(null);
        }

        private SpecialOffer[] GetSpecialOffers(SqlInterface si)
        {
            SpecialOffer[] specialOffers = null;

            string storedProcName = "efrcrm_get_special_offers";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    specialOffers = new SpecialOffer[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            specialOffers[i] = LoadSpecialOffer(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return specialOffers;
        }



        #endregion

        #region SponsorConsultant Methods

        private SponsorConsultant LoadSponsorConsultant(DataRow row)
        {
            SponsorConsultant sponsorConsultant = new SponsorConsultant();

            // Store database values into our business object
            sponsorConsultant.SponsorConsultantID = DBValue.ToInt32(row["sponsor_consultant_id"]);
            sponsorConsultant.FirstName = DBValue.ToString(row["first_name"]);
            sponsorConsultant.MiddleInitial = DBValue.ToString(row["middle initial"]);
            sponsorConsultant.LastName = DBValue.ToString(row["last_name"]);
            sponsorConsultant.Title = DBValue.ToString(row["title"]);
            sponsorConsultant.DayPhone = DBValue.ToString(row["day_phone"]);
            sponsorConsultant.DayTimeCall = DBValue.ToString(row["day_time_call"]);
            sponsorConsultant.EveningPhone = DBValue.ToString(row["evening_phone"]);
            sponsorConsultant.EvenigTimeCall = DBValue.ToString(row["evenig_time_call"]);
            sponsorConsultant.AlternatePhone = DBValue.ToString(row["alternate_phone"]);
            sponsorConsultant.Fax = DBValue.ToString(row["fax"]);
            sponsorConsultant.Email = DBValue.ToString(row["email"]);
            sponsorConsultant.Comment = DBValue.ToString(row["comment"]);
            sponsorConsultant.IsActive = DBValue.ToInt32(row["is_active"]);
            sponsorConsultant.NtLogin = DBValue.ToString(row["nt_login"]);
            sponsorConsultant.CommissionRate = DBValue.ToInt16(row["commission_rate"]);

            // return the filled object
            return sponsorConsultant;
        }

        public SponsorConsultant[] GetSponsorConsultants()
        {
            return GetSponsorConsultants(null);
        }

        private SponsorConsultant[] GetSponsorConsultants(SqlInterface si)
        {
            SponsorConsultant[] sponsorConsultants = null;

            string storedProcName = "efrcrm_get_sponsor_consultants";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    sponsorConsultants = new SponsorConsultant[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            sponsorConsultants[i] = LoadSponsorConsultant(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return sponsorConsultants;
        }


        public SponsorConsultant GetSponsorConsultantByID(int id)
        {
            return GetSponsorConsultantByID(id, null);
        }

        private SponsorConsultant GetSponsorConsultantByID(int id, SqlInterface si)
        {
            SponsorConsultant sponsorConsultant = null;

            string storedProcName = "efrcrm_get_sponsor_consultant_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sponsor_Consultant_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        sponsorConsultant = LoadSponsorConsultant(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return sponsorConsultant;
        }


        public int InsertSponsorConsultant(SponsorConsultant sponsorConsultant)
        {
            return InsertSponsorConsultant(sponsorConsultant, null);
        }

        private int InsertSponsorConsultant(SponsorConsultant sponsorConsultant, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_sponsor_consultant";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sponsor_Consultant_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@First_Name", DbType.String, DBValue.ToDBString(sponsorConsultant.FirstName)));
                paramCol.Add(new SqlDataParameter("@MiddleInitial", DbType.String, DBValue.ToDBString(sponsorConsultant.MiddleInitial)));
                paramCol.Add(new SqlDataParameter("@Last_Name", DbType.String, DBValue.ToDBString(sponsorConsultant.LastName)));
                paramCol.Add(new SqlDataParameter("@Title", DbType.String, DBValue.ToDBString(sponsorConsultant.Title)));
                paramCol.Add(new SqlDataParameter("@Day_Phone", DbType.String, DBValue.ToDBString(sponsorConsultant.DayPhone)));
                paramCol.Add(new SqlDataParameter("@Day_Time_Call", DbType.String, DBValue.ToDBString(sponsorConsultant.DayTimeCall)));
                paramCol.Add(new SqlDataParameter("@Evening_Phone", DbType.String, DBValue.ToDBString(sponsorConsultant.EveningPhone)));
                paramCol.Add(new SqlDataParameter("@Evenig_Time_Call", DbType.String, DBValue.ToDBString(sponsorConsultant.EvenigTimeCall)));
                paramCol.Add(new SqlDataParameter("@Alternate_Phone", DbType.String, DBValue.ToDBString(sponsorConsultant.AlternatePhone)));
                paramCol.Add(new SqlDataParameter("@Fax", DbType.String, DBValue.ToDBString(sponsorConsultant.Fax)));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(sponsorConsultant.Email)));
                paramCol.Add(new SqlDataParameter("@Comment", DbType.String, DBValue.ToDBString(sponsorConsultant.Comment)));
                paramCol.Add(new SqlDataParameter("@Is_Active", DbType.Int32, DBValue.ToDBInt32(sponsorConsultant.IsActive)));
                paramCol.Add(new SqlDataParameter("@Nt_Login", DbType.String, DBValue.ToDBString(sponsorConsultant.NtLogin)));
                paramCol.Add(new SqlDataParameter("@Commission_Rate", DbType.Single, DBValue.ToDBFloat(sponsorConsultant.CommissionRate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    sponsorConsultant.SponsorConsultantID = DBValue.ToInt32(paramCol["@Sponsor_Consultant_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateSponsorConsultant(SponsorConsultant sponsorConsultant)
        {
            return UpdateSponsorConsultant(sponsorConsultant, null);
        }

        private int UpdateSponsorConsultant(SponsorConsultant sponsorConsultant, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_sponsor_consultant";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sponsor_Consultant_ID", DbType.Int32, DBValue.ToDBInt32(sponsorConsultant.SponsorConsultantID)));
                paramCol.Add(new SqlDataParameter("@First_Name", DbType.String, DBValue.ToDBString(sponsorConsultant.FirstName)));
                paramCol.Add(new SqlDataParameter("@MiddleInitial", DbType.String, DBValue.ToDBString(sponsorConsultant.MiddleInitial)));
                paramCol.Add(new SqlDataParameter("@Last_Name", DbType.String, DBValue.ToDBString(sponsorConsultant.LastName)));
                paramCol.Add(new SqlDataParameter("@Title", DbType.String, DBValue.ToDBString(sponsorConsultant.Title)));
                paramCol.Add(new SqlDataParameter("@Day_Phone", DbType.String, DBValue.ToDBString(sponsorConsultant.DayPhone)));
                paramCol.Add(new SqlDataParameter("@Day_Time_Call", DbType.String, DBValue.ToDBString(sponsorConsultant.DayTimeCall)));
                paramCol.Add(new SqlDataParameter("@Evening_Phone", DbType.String, DBValue.ToDBString(sponsorConsultant.EveningPhone)));
                paramCol.Add(new SqlDataParameter("@Evenig_Time_Call", DbType.String, DBValue.ToDBString(sponsorConsultant.EvenigTimeCall)));
                paramCol.Add(new SqlDataParameter("@Alternate_Phone", DbType.String, DBValue.ToDBString(sponsorConsultant.AlternatePhone)));
                paramCol.Add(new SqlDataParameter("@Fax", DbType.String, DBValue.ToDBString(sponsorConsultant.Fax)));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(sponsorConsultant.Email)));
                paramCol.Add(new SqlDataParameter("@Comment", DbType.String, DBValue.ToDBString(sponsorConsultant.Comment)));
                paramCol.Add(new SqlDataParameter("@Is_Active", DbType.Int32, DBValue.ToDBInt32(sponsorConsultant.IsActive)));
                paramCol.Add(new SqlDataParameter("@Nt_Login", DbType.String, DBValue.ToDBString(sponsorConsultant.NtLogin)));
                paramCol.Add(new SqlDataParameter("@Commission_Rate", DbType.Single, DBValue.ToDBFloat(sponsorConsultant.CommissionRate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region SponsorFoundStool Methods

        private SponsorFoundStool LoadSponsorFoundStool(DataRow row)
        {
            SponsorFoundStool sponsorFoundStool = new SponsorFoundStool();

            // Store database values into our business object
            sponsorFoundStool.StoolID = DBValue.ToInt32(row["stool_id"]);
            sponsorFoundStool.SalesID = DBValue.ToInt32(row["sales_id"]);
            sponsorFoundStool.UserName = DBValue.ToString(row["user_name"]);
            sponsorFoundStool.Valeur = DBValue.ToInt32(row["valeur"]);
            sponsorFoundStool.ModifDate = DBValue.ToString(row["modif_date"]);

            // return the filled object
            return sponsorFoundStool;
        }

        public SponsorFoundStool[] GetSponsorFoundStools()
        {
            return GetSponsorFoundStools(null);
        }

        private SponsorFoundStool[] GetSponsorFoundStools(SqlInterface si)
        {
            SponsorFoundStool[] sponsorFoundStools = null;

            string storedProcName = "efrcrm_get_sponsor_found_stools";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    sponsorFoundStools = new SponsorFoundStool[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            sponsorFoundStools[i] = LoadSponsorFoundStool(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return sponsorFoundStools;
        }


        public SponsorFoundStool GetSponsorFoundStoolByID(int id)
        {
            return GetSponsorFoundStoolByID(id, null);
        }

        private SponsorFoundStool GetSponsorFoundStoolByID(int id, SqlInterface si)
        {
            SponsorFoundStool sponsorFoundStool = null;

            string storedProcName = "efrcrm_get_sponsor_found_stool_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Stool_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        sponsorFoundStool = LoadSponsorFoundStool(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return sponsorFoundStool;
        }


        public int InsertSponsorFoundStool(SponsorFoundStool sponsorFoundStool)
        {
            return InsertSponsorFoundStool(sponsorFoundStool, null);
        }

        private int InsertSponsorFoundStool(SponsorFoundStool sponsorFoundStool, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_sponsor_found_stool";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Stool_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(sponsorFoundStool.SalesID)));
                paramCol.Add(new SqlDataParameter("@User_Name", DbType.String, DBValue.ToDBString(sponsorFoundStool.UserName)));
                paramCol.Add(new SqlDataParameter("@Valeur", DbType.Int32, DBValue.ToDBInt32(sponsorFoundStool.Valeur)));
                paramCol.Add(new SqlDataParameter("@Modif_Date", DbType.String, DBValue.ToDBString(sponsorFoundStool.ModifDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    sponsorFoundStool.StoolID = DBValue.ToInt32(paramCol["@Stool_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateSponsorFoundStool(SponsorFoundStool sponsorFoundStool)
        {
            return UpdateSponsorFoundStool(sponsorFoundStool, null);
        }

        private int UpdateSponsorFoundStool(SponsorFoundStool sponsorFoundStool, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_sponsor_found_stool";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Stool_ID", DbType.Int32, DBValue.ToDBInt32(sponsorFoundStool.StoolID)));
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(sponsorFoundStool.SalesID)));
                paramCol.Add(new SqlDataParameter("@User_Name", DbType.String, DBValue.ToDBString(sponsorFoundStool.UserName)));
                paramCol.Add(new SqlDataParameter("@Valeur", DbType.Int32, DBValue.ToDBInt32(sponsorFoundStool.Valeur)));
                paramCol.Add(new SqlDataParameter("@Modif_Date", DbType.String, DBValue.ToDBString(sponsorFoundStool.ModifDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region SportAssociation Methods

        private SportAssociation LoadSportAssociation(DataRow row)
        {
            SportAssociation sportAssociation = new SportAssociation();

            // Store database values into our business object
            sportAssociation.SportAssociationId = DBValue.ToInt32(row["sport_association_id"]);
            sportAssociation.SportAssDesc = DBValue.ToString(row["sport_ass_desc"]);

            // return the filled object
            return sportAssociation;
        }

        public SportAssociation[] GetSportAssociations()
        {
            return GetSportAssociations(null);
        }

        private SportAssociation[] GetSportAssociations(SqlInterface si)
        {
            SportAssociation[] sportAssociations = null;

            string storedProcName = "efrcrm_get_sport_associations";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    sportAssociations = new SportAssociation[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            sportAssociations[i] = LoadSportAssociation(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return sportAssociations;
        }


        public SportAssociation GetSportAssociationByID(int id)
        {
            return GetSportAssociationByID(id, null);
        }

        private SportAssociation GetSportAssociationByID(int id, SqlInterface si)
        {
            SportAssociation sportAssociation = null;

            string storedProcName = "efrcrm_get_sport_association_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sport_Association_Id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        sportAssociation = LoadSportAssociation(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return sportAssociation;
        }


        public int InsertSportAssociation(SportAssociation sportAssociation)
        {
            return InsertSportAssociation(sportAssociation, null);
        }

        private int InsertSportAssociation(SportAssociation sportAssociation, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_sport_association";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sport_Association_Id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Sport_Ass_Desc", DbType.String, DBValue.ToDBString(sportAssociation.SportAssDesc)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    sportAssociation.SportAssociationId = DBValue.ToInt32(paramCol["@Sport_Association_Id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateSportAssociation(SportAssociation sportAssociation)
        {
            return UpdateSportAssociation(sportAssociation, null);
        }

        private int UpdateSportAssociation(SportAssociation sportAssociation, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_sport_association";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sport_Association_Id", DbType.Int32, DBValue.ToDBInt32(sportAssociation.SportAssociationId)));
                paramCol.Add(new SqlDataParameter("@Sport_Ass_Desc", DbType.String, DBValue.ToDBString(sportAssociation.SportAssDesc)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region SSDropBox Methods

        private SSDropBox LoadSSDropBox(DataRow row)
        {
            SSDropBox ssDropBox = new SSDropBox();

            // Store database values into our business object
            ssDropBox.SSDropBoxId = DBValue.ToInt32(row["ss_drop_box_id"]);
            ssDropBox.SSDropBoxName = DBValue.ToString(row["ss_drop_box_name"]);
            ssDropBox.DisplayOrder = DBValue.ToInt32(row["display_order"]);

            // return the filled object
            return ssDropBox;
        }

        public SSDropBox[] GetSSDropBoxs()
        {
            return GetSSDropBoxs(null);
        }

        private SSDropBox[] GetSSDropBoxs(SqlInterface si)
        {
            SSDropBox[] ssDropBoxs = null;

            string storedProcName = "efrcrm_get_ss_drop_boxs";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    ssDropBoxs = new SSDropBox[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            ssDropBoxs[i] = LoadSSDropBox(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return ssDropBoxs;
        }


        public SSDropBox GetSSDropBoxByID(int id)
        {
            return GetSSDropBoxByID(id, null);
        }

        private SSDropBox GetSSDropBoxByID(int id, SqlInterface si)
        {
            SSDropBox ssDropBox = null;

            string storedProcName = "efrcrm_get_ss_drop_box_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@SS_Drop_Box_Id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        ssDropBox = LoadSSDropBox(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return ssDropBox;
        }


        public int InsertSSDropBox(SSDropBox ssDropBox)
        {
            return InsertSSDropBox(ssDropBox, null);
        }

        private int InsertSSDropBox(SSDropBox ssDropBox, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_ss_drop_box";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@SS_Drop_Box_Id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@SS_Drop_Box_Name", DbType.String, DBValue.ToDBString(ssDropBox.SSDropBoxName)));
                paramCol.Add(new SqlDataParameter("@Display_Order", DbType.Int32, DBValue.ToDBInt32(ssDropBox.DisplayOrder)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    ssDropBox.SSDropBoxId = DBValue.ToInt32(paramCol["@SS_Drop_Box_Id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateSSDropBox(SSDropBox ssDropBox)
        {
            return UpdateSSDropBox(ssDropBox, null);
        }

        private int UpdateSSDropBox(SSDropBox ssDropBox, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_ss_drop_box";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@SS_Drop_Box_Id", DbType.Int32, DBValue.ToDBInt32(ssDropBox.SSDropBoxId)));
                paramCol.Add(new SqlDataParameter("@SS_Drop_Box_Name", DbType.String, DBValue.ToDBString(ssDropBox.SSDropBoxName)));
                paramCol.Add(new SqlDataParameter("@Display_Order", DbType.Int32, DBValue.ToDBInt32(ssDropBox.DisplayOrder)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region SSDropBoxPackage Methods

        private SSDropBoxPackage LoadSSDropBoxPackage(DataRow row)
        {
            SSDropBoxPackage ssDropBoxPackage = new SSDropBoxPackage();

            // Store database values into our business object
            ssDropBoxPackage.SSDropBoxId = DBValue.ToInt32(row["ss_drop_box_id"]);
            ssDropBoxPackage.PackageId = DBValue.ToInt32(row["package_id"]);
            ssDropBoxPackage.DisplayOrder = DBValue.ToInt32(row["display_order"]);

            // return the filled object
            return ssDropBoxPackage;
        }

        public SSDropBoxPackage[] GetSSDropBoxPackages()
        {
            return GetSSDropBoxPackages(null);
        }

        private SSDropBoxPackage[] GetSSDropBoxPackages(SqlInterface si)
        {
            SSDropBoxPackage[] ssDropBoxPackages = null;

            string storedProcName = "efrcrm_get_ss_drop_box_packages";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    ssDropBoxPackages = new SSDropBoxPackage[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            ssDropBoxPackages[i] = LoadSSDropBoxPackage(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return ssDropBoxPackages;
        }


        public SSDropBoxPackage GetSSDropBoxPackageByID(int id)
        {
            return GetSSDropBoxPackageByID(id, null);
        }

        private SSDropBoxPackage GetSSDropBoxPackageByID(int id, SqlInterface si)
        {
            SSDropBoxPackage ssDropBoxPackage = null;

            string storedProcName = "efrcrm_get_ss_drop_box_package_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@SS_Drop_Box_Id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        ssDropBoxPackage = LoadSSDropBoxPackage(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return ssDropBoxPackage;
        }


        public int InsertSSDropBoxPackage(SSDropBoxPackage ssDropBoxPackage)
        {
            return InsertSSDropBoxPackage(ssDropBoxPackage, null);
        }

        private int InsertSSDropBoxPackage(SSDropBoxPackage ssDropBoxPackage, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_ss_drop_box_package";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@SS_Drop_Box_Id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Package_Id", DbType.Int32, DBValue.ToDBInt32(ssDropBoxPackage.PackageId)));
                paramCol.Add(new SqlDataParameter("@Display_Order", DbType.Int32, DBValue.ToDBInt32(ssDropBoxPackage.DisplayOrder)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    ssDropBoxPackage.SSDropBoxId = DBValue.ToInt32(paramCol["@SS_Drop_Box_Id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateSSDropBoxPackage(SSDropBoxPackage ssDropBoxPackage)
        {
            return UpdateSSDropBoxPackage(ssDropBoxPackage, null);
        }

        private int UpdateSSDropBoxPackage(SSDropBoxPackage ssDropBoxPackage, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_ss_drop_box_package";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@SS_Drop_Box_Id", DbType.Int32, DBValue.ToDBInt32(ssDropBoxPackage.SSDropBoxId)));
                paramCol.Add(new SqlDataParameter("@Package_Id", DbType.Int32, DBValue.ToDBInt32(ssDropBoxPackage.PackageId)));
                paramCol.Add(new SqlDataParameter("@Display_Order", DbType.Int32, DBValue.ToDBInt32(ssDropBoxPackage.DisplayOrder)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region State Methods

        private State LoadState(DataRow row)
        {
            State state = new State();

            // Store database values into our business object
            state.StateCode = DBValue.ToString(row["state_code"]);
            state.StateName = DBValue.ToString(row["state_name"]);
            state.AvgDeliveryDays = DBValue.ToInt32(row["avg_delivery_days"]);
            state.TimeZoneDifference = DBValue.ToInt32(row["time_zone_difference"]);
            state.CountryCode = DBValue.ToString(row["country_code"]);

            // return the filled object
            return state;
        }

        public State[] GetStates()
        {
            return GetStates(null);
        }

        private State[] GetStates(SqlInterface si)
        {
            State[] states = null;

            string storedProcName = "efrcrm_get_states";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    states = new State[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            states[i] = LoadState(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return states;
        }


        public State[] GetStatesByCountryCode(string countryCode)
        {
            return GetStatesByCountryCode(countryCode, null);
        }

        private State[] GetStatesByCountryCode(string countryCode, SqlInterface si)
        {
            State[] states = null;

            string storedProcName = "efrcrm_get_states_by_country_code";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Country_Code", DbType.String, DBValue.ToString(countryCode)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    states = new State[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            states[i] = LoadState(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return states;
        }


        #endregion

        #region StateTax Methods

        private StateTax LoadStateTax(DataRow row)
        {
            StateTax stateTax = new StateTax();

            // Store database values into our business object
            stateTax.StateCode = DBValue.ToString(row["state_code"]);
            stateTax.TaxCode = DBValue.ToString(row["tax_code"]);
            stateTax.EffectiveDate = DBValue.ToDateTime(row["effective_date"]);
            stateTax.TaxRate = DBValue.ToInt16(row["tax_rate"]);
            stateTax.TaxOrder = DBValue.ToInt32(row["tax_order"]);

            // return the filled object
            return stateTax;
        }

        public StateTax[] GetStateTaxs()
        {
            return GetStateTaxs(null);
        }

        private StateTax[] GetStateTaxs(SqlInterface si)
        {
            StateTax[] stateTaxs = null;

            string storedProcName = "efrcrm_get_state_taxs";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    stateTaxs = new StateTax[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            stateTaxs[i] = LoadStateTax(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return stateTaxs;
        }


        public DataTable GetStateTaxByClientID(int clientID, string clientSeqCode)
        {
            return GetStateTaxByClientID(clientID, clientSeqCode, null);
        }

        private DataTable GetStateTaxByClientID(int clientID, string clientSeqCode, SqlInterface si)
        {
            DataTable dt = null;

            string storedProcName = "efrcrm_get_state_tax_by_client_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@client_id", DbType.Int32, ParameterDirection.Input, clientID));
                paramCol.Add(new SqlDataParameter("@client_sequence_code", DbType.String, ParameterDirection.Input, clientSeqCode));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return dt;
        }

        #endregion

        #region Subdivision Methods

        private Subdivision LoadSubdivision(DataRow row)
        {
            Subdivision subdivision = new Subdivision();

            // Store database values into our business object
            subdivision.SubdivisionCode = DBValue.ToString(row["subdivision_code"]);
            subdivision.CountryCode = DBValue.ToString(row["country_code"]);
            subdivision.SubdivisionName1 = DBValue.ToString(row["subdivision_name_1"]);
            subdivision.SubdivisionName2 = DBValue.ToString(row["subdivision_name_2"]);
            subdivision.SubdivisionName3 = DBValue.ToString(row["subdivision_name_3"]);
            subdivision.RegionalDivision = DBValue.ToString(row["regional_division"]);
            subdivision.SubdivisionCategory = DBValue.ToString(row["subdivision_category"]);

            // return the filled object
            return subdivision;
        }

        public Subdivision[] GetSubdivisions()
        {
            return GetSubdivisions(null);
        }

        private Subdivision[] GetSubdivisions(SqlInterface si)
        {
            Subdivision[] subdivisions = null;

            string storedProcName = "efrcrm_get_subdivisions";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    subdivisions = new Subdivision[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            subdivisions[i] = LoadSubdivision(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return subdivisions;
        }

        public Subdivision[] GetSubdivisionsByCountryCode(string country)
        {
            return GetSubdivisionsByCountryCode(country, null);
        }

        private Subdivision[] GetSubdivisionsByCountryCode(string country, SqlInterface si)
        {
            Subdivision[] subdivisions = null;

            string storedProcName = "efrcrm_get_subdivisions_by_country_code";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@country_code", DbType.String, DBValue.ToDBString(country)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    subdivisions = new Subdivision[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            subdivisions[i] = LoadSubdivision(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return subdivisions;
        }

        public Subdivision GetSubdivisionByCode(string code)
        {
            return GetSubdivisionByCode(code, null);
        }

        private Subdivision GetSubdivisionByCode(string code, SqlInterface si)
        {
            Subdivision subdivision = null;

            string storedProcName = "efrcrm_get_subdivision_by_code";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Subdivision_code", DbType.String, DBValue.ToDBString(code)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        subdivision = LoadSubdivision(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return subdivision;
        }

        #endregion

        #region Supplier Methods

        private Supplier LoadSupplier(DataRow row)
        {
            Supplier supplier = new Supplier();

            // Store database values into our business object
            supplier.SupplierId = DBValue.ToInt16(row["supplier_id"]);
            supplier.SupplierName = DBValue.ToString(row["supplier_name"]);
            supplier.StreetAdress = DBValue.ToString(row["street_adress"]);
            supplier.City = DBValue.ToString(row["city"]);
            supplier.Zip = DBValue.ToString(row["zip"]);
            supplier.ContactName = DBValue.ToString(row["contact_name"]);
            supplier.Phone = DBValue.ToString(row["phone"]);
            supplier.Fax = DBValue.ToString(row["fax"]);
            supplier.AccountNo = DBValue.ToString(row["account_no"]);
            supplier.CreditMargin = DBValue.ToDouble(row["credit_margin"]);
            supplier.StateCode = DBValue.ToString(row["state_code"]);
            supplier.CountryCode = DBValue.ToString(row["country_code"]);
            supplier.Comments = DBValue.ToString(row["comments"]);

            // return the filled object
            return supplier;
        }

        public Supplier[] GetSuppliers()
        {
            return GetSuppliers(null);
        }

        private Supplier[] GetSuppliers(SqlInterface si)
        {
            Supplier[] suppliers = null;

            string storedProcName = "efrcrm_get_suppliers";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    suppliers = new Supplier[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            suppliers[i] = LoadSupplier(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return suppliers;
        }



        #endregion

        #region Tags Methods

        private Tags LoadTags(DataRow row)
        {
            Tags tags = new Tags();

            // Store database values into our business object
            tags.TagsID = DBValue.ToInt32(row["tags_id"]);
            tags.Label = DBValue.ToString(row["label"]);
            tags.ControlName = DBValue.ToString(row["control_name"]);

            // return the filled object
            return tags;
        }

        public Tags[] GetTagss()
        {
            return GetTagss(null);
        }

        private Tags[] GetTagss(SqlInterface si)
        {
            Tags[] tagss = null;

            string storedProcName = "efrcrm_get_tagss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    tagss = new Tags[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            tagss[i] = LoadTags(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return tagss;
        }


        public Tags GetTagsByID(int id)
        {
            return GetTagsByID(id, null);
        }

        private Tags GetTagsByID(int id, SqlInterface si)
        {
            Tags tags = null;

            string storedProcName = "efrcrm_get_tags_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Tags_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        tags = LoadTags(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return tags;
        }


        public int InsertTags(Tags tags)
        {
            return InsertTags(tags, null);
        }

        private int InsertTags(Tags tags, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_tags";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Tags_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Label", DbType.String, DBValue.ToDBString(tags.Label)));
                paramCol.Add(new SqlDataParameter("@Control_Name", DbType.String, DBValue.ToDBString(tags.ControlName)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    tags.TagsID = DBValue.ToInt32(paramCol["@Tags_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateTags(Tags tags)
        {
            return UpdateTags(tags, null);
        }

        private int UpdateTags(Tags tags, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_tags";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Tags_ID", DbType.Int32, DBValue.ToDBInt32(tags.TagsID)));
                paramCol.Add(new SqlDataParameter("@Label", DbType.String, DBValue.ToDBString(tags.Label)));
                paramCol.Add(new SqlDataParameter("@Control_Name", DbType.String, DBValue.ToDBString(tags.ControlName)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region TargetedMarket Methods

        private TargetedMarket LoadTargetedMarket(DataRow row)
        {
            TargetedMarket targetedMarket = new TargetedMarket();

            // Store database values into our business object
            targetedMarket.TargetedMarketID = DBValue.ToInt32(row["targeted_market_id"]);
            targetedMarket.TargetedMarketTypeID = DBValue.ToInt32(row["targeted_market_type_id"]);
            targetedMarket.AdvertisingSupportID = DBValue.ToInt32(row["advertising_support_id"]);
            targetedMarket.TargetMarketTypeID = DBValue.ToInt32(row["target_market_type_id"]);
            targetedMarket.Seasoner = DBValue.ToInt32(row["seasoner"]);
            targetedMarket.AgeRange = DBValue.ToString(row["age_range"]);
            targetedMarket.EducationLevel = DBValue.ToString(row["education_level"]);
            targetedMarket.Description = DBValue.ToString(row["description"]);
            targetedMarket.Comments = DBValue.ToString(row["comments"]);

            // return the filled object
            return targetedMarket;
        }

        public TargetedMarket[] GetTargetedMarkets()
        {
            return GetTargetedMarkets(null);
        }

        private TargetedMarket[] GetTargetedMarkets(SqlInterface si)
        {
            TargetedMarket[] targetedMarkets = null;

            string storedProcName = "efrcrm_get_targeted_markets";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    targetedMarkets = new TargetedMarket[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            targetedMarkets[i] = LoadTargetedMarket(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return targetedMarkets;
        }


        public TargetedMarket GetTargetedMarketByID(int id)
        {
            return GetTargetedMarketByID(id, null);
        }

        private TargetedMarket GetTargetedMarketByID(int id, SqlInterface si)
        {
            TargetedMarket targetedMarket = null;

            string storedProcName = "efrcrm_get_targeted_market_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Targeted_Market_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        targetedMarket = LoadTargetedMarket(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return targetedMarket;
        }


        public int InsertTargetedMarket(TargetedMarket targetedMarket)
        {
            return InsertTargetedMarket(targetedMarket, null);
        }

        private int InsertTargetedMarket(TargetedMarket targetedMarket, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_targeted_market";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Targeted_Market_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Targeted_Market_Type_ID", DbType.Int32, DBValue.ToDBInt32(targetedMarket.TargetedMarketTypeID)));
                paramCol.Add(new SqlDataParameter("@Advertising_Support_ID", DbType.Int32, DBValue.ToDBInt32(targetedMarket.AdvertisingSupportID)));
                paramCol.Add(new SqlDataParameter("@Target_Market_Type_ID", DbType.Int32, DBValue.ToDBInt32(targetedMarket.TargetMarketTypeID)));
                paramCol.Add(new SqlDataParameter("@Seasoner", DbType.Int32, DBValue.ToDBInt32(targetedMarket.Seasoner)));
                paramCol.Add(new SqlDataParameter("@Age_Range", DbType.String, DBValue.ToDBString(targetedMarket.AgeRange)));
                paramCol.Add(new SqlDataParameter("@Education_Level", DbType.String, DBValue.ToDBString(targetedMarket.EducationLevel)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(targetedMarket.Description)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(targetedMarket.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    targetedMarket.TargetedMarketID = DBValue.ToInt32(paramCol["@Targeted_Market_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateTargetedMarket(TargetedMarket targetedMarket)
        {
            return UpdateTargetedMarket(targetedMarket, null);
        }

        private int UpdateTargetedMarket(TargetedMarket targetedMarket, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_targeted_market";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Targeted_Market_ID", DbType.Int32, DBValue.ToDBInt32(targetedMarket.TargetedMarketID)));
                paramCol.Add(new SqlDataParameter("@Targeted_Market_Type_ID", DbType.Int32, DBValue.ToDBInt32(targetedMarket.TargetedMarketTypeID)));
                paramCol.Add(new SqlDataParameter("@Advertising_Support_ID", DbType.Int32, DBValue.ToDBInt32(targetedMarket.AdvertisingSupportID)));
                paramCol.Add(new SqlDataParameter("@Target_Market_Type_ID", DbType.Int32, DBValue.ToDBInt32(targetedMarket.TargetMarketTypeID)));
                paramCol.Add(new SqlDataParameter("@Seasoner", DbType.Int32, DBValue.ToDBInt32(targetedMarket.Seasoner)));
                paramCol.Add(new SqlDataParameter("@Age_Range", DbType.String, DBValue.ToDBString(targetedMarket.AgeRange)));
                paramCol.Add(new SqlDataParameter("@Education_Level", DbType.String, DBValue.ToDBString(targetedMarket.EducationLevel)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(targetedMarket.Description)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(targetedMarket.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region TargetedMarketType Methods

        private TargetedMarketType LoadTargetedMarketType(DataRow row)
        {
            TargetedMarketType targetedMarketType = new TargetedMarketType();

            // Store database values into our business object
            targetedMarketType.TargetedMarketTypeId = DBValue.ToInt32(row["targeted_market_type_id"]);
            targetedMarketType.Description = DBValue.ToString(row["description"]);
            targetedMarketType.DecisionMaker = DBValue.ToInt32(row["decision_maker"]);
            targetedMarketType.GroupTypeId = DBValue.ToInt16(row["group_type_id"]);
            targetedMarketType.Comments = DBValue.ToString(row["comments"]);

            // return the filled object
            return targetedMarketType;
        }

        public TargetedMarketType[] GetTargetedMarketTypes()
        {
            return GetTargetedMarketTypes(null);
        }

        private TargetedMarketType[] GetTargetedMarketTypes(SqlInterface si)
        {
            TargetedMarketType[] targetedMarketTypes = null;

            string storedProcName = "efrcrm_get_targeted_market_types";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    targetedMarketTypes = new TargetedMarketType[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            targetedMarketTypes[i] = LoadTargetedMarketType(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return targetedMarketTypes;
        }


        public TargetedMarketType GetTargetedMarketTypeByID(int id)
        {
            return GetTargetedMarketTypeByID(id, null);
        }

        private TargetedMarketType GetTargetedMarketTypeByID(int id, SqlInterface si)
        {
            TargetedMarketType targetedMarketType = null;

            string storedProcName = "efrcrm_get_targeted_market_type_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Targeted_market_type_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        targetedMarketType = LoadTargetedMarketType(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return targetedMarketType;
        }


        public int InsertTargetedMarketType(TargetedMarketType targetedMarketType)
        {
            return InsertTargetedMarketType(targetedMarketType, null);
        }

        private int InsertTargetedMarketType(TargetedMarketType targetedMarketType, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_targeted_market_type";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Targeted_market_type_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(targetedMarketType.Description)));
                paramCol.Add(new SqlDataParameter("@Decision_maker", DbType.Int32, DBValue.ToDBInt32(targetedMarketType.DecisionMaker)));
                paramCol.Add(new SqlDataParameter("@Group_type_id", DbType.Int16, DBValue.ToDBInt16(targetedMarketType.GroupTypeId)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(targetedMarketType.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    targetedMarketType.TargetedMarketTypeId = DBValue.ToInt32(paramCol["@Targeted_market_type_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateTargetedMarketType(TargetedMarketType targetedMarketType)
        {
            return UpdateTargetedMarketType(targetedMarketType, null);
        }

        private int UpdateTargetedMarketType(TargetedMarketType targetedMarketType, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_targeted_market_type";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Targeted_market_type_id", DbType.Int32, DBValue.ToDBInt32(targetedMarketType.TargetedMarketTypeId)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(targetedMarketType.Description)));
                paramCol.Add(new SqlDataParameter("@Decision_maker", DbType.Int32, DBValue.ToDBInt32(targetedMarketType.DecisionMaker)));
                paramCol.Add(new SqlDataParameter("@Group_type_id", DbType.Int16, DBValue.ToDBInt16(targetedMarketType.GroupTypeId)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(targetedMarketType.Comments)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region TaxTable Methods

        private TaxTable LoadTaxTable(DataRow row)
        {
            TaxTable taxTable = new TaxTable();

            // Store database values into our business object
            taxTable.TaxCode = DBValue.ToString(row["tax_code"]);
            taxTable.Description = DBValue.ToString(row["description"]);
            taxTable.TaxAccountNumber = DBValue.ToString(row["tax_account_number"]);
            taxTable.DescriptionFrancaise = DBValue.ToString(row["description_francaise"]);

            // return the filled object
            return taxTable;
        }

        public TaxTable[] GetTaxTables()
        {
            return GetTaxTables(null);
        }

        private TaxTable[] GetTaxTables(SqlInterface si)
        {
            TaxTable[] taxTables = null;

            string storedProcName = "efrcrm_get_tax_tables";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    taxTables = new TaxTable[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            taxTables[i] = LoadTaxTable(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return taxTables;
        }



        #endregion

        #region TempDmUsaHockeyInline1 Methods

        private TempDmUsaHockeyInline1 LoadTempDmUsaHockeyInline1(DataRow row)
        {
            TempDmUsaHockeyInline1 tempDmUsaHockeyInline1 = new TempDmUsaHockeyInline1();

            // Store database values into our business object
            tempDmUsaHockeyInline1.Id = DBValue.ToInt32(row["id"]);
            tempDmUsaHockeyInline1.Compagnie = DBValue.ToString(row["compagnie"]);
            tempDmUsaHockeyInline1.Contact = DBValue.ToString(row["contact"]);
            tempDmUsaHockeyInline1.Address1 = DBValue.ToString(row["address1"]);
            tempDmUsaHockeyInline1.Address2 = DBValue.ToString(row["address2"]);
            tempDmUsaHockeyInline1.City = DBValue.ToString(row["city"]);
            tempDmUsaHockeyInline1.State = DBValue.ToString(row["state"]);
            tempDmUsaHockeyInline1.Zip = DBValue.ToString(row["zip"]);
            tempDmUsaHockeyInline1.Phone = DBValue.ToString(row["phone"]);
            tempDmUsaHockeyInline1.Ext = DBValue.ToString(row["ext"]);

            // return the filled object
            return tempDmUsaHockeyInline1;
        }

        public TempDmUsaHockeyInline1[] GetTempDmUsaHockeyInline1s()
        {
            return GetTempDmUsaHockeyInline1s(null);
        }

        private TempDmUsaHockeyInline1[] GetTempDmUsaHockeyInline1s(SqlInterface si)
        {
            TempDmUsaHockeyInline1[] tempDmUsaHockeyInline1s = null;

            string storedProcName = "efrcrm_get_temp_dm_usa_hockey_inline_1s";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    tempDmUsaHockeyInline1s = new TempDmUsaHockeyInline1[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            tempDmUsaHockeyInline1s[i] = LoadTempDmUsaHockeyInline1(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return tempDmUsaHockeyInline1s;
        }


        public TempDmUsaHockeyInline1 GetTempDmUsaHockeyInline1ByID(int id)
        {
            return GetTempDmUsaHockeyInline1ByID(id, null);
        }

        private TempDmUsaHockeyInline1 GetTempDmUsaHockeyInline1ByID(int id, SqlInterface si)
        {
            TempDmUsaHockeyInline1 tempDmUsaHockeyInline1 = null;

            string storedProcName = "efrcrm_get_temp_dm_usa_hockey_inline_1_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        tempDmUsaHockeyInline1 = LoadTempDmUsaHockeyInline1(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return tempDmUsaHockeyInline1;
        }


        public int InsertTempDmUsaHockeyInline1(TempDmUsaHockeyInline1 tempDmUsaHockeyInline1)
        {
            return InsertTempDmUsaHockeyInline1(tempDmUsaHockeyInline1, null);
        }

        private int InsertTempDmUsaHockeyInline1(TempDmUsaHockeyInline1 tempDmUsaHockeyInline1, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_temp_dm_usa_hockey_inline_1";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Compagnie", DbType.String, DBValue.ToDBString(tempDmUsaHockeyInline1.Compagnie)));
                paramCol.Add(new SqlDataParameter("@Contact", DbType.String, DBValue.ToDBString(tempDmUsaHockeyInline1.Contact)));
                paramCol.Add(new SqlDataParameter("@Address1", DbType.String, DBValue.ToDBString(tempDmUsaHockeyInline1.Address1)));
                paramCol.Add(new SqlDataParameter("@Address2", DbType.String, DBValue.ToDBString(tempDmUsaHockeyInline1.Address2)));
                paramCol.Add(new SqlDataParameter("@City", DbType.String, DBValue.ToDBString(tempDmUsaHockeyInline1.City)));
                paramCol.Add(new SqlDataParameter("@State", DbType.String, DBValue.ToDBString(tempDmUsaHockeyInline1.State)));
                paramCol.Add(new SqlDataParameter("@Zip", DbType.String, DBValue.ToDBString(tempDmUsaHockeyInline1.Zip)));
                paramCol.Add(new SqlDataParameter("@Phone", DbType.String, DBValue.ToDBString(tempDmUsaHockeyInline1.Phone)));
                paramCol.Add(new SqlDataParameter("@Ext", DbType.String, DBValue.ToDBString(tempDmUsaHockeyInline1.Ext)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    tempDmUsaHockeyInline1.Id = DBValue.ToInt32(paramCol["@Id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateTempDmUsaHockeyInline1(TempDmUsaHockeyInline1 tempDmUsaHockeyInline1)
        {
            return UpdateTempDmUsaHockeyInline1(tempDmUsaHockeyInline1, null);
        }

        private int UpdateTempDmUsaHockeyInline1(TempDmUsaHockeyInline1 tempDmUsaHockeyInline1, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_temp_dm_usa_hockey_inline_1";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Id", DbType.Int32, DBValue.ToDBInt32(tempDmUsaHockeyInline1.Id)));
                paramCol.Add(new SqlDataParameter("@Compagnie", DbType.String, DBValue.ToDBString(tempDmUsaHockeyInline1.Compagnie)));
                paramCol.Add(new SqlDataParameter("@Contact", DbType.String, DBValue.ToDBString(tempDmUsaHockeyInline1.Contact)));
                paramCol.Add(new SqlDataParameter("@Address1", DbType.String, DBValue.ToDBString(tempDmUsaHockeyInline1.Address1)));
                paramCol.Add(new SqlDataParameter("@Address2", DbType.String, DBValue.ToDBString(tempDmUsaHockeyInline1.Address2)));
                paramCol.Add(new SqlDataParameter("@City", DbType.String, DBValue.ToDBString(tempDmUsaHockeyInline1.City)));
                paramCol.Add(new SqlDataParameter("@State", DbType.String, DBValue.ToDBString(tempDmUsaHockeyInline1.State)));
                paramCol.Add(new SqlDataParameter("@Zip", DbType.String, DBValue.ToDBString(tempDmUsaHockeyInline1.Zip)));
                paramCol.Add(new SqlDataParameter("@Phone", DbType.String, DBValue.ToDBString(tempDmUsaHockeyInline1.Phone)));
                paramCol.Add(new SqlDataParameter("@Ext", DbType.String, DBValue.ToDBString(tempDmUsaHockeyInline1.Ext)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region TempLead Methods

        private TempLead LoadTempLead(DataRow row)
        {
            TempLead tempLead = new TempLead();

            // Store database values into our business object
            tempLead.DivisionID = DBValue.ToInt32(row["division_id"]);
            tempLead.PromotionID = DBValue.ToInt32(row["promotion_id"]);
            tempLead.TempLeadId = DBValue.ToInt32(row["temp_lead_id"]);
            tempLead.ChannelCode = DBValue.ToString(row["channel_code"]);
            tempLead.LeadStatusID = DBValue.ToInt32(row["lead_status_id"]);
            tempLead.ConsultantID = DBValue.ToInt32(row["consultant_id"]);
            tempLead.LeadEntryDate = DBValue.ToDateTime(row["lead_entry_date"]);
            tempLead.Salutation = DBValue.ToString(row["salutation"]);
            tempLead.FirstName = DBValue.ToString(row["first_name"]);
            tempLead.LastName = DBValue.ToString(row["last_name"]);
            tempLead.Title = DBValue.ToString(row["title"]);
            tempLead.Organization = DBValue.ToString(row["organization"]);
            tempLead.StreetAddress = DBValue.ToString(row["street_address"]);
            tempLead.City = DBValue.ToString(row["city"]);
            tempLead.StateCode = DBValue.ToString(row["state_code"]);
            tempLead.CountryCode = DBValue.ToString(row["country_code"]);
            tempLead.ZipCode = DBValue.ToString(row["zip_code"]);
            tempLead.DayPhone = DBValue.ToString(row["day_phone"]);
            tempLead.DayTimeCall = DBValue.ToString(row["day_time_call"]);
            tempLead.EveningPhone = DBValue.ToString(row["evening_phone"]);
            tempLead.EveningTimeCall = DBValue.ToString(row["evening_time_call"]);
            tempLead.Fax = DBValue.ToString(row["fax"]);
            tempLead.Email = DBValue.ToString(row["email"]);
            tempLead.GroupTypeID = DBValue.ToInt32(row["group_type_id"]);
            tempLead.MemberCount = DBValue.ToInt32(row["member_count"]);
            tempLead.ParticipantCount = DBValue.ToInt32(row["participant_count"]);
            tempLead.FundRaisingGoal = DBValue.ToInt32(row["fund_raising_goal"]);
            tempLead.DecisionDate = DBValue.ToDateTime(row["decision_date"]);
            tempLead.DecisionMaker = DBValue.ToInt32(row["decision_maker"]);
            tempLead.CommitteeMeetingRequired = DBValue.ToInt32(row["committee_meeting_required"]);
            tempLead.CommitteeMeetingDate = DBValue.ToDateTime(row["committee_meeting_date"]);
            tempLead.FundRaiserStartDate = DBValue.ToDateTime(row["fund_raiser_start_date"]);
            tempLead.OnEmailList = DBValue.ToInt32(row["onemaillist"]);
            tempLead.FaxKit = DBValue.ToInt32(row["faxkit"]);
            tempLead.EmailKit = DBValue.ToInt32(row["emailkit"]);
            tempLead.Comments = DBValue.ToString(row["comments"]);
            tempLead.HearId = DBValue.ToInt32(row["hear_id"]);
            tempLead.KitToSend = DBValue.ToInt32(row["kit_to_send"]);
            tempLead.KitSent = DBValue.ToInt32(row["kit_sent"]);
            tempLead.KitSentDate = DBValue.ToDateTime(row["kit_sent_date"]);
            tempLead.OldLeadId = DBValue.ToInt32(row["old_lead_id"]);
            tempLead.LeadAssignmentDate = DBValue.ToDateTime(row["lead_assignment_date"]);
            tempLead.Interests = DBValue.ToString(row["interests"]);
            tempLead.HasBeenContacted = DBValue.ToInt32(row["has_been_contacted"]);
            tempLead.FkKitTypeID = DBValue.ToInt32(row["fk_kit_type_id"]);
            tempLead.LeadPriorityId = DBValue.ToInt32(row["lead_priority_id"]);
            tempLead.DayPhoneExt = DBValue.ToString(row["day_phone_ext"]);
            tempLead.EveningPhoneExt = DBValue.ToString(row["evening_phone_ext"]);
            tempLead.RejectionReason = DBValue.ToString(row["rejection_reason"]);
            tempLead.OtherPhone = DBValue.ToString(row["other_phone"]);
            tempLead.OtherPhoneExt = DBValue.ToString(row["other_phone_ext"]);
            tempLead.GroupWebSite = DBValue.ToString(row["group_web_site"]);
            tempLead.OrganizationTypeId = DBValue.ToInt32(row["organization_type_id"]);
            tempLead.CampaignReasonId = DBValue.ToInt32(row["campaign_reason_id"]);
            tempLead.TitleId = DBValue.ToInt32(row["title_id"]);
            tempLead.CookieContent = DBValue.ToString(row["cookie_content"]);
            tempLead.CampaignReason = DBValue.ToString(row["campaign_reason"]);
            tempLead.WebSiteId = DBValue.ToInt32(row["web_site_id"]);
            tempLead.IsNew = DBValue.ToInt32(row["isnew"]);

            // return the filled object
            return tempLead;
        }

        public TempLead[] GetTempLeads()
        {
            return GetTempLeads(null);
        }

        private TempLead[] GetTempLeads(SqlInterface si)
        {
            TempLead[] tempLeads = null;

            string storedProcName = "efrcrm_get_temp_leads";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    tempLeads = new TempLead[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            tempLeads[i] = LoadTempLead(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return tempLeads;
        }


        public TempLead GetTempLeadByID(int id)
        {
            return GetTempLeadByID(id, null);
        }

        private TempLead GetTempLeadByID(int id, SqlInterface si)
        {
            TempLead tempLead = null;

            string storedProcName = "efrcrm_get_temp_lead_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Division_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        tempLead = LoadTempLead(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return tempLead;
        }


        public int InsertTempLead(TempLead tempLead)
        {
            return InsertTempLead(tempLead, null);
        }

        private int InsertTempLead(TempLead tempLead, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_temp_lead";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Division_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Promotion_ID", DbType.Int32, DBValue.ToDBInt32(tempLead.PromotionID)));
                paramCol.Add(new SqlDataParameter("@Temp_Lead_Id", DbType.Int32, DBValue.ToDBInt32(tempLead.TempLeadId)));
                paramCol.Add(new SqlDataParameter("@Channel_Code", DbType.String, DBValue.ToDBString(tempLead.ChannelCode)));
                paramCol.Add(new SqlDataParameter("@Lead_Status_ID", DbType.Int32, DBValue.ToDBInt32(tempLead.LeadStatusID)));
                paramCol.Add(new SqlDataParameter("@Consultant_ID", DbType.Int32, DBValue.ToDBInt32(tempLead.ConsultantID)));
                paramCol.Add(new SqlDataParameter("@Lead_Entry_Date", DbType.DateTime, DBValue.ToDBDateTime(tempLead.LeadEntryDate)));
                paramCol.Add(new SqlDataParameter("@Salutation", DbType.String, DBValue.ToDBString(tempLead.Salutation)));
                paramCol.Add(new SqlDataParameter("@First_Name", DbType.String, DBValue.ToDBString(tempLead.FirstName)));
                paramCol.Add(new SqlDataParameter("@Last_Name", DbType.String, DBValue.ToDBString(tempLead.LastName)));
                paramCol.Add(new SqlDataParameter("@Title", DbType.String, DBValue.ToDBString(tempLead.Title)));
                paramCol.Add(new SqlDataParameter("@Organization", DbType.String, DBValue.ToDBString(tempLead.Organization)));
                paramCol.Add(new SqlDataParameter("@Street_Address", DbType.String, DBValue.ToDBString(tempLead.StreetAddress)));
                paramCol.Add(new SqlDataParameter("@City", DbType.String, DBValue.ToDBString(tempLead.City)));
                paramCol.Add(new SqlDataParameter("@State_Code", DbType.String, DBValue.ToDBString(tempLead.StateCode)));
                paramCol.Add(new SqlDataParameter("@Country_Code", DbType.String, DBValue.ToDBString(tempLead.CountryCode)));
                paramCol.Add(new SqlDataParameter("@Zip_Code", DbType.String, DBValue.ToDBString(tempLead.ZipCode)));
                paramCol.Add(new SqlDataParameter("@Day_Phone", DbType.String, DBValue.ToDBString(tempLead.DayPhone)));
                paramCol.Add(new SqlDataParameter("@Day_Time_Call", DbType.String, DBValue.ToDBString(tempLead.DayTimeCall)));
                paramCol.Add(new SqlDataParameter("@Evening_Phone", DbType.String, DBValue.ToDBString(tempLead.EveningPhone)));
                paramCol.Add(new SqlDataParameter("@Evening_Time_Call", DbType.String, DBValue.ToDBString(tempLead.EveningTimeCall)));
                paramCol.Add(new SqlDataParameter("@Fax", DbType.String, DBValue.ToDBString(tempLead.Fax)));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(tempLead.Email)));
                paramCol.Add(new SqlDataParameter("@Group_Type_ID", DbType.Int32, DBValue.ToDBInt32(tempLead.GroupTypeID)));
                paramCol.Add(new SqlDataParameter("@Member_Count", DbType.Int32, DBValue.ToDBInt32(tempLead.MemberCount)));
                paramCol.Add(new SqlDataParameter("@Participant_Count", DbType.Int32, DBValue.ToDBInt32(tempLead.ParticipantCount)));
                paramCol.Add(new SqlDataParameter("@Fund_Raising_Goal", DbType.Int32, DBValue.ToDBInt32(tempLead.FundRaisingGoal)));
                paramCol.Add(new SqlDataParameter("@Decision_Date", DbType.DateTime, DBValue.ToDBDateTime(tempLead.DecisionDate)));
                paramCol.Add(new SqlDataParameter("@Decision_Maker", DbType.Int32, DBValue.ToDBInt32(tempLead.DecisionMaker)));
                paramCol.Add(new SqlDataParameter("@Committee_Meeting_Required", DbType.Int32, DBValue.ToDBInt32(tempLead.CommitteeMeetingRequired)));
                paramCol.Add(new SqlDataParameter("@Committee_Meeting_Date", DbType.DateTime, DBValue.ToDBDateTime(tempLead.CommitteeMeetingDate)));
                paramCol.Add(new SqlDataParameter("@Fund_Raiser_Start_Date", DbType.DateTime, DBValue.ToDBDateTime(tempLead.FundRaiserStartDate)));
                paramCol.Add(new SqlDataParameter("@OnEmailList", DbType.Int32, DBValue.ToDBInt32(tempLead.OnEmailList)));
                paramCol.Add(new SqlDataParameter("@FaxKit", DbType.Int32, DBValue.ToDBInt32(tempLead.FaxKit)));
                paramCol.Add(new SqlDataParameter("@EmailKit", DbType.Int32, DBValue.ToDBInt32(tempLead.EmailKit)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(tempLead.Comments)));
                paramCol.Add(new SqlDataParameter("@Hear_Id", DbType.Int32, DBValue.ToDBInt32(tempLead.HearId)));
                paramCol.Add(new SqlDataParameter("@Kit_to_send", DbType.Int32, DBValue.ToDBInt32(tempLead.KitToSend)));
                paramCol.Add(new SqlDataParameter("@Kit_sent", DbType.Int32, DBValue.ToDBInt32(tempLead.KitSent)));
                paramCol.Add(new SqlDataParameter("@Kit_sent_date", DbType.DateTime, DBValue.ToDBDateTime(tempLead.KitSentDate)));
                paramCol.Add(new SqlDataParameter("@Old_Lead_Id", DbType.Int32, DBValue.ToDBInt32(tempLead.OldLeadId)));
                paramCol.Add(new SqlDataParameter("@Lead_Assignment_Date", DbType.DateTime, DBValue.ToDBDateTime(tempLead.LeadAssignmentDate)));
                paramCol.Add(new SqlDataParameter("@Interests", DbType.String, DBValue.ToDBString(tempLead.Interests)));
                paramCol.Add(new SqlDataParameter("@Has_Been_Contacted", DbType.Int32, DBValue.ToDBInt32(tempLead.HasBeenContacted)));
                paramCol.Add(new SqlDataParameter("@Fk_Kit_Type_ID", DbType.Int32, DBValue.ToDBInt32(tempLead.FkKitTypeID)));
                paramCol.Add(new SqlDataParameter("@Lead_Priority_Id", DbType.Int32, DBValue.ToDBInt32(tempLead.LeadPriorityId)));
                paramCol.Add(new SqlDataParameter("@Day_Phone_Ext", DbType.String, DBValue.ToDBString(tempLead.DayPhoneExt)));
                paramCol.Add(new SqlDataParameter("@Evening_Phone_Ext", DbType.String, DBValue.ToDBString(tempLead.EveningPhoneExt)));
                paramCol.Add(new SqlDataParameter("@Rejection_reason", DbType.String, DBValue.ToDBString(tempLead.RejectionReason)));
                paramCol.Add(new SqlDataParameter("@Other_Phone", DbType.String, DBValue.ToDBString(tempLead.OtherPhone)));
                paramCol.Add(new SqlDataParameter("@Other_Phone_Ext", DbType.String, DBValue.ToDBString(tempLead.OtherPhoneExt)));
                paramCol.Add(new SqlDataParameter("@Group_Web_Site", DbType.String, DBValue.ToDBString(tempLead.GroupWebSite)));
                paramCol.Add(new SqlDataParameter("@Organization_Type_Id", DbType.Int32, DBValue.ToDBInt32(tempLead.OrganizationTypeId)));
                paramCol.Add(new SqlDataParameter("@Campaign_Reason_Id", DbType.Int32, DBValue.ToDBInt32(tempLead.CampaignReasonId)));
                paramCol.Add(new SqlDataParameter("@Title_Id", DbType.Int32, DBValue.ToDBInt32(tempLead.TitleId)));
                paramCol.Add(new SqlDataParameter("@Cookie_Content", DbType.String, DBValue.ToDBString(tempLead.CookieContent)));
                paramCol.Add(new SqlDataParameter("@Campaign_Reason", DbType.String, DBValue.ToDBString(tempLead.CampaignReason)));
                paramCol.Add(new SqlDataParameter("@Web_Site_Id", DbType.Int32, DBValue.ToDBInt32(tempLead.WebSiteId)));
                paramCol.Add(new SqlDataParameter("@IsNew", DbType.Int32, DBValue.ToDBInt32(tempLead.IsNew)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    tempLead.DivisionID = DBValue.ToInt32(paramCol["@Division_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateTempLead(TempLead tempLead)
        {
            return UpdateTempLead(tempLead, null);
        }

        private int UpdateTempLead(TempLead tempLead, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_temp_lead";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Division_ID", DbType.Int32, DBValue.ToDBInt32(tempLead.DivisionID)));
                paramCol.Add(new SqlDataParameter("@Promotion_ID", DbType.Int32, DBValue.ToDBInt32(tempLead.PromotionID)));
                paramCol.Add(new SqlDataParameter("@Temp_Lead_Id", DbType.Int32, DBValue.ToDBInt32(tempLead.TempLeadId)));
                paramCol.Add(new SqlDataParameter("@Channel_Code", DbType.String, DBValue.ToDBString(tempLead.ChannelCode)));
                paramCol.Add(new SqlDataParameter("@Lead_Status_ID", DbType.Int32, DBValue.ToDBInt32(tempLead.LeadStatusID)));
                paramCol.Add(new SqlDataParameter("@Consultant_ID", DbType.Int32, DBValue.ToDBInt32(tempLead.ConsultantID)));
                paramCol.Add(new SqlDataParameter("@Lead_Entry_Date", DbType.DateTime, DBValue.ToDBDateTime(tempLead.LeadEntryDate)));
                paramCol.Add(new SqlDataParameter("@Salutation", DbType.String, DBValue.ToDBString(tempLead.Salutation)));
                paramCol.Add(new SqlDataParameter("@First_Name", DbType.String, DBValue.ToDBString(tempLead.FirstName)));
                paramCol.Add(new SqlDataParameter("@Last_Name", DbType.String, DBValue.ToDBString(tempLead.LastName)));
                paramCol.Add(new SqlDataParameter("@Title", DbType.String, DBValue.ToDBString(tempLead.Title)));
                paramCol.Add(new SqlDataParameter("@Organization", DbType.String, DBValue.ToDBString(tempLead.Organization)));
                paramCol.Add(new SqlDataParameter("@Street_Address", DbType.String, DBValue.ToDBString(tempLead.StreetAddress)));
                paramCol.Add(new SqlDataParameter("@City", DbType.String, DBValue.ToDBString(tempLead.City)));
                paramCol.Add(new SqlDataParameter("@State_Code", DbType.String, DBValue.ToDBString(tempLead.StateCode)));
                paramCol.Add(new SqlDataParameter("@Country_Code", DbType.String, DBValue.ToDBString(tempLead.CountryCode)));
                paramCol.Add(new SqlDataParameter("@Zip_Code", DbType.String, DBValue.ToDBString(tempLead.ZipCode)));
                paramCol.Add(new SqlDataParameter("@Day_Phone", DbType.String, DBValue.ToDBString(tempLead.DayPhone)));
                paramCol.Add(new SqlDataParameter("@Day_Time_Call", DbType.String, DBValue.ToDBString(tempLead.DayTimeCall)));
                paramCol.Add(new SqlDataParameter("@Evening_Phone", DbType.String, DBValue.ToDBString(tempLead.EveningPhone)));
                paramCol.Add(new SqlDataParameter("@Evening_Time_Call", DbType.String, DBValue.ToDBString(tempLead.EveningTimeCall)));
                paramCol.Add(new SqlDataParameter("@Fax", DbType.String, DBValue.ToDBString(tempLead.Fax)));
                paramCol.Add(new SqlDataParameter("@Email", DbType.String, DBValue.ToDBString(tempLead.Email)));
                paramCol.Add(new SqlDataParameter("@Group_Type_ID", DbType.Int32, DBValue.ToDBInt32(tempLead.GroupTypeID)));
                paramCol.Add(new SqlDataParameter("@Member_Count", DbType.Int32, DBValue.ToDBInt32(tempLead.MemberCount)));
                paramCol.Add(new SqlDataParameter("@Participant_Count", DbType.Int32, DBValue.ToDBInt32(tempLead.ParticipantCount)));
                paramCol.Add(new SqlDataParameter("@Fund_Raising_Goal", DbType.Int32, DBValue.ToDBInt32(tempLead.FundRaisingGoal)));
                paramCol.Add(new SqlDataParameter("@Decision_Date", DbType.DateTime, DBValue.ToDBDateTime(tempLead.DecisionDate)));
                paramCol.Add(new SqlDataParameter("@Decision_Maker", DbType.Int32, DBValue.ToDBInt32(tempLead.DecisionMaker)));
                paramCol.Add(new SqlDataParameter("@Committee_Meeting_Required", DbType.Int32, DBValue.ToDBInt32(tempLead.CommitteeMeetingRequired)));
                paramCol.Add(new SqlDataParameter("@Committee_Meeting_Date", DbType.DateTime, DBValue.ToDBDateTime(tempLead.CommitteeMeetingDate)));
                paramCol.Add(new SqlDataParameter("@Fund_Raiser_Start_Date", DbType.DateTime, DBValue.ToDBDateTime(tempLead.FundRaiserStartDate)));
                paramCol.Add(new SqlDataParameter("@OnEmailList", DbType.Int32, DBValue.ToDBInt32(tempLead.OnEmailList)));
                paramCol.Add(new SqlDataParameter("@FaxKit", DbType.Int32, DBValue.ToDBInt32(tempLead.FaxKit)));
                paramCol.Add(new SqlDataParameter("@EmailKit", DbType.Int32, DBValue.ToDBInt32(tempLead.EmailKit)));
                paramCol.Add(new SqlDataParameter("@Comments", DbType.String, DBValue.ToDBString(tempLead.Comments)));
                paramCol.Add(new SqlDataParameter("@Hear_Id", DbType.Int32, DBValue.ToDBInt32(tempLead.HearId)));
                paramCol.Add(new SqlDataParameter("@Kit_to_send", DbType.Int32, DBValue.ToDBInt32(tempLead.KitToSend)));
                paramCol.Add(new SqlDataParameter("@Kit_sent", DbType.Int32, DBValue.ToDBInt32(tempLead.KitSent)));
                paramCol.Add(new SqlDataParameter("@Kit_sent_date", DbType.DateTime, DBValue.ToDBDateTime(tempLead.KitSentDate)));
                paramCol.Add(new SqlDataParameter("@Old_Lead_Id", DbType.Int32, DBValue.ToDBInt32(tempLead.OldLeadId)));
                paramCol.Add(new SqlDataParameter("@Lead_Assignment_Date", DbType.DateTime, DBValue.ToDBDateTime(tempLead.LeadAssignmentDate)));
                paramCol.Add(new SqlDataParameter("@Interests", DbType.String, DBValue.ToDBString(tempLead.Interests)));
                paramCol.Add(new SqlDataParameter("@Has_Been_Contacted", DbType.Int32, DBValue.ToDBInt32(tempLead.HasBeenContacted)));
                paramCol.Add(new SqlDataParameter("@Fk_Kit_Type_ID", DbType.Int32, DBValue.ToDBInt32(tempLead.FkKitTypeID)));
                paramCol.Add(new SqlDataParameter("@Lead_Priority_Id", DbType.Int32, DBValue.ToDBInt32(tempLead.LeadPriorityId)));
                paramCol.Add(new SqlDataParameter("@Day_Phone_Ext", DbType.String, DBValue.ToDBString(tempLead.DayPhoneExt)));
                paramCol.Add(new SqlDataParameter("@Evening_Phone_Ext", DbType.String, DBValue.ToDBString(tempLead.EveningPhoneExt)));
                paramCol.Add(new SqlDataParameter("@Rejection_reason", DbType.String, DBValue.ToDBString(tempLead.RejectionReason)));
                paramCol.Add(new SqlDataParameter("@Other_Phone", DbType.String, DBValue.ToDBString(tempLead.OtherPhone)));
                paramCol.Add(new SqlDataParameter("@Other_Phone_Ext", DbType.String, DBValue.ToDBString(tempLead.OtherPhoneExt)));
                paramCol.Add(new SqlDataParameter("@Group_Web_Site", DbType.String, DBValue.ToDBString(tempLead.GroupWebSite)));
                paramCol.Add(new SqlDataParameter("@Organization_Type_Id", DbType.Int32, DBValue.ToDBInt32(tempLead.OrganizationTypeId)));
                paramCol.Add(new SqlDataParameter("@Campaign_Reason_Id", DbType.Int32, DBValue.ToDBInt32(tempLead.CampaignReasonId)));
                paramCol.Add(new SqlDataParameter("@Title_Id", DbType.Int32, DBValue.ToDBInt32(tempLead.TitleId)));
                paramCol.Add(new SqlDataParameter("@Cookie_Content", DbType.String, DBValue.ToDBString(tempLead.CookieContent)));
                paramCol.Add(new SqlDataParameter("@Campaign_Reason", DbType.String, DBValue.ToDBString(tempLead.CampaignReason)));
                paramCol.Add(new SqlDataParameter("@Web_Site_Id", DbType.Int32, DBValue.ToDBInt32(tempLead.WebSiteId)));
                paramCol.Add(new SqlDataParameter("@IsNew", DbType.Int32, DBValue.ToDBInt32(tempLead.IsNew)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region TempSaleZipCode Methods

        private TempSaleZipCode LoadTempSaleZipCode(DataRow row)
        {
            TempSaleZipCode tempSaleZipCode = new TempSaleZipCode();

            // Store database values into our business object
            tempSaleZipCode.ZipCode = DBValue.ToString(row["zip_code"]);
            tempSaleZipCode.SaleToAddID = DBValue.ToInt32(row["sale_to_add_id"]);

            // return the filled object
            return tempSaleZipCode;
        }

        public TempSaleZipCode[] GetTempSaleZipCodes()
        {
            return GetTempSaleZipCodes(null);
        }

        private TempSaleZipCode[] GetTempSaleZipCodes(SqlInterface si)
        {
            TempSaleZipCode[] tempSaleZipCodes = null;

            string storedProcName = "efrcrm_get_temp_sale_zip_codes";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    tempSaleZipCodes = new TempSaleZipCode[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            tempSaleZipCodes[i] = LoadTempSaleZipCode(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return tempSaleZipCodes;
        }



        #endregion

        #region Template Methods

        private Template LoadTemplate(DataRow row)
        {
            Template template = new Template();

            // Store database values into our business object
            template.PartnerID = DBValue.ToInt32(row["partner_id"]);
            template.TemplatePath = DBValue.ToString(row["template_path"]);
            template.ReportCenterPasswd = DBValue.ToString(row["reportcenterpasswd"]);

            // return the filled object
            return template;
        }

        public Template[] GetTemplates()
        {
            return GetTemplates(null);
        }

        private Template[] GetTemplates(SqlInterface si)
        {
            Template[] templates = null;

            string storedProcName = "efrcrm_get_templates";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    templates = new Template[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            templates[i] = LoadTemplate(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return templates;
        }


        public Template GetTemplateByID(int id)
        {
            return GetTemplateByID(id, null);
        }

        private Template GetTemplateByID(int id, SqlInterface si)
        {
            Template template = null;

            string storedProcName = "efrcrm_get_template_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Partner_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        template = LoadTemplate(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return template;
        }


        public int InsertTemplate(Template template)
        {
            return InsertTemplate(template, null);
        }

        private int InsertTemplate(Template template, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_template";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Partner_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Template_Path", DbType.String, DBValue.ToDBString(template.TemplatePath)));
                paramCol.Add(new SqlDataParameter("@ReportCenterPasswd", DbType.String, DBValue.ToDBString(template.ReportCenterPasswd)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    template.PartnerID = DBValue.ToInt32(paramCol["@Partner_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateTemplate(Template template)
        {
            return UpdateTemplate(template, null);
        }

        private int UpdateTemplate(Template template, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_template";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Partner_ID", DbType.Int32, DBValue.ToDBInt32(template.PartnerID)));
                paramCol.Add(new SqlDataParameter("@Template_Path", DbType.String, DBValue.ToDBString(template.TemplatePath)));
                paramCol.Add(new SqlDataParameter("@ReportCenterPasswd", DbType.String, DBValue.ToDBString(template.ReportCenterPasswd)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region TemplateSet Methods

        private TemplateSet LoadTemplateSet(DataRow row)
        {
            TemplateSet templateSet = new TemplateSet();

            // Store database values into our business object
            templateSet.TemplateSetID = DBValue.ToInt32(row["template_set_id"]);
            templateSet.QSPProgramID = DBValue.ToInt32(row["qsp_program_id"]);
            templateSet.SupporterPath = DBValue.ToString(row["supporter_path"]);
            templateSet.GenericPath = DBValue.ToString(row["generic_path"]);
            templateSet.EditPath = DBValue.ToString(row["edit_path"]);

            // return the filled object
            return templateSet;
        }

        public TemplateSet[] GetTemplateSets()
        {
            return GetTemplateSets(null);
        }

        private TemplateSet[] GetTemplateSets(SqlInterface si)
        {
            TemplateSet[] templateSets = null;

            string storedProcName = "efrcrm_get_template_sets";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    templateSets = new TemplateSet[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            templateSets[i] = LoadTemplateSet(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return templateSets;
        }


        public TemplateSet GetTemplateSetByID(int id)
        {
            return GetTemplateSetByID(id, null);
        }

        private TemplateSet GetTemplateSetByID(int id, SqlInterface si)
        {
            TemplateSet templateSet = null;

            string storedProcName = "efrcrm_get_template_set_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Template_Set_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        templateSet = LoadTemplateSet(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return templateSet;
        }


        public int InsertTemplateSet(TemplateSet templateSet)
        {
            return InsertTemplateSet(templateSet, null);
        }

        private int InsertTemplateSet(TemplateSet templateSet, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_template_set";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Template_Set_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@QSP_Program_ID", DbType.Int32, DBValue.ToDBInt32(templateSet.QSPProgramID)));
                paramCol.Add(new SqlDataParameter("@Supporter_Path", DbType.String, DBValue.ToDBString(templateSet.SupporterPath)));
                paramCol.Add(new SqlDataParameter("@Generic_Path", DbType.String, DBValue.ToDBString(templateSet.GenericPath)));
                paramCol.Add(new SqlDataParameter("@Edit_Path", DbType.String, DBValue.ToDBString(templateSet.EditPath)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    templateSet.TemplateSetID = DBValue.ToInt32(paramCol["@Template_Set_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateTemplateSet(TemplateSet templateSet)
        {
            return UpdateTemplateSet(templateSet, null);
        }

        private int UpdateTemplateSet(TemplateSet templateSet, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_template_set";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Template_Set_ID", DbType.Int32, DBValue.ToDBInt32(templateSet.TemplateSetID)));
                paramCol.Add(new SqlDataParameter("@QSP_Program_ID", DbType.Int32, DBValue.ToDBInt32(templateSet.QSPProgramID)));
                paramCol.Add(new SqlDataParameter("@Supporter_Path", DbType.String, DBValue.ToDBString(templateSet.SupporterPath)));
                paramCol.Add(new SqlDataParameter("@Generic_Path", DbType.String, DBValue.ToDBString(templateSet.GenericPath)));
                paramCol.Add(new SqlDataParameter("@Edit_Path", DbType.String, DBValue.ToDBString(templateSet.EditPath)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region Territory Methods

        private Territory LoadTerritory(DataRow row)
        {
            Territory territory = new Territory();

            // Store database values into our business object
            territory.TerritoryId = DBValue.ToInt32(row["territory_id"]);
            territory.TerritoryName = DBValue.ToString(row["territory_name"]);

            // return the filled object
            return territory;
        }

        public Territory[] GetTerritorys()
        {
            return GetTerritorys(null);
        }

        private Territory[] GetTerritorys(SqlInterface si)
        {
            Territory[] territorys = null;

            string storedProcName = "efrcrm_get_territorys";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    territorys = new Territory[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            territorys[i] = LoadTerritory(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return territorys;
        }


        public Territory GetTerritoryByID(int id)
        {
            return GetTerritoryByID(id, null);
        }

        private Territory GetTerritoryByID(int id, SqlInterface si)
        {
            Territory territory = null;

            string storedProcName = "efrcrm_get_territory_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Territory_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        territory = LoadTerritory(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return territory;
        }


        public int InsertTerritory(Territory territory)
        {
            return InsertTerritory(territory, null);
        }

        private int InsertTerritory(Territory territory, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_territory";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Territory_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Territory_name", DbType.String, DBValue.ToDBString(territory.TerritoryName)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    territory.TerritoryId = DBValue.ToInt32(paramCol["@Territory_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateTerritory(Territory territory)
        {
            return UpdateTerritory(territory, null);
        }

        private int UpdateTerritory(Territory territory, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_territory";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Territory_id", DbType.Int32, DBValue.ToDBInt32(territory.TerritoryId)));
                paramCol.Add(new SqlDataParameter("@Territory_name", DbType.String, DBValue.ToDBString(territory.TerritoryName)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region TerritoryDef Methods

        private TerritoryDef LoadTerritoryDef(DataRow row)
        {
            TerritoryDef territoryDef = new TerritoryDef();

            // Store database values into our business object
            territoryDef.Zip = DBValue.ToString(row["zip"]);
            territoryDef.TerritoryID = DBValue.ToInt32(row["territory_id"]);

            // return the filled object
            return territoryDef;
        }

        public TerritoryDef[] GetTerritoryDefs()
        {
            return GetTerritoryDefs(null);
        }

        private TerritoryDef[] GetTerritoryDefs(SqlInterface si)
        {
            TerritoryDef[] territoryDefs = null;

            string storedProcName = "efrcrm_get_territory_defs";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    territoryDefs = new TerritoryDef[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            territoryDefs[i] = LoadTerritoryDef(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return territoryDefs;
        }



        #endregion

        #region Title Methods

        private Title LoadTitle(DataRow row)
        {
            Title title = new Title();

            // Store database values into our business object
            title.TitleId = DBValue.ToInt16(row["title_id"]);
            title.PartyTypeId = DBValue.ToInt16(row["party_type_id"]);
            title.TitleDesc = DBValue.ToString(row["title_desc"]);

            // return the filled object
            return title;
        }

        public Title[] GetTitles()
        {
            return GetTitles(null);
        }

        private Title[] GetTitles(SqlInterface si)
        {
            Title[] titles = null;

            string storedProcName = "efrcrm_get_titles";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    titles = new Title[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            titles[i] = LoadTitle(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return titles;
        }



        #endregion

        #region TitleDesc Methods

        private TitleDesc LoadTitleDesc(DataRow row)
        {
            TitleDesc titleDesc = new TitleDesc();

            // Store database values into our business object
            titleDesc.TitleId = DBValue.ToInt16(row["title_id"]);
            titleDesc.LanguageId = DBValue.ToInt16(row["language_id"]);
            titleDesc.Description = DBValue.ToString(row["description"]);

            // return the filled object
            return titleDesc;
        }

        public TitleDesc[] GetTitleDescs()
        {
            return GetTitleDescs(null);
        }

        private TitleDesc[] GetTitleDescs(SqlInterface si)
        {
            TitleDesc[] titleDescs = null;

            string storedProcName = "efrcrm_get_title_descs";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    titleDescs = new TitleDesc[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            titleDescs[i] = LoadTitleDesc(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return titleDescs;
        }



        #endregion

        #region TmpTotalAdjustment Methods

        private TmpTotalAdjustment LoadTmpTotalAdjustment(DataRow row)
        {
            TmpTotalAdjustment tmpTotalAdjustment = new TmpTotalAdjustment();

            // Store database values into our business object
            tmpTotalAdjustment.SalesID = DBValue.ToInt32(row["sales_id"]);
            tmpTotalAdjustment.AdjustmentAmount = DBValue.ToInt16(row["adjustment_amount"]);

            // return the filled object
            return tmpTotalAdjustment;
        }

        public TmpTotalAdjustment[] GetTmpTotalAdjustments()
        {
            return GetTmpTotalAdjustments(null);
        }

        private TmpTotalAdjustment[] GetTmpTotalAdjustments(SqlInterface si)
        {
            TmpTotalAdjustment[] tmpTotalAdjustments = null;

            string storedProcName = "efrcrm_get_tmp_total_adjustments";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    tmpTotalAdjustments = new TmpTotalAdjustment[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            tmpTotalAdjustments[i] = LoadTmpTotalAdjustment(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return tmpTotalAdjustments;
        }


        public TmpTotalAdjustment GetTmpTotalAdjustmentByID(int id)
        {
            return GetTmpTotalAdjustmentByID(id, null);
        }

        private TmpTotalAdjustment GetTmpTotalAdjustmentByID(int id, SqlInterface si)
        {
            TmpTotalAdjustment tmpTotalAdjustment = null;

            string storedProcName = "efrcrm_get_tmp_total_adjustment_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        tmpTotalAdjustment = LoadTmpTotalAdjustment(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return tmpTotalAdjustment;
        }


        public int InsertTmpTotalAdjustment(TmpTotalAdjustment tmpTotalAdjustment)
        {
            return InsertTmpTotalAdjustment(tmpTotalAdjustment, null);
        }

        private int InsertTmpTotalAdjustment(TmpTotalAdjustment tmpTotalAdjustment, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_tmp_total_adjustment";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Adjustment_Amount", DbType.Double, DBValue.ToDBFloat(tmpTotalAdjustment.AdjustmentAmount)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    tmpTotalAdjustment.SalesID = DBValue.ToInt32(paramCol["@Sales_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateTmpTotalAdjustment(TmpTotalAdjustment tmpTotalAdjustment)
        {
            return UpdateTmpTotalAdjustment(tmpTotalAdjustment, null);
        }

        private int UpdateTmpTotalAdjustment(TmpTotalAdjustment tmpTotalAdjustment, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_tmp_total_adjustment";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Sales_ID", DbType.Int32, DBValue.ToDBInt32(tmpTotalAdjustment.SalesID)));
                paramCol.Add(new SqlDataParameter("@Adjustment_Amount", DbType.Double, DBValue.ToDBFloat(tmpTotalAdjustment.AdjustmentAmount)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region TransferStatus Methods

        private TransferStatus LoadTransferStatus(DataRow row)
        {
            TransferStatus transferStatus = new TransferStatus();

            // Store database values into our business object
            transferStatus.TransferStatusId = DBValue.ToInt16(row["transfer_status_id"]);
            transferStatus.TransferStatusDesc = DBValue.ToString(row["transfer_status_desc"]);

            // return the filled object
            return transferStatus;
        }

        public TransferStatus[] GetTransferStatuss()
        {
            return GetTransferStatuss(null);
        }

        private TransferStatus[] GetTransferStatuss(SqlInterface si)
        {
            TransferStatus[] transferStatuss = null;

            string storedProcName = "efrcrm_get_transfer_statuss";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    transferStatuss = new TransferStatus[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            transferStatuss[i] = LoadTransferStatus(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return transferStatuss;
        }



        #endregion

        #region UnassignedConsultant Methods

        private UnassignedConsultant LoadUnassignedConsultant(DataRow row)
        {
            UnassignedConsultant unassignedConsultant = new UnassignedConsultant();

            // Store database values into our business object
            unassignedConsultant.LeadID = DBValue.ToInt32(row["lead_id"]);
            unassignedConsultant.OldConsultantID = DBValue.ToInt32(row["old_consultant_id"]);
            unassignedConsultant.NewConsultantID = DBValue.ToInt32(row["new_consultant_id"]);
            unassignedConsultant.UnassignedDate = DBValue.ToDateTime(row["unassigned_date"]);
            unassignedConsultant.UnassignationID = DBValue.ToInt32(row["unassignation_id"]);

            // return the filled object
            return unassignedConsultant;
        }

        public UnassignedConsultant[] GetUnassignedConsultants()
        {
            return GetUnassignedConsultants(null);
        }

        private UnassignedConsultant[] GetUnassignedConsultants(SqlInterface si)
        {
            UnassignedConsultant[] unassignedConsultants = null;

            string storedProcName = "efrcrm_get_unassigned_consultants";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    unassignedConsultants = new UnassignedConsultant[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            unassignedConsultants[i] = LoadUnassignedConsultant(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return unassignedConsultants;
        }


        public UnassignedConsultant GetUnassignedConsultantByID(int id)
        {
            return GetUnassignedConsultantByID(id, null);
        }

        private UnassignedConsultant GetUnassignedConsultantByID(int id, SqlInterface si)
        {
            UnassignedConsultant unassignedConsultant = null;

            string storedProcName = "efrcrm_get_unassigned_consultant_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        unassignedConsultant = LoadUnassignedConsultant(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return unassignedConsultant;
        }


        public int InsertUnassignedConsultant(UnassignedConsultant unassignedConsultant)
        {
            return InsertUnassignedConsultant(unassignedConsultant, null);
        }

        private int InsertUnassignedConsultant(UnassignedConsultant unassignedConsultant, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_unassigned_consultant";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Old_Consultant_ID", DbType.Int32, DBValue.ToDBInt32(unassignedConsultant.OldConsultantID)));
                paramCol.Add(new SqlDataParameter("@New_Consultant_ID", DbType.Int32, DBValue.ToDBInt32(unassignedConsultant.NewConsultantID)));
                paramCol.Add(new SqlDataParameter("@Unassigned_Date", DbType.DateTime, DBValue.ToDBDateTime(unassignedConsultant.UnassignedDate)));
                paramCol.Add(new SqlDataParameter("@Unassignation_ID", DbType.Int32, DBValue.ToDBInt32(unassignedConsultant.UnassignationID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    unassignedConsultant.LeadID = DBValue.ToInt32(paramCol["@Lead_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateUnassignedConsultant(UnassignedConsultant unassignedConsultant)
        {
            return UpdateUnassignedConsultant(unassignedConsultant, null);
        }

        private int UpdateUnassignedConsultant(UnassignedConsultant unassignedConsultant, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_unassigned_consultant";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_ID", DbType.Int32, DBValue.ToDBInt32(unassignedConsultant.LeadID)));
                paramCol.Add(new SqlDataParameter("@Old_Consultant_ID", DbType.Int32, DBValue.ToDBInt32(unassignedConsultant.OldConsultantID)));
                paramCol.Add(new SqlDataParameter("@New_Consultant_ID", DbType.Int32, DBValue.ToDBInt32(unassignedConsultant.NewConsultantID)));
                paramCol.Add(new SqlDataParameter("@Unassigned_Date", DbType.DateTime, DBValue.ToDBDateTime(unassignedConsultant.UnassignedDate)));
                paramCol.Add(new SqlDataParameter("@Unassignation_ID", DbType.Int32, DBValue.ToDBInt32(unassignedConsultant.UnassignationID)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region UnassignedConsultantSale Methods

        private UnassignedConsultantSale LoadUnassignedConsultantSale(DataRow row)
        {
            UnassignedConsultantSale unassignedConsultantSale = new UnassignedConsultantSale();

            // Store database values into our business object
            unassignedConsultantSale.UnassignationID = DBValue.ToInt32(row["unassignation_id"]);
            unassignedConsultantSale.SaleID = DBValue.ToInt32(row["sale_id"]);
            unassignedConsultantSale.OldConsultantID = DBValue.ToInt32(row["old_consultant_id"]);
            unassignedConsultantSale.NewConsultantID = DBValue.ToInt32(row["new_consultant_id"]);
            unassignedConsultantSale.UnassignedDate = DBValue.ToDateTime(row["unassigned_date"]);

            // return the filled object
            return unassignedConsultantSale;
        }

        public UnassignedConsultantSale[] GetUnassignedConsultantSales()
        {
            return GetUnassignedConsultantSales(null);
        }

        private UnassignedConsultantSale[] GetUnassignedConsultantSales(SqlInterface si)
        {
            UnassignedConsultantSale[] unassignedConsultantSales = null;

            string storedProcName = "efrcrm_get_unassigned_consultant_sales";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    unassignedConsultantSales = new UnassignedConsultantSale[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            unassignedConsultantSales[i] = LoadUnassignedConsultantSale(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return unassignedConsultantSales;
        }


        public UnassignedConsultantSale GetUnassignedConsultantSaleByID(int id)
        {
            return GetUnassignedConsultantSaleByID(id, null);
        }

        private UnassignedConsultantSale GetUnassignedConsultantSaleByID(int id, SqlInterface si)
        {
            UnassignedConsultantSale unassignedConsultantSale = null;

            string storedProcName = "efrcrm_get_unassigned_consultant_sale_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Unassignation_ID", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        unassignedConsultantSale = LoadUnassignedConsultantSale(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return unassignedConsultantSale;
        }


        public int InsertUnassignedConsultantSale(UnassignedConsultantSale unassignedConsultantSale)
        {
            return InsertUnassignedConsultantSale(unassignedConsultantSale, null);
        }

        private int InsertUnassignedConsultantSale(UnassignedConsultantSale unassignedConsultantSale, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_unassigned_consultant_sale";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Unassignation_ID", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Sale_ID", DbType.Int32, DBValue.ToDBInt32(unassignedConsultantSale.SaleID)));
                paramCol.Add(new SqlDataParameter("@Old_Consultant_ID", DbType.Int32, DBValue.ToDBInt32(unassignedConsultantSale.OldConsultantID)));
                paramCol.Add(new SqlDataParameter("@New_Consultant_ID", DbType.Int32, DBValue.ToDBInt32(unassignedConsultantSale.NewConsultantID)));
                paramCol.Add(new SqlDataParameter("@Unassigned_Date", DbType.DateTime, DBValue.ToDBDateTime(unassignedConsultantSale.UnassignedDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    unassignedConsultantSale.UnassignationID = DBValue.ToInt32(paramCol["@Unassignation_ID"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateUnassignedConsultantSale(UnassignedConsultantSale unassignedConsultantSale)
        {
            return UpdateUnassignedConsultantSale(unassignedConsultantSale, null);
        }

        private int UpdateUnassignedConsultantSale(UnassignedConsultantSale unassignedConsultantSale, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_unassigned_consultant_sale";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Unassignation_ID", DbType.Int32, DBValue.ToDBInt32(unassignedConsultantSale.UnassignationID)));
                paramCol.Add(new SqlDataParameter("@Sale_ID", DbType.Int32, DBValue.ToDBInt32(unassignedConsultantSale.SaleID)));
                paramCol.Add(new SqlDataParameter("@Old_Consultant_ID", DbType.Int32, DBValue.ToDBInt32(unassignedConsultantSale.OldConsultantID)));
                paramCol.Add(new SqlDataParameter("@New_Consultant_ID", DbType.Int32, DBValue.ToDBInt32(unassignedConsultantSale.NewConsultantID)));
                paramCol.Add(new SqlDataParameter("@Unassigned_Date", DbType.DateTime, DBValue.ToDBDateTime(unassignedConsultantSale.UnassignedDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region UnAssignLogin Methods

        private UnAssignLogin LoadUnAssignLogin(DataRow row)
        {
            UnAssignLogin unassignlogin = new UnAssignLogin();

            // Store database values into our business object
            unassignlogin.UnAssignLoginId = DBValue.ToInt32(row["unassignlogin_id"]);
            unassignlogin.UserName = DBValue.ToString(row["user_name"]);
            unassignlogin.ConsultantId = DBValue.ToInt32(row["consultant_id"]);
            unassignlogin.LeadId = DBValue.ToInt32(row["lead_id"]);
            unassignlogin.UnassignmentTimeStamp = DBValue.ToDateTime(row["unassignment_timestamp"]);

            // return the filled object
            return unassignlogin;
        }

        public UnAssignLogin[] GetUnAssignLogins()
        {
            return GetUnAssignLogins(null);
        }

        private UnAssignLogin[] GetUnAssignLogins(SqlInterface si)
        {
            UnAssignLogin[] unassignlogins = null;

            string storedProcName = "efrcrm_get_unassignlogins";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    unassignlogins = new UnAssignLogin[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            unassignlogins[i] = LoadUnAssignLogin(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return unassignlogins;
        }


        public UnAssignLogin GetUnAssignLoginByID(int id)
        {
            return GetUnAssignLoginByID(id, null);
        }

        private UnAssignLogin GetUnAssignLoginByID(int id, SqlInterface si)
        {
            UnAssignLogin unassignlogin = null;

            string storedProcName = "efrcrm_get_unassignlogin_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@UnAssignLogin_Id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        unassignlogin = LoadUnAssignLogin(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return unassignlogin;
        }


        public int InsertUnAssignLogin(UnAssignLogin unassignlogin)
        {
            return InsertUnAssignLogin(unassignlogin, null);
        }

        private int InsertUnAssignLogin(UnAssignLogin unassignlogin, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_unassignlogin";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@UnAssignLogin_Id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@User_Name", DbType.String, DBValue.ToDBString(unassignlogin.UserName)));
                paramCol.Add(new SqlDataParameter("@Consultant_Id", DbType.Int32, DBValue.ToDBInt32(unassignlogin.ConsultantId)));
                paramCol.Add(new SqlDataParameter("@Lead_Id", DbType.Int32, DBValue.ToDBInt32(unassignlogin.LeadId)));
                paramCol.Add(new SqlDataParameter("@Unassignment_TimeStamp", DbType.DateTime, DBValue.ToDBDateTime(unassignlogin.UnassignmentTimeStamp)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    unassignlogin.UnAssignLoginId = DBValue.ToInt32(paramCol["@UnAssignLogin_Id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateUnAssignLogin(UnAssignLogin unassignlogin)
        {
            return UpdateUnAssignLogin(unassignlogin, null);
        }

        private int UpdateUnAssignLogin(UnAssignLogin unassignlogin, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_unassignlogin";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@UnAssignLogin_Id", DbType.Int32, DBValue.ToDBInt32(unassignlogin.UnAssignLoginId)));
                paramCol.Add(new SqlDataParameter("@User_Name", DbType.String, DBValue.ToDBString(unassignlogin.UserName)));
                paramCol.Add(new SqlDataParameter("@Consultant_Id", DbType.Int32, DBValue.ToDBInt32(unassignlogin.ConsultantId)));
                paramCol.Add(new SqlDataParameter("@Lead_Id", DbType.Int32, DBValue.ToDBInt32(unassignlogin.LeadId)));
                paramCol.Add(new SqlDataParameter("@Unassignment_TimeStamp", DbType.DateTime, DBValue.ToDBDateTime(unassignlogin.UnassignmentTimeStamp)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region WebSite Methods

        private WebSite LoadWebSite(DataRow row)
        {
            WebSite webSite = new WebSite();

            // Store database values into our business object
            webSite.WebSiteId = DBValue.ToInt32(row["web_site_id"]);
            webSite.WebSiteName = DBValue.ToString(row["web_site_name"]);

            // return the filled object
            return webSite;
        }

        public WebSite[] GetWebSites()
        {
            return GetWebSites(null);
        }

        private WebSite[] GetWebSites(SqlInterface si)
        {
            WebSite[] webSites = null;

            string storedProcName = "efrcrm_get_web_sites";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    webSites = new WebSite[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            webSites[i] = LoadWebSite(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return webSites;
        }


        public WebSite GetWebSiteByID(int id)
        {
            return GetWebSiteByID(id, null);
        }

        private WebSite GetWebSiteByID(int id, SqlInterface si)
        {
            WebSite webSite = null;

            string storedProcName = "efrcrm_get_web_site_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Web_Site_Id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        webSite = LoadWebSite(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return webSite;
        }


        public int InsertWebSite(WebSite webSite)
        {
            return InsertWebSite(webSite, null);
        }

        private int InsertWebSite(WebSite webSite, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_web_site";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Web_Site_Id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Web_Site_Name", DbType.String, DBValue.ToDBString(webSite.WebSiteName)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    webSite.WebSiteId = DBValue.ToInt32(paramCol["@Web_Site_Id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateWebSite(WebSite webSite)
        {
            return UpdateWebSite(webSite, null);
        }

        private int UpdateWebSite(WebSite webSite, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_web_site";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Web_Site_Id", DbType.Int32, DBValue.ToDBInt32(webSite.WebSiteId)));
                paramCol.Add(new SqlDataParameter("@Web_Site_Name", DbType.String, DBValue.ToDBString(webSite.WebSiteName)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region XHarmony Methods

        private XHarmony LoadXHarmony(DataRow row)
        {
            XHarmony xharmony = new XHarmony();

            // Store database values into our business object
            xharmony.LeadId = DBValue.ToInt32(row["lead_id"]);
            xharmony.Year = DBValue.ToInt32(row["year"]);

            // return the filled object
            return xharmony;
        }

        public XHarmony[] GetXHarmonys()
        {
            return GetXHarmonys(null);
        }

        private XHarmony[] GetXHarmonys(SqlInterface si)
        {
            XHarmony[] xharmonys = null;

            string storedProcName = "efrcrm_get_xharmonys";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    xharmonys = new XHarmony[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            xharmonys[i] = LoadXHarmony(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return xharmonys;
        }


        public XHarmony GetXHarmonyByID(int id)
        {
            return GetXHarmonyByID(id, null);
        }

        private XHarmony GetXHarmonyByID(int id, SqlInterface si)
        {
            XHarmony xharmony = null;

            string storedProcName = "efrcrm_get_xharmony_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        xharmony = LoadXHarmony(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return xharmony;
        }


        public int InsertXHarmony(XHarmony xharmony)
        {
            return InsertXHarmony(xharmony, null);
        }

        private int InsertXHarmony(XHarmony xharmony, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_xharmony";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Year", DbType.Int32, DBValue.ToDBInt32(xharmony.Year)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    xharmony.LeadId = DBValue.ToInt32(paramCol["@Lead_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateXHarmony(XHarmony xharmony)
        {
            return UpdateXHarmony(xharmony, null);
        }

        private int UpdateXHarmony(XHarmony xharmony, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_xharmony";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_id", DbType.Int32, DBValue.ToDBInt32(xharmony.LeadId)));
                paramCol.Add(new SqlDataParameter("@Year", DbType.Int32, DBValue.ToDBInt32(xharmony.Year)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region XJumpstart Methods

        private XJumpstart LoadXJumpstart(DataRow row)
        {
            XJumpstart xjumpstart = new XJumpstart();

            // Store database values into our business object
            xjumpstart.LeadId = DBValue.ToInt32(row["lead_id"]);
            xjumpstart.Year = DBValue.ToInt32(row["year"]);

            // return the filled object
            return xjumpstart;
        }

        public XJumpstart[] GetXJumpstarts()
        {
            return GetXJumpstarts(null);
        }

        private XJumpstart[] GetXJumpstarts(SqlInterface si)
        {
            XJumpstart[] xjumpstarts = null;

            string storedProcName = "efrcrm_get_xjumpstarts";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    xjumpstarts = new XJumpstart[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            xjumpstarts[i] = LoadXJumpstart(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return xjumpstarts;
        }


        public XJumpstart GetXJumpstartByID(int id)
        {
            return GetXJumpstartByID(id, null);
        }

        private XJumpstart GetXJumpstartByID(int id, SqlInterface si)
        {
            XJumpstart xjumpstart = null;

            string storedProcName = "efrcrm_get_xjumpstart_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        xjumpstart = LoadXJumpstart(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return xjumpstart;
        }


        public int InsertXJumpstart(XJumpstart xjumpstart)
        {
            return InsertXJumpstart(xjumpstart, null);
        }

        private int InsertXJumpstart(XJumpstart xjumpstart, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_xjumpstart";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Year", DbType.Int32, DBValue.ToDBInt32(xjumpstart.Year)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    xjumpstart.LeadId = DBValue.ToInt32(paramCol["@Lead_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateXJumpstart(XJumpstart xjumpstart)
        {
            return UpdateXJumpstart(xjumpstart, null);
        }

        private int UpdateXJumpstart(XJumpstart xjumpstart, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_xjumpstart";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Lead_id", DbType.Int32, DBValue.ToDBInt32(xjumpstart.LeadId)));
                paramCol.Add(new SqlDataParameter("@Year", DbType.Int32, DBValue.ToDBInt32(xjumpstart.Year)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }



        #endregion

        #region Participant Methods

        private Participant LoadParticipant(DataRow row)
        {
            Participant participant = new Participant();

            // Store database values into our business object
            participant.ParticipantId = DBValue.ToInt32(row["participant_id"]);
            participant.FirstName = DBValue.ToString(row["first_name"]);
            participant.LastName = DBValue.ToString(row["last_name"]);
            participant.CreateDate = DBValue.ToDateTime(row["create_date"]);

            // return the filled object
            return participant;
        }

        public Participant[] GetParticipants()
        {
            return GetParticipants(null);
        }

        private Participant[] GetParticipants(SqlInterface si)
        {
            Participant[] participants = null;

            string storedProcName = "efrcrm_get_participants";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    participants = new Participant[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            participants[i] = LoadParticipant(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return participants;
        }


        public Participant GetParticipantByID(int id)
        {
            return GetParticipantByID(id, null);
        }

        private Participant GetParticipantByID(int id, SqlInterface si)
        {
            Participant participant = null;

            string storedProcName = "efrcrm_get_participant_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Participant_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        participant = LoadParticipant(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return participant;
        }


        public int InsertParticipant(Participant participant)
        {
            return InsertParticipant(participant, null);
        }

        private int InsertParticipant(Participant participant, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_participant";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Participant_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@First_name", DbType.String, DBValue.ToDBString(participant.FirstName)));
                paramCol.Add(new SqlDataParameter("@Last_name", DbType.String, DBValue.ToDBString(participant.LastName)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    participant.ParticipantId = DBValue.ToInt32(paramCol["@Participant_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateParticipant(Participant participant)
        {
            return UpdateParticipant(participant, null);
        }

        private int UpdateParticipant(Participant participant, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_participant";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Participant_id", DbType.Int32, DBValue.ToDBInt32(participant.ParticipantId)));
                paramCol.Add(new SqlDataParameter("@First_name", DbType.String, DBValue.ToDBString(participant.FirstName)));
                paramCol.Add(new SqlDataParameter("@Last_name", DbType.String, DBValue.ToDBString(participant.LastName)));
                paramCol.Add(new SqlDataParameter("@Create_date", DbType.DateTime, DBValue.ToDBDateTime(participant.CreateDate)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public Hashtable GetParticipantBySalesId(int salesId)
        {
            SalesItem[] si = GetSalesItemsBySaleId(salesId, null);
            Hashtable hashParticipant = new Hashtable();
            for (int i = 0; i < si.Length; i++)
            {
                if (si[i].ParticipantId != int.MinValue)
                {
                    Participant p = Participant.GetParticipantByID(si[i].ParticipantId);
                    if (p != null)
                        hashParticipant[p.ParticipantId] = p;
                }
            }

            return hashParticipant;
        }

        #endregion

        #region EmailTemplate Methods

        private EmailTemplate LoadEmailTemplate(DataRow row)
        {
            EmailTemplate emailTemplate = new EmailTemplate();

            // Store database values into our business object
            emailTemplate.EmailTemplateId = DBValue.ToInt32(row["email_template_id"]);
            emailTemplate.Description = DBValue.ToString(row["description"]);
            emailTemplate.Subject = DBValue.ToString(row["subject"]);
            emailTemplate.Message = DBValue.ToString(row["message"]);
            emailTemplate.Channel = DBValue.ToInt32(row["channel"]);
            emailTemplate.Configuration = DBValue.ToString(row["configuration"]);
            emailTemplate.Active = DBValue.ToInt32(row["active"]);

            // return the filled object
            return emailTemplate;
        }

        public EmailTemplate[] GetEmailTemplates()
        {
            return GetEmailTemplates(null);
        }

        private EmailTemplate[] GetEmailTemplates(SqlInterface si)
        {
            EmailTemplate[] emailTemplates = null;

            string storedProcName = "efrcrm_get_email_templates";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    emailTemplates = new EmailTemplate[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            emailTemplates[i] = LoadEmailTemplate(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return emailTemplates;
        }


        public EmailTemplate GetEmailTemplateByID(int id)
        {
            return GetEmailTemplateByID(id, null);
        }

        private EmailTemplate GetEmailTemplateByID(int id, SqlInterface si)
        {
            EmailTemplate emailTemplate = null;

            string storedProcName = "efrcrm_get_email_template_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Email_template_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        emailTemplate = LoadEmailTemplate(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return emailTemplate;
        }


        public int InsertEmailTemplate(EmailTemplate emailTemplate)
        {
            return InsertEmailTemplate(emailTemplate, null);
        }

        private int InsertEmailTemplate(EmailTemplate emailTemplate, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_email_template";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Email_template_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(emailTemplate.Description)));
                paramCol.Add(new SqlDataParameter("@Subject", DbType.String, DBValue.ToDBString(emailTemplate.Subject)));
                paramCol.Add(new SqlDataParameter("@Message", DbType.String, DBValue.ToDBString(emailTemplate.Message)));
                paramCol.Add(new SqlDataParameter("@Channel", DbType.Int32, DBValue.ToDBInt32(emailTemplate.Channel)));
                paramCol.Add(new SqlDataParameter("@Configuration", DbType.String, DBValue.ToDBString(emailTemplate.Configuration)));
                paramCol.Add(new SqlDataParameter("@Active", DbType.Int32, DBValue.ToDBInt32(emailTemplate.Active)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    emailTemplate.EmailTemplateId = DBValue.ToInt32(paramCol["@Email_template_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateEmailTemplate(EmailTemplate emailTemplate)
        {
            return UpdateEmailTemplate(emailTemplate, null);
        }

        private int UpdateEmailTemplate(EmailTemplate emailTemplate, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_email_template";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Email_template_id", DbType.Int32, DBValue.ToDBInt32(emailTemplate.EmailTemplateId)));
                paramCol.Add(new SqlDataParameter("@Description", DbType.String, DBValue.ToDBString(emailTemplate.Description)));
                paramCol.Add(new SqlDataParameter("@Subject", DbType.String, DBValue.ToDBString(emailTemplate.Subject)));
                paramCol.Add(new SqlDataParameter("@Message", DbType.String, DBValue.ToDBString(emailTemplate.Message)));
                paramCol.Add(new SqlDataParameter("@Channel", DbType.Int32, DBValue.ToDBInt32(emailTemplate.Channel)));
                paramCol.Add(new SqlDataParameter("@Configuration", DbType.String, DBValue.ToDBString(emailTemplate.Configuration)));
                paramCol.Add(new SqlDataParameter("@Active", DbType.Int32, DBValue.ToDBInt32(emailTemplate.Active)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }

        #endregion

        #region Fedex Methods

        private Fedex LoadFedex(DataRow row)
        {
            Fedex fedex = new Fedex();

            // Store database values into our business object
            fedex.FedexId = DBValue.ToInt32(row["fedex_id"]);
            fedex.FedexUid = DBValue.ToString(row["Fedex_uid"]);
            fedex.CompanyName = DBValue.ToString(row["company_name"]);
            fedex.ContactName = DBValue.ToString(row["contact_name"]);
            fedex.AddressLine1 = DBValue.ToString(row["address_line_1"]);
            fedex.AddressLine2 = DBValue.ToString(row["address_line_2"]);
            fedex.City = DBValue.ToString(row["city"]);
            fedex.ProvinceState = DBValue.ToString(row["province_state"]);
            fedex.Country = DBValue.ToString(row["country"]);
            fedex.ZipPostalCode = DBValue.ToString(row["zip_postal_code"]);
            fedex.Telephone = DBValue.ToString(row["telephone"]);
            fedex.Extention = DBValue.ToString(row["extention"]);
            fedex.TaxIdSsn = DBValue.ToString(row["tax_id_ssn"]);
            fedex.FedexAccount = DBValue.ToInt32(row["fedex_account"]);
            fedex.ShipalertEmailAddress = DBValue.ToString(row["shipalert_email_address"]);
            fedex.ShipalertEmailMessage = DBValue.ToString(row["shipalert_email_message"]);
            fedex.ShipalertEmailOption = DBValue.ToInt32(row["shipalert_email_option"]);
            fedex.TotalPackageWeight = DBValue.ToInt32(row["total_package_weight"]);
            fedex.NumberOfPackages = DBValue.ToInt32(row["number_of_packages"]);
            fedex.DimensionHeight = DBValue.ToInt32(row["dimension_height"]);
            fedex.DimensionWidth = DBValue.ToInt32(row["dimension_width"]);
            fedex.DimensionLength = DBValue.ToInt32(row["dimension_length"]);
            fedex.SeviceLevel = DBValue.ToString(row["sevice_level"]);
            fedex.BillFreightChargesTo = DBValue.ToInt32(row["bill_freight_charges_to"]);
            fedex.InterPartDescription = DBValue.ToString(row["inter_part_description"]);
            fedex.InterUnitValue = DBValue.ToDouble(row["inter_unit_value"]);
            fedex.InterCurrency = DBValue.ToString(row["inter_currency"]);
            fedex.InterUnitOfMeasure = DBValue.ToString(row["inter_unit_of_measure"]);
            fedex.InterQuantity = DBValue.ToInt32(row["inter_quantity"]);
            fedex.InterCountryOfManufacture = DBValue.ToString(row["inter_country_of_manufacture"]);
            fedex.InterHarmonizedCode = DBValue.ToInt64(row["inter_harmonized_code"]);
            fedex.InterPartNumber = DBValue.ToString(row["inter_part_number"]);
            fedex.InterMarksNumber = DBValue.ToString(row["inter_marks_number"]);
            fedex.InterSkuUpcItem = DBValue.ToString(row["inter_sku_upc_item"]);
            fedex.InterBillDutiesTaxesTo = DBValue.ToInt32(row["inter_bill_duties_taxes_to"]);
            fedex.InterCreateDate = DBValue.ToDateTime(row["inter_create_date"]);
            fedex.InterTrackingNumber = DBValue.ToString(row["inter_tracking_number"]);
            fedex.InterLabelDateShippedDate = DBValue.ToDateTime(row["inter_label_date_shipped_date"]);
            fedex.InterUpdateSaleDate = DBValue.ToDateTime(row["inter_update_sale_date"]);
            fedex.InterShippingQuote = DBValue.ToDouble(row["inter_shipping_quote"]);
            fedex.Cancelled = DBValue.ToInt32(row["cancelled"]);
            fedex.CodAmount = DBValue.ToDouble(row["cod_amount"]);
            fedex.CodPaymentMethod = DBValue.ToInt32(row["cod_payment_method"]);


            // return the filled object
            return fedex;
        }

        public Fedex[] GetFedexs()
        {
            return GetFedexs(null);
        }

        private Fedex[] GetFedexs(SqlInterface si)
        {
            Fedex[] fedexs = null;

            string storedProcName = "efrcrm_get_fedexs";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    fedexs = new Fedex[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            fedexs[i] = LoadFedex(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return fedexs;
        }

        public Fedex[] GetFedexReadyForPromotionalKits()
        {
            return GetFedexReadyForPromotionalKits(null);
        }

        private Fedex[] GetFedexReadyForPromotionalKits(SqlInterface si)
        {
            Fedex[] fedexs = null;

            string storedProcName = "efrcrm_get_fedex_ready_for_promotional_kits";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    fedexs = new Fedex[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            fedexs[i] = LoadFedex(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return fedexs;
        }

        public Fedex[] GetFedexReadyForSales()
        {
            return GetFedexReadyForSales(null);
        }

        private Fedex[] GetFedexReadyForSales(SqlInterface si)
        {
            Fedex[] fedexs = null;

            string storedProcName = "efrcrm_get_fedex_ready_for_sales";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null)
                {
                    fedexs = new Fedex[dt.Rows.Count];

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        // fill our objects
                        try
                        {
                            fedexs[i] = LoadFedex(dt.Rows[i]);
                        }
                        catch (Exception ex)
                        {
                            throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                        }
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return fedexs;
        }

        public Fedex GetFedexByID(int id)
        {
            return GetFedexByID(id, null);
        }

        private Fedex GetFedexByID(int id, SqlInterface si)
        {
            Fedex fedex = null;

            string storedProcName = "efrcrm_get_fedex_by_id";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Fedex_id", DbType.Int32, DBValue.ToDBInt32(id)));

                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                DataTable dt = si.ExecuteFetchDataTable(storedProcName, CommandType.StoredProcedure, paramCol);

                if (dt != null && dt.Rows.Count > 0)
                {
                    // fill our objects
                    try
                    {
                        fedex = LoadFedex(dt.Rows[0]);
                    }
                    catch (Exception ex)
                    {
                        throw new SqlDataException("Unable to fill object using " + storedProcName, ex);
                    }
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return fedex;
        }


        public int InsertFedex(Fedex fedex)
        {
            return InsertFedex(fedex, null);
        }

        private int InsertFedex(Fedex fedex, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_insert_fedex";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Fedex_id", DbType.Int32, ParameterDirection.Output));
                paramCol.Add(new SqlDataParameter("@Fedex_uid", DbType.String, DBValue.ToDBString(fedex.FedexUid)));
                paramCol.Add(new SqlDataParameter("@Company_name", DbType.String, DBValue.ToDBString(fedex.CompanyName)));
                paramCol.Add(new SqlDataParameter("@Contact_name", DbType.String, DBValue.ToDBString(fedex.ContactName)));
                paramCol.Add(new SqlDataParameter("@Address_line_1", DbType.String, DBValue.ToDBString(fedex.AddressLine1)));
                paramCol.Add(new SqlDataParameter("@Address_line_2", DbType.String, DBValue.ToDBString(fedex.AddressLine2)));
                paramCol.Add(new SqlDataParameter("@City", DbType.String, DBValue.ToDBString(fedex.City)));
                paramCol.Add(new SqlDataParameter("@Province_state", DbType.String, DBValue.ToDBString(fedex.ProvinceState)));
                paramCol.Add(new SqlDataParameter("@Country", DbType.String, DBValue.ToDBString(fedex.Country)));
                paramCol.Add(new SqlDataParameter("@Zip_postal_code", DbType.String, DBValue.ToDBString(fedex.ZipPostalCode)));
                paramCol.Add(new SqlDataParameter("@Telephone", DbType.String, DBValue.ToDBString(fedex.Telephone)));
                paramCol.Add(new SqlDataParameter("@Extention", DbType.String, DBValue.ToDBString(fedex.Extention)));
                paramCol.Add(new SqlDataParameter("@Tax_id_ssn", DbType.String, DBValue.ToDBString(fedex.TaxIdSsn)));
                paramCol.Add(new SqlDataParameter("@Fedex_account", DbType.Int32, DBValue.ToDBInt32(fedex.FedexAccount)));
                paramCol.Add(new SqlDataParameter("@Shipalert_email_address", DbType.String, DBValue.ToDBString(fedex.ShipalertEmailAddress)));
                paramCol.Add(new SqlDataParameter("@Shipalert_email_message", DbType.String, DBValue.ToDBString(fedex.ShipalertEmailMessage)));
                paramCol.Add(new SqlDataParameter("@Shipalert_email_option", DbType.Int32, DBValue.ToDBInt32(fedex.ShipalertEmailOption)));
                paramCol.Add(new SqlDataParameter("@Total_package_weight", DbType.Int32, DBValue.ToDBInt32(fedex.TotalPackageWeight)));
                paramCol.Add(new SqlDataParameter("@Number_of_packages", DbType.Int32, DBValue.ToDBInt32(fedex.NumberOfPackages)));
                paramCol.Add(new SqlDataParameter("@Dimension_height", DbType.Int32, DBValue.ToDBInt32(fedex.DimensionHeight)));
                paramCol.Add(new SqlDataParameter("@Dimension_width", DbType.Int32, DBValue.ToDBInt32(fedex.DimensionWidth)));
                paramCol.Add(new SqlDataParameter("@Dimension_length", DbType.Int32, DBValue.ToDBInt32(fedex.DimensionLength)));
                paramCol.Add(new SqlDataParameter("@Sevice_level", DbType.String, DBValue.ToDBString(fedex.SeviceLevel)));
                paramCol.Add(new SqlDataParameter("@Bill_freight_charges_to", DbType.Int32, DBValue.ToDBInt32(fedex.BillFreightChargesTo)));
                paramCol.Add(new SqlDataParameter("@Inter_part_description", DbType.String, DBValue.ToDBString(fedex.InterPartDescription)));
                paramCol.Add(new SqlDataParameter("@Inter_unit_value", DbType.Double, DBValue.ToDBDouble(fedex.InterUnitValue)));
                paramCol.Add(new SqlDataParameter("@Inter_currency", DbType.String, DBValue.ToDBString(fedex.InterCurrency)));
                paramCol.Add(new SqlDataParameter("@Inter_unit_of_measure", DbType.String, DBValue.ToDBString(fedex.InterUnitOfMeasure)));
                paramCol.Add(new SqlDataParameter("@Inter_quantity", DbType.Int32, DBValue.ToDBInt32(fedex.InterQuantity)));
                paramCol.Add(new SqlDataParameter("@Inter_country_of_manufacture", DbType.String, DBValue.ToDBString(fedex.InterCountryOfManufacture)));
                paramCol.Add(new SqlDataParameter("@Inter_harmonized_code", DbType.Int64, DBValue.ToDBInt64(fedex.InterHarmonizedCode)));
                paramCol.Add(new SqlDataParameter("@Inter_part_number", DbType.String, DBValue.ToDBString(fedex.InterPartNumber)));
                paramCol.Add(new SqlDataParameter("@Inter_marks_number", DbType.String, DBValue.ToDBString(fedex.InterMarksNumber)));
                paramCol.Add(new SqlDataParameter("@Inter_sku_upc_item", DbType.String, DBValue.ToDBString(fedex.InterSkuUpcItem)));
                paramCol.Add(new SqlDataParameter("@Inter_bill_duties_taxes_to", DbType.Int32, DBValue.ToDBInt32(fedex.InterBillDutiesTaxesTo)));
                paramCol.Add(new SqlDataParameter("@Inter_create_date", DbType.DateTime, DBValue.ToDBDateTime(fedex.InterCreateDate)));
                paramCol.Add(new SqlDataParameter("@Inter_tracking_number", DbType.String, DBValue.ToDBString(fedex.InterTrackingNumber)));
                paramCol.Add(new SqlDataParameter("@Inter_label_date_shipped_date", DbType.DateTime, DBValue.ToDBDateTime(fedex.InterLabelDateShippedDate)));
                paramCol.Add(new SqlDataParameter("@Inter_update_sale_date", DbType.DateTime, DBValue.ToDBDateTime(fedex.InterUpdateSaleDate)));
                paramCol.Add(new SqlDataParameter("@Inter_shipping_quote", DbType.Double, DBValue.ToDBDouble(fedex.InterShippingQuote)));
                paramCol.Add(new SqlDataParameter("@Cancelled", DbType.Int32, DBValue.ToDBInt32(fedex.Cancelled)));
                paramCol.Add(new SqlDataParameter("@Cod_amount", DbType.Double, DBValue.ToDBDouble(fedex.CodAmount)));
                paramCol.Add(new SqlDataParameter("@Cod_payment_method", DbType.Int32, DBValue.ToDBInt32(fedex.CodPaymentMethod)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    // Get generated id
                    fedex.FedexId = DBValue.ToInt32(paramCol["@Fedex_id"].Value);

                }
                else
                {
                    throw new SqlDataException("Error inserting into database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }


        public int UpdateFedex(Fedex fedex)
        {
            return UpdateFedex(fedex, null);
        }

        private int UpdateFedex(Fedex fedex, SqlInterface si)
        {
            int result = int.MinValue;

            string storedProcName = "efrcrm_update_fedex";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;
            if (si == null)
            {
                si = new SqlInterface(dataProvider, connectionString);
            }
            else
            {
                newConnection = false;
            }

            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@Fedex_id", DbType.Int32, DBValue.ToDBInt32(fedex.FedexId)));
                paramCol.Add(new SqlDataParameter("@Fedex_uid", DbType.String, DBValue.ToDBString(fedex.FedexUid)));
                paramCol.Add(new SqlDataParameter("@Company_name", DbType.String, DBValue.ToDBString(fedex.CompanyName)));
                paramCol.Add(new SqlDataParameter("@Contact_name", DbType.String, DBValue.ToDBString(fedex.ContactName)));
                paramCol.Add(new SqlDataParameter("@Address_line_1", DbType.String, DBValue.ToDBString(fedex.AddressLine1)));
                paramCol.Add(new SqlDataParameter("@Address_line_2", DbType.String, DBValue.ToDBString(fedex.AddressLine2)));
                paramCol.Add(new SqlDataParameter("@City", DbType.String, DBValue.ToDBString(fedex.City)));
                paramCol.Add(new SqlDataParameter("@Province_state", DbType.String, DBValue.ToDBString(fedex.ProvinceState)));
                paramCol.Add(new SqlDataParameter("@Country", DbType.String, DBValue.ToDBString(fedex.Country)));
                paramCol.Add(new SqlDataParameter("@Zip_postal_code", DbType.String, DBValue.ToDBString(fedex.ZipPostalCode)));
                paramCol.Add(new SqlDataParameter("@Telephone", DbType.String, DBValue.ToDBString(fedex.Telephone)));
                paramCol.Add(new SqlDataParameter("@Extention", DbType.String, DBValue.ToDBString(fedex.Extention)));
                paramCol.Add(new SqlDataParameter("@Tax_id_ssn", DbType.String, DBValue.ToDBString(fedex.TaxIdSsn)));
                paramCol.Add(new SqlDataParameter("@Fedex_account", DbType.Int32, DBValue.ToDBInt32(fedex.FedexAccount)));
                paramCol.Add(new SqlDataParameter("@Shipalert_email_address", DbType.String, DBValue.ToDBString(fedex.ShipalertEmailAddress)));
                paramCol.Add(new SqlDataParameter("@Shipalert_email_message", DbType.String, DBValue.ToDBString(fedex.ShipalertEmailMessage)));
                paramCol.Add(new SqlDataParameter("@Shipalert_email_option", DbType.Int32, DBValue.ToDBInt32(fedex.ShipalertEmailOption)));
                paramCol.Add(new SqlDataParameter("@Total_package_weight", DbType.Int32, DBValue.ToDBInt32(fedex.TotalPackageWeight)));
                paramCol.Add(new SqlDataParameter("@Number_of_packages", DbType.Int32, DBValue.ToDBInt32(fedex.NumberOfPackages)));
                paramCol.Add(new SqlDataParameter("@Dimension_height", DbType.Int32, DBValue.ToDBInt32(fedex.DimensionHeight)));
                paramCol.Add(new SqlDataParameter("@Dimension_width", DbType.Int32, DBValue.ToDBInt32(fedex.DimensionWidth)));
                paramCol.Add(new SqlDataParameter("@Dimension_length", DbType.Int32, DBValue.ToDBInt32(fedex.DimensionLength)));
                paramCol.Add(new SqlDataParameter("@Sevice_level", DbType.String, DBValue.ToDBString(fedex.SeviceLevel)));
                paramCol.Add(new SqlDataParameter("@Bill_freight_charges_to", DbType.Int32, DBValue.ToDBInt32(fedex.BillFreightChargesTo)));
                paramCol.Add(new SqlDataParameter("@Inter_part_description", DbType.String, DBValue.ToDBString(fedex.InterPartDescription)));
                paramCol.Add(new SqlDataParameter("@Inter_unit_value", DbType.Double, DBValue.ToDBDouble(fedex.InterUnitValue)));
                paramCol.Add(new SqlDataParameter("@Inter_currency", DbType.String, DBValue.ToDBString(fedex.InterCurrency)));
                paramCol.Add(new SqlDataParameter("@Inter_unit_of_measure", DbType.String, DBValue.ToDBString(fedex.InterUnitOfMeasure)));
                paramCol.Add(new SqlDataParameter("@Inter_quantity", DbType.Int32, DBValue.ToDBInt32(fedex.InterQuantity)));
                paramCol.Add(new SqlDataParameter("@Inter_country_of_manufacture", DbType.String, DBValue.ToDBString(fedex.InterCountryOfManufacture)));
                paramCol.Add(new SqlDataParameter("@Inter_harmonized_code", DbType.Int64, DBValue.ToDBInt64(fedex.InterHarmonizedCode)));
                paramCol.Add(new SqlDataParameter("@Inter_part_number", DbType.String, DBValue.ToDBString(fedex.InterPartNumber)));
                paramCol.Add(new SqlDataParameter("@Inter_marks_number", DbType.String, DBValue.ToDBString(fedex.InterMarksNumber)));
                paramCol.Add(new SqlDataParameter("@Inter_sku_upc_item", DbType.String, DBValue.ToDBString(fedex.InterSkuUpcItem)));
                paramCol.Add(new SqlDataParameter("@Inter_bill_duties_taxes_to", DbType.Int32, DBValue.ToDBInt32(fedex.InterBillDutiesTaxesTo)));
                paramCol.Add(new SqlDataParameter("@Inter_create_date", DbType.DateTime, DBValue.ToDBDateTime(fedex.InterCreateDate)));
                paramCol.Add(new SqlDataParameter("@Inter_tracking_number", DbType.String, DBValue.ToDBString(fedex.InterTrackingNumber)));
                paramCol.Add(new SqlDataParameter("@Inter_label_date_shipped_date", DbType.DateTime, DBValue.ToDBDateTime(fedex.InterLabelDateShippedDate)));
                paramCol.Add(new SqlDataParameter("@Inter_update_sale_date", DbType.DateTime, DBValue.ToDBDateTime(fedex.InterUpdateSaleDate)));
                paramCol.Add(new SqlDataParameter("@Inter_shipping_quote", DbType.Double, DBValue.ToDBDouble(fedex.InterShippingQuote)));
                paramCol.Add(new SqlDataParameter("@Cancelled", DbType.Int32, DBValue.ToDBInt32(fedex.Cancelled)));
                paramCol.Add(new SqlDataParameter("@Cod_amount", DbType.Double, DBValue.ToDBDouble(fedex.CodAmount)));
                paramCol.Add(new SqlDataParameter("@Cod_payment_method", DbType.Int32, DBValue.ToDBInt32(fedex.CodPaymentMethod)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                result = si.ExecuteNonQuery(storedProcName, CommandType.StoredProcedure, paramCol);

                if (result > 0)
                {
                    return result;
                }
                else
                {
                    throw new SqlDataException("Error updating database calling " + storedProcName);
                }


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return result;
        }

        #endregion

        #region Functions
        public DateTime GetNextBusinessDay(DateTime date, int nbDays)
        {
            DateTime newDate = DateTime.Now;

            string storedProcName = "efrcrm_get_next_business_day";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;

            SqlInterface si = new SqlInterface(dataProvider, connectionString);


            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@date", DbType.DateTime, DBValue.ToDBDateTime(date)));
                paramCol.Add(new SqlDataParameter("@duration", DbType.Int32, DBValue.ToDBInt32(nbDays)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                newDate = Convert.ToDateTime(si.ExecuteScalar(storedProcName, CommandType.StoredProcedure, paramCol));


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return newDate;
        }

        public DateTime GetPreviousBusinessDay(DateTime date, int nbDays)
        {
            DateTime newDate = DateTime.Now;

            string storedProcName = "efrcrm_get_previous_business_day";

            // if the SqlInterface is passed as argument it means that 
            // this call should be applied to an already open connection
            // and the method which call this method is using transaction
            bool newConnection = true;

            SqlInterface si = new SqlInterface(dataProvider, connectionString);


            try
            {
                // declare stored procedure parameters
                SqlDataParameterCollection paramCol = new SqlDataParameterCollection();
                paramCol.Add(new SqlDataParameter("@date", DbType.DateTime, DBValue.ToDBDateTime(date)));
                paramCol.Add(new SqlDataParameter("@duration", DbType.Int32, DBValue.ToDBInt32(nbDays)));


                if (newConnection)
                {
                    // open the connection
                    si.Open();
                }

                newDate = Convert.ToDateTime(si.ExecuteScalar(storedProcName, CommandType.StoredProcedure, paramCol));


            }
            finally
            {
                if (newConnection)
                {
                    // Always close connection.
                    si.Close();
                }
            }
            return newDate;
        }

        #endregion
    }
}
