///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'CodeDetail'
// Generated by GenerationClass v1.2.1949.28361 Final
// on: 11 mai, 2005, 14:10:12
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using Common;
using Common.TableDef;
using dataSetRef = Common.TableDef.CodeDetailDataSet;


namespace DAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'CodeDetail'.
	/// </summary>
	public class CodeDetailData : DBTableOperation
	{
		#region Class Member Declarations
		internal const string PARAM_INSTANCE= "@iInstance";
		internal const string PARAM_CODEHEADERINSTANCE= "@iCodeHeaderInstance";
		internal const string PARAM_DESCRIPTION= "@sDescription";
		internal const string PARAM_GROSS= "@bGross";
		internal const string PARAM_ADPCODE= "@sADPCode";
		//

		// DataSetCommand object

		//

		private SqlCommand insertCommand;

		private SqlCommand deleteCommand;

		private SqlCommand updateCommand;

		#endregion

		dataSetRef dataSet = new dataSetRef();



		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public CodeDetailData() : base(DataBaseName.QSPCanadaCommon) { }

		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand("dbo.[pr_CodeDetail_Insert]");
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
				SqlParameterCollection sqlParams = insertCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_INSTANCE,SqlDbType.Int));
				sqlParams[PARAM_INSTANCE].SourceColumn = dataSet.CodeDetail.InstanceColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_CODEHEADERINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_CODEHEADERINSTANCE].SourceColumn = dataSet.CodeDetail.CodeHeaderInstanceColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_DESCRIPTION,SqlDbType.VarChar));
				sqlParams[PARAM_DESCRIPTION].SourceColumn = dataSet.CodeDetail.DescriptionColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_GROSS,SqlDbType.Bit));
				sqlParams[PARAM_GROSS].SourceColumn = dataSet.CodeDetail.GrossColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ADPCODE,SqlDbType.VarChar));
				sqlParams[PARAM_ADPCODE].SourceColumn = dataSet.CodeDetail.ADPCodeColumn.ColumnName;
			}
			return insertCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand("dbo.[pr_CodeDetail_Delete]");
				deleteCommand.CommandType = CommandType.StoredProcedure;
				SqlParameterCollection sqlParams = deleteCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_INSTANCE,SqlDbType.Int));
				sqlParams[PARAM_INSTANCE].SourceColumn = dataSet.CodeDetail.InstanceColumn.ColumnName;
			}
			return deleteCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand("dbo.[pr_CodeDetail_Update]");
				updateCommand.CommandType = CommandType.StoredProcedure;
				updateCommand.UpdatedRowSource = UpdateRowSource.OutputParameters;
				SqlParameterCollection sqlParams = updateCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_INSTANCE,SqlDbType.Int));
				sqlParams[PARAM_INSTANCE].SourceColumn = dataSet.CodeDetail.InstanceColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_CODEHEADERINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_CODEHEADERINSTANCE].SourceColumn = dataSet.CodeDetail.CodeHeaderInstanceColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_DESCRIPTION,SqlDbType.VarChar));
				sqlParams[PARAM_DESCRIPTION].SourceColumn = dataSet.CodeDetail.DescriptionColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_GROSS,SqlDbType.Bit));
				sqlParams[PARAM_GROSS].SourceColumn = dataSet.CodeDetail.GrossColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ADPCODE,SqlDbType.VarChar));
				sqlParams[PARAM_ADPCODE].SourceColumn = dataSet.CodeDetail.ADPCodeColumn.ColumnName;
			}
			return updateCommand;
		}


		public  void SelectOne(DataSet dtsDataSet, string tableName, int Instance)		
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_CodeDetail_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_INSTANCE, Instance));
			Select(cmdToExecute,dtsDataSet, tableName);
		}

		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public  void SelectAllByCodeHeaderInstance(DataSet dtsDataSet, string tableName, int CodeHeaderInstance)		
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_CodeDetail_SelectAllByCodeHeaderInstance]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_CODEHEADERINSTANCE, CodeHeaderInstance));
			Select(cmdToExecute,dtsDataSet, tableName);
		}

        public void SelectIncentivesBillTo(DataSet dtsDataSet, string tableName, bool IsCampaign2014OrLater)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[pr_CodeDetail_SelectIncentivesBillTo]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            cmdToExecute.Parameters.Add(new SqlParameter("IsCampaign2014OrLater", IsCampaign2014OrLater));
            Select(cmdToExecute, dtsDataSet, tableName);
        }
	}
}