///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'Address'
// Generated by GenerationClass v1.2.1949.28361 Final
// on: 10 mai, 2005, 22:13:20
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using Common;
using Common.TableDef;


namespace DAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Address'.
	/// </summary>
	public class InvoiceData : DBTableOperation
	{
		#region Class Member Declarations

		internal const string PARAM_ACCTNAME = "@AcctName";
		internal const string PARAM_INVOICEID = "@InvoiceID";
		internal const string PARAM_ACCTID = "@AccountID";
		internal const string PARAM_CAID = "@CampaignID";
        internal const string PARAM_FISCALYEAR = "@FiscalYear";
		internal const string PARAM_ISPRINTED = "@IsPrinted";
		internal const string PARAM_FMID = "@FMID";
        internal const string PARAM_SHOWONLYACCOUNTSINOWING = "@ShowInOwingOnly";
        internal const string PARAM_SHOWNONPRINTED = "@ShowNonPrinted";
      
		#endregion

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public InvoiceData() : base(DataBaseName.QSPCanadaFinance) { }

		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			return null;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			return null;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			return null;
		}

        public void SelectAllToPrint(DataSet dtsDataSet, string tableName, string accountName, int invoiceID, int accountID, int campaignID, int? fiscalYear, string isPrinted, string fmID, bool showOnlyAccountsInOwing, bool showNonPrinted)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			
            cmdToExecute.CommandText = "dbo.[GetAllInvoicesToPrint]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
            cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ACCTNAME, SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, accountName));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_INVOICEID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, invoiceID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ACCTID, SqlDbType.Int, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, accountID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_CAID, SqlDbType.Int, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, campaignID));
            cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FISCALYEAR, SqlDbType.Int, 8, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, fiscalYear));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ISPRINTED, SqlDbType.Char, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, isPrinted));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FMID, SqlDbType.Char, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fmID));
            cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SHOWONLYACCOUNTSINOWING, SqlDbType.Bit, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, showOnlyAccountsInOwing ? 1 : 0));
            cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SHOWNONPRINTED, SqlDbType.Bit, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, showNonPrinted ? 1 : 0));

            Select(cmdToExecute,dtsDataSet, tableName);
		}
	}
}