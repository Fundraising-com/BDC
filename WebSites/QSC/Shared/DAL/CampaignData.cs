///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'Campaign'
// Generated by GenerationClass v1.2.1949.28361 Final
// on: 4 mai, 2005, 12:05:33
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using Common;
using Common.TableDef;
using dataSetRef = Common.TableDef.CampaignDataSet;


namespace DAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Campaign'.
	/// </summary>
	public class CampaignData : DBTableOperation
	{
		#region Class Member Declarations
		internal const string PARAM_ID= "@iID";
		internal const string PARAM_STATUS= "@iStatus";
		internal const string PARAM_RENEWAL= "@bRenewal";
		internal const string PARAM_COUNTRY= "@sCountry";
		internal const string PARAM_FMID= "@sFMID";
		internal const string PARAM_DATECHANGED= "@sDateChanged";
		internal const string PARAM_LANG= "@sLang";
		internal const string PARAM_ENDDATE= "@daEndDate";
		internal const string PARAM_STARTDATE= "@daStartDate";
		internal const string PARAM_INCENTIVESBILLTOID= "@iIncentivesBillToID";
		internal const string PARAM_BILLTOACCOUNTID= "@iBillToAccountID";
		internal const string PARAM_SHIPTOCAMPAIGNCONTACTID= "@iShipToCampaignContactID";
		internal const string PARAM_SHIPTOACCOUNTID= "@iShipToAccountID";
		internal const string PARAM_ESTIMATEDGROSS= "@dcEstimatedGross";
		internal const string PARAM_NUMBEROFPARTICIPANTS= "@iNumberOfParticipants";
		internal const string PARAM_NUMBEROFCLASSROOOMS= "@iNumberOfClassroooms";
		internal const string PARAM_NUMBEROFSTAFF= "@iNumberOfStaff";
		internal const string PARAM_BILLTOCAMPAIGNCONTACTID= "@iBillToCampaignContactID";
		internal const string PARAM_SUPPLIESCAMPAIGNCONTACTID= "@iSuppliesCampaignContactID";
		internal const string PARAM_SUPPLIESSHIPTOCAMPAIGNCONTACTID= "@iSuppliesShipToCampaignContactID";
		internal const string PARAM_SUPPLIESDELIVERYDATE= "@daSuppliesDeliveryDate";
		internal const string PARAM_SPECIALINSTRUCTIONS= "@sSpecialInstructions";
		internal const string PARAM_ISSTAFFORDER= "@bIsStaffOrder";
		internal const string PARAM_STAFFORDERDISCOUNT= "@dcStaffOrderDiscount";
		internal const string PARAM_ISTESTCAMPAIGN= "@bIsTestCampaign";
		internal const string PARAM_DATEMODIFIED= "@daDateModified";
		internal const string PARAM_USERIDMODIFIED= "@iUserIDModified";
		internal const string PARAM_ISPAYLATER= "@bIsPayLater";
		internal const string PARAM_INCENTIVESDISTRIBUTIONID= "@iIncentivesDistributionID";
		internal const string PARAM_FSREQUIRED = "@bFSRequired";
		internal const string PARAM_FSEXTRAREQUIRED = "@bFSExtraRequired";
		internal const string PARAM_FSORDERRECCREATED= "@bFSOrderRecCreated";
		internal const string PARAM_APPROVEDSTATUSDATE= "@daApprovedStatusDate";
		internal const string PARAM_MAGNETSTATEMENTDATE= "@daMagnetStatementDate";
		internal const string PARAM_REWARDSPROGRAMCUMULATIVE= "@bRewardsProgramCumulative";
		internal const string PARAM_REWARDSPROGRAMCHART= "@bRewardsProgramChart";
		internal const string PARAM_REWARDSPROGRAMDRAW= "@bRewardsProgramDraw";
		internal const string PARAM_CONTACTNAME= "@sContactName";
		internal const string PARAM_PHONELISTID= "@iPhoneListID";
		internal const string PARAM_SUPPLIESADDRESSID= "@iSuppliesAddressID";
		internal const string PARAM_DATESUBMITTED = "@dDateSubmitted";
		internal const string PARAM_EXTRA1UPS="@iExtra_1Ups";
		internal const string PARAM_EXTRAGIFTFORM="@iExtra_GiftForm";
        internal const string PARAM_EXTRAMAGBROCHURE = "@iExtra_MagBrochure";
        internal const string PARAM_COOLCARDSBOXES = "@iCoolCardsBoxes";
        internal const string PARAM_ONLINEONLYPROGRAMS = "@bOnlineOnlyPrograms";
        internal const string PARAM_ONLINENUTFREE = "@bOnlineNutFree";
        internal const string PARAM_ONLINEMAGAZINETRTONLY = "@bOnlineMagazineTRTOnly";
        internal const string PARAM_FORCESTATEMENTPRINT = "bForceStatementPrint";
        internal const string PARAM_DISABLESTATEMENTPRINT = "bDisableStatementPrint";
        internal const string PARAM_COOKIEDOUGHDELIVERYDATE = "@daCookieDoughDeliveryDate";
        internal const string PARAM_CARRIERID = "@iCarrierID";
        internal const string PARAM_NOTES = "@sNotes";

		// Search parameters
		internal const string PARAM_ACCOUNTID= "@iAccountID";
		internal const string PARAM_CAMPAIGNID = "@iCampaignID";
		internal const string PARAM_NAME= "@sName";
		internal const string PARAM_CITY= "@sCity";
		internal const string PARAM_STATE= "@sState";
		internal const string PARAM_ZIP= "@sZip";
		internal const string PARAM_FMFIRSTNAME= "@sFMFirstName";
		internal const string PARAM_FMLASTNAME= "@sFMLastName";
		internal const string PARAM_FISCALYEAR= "@iFiscalYear";
		internal const string PARAM_APPROVEDSTATUSDATEFROM = "@dApprovedStatusDateFrom";
		internal const string PARAM_APPROVEDSTATUSDATETO = "@dApprovedStatusDateTo";
		internal const string PARAM_SUPPLYFROMDATE = "@sFromSupplyShipment";
		internal const string PARAM_SUPPLYTODATE = "@sToSupplyShipment";
		internal const string PARAM_SUPPLYGENERATED = "@iSupplyGenerated";
      internal const string PARAM_INCLUDEONLINEONLYCAMPAIGNS = "@bIncludeOnlineOnlyCampaigns";
      internal const string PARAM_INCLUDEPOPCORNCAMPAIGNS = "@bIncludePopcornCampaigns";

        //

        // DataSetCommand object

        //

        private SqlCommand insertCommand;

		private SqlCommand deleteCommand;

		private SqlCommand updateCommand;

		#endregion

		dataSetRef dataSet = new dataSetRef();



		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public CampaignData() : base(DataBaseName.QSPCanadaCommon) { }
		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand("dbo.[pr_Campaign_Insert]");
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
				SqlParameterCollection sqlParams = insertCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_ID,SqlDbType.Int));
				sqlParams[PARAM_ID].Direction = ParameterDirection.Output;
				sqlParams[PARAM_ID].SourceColumn = dataSet.Campaign.IDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_STATUS,SqlDbType.Int));
				sqlParams[PARAM_STATUS].SourceColumn = dataSet.Campaign.StatusColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_RENEWAL,SqlDbType.Bit));
				sqlParams[PARAM_RENEWAL].SourceColumn = dataSet.Campaign.RenewalColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_COUNTRY,SqlDbType.VarChar));
				sqlParams[PARAM_COUNTRY].SourceColumn = dataSet.Campaign.CountryColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_FMID,SqlDbType.VarChar));
				sqlParams[PARAM_FMID].SourceColumn = dataSet.Campaign.FMIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_DATECHANGED,SqlDbType.VarChar));
				sqlParams[PARAM_DATECHANGED].SourceColumn = dataSet.Campaign.DateChangedColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_LANG,SqlDbType.VarChar));
				sqlParams[PARAM_LANG].SourceColumn = dataSet.Campaign.LangColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ENDDATE,SqlDbType.DateTime));
				sqlParams[PARAM_ENDDATE].SourceColumn = dataSet.Campaign.EndDateColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_STARTDATE,SqlDbType.DateTime));
				sqlParams[PARAM_STARTDATE].SourceColumn = dataSet.Campaign.StartDateColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_INCENTIVESBILLTOID,SqlDbType.Int));
				sqlParams[PARAM_INCENTIVESBILLTOID].SourceColumn = dataSet.Campaign.IncentivesBillToIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_BILLTOACCOUNTID,SqlDbType.Int));
				sqlParams[PARAM_BILLTOACCOUNTID].SourceColumn = dataSet.Campaign.BillToAccountIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_SHIPTOCAMPAIGNCONTACTID,SqlDbType.Int));
				sqlParams[PARAM_SHIPTOCAMPAIGNCONTACTID].SourceColumn = dataSet.Campaign.ShipToCampaignContactIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_SHIPTOACCOUNTID,SqlDbType.Int));
				sqlParams[PARAM_SHIPTOACCOUNTID].SourceColumn = dataSet.Campaign.ShipToAccountIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ESTIMATEDGROSS,SqlDbType.Decimal));
				sqlParams[PARAM_ESTIMATEDGROSS].SourceColumn = dataSet.Campaign.EstimatedGrossColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_NUMBEROFPARTICIPANTS,SqlDbType.Int));
				sqlParams[PARAM_NUMBEROFPARTICIPANTS].SourceColumn = dataSet.Campaign.NumberOfParticipantsColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_NUMBEROFCLASSROOOMS,SqlDbType.Int));
				sqlParams[PARAM_NUMBEROFCLASSROOOMS].SourceColumn = dataSet.Campaign.NumberOfClassrooomsColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_NUMBEROFSTAFF,SqlDbType.Int));
				sqlParams[PARAM_NUMBEROFSTAFF].SourceColumn = dataSet.Campaign.NumberOfStaffColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_BILLTOCAMPAIGNCONTACTID,SqlDbType.Int));
				sqlParams[PARAM_BILLTOCAMPAIGNCONTACTID].SourceColumn = dataSet.Campaign.BillToCampaignContactIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_SUPPLIESCAMPAIGNCONTACTID,SqlDbType.Int));
				sqlParams[PARAM_SUPPLIESCAMPAIGNCONTACTID].SourceColumn = dataSet.Campaign.SuppliesCampaignContactIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_SUPPLIESSHIPTOCAMPAIGNCONTACTID,SqlDbType.Int));
				sqlParams[PARAM_SUPPLIESSHIPTOCAMPAIGNCONTACTID].SourceColumn = dataSet.Campaign.SuppliesShipToCampaignContactIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_SUPPLIESDELIVERYDATE,SqlDbType.DateTime));
				sqlParams[PARAM_SUPPLIESDELIVERYDATE].SourceColumn = dataSet.Campaign.SuppliesDeliveryDateColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_SPECIALINSTRUCTIONS,SqlDbType.VarChar));
				sqlParams[PARAM_SPECIALINSTRUCTIONS].SourceColumn = dataSet.Campaign.SpecialInstructionsColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ISSTAFFORDER,SqlDbType.Bit));
				sqlParams[PARAM_ISSTAFFORDER].SourceColumn = dataSet.Campaign.IsStaffOrderColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_STAFFORDERDISCOUNT,SqlDbType.Decimal));
				sqlParams[PARAM_STAFFORDERDISCOUNT].SourceColumn = dataSet.Campaign.StaffOrderDiscountColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ISTESTCAMPAIGN,SqlDbType.Bit));
				sqlParams[PARAM_ISTESTCAMPAIGN].SourceColumn = dataSet.Campaign.IsTestCampaignColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_DATEMODIFIED,SqlDbType.DateTime));
				sqlParams[PARAM_DATEMODIFIED].SourceColumn = dataSet.Campaign.DateModifiedColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_USERIDMODIFIED,SqlDbType.Int));
				sqlParams[PARAM_USERIDMODIFIED].SourceColumn = dataSet.Campaign.UserIDModifiedColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ISPAYLATER,SqlDbType.Bit));
				sqlParams[PARAM_ISPAYLATER].SourceColumn = dataSet.Campaign.IsPayLaterColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_INCENTIVESDISTRIBUTIONID,SqlDbType.Int));
				sqlParams[PARAM_INCENTIVESDISTRIBUTIONID].SourceColumn = dataSet.Campaign.IncentivesDistributionIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_FSREQUIRED,SqlDbType.Bit));
				sqlParams[PARAM_FSREQUIRED].SourceColumn = dataSet.Campaign.FSRequiredColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_FSEXTRAREQUIRED,SqlDbType.Bit));
				sqlParams[PARAM_FSEXTRAREQUIRED].SourceColumn = dataSet.Campaign.FSExtraRequiredColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_FSORDERRECCREATED,SqlDbType.Bit));
				sqlParams[PARAM_FSORDERRECCREATED].SourceColumn = dataSet.Campaign.FSOrderRecCreatedColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_APPROVEDSTATUSDATE,SqlDbType.DateTime));
				sqlParams[PARAM_APPROVEDSTATUSDATE].SourceColumn = dataSet.Campaign.ApprovedStatusDateColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_MAGNETSTATEMENTDATE,SqlDbType.DateTime));
				sqlParams[PARAM_MAGNETSTATEMENTDATE].SourceColumn = dataSet.Campaign.MagnetStatementDateColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_REWARDSPROGRAMCUMULATIVE,SqlDbType.Bit));
				sqlParams[PARAM_REWARDSPROGRAMCUMULATIVE].SourceColumn = dataSet.Campaign.RewardsProgramCumulativeColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_REWARDSPROGRAMCHART,SqlDbType.Bit));
				sqlParams[PARAM_REWARDSPROGRAMCHART].SourceColumn = dataSet.Campaign.RewardsProgramChartColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_REWARDSPROGRAMDRAW,SqlDbType.Bit));
				sqlParams[PARAM_REWARDSPROGRAMDRAW].SourceColumn = dataSet.Campaign.RewardsProgramDrawColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_CONTACTNAME,SqlDbType.VarChar));
				sqlParams[PARAM_CONTACTNAME].SourceColumn = dataSet.Campaign.ContactNameColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_PHONELISTID,SqlDbType.Int));
				sqlParams[PARAM_PHONELISTID].SourceColumn = dataSet.Campaign.PhoneListIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_SUPPLIESADDRESSID,SqlDbType.Int));
				sqlParams[PARAM_SUPPLIESADDRESSID].SourceColumn = dataSet.Campaign.SuppliesAddressIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_DATESUBMITTED,SqlDbType.DateTime));
				sqlParams[PARAM_DATESUBMITTED].SourceColumn = dataSet.Campaign.DateSubmittedColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_EXTRA1UPS,SqlDbType.Int));
				sqlParams[PARAM_EXTRA1UPS].SourceColumn = dataSet.Campaign.Extra_1UpsColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_EXTRAGIFTFORM,SqlDbType.Int));
				sqlParams[PARAM_EXTRAGIFTFORM].SourceColumn = dataSet.Campaign.Extra_GiftFormColumn.ColumnName;

                sqlParams.Add(new SqlParameter(PARAM_EXTRAMAGBROCHURE, SqlDbType.Int));
                sqlParams[PARAM_EXTRAMAGBROCHURE].SourceColumn = dataSet.Campaign.Extra_MagBrochureColumn.ColumnName;

            sqlParams.Add(new SqlParameter(PARAM_COOLCARDSBOXES, SqlDbType.Int));
            sqlParams[PARAM_COOLCARDSBOXES].SourceColumn = dataSet.Campaign.CoolCardsBoxesColumn.ColumnName;

            sqlParams.Add(new SqlParameter(PARAM_ONLINEONLYPROGRAMS,SqlDbType.Bit));
				sqlParams[PARAM_ONLINEONLYPROGRAMS].SourceColumn = dataSet.Campaign.OnlineOnlyProgramsColumn.ColumnName;

            sqlParams.Add(new SqlParameter(PARAM_ONLINENUTFREE, SqlDbType.Bit));
            sqlParams[PARAM_ONLINENUTFREE].SourceColumn = dataSet.Campaign.OnlineNutFreeColumn.ColumnName;

                sqlParams.Add(new SqlParameter(PARAM_ONLINEMAGAZINETRTONLY, SqlDbType.Bit));
                sqlParams[PARAM_ONLINEMAGAZINETRTONLY].SourceColumn = dataSet.Campaign.OnlineMagazineTRTOnlyColumn.ColumnName;

                sqlParams.Add(new SqlParameter(PARAM_FORCESTATEMENTPRINT, SqlDbType.Bit));
                sqlParams[PARAM_FORCESTATEMENTPRINT].SourceColumn = dataSet.Campaign.ForceStatementPrintColumn.ColumnName;

                sqlParams.Add(new SqlParameter(PARAM_DISABLESTATEMENTPRINT, SqlDbType.Bit));
                sqlParams[PARAM_DISABLESTATEMENTPRINT].SourceColumn = dataSet.Campaign.DisableStatementPrintColumn.ColumnName;

                sqlParams.Add(new SqlParameter(PARAM_COOKIEDOUGHDELIVERYDATE, SqlDbType.DateTime));
                sqlParams[PARAM_COOKIEDOUGHDELIVERYDATE].SourceColumn = dataSet.Campaign.CookieDoughDeliveryDateColumn.ColumnName;

                sqlParams.Add(new SqlParameter(PARAM_CARRIERID, SqlDbType.Int));
                sqlParams[PARAM_CARRIERID].SourceColumn = dataSet.Campaign.CarrierIDColumn.ColumnName;

                sqlParams.Add(new SqlParameter(PARAM_NOTES, SqlDbType.NVarChar));
                sqlParams[PARAM_NOTES].SourceColumn = dataSet.Campaign.NotesColumn.ColumnName;
            }
			return insertCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand("dbo.[pr_Campaign_Delete]");
				deleteCommand.CommandType = CommandType.StoredProcedure;
				SqlParameterCollection sqlParams = deleteCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_ID,SqlDbType.Int));
				sqlParams[PARAM_ID].SourceColumn = dataSet.Campaign.IDColumn.ColumnName;
			}
			return deleteCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand("dbo.[pr_Campaign_Update]");
				updateCommand.CommandType = CommandType.StoredProcedure;
				updateCommand.UpdatedRowSource = UpdateRowSource.OutputParameters;
				SqlParameterCollection sqlParams = updateCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_ID,SqlDbType.Int));
				sqlParams[PARAM_ID].SourceColumn = dataSet.Campaign.IDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_STATUS,SqlDbType.Int));
				sqlParams[PARAM_STATUS].SourceColumn = dataSet.Campaign.StatusColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_RENEWAL,SqlDbType.Bit));
				sqlParams[PARAM_RENEWAL].SourceColumn = dataSet.Campaign.RenewalColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_COUNTRY,SqlDbType.VarChar));
				sqlParams[PARAM_COUNTRY].SourceColumn = dataSet.Campaign.CountryColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_FMID,SqlDbType.VarChar));
				sqlParams[PARAM_FMID].SourceColumn = dataSet.Campaign.FMIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_DATECHANGED,SqlDbType.VarChar));
				sqlParams[PARAM_DATECHANGED].SourceColumn = dataSet.Campaign.DateChangedColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_LANG,SqlDbType.VarChar));
				sqlParams[PARAM_LANG].SourceColumn = dataSet.Campaign.LangColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ENDDATE,SqlDbType.DateTime));
				sqlParams[PARAM_ENDDATE].SourceColumn = dataSet.Campaign.EndDateColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_STARTDATE,SqlDbType.DateTime));
				sqlParams[PARAM_STARTDATE].SourceColumn = dataSet.Campaign.StartDateColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_INCENTIVESBILLTOID,SqlDbType.Int));
				sqlParams[PARAM_INCENTIVESBILLTOID].SourceColumn = dataSet.Campaign.IncentivesBillToIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_BILLTOACCOUNTID,SqlDbType.Int));
				sqlParams[PARAM_BILLTOACCOUNTID].SourceColumn = dataSet.Campaign.BillToAccountIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_SHIPTOCAMPAIGNCONTACTID,SqlDbType.Int));
				sqlParams[PARAM_SHIPTOCAMPAIGNCONTACTID].SourceColumn = dataSet.Campaign.ShipToCampaignContactIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_SHIPTOACCOUNTID,SqlDbType.Int));
				sqlParams[PARAM_SHIPTOACCOUNTID].SourceColumn = dataSet.Campaign.ShipToAccountIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ESTIMATEDGROSS,SqlDbType.Decimal));
				sqlParams[PARAM_ESTIMATEDGROSS].SourceColumn = dataSet.Campaign.EstimatedGrossColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_NUMBEROFPARTICIPANTS,SqlDbType.Int));
				sqlParams[PARAM_NUMBEROFPARTICIPANTS].SourceColumn = dataSet.Campaign.NumberOfParticipantsColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_NUMBEROFCLASSROOOMS,SqlDbType.Int));
				sqlParams[PARAM_NUMBEROFCLASSROOOMS].SourceColumn = dataSet.Campaign.NumberOfClassrooomsColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_NUMBEROFSTAFF,SqlDbType.Int));
				sqlParams[PARAM_NUMBEROFSTAFF].SourceColumn = dataSet.Campaign.NumberOfStaffColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_BILLTOCAMPAIGNCONTACTID,SqlDbType.Int));
				sqlParams[PARAM_BILLTOCAMPAIGNCONTACTID].SourceColumn = dataSet.Campaign.BillToCampaignContactIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_SUPPLIESCAMPAIGNCONTACTID,SqlDbType.Int));
				sqlParams[PARAM_SUPPLIESCAMPAIGNCONTACTID].SourceColumn = dataSet.Campaign.SuppliesCampaignContactIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_SUPPLIESSHIPTOCAMPAIGNCONTACTID,SqlDbType.Int));
				sqlParams[PARAM_SUPPLIESSHIPTOCAMPAIGNCONTACTID].SourceColumn = dataSet.Campaign.SuppliesShipToCampaignContactIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_SUPPLIESDELIVERYDATE,SqlDbType.DateTime));
				sqlParams[PARAM_SUPPLIESDELIVERYDATE].SourceColumn = dataSet.Campaign.SuppliesDeliveryDateColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_SPECIALINSTRUCTIONS,SqlDbType.VarChar));
				sqlParams[PARAM_SPECIALINSTRUCTIONS].SourceColumn = dataSet.Campaign.SpecialInstructionsColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ISSTAFFORDER,SqlDbType.Bit));
				sqlParams[PARAM_ISSTAFFORDER].SourceColumn = dataSet.Campaign.IsStaffOrderColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_STAFFORDERDISCOUNT,SqlDbType.Decimal));
				sqlParams[PARAM_STAFFORDERDISCOUNT].SourceColumn = dataSet.Campaign.StaffOrderDiscountColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ISTESTCAMPAIGN,SqlDbType.Bit));
				sqlParams[PARAM_ISTESTCAMPAIGN].SourceColumn = dataSet.Campaign.IsTestCampaignColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_DATEMODIFIED,SqlDbType.DateTime));
				sqlParams[PARAM_DATEMODIFIED].SourceColumn = dataSet.Campaign.DateModifiedColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_USERIDMODIFIED,SqlDbType.Int));
				sqlParams[PARAM_USERIDMODIFIED].SourceColumn = dataSet.Campaign.UserIDModifiedColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ISPAYLATER,SqlDbType.Bit));
				sqlParams[PARAM_ISPAYLATER].SourceColumn = dataSet.Campaign.IsPayLaterColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_INCENTIVESDISTRIBUTIONID,SqlDbType.Int));
				sqlParams[PARAM_INCENTIVESDISTRIBUTIONID].SourceColumn = dataSet.Campaign.IncentivesDistributionIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_FSREQUIRED,SqlDbType.Bit));
				sqlParams[PARAM_FSREQUIRED].SourceColumn = dataSet.Campaign.FSRequiredColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_FSEXTRAREQUIRED,SqlDbType.Bit));
				sqlParams[PARAM_FSEXTRAREQUIRED].SourceColumn = dataSet.Campaign.FSExtraRequiredColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_FSORDERRECCREATED,SqlDbType.Bit));
				sqlParams[PARAM_FSORDERRECCREATED].SourceColumn = dataSet.Campaign.FSOrderRecCreatedColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_APPROVEDSTATUSDATE,SqlDbType.DateTime));
				sqlParams[PARAM_APPROVEDSTATUSDATE].SourceColumn = dataSet.Campaign.ApprovedStatusDateColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_MAGNETSTATEMENTDATE,SqlDbType.DateTime));
				sqlParams[PARAM_MAGNETSTATEMENTDATE].SourceColumn = dataSet.Campaign.MagnetStatementDateColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_REWARDSPROGRAMCUMULATIVE,SqlDbType.Bit));
				sqlParams[PARAM_REWARDSPROGRAMCUMULATIVE].SourceColumn = dataSet.Campaign.RewardsProgramCumulativeColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_REWARDSPROGRAMCHART,SqlDbType.Bit));
				sqlParams[PARAM_REWARDSPROGRAMCHART].SourceColumn = dataSet.Campaign.RewardsProgramChartColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_REWARDSPROGRAMDRAW,SqlDbType.Bit));
				sqlParams[PARAM_REWARDSPROGRAMDRAW].SourceColumn = dataSet.Campaign.RewardsProgramDrawColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_CONTACTNAME,SqlDbType.VarChar));
				sqlParams[PARAM_CONTACTNAME].SourceColumn = dataSet.Campaign.ContactNameColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_PHONELISTID,SqlDbType.Int));
				sqlParams[PARAM_PHONELISTID].SourceColumn = dataSet.Campaign.PhoneListIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_SUPPLIESADDRESSID,SqlDbType.Int));
				sqlParams[PARAM_SUPPLIESADDRESSID].SourceColumn = dataSet.Campaign.SuppliesAddressIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_DATESUBMITTED,SqlDbType.DateTime));
				sqlParams[PARAM_DATESUBMITTED].SourceColumn = dataSet.Campaign.DateSubmittedColumn.ColumnName;
			
				sqlParams.Add(new SqlParameter(PARAM_EXTRA1UPS,SqlDbType.Int));
				sqlParams[PARAM_EXTRA1UPS].SourceColumn = dataSet.Campaign.Extra_1UpsColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_EXTRAGIFTFORM,SqlDbType.Int));
				sqlParams[PARAM_EXTRAGIFTFORM].SourceColumn = dataSet.Campaign.Extra_GiftFormColumn.ColumnName;

                sqlParams.Add(new SqlParameter(PARAM_EXTRAMAGBROCHURE, SqlDbType.Int));
                sqlParams[PARAM_EXTRAMAGBROCHURE].SourceColumn = dataSet.Campaign.Extra_MagBrochureColumn.ColumnName;

                sqlParams.Add(new SqlParameter(PARAM_COOLCARDSBOXES, SqlDbType.Int));
                sqlParams[PARAM_COOLCARDSBOXES].SourceColumn = dataSet.Campaign.CoolCardsBoxesColumn.ColumnName;

               sqlParams.Add(new SqlParameter(PARAM_ONLINEONLYPROGRAMS, SqlDbType.Bit));
				    sqlParams[PARAM_ONLINEONLYPROGRAMS].SourceColumn = dataSet.Campaign.OnlineOnlyProgramsColumn.ColumnName;

                sqlParams.Add(new SqlParameter(PARAM_ONLINENUTFREE, SqlDbType.Bit));
                sqlParams[PARAM_ONLINENUTFREE].SourceColumn = dataSet.Campaign.OnlineNutFreeColumn.ColumnName;

                sqlParams.Add(new SqlParameter(PARAM_ONLINEMAGAZINETRTONLY, SqlDbType.Bit));
                sqlParams[PARAM_ONLINEMAGAZINETRTONLY].SourceColumn = dataSet.Campaign.OnlineMagazineTRTOnlyColumn.ColumnName;

                sqlParams.Add(new SqlParameter(PARAM_FORCESTATEMENTPRINT, SqlDbType.Bit));
                sqlParams[PARAM_FORCESTATEMENTPRINT].SourceColumn = dataSet.Campaign.ForceStatementPrintColumn.ColumnName;

                sqlParams.Add(new SqlParameter(PARAM_DISABLESTATEMENTPRINT, SqlDbType.Bit));
                sqlParams[PARAM_DISABLESTATEMENTPRINT].SourceColumn = dataSet.Campaign.DisableStatementPrintColumn.ColumnName;

                sqlParams.Add(new SqlParameter(PARAM_COOKIEDOUGHDELIVERYDATE, SqlDbType.DateTime));
                sqlParams[PARAM_COOKIEDOUGHDELIVERYDATE].SourceColumn = dataSet.Campaign.CookieDoughDeliveryDateColumn.ColumnName;

                sqlParams.Add(new SqlParameter(PARAM_CARRIERID, SqlDbType.Int));
                sqlParams[PARAM_CARRIERID].SourceColumn = dataSet.Campaign.CarrierIDColumn.ColumnName;

                sqlParams.Add(new SqlParameter(PARAM_NOTES, SqlDbType.NVarChar));
                sqlParams[PARAM_NOTES].SourceColumn = dataSet.Campaign.NotesColumn.ColumnName;
            }
			return updateCommand;
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID</LI>
		/// </UL>
		///		 <LI>ID</LI>
		///		 <LI>Status</LI>
		///		 <LI>Country</LI>
		///		 <LI>FMID</LI>
		///		 <LI>DateChanged</LI>
		///		 <LI>Lang</LI>
		///		 <LI>EndDate</LI>
		///		 <LI>StartDate</LI>
		///		 <LI>IncentivesBillToID</LI>
		///		 <LI>BillToAccountID</LI>
		///		 <LI>ShipToCampaignContactID</LI>
		///		 <LI>ShipToAccountID</LI>
		///		 <LI>EstimatedGross</LI>
		///		 <LI>NumberOfParticipants</LI>
		///		 <LI>NumberOfClassroooms</LI>
		///		 <LI>NumberOfStaff</LI>
		///		 <LI>BillToCampaignContactID</LI>
		///		 <LI>SuppliesCampaignContactID</LI>
		///		 <LI>SuppliesShipToCampaignContactID</LI>
		///		 <LI>SuppliesDeliveryDate</LI>
		///		 <LI>SpecialInstructions</LI>
		///		 <LI>IsStaffOrder</LI>
		///		 <LI>StaffOrderDiscount</LI>
		///		 <LI>IsTestCampaign</LI>
		///		 <LI>DateModified</LI>
		///		 <LI>UserIDModified</LI>
		///		 <LI>IsPayLater</LI>
		///		 <LI>IncentivesDistributionID</LI>
		///		 <LI>FSOrderRecCreated</LI>
		///		 <LI>ApprovedStatusDate</LI>
		///		 <LI>MagnetStatementDate</LI>
		///		 <LI>RewardsProgramCumulative</LI>
		///		 <LI>RewardsProgramChart</LI>
		///		 <LI>RewardsProgramDraw</LI>
		///		 <LI>ContactName</LI>
		///		 <LI>PhoneListID</LI>
		///		 <LI>SuppliesAddressID</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public  void SelectOne(DataSet dtsDataSet, string tableName, Int32 ID)		
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Campaign_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ID));
			Select(cmdToExecute,dtsDataSet, tableName);
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public  void SelectAll(DataSet dtsDataSet, string tableName)		
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Campaign_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(cmdToExecute,dtsDataSet, tableName);
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'PhoneListID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>PhoneListID. May be SqlInt32.Null</LI>
		/// </UL>
		/// </remarks>
		public void SelectAllByShipToAccountID(DataSet dtsDataSet, string tableName, int shipToAccountID)		
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Campaign_SelectAllByShipToAccountID]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SHIPTOACCOUNTID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, shipToAccountID));
			Select(cmdToExecute,dtsDataSet, tableName);
		}

		public void SelectSearch(DataSet dtsDataSet, string tableName, string FMID, int AccountID, int CampaignID, string Name, string City, string State, string Zip, string FMFirstName, string FMLastName, int FiscalYear,string SupplyFromDate, string SupplyToDate, int iSuppliesGenerated)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_get_CampaignList_V2]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FMID, SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FMID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ACCOUNTID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, AccountID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_CAMPAIGNID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CampaignID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_NAME, SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Name));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_CITY, SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, City));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_STATE, SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, State));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ZIP, SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Zip));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FMFIRSTNAME, SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FMFirstName));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FMLASTNAME, SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FMLastName));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FISCALYEAR, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FiscalYear));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SUPPLYFROMDATE, SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SupplyFromDate));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SUPPLYTODATE, SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SupplyToDate));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SUPPLYGENERATED, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, iSuppliesGenerated));
			Select(cmdToExecute,dtsDataSet, tableName);
		}

		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public  void SelectSearchForBatchReports(DataSet dtsDataSet, string tableName, int ID, int AccountID, string FMID, DateTime StartDate, DateTime EndDate, DateTime ApprovedStatusDateFrom, DateTime ApprovedStatusDateTo, bool IncludeOnlineOnlyCampaigns, bool IncludePopcornCampaigns)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Campaign_SelectSearchForBatchReports]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ACCOUNTID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, AccountID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FMID, SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FMID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_STARTDATE, SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, StartDate));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ENDDATE, SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, EndDate));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_APPROVEDSTATUSDATEFROM, SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ApprovedStatusDateFrom));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_APPROVEDSTATUSDATETO, SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ApprovedStatusDateTo));
         cmdToExecute.Parameters.Add(new SqlParameter(PARAM_INCLUDEONLINEONLYCAMPAIGNS, SqlDbType.Bit, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, IncludeOnlineOnlyCampaigns));
         cmdToExecute.Parameters.Add(new SqlParameter(PARAM_INCLUDEPOPCORNCAMPAIGNS, SqlDbType.Bit, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, IncludePopcornCampaigns));
         Select(cmdToExecute,dtsDataSet, tableName);
		}
		public void UpdateContactForAllAccount(int caccountID, int shipToContactID) 
		{
			SqlCommand cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_upd_CAccount_ContactInfoForAllCa]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iCAccountID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, caccountID));
			cmdToExecute.Parameters.Add(new SqlParameter("@iShipToContactID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, shipToContactID));
			ExecuteCmd(cmdToExecute);
		}
		public void GenerateFieldSupplies( int nFiscal, int campaignID,  string SupplyShipFrom, string SupplyShipTo, string Province, string FMID)
		{
			SqlCommand cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GenerateFieldSupplies]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@fiscal", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, nFiscal));
			cmdToExecute.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, campaignID));
			cmdToExecute.Parameters.Add(new SqlParameter("@shipdatefrom", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SupplyShipFrom));
			cmdToExecute.Parameters.Add(new SqlParameter("@shipdateto", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SupplyShipTo));
			cmdToExecute.Parameters.Add(new SqlParameter("@province", SqlDbType.VarChar, 4, ParameterDirection.Input, false, 4, 0, "", DataRowVersion.Proposed, Province));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FMID, SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FMID));			
			ExecuteCmd(cmdToExecute);
		}

		/*public void ValidateCancellation (DataSet dtsDataSet, string tableName,int campaignID)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_ValidateCampaignCancellation]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_CAMPAIGNID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, campaignID));
			Select(cmdToExecute,dtsDataSet, tableName);
		}*/

	}
}