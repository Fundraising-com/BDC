///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'CAccountClass'
// Generated by GenerationClass v1.2.1949.28361 Final
// on: 10 mai, 2005, 11:36:38
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using Common;
using Common.TableDef;
using dataSetRef = Common.TableDef.CAccountClassCodeDataSet;


namespace DAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'CAccountClass'.
	/// </summary>
	public class CAccountClassData : DBTableOperation
	{
		#region Class Member Declarations
		internal const string PARAM_ID= "@iId";
		internal const string PARAM_ACCOUNTCLASS= "@sAccountClass";
		internal const string PARAM_NAME= "@sName";
		//

		// DataSetCommand object

		//

		private SqlCommand insertCommand;

		private SqlCommand deleteCommand;

		private SqlCommand updateCommand;

		#endregion

		dataSetRef dataSet = new dataSetRef();



		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public CAccountClassData() : base(DataBaseName.QSPCanadaCommon) { }

		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand("dbo.[pr_CAccountClass_Insert]");
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
				SqlParameterCollection sqlParams = insertCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_ID,SqlDbType.Int));
				sqlParams[PARAM_ID].Direction = ParameterDirection.Output;
				sqlParams[PARAM_ID].SourceColumn = dataSet.CAccountClass.IdColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ACCOUNTCLASS,SqlDbType.VarChar));
				sqlParams[PARAM_ACCOUNTCLASS].SourceColumn = dataSet.CAccountClass.AccountClassColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_NAME,SqlDbType.VarChar));
				sqlParams[PARAM_NAME].SourceColumn = dataSet.CAccountClass.NameColumn.ColumnName;
			}
			return insertCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand("dbo.[pr_CAccountClass_Delete]");
				deleteCommand.CommandType = CommandType.StoredProcedure;
				SqlParameterCollection sqlParams = deleteCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_ID,SqlDbType.Int));
				sqlParams[PARAM_ID].SourceColumn = dataSet.CAccountClass.IdColumn.ColumnName;
			}
			return deleteCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand("dbo.[pr_CAccountClass_Update]");
				updateCommand.CommandType = CommandType.StoredProcedure;
				updateCommand.UpdatedRowSource = UpdateRowSource.OutputParameters;
				SqlParameterCollection sqlParams = updateCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_ID,SqlDbType.Int));
				sqlParams[PARAM_ID].SourceColumn = dataSet.CAccountClass.IdColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ACCOUNTCLASS,SqlDbType.VarChar));
				sqlParams[PARAM_ACCOUNTCLASS].SourceColumn = dataSet.CAccountClass.AccountClassColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_NAME,SqlDbType.VarChar));
				sqlParams[PARAM_NAME].SourceColumn = dataSet.CAccountClass.NameColumn.ColumnName;
			}
			return updateCommand;
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Id</LI>
		/// </UL>
		///		 <LI>Id</LI>
		///		 <LI>AccountClass</LI>
		///		 <LI>Name</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public  void SelectOne(DataSet dtsDataSet, string tableName, Int32 Id)		
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_CAccountClass_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Id));
			Select(cmdToExecute,dtsDataSet, tableName);
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public  void SelectAll(DataSet dtsDataSet, string tableName)		
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_CAccountClass_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(cmdToExecute,dtsDataSet, tableName);
		}
	}
}