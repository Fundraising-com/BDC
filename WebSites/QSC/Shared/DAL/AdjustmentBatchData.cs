///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'AdjustmentBatch'
// Generated by GenerationClass v1.2.2252.25287 Final
// on: 2 mars, 2006, 14:05:57
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using Common;
using Common.TableDef;
using dataSetRef = Common.TableDef.AdjustmentBatchDataSet;


namespace DAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'AdjustmentBatch'.
	/// </summary>
	public class AdjustmentBatchData : DBTableOperation
	{
		#region Class Member Declarations
		internal const string PARAM_ID= "@iID";
		internal const string PARAM_ADJUSTMENTTYPEID= "@iAdjustmentTypeID";
		internal const string PARAM_STATUS= "@iStatus";
		internal const string PARAM_CREATEUSERID= "@iCreateUserID";
		internal const string PARAM_CREATEDATE= "@daCreateDate";
		internal const string PARAM_CHANGEUSERID= "@iChangeUserID";
		internal const string PARAM_CHANGEDATE= "@daChangeDate";
		internal const string PARAM_DATEFROM = "@dDateFrom";
		internal const string PARAM_DATETO = "@dDateTo";
		internal const string PARAM_USERID = "@iUserID";
		//

		// DataSetCommand object

		//

		private SqlCommand insertCommand;

		private SqlCommand deleteCommand;

		private SqlCommand updateCommand;

		#endregion

		dataSetRef dataSet = new dataSetRef();



		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public AdjustmentBatchData() : base(DataBaseName.QSPCanadaFinance) { }
		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand("dbo.[pr_AdjustmentBatch_Insert]");
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
				SqlParameterCollection sqlParams = insertCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_ID,SqlDbType.Int));
				sqlParams[PARAM_ID].Direction = ParameterDirection.Output;
				sqlParams[PARAM_ID].SourceColumn = dataSet.AdjustmentBatch.IDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ADJUSTMENTTYPEID,SqlDbType.Int));
				sqlParams[PARAM_ADJUSTMENTTYPEID].SourceColumn = dataSet.AdjustmentBatch.AdjustmentTypeIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_STATUS,SqlDbType.Int));
				sqlParams[PARAM_STATUS].SourceColumn = dataSet.AdjustmentBatch.StatusColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_CREATEUSERID,SqlDbType.Int));
				sqlParams[PARAM_CREATEUSERID].SourceColumn = dataSet.AdjustmentBatch.CreateUserIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_CREATEDATE,SqlDbType.DateTime));
				sqlParams[PARAM_CREATEDATE].SourceColumn = dataSet.AdjustmentBatch.CreateDateColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_CHANGEUSERID,SqlDbType.Int));
				sqlParams[PARAM_CHANGEUSERID].SourceColumn = dataSet.AdjustmentBatch.ChangeUserIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_CHANGEDATE,SqlDbType.DateTime));
				sqlParams[PARAM_CHANGEDATE].SourceColumn = dataSet.AdjustmentBatch.ChangeDateColumn.ColumnName;
			}
			return insertCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand("dbo.[pr_AdjustmentBatch_Delete]");
				deleteCommand.CommandType = CommandType.StoredProcedure;
				SqlParameterCollection sqlParams = deleteCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_ID,SqlDbType.Int));
				sqlParams[PARAM_ID].SourceColumn = dataSet.AdjustmentBatch.IDColumn.ColumnName;
			}
			return deleteCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand("dbo.[pr_AdjustmentBatch_Update]");
				updateCommand.CommandType = CommandType.StoredProcedure;
				updateCommand.UpdatedRowSource = UpdateRowSource.OutputParameters;
				SqlParameterCollection sqlParams = updateCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_ID,SqlDbType.Int));
				sqlParams[PARAM_ID].SourceColumn = dataSet.AdjustmentBatch.IDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ADJUSTMENTTYPEID,SqlDbType.Int));
				sqlParams[PARAM_ADJUSTMENTTYPEID].SourceColumn = dataSet.AdjustmentBatch.AdjustmentTypeIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_STATUS,SqlDbType.Int));
				sqlParams[PARAM_STATUS].SourceColumn = dataSet.AdjustmentBatch.StatusColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_CREATEUSERID,SqlDbType.Int));
				sqlParams[PARAM_CREATEUSERID].SourceColumn = dataSet.AdjustmentBatch.CreateUserIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_CREATEDATE,SqlDbType.DateTime));
				sqlParams[PARAM_CREATEDATE].SourceColumn = dataSet.AdjustmentBatch.CreateDateColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_CHANGEUSERID,SqlDbType.Int));
				sqlParams[PARAM_CHANGEUSERID].SourceColumn = dataSet.AdjustmentBatch.ChangeUserIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_CHANGEDATE,SqlDbType.DateTime));
				sqlParams[PARAM_CHANGEDATE].SourceColumn = dataSet.AdjustmentBatch.ChangeDateColumn.ColumnName;
			}
			return updateCommand;
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID</LI>
		/// </UL>
		///		 <LI>ID</LI>
		///		 <LI>AdjustmentTypeID</LI>
		///		 <LI>Status</LI>
		///		 <LI>CreateUserID</LI>
		///		 <LI>CreateDate</LI>
		///		 <LI>ChangeUserID</LI>
		///		 <LI>ChangeDate</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public  void SelectOne(DataSet dtsDataSet, string tableName, Int32 ID)		
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_AdjustmentBatch_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ID));
			Select(cmdToExecute,dtsDataSet, tableName);
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public  void SelectAll(DataSet dtsDataSet, string tableName)		
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_AdjustmentBatch_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(cmdToExecute,dtsDataSet, tableName);
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'AdjustmentTypeID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>AdjustmentTypeID</LI>
		/// </UL>
		/// </remarks>
		public void SelectSearch(DataSet dtsDataSet, string tableName, int id, int adjustmentTypeID, int status, DateTime dateFrom, DateTime dateTo)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_AdjustmentBatch_SelectSearch]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, id));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ADJUSTMENTTYPEID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, adjustmentTypeID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_STATUS, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, status));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_DATEFROM, SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, dateFrom));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_DATETO, SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, dateTo));
			Select(cmdToExecute,dtsDataSet, tableName);
		}

		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'AdjustmentTypeID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>AdjustmentTypeID</LI>
		/// </UL>
		/// </remarks>
		public int Generate(int adjustmentTypeID, DateTime dateFrom, DateTime dateTo, int userID)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GenerateAdjustmentBatch]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ADJUSTMENTTYPEID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, adjustmentTypeID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_DATEFROM, SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, dateFrom));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_DATETO, SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, dateTo));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_USERID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, userID));
			return Convert.ToInt32(ExecuteScalar(cmdToExecute));
		}

		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'AdjustmentTypeID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>AdjustmentTypeID</LI>
		/// </UL>
		/// </remarks>
		public void UpdateStatus(int id, int status, int userID)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_AdjustmentBatch_UpdateStatus]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, id));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_STATUS, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, status));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_USERID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, userID));
			ExecuteCmd(cmdToExecute);
		}
	}
}
