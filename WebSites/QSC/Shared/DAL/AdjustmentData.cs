///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'ADJUSTMENT'
// Generated by GenerationClass v1.2.2252.25287 Final
// on: 2 mars, 2006, 14:05:54
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using Common;
using Common.TableDef;
using dataSetRef = Common.TableDef.AdjustmentBatchListDataSet;


namespace DAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'ADJUSTMENT'.
	/// </summary>
	public class AdjustmentData : DBTableOperation
	{
		#region Class Member Declarations
		internal const string PARAM_ADJUSTMENT_ID= "@iADJUSTMENT_ID";
		internal const string PARAM_ACCOUNT_ID= "@iACCOUNT_ID";
		internal const string PARAM_ACCOUNT_TYPE_ID= "@iACCOUNT_TYPE_ID";
		internal const string PARAM_ADJUSTMENT_TYPE_ID= "@iAdjustmentTypeID";
		internal const string PARAM_ADJUSTMENT_EFFECTIVE_DATE= "@daADJUSTMENT_EFFECTIVE_DATE";
		internal const string PARAM_ADJUSTMENT_AMOUNT= "@dcADJUSTMENT_AMOUNT";
		internal const string PARAM_NOTE_TO_PRINT= "@sNOTE_TO_PRINT";
		internal const string PARAM_DATE_CREATED= "@daDATE_CREATED";
		internal const string PARAM_DATETIME_MODIFIED= "@daDATETIME_MODIFIED";
		internal const string PARAM_LAST_UPDATED_BY= "@sLAST_UPDATED_BY";
		internal const string PARAM_COUNTRY_CODE= "@sCOUNTRY_CODE";
		internal const string PARAM_INTERNAL_COMMENT= "@sINTERNAL_COMMENT";
		internal const string PARAM_ORDER_ID= "@iORDER_ID";
		internal const string PARAM_CAMPAIGN_ID= "@iCAMPAIGN_ID";
		internal const string PARAM_ADJUSTMENT_BATCH_ID= "@iAdjustmentBatchID";
		internal const string PARAM_ADJUSTMENT_BATCH_STATUS = "@iAdjustmentBatchStatus";
		internal const string PARAM_DATEFROM = "@dDateFrom";
		internal const string PARAM_DATETO = "@dDateTo";
		//

		// DataSetCommand object

		//

		private SqlCommand insertCommand;

		private SqlCommand deleteCommand;

		private SqlCommand updateCommand;

		#endregion

		dataSetRef dataSet = new dataSetRef();



		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public AdjustmentData() : base(DataBaseName.QSPCanadaFinance) { }
		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand("dbo.[pr_ADJUSTMENT_Insert]");
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
				SqlParameterCollection sqlParams = insertCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_ADJUSTMENT_ID,SqlDbType.Int));
				sqlParams[PARAM_ADJUSTMENT_ID].Direction = ParameterDirection.Output;
				sqlParams[PARAM_ADJUSTMENT_ID].SourceColumn = dataSet.ADJUSTMENT.ADJUSTMENT_IDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ACCOUNT_ID,SqlDbType.Int));
				sqlParams[PARAM_ACCOUNT_ID].SourceColumn = dataSet.ADJUSTMENT.ACCOUNT_IDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ACCOUNT_TYPE_ID,SqlDbType.Int));
				sqlParams[PARAM_ACCOUNT_TYPE_ID].SourceColumn = dataSet.ADJUSTMENT.ACCOUNT_TYPE_IDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ADJUSTMENT_TYPE_ID,SqlDbType.Int));
				sqlParams[PARAM_ADJUSTMENT_TYPE_ID].SourceColumn = dataSet.ADJUSTMENT.ADJUSTMENT_TYPE_IDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ADJUSTMENT_EFFECTIVE_DATE,SqlDbType.DateTime));
				sqlParams[PARAM_ADJUSTMENT_EFFECTIVE_DATE].SourceColumn = dataSet.ADJUSTMENT.ADJUSTMENT_EFFECTIVE_DATEColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ADJUSTMENT_AMOUNT,SqlDbType.Decimal));
				sqlParams[PARAM_ADJUSTMENT_AMOUNT].SourceColumn = dataSet.ADJUSTMENT.ADJUSTMENT_AMOUNTColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_NOTE_TO_PRINT,SqlDbType.VarChar));
				sqlParams[PARAM_NOTE_TO_PRINT].SourceColumn = dataSet.ADJUSTMENT.NOTE_TO_PRINTColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_DATE_CREATED,SqlDbType.DateTime));
				sqlParams[PARAM_DATE_CREATED].SourceColumn = dataSet.ADJUSTMENT.DATE_CREATEDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_DATETIME_MODIFIED,SqlDbType.DateTime));
				sqlParams[PARAM_DATETIME_MODIFIED].SourceColumn = dataSet.ADJUSTMENT.DATETIME_MODIFIEDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_LAST_UPDATED_BY,SqlDbType.VarChar));
				sqlParams[PARAM_LAST_UPDATED_BY].SourceColumn = dataSet.ADJUSTMENT.LAST_UPDATED_BYColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_COUNTRY_CODE,SqlDbType.VarChar));
				sqlParams[PARAM_COUNTRY_CODE].SourceColumn = dataSet.ADJUSTMENT.COUNTRY_CODEColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_INTERNAL_COMMENT,SqlDbType.VarChar));
				sqlParams[PARAM_INTERNAL_COMMENT].SourceColumn = dataSet.ADJUSTMENT.INTERNAL_COMMENTColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ORDER_ID,SqlDbType.Int));
				sqlParams[PARAM_ORDER_ID].SourceColumn = dataSet.ADJUSTMENT.ORDER_IDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_CAMPAIGN_ID,SqlDbType.Int));
				sqlParams[PARAM_CAMPAIGN_ID].SourceColumn = dataSet.ADJUSTMENT.CAMPAIGN_IDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ADJUSTMENT_BATCH_ID,SqlDbType.Int));
				sqlParams[PARAM_ADJUSTMENT_BATCH_ID].SourceColumn = dataSet.ADJUSTMENT.ADJUSTMENT_BATCH_IDColumn.ColumnName;
			}
			return insertCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand("dbo.[pr_ADJUSTMENT_Delete]");
				deleteCommand.CommandType = CommandType.StoredProcedure;
				SqlParameterCollection sqlParams = deleteCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_ADJUSTMENT_ID,SqlDbType.Int));
				sqlParams[PARAM_ADJUSTMENT_ID].SourceColumn = dataSet.ADJUSTMENT.ADJUSTMENT_IDColumn.ColumnName;
			}
			return deleteCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand("dbo.[pr_ADJUSTMENT_Update]");
				updateCommand.CommandType = CommandType.StoredProcedure;
				updateCommand.UpdatedRowSource = UpdateRowSource.OutputParameters;
				SqlParameterCollection sqlParams = updateCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_ADJUSTMENT_ID,SqlDbType.Int));
				sqlParams[PARAM_ADJUSTMENT_ID].SourceColumn = dataSet.ADJUSTMENT.ADJUSTMENT_IDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ACCOUNT_ID,SqlDbType.Int));
				sqlParams[PARAM_ACCOUNT_ID].SourceColumn = dataSet.ADJUSTMENT.ACCOUNT_IDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ACCOUNT_TYPE_ID,SqlDbType.Int));
				sqlParams[PARAM_ACCOUNT_TYPE_ID].SourceColumn = dataSet.ADJUSTMENT.ACCOUNT_TYPE_IDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ADJUSTMENT_TYPE_ID,SqlDbType.Int));
				sqlParams[PARAM_ADJUSTMENT_TYPE_ID].SourceColumn = dataSet.ADJUSTMENT.ADJUSTMENT_TYPE_IDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ADJUSTMENT_EFFECTIVE_DATE,SqlDbType.DateTime));
				sqlParams[PARAM_ADJUSTMENT_EFFECTIVE_DATE].SourceColumn = dataSet.ADJUSTMENT.ADJUSTMENT_EFFECTIVE_DATEColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ADJUSTMENT_AMOUNT,SqlDbType.Decimal));
				sqlParams[PARAM_ADJUSTMENT_AMOUNT].SourceColumn = dataSet.ADJUSTMENT.ADJUSTMENT_AMOUNTColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_NOTE_TO_PRINT,SqlDbType.VarChar));
				sqlParams[PARAM_NOTE_TO_PRINT].SourceColumn = dataSet.ADJUSTMENT.NOTE_TO_PRINTColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_DATE_CREATED,SqlDbType.DateTime));
				sqlParams[PARAM_DATE_CREATED].SourceColumn = dataSet.ADJUSTMENT.DATE_CREATEDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_DATETIME_MODIFIED,SqlDbType.DateTime));
				sqlParams[PARAM_DATETIME_MODIFIED].SourceColumn = dataSet.ADJUSTMENT.DATETIME_MODIFIEDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_LAST_UPDATED_BY,SqlDbType.VarChar));
				sqlParams[PARAM_LAST_UPDATED_BY].SourceColumn = dataSet.ADJUSTMENT.LAST_UPDATED_BYColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_COUNTRY_CODE,SqlDbType.VarChar));
				sqlParams[PARAM_COUNTRY_CODE].SourceColumn = dataSet.ADJUSTMENT.COUNTRY_CODEColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_INTERNAL_COMMENT,SqlDbType.VarChar));
				sqlParams[PARAM_INTERNAL_COMMENT].SourceColumn = dataSet.ADJUSTMENT.INTERNAL_COMMENTColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ORDER_ID,SqlDbType.Int));
				sqlParams[PARAM_ORDER_ID].SourceColumn = dataSet.ADJUSTMENT.ORDER_IDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_CAMPAIGN_ID,SqlDbType.Int));
				sqlParams[PARAM_CAMPAIGN_ID].SourceColumn = dataSet.ADJUSTMENT.CAMPAIGN_IDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ADJUSTMENT_BATCH_ID,SqlDbType.Int));
				sqlParams[PARAM_ADJUSTMENT_BATCH_ID].SourceColumn = dataSet.ADJUSTMENT.ADJUSTMENT_BATCH_IDColumn.ColumnName;
			}
			return updateCommand;
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ADJUSTMENT_ID</LI>
		/// </UL>
		///		 <LI>ADJUSTMENT_ID</LI>
		///		 <LI>ACCOUNT_ID</LI>
		///		 <LI>ACCOUNT_TYPE_ID</LI>
		///		 <LI>ADJUSTMENT_TYPE_ID</LI>
		///		 <LI>ADJUSTMENT_EFFECTIVE_DATE</LI>
		///		 <LI>ADJUSTMENT_AMOUNT</LI>
		///		 <LI>NOTE_TO_PRINT</LI>
		///		 <LI>DATE_CREATED</LI>
		///		 <LI>DATETIME_MODIFIED</LI>
		///		 <LI>LAST_UPDATED_BY</LI>
		///		 <LI>COUNTRY_CODE</LI>
		///		 <LI>INTERNAL_COMMENT</LI>
		///		 <LI>ORDER_ID</LI>
		///		 <LI>CAMPAIGN_ID</LI>
		///		 <LI>ADJUSTMENT_BATCH_ID</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public  void SelectOne(DataSet dtsDataSet, string tableName, Int32 ADJUSTMENT_ID)		
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_ADJUSTMENT_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ADJUSTMENT_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ADJUSTMENT_ID));
			Select(cmdToExecute,dtsDataSet, tableName);
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public  void SelectAll(DataSet dtsDataSet, string tableName)		
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_ADJUSTMENT_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(cmdToExecute,dtsDataSet, tableName);
		}

		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public  void SelectSearch(DataSet dtsDataSet, string tableName, int adjustmentBatchID, int adjustmentTypeID, int adjustmentBatchStatus, DateTime dateFrom, DateTime dateTo)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Adjustment_SelectSearch]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ADJUSTMENT_BATCH_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, adjustmentBatchID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ADJUSTMENT_TYPE_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, adjustmentTypeID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ADJUSTMENT_BATCH_STATUS, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, adjustmentBatchStatus));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_DATEFROM, SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, dateFrom));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_DATETO, SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, dateTo));
			Select(cmdToExecute,dtsDataSet, tableName);
		}

		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public  void PreviewBatch(DataSet dtsDataSet, string tableName, int adjustmentTypeID, DateTime dateFrom, DateTime dateTo)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_PreviewAdjustmentBatch]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ADJUSTMENT_TYPE_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, adjustmentTypeID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_DATEFROM, SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, dateFrom));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_DATETO, SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, dateTo));
			Select(cmdToExecute,dtsDataSet, tableName);
		}
	}
}
