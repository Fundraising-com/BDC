///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'Contact'
// Generated by GenerationClass v1.2.1949.28361 Final
// on: 20 mai, 2005, 14:51:22
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using Common;
using Common.TableDef;
using dataSetRef = Common.TableDef.ContactDataSet;


namespace DAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Contact'.
	/// </summary>
	public class ContactData : DBTableOperation
	{
		#region Class Member Declarations
		internal const string PARAM_ID= "@iId";
		internal const string PARAM_CONTACTLISTID= "@iContactListID";
		internal const string PARAM_CACCOUNTID= "@iCAccountID";
		internal const string PARAM_TITLE= "@sTitle";
		internal const string PARAM_FIRSTNAME= "@sFirstName";
		internal const string PARAM_LASTNAME= "@sLastName";
		internal const string PARAM_MIDDLEINITIAL= "@sMiddleInitial";
		internal const string PARAM_TYPEID= "@iTypeId";
		internal const string PARAM_FUNCTION= "@sFunction";
		internal const string PARAM_EMAIL= "@sEmail";
		internal const string PARAM_ADDRESSID= "@iAddressID";
		internal const string PARAM_PHONELISTID= "@iPhoneListID";
		internal const string PARAM_DELETEDTF= "@bDeletedTF";
		internal const string PARAM_DATECHANGED= "@dDateChanged";
		//

		// DataSetCommand object

		//

		private SqlCommand insertCommand;

		private SqlCommand deleteCommand;

		private SqlCommand updateCommand;

		#endregion

		dataSetRef dataSet = new dataSetRef();



		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public ContactData() : base(DataBaseName.QSPCanadaCommon) { }
		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand("dbo.[pr_Contact_Insert]");
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
				SqlParameterCollection sqlParams = insertCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_ID,SqlDbType.Int));
				sqlParams[PARAM_ID].Direction = ParameterDirection.Output;
				sqlParams[PARAM_ID].SourceColumn = dataSet.Contact.IdColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_CONTACTLISTID,SqlDbType.Int));
				sqlParams[PARAM_CONTACTLISTID].SourceColumn = dataSet.Contact.ContactListIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_CACCOUNTID,SqlDbType.Int));
				sqlParams[PARAM_CACCOUNTID].SourceColumn = dataSet.Contact.CAccountIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_TITLE,SqlDbType.VarChar));
				sqlParams[PARAM_TITLE].SourceColumn = dataSet.Contact.TitleColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_FIRSTNAME,SqlDbType.VarChar));
				sqlParams[PARAM_FIRSTNAME].SourceColumn = dataSet.Contact.FirstNameColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_LASTNAME,SqlDbType.VarChar));
				sqlParams[PARAM_LASTNAME].SourceColumn = dataSet.Contact.LastNameColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_MIDDLEINITIAL,SqlDbType.VarChar));
				sqlParams[PARAM_MIDDLEINITIAL].SourceColumn = dataSet.Contact.MiddleInitialColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_TYPEID,SqlDbType.Int));
				sqlParams[PARAM_TYPEID].SourceColumn = dataSet.Contact.TypeIdColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_FUNCTION,SqlDbType.VarChar));
				sqlParams[PARAM_FUNCTION].SourceColumn = dataSet.Contact.FunctionColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_EMAIL,SqlDbType.VarChar));
				sqlParams[PARAM_EMAIL].SourceColumn = dataSet.Contact.EmailColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ADDRESSID,SqlDbType.Int));
				sqlParams[PARAM_ADDRESSID].SourceColumn = dataSet.Contact.AddressIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_PHONELISTID,SqlDbType.Int));
				sqlParams[PARAM_PHONELISTID].SourceColumn = dataSet.Contact.PhoneListIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_DELETEDTF,SqlDbType.Bit));
				sqlParams[PARAM_DELETEDTF].SourceColumn = dataSet.Contact.DeletedTFColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_DATECHANGED,SqlDbType.DateTime));
				sqlParams[PARAM_DATECHANGED].SourceColumn = dataSet.Contact.DateChangedColumn.ColumnName;
			}
			return insertCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand("dbo.[pr_Contact_Delete]");
				deleteCommand.CommandType = CommandType.StoredProcedure;
				SqlParameterCollection sqlParams = deleteCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_ID,SqlDbType.Int));
				sqlParams[PARAM_ID].SourceColumn = dataSet.Contact.IdColumn.ColumnName;
			}
			return deleteCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand("dbo.[pr_Contact_Update]");
				updateCommand.CommandType = CommandType.StoredProcedure;
				updateCommand.UpdatedRowSource = UpdateRowSource.OutputParameters;
				SqlParameterCollection sqlParams = updateCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_ID,SqlDbType.Int));
				sqlParams[PARAM_ID].SourceColumn = dataSet.Contact.IdColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_CONTACTLISTID,SqlDbType.Int));
				sqlParams[PARAM_CONTACTLISTID].SourceColumn = dataSet.Contact.ContactListIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_CACCOUNTID,SqlDbType.Int));
				sqlParams[PARAM_CACCOUNTID].SourceColumn = dataSet.Contact.CAccountIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_TITLE,SqlDbType.VarChar));
				sqlParams[PARAM_TITLE].SourceColumn = dataSet.Contact.TitleColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_FIRSTNAME,SqlDbType.VarChar));
				sqlParams[PARAM_FIRSTNAME].SourceColumn = dataSet.Contact.FirstNameColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_LASTNAME,SqlDbType.VarChar));
				sqlParams[PARAM_LASTNAME].SourceColumn = dataSet.Contact.LastNameColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_MIDDLEINITIAL,SqlDbType.VarChar));
				sqlParams[PARAM_MIDDLEINITIAL].SourceColumn = dataSet.Contact.MiddleInitialColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_TYPEID,SqlDbType.Int));
				sqlParams[PARAM_TYPEID].SourceColumn = dataSet.Contact.TypeIdColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_FUNCTION,SqlDbType.VarChar));
				sqlParams[PARAM_FUNCTION].SourceColumn = dataSet.Contact.FunctionColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_EMAIL,SqlDbType.VarChar));
				sqlParams[PARAM_EMAIL].SourceColumn = dataSet.Contact.EmailColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ADDRESSID,SqlDbType.Int));
				sqlParams[PARAM_ADDRESSID].SourceColumn = dataSet.Contact.AddressIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_PHONELISTID,SqlDbType.Int));
				sqlParams[PARAM_PHONELISTID].SourceColumn = dataSet.Contact.PhoneListIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_DELETEDTF,SqlDbType.Bit));
				sqlParams[PARAM_DELETEDTF].SourceColumn = dataSet.Contact.DeletedTFColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_DATECHANGED,SqlDbType.DateTime));
				sqlParams[PARAM_DATECHANGED].SourceColumn = dataSet.Contact.DateChangedColumn.ColumnName;
			}
			return updateCommand;
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Id</LI>
		/// </UL>
		///		 <LI>Id</LI>
		///		 <LI>ContactListID</LI>
		///		 <LI>CAccountID</LI>
		///		 <LI>Title</LI>
		///		 <LI>FirstName</LI>
		///		 <LI>LastName</LI>
		///		 <LI>MiddleInitial</LI>
		///		 <LI>TypeId</LI>
		///		 <LI>Function</LI>
		///		 <LI>Email</LI>
		///		 <LI>AddressID</LI>
		///		 <LI>PhoneListID</LI>
		///		 <LI>DeletedTF</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public  void SelectOne(DataSet dtsDataSet, string tableName, Int32 Id)		
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Contact_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Id));
			Select(cmdToExecute,dtsDataSet, tableName);
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public  void SelectAll(DataSet dtsDataSet, string tableName)		
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Contact_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(cmdToExecute,dtsDataSet, tableName);
		}


		public  void SelectAllByAccountID(DataSet dtsDataSet, string tableName, Int32 AccountID)		
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Contact_SelectAllByAccountID]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_CACCOUNTID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, AccountID));
			Select(cmdToExecute,dtsDataSet, tableName);
		}

		public  void SelectOneLastByAccountID(DataSet dtsDataSet, string tableName, Int32 AccountID)		
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Contact_SelectOneLastByAccountID]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_CACCOUNTID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, AccountID));
			Select(cmdToExecute,dtsDataSet, tableName);
		}
	}
}