///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'Program'
// Generated by GenerationClass v1.2.1949.28361 Final
// on: 25 mai, 2005, 14:49:24
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using Common;
using Common.TableDef;
using dataSetRef = Common.TableDef.ProgramDataSet;


namespace DAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Program'.
	/// </summary>
	public class ProgramData : DBTableOperation
	{
		#region Class Member Declarations
		internal const string PARAM_ID= "@iID";
		internal const string PARAM_COUNTRY= "@sCountry";
		internal const string PARAM_FUNDRAISINGPROCEDUREID= "@iFundraisingProcedureID";
		internal const string PARAM_PROGRAMTYPEID= "@iProgramTypeID";
		internal const string PARAM_NAME= "@sName";
		internal const string PARAM_FRENCHNAME= "@sFrenchName";
		internal const string PARAM_MAJORPRODUCTLINEID= "@iMajorProductLineID";
		internal const string PARAM_DEFAULTPROFIT= "@dcDefaultProfit";
		internal const string PARAM_MINPROFIT= "@dcMinProfit";
		internal const string PARAM_MAXPROFIT= "@dcMaxProfit";
		internal const string PARAM_ORDEFUPRINTINAR= "@sOrdefuPrintInAR";
		internal const string PARAM_ACTIVEFORFISCAL_TF= "@bActiveForFiscal_TF";
		internal const string PARAM_ABR= "@sAbr";
		internal const string PARAM_SELECTACTIVE = "@isSelectActive";
		internal const string PARAM_PRINTINVOICE = "@iPrintInvoice";
		//

		// DataSetCommand object

		//

		private SqlCommand insertCommand;

		private SqlCommand deleteCommand;

		private SqlCommand updateCommand;

		#endregion

		dataSetRef dataSet = new dataSetRef();



		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public ProgramData() : base(DataBaseName.QSPCanadaCommon) { }

		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand("dbo.[pr_Program_Insert]");
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
				SqlParameterCollection sqlParams = insertCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_ID,SqlDbType.Int));
				sqlParams[PARAM_ID].Direction = ParameterDirection.Output;
				sqlParams[PARAM_ID].SourceColumn = dataSet.Program.IDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_COUNTRY,SqlDbType.VarChar));
				sqlParams[PARAM_COUNTRY].SourceColumn = dataSet.Program.CountryColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_FUNDRAISINGPROCEDUREID,SqlDbType.Int));
				sqlParams[PARAM_FUNDRAISINGPROCEDUREID].SourceColumn = dataSet.Program.FundraisingProcedureIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_PROGRAMTYPEID,SqlDbType.Int));
				sqlParams[PARAM_PROGRAMTYPEID].SourceColumn = dataSet.Program.ProgramTypeIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_NAME,SqlDbType.VarChar));
				sqlParams[PARAM_NAME].SourceColumn = dataSet.Program.NameColumn.ColumnName;

				/*sqlParams.Add(new SqlParameter(PARAM_FRENCHNAME,SqlDbType.VarChar));
				sqlParams[PARAM_FRENCHNAME].SourceColumn = dataSet.Program.FrenchNameColumn.ColumnName;*/

				sqlParams.Add(new SqlParameter(PARAM_MAJORPRODUCTLINEID,SqlDbType.Int));
				sqlParams[PARAM_MAJORPRODUCTLINEID].SourceColumn = dataSet.Program.MajorProductLineIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_DEFAULTPROFIT,SqlDbType.Decimal));
				sqlParams[PARAM_DEFAULTPROFIT].SourceColumn = dataSet.Program.DefaultProfitColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_MINPROFIT,SqlDbType.Decimal));
				sqlParams[PARAM_MINPROFIT].SourceColumn = dataSet.Program.MinProfitColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_MAXPROFIT,SqlDbType.Decimal));
				sqlParams[PARAM_MAXPROFIT].SourceColumn = dataSet.Program.MaxProfitColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ORDEFUPRINTINAR,SqlDbType.Char));
				sqlParams[PARAM_ORDEFUPRINTINAR].SourceColumn = dataSet.Program.OrdefuPrintInARColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ACTIVEFORFISCAL_TF,SqlDbType.Bit));
				sqlParams[PARAM_ACTIVEFORFISCAL_TF].SourceColumn = dataSet.Program.ActiveForFiscal_TFColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ABR,SqlDbType.VarChar));
				sqlParams[PARAM_ABR].SourceColumn = dataSet.Program.AbrColumn.ColumnName;
			}
			return insertCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand("dbo.[pr_Program_Delete]");
				deleteCommand.CommandType = CommandType.StoredProcedure;
				SqlParameterCollection sqlParams = deleteCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_ID,SqlDbType.Int));
				sqlParams[PARAM_ID].SourceColumn = dataSet.Program.IDColumn.ColumnName;
			}
			return deleteCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand("dbo.[pr_Program_Update]");
				updateCommand.CommandType = CommandType.StoredProcedure;
				updateCommand.UpdatedRowSource = UpdateRowSource.OutputParameters;
				SqlParameterCollection sqlParams = updateCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_ID,SqlDbType.Int));
				sqlParams[PARAM_ID].SourceColumn = dataSet.Program.IDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_COUNTRY,SqlDbType.VarChar));
				sqlParams[PARAM_COUNTRY].SourceColumn = dataSet.Program.CountryColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_FUNDRAISINGPROCEDUREID,SqlDbType.Int));
				sqlParams[PARAM_FUNDRAISINGPROCEDUREID].SourceColumn = dataSet.Program.FundraisingProcedureIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_PROGRAMTYPEID,SqlDbType.Int));
				sqlParams[PARAM_PROGRAMTYPEID].SourceColumn = dataSet.Program.ProgramTypeIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_NAME,SqlDbType.VarChar));
				sqlParams[PARAM_NAME].SourceColumn = dataSet.Program.NameColumn.ColumnName;

				/*sqlParams.Add(new SqlParameter(PARAM_FRENCHNAME,SqlDbType.VarChar));
				sqlParams[PARAM_FRENCHNAME].SourceColumn = dataSet.Program.FrenchNameColumn.ColumnName;*/

				sqlParams.Add(new SqlParameter(PARAM_MAJORPRODUCTLINEID,SqlDbType.Int));
				sqlParams[PARAM_MAJORPRODUCTLINEID].SourceColumn = dataSet.Program.MajorProductLineIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_DEFAULTPROFIT,SqlDbType.Decimal));
				sqlParams[PARAM_DEFAULTPROFIT].SourceColumn = dataSet.Program.DefaultProfitColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_MINPROFIT,SqlDbType.Decimal));
				sqlParams[PARAM_MINPROFIT].SourceColumn = dataSet.Program.MinProfitColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_MAXPROFIT,SqlDbType.Decimal));
				sqlParams[PARAM_MAXPROFIT].SourceColumn = dataSet.Program.MaxProfitColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ORDEFUPRINTINAR,SqlDbType.Char));
				sqlParams[PARAM_ORDEFUPRINTINAR].SourceColumn = dataSet.Program.OrdefuPrintInARColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ACTIVEFORFISCAL_TF,SqlDbType.Bit));
				sqlParams[PARAM_ACTIVEFORFISCAL_TF].SourceColumn = dataSet.Program.ActiveForFiscal_TFColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ABR,SqlDbType.VarChar));
				sqlParams[PARAM_ABR].SourceColumn = dataSet.Program.AbrColumn.ColumnName;
			}
			return updateCommand;
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID</LI>
		/// </UL>
		///		 <LI>ID</LI>
		///		 <LI>Country</LI>
		///		 <LI>FundraisingProcedureID</LI>
		///		 <LI>ProgramTypeID</LI>
		///		 <LI>Name</LI>
		///		 <LI>MajorProductLineID</LI>
		///		 <LI>DefaultProfit</LI>
		///		 <LI>MinProfit</LI>
		///		 <LI>MaxProfit</LI>
		///		 <LI>OrdefuPrintInAR</LI>
		///		 <LI>ActiveForFiscal_TF</LI>
		///		 <LI>Abr</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public  void SelectOne(DataSet dtsDataSet, string tableName, Int32 ID)		
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Program_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ID));
			Select(cmdToExecute,dtsDataSet, tableName);
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public  void SelectAll(DataSet dtsDataSet, string tableName)		
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Program_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(cmdToExecute,dtsDataSet, tableName);
		}

		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public  void SelectAllActiveAndNonActive(DataSet dtsDataSet, string tableName)		
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Program_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SELECTACTIVE, SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, 0));
			Select(cmdToExecute,dtsDataSet, tableName);
		}
	}
}