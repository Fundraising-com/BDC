///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'FieldManager'
// Generated by GenerationClass v1.2.1949.28361 Final
// on: 5 mai, 2005, 16:02:43
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using Common;
using Common.TableDef;
using dataSetRef = Common.TableDef.FieldManagerDataSet;


namespace DAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'FieldManager'.
	/// </summary>
	public class FieldManagerData : DBTableOperation
	{
		#region Class Member Declarations
		internal const string PARAM_FMID= "@sFMID";
		internal const string PARAM_STATUS= "@iStatus";
		internal const string PARAM_COUNTRY= "@sCountry";
		internal const string PARAM_PHONELISTID= "@iPhoneListID";
		internal const string PARAM_ADDRESSLISTID= "@iAddressListID";
		internal const string PARAM_FIRSTNAME= "@sFirstName";
		internal const string PARAM_LASTNAME= "@sLastName";
		internal const string PARAM_MIDDLEINITIAL= "@sMiddleInitial";
		internal const string PARAM_EMAIL= "@sEmail";
		internal const string PARAM_DMID= "@sDMID";
		internal const string PARAM_USERIDMODIFIED= "@iUserIDModified";
		internal const string PARAM_DATEMODIFIED= "@daDateModified";
		internal const string PARAM_COMMENT= "@sComment";
		internal const string PARAM_DMINDICATOR= "@sDMIndicator";
		internal const string PARAM_LANG= "@sLang";
		internal const string PARAM_DELETEDTF= "@bDeletedTF";
		//

		// DataSetCommand object

		//

		private SqlCommand insertCommand;

		private SqlCommand deleteCommand;

		private SqlCommand updateCommand;

		#endregion

		dataSetRef dataSet = new dataSetRef();



		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public FieldManagerData() : base(DataBaseName.QSPCanadaCommon) { }
		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand("dbo.[pr_FieldManager_Insert]");
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
				SqlParameterCollection sqlParams = insertCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_FMID,SqlDbType.VarChar));
				sqlParams[PARAM_FMID].SourceColumn = dataSet.FieldManager.FMIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_STATUS,SqlDbType.Int));
				sqlParams[PARAM_STATUS].SourceColumn = dataSet.FieldManager.StatusColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_COUNTRY,SqlDbType.VarChar));
				sqlParams[PARAM_COUNTRY].SourceColumn = dataSet.FieldManager.CountryColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_PHONELISTID,SqlDbType.Int));
				sqlParams[PARAM_PHONELISTID].SourceColumn = dataSet.FieldManager.PhoneListIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ADDRESSLISTID,SqlDbType.Int));
				sqlParams[PARAM_ADDRESSLISTID].SourceColumn = dataSet.FieldManager.AddressListIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_FIRSTNAME,SqlDbType.VarChar));
				sqlParams[PARAM_FIRSTNAME].SourceColumn = dataSet.FieldManager.FirstNameColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_LASTNAME,SqlDbType.VarChar));
				sqlParams[PARAM_LASTNAME].SourceColumn = dataSet.FieldManager.LastNameColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_MIDDLEINITIAL,SqlDbType.VarChar));
				sqlParams[PARAM_MIDDLEINITIAL].SourceColumn = dataSet.FieldManager.MiddleInitialColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_EMAIL,SqlDbType.VarChar));
				sqlParams[PARAM_EMAIL].SourceColumn = dataSet.FieldManager.EmailColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_DMID,SqlDbType.VarChar));
				sqlParams[PARAM_DMID].SourceColumn = dataSet.FieldManager.DMIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_USERIDMODIFIED,SqlDbType.Int));
				sqlParams[PARAM_USERIDMODIFIED].SourceColumn = dataSet.FieldManager.UserIDModifiedColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_DATEMODIFIED,SqlDbType.DateTime));
				sqlParams[PARAM_DATEMODIFIED].SourceColumn = dataSet.FieldManager.DateModifiedColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_COMMENT,SqlDbType.VarChar));
				sqlParams[PARAM_COMMENT].SourceColumn = dataSet.FieldManager.CommentColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_DMINDICATOR,SqlDbType.Char));
				sqlParams[PARAM_DMINDICATOR].SourceColumn = dataSet.FieldManager.DMIndicatorColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_LANG,SqlDbType.VarChar));
				sqlParams[PARAM_LANG].SourceColumn = dataSet.FieldManager.LangColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_DELETEDTF,SqlDbType.Bit));
				sqlParams[PARAM_DELETEDTF].SourceColumn = dataSet.FieldManager.DeletedTFColumn.ColumnName;
			}
			return insertCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand("dbo.[pr_FieldManager_Delete]");
				deleteCommand.CommandType = CommandType.StoredProcedure;
				SqlParameterCollection sqlParams = deleteCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_FMID,SqlDbType.VarChar));
				sqlParams[PARAM_FMID].SourceColumn = dataSet.FieldManager.FMIDColumn.ColumnName;
			}
			return deleteCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand("dbo.[pr_FieldManager_Update]");
				updateCommand.CommandType = CommandType.StoredProcedure;
				updateCommand.UpdatedRowSource = UpdateRowSource.OutputParameters;
				SqlParameterCollection sqlParams = updateCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_FMID,SqlDbType.VarChar));
				sqlParams[PARAM_FMID].SourceColumn = dataSet.FieldManager.FMIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_STATUS,SqlDbType.Int));
				sqlParams[PARAM_STATUS].SourceColumn = dataSet.FieldManager.StatusColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_COUNTRY,SqlDbType.VarChar));
				sqlParams[PARAM_COUNTRY].SourceColumn = dataSet.FieldManager.CountryColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_PHONELISTID,SqlDbType.Int));
				sqlParams[PARAM_PHONELISTID].SourceColumn = dataSet.FieldManager.PhoneListIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ADDRESSLISTID,SqlDbType.Int));
				sqlParams[PARAM_ADDRESSLISTID].SourceColumn = dataSet.FieldManager.AddressListIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_FIRSTNAME,SqlDbType.VarChar));
				sqlParams[PARAM_FIRSTNAME].SourceColumn = dataSet.FieldManager.FirstNameColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_LASTNAME,SqlDbType.VarChar));
				sqlParams[PARAM_LASTNAME].SourceColumn = dataSet.FieldManager.LastNameColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_MIDDLEINITIAL,SqlDbType.VarChar));
				sqlParams[PARAM_MIDDLEINITIAL].SourceColumn = dataSet.FieldManager.MiddleInitialColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_EMAIL,SqlDbType.VarChar));
				sqlParams[PARAM_EMAIL].SourceColumn = dataSet.FieldManager.EmailColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_DMID,SqlDbType.VarChar));
				sqlParams[PARAM_DMID].SourceColumn = dataSet.FieldManager.DMIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_USERIDMODIFIED,SqlDbType.Int));
				sqlParams[PARAM_USERIDMODIFIED].SourceColumn = dataSet.FieldManager.UserIDModifiedColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_DATEMODIFIED,SqlDbType.DateTime));
				sqlParams[PARAM_DATEMODIFIED].SourceColumn = dataSet.FieldManager.DateModifiedColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_COMMENT,SqlDbType.VarChar));
				sqlParams[PARAM_COMMENT].SourceColumn = dataSet.FieldManager.CommentColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_DMINDICATOR,SqlDbType.Char));
				sqlParams[PARAM_DMINDICATOR].SourceColumn = dataSet.FieldManager.DMIndicatorColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_LANG,SqlDbType.VarChar));
				sqlParams[PARAM_LANG].SourceColumn = dataSet.FieldManager.LangColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_DELETEDTF,SqlDbType.Bit));
				sqlParams[PARAM_DELETEDTF].SourceColumn = dataSet.FieldManager.DeletedTFColumn.ColumnName;
			}
			return updateCommand;
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>FMID</LI>
		/// </UL>
		///		 <LI>FMID</LI>
		///		 <LI>Status</LI>
		///		 <LI>Country</LI>
		///		 <LI>PhoneListID</LI>
		///		 <LI>AddressListID</LI>
		///		 <LI>FirstName</LI>
		///		 <LI>LastName</LI>
		///		 <LI>MiddleInitial</LI>
		///		 <LI>Email</LI>
		///		 <LI>DMID</LI>
		///		 <LI>UserIDModified</LI>
		///		 <LI>DateModified</LI>
		///		 <LI>Comment</LI>
		///		 <LI>DMIndicator</LI>
		///		 <LI>Lang</LI>
		///		 <LI>DeletedTF</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public  void SelectOne(DataSet dtsDataSet, string tableName, string FMID)		
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_FieldManager_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FMID, SqlDbType.VarChar, 4, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, FMID));
			Select(cmdToExecute,dtsDataSet, tableName);
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public  void SelectAll(DataSet dtsDataSet, string tableName)		
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_FieldManager_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(cmdToExecute,dtsDataSet, tableName);
		}

		public  void SelectAllByCountry(DataSet dtsDataSet, string tableName, string countrycode)		
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_FieldManager_SelectAllByCountry]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_COUNTRY, SqlDbType.VarChar, 6, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, countrycode));
			Select(cmdToExecute,dtsDataSet, tableName);
		}

		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'PhoneListID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>PhoneListID. May be SqlInt32.Null</LI>
		/// </UL>
		/// </remarks>
		public void SelectAllByPhoneListID(DataSet dtsDataSet, string tableName, Int32 PhoneListID)		
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_FieldManager_SelectAllByPhoneListID]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PHONELISTID, SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, PhoneListID));
			Select(cmdToExecute,dtsDataSet, tableName);
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'AddressListID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>AddressListID. May be SqlInt32.Null</LI>
		/// </UL>
		/// </remarks>
		public void SelectAllByAddressListID(DataSet dtsDataSet, string tableName, Int32 AddressListID)		
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_FieldManager_SelectAllByAddressListID]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ADDRESSLISTID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, AddressListID));
			Select(cmdToExecute,dtsDataSet, tableName);
		}
	}
}