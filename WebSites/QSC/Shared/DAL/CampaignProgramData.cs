///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'CampaignProgram'
// Generated by GenerationClass v1.2.1949.28361 Final
// on: 25 mai, 2005, 14:49:20
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using Common;
using Common.TableDef;
using dataSetRef = Common.TableDef.CampaignProgramDataSet;


namespace DAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'CampaignProgram'.
	/// </summary>
	public class CampaignProgramData : DBTableOperation
	{
		#region Class Member Declarations
		internal const string PARAM_CAMPAIGNID= "@iCampaignID";
		internal const string PARAM_PROGRAMID= "@iProgramID";
		internal const string PARAM_ISPRECOLLECT= "@sIsPreCollect";
		internal const string PARAM_GROUPPROFIT= "@dcGroupProfit";
		internal const string PARAM_DELETEDTF= "@bDeletedTF";
		internal const string PARAM_ISPERSONALIZE= "@bIsPersonalize";
      internal const string PARAM_BLACKBOARDPACKET = "@bBlackboardPacket";
      internal const string PARAM_FIELDSUPPLYPACKET = "@bFieldSupplyPacket";
      internal const string PARAM_ONLINEONLY = "@bOnlineOnly";
      internal const string PARAM_ALLOWONLINEACCOUNTDELIVERY = "@bAllowOnlineAccountDelivery";
      //

		// DataSetCommand object

		//

		private SqlCommand insertCommand;

		private SqlCommand deleteCommand;

		private SqlCommand updateCommand;

		#endregion

		dataSetRef dataSet = new dataSetRef();



		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public CampaignProgramData() : base(DataBaseName.QSPCanadaCommon) { }

		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand("dbo.[pr_CampaignProgram_Insert]");
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
				SqlParameterCollection sqlParams = insertCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_CAMPAIGNID,SqlDbType.Int));
				sqlParams[PARAM_CAMPAIGNID].SourceColumn = dataSet.CampaignProgram.CampaignIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_PROGRAMID,SqlDbType.Int));
				sqlParams[PARAM_PROGRAMID].SourceColumn = dataSet.CampaignProgram.ProgramIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ISPRECOLLECT,SqlDbType.VarChar));
				sqlParams[PARAM_ISPRECOLLECT].SourceColumn = dataSet.CampaignProgram.IsPreCollectColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_GROUPPROFIT,SqlDbType.Decimal));
				sqlParams[PARAM_GROUPPROFIT].SourceColumn = dataSet.CampaignProgram.GroupProfitColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_DELETEDTF,SqlDbType.Bit));
				sqlParams[PARAM_DELETEDTF].SourceColumn = dataSet.CampaignProgram.DeletedTFColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ISPERSONALIZE,SqlDbType.Bit));
				sqlParams[PARAM_ISPERSONALIZE].SourceColumn = dataSet.CampaignProgram.IsPersonalizeColumn.ColumnName;

            sqlParams.Add(new SqlParameter(PARAM_BLACKBOARDPACKET, SqlDbType.Bit));
            sqlParams[PARAM_BLACKBOARDPACKET].SourceColumn = dataSet.CampaignProgram.BlackboardPacketColumn.ColumnName;

            sqlParams.Add(new SqlParameter(PARAM_FIELDSUPPLYPACKET, SqlDbType.Bit));
            sqlParams[PARAM_FIELDSUPPLYPACKET].SourceColumn = dataSet.CampaignProgram.FieldSupplyPacketColumn.ColumnName;

            sqlParams.Add(new SqlParameter(PARAM_ONLINEONLY, SqlDbType.Bit));
            sqlParams[PARAM_ONLINEONLY].SourceColumn = dataSet.CampaignProgram.OnlineOnlyColumn.ColumnName;

            sqlParams.Add(new SqlParameter(PARAM_ALLOWONLINEACCOUNTDELIVERY, SqlDbType.Bit));
            sqlParams[PARAM_ALLOWONLINEACCOUNTDELIVERY].SourceColumn = dataSet.CampaignProgram.AllowOnlineAccountDeliveryColumn.ColumnName;

			}
			return insertCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand("dbo.[pr_CampaignProgram_Delete]");
				deleteCommand.CommandType = CommandType.StoredProcedure;
				SqlParameterCollection sqlParams = deleteCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_CAMPAIGNID,SqlDbType.Int));
				sqlParams[PARAM_CAMPAIGNID].SourceColumn = dataSet.CampaignProgram.CampaignIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_PROGRAMID,SqlDbType.Int));
				sqlParams[PARAM_PROGRAMID].SourceColumn = dataSet.CampaignProgram.ProgramIDColumn.ColumnName;
			}
			return deleteCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand("dbo.[pr_CampaignProgram_Update]");
				updateCommand.CommandType = CommandType.StoredProcedure;
				updateCommand.UpdatedRowSource = UpdateRowSource.OutputParameters;
				SqlParameterCollection sqlParams = updateCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_CAMPAIGNID,SqlDbType.Int));
				sqlParams[PARAM_CAMPAIGNID].SourceColumn = dataSet.CampaignProgram.CampaignIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_PROGRAMID,SqlDbType.Int));
				sqlParams[PARAM_PROGRAMID].SourceColumn = dataSet.CampaignProgram.ProgramIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ISPRECOLLECT,SqlDbType.VarChar));
				sqlParams[PARAM_ISPRECOLLECT].SourceColumn = dataSet.CampaignProgram.IsPreCollectColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_GROUPPROFIT,SqlDbType.Decimal));
				sqlParams[PARAM_GROUPPROFIT].SourceColumn = dataSet.CampaignProgram.GroupProfitColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_DELETEDTF,SqlDbType.Bit));
				sqlParams[PARAM_DELETEDTF].SourceColumn = dataSet.CampaignProgram.DeletedTFColumn.ColumnName;
			
				sqlParams.Add(new SqlParameter(PARAM_ISPERSONALIZE,SqlDbType.Bit));
				sqlParams[PARAM_ISPERSONALIZE].SourceColumn = dataSet.CampaignProgram.IsPersonalizeColumn.ColumnName;

            sqlParams.Add(new SqlParameter(PARAM_BLACKBOARDPACKET, SqlDbType.Bit));
            sqlParams[PARAM_BLACKBOARDPACKET].SourceColumn = dataSet.CampaignProgram.BlackboardPacketColumn.ColumnName;

            sqlParams.Add(new SqlParameter(PARAM_FIELDSUPPLYPACKET, SqlDbType.Bit));
            sqlParams[PARAM_FIELDSUPPLYPACKET].SourceColumn = dataSet.CampaignProgram.FieldSupplyPacketColumn.ColumnName;

            sqlParams.Add(new SqlParameter(PARAM_ONLINEONLY, SqlDbType.Bit));
            sqlParams[PARAM_ONLINEONLY].SourceColumn = dataSet.CampaignProgram.OnlineOnlyColumn.ColumnName;

            sqlParams.Add(new SqlParameter(PARAM_ALLOWONLINEACCOUNTDELIVERY, SqlDbType.Bit));
            sqlParams[PARAM_ALLOWONLINEACCOUNTDELIVERY].SourceColumn = dataSet.CampaignProgram.AllowOnlineAccountDeliveryColumn.ColumnName;
			}
			return updateCommand;
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>CampaignID</LI>
		///		 <LI>ProgramID</LI>
		/// </UL>
		///		 <LI>CampaignID</LI>
		///		 <LI>ProgramID</LI>
		///		 <LI>IsPreCollect</LI>
		///		 <LI>GroupProfit</LI>
		///		 <LI>DeletedTF</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public  void SelectOne(DataSet dtsDataSet, string tableName, Int32 CampaignID, Int32 ProgramID)		
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_CampaignProgram_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_CAMPAIGNID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CampaignID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PROGRAMID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ProgramID));
			Select(cmdToExecute,dtsDataSet, tableName);
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public  void SelectAllByCampaignID(DataSet dtsDataSet, string tableName, Int32 CampaignID)		
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_CampaignProgram_SelectAllByCampaignID]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_CAMPAIGNID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CampaignID));
			Select(cmdToExecute,dtsDataSet, tableName);
		}
	}
}