///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'CAccount'
// Generated by GenerationClass v1.2.1949.28361 Final
// on: 4 mai, 2005, 12:05:29
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using Common;
using Common.TableDef;
using dataSetRef = Common.TableDef.CAccountDataSet;


namespace DAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'CAccount'.
	/// </summary>
	public class CAccountData : DBTableOperation
	{
		#region Class Member Declarations
		internal const string PARAM_ID= "@iId";
		internal const string PARAM_NAME= "@sName";
		internal const string PARAM_COUNTRY= "@sCountry";
		internal const string PARAM_LANG= "@sLang";
		internal const string PARAM_CACCOUNTCODECLASS= "@sCAccountCodeClass";
		internal const string PARAM_CACCOUNTCODEGROUP= "@sCAccountCodeGroup";
		internal const string PARAM_PHONELISTID= "@iPhoneListID";
		internal const string PARAM_ADDRESSLISTID= "@iAddressListID";
		internal const string PARAM_ADDRESS1= "@sAddress1";
		internal const string PARAM_ADDRESS2= "@sAddress2";
		internal const string PARAM_CITY= "@sCity";
		internal const string PARAM_STATE= "@sState";
		internal const string PARAM_ZIP= "@sZip";
		internal const string PARAM_ZIP4= "@sZip4";
		internal const string PARAM_COUNTY= "@sCounty";
		internal const string PARAM_STATUSID= "@iStatusID";
		internal const string PARAM_ENROLLMENT= "@iEnrollment";
		internal const string PARAM_COMMENT= "@sComment";
		internal const string PARAM_PROFITCHEQUEPAYEE = "@sProfitChequePayee";
		internal const string PARAM_EMAIL= "@sEMail";
		internal const string PARAM_ISPRIVATEORG= "@bIsPrivateOrg";
		internal const string PARAM_ISADULTGROUP= "@bIsAdultGroup";
		internal const string PARAM_PARENTID= "@iParentID";
		internal const string PARAM_SALESREGIONID= "@iSalesRegionID";
		internal const string PARAM_STATEMENTPRINTCYCLEID= "@iStatementPrintCycleID";
		internal const string PARAM_STATEMENTPRINTSLOT= "@iStatementPrintSlot";
		internal const string PARAM_DATECREATEDTOSSTHIS= "@daDateCreatedTOSSthis";
		internal const string PARAM_DATEUPDATED= "@daDateUpdated";
		internal const string PARAM_USERIDMODIFIED= "@iUserIDModified";
		internal const string PARAM_VENDORNUMBER= "@sVendorNumber";
		internal const string PARAM_VENDORSITENAME= "@sVendorSiteName";
		internal const string PARAM_VENDORPAYGROUP= "@sVendorPayGroup";
		internal const string PARAM_ORIGINALADDRESS1= "@sOriginalAddress1";
		internal const string PARAM_ORIGINALADDRESS2= "@sOriginalAddress2";
		internal const string PARAM_ORIGINALCITY= "@sOriginalCity";
		internal const string PARAM_ORIGINALSTATE= "@sOriginalState";
		internal const string PARAM_ORIGINALZIP= "@sOriginalZip";
		internal const string PARAM_ORIGINALZIP4= "@sOriginalZip4";
		internal const string PARAM_SHIPTOADDRESS1= "@sShipToAddress1";
		internal const string PARAM_SHIPTOADDRESS2= "@sShipToAddress2";
		internal const string PARAM_SHIPTOCITY= "@sShipToCity";
		internal const string PARAM_SHIPTOSTATE= "@sShipToState";
		internal const string PARAM_SHIPTOZIP= "@sShipToZip";
		internal const string PARAM_SHIPTOZIP4= "@sShipToZip4";
		internal const string PARAM_SPONSOR= "@sSponsor";
        internal const string PARAM_BUSINESSUNITID = "@iBusinessUnitID";

		// Search parameters
		internal const string PARAM_CAMPAIGNID = "@iCampaignID";
		internal const string PARAM_FMID= "@sFMID";
		internal const string PARAM_FMFIRSTNAME= "@sFMFirstName";
		internal const string PARAM_FMLASTNAME= "@sFMLastName";
		internal const string PARAM_FISCALYEAR= "@iFiscalYear";
		internal const string PARAM_ORDERBY= "@iOrderBy";
		internal const string PARAM_SUPPLYFROMDATE = "@sFromSupplyShipment";
		internal const string PARAM_SUPPLYTODATE = "@sToSupplyShipment";
		internal const string PARAM_SUPPLYGENERATED = "@iSupplyGenerated";

		// DataSetCommand object

		//

		private SqlCommand insertCommand;

		private SqlCommand deleteCommand;

		private SqlCommand updateCommand;

		#endregion

		dataSetRef dataSet = new dataSetRef();



		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public CAccountData() : base(DataBaseName.QSPCanadaCommon) { }
		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand("dbo.[pr_CAccount_Insert]");
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.FirstReturnedRecord; 
				SqlParameterCollection sqlParams = insertCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_NAME,SqlDbType.VarChar));
				sqlParams[PARAM_NAME].SourceColumn = dataSet.CAccount.NameColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_COUNTRY,SqlDbType.VarChar));
				sqlParams[PARAM_COUNTRY].SourceColumn = dataSet.CAccount.CountryColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_LANG,SqlDbType.VarChar));
				sqlParams[PARAM_LANG].SourceColumn = dataSet.CAccount.LangColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_CACCOUNTCODECLASS,SqlDbType.VarChar));
				sqlParams[PARAM_CACCOUNTCODECLASS].SourceColumn = dataSet.CAccount.CAccountCodeClassColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_CACCOUNTCODEGROUP,SqlDbType.VarChar));
				sqlParams[PARAM_CACCOUNTCODEGROUP].SourceColumn = dataSet.CAccount.CAccountCodeGroupColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_PHONELISTID,SqlDbType.Int));
				sqlParams[PARAM_PHONELISTID].SourceColumn = dataSet.CAccount.PhoneListIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ADDRESSLISTID,SqlDbType.Int));
				sqlParams[PARAM_ADDRESSLISTID].SourceColumn = dataSet.CAccount.AddressListIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ADDRESS1,SqlDbType.VarChar));
				sqlParams[PARAM_ADDRESS1].SourceColumn = dataSet.CAccount.Address1Column.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ADDRESS2,SqlDbType.VarChar));
				sqlParams[PARAM_ADDRESS2].SourceColumn = dataSet.CAccount.Address2Column.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_CITY,SqlDbType.VarChar));
				sqlParams[PARAM_CITY].SourceColumn = dataSet.CAccount.CityColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_STATE,SqlDbType.Char));
				sqlParams[PARAM_STATE].SourceColumn = dataSet.CAccount.StateColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ZIP,SqlDbType.VarChar));
				sqlParams[PARAM_ZIP].SourceColumn = dataSet.CAccount.ZipColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ZIP4,SqlDbType.VarChar));
				sqlParams[PARAM_ZIP4].SourceColumn = dataSet.CAccount.Zip4Column.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_COUNTY,SqlDbType.VarChar));
				sqlParams[PARAM_COUNTY].SourceColumn = dataSet.CAccount.CountyColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_STATUSID,SqlDbType.Int));
				sqlParams[PARAM_STATUSID].SourceColumn = dataSet.CAccount.StatusIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ENROLLMENT,SqlDbType.Int));
				sqlParams[PARAM_ENROLLMENT].SourceColumn = dataSet.CAccount.EnrollmentColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_COMMENT,SqlDbType.VarChar));
				sqlParams[PARAM_COMMENT].SourceColumn = dataSet.CAccount.CommentColumn.ColumnName;

            sqlParams.Add(new SqlParameter(PARAM_PROFITCHEQUEPAYEE, SqlDbType.VarChar));
				sqlParams[PARAM_PROFITCHEQUEPAYEE].SourceColumn = dataSet.CAccount.ProfitChequePayeeColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_EMAIL,SqlDbType.VarChar));
				sqlParams[PARAM_EMAIL].SourceColumn = dataSet.CAccount.EMailColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ISPRIVATEORG,SqlDbType.Bit));
				sqlParams[PARAM_ISPRIVATEORG].SourceColumn = dataSet.CAccount.IsPrivateOrgColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ISADULTGROUP,SqlDbType.Bit));
				sqlParams[PARAM_ISADULTGROUP].SourceColumn = dataSet.CAccount.IsAdultGroupColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_PARENTID,SqlDbType.Int));
				sqlParams[PARAM_PARENTID].SourceColumn = dataSet.CAccount.ParentIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_SALESREGIONID,SqlDbType.Int));
				sqlParams[PARAM_SALESREGIONID].SourceColumn = dataSet.CAccount.SalesRegionIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_STATEMENTPRINTCYCLEID,SqlDbType.Int));
				sqlParams[PARAM_STATEMENTPRINTCYCLEID].SourceColumn = dataSet.CAccount.StatementPrintCycleIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_STATEMENTPRINTSLOT,SqlDbType.Int));
				sqlParams[PARAM_STATEMENTPRINTSLOT].SourceColumn = dataSet.CAccount.StatementPrintSlotColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_DATECREATEDTOSSTHIS,SqlDbType.DateTime));
				sqlParams[PARAM_DATECREATEDTOSSTHIS].SourceColumn = dataSet.CAccount.DateCreatedTOSSthisColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_DATEUPDATED,SqlDbType.DateTime));
				sqlParams[PARAM_DATEUPDATED].SourceColumn = dataSet.CAccount.DateUpdatedColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_USERIDMODIFIED,SqlDbType.Int));
				sqlParams[PARAM_USERIDMODIFIED].SourceColumn = dataSet.CAccount.UserIDModifiedColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_VENDORNUMBER,SqlDbType.VarChar));
				sqlParams[PARAM_VENDORNUMBER].SourceColumn = dataSet.CAccount.VendorNumberColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_VENDORSITENAME,SqlDbType.VarChar));
				sqlParams[PARAM_VENDORSITENAME].SourceColumn = dataSet.CAccount.VendorSiteNameColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_VENDORPAYGROUP,SqlDbType.VarChar));
				sqlParams[PARAM_VENDORPAYGROUP].SourceColumn = dataSet.CAccount.VendorPayGroupColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ORIGINALADDRESS1,SqlDbType.VarChar));
				sqlParams[PARAM_ORIGINALADDRESS1].SourceColumn = dataSet.CAccount.OriginalAddress1Column.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ORIGINALADDRESS2,SqlDbType.VarChar));
				sqlParams[PARAM_ORIGINALADDRESS2].SourceColumn = dataSet.CAccount.OriginalAddress2Column.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ORIGINALCITY,SqlDbType.VarChar));
				sqlParams[PARAM_ORIGINALCITY].SourceColumn = dataSet.CAccount.OriginalCityColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ORIGINALSTATE,SqlDbType.Char));
				sqlParams[PARAM_ORIGINALSTATE].SourceColumn = dataSet.CAccount.OriginalStateColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ORIGINALZIP,SqlDbType.VarChar));
				sqlParams[PARAM_ORIGINALZIP].SourceColumn = dataSet.CAccount.OriginalZipColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ORIGINALZIP4,SqlDbType.VarChar));
				sqlParams[PARAM_ORIGINALZIP4].SourceColumn = dataSet.CAccount.OriginalZip4Column.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_SHIPTOADDRESS1,SqlDbType.VarChar));
				sqlParams[PARAM_SHIPTOADDRESS1].SourceColumn = dataSet.CAccount.ShipToAddress1Column.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_SHIPTOADDRESS2,SqlDbType.VarChar));
				sqlParams[PARAM_SHIPTOADDRESS2].SourceColumn = dataSet.CAccount.ShipToAddress2Column.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_SHIPTOCITY,SqlDbType.VarChar));
				sqlParams[PARAM_SHIPTOCITY].SourceColumn = dataSet.CAccount.ShipToCityColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_SHIPTOSTATE,SqlDbType.Char));
				sqlParams[PARAM_SHIPTOSTATE].SourceColumn = dataSet.CAccount.ShipToStateColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_SHIPTOZIP,SqlDbType.VarChar));
				sqlParams[PARAM_SHIPTOZIP].SourceColumn = dataSet.CAccount.ShipToZipColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_SHIPTOZIP4,SqlDbType.VarChar));
				sqlParams[PARAM_SHIPTOZIP4].SourceColumn = dataSet.CAccount.ShipToZip4Column.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_SPONSOR,SqlDbType.VarChar));
				sqlParams[PARAM_SPONSOR].SourceColumn = dataSet.CAccount.SponsorColumn.ColumnName;

                sqlParams.Add(new SqlParameter(PARAM_BUSINESSUNITID, SqlDbType.Int));
                sqlParams[PARAM_BUSINESSUNITID].SourceColumn = dataSet.CAccount.BusinessUnitIDColumn.ColumnName;
            }
			return insertCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand("dbo.[pr_CAccount_Delete]");
				deleteCommand.CommandType = CommandType.StoredProcedure;
				SqlParameterCollection sqlParams = deleteCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_ID,SqlDbType.Int));
				sqlParams[PARAM_ID].SourceColumn = dataSet.CAccount.IdColumn.ColumnName;
			}
			return deleteCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand("dbo.[pr_CAccount_Update]");
				updateCommand.CommandType = CommandType.StoredProcedure;
				updateCommand.UpdatedRowSource = UpdateRowSource.OutputParameters;
				SqlParameterCollection sqlParams = updateCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_ID,SqlDbType.Int));
				sqlParams[PARAM_ID].SourceColumn = dataSet.CAccount.IdColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_NAME,SqlDbType.VarChar));
				sqlParams[PARAM_NAME].SourceColumn = dataSet.CAccount.NameColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_COUNTRY,SqlDbType.VarChar));
				sqlParams[PARAM_COUNTRY].SourceColumn = dataSet.CAccount.CountryColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_LANG,SqlDbType.VarChar));
				sqlParams[PARAM_LANG].SourceColumn = dataSet.CAccount.LangColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_CACCOUNTCODECLASS,SqlDbType.VarChar));
				sqlParams[PARAM_CACCOUNTCODECLASS].SourceColumn = dataSet.CAccount.CAccountCodeClassColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_CACCOUNTCODEGROUP,SqlDbType.VarChar));
				sqlParams[PARAM_CACCOUNTCODEGROUP].SourceColumn = dataSet.CAccount.CAccountCodeGroupColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_PHONELISTID,SqlDbType.Int));
				sqlParams[PARAM_PHONELISTID].SourceColumn = dataSet.CAccount.PhoneListIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ADDRESSLISTID,SqlDbType.Int));
				sqlParams[PARAM_ADDRESSLISTID].SourceColumn = dataSet.CAccount.AddressListIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ADDRESS1,SqlDbType.VarChar));
				sqlParams[PARAM_ADDRESS1].SourceColumn = dataSet.CAccount.Address1Column.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ADDRESS2,SqlDbType.VarChar));
				sqlParams[PARAM_ADDRESS2].SourceColumn = dataSet.CAccount.Address2Column.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_CITY,SqlDbType.VarChar));
				sqlParams[PARAM_CITY].SourceColumn = dataSet.CAccount.CityColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_STATE,SqlDbType.Char));
				sqlParams[PARAM_STATE].SourceColumn = dataSet.CAccount.StateColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ZIP,SqlDbType.VarChar));
				sqlParams[PARAM_ZIP].SourceColumn = dataSet.CAccount.ZipColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ZIP4,SqlDbType.VarChar));
				sqlParams[PARAM_ZIP4].SourceColumn = dataSet.CAccount.Zip4Column.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_COUNTY,SqlDbType.VarChar));
				sqlParams[PARAM_COUNTY].SourceColumn = dataSet.CAccount.CountyColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_STATUSID,SqlDbType.Int));
				sqlParams[PARAM_STATUSID].SourceColumn = dataSet.CAccount.StatusIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ENROLLMENT,SqlDbType.Int));
				sqlParams[PARAM_ENROLLMENT].SourceColumn = dataSet.CAccount.EnrollmentColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_COMMENT,SqlDbType.VarChar));
				sqlParams[PARAM_COMMENT].SourceColumn = dataSet.CAccount.CommentColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_PROFITCHEQUEPAYEE, SqlDbType.VarChar));
				sqlParams[PARAM_PROFITCHEQUEPAYEE].SourceColumn = dataSet.CAccount.ProfitChequePayeeColumn.ColumnName;
				
            sqlParams.Add(new SqlParameter(PARAM_EMAIL,SqlDbType.VarChar));
				sqlParams[PARAM_EMAIL].SourceColumn = dataSet.CAccount.EMailColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ISPRIVATEORG,SqlDbType.Bit));
				sqlParams[PARAM_ISPRIVATEORG].SourceColumn = dataSet.CAccount.IsPrivateOrgColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ISADULTGROUP,SqlDbType.Bit));
				sqlParams[PARAM_ISADULTGROUP].SourceColumn = dataSet.CAccount.IsAdultGroupColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_PARENTID,SqlDbType.Int));
				sqlParams[PARAM_PARENTID].SourceColumn = dataSet.CAccount.ParentIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_SALESREGIONID,SqlDbType.Int));
				sqlParams[PARAM_SALESREGIONID].SourceColumn = dataSet.CAccount.SalesRegionIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_STATEMENTPRINTCYCLEID,SqlDbType.Int));
				sqlParams[PARAM_STATEMENTPRINTCYCLEID].SourceColumn = dataSet.CAccount.StatementPrintCycleIDColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_STATEMENTPRINTSLOT,SqlDbType.Int));
				sqlParams[PARAM_STATEMENTPRINTSLOT].SourceColumn = dataSet.CAccount.StatementPrintSlotColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_DATECREATEDTOSSTHIS,SqlDbType.DateTime));
				sqlParams[PARAM_DATECREATEDTOSSTHIS].SourceColumn = dataSet.CAccount.DateCreatedTOSSthisColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_DATEUPDATED,SqlDbType.DateTime));
				sqlParams[PARAM_DATEUPDATED].SourceColumn = dataSet.CAccount.DateUpdatedColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_USERIDMODIFIED,SqlDbType.Int));
				sqlParams[PARAM_USERIDMODIFIED].SourceColumn = dataSet.CAccount.UserIDModifiedColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_VENDORNUMBER,SqlDbType.VarChar));
				sqlParams[PARAM_VENDORNUMBER].SourceColumn = dataSet.CAccount.VendorNumberColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_VENDORSITENAME,SqlDbType.VarChar));
				sqlParams[PARAM_VENDORSITENAME].SourceColumn = dataSet.CAccount.VendorSiteNameColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_VENDORPAYGROUP,SqlDbType.VarChar));
				sqlParams[PARAM_VENDORPAYGROUP].SourceColumn = dataSet.CAccount.VendorPayGroupColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ORIGINALADDRESS1,SqlDbType.VarChar));
				sqlParams[PARAM_ORIGINALADDRESS1].SourceColumn = dataSet.CAccount.OriginalAddress1Column.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ORIGINALADDRESS2,SqlDbType.VarChar));
				sqlParams[PARAM_ORIGINALADDRESS2].SourceColumn = dataSet.CAccount.OriginalAddress2Column.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ORIGINALCITY,SqlDbType.VarChar));
				sqlParams[PARAM_ORIGINALCITY].SourceColumn = dataSet.CAccount.OriginalCityColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ORIGINALSTATE,SqlDbType.Char));
				sqlParams[PARAM_ORIGINALSTATE].SourceColumn = dataSet.CAccount.OriginalStateColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ORIGINALZIP,SqlDbType.VarChar));
				sqlParams[PARAM_ORIGINALZIP].SourceColumn = dataSet.CAccount.OriginalZipColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_ORIGINALZIP4,SqlDbType.VarChar));
				sqlParams[PARAM_ORIGINALZIP4].SourceColumn = dataSet.CAccount.OriginalZip4Column.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_SHIPTOADDRESS1,SqlDbType.VarChar));
				sqlParams[PARAM_SHIPTOADDRESS1].SourceColumn = dataSet.CAccount.ShipToAddress1Column.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_SHIPTOADDRESS2,SqlDbType.VarChar));
				sqlParams[PARAM_SHIPTOADDRESS2].SourceColumn = dataSet.CAccount.ShipToAddress2Column.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_SHIPTOCITY,SqlDbType.VarChar));
				sqlParams[PARAM_SHIPTOCITY].SourceColumn = dataSet.CAccount.ShipToCityColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_SHIPTOSTATE,SqlDbType.Char));
				sqlParams[PARAM_SHIPTOSTATE].SourceColumn = dataSet.CAccount.ShipToStateColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_SHIPTOZIP,SqlDbType.VarChar));
				sqlParams[PARAM_SHIPTOZIP].SourceColumn = dataSet.CAccount.ShipToZipColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_SHIPTOZIP4,SqlDbType.VarChar));
				sqlParams[PARAM_SHIPTOZIP4].SourceColumn = dataSet.CAccount.ShipToZip4Column.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_SPONSOR,SqlDbType.VarChar));
				sqlParams[PARAM_SPONSOR].SourceColumn = dataSet.CAccount.SponsorColumn.ColumnName;
                
                sqlParams.Add(new SqlParameter(PARAM_BUSINESSUNITID, SqlDbType.Int));
                sqlParams[PARAM_BUSINESSUNITID].SourceColumn = dataSet.CAccount.BusinessUnitIDColumn.ColumnName;
            }
			return updateCommand;
		}


        /// <summary>
        /// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
        /// </summary>
        /// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
        /// <remarks>
        /// Properties needed for this method: 
        /// <UL>
        ///		 <LI>Id</LI>
        /// </UL>
        ///		 <LI>Id</LI>
        ///		 <LI>Name</LI>
        ///		 <LI>Country</LI>
        ///		 <LI>Lang</LI>
        ///		 <LI>CAccountCodeClass</LI>
        ///		 <LI>CAccountCodeGroup</LI>
        ///		 <LI>PhoneListID</LI>
        ///		 <LI>AddressListID</LI>
        ///		 <LI>Address1</LI>
        ///		 <LI>Address2</LI>
        ///		 <LI>City</LI>
        ///		 <LI>State</LI>
        ///		 <LI>Zip</LI>
        ///		 <LI>Zip4</LI>
        ///		 <LI>County</LI>
        ///		 <LI>StatusID</LI>
        ///		 <LI>Enrollment</LI>
        ///		 <LI>Comment</LI>
        ///		 <LI>ProfitChequePayee</LI>
        ///		 <LI>EMail</LI>
        ///		 <LI>IsPrivateOrg</LI>
        ///		 <LI>IsAdultGroup</LI>
        ///		 <LI>ParentID</LI>
        ///		 <LI>SalesRegionID</LI>
        ///		 <LI>StatementPrintCycleID</LI>
        ///		 <LI>StatementPrintSlot</LI>
        ///		 <LI>DateCreatedTOSSthis</LI>
        ///		 <LI>DateUpdated</LI>
        ///		 <LI>UserIDModified</LI>
        ///		 <LI>VendorNumber</LI>
        ///		 <LI>VendorSiteName</LI>
        ///		 <LI>VendorPayGroup</LI>
        ///		 <LI>OriginalAddress1</LI>
        ///		 <LI>OriginalAddress2</LI>
        ///		 <LI>OriginalCity</LI>
        ///		 <LI>OriginalState</LI>
        ///		 <LI>OriginalZip</LI>
        ///		 <LI>OriginalZip4</LI>
        ///		 <LI>ShipToAddress1</LI>
        ///		 <LI>ShipToAddress2</LI>
        ///		 <LI>ShipToCity</LI>
        ///		 <LI>ShipToState</LI>
        ///		 <LI>ShipToZip</LI>
        ///		 <LI>ShipToZip4</LI>
        ///		 <LI>Sponsor</LI>
        ///		 <LI>BusinessUnit</LI>
        /// Will fill all properties corresponding with a field in the table with the value of the row selected.
        /// </remarks>
        public void SelectOne(DataSet dtsDataSet, string tableName, Int32 Id)		
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_CAccount_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Id));
			Select(cmdToExecute,dtsDataSet, tableName);
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public  void SelectAll(DataSet dtsDataSet, string tableName)		
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_CAccount_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(cmdToExecute,dtsDataSet, tableName);
		}

		public void SelectSearch(DataSet dtsDataSet, string tableName, string FMID, int ID, int CampaignID, string Name, string City, string State, string Zip, string FMFirstName, string FMLastName, int FiscalYear, int OrderBy, string SupplyFromDate, string SupplyToDate, int iSuppliesGenerated) 
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_get_AccountList_V2]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			//cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FMID, SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FMID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_CAMPAIGNID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CampaignID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_NAME, SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Name));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_CITY, SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, City));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_STATE, SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, State));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ZIP, SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Zip));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FMFIRSTNAME, SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FMFirstName));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FMLASTNAME, SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FMLastName));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FISCALYEAR, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FiscalYear));

			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ORDERBY, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, OrderBy));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SUPPLYFROMDATE, SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SupplyFromDate));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SUPPLYTODATE, SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SupplyToDate));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SUPPLYGENERATED, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, iSuppliesGenerated));
			Select(cmdToExecute,dtsDataSet, tableName);
		}

		public void PopulatePayLaterAccount(int id) 
		{
			SqlCommand cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaOrderManagement.dbo.[pr_Populate_Account]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@MinAccountID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, id));
			cmdToExecute.Parameters.Add(new SqlParameter("@MaxAccountID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, id));
			ExecuteCmd(cmdToExecute);
		}
	}
}