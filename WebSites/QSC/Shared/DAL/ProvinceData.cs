///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'Province'
// Generated by GenerationClass v1.2.1949.28361 Final
// on: 17 juin, 2005, 13:48:20
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using Common;
using Common.TableDef;
using dataSetRef = Common.TableDef.ProvinceDataSet;


namespace DAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Province'.
	/// </summary>
	public class ProvinceData : DBTableOperation
	{
		#region Class Member Declarations
		internal const string PARAM_COUNTRY_CODE= "@sCOUNTRY_CODE";
		internal const string PARAM_PROVINCE_CODE= "@sPROVINCE_CODE";
		internal const string PARAM_PROVINCE_NAME= "@sPROVINCE_NAME";
		internal const string PARAM_LAPSE_DAYS_DELIVERY= "@iLAPSE_DAYS_DELIVERY";
		internal const string PARAM_TAX_BACKOUT_FUNCTION= "@sTAX_BACKOUT_FUNCTION";
		internal const string PARAM_LAPSE_DAYS_FIELD_SUPPLY_PREP= "@iLAPSE_DAYS_FIELD_SUPPLY_PREP";
		//

		// DataSetCommand object

		//

		private SqlCommand insertCommand;

		private SqlCommand deleteCommand;

		private SqlCommand updateCommand;

		#endregion

		dataSetRef dataSet = new dataSetRef();



		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public ProvinceData() : base(DataBaseName.QSPCanadaCommon) { }
		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand("dbo.[pr_Province_Insert]");
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
				SqlParameterCollection sqlParams = insertCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_COUNTRY_CODE,SqlDbType.VarChar));
				sqlParams[PARAM_COUNTRY_CODE].SourceColumn = dataSet.Province.COUNTRY_CODEColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_PROVINCE_CODE,SqlDbType.VarChar));
				sqlParams[PARAM_PROVINCE_CODE].SourceColumn = dataSet.Province.PROVINCE_CODEColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_PROVINCE_NAME,SqlDbType.VarChar));
				sqlParams[PARAM_PROVINCE_NAME].SourceColumn = dataSet.Province.PROVINCE_NAMEColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_LAPSE_DAYS_DELIVERY,SqlDbType.Int));
				sqlParams[PARAM_LAPSE_DAYS_DELIVERY].SourceColumn = dataSet.Province.LAPSE_DAYS_DELIVERYColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_TAX_BACKOUT_FUNCTION,SqlDbType.VarChar));
				sqlParams[PARAM_TAX_BACKOUT_FUNCTION].SourceColumn = dataSet.Province.TAX_BACKOUT_FUNCTIONColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_LAPSE_DAYS_FIELD_SUPPLY_PREP,SqlDbType.Int));
				sqlParams[PARAM_LAPSE_DAYS_FIELD_SUPPLY_PREP].SourceColumn = dataSet.Province.LAPSE_DAYS_FIELD_SUPPLY_PREPColumn.ColumnName;
			}
			return insertCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand("dbo.[pr_Province_Delete]");
				deleteCommand.CommandType = CommandType.StoredProcedure;
				SqlParameterCollection sqlParams = deleteCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_COUNTRY_CODE,SqlDbType.VarChar));
				sqlParams[PARAM_COUNTRY_CODE].SourceColumn = dataSet.Province.COUNTRY_CODEColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_PROVINCE_CODE,SqlDbType.VarChar));
				sqlParams[PARAM_PROVINCE_CODE].SourceColumn = dataSet.Province.PROVINCE_CODEColumn.ColumnName;
			}
			return deleteCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand("dbo.[pr_Province_Update]");
				updateCommand.CommandType = CommandType.StoredProcedure;
				updateCommand.UpdatedRowSource = UpdateRowSource.OutputParameters;
				SqlParameterCollection sqlParams = updateCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_COUNTRY_CODE,SqlDbType.VarChar));
				sqlParams[PARAM_COUNTRY_CODE].SourceColumn = dataSet.Province.COUNTRY_CODEColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_PROVINCE_CODE,SqlDbType.VarChar));
				sqlParams[PARAM_PROVINCE_CODE].SourceColumn = dataSet.Province.PROVINCE_CODEColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_PROVINCE_NAME,SqlDbType.VarChar));
				sqlParams[PARAM_PROVINCE_NAME].SourceColumn = dataSet.Province.PROVINCE_NAMEColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_LAPSE_DAYS_DELIVERY,SqlDbType.Int));
				sqlParams[PARAM_LAPSE_DAYS_DELIVERY].SourceColumn = dataSet.Province.LAPSE_DAYS_DELIVERYColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_TAX_BACKOUT_FUNCTION,SqlDbType.VarChar));
				sqlParams[PARAM_TAX_BACKOUT_FUNCTION].SourceColumn = dataSet.Province.TAX_BACKOUT_FUNCTIONColumn.ColumnName;

				sqlParams.Add(new SqlParameter(PARAM_LAPSE_DAYS_FIELD_SUPPLY_PREP,SqlDbType.Int));
				sqlParams[PARAM_LAPSE_DAYS_FIELD_SUPPLY_PREP].SourceColumn = dataSet.Province.LAPSE_DAYS_FIELD_SUPPLY_PREPColumn.ColumnName;
			}
			return updateCommand;
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>COUNTRY_CODE</LI>
		///		 <LI>PROVINCE_CODE</LI>
		/// </UL>
		///		 <LI>COUNTRY_CODE</LI>
		///		 <LI>PROVINCE_CODE</LI>
		///		 <LI>PROVINCE_NAME</LI>
		///		 <LI>LAPSE_DAYS_DELIVERY</LI>
		///		 <LI>TAX_BACKOUT_FUNCTION</LI>
		///		 <LI>LAPSE_DAYS_FIELD_SUPPLY_PREP</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public  void SelectOne(DataSet dtsDataSet, string tableName, string PROVINCE_CODE)		
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Province_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PROVINCE_CODE, SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, PROVINCE_CODE));
			Select(cmdToExecute,dtsDataSet, tableName);
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public  void SelectAll(DataSet dtsDataSet, string tableName)		
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Province_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(cmdToExecute,dtsDataSet, tableName);
		}
	}
}