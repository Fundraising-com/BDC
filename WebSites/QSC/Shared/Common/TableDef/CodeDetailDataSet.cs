//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Common.TableDef {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    /// <summary>
    /// Autogenerated by the QSPDataSetGenerator.
    /// Class: CodeDetailDataSet
    /// </summary>
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class CodeDetailDataSet : DataSet {
        
        /// <summary>
        /// Autogenerated by the QSPDataSetGenerator.
        /// Field: tableCodeDetail
        /// </summary>
        protected CodeDetailDataTable tableCodeDetail;
        
        /// <summary>
        /// Autogenerated by the QSPDataSetGenerator.
        /// </summary>
        public CodeDetailDataSet() {
            this.tableCodeDetail = this.CreateCodeDetailDataTable();
            this.Tables.Add(this.tableCodeDetail);
            DataSetHelper.CreateDataSetExtendedProperties(this);
            this.InitVars();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        /// <summary>
        /// Autogenerated by the QSPDataSetGenerator.
        /// </summary>
        protected CodeDetailDataSet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["CodeDetail"] != null)) {
                    this.Tables.Add(this.CreateCodeDetailDataTable(ds.Tables["CodeDetail"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        /// <summary>
        /// Autogenerated by the QSPDataSetGenerator.
        /// Property: CodeDetail
        /// </summary>
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public virtual CodeDetailDataTable CodeDetail {
            get {
                return this.tableCodeDetail;
            }
        }
        
        /// <summary>
        /// Autogenerated by the QSPDataSetGenerator.
        /// Method: Clone
        /// </summary>
        /// <summary>
        /// Autogenerated by the QSPDataSetGenerator.
        /// Method: Clone
        /// </summary>
        public override DataSet Clone() {
            CodeDetailDataSet cln = ((CodeDetailDataSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        /// <summary>
        /// Autogenerated by the QSPDataSetGenerator.
        /// Method: ShouldSerializeTables
        /// </summary>
        /// <summary>
        /// Autogenerated by the QSPDataSetGenerator.
        /// Method: ShouldSerializeTables
        /// </summary>
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        /// <summary>
        /// Autogenerated by the QSPDataSetGenerator.
        /// Method: ShouldSerializeRelations
        /// </summary>
        /// <summary>
        /// Autogenerated by the QSPDataSetGenerator.
        /// Method: ShouldSerializeRelations
        /// </summary>
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        /// <summary>
        /// Autogenerated by the QSPDataSetGenerator.
        /// Method: ReadXmlSerializable
        /// </summary>
        /// <summary>
        /// Autogenerated by the QSPDataSetGenerator.
        /// Method: ReadXmlSerializable
        /// </summary>
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["CodeDetail"] != null)) {
                this.Tables.Add(this.CreateCodeDetailDataTable(ds.Tables["CodeDetail"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        /// <summary>
        /// Autogenerated by the QSPDataSetGenerator.
        /// Method: GetSchemaSerializable
        /// </summary>
        /// <summary>
        /// Autogenerated by the QSPDataSetGenerator.
        /// Method: GetSchemaSerializable
        /// </summary>
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        /// <summary>
        /// Autogenerated by the QSPDataSetGenerator.
        /// Method: InitVars
        /// </summary>
        /// <summary>
        /// Autogenerated by the QSPDataSetGenerator.
        /// Method: InitVars
        /// </summary>
        /*FamANDAssem*/ internal void InitVars() {
            this.tableCodeDetail = ((CodeDetailDataTable)(this.Tables["CodeDetail"]));
            if ((this.tableCodeDetail != null)) {
                this.tableCodeDetail.InitVars();
            }
        }
        
        /// <summary>
        /// Autogenerated by the QSPDataSetGenerator.
        /// Method: InitClass
        /// </summary>
        /// <summary>
        /// Autogenerated by the QSPDataSetGenerator.
        /// Method: InitClass
        /// </summary>
        protected virtual void InitClass() {
            this.DataSetName = "CodeDetailDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/CodeDetailDataSet.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableCodeDetail = this.CreateCodeDetailDataTable();
            this.Tables.Add(this.tableCodeDetail);
        }
        
        /// <summary>
        /// Autogenerated by the QSPDataSetGenerator.
        /// Method: ShouldSerializeCodeDetail
        /// </summary>
        /// <summary>
        /// Autogenerated by the QSPDataSetGenerator.
        /// Method: ShouldSerializeCodeDetail
        /// </summary>
        protected virtual bool ShouldSerializeCodeDetail() {
            return false;
        }
        
        /// <summary>
        /// Autogenerated by the QSPDataSetGenerator.
        /// Method: SchemaChanged
        /// </summary>
        /// <summary>
        /// Autogenerated by the QSPDataSetGenerator.
        /// Method: SchemaChanged
        /// </summary>
        protected virtual void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        /// <summary>
        /// Autogenerated by the QSPDataSetGenerator.
        /// Method: CreateCodeDetailDataTable
        /// </summary>
        /// <summary>
        /// Autogenerated by the QSPDataSetGenerator.
        /// Method: CreateCodeDetailDataTable
        /// </summary>
        protected virtual CodeDetailDataTable CreateCodeDetailDataTable() {
            return new CodeDetailDataTable();
        }
        
        /// <summary>
        /// Autogenerated by the QSPDataSetGenerator.
        /// Method: CreateCodeDetailDataTable
        /// </summary>
        /// <summary>
        /// Autogenerated by the QSPDataSetGenerator.
        /// Method: CreateCodeDetailDataTable
        /// </summary>
        protected virtual CodeDetailDataTable CreateCodeDetailDataTable(DataTable table) {
            return new CodeDetailDataTable(table);
        }
        
        /// <summary>
        /// Autogenerated by the QSPDataSetGenerator.
        /// Delegate: CodeDetailRowChangeEventHandler
        /// </summary>
        public delegate void CodeDetailRowChangeEventHandler(object sender, CodeDetailRowChangeEvent e);
        
        /// <summary>
        /// Autogenerated by the QSPDataSetGenerator.
        /// Class: CodeDetailDataTable
        /// </summary>
        [System.Diagnostics.DebuggerStepThrough()]
        public class CodeDetailDataTable : DataTable, System.Collections.IEnumerable {
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Field: columnInstance
            /// </summary>
            protected DataColumn columnInstance;
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Field: columnCodeHeaderInstance
            /// </summary>
            protected DataColumn columnCodeHeaderInstance;
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Field: columnDescription
            /// </summary>
            protected DataColumn columnDescription;
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Field: columnGross
            /// </summary>
            protected DataColumn columnGross;
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Field: columnADPCode
            /// </summary>
            protected DataColumn columnADPCode;
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// </summary>
            public CodeDetailDataTable() : 
                    base("CodeDetail") {
                this.InitClass();
            }
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// </summary>
            public CodeDetailDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Property: Count
            /// </summary>
            [System.ComponentModel.Browsable(false)]
            public virtual int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Property: InstanceColumn
            /// </summary>
            public virtual DataColumnExtended InstanceColumn {
                get {
                    return ((DataColumnExtended)(this.columnInstance));
                }
            }
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Property: CodeHeaderInstanceColumn
            /// </summary>
            public virtual DataColumnExtended CodeHeaderInstanceColumn {
                get {
                    return ((DataColumnExtended)(this.columnCodeHeaderInstance));
                }
            }
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Property: DescriptionColumn
            /// </summary>
            public virtual DataColumnExtended DescriptionColumn {
                get {
                    return ((DataColumnExtended)(this.columnDescription));
                }
            }
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Property: GrossColumn
            /// </summary>
            public virtual DataColumnExtended GrossColumn {
                get {
                    return ((DataColumnExtended)(this.columnGross));
                }
            }
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Property: ADPCodeColumn
            /// </summary>
            public virtual DataColumnExtended ADPCodeColumn {
                get {
                    return ((DataColumnExtended)(this.columnADPCode));
                }
            }
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Property: Item
            /// </summary>
            public virtual CodeDetailRow this[int index] {
                get {
                    return ((CodeDetailRow)(this.Rows[index]));
                }
            }
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Event: CodeDetailRowChanged
            /// </summary>
            public event CodeDetailRowChangeEventHandler CodeDetailRowChanged;
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Event: CodeDetailRowChanging
            /// </summary>
            public event CodeDetailRowChangeEventHandler CodeDetailRowChanging;
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Event: CodeDetailRowDeleted
            /// </summary>
            public event CodeDetailRowChangeEventHandler CodeDetailRowDeleted;
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Event: CodeDetailRowDeleting
            /// </summary>
            public event CodeDetailRowChangeEventHandler CodeDetailRowDeleting;
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: AddCodeDetailRow
            /// </summary>
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: AddCodeDetailRow
            /// </summary>
            public virtual void AddCodeDetailRow(CodeDetailRow row) {
                this.Rows.Add(row);
            }
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: AddCodeDetailRow
            /// </summary>
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: AddCodeDetailRow
            /// </summary>
            public virtual CodeDetailRow AddCodeDetailRow(int Instance, int CodeHeaderInstance, string Description, bool Gross, string ADPCode) {
                CodeDetailRow rowCodeDetailRow = ((CodeDetailRow)(this.NewRow()));
                rowCodeDetailRow.ItemArray = new object[] {
                        Instance,
                        CodeHeaderInstance,
                        Description,
                        Gross,
                        ADPCode};
                this.Rows.Add(rowCodeDetailRow);
                return rowCodeDetailRow;
            }
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: FindByInstance
            /// </summary>
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: FindByInstance
            /// </summary>
            public virtual CodeDetailRow FindByInstance(int Instance) {
                return ((CodeDetailRow)(this.Rows.Find(new object[] {
                            Instance})));
            }
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: GetEnumerator
            /// </summary>
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: GetEnumerator
            /// </summary>
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: Clone
            /// </summary>
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: Clone
            /// </summary>
            public override DataTable Clone() {
                CodeDetailDataTable cln = ((CodeDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: CreateInstance
            /// </summary>
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: CreateInstance
            /// </summary>
            protected override DataTable CreateInstance() {
                return new CodeDetailDataTable();
            }
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: InitVars
            /// </summary>
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: InitVars
            /// </summary>
            /*FamANDAssem*/ internal void InitVars() {
                this.columnInstance = this.Columns["Instance"];
                this.columnCodeHeaderInstance = this.Columns["CodeHeaderInstance"];
                this.columnDescription = this.Columns["Description"];
                this.columnGross = this.Columns["Gross"];
                this.columnADPCode = this.Columns["ADPCode"];
            }
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: InitClass
            /// </summary>
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: InitClass
            /// </summary>
            protected virtual void InitClass() {
                this.columnInstance = new DataColumnExtended("Instance", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInstance);
                this.columnCodeHeaderInstance = new DataColumnExtended("CodeHeaderInstance", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCodeHeaderInstance);
                this.columnDescription = new DataColumnExtended("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnGross = new DataColumnExtended("Gross", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGross);
                this.columnADPCode = new DataColumnExtended("ADPCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnADPCode);
                this.Constraints.Add(new UniqueConstraint("CodeDetailDataSetKey1", new DataColumn[] {
                                this.columnInstance}, true));
                this.columnInstance.AllowDBNull = false;
                this.columnInstance.Unique = true;
                this.columnCodeHeaderInstance.AllowDBNull = false;
                this.columnGross.AllowDBNull = false;
            }
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: NewCodeDetailRow
            /// </summary>
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: NewCodeDetailRow
            /// </summary>
            public virtual CodeDetailRow NewCodeDetailRow() {
                return ((CodeDetailRow)(this.NewRow()));
            }
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: NewRowFromBuilder
            /// </summary>
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: NewRowFromBuilder
            /// </summary>
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CodeDetailRow(builder);
            }
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: GetRowType
            /// </summary>
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: GetRowType
            /// </summary>
            protected override System.Type GetRowType() {
                return typeof(CodeDetailRow);
            }
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: OnRowChanged
            /// </summary>
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: OnRowChanged
            /// </summary>
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CodeDetailRowChanged != null)) {
                    this.CodeDetailRowChanged(this, new CodeDetailRowChangeEvent(((CodeDetailRow)(e.Row)), e.Action));
                }
            }
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: OnRowChanging
            /// </summary>
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: OnRowChanging
            /// </summary>
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CodeDetailRowChanging != null)) {
                    this.CodeDetailRowChanging(this, new CodeDetailRowChangeEvent(((CodeDetailRow)(e.Row)), e.Action));
                }
            }
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: OnRowDeleted
            /// </summary>
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: OnRowDeleted
            /// </summary>
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CodeDetailRowDeleted != null)) {
                    this.CodeDetailRowDeleted(this, new CodeDetailRowChangeEvent(((CodeDetailRow)(e.Row)), e.Action));
                }
            }
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: OnRowDeleting
            /// </summary>
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: OnRowDeleting
            /// </summary>
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CodeDetailRowDeleting != null)) {
                    this.CodeDetailRowDeleting(this, new CodeDetailRowChangeEvent(((CodeDetailRow)(e.Row)), e.Action));
                }
            }
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: RemoveCodeDetailRow
            /// </summary>
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: RemoveCodeDetailRow
            /// </summary>
            public virtual void RemoveCodeDetailRow(CodeDetailRow row) {
                this.Rows.Remove(row);
            }
        }
        
        /// <summary>
        /// Autogenerated by the QSPDataSetGenerator.
        /// Class: 
        /// </summary>
        [System.Diagnostics.DebuggerStepThrough()]
        public class CodeDetailRow : DataRow {
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Field: tableCodeDetail
            /// </summary>
            private CodeDetailDataTable tableCodeDetail;
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// </summary>
            /*FamANDAssem*/ internal CodeDetailRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCodeDetail = ((CodeDetailDataTable)(this.Table));
            }
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Property: Instance
            /// </summary>
            public virtual int Instance {
                get {
                    return ((int)(this[this.tableCodeDetail.InstanceColumn]));
                }
                set {
                    this[this.tableCodeDetail.InstanceColumn] = value;
                }
            }
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Property: CodeHeaderInstance
            /// </summary>
            public virtual int CodeHeaderInstance {
                get {
                    return ((int)(this[this.tableCodeDetail.CodeHeaderInstanceColumn]));
                }
                set {
                    this[this.tableCodeDetail.CodeHeaderInstanceColumn] = value;
                }
            }
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Property: Description
            /// </summary>
            public virtual string Description {
                get {
                    try {
                        return ((string)(this[this.tableCodeDetail.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCodeDetail.DescriptionColumn] = value;
                }
            }
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Property: Gross
            /// </summary>
            public virtual bool Gross {
                get {
                    return ((bool)(this[this.tableCodeDetail.GrossColumn]));
                }
                set {
                    this[this.tableCodeDetail.GrossColumn] = value;
                }
            }
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Property: ADPCode
            /// </summary>
            public virtual string ADPCode {
                get {
                    try {
                        return ((string)(this[this.tableCodeDetail.ADPCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCodeDetail.ADPCodeColumn] = value;
                }
            }
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: IsDescriptionNull
            /// </summary>
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: IsDescriptionNull
            /// </summary>
            public virtual bool IsDescriptionNull() {
                return this.IsNull(this.tableCodeDetail.DescriptionColumn);
            }
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: SetDescriptionNull
            /// </summary>
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: SetDescriptionNull
            /// </summary>
            public virtual void SetDescriptionNull() {
                this[this.tableCodeDetail.DescriptionColumn] = System.Convert.DBNull;
            }
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: IsADPCodeNull
            /// </summary>
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: IsADPCodeNull
            /// </summary>
            public virtual bool IsADPCodeNull() {
                return this.IsNull(this.tableCodeDetail.ADPCodeColumn);
            }
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: SetADPCodeNull
            /// </summary>
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Method: SetADPCodeNull
            /// </summary>
            public virtual void SetADPCodeNull() {
                this[this.tableCodeDetail.ADPCodeColumn] = System.Convert.DBNull;
            }
        }
        
        /// <summary>
        /// Autogenerated by the QSPDataSetGenerator.
        /// Class: 
        /// </summary>
        [System.Diagnostics.DebuggerStepThrough()]
        public class CodeDetailRowChangeEvent : EventArgs {
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Field: eventRow
            /// </summary>
            private CodeDetailRow eventRow;
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Field: eventAction
            /// </summary>
            private DataRowAction eventAction;
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// </summary>
            public CodeDetailRowChangeEvent(CodeDetailRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Property: Row
            /// </summary>
            public virtual CodeDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            /// <summary>
            /// Autogenerated by the QSPDataSetGenerator.
            /// Property: Action
            /// </summary>
            public virtual DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
