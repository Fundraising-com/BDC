///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'Province'
// Generated by LLBLGen v1.2.1640.28593 Final
// on: Tuesday, June 29, 2004, 12:35:01 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using tableRef = QSP.WebControl.DataAccess.Common.TableDef.ProvinceTable;


namespace QSP.WebControl.DataAccess.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Province'.
	/// </summary>
	internal class ProvinceData : QSP.WebControl.DataAccess.Data.DBTableOperation
	{
		#region Class Member Declarations
		internal const string PARAM_COUNTRY_CODE= "@sCOUNTRY_CODE";
		internal const string PARAM_PROVINCE_CODE= "@sPROVINCE_CODE";
		internal const string PARAM_PROVINCE_NAME= "@sPROVINCE_NAME";
		internal const string PARAM_LAPSE_DAYS_DELIVERY= "@iLAPSE_DAYS_DELIVERY";
		internal const string PARAM_TAX_BACKOUT_FUNCTION= "@sTAX_BACKOUT_FUNCTION";
		internal const string PARAM_LAPSE_DAYS_FIELD_SUPPLY_PREP= "@iLAPSE_DAYS_FIELD_SUPPLY_PREP";
		internal const string PARAM_SEARCH_CRITERIA = "@isearch_type";
		internal const string PARAM_SEARCH_TYPE = "@scriteria";
		internal const string PARAM_TAXREGIONID = "@iTaxRegionID";

		//

		// DataSetCommand object

		//

		private SqlCommand insertCommand;

		private SqlCommand deleteCommand;

		private SqlCommand updateCommand;

		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public ProvinceData()
		{
			// Nothing for now.
		}
		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand("dbo.[pr_Province_Insert]");
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
				SqlParameterCollection sqlParams = insertCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_COUNTRY_CODE,SqlDbType.VarChar));
				sqlParams[PARAM_COUNTRY_CODE].SourceColumn = tableRef.FLD_COUNTRY_CODE;

				sqlParams.Add(new SqlParameter(PARAM_PROVINCE_CODE,SqlDbType.VarChar));
				sqlParams[PARAM_PROVINCE_CODE].SourceColumn = tableRef.FLD_PROVINCE_CODE;

				sqlParams.Add(new SqlParameter(PARAM_PROVINCE_NAME,SqlDbType.VarChar));
				sqlParams[PARAM_PROVINCE_NAME].SourceColumn = tableRef.FLD_PROVINCE_NAME;

				sqlParams.Add(new SqlParameter(PARAM_LAPSE_DAYS_DELIVERY,SqlDbType.Int));
				sqlParams[PARAM_LAPSE_DAYS_DELIVERY].SourceColumn = tableRef.FLD_LAPSE_DAYS_DELIVERY;

				sqlParams.Add(new SqlParameter(PARAM_TAX_BACKOUT_FUNCTION,SqlDbType.VarChar));
				sqlParams[PARAM_TAX_BACKOUT_FUNCTION].SourceColumn = tableRef.FLD_TAX_BACKOUT_FUNCTION;

				sqlParams.Add(new SqlParameter(PARAM_LAPSE_DAYS_FIELD_SUPPLY_PREP,SqlDbType.Int));
				sqlParams[PARAM_LAPSE_DAYS_FIELD_SUPPLY_PREP].SourceColumn = tableRef.FLD_LAPSE_DAYS_FIELD_SUPPLY_PREP;
			}
			return insertCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand("dbo.[pr_Province_Delete]");
				deleteCommand.CommandType = CommandType.StoredProcedure;
				SqlParameterCollection sqlParams = deleteCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_COUNTRY_CODE,SqlDbType.VarChar));
				sqlParams[PARAM_COUNTRY_CODE].SourceColumn = tableRef.FLD_COUNTRY_CODE;

				sqlParams.Add(new SqlParameter(PARAM_PROVINCE_CODE,SqlDbType.VarChar));
				sqlParams[PARAM_PROVINCE_CODE].SourceColumn = tableRef.FLD_PROVINCE_CODE;
			}
			return deleteCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand("dbo.[pr_Province_Update]");
				updateCommand.CommandType = CommandType.StoredProcedure;
				updateCommand.UpdatedRowSource = UpdateRowSource.OutputParameters;
				SqlParameterCollection sqlParams = updateCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_COUNTRY_CODE,SqlDbType.VarChar));
				sqlParams[PARAM_COUNTRY_CODE].SourceColumn = tableRef.FLD_COUNTRY_CODE;

				sqlParams.Add(new SqlParameter(PARAM_PROVINCE_CODE,SqlDbType.VarChar));
				sqlParams[PARAM_PROVINCE_CODE].SourceColumn = tableRef.FLD_PROVINCE_CODE;

				sqlParams.Add(new SqlParameter(PARAM_PROVINCE_NAME,SqlDbType.VarChar));
				sqlParams[PARAM_PROVINCE_NAME].SourceColumn = tableRef.FLD_PROVINCE_NAME;

				sqlParams.Add(new SqlParameter(PARAM_LAPSE_DAYS_DELIVERY,SqlDbType.Int));
				sqlParams[PARAM_LAPSE_DAYS_DELIVERY].SourceColumn = tableRef.FLD_LAPSE_DAYS_DELIVERY;

				sqlParams.Add(new SqlParameter(PARAM_TAX_BACKOUT_FUNCTION,SqlDbType.VarChar));
				sqlParams[PARAM_TAX_BACKOUT_FUNCTION].SourceColumn = tableRef.FLD_TAX_BACKOUT_FUNCTION;

				sqlParams.Add(new SqlParameter(PARAM_LAPSE_DAYS_FIELD_SUPPLY_PREP,SqlDbType.Int));
				sqlParams[PARAM_LAPSE_DAYS_FIELD_SUPPLY_PREP].SourceColumn = tableRef.FLD_LAPSE_DAYS_FIELD_SUPPLY_PREP;
			}
			return updateCommand;
		}
		protected override string TableName
		{
			get
			{
				return tableRef.TBL_PROVINCE;
			}
		}
		public void SelectSearch(DataTable Table,int SearchType,string SearchCriteria)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_Province_Search";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_TYPE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchType));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_CRITERIA, SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchCriteria));
			Select(cmdToExecute,Table);
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>sCOUNTRY_CODE</LI>
		///		 <LI>sPROVINCE_CODE</LI>
		/// </UL>
		///		 <LI>sCOUNTRY_CODE</LI>
		///		 <LI>sPROVINCE_CODE</LI>
		///		 <LI>sPROVINCE_NAME</LI>
		///		 <LI>iLAPSE_DAYS_DELIVERY</LI>
		///		 <LI>sTAX_BACKOUT_FUNCTION</LI>
		///		 <LI>iLAPSE_DAYS_FIELD_SUPPLY_PREP</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public  void SelectOne(DataTable Table, string COUNTRY_CODE, string PROVINCE_CODE)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_Province_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_COUNTRY_CODE, SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, COUNTRY_CODE));
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_PROVINCE_CODE, SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, PROVINCE_CODE));
			Select(scmCmdToExecute,Table);
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public void SelectAll(DataTable table)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_Province_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			this.DataBase = DataBaseName.QSPCanadaCommon;
			Select(scmCmdToExecute, table);
		}

		public void SelectByCountryCode(DataTable table, string countryCode)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_Province_SelectByCountryCode]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_COUNTRY_CODE, SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, countryCode));
			this.DataBase = DataBaseName.QSPCanadaCommon;
			Select(scmCmdToExecute, table);
		}

		public void SelectByTaxRegionID(DataTable table, int taxRegionID)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_Province_SelectByTaxRegionID]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_TAXREGIONID, SqlDbType.Int, 4, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, taxRegionID));
			this.DataBase = DataBaseName.QSPCanadaCommon;
			Select(scmCmdToExecute, table);
		}
	}
}
