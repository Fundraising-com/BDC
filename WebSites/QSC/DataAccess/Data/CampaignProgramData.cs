///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'CampaignProgram'
// Generated by LLBLGen v1.2.1640.28593 Final
// on: Wednesday, June 30, 2004, 2:21:35 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using tableRef =QSPFulfillment.DataAccess.Common.TableDef.CampaignProgramTable;


namespace QSPFulfillment.DataAccess.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'CampaignProgram'.
	/// </summary>
	public class CampaignProgramData : QSPFulfillment.DataAccess.Data.DBTableOperation
	{
		#region Class Member Declarations
		internal const string PARAM_CAMPAIGNID= "@iCampaignID";
		internal const string PARAM_PROGRAMID= "@iProgramID";
		internal const string PARAM_ISPRECOLLECT= "@sIsPreCollect";
		internal const string PARAM_GROUPPROFIT= "@dcGroupProfit";
		internal const string PARAM_DELETEDTF= "@bDeletedTF";
		internal const string PARAM_SEARCH_CRITERIA = "@isearch_type";

		internal const string PARAM_SEARCH_TYPE = "@scriteria";

		//

		// DataSetCommand object

		//

		private SqlCommand insertCommand;

		private SqlCommand deleteCommand;

		private SqlCommand updateCommand;

		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public CampaignProgramData()
		{
			// Nothing for now.
		}
		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand("dbo.[pr_CampaignProgram_Insert]");
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
				SqlParameterCollection sqlParams = insertCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_CAMPAIGNID,SqlDbType.Int));
				sqlParams[PARAM_CAMPAIGNID].SourceColumn = tableRef.FLD_CAMPAIGNID;

				sqlParams.Add(new SqlParameter(PARAM_PROGRAMID,SqlDbType.Int));
				sqlParams[PARAM_PROGRAMID].SourceColumn = tableRef.FLD_PROGRAMID;

				sqlParams.Add(new SqlParameter(PARAM_ISPRECOLLECT,SqlDbType.VarChar));
				sqlParams[PARAM_ISPRECOLLECT].SourceColumn = tableRef.FLD_ISPRECOLLECT;

				sqlParams.Add(new SqlParameter(PARAM_GROUPPROFIT,SqlDbType.Decimal));
				sqlParams[PARAM_GROUPPROFIT].SourceColumn = tableRef.FLD_GROUPPROFIT;

				sqlParams.Add(new SqlParameter(PARAM_DELETEDTF,SqlDbType.Bit));
				sqlParams[PARAM_DELETEDTF].SourceColumn = tableRef.FLD_DELETEDTF;
			}
			return insertCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand("dbo.[pr_CampaignProgram_Delete]");
				deleteCommand.CommandType = CommandType.StoredProcedure;
				SqlParameterCollection sqlParams = deleteCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_CAMPAIGNID,SqlDbType.Int));
				sqlParams[PARAM_CAMPAIGNID].SourceColumn = tableRef.FLD_CAMPAIGNID;

				sqlParams.Add(new SqlParameter(PARAM_PROGRAMID,SqlDbType.Int));
				sqlParams[PARAM_PROGRAMID].SourceColumn = tableRef.FLD_PROGRAMID;
			}
			return deleteCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand("dbo.[pr_CampaignProgram_Update]");
				updateCommand.CommandType = CommandType.StoredProcedure;
				updateCommand.UpdatedRowSource = UpdateRowSource.OutputParameters;
				SqlParameterCollection sqlParams = updateCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_CAMPAIGNID,SqlDbType.Int));
				sqlParams[PARAM_CAMPAIGNID].SourceColumn = tableRef.FLD_CAMPAIGNID;

				sqlParams.Add(new SqlParameter(PARAM_PROGRAMID,SqlDbType.Int));
				sqlParams[PARAM_PROGRAMID].SourceColumn = tableRef.FLD_PROGRAMID;

				sqlParams.Add(new SqlParameter(PARAM_ISPRECOLLECT,SqlDbType.VarChar));
				sqlParams[PARAM_ISPRECOLLECT].SourceColumn = tableRef.FLD_ISPRECOLLECT;

				sqlParams.Add(new SqlParameter(PARAM_GROUPPROFIT,SqlDbType.Decimal));
				sqlParams[PARAM_GROUPPROFIT].SourceColumn = tableRef.FLD_GROUPPROFIT;

				sqlParams.Add(new SqlParameter(PARAM_DELETEDTF,SqlDbType.Bit));
				sqlParams[PARAM_DELETEDTF].SourceColumn = tableRef.FLD_DELETEDTF;
			}
			return updateCommand;
		}
		protected override string TableName
		{
			get
			{
				return tableRef.TBL_CAMPAIGNPROGRAM;
			}
		}
		public void SelectSearch(DataTable Table,int SearchType,string SearchCriteria)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_CampaignProgram_Search";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_TYPE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchType));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_CRITERIA, SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchCriteria));
			Select(cmdToExecute,Table);
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iCampaignID</LI>
		///		 <LI>iProgramID</LI>
		/// </UL>
		///		 <LI>iCampaignID</LI>
		///		 <LI>iProgramID</LI>
		///		 <LI>sIsPreCollect</LI>
		///		 <LI>dcGroupProfit</LI>
		///		 <LI>bDeletedTF</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public  void SelectOne(DataTable Table, Int32 CampaignID, Int32 ProgramID)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_CampaignProgram_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_CAMPAIGNID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CampaignID));
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_PROGRAMID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ProgramID));
			Select(scmCmdToExecute,Table);
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public  void SelectAll(DataTable Table)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_CampaignProgram_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(scmCmdToExecute,Table);
		}
		public void SelectByCampaignID(DataTable Table,int CampaignID)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_CampaignProgram_SelectByCampaignID]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_CAMPAIGNID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CampaignID));
			Select(scmCmdToExecute,Table);
		}
		public void SelectCampaignsForProductReplacement(DataTable Table,int GroupID, string GroupName, int CampaignID, string FMID, string FMLastName, string FMFirstName, string City, string Province, string PostalCode, string ProgramName)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_GetCampaignsForProductReplacement]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iGroupID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, GroupID));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@zGroupName", SqlDbType.VarChar, 250, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, GroupName));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iCampaignID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CampaignID));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@zFMID", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FMID));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@zFMFirstName", SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FMFirstName));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@zFMLastName", SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FMLastName));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@zCity", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, City));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@zProvince", SqlDbType.VarChar, 25, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Province));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@zPostalCode", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, PostalCode));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@zProgramName", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ProgramName));
			Select(scmCmdToExecute,Table);
		}
	}
}
