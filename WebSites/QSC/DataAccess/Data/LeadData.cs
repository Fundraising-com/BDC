///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'Lead'
// Generated by LLBLGen v1.2.1655.16789 Final
// on: Friday, September 10, 2004, 3:12:57 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using tableRef =QSPFulfillment.DataAccess.Common.TableDef.LeadTable;


namespace QSPFulfillment.DataAccess.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Lead'.
	/// </summary>
	public class LeadData : QSPFulfillment.DataAccess.Data.DBTableOperation
	{
		#region Class Member Declarations
		internal const string PARAM_USERID= "@iUserID";
		internal const string PARAM_DATE= "@daDate";
		internal const string PARAM_DATESENT = "@daDateSent";
		internal const string PARAM_CONTACTNAME= "@sContactName";
		internal const string PARAM_CONTACTHOMEPHONENUMBER= "@sContactHomePhoneNumber";
		internal const string PARAM_CONTACTWORKPHONENUMBER= "@sContactWorkPhoneNumber";
		internal const string PARAM_CONTACTFAXNUMBER= "@sContactFaxNumber";
		internal const string PARAM_CONTACTEMAIL= "@sContactEMail";
		internal const string PARAM_SCHOOLGROUP= "@sSchoolGroup";
		internal const string PARAM_CITYTOWN= "@sCityTown";
		internal const string PARAM_PROVINCE= "@sProvince";
		internal const string PARAM_INTERESTEDINWHAT= "@sInterestedInWhat";
		internal const string PARAM_WHEREHEARABOUTQSP= "@sWhereHearAboutQSP";
		internal const string PARAM_COMMENTS = "@sComments";
		internal const string PARAM_FMID= "@sFMID";
		internal const string PARAM_INSTANCE ="@iInstance";

		internal const string PARAM_SEARCH_TYPE = "@scriteria";

		//

		// DataSetCommand object

		//

		private SqlCommand insertCommand;

		private SqlCommand deleteCommand;

		private SqlCommand updateCommand;

		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public LeadData()
		{
			// Nothing for now.
		}
		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand("dbo.[pr_Lead_Insert]");
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
				SqlParameterCollection sqlParams = insertCommand.Parameters;

				
				sqlParams.Add(new SqlParameter(PARAM_INSTANCE,SqlDbType.Int));
				sqlParams[PARAM_INSTANCE].Direction = ParameterDirection.Output;
				sqlParams[PARAM_INSTANCE].SourceColumn = tableRef.FLD_INSTANCE;
				
				sqlParams.Add(new SqlParameter(PARAM_USERID,SqlDbType.Int));
				//sqlParams[PARAM_USERID].Direction = ParameterDirection.Output;
				sqlParams[PARAM_USERID].SourceColumn = tableRef.FLD_USERID;

				sqlParams.Add(new SqlParameter(PARAM_DATESENT,SqlDbType.DateTime));
				sqlParams[PARAM_DATESENT].SourceColumn = tableRef.FLD_DATESENT;


				sqlParams.Add(new SqlParameter(PARAM_CONTACTNAME,SqlDbType.VarChar));
				sqlParams[PARAM_CONTACTNAME].SourceColumn = tableRef.FLD_CONTACTNAME;

				sqlParams.Add(new SqlParameter(PARAM_CONTACTHOMEPHONENUMBER,SqlDbType.VarChar));
				sqlParams[PARAM_CONTACTHOMEPHONENUMBER].SourceColumn = tableRef.FLD_CONTACTHOMEPHONENUMBER;

				sqlParams.Add(new SqlParameter(PARAM_CONTACTWORKPHONENUMBER,SqlDbType.VarChar));
				sqlParams[PARAM_CONTACTWORKPHONENUMBER].SourceColumn = tableRef.FLD_CONTACTWORKPHONENUMBER;

				sqlParams.Add(new SqlParameter(PARAM_CONTACTFAXNUMBER,SqlDbType.VarChar));
				sqlParams[PARAM_CONTACTFAXNUMBER].SourceColumn = tableRef.FLD_CONTACTFAXNUMBER;

				sqlParams.Add(new SqlParameter(PARAM_CONTACTEMAIL,SqlDbType.VarChar));
				sqlParams[PARAM_CONTACTEMAIL].SourceColumn = tableRef.FLD_CONTACTEMAIL;

				sqlParams.Add(new SqlParameter(PARAM_SCHOOLGROUP,SqlDbType.VarChar));
				sqlParams[PARAM_SCHOOLGROUP].SourceColumn = tableRef.FLD_SCHOOLGROUP;

				sqlParams.Add(new SqlParameter(PARAM_CITYTOWN,SqlDbType.VarChar));
				sqlParams[PARAM_CITYTOWN].SourceColumn = tableRef.FLD_CITYTOWN;

				sqlParams.Add(new SqlParameter(PARAM_PROVINCE,SqlDbType.VarChar));
				sqlParams[PARAM_PROVINCE].SourceColumn = tableRef.FLD_PROVINCE;

				sqlParams.Add(new SqlParameter(PARAM_INTERESTEDINWHAT,SqlDbType.VarChar));
				sqlParams[PARAM_INTERESTEDINWHAT].SourceColumn = tableRef.FLD_INTERESTEDINWHAT;

				sqlParams.Add(new SqlParameter(PARAM_WHEREHEARABOUTQSP,SqlDbType.VarChar));
				sqlParams[PARAM_WHEREHEARABOUTQSP].SourceColumn = tableRef.FLD_WHEREHEARABOUTQSP;

				sqlParams.Add(new SqlParameter(PARAM_COMMENTS, SqlDbType.VarChar));
				sqlParams[PARAM_COMMENTS].SourceColumn = tableRef.FLD_COMMENTS;

				sqlParams.Add(new SqlParameter(PARAM_FMID,SqlDbType.VarChar));
				sqlParams[PARAM_FMID].SourceColumn = tableRef.FLD_FMID;
			}
			return insertCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand("dbo.[pr_Lead_Delete]");
				deleteCommand.CommandType = CommandType.StoredProcedure;
				SqlParameterCollection sqlParams = deleteCommand.Parameters;
			}
			return deleteCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand("dbo.[pr_Lead_Update]");
				updateCommand.CommandType = CommandType.StoredProcedure;
				updateCommand.UpdatedRowSource = UpdateRowSource.OutputParameters;
				SqlParameterCollection sqlParams = updateCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_INSTANCE,SqlDbType.Int));
				sqlParams[PARAM_INSTANCE].SourceColumn = tableRef.FLD_INSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_USERID,SqlDbType.Int));
				sqlParams[PARAM_USERID].SourceColumn = tableRef.FLD_USERID;


				sqlParams.Add(new SqlParameter(PARAM_DATESENT,SqlDbType.DateTime));
				sqlParams[PARAM_DATESENT].SourceColumn = tableRef.FLD_DATESENT;
															   

				sqlParams.Add(new SqlParameter(PARAM_CONTACTNAME,SqlDbType.VarChar));
				sqlParams[PARAM_CONTACTNAME].SourceColumn = tableRef.FLD_CONTACTNAME;

				sqlParams.Add(new SqlParameter(PARAM_CONTACTHOMEPHONENUMBER,SqlDbType.VarChar));
				sqlParams[PARAM_CONTACTHOMEPHONENUMBER].SourceColumn = tableRef.FLD_CONTACTHOMEPHONENUMBER;

				sqlParams.Add(new SqlParameter(PARAM_CONTACTWORKPHONENUMBER,SqlDbType.VarChar));
				sqlParams[PARAM_CONTACTWORKPHONENUMBER].SourceColumn = tableRef.FLD_CONTACTWORKPHONENUMBER;

				sqlParams.Add(new SqlParameter(PARAM_CONTACTFAXNUMBER,SqlDbType.VarChar));
				sqlParams[PARAM_CONTACTFAXNUMBER].SourceColumn = tableRef.FLD_CONTACTFAXNUMBER;

				sqlParams.Add(new SqlParameter(PARAM_CONTACTEMAIL,SqlDbType.VarChar));
				sqlParams[PARAM_CONTACTEMAIL].SourceColumn = tableRef.FLD_CONTACTEMAIL;

				sqlParams.Add(new SqlParameter(PARAM_SCHOOLGROUP,SqlDbType.VarChar));
				sqlParams[PARAM_SCHOOLGROUP].SourceColumn = tableRef.FLD_SCHOOLGROUP;

				sqlParams.Add(new SqlParameter(PARAM_CITYTOWN,SqlDbType.VarChar));
				sqlParams[PARAM_CITYTOWN].SourceColumn = tableRef.FLD_CITYTOWN;

				sqlParams.Add(new SqlParameter(PARAM_PROVINCE,SqlDbType.VarChar));
				sqlParams[PARAM_PROVINCE].SourceColumn = tableRef.FLD_PROVINCE;

				sqlParams.Add(new SqlParameter(PARAM_INTERESTEDINWHAT,SqlDbType.VarChar));
				sqlParams[PARAM_INTERESTEDINWHAT].SourceColumn = tableRef.FLD_INTERESTEDINWHAT;

				sqlParams.Add(new SqlParameter(PARAM_WHEREHEARABOUTQSP,SqlDbType.VarChar));
				sqlParams[PARAM_WHEREHEARABOUTQSP].SourceColumn = tableRef.FLD_WHEREHEARABOUTQSP;

				sqlParams.Add(new SqlParameter(PARAM_COMMENTS, SqlDbType.VarChar));
				sqlParams[PARAM_COMMENTS].SourceColumn = tableRef.FLD_COMMENTS;

				sqlParams.Add(new SqlParameter(PARAM_FMID,SqlDbType.VarChar));
				sqlParams[PARAM_FMID].SourceColumn = tableRef.FLD_FMID;
			}
			return updateCommand;
		}
		protected override string TableName
		{
			get
			{
				return tableRef.TBL_LEAD;
			}
		}
		/// <summary>
		/// Purpose: Select method for a unique field. This method will Select one row from the database, based on the unique field 'UserID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iUserID</LI>
		/// </UL>
		///		 <LI>iUserID</LI>
		///		 <LI>daDate</LI>
		///		 <LI>daDateSent
		///		 <LI>sContactName</LI>
		///		 <LI>sContactHomePhoneNumber</LI>
		///		 <LI>sContactWorkPhoneNumber</LI>
		///		 <LI>sContactFaxNumber</LI>
		///		 <LI>sContactEMail</LI>
		///		 <LI>sSchoolGroup</LI>
		///		 <LI>sCityTown</LI>
		///		 <LI>sProvince</LI>
		///		 <LI>sInterestedInWhat</LI>
		///		 <LI>sWhereHearAboutQSP</LI>
		///		 <LI>sFMID</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public void SelectOneWUserIDLogic(DataTable Table, Int32 UserID)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_Lead_SelectOneWUserIDLogic]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_USERID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, UserID));
			Select(scmCmdToExecute,Table);
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public  void SelectAll(DataTable Table,string FMID)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_Lead_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@FMID", SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FMID));
			Select(scmCmdToExecute,Table);
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'UserID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iUserID</LI>
		/// </UL>
		/// </remarks>
		public void SelectAllWUserIDLogic(DataTable Table, Int32 UserID)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_Lead_SelectAllWUserIDLogic]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_USERID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, UserID));
			Select(scmCmdToExecute,Table);
		}
	}
}
