///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'Batch'
// Generated by LLBLGen v1.2.1635.19725 Final
// on: Wednesday, June 23, 2004, 3:58:33 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using tableRef =QSPFulfillment.DataAccess.Common.TableDef.BatchTable;


namespace QSPFulfillment.DataAccess.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Batch'.
	/// </summary>
	public class BatchData : QSPFulfillment.DataAccess.Data.DBTableOperation
	{
		#region Class Member Declarations
		internal const string PARAM_DATE= "@daDate";
		internal const string PARAM_ID= "@iID";
		internal const string PARAM_ACCOUNTID= "@iAccountID";
		internal const string PARAM_ENTERREDCOUNT= "@iEnterredCount";
		internal const string PARAM_ENTERREDAMOUNT= "@dcEnterredAmount";
		internal const string PARAM_CALCULATEDAMOUNT= "@dcCalculatedAmount";
		internal const string PARAM_STATUSINSTANCE= "@iStatusInstance";
		internal const string PARAM_KE3FILENAME= "@sKE3FileName";
		internal const string PARAM_CHANGEUSERID= "@sChangeUserID";
		internal const string PARAM_CHANGEDATE= "@daChangeDate";
		internal const string PARAM_TEACHERCOUNT= "@iTeacherCount";
		internal const string PARAM_STUDENTCOUNT= "@iStudentCount";
		internal const string PARAM_CUSTOMERCOUNT= "@iCustomerCount";
		internal const string PARAM_ORDERCOUNT= "@iOrderCount";
		internal const string PARAM_ORDERCOUNTACCEPT= "@iOrderCountAccept";
		internal const string PARAM_ORDERDETAILCOUNT= "@iOrderDetailCount";
		internal const string PARAM_ORDERDETAILCOUNTERROR= "@iOrderDetailCountError";
		internal const string PARAM_STARTIMPORTTIME= "@daStartImportTime";
		internal const string PARAM_ENDIMPORTTIME= "@daEndImportTime";
		internal const string PARAM_IMPORTTIMESECONDS= "@iImportTimeSeconds";
		internal const string PARAM_CLERK= "@sClerk";
		internal const string PARAM_DATECREATED= "@daDateCreated";
		internal const string PARAM_USERIDCREATED= "@sUserIDCreated";
		internal const string PARAM_DATEKEYED= "@daDateKeyed";
		internal const string PARAM_DATEBATCHCOMPLETED= "@daDateBatchCompleted";
		internal const string PARAM_OVERRIDEPCTSTATE= "@bOverridePctState";
		internal const string PARAM_PCTSTATE= "@dcPctState";
		internal const string PARAM_ORIGINALSTATUSINSTANCE= "@iOriginalStatusInstance";
		internal const string PARAM_ORDERTYPECODE= "@iOrderTypeCode";
		internal const string PARAM_CAMPAIGNID= "@iCampaignID";
		internal const string PARAM_BILLTOADDRESSID= "@iBillToAddressID";
		internal const string PARAM_SHIPTOADDRESSID= "@iShipToAddressID";
		internal const string PARAM_SHIPTOACCOUNTID= "@iShipToAccountID";
		internal const string PARAM_BILLTOFMID= "@sBillToFMID";
		internal const string PARAM_SHIPTOFMID= "@sShipToFMID";
		internal const string PARAM_REPORTEDENVELOPES= "@iReportedEnvelopes";
		internal const string PARAM_PAYMENTSEND= "@dcPaymentSend";
		internal const string PARAM_SALESBEFORETAX= "@dcSalesBeforeTax";
		internal const string PARAM_DATESENT= "@daDateSent";
		internal const string PARAM_DATERECEIVED= "@daDateReceived";
		internal const string PARAM_CONTACTFIRSTNAME= "@sContactFirstName";
		internal const string PARAM_CONTACTLASTNAME= "@sContactLastName";
		internal const string PARAM_CONTACTEMAIL= "@sContactEmail";
		internal const string PARAM_CONTACTPHONE= "@sContactPhone";
		internal const string PARAM_COMMENT= "@sComment";
		internal const string PARAM_INCENTIVECALCULATIONSTATUS= "@iIncentiveCalculationStatus";
		internal const string PARAM_MAGNETBOOKLETCOUNT= "@iMagnetBookletCount";
		internal const string PARAM_MAGNETCARDCOUNT= "@iMagnetCardCount";
		internal const string PARAM_MAGNETGOODCARDCOUNT= "@iMagnetGoodCardCount";
		internal const string PARAM_MAGNETCARDSMAILED= "@iMagnetCardsMailed";
		internal const string PARAM_MAGNETMAILDATE= "@daMagnetMailDate";
		internal const string PARAM_PICKDATE= "@daPickDate";
		internal const string PARAM_ISDMAPPROVED= "@bIsDMApproved";
		internal const string PARAM_COUNTRYCODE= "@sCountryCode";
		internal const string PARAM_PICKLINE= "@iPickLine";
		internal const string PARAM_ORDERQUALIFIERID= "@iOrderQualifierID";
		internal const string PARAM_CHECKPAYABLETOQSPAMOUNT= "@dcCheckPayableToQSPAmount";
		internal const string PARAM_ISINCENTIVE= "@bIsIncentive";
		internal const string PARAM_ORDERDELIVERYDATE= "@daOrderDeliveryDate";
		internal const string PARAM_REFNUMBER= "@iRefNumber";
		internal const string PARAM_PAYMENTBATCHDATE= "@daPaymentBatchDate";
		internal const string PARAM_PAYMENTBATCHID= "@iPaymentBatchID";
		internal const string PARAM_ISSTAFFORDER= "@bIsStaffOrder";
		internal const string PARAM_INQUIREUPONCOMPLETE= "@bInquireUponComplete";
		internal const string PARAM_GROUPPROFIT= "@dcGroupProfit";
		internal const string PARAM_ORDERID= "@iOrderID";
		internal const string PARAM_ORDERAMNTDUE= "@dcOrderAmntDue";
		internal const string PARAM_MAGNETPOSTAGE= "@dcMagnetPostage";
		internal const string PARAM_ORDERIDINCENTIVE= "@iOrderIDIncentive";
		internal const string PARAM_ISINVOICED= "@bIsInvoiced";
		internal const string PARAM_CAMPAIGNNETTOTAL= "@dcCampaignNetTotal";
		internal const string PARAM_SEARCH_CRITERIA = "@isearch_type";

		internal const string PARAM_SEARCH_TYPE = "@scriteria";

		//

		// DataSetCommand object

		//

		private SqlCommand insertCommand;

		private SqlCommand deleteCommand;

		private SqlCommand updateCommand;

		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public BatchData()
		{
			// Nothing for now.
		}
		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand("dbo.[pr_Batch_Insert]");
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
				SqlParameterCollection sqlParams = insertCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_DATE,SqlDbType.DateTime));
				sqlParams[PARAM_DATE].SourceColumn = tableRef.FLD_DATE;

				sqlParams.Add(new SqlParameter(PARAM_ID,SqlDbType.Int));
				sqlParams[PARAM_ID].SourceColumn = tableRef.FLD_ID;

				sqlParams.Add(new SqlParameter(PARAM_ACCOUNTID,SqlDbType.Int));
				sqlParams[PARAM_ACCOUNTID].SourceColumn = tableRef.FLD_ACCOUNTID;

				sqlParams.Add(new SqlParameter(PARAM_ENTERREDCOUNT,SqlDbType.Int));
				sqlParams[PARAM_ENTERREDCOUNT].SourceColumn = tableRef.FLD_ENTERREDCOUNT;

				sqlParams.Add(new SqlParameter(PARAM_ENTERREDAMOUNT,SqlDbType.Decimal));
				sqlParams[PARAM_ENTERREDAMOUNT].SourceColumn = tableRef.FLD_ENTERREDAMOUNT;

				sqlParams.Add(new SqlParameter(PARAM_CALCULATEDAMOUNT,SqlDbType.Decimal));
				sqlParams[PARAM_CALCULATEDAMOUNT].SourceColumn = tableRef.FLD_CALCULATEDAMOUNT;

				sqlParams.Add(new SqlParameter(PARAM_STATUSINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_STATUSINSTANCE].SourceColumn = tableRef.FLD_STATUSINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_KE3FILENAME,SqlDbType.VarChar));
				sqlParams[PARAM_KE3FILENAME].SourceColumn = tableRef.FLD_KE3FILENAME;

				sqlParams.Add(new SqlParameter(PARAM_CHANGEUSERID,SqlDbType.VarChar));
				sqlParams[PARAM_CHANGEUSERID].SourceColumn = tableRef.FLD_CHANGEUSERID;

				sqlParams.Add(new SqlParameter(PARAM_CHANGEDATE,SqlDbType.DateTime));
				sqlParams[PARAM_CHANGEDATE].SourceColumn = tableRef.FLD_CHANGEDATE;

				sqlParams.Add(new SqlParameter(PARAM_TEACHERCOUNT,SqlDbType.Int));
				sqlParams[PARAM_TEACHERCOUNT].SourceColumn = tableRef.FLD_TEACHERCOUNT;

				sqlParams.Add(new SqlParameter(PARAM_STUDENTCOUNT,SqlDbType.Int));
				sqlParams[PARAM_STUDENTCOUNT].SourceColumn = tableRef.FLD_STUDENTCOUNT;

				sqlParams.Add(new SqlParameter(PARAM_CUSTOMERCOUNT,SqlDbType.Int));
				sqlParams[PARAM_CUSTOMERCOUNT].SourceColumn = tableRef.FLD_CUSTOMERCOUNT;

				sqlParams.Add(new SqlParameter(PARAM_ORDERCOUNT,SqlDbType.Int));
				sqlParams[PARAM_ORDERCOUNT].SourceColumn = tableRef.FLD_ORDERCOUNT;

				sqlParams.Add(new SqlParameter(PARAM_ORDERCOUNTACCEPT,SqlDbType.Int));
				sqlParams[PARAM_ORDERCOUNTACCEPT].SourceColumn = tableRef.FLD_ORDERCOUNTACCEPT;

				sqlParams.Add(new SqlParameter(PARAM_ORDERDETAILCOUNT,SqlDbType.Int));
				sqlParams[PARAM_ORDERDETAILCOUNT].SourceColumn = tableRef.FLD_ORDERDETAILCOUNT;

				sqlParams.Add(new SqlParameter(PARAM_ORDERDETAILCOUNTERROR,SqlDbType.Int));
				sqlParams[PARAM_ORDERDETAILCOUNTERROR].SourceColumn = tableRef.FLD_ORDERDETAILCOUNTERROR;

				sqlParams.Add(new SqlParameter(PARAM_STARTIMPORTTIME,SqlDbType.DateTime));
				sqlParams[PARAM_STARTIMPORTTIME].SourceColumn = tableRef.FLD_STARTIMPORTTIME;

				sqlParams.Add(new SqlParameter(PARAM_ENDIMPORTTIME,SqlDbType.DateTime));
				sqlParams[PARAM_ENDIMPORTTIME].SourceColumn = tableRef.FLD_ENDIMPORTTIME;

				sqlParams.Add(new SqlParameter(PARAM_IMPORTTIMESECONDS,SqlDbType.Int));
				sqlParams[PARAM_IMPORTTIMESECONDS].SourceColumn = tableRef.FLD_IMPORTTIMESECONDS;

				sqlParams.Add(new SqlParameter(PARAM_CLERK,SqlDbType.VarChar));
				sqlParams[PARAM_CLERK].SourceColumn = tableRef.FLD_CLERK;

				sqlParams.Add(new SqlParameter(PARAM_DATECREATED,SqlDbType.DateTime));
				sqlParams[PARAM_DATECREATED].SourceColumn = tableRef.FLD_DATECREATED;

				sqlParams.Add(new SqlParameter(PARAM_USERIDCREATED,SqlDbType.VarChar));
				sqlParams[PARAM_USERIDCREATED].SourceColumn = tableRef.FLD_USERIDCREATED;

				sqlParams.Add(new SqlParameter(PARAM_DATEKEYED,SqlDbType.DateTime));
				sqlParams[PARAM_DATEKEYED].SourceColumn = tableRef.FLD_DATEKEYED;

				sqlParams.Add(new SqlParameter(PARAM_DATEBATCHCOMPLETED,SqlDbType.DateTime));
				sqlParams[PARAM_DATEBATCHCOMPLETED].SourceColumn = tableRef.FLD_DATEBATCHCOMPLETED;

				sqlParams.Add(new SqlParameter(PARAM_OVERRIDEPCTSTATE,SqlDbType.Bit));
				sqlParams[PARAM_OVERRIDEPCTSTATE].SourceColumn = tableRef.FLD_OVERRIDEPCTSTATE;

				sqlParams.Add(new SqlParameter(PARAM_PCTSTATE,SqlDbType.Decimal));
				sqlParams[PARAM_PCTSTATE].SourceColumn = tableRef.FLD_PCTSTATE;

				sqlParams.Add(new SqlParameter(PARAM_ORIGINALSTATUSINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_ORIGINALSTATUSINSTANCE].SourceColumn = tableRef.FLD_ORIGINALSTATUSINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_ORDERTYPECODE,SqlDbType.Int));
				sqlParams[PARAM_ORDERTYPECODE].SourceColumn = tableRef.FLD_ORDERTYPECODE;

				sqlParams.Add(new SqlParameter(PARAM_CAMPAIGNID,SqlDbType.Int));
				sqlParams[PARAM_CAMPAIGNID].SourceColumn = tableRef.FLD_CAMPAIGNID;

				sqlParams.Add(new SqlParameter(PARAM_BILLTOADDRESSID,SqlDbType.Int));
				sqlParams[PARAM_BILLTOADDRESSID].SourceColumn = tableRef.FLD_BILLTOADDRESSID;

				sqlParams.Add(new SqlParameter(PARAM_SHIPTOADDRESSID,SqlDbType.Int));
				sqlParams[PARAM_SHIPTOADDRESSID].SourceColumn = tableRef.FLD_SHIPTOADDRESSID;

				sqlParams.Add(new SqlParameter(PARAM_SHIPTOACCOUNTID,SqlDbType.Int));
				sqlParams[PARAM_SHIPTOACCOUNTID].SourceColumn = tableRef.FLD_SHIPTOACCOUNTID;

				sqlParams.Add(new SqlParameter(PARAM_BILLTOFMID,SqlDbType.VarChar));
				sqlParams[PARAM_BILLTOFMID].SourceColumn = tableRef.FLD_BILLTOFMID;

				sqlParams.Add(new SqlParameter(PARAM_SHIPTOFMID,SqlDbType.VarChar));
				sqlParams[PARAM_SHIPTOFMID].SourceColumn = tableRef.FLD_SHIPTOFMID;

				sqlParams.Add(new SqlParameter(PARAM_REPORTEDENVELOPES,SqlDbType.Int));
				sqlParams[PARAM_REPORTEDENVELOPES].SourceColumn = tableRef.FLD_REPORTEDENVELOPES;

				sqlParams.Add(new SqlParameter(PARAM_PAYMENTSEND,SqlDbType.Decimal));
				sqlParams[PARAM_PAYMENTSEND].SourceColumn = tableRef.FLD_PAYMENTSEND;

				sqlParams.Add(new SqlParameter(PARAM_SALESBEFORETAX,SqlDbType.Decimal));
				sqlParams[PARAM_SALESBEFORETAX].SourceColumn = tableRef.FLD_SALESBEFORETAX;

				sqlParams.Add(new SqlParameter(PARAM_DATESENT,SqlDbType.DateTime));
				sqlParams[PARAM_DATESENT].SourceColumn = tableRef.FLD_DATESENT;

				sqlParams.Add(new SqlParameter(PARAM_DATERECEIVED,SqlDbType.DateTime));
				sqlParams[PARAM_DATERECEIVED].SourceColumn = tableRef.FLD_DATERECEIVED;

				sqlParams.Add(new SqlParameter(PARAM_CONTACTFIRSTNAME,SqlDbType.VarChar));
				sqlParams[PARAM_CONTACTFIRSTNAME].SourceColumn = tableRef.FLD_CONTACTFIRSTNAME;

				sqlParams.Add(new SqlParameter(PARAM_CONTACTLASTNAME,SqlDbType.VarChar));
				sqlParams[PARAM_CONTACTLASTNAME].SourceColumn = tableRef.FLD_CONTACTLASTNAME;

				sqlParams.Add(new SqlParameter(PARAM_CONTACTEMAIL,SqlDbType.VarChar));
				sqlParams[PARAM_CONTACTEMAIL].SourceColumn = tableRef.FLD_CONTACTEMAIL;

				sqlParams.Add(new SqlParameter(PARAM_CONTACTPHONE,SqlDbType.VarChar));
				sqlParams[PARAM_CONTACTPHONE].SourceColumn = tableRef.FLD_CONTACTPHONE;

				sqlParams.Add(new SqlParameter(PARAM_COMMENT,SqlDbType.VarChar));
				sqlParams[PARAM_COMMENT].SourceColumn = tableRef.FLD_COMMENT;

				sqlParams.Add(new SqlParameter(PARAM_INCENTIVECALCULATIONSTATUS,SqlDbType.Int));
				sqlParams[PARAM_INCENTIVECALCULATIONSTATUS].SourceColumn = tableRef.FLD_INCENTIVECALCULATIONSTATUS;

				sqlParams.Add(new SqlParameter(PARAM_MAGNETBOOKLETCOUNT,SqlDbType.Int));
				sqlParams[PARAM_MAGNETBOOKLETCOUNT].SourceColumn = tableRef.FLD_MAGNETBOOKLETCOUNT;

				sqlParams.Add(new SqlParameter(PARAM_MAGNETCARDCOUNT,SqlDbType.Int));
				sqlParams[PARAM_MAGNETCARDCOUNT].SourceColumn = tableRef.FLD_MAGNETCARDCOUNT;

				sqlParams.Add(new SqlParameter(PARAM_MAGNETGOODCARDCOUNT,SqlDbType.Int));
				sqlParams[PARAM_MAGNETGOODCARDCOUNT].SourceColumn = tableRef.FLD_MAGNETGOODCARDCOUNT;

				sqlParams.Add(new SqlParameter(PARAM_MAGNETCARDSMAILED,SqlDbType.Int));
				sqlParams[PARAM_MAGNETCARDSMAILED].SourceColumn = tableRef.FLD_MAGNETCARDSMAILED;

				sqlParams.Add(new SqlParameter(PARAM_MAGNETMAILDATE,SqlDbType.DateTime));
				sqlParams[PARAM_MAGNETMAILDATE].SourceColumn = tableRef.FLD_MAGNETMAILDATE;

				sqlParams.Add(new SqlParameter(PARAM_PICKDATE,SqlDbType.DateTime));
				sqlParams[PARAM_PICKDATE].SourceColumn = tableRef.FLD_PICKDATE;

				sqlParams.Add(new SqlParameter(PARAM_ISDMAPPROVED,SqlDbType.Bit));
				sqlParams[PARAM_ISDMAPPROVED].SourceColumn = tableRef.FLD_ISDMAPPROVED;

				sqlParams.Add(new SqlParameter(PARAM_COUNTRYCODE,SqlDbType.VarChar));
				sqlParams[PARAM_COUNTRYCODE].SourceColumn = tableRef.FLD_COUNTRYCODE;

				sqlParams.Add(new SqlParameter(PARAM_PICKLINE,SqlDbType.Int));
				sqlParams[PARAM_PICKLINE].SourceColumn = tableRef.FLD_PICKLINE;

				sqlParams.Add(new SqlParameter(PARAM_ORDERQUALIFIERID,SqlDbType.Int));
				sqlParams[PARAM_ORDERQUALIFIERID].SourceColumn = tableRef.FLD_ORDERQUALIFIERID;

				sqlParams.Add(new SqlParameter(PARAM_CHECKPAYABLETOQSPAMOUNT,SqlDbType.Decimal));
				sqlParams[PARAM_CHECKPAYABLETOQSPAMOUNT].SourceColumn = tableRef.FLD_CHECKPAYABLETOQSPAMOUNT;

				sqlParams.Add(new SqlParameter(PARAM_ISINCENTIVE,SqlDbType.Bit));
				sqlParams[PARAM_ISINCENTIVE].SourceColumn = tableRef.FLD_ISINCENTIVE;

				sqlParams.Add(new SqlParameter(PARAM_ORDERDELIVERYDATE,SqlDbType.DateTime));
				sqlParams[PARAM_ORDERDELIVERYDATE].SourceColumn = tableRef.FLD_ORDERDELIVERYDATE;

				sqlParams.Add(new SqlParameter(PARAM_REFNUMBER,SqlDbType.Int));
				sqlParams[PARAM_REFNUMBER].SourceColumn = tableRef.FLD_REFNUMBER;

				sqlParams.Add(new SqlParameter(PARAM_PAYMENTBATCHDATE,SqlDbType.DateTime));
				sqlParams[PARAM_PAYMENTBATCHDATE].SourceColumn = tableRef.FLD_PAYMENTBATCHDATE;

				sqlParams.Add(new SqlParameter(PARAM_PAYMENTBATCHID,SqlDbType.Int));
				sqlParams[PARAM_PAYMENTBATCHID].SourceColumn = tableRef.FLD_PAYMENTBATCHID;

				sqlParams.Add(new SqlParameter(PARAM_ISSTAFFORDER,SqlDbType.Bit));
				sqlParams[PARAM_ISSTAFFORDER].SourceColumn = tableRef.FLD_ISSTAFFORDER;

				sqlParams.Add(new SqlParameter(PARAM_INQUIREUPONCOMPLETE,SqlDbType.Bit));
				sqlParams[PARAM_INQUIREUPONCOMPLETE].SourceColumn = tableRef.FLD_INQUIREUPONCOMPLETE;

				sqlParams.Add(new SqlParameter(PARAM_GROUPPROFIT,SqlDbType.Decimal));
				sqlParams[PARAM_GROUPPROFIT].SourceColumn = tableRef.FLD_GROUPPROFIT;

				sqlParams.Add(new SqlParameter(PARAM_ORDERID,SqlDbType.Int));
				sqlParams[PARAM_ORDERID].SourceColumn = tableRef.FLD_ORDERID;

				sqlParams.Add(new SqlParameter(PARAM_ORDERAMNTDUE,SqlDbType.Decimal));
				sqlParams[PARAM_ORDERAMNTDUE].SourceColumn = tableRef.FLD_ORDERAMNTDUE;

				sqlParams.Add(new SqlParameter(PARAM_MAGNETPOSTAGE,SqlDbType.Decimal));
				sqlParams[PARAM_MAGNETPOSTAGE].SourceColumn = tableRef.FLD_MAGNETPOSTAGE;

				sqlParams.Add(new SqlParameter(PARAM_ORDERIDINCENTIVE,SqlDbType.Int));
				sqlParams[PARAM_ORDERIDINCENTIVE].SourceColumn = tableRef.FLD_ORDERIDINCENTIVE;

				sqlParams.Add(new SqlParameter(PARAM_ISINVOICED,SqlDbType.Bit));
				sqlParams[PARAM_ISINVOICED].SourceColumn = tableRef.FLD_ISINVOICED;

				sqlParams.Add(new SqlParameter(PARAM_CAMPAIGNNETTOTAL,SqlDbType.Decimal));
				sqlParams[PARAM_CAMPAIGNNETTOTAL].SourceColumn = tableRef.FLD_CAMPAIGNNETTOTAL;
			}
			return insertCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand("dbo.[pr_Batch_Delete]");
				deleteCommand.CommandType = CommandType.StoredProcedure;
				SqlParameterCollection sqlParams = deleteCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_DATE,SqlDbType.DateTime));
				sqlParams[PARAM_DATE].SourceColumn = tableRef.FLD_DATE;

				sqlParams.Add(new SqlParameter(PARAM_ID,SqlDbType.Int));
				sqlParams[PARAM_ID].SourceColumn = tableRef.FLD_ID;
			}
			return deleteCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand("dbo.[pr_Batch_Update]");
				updateCommand.CommandType = CommandType.StoredProcedure;
				updateCommand.UpdatedRowSource = UpdateRowSource.OutputParameters;
				SqlParameterCollection sqlParams = updateCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_DATE,SqlDbType.DateTime));
				sqlParams[PARAM_DATE].SourceColumn = tableRef.FLD_DATE;

				sqlParams.Add(new SqlParameter(PARAM_ID,SqlDbType.Int));
				sqlParams[PARAM_ID].SourceColumn = tableRef.FLD_ID;

				sqlParams.Add(new SqlParameter(PARAM_ACCOUNTID,SqlDbType.Int));
				sqlParams[PARAM_ACCOUNTID].SourceColumn = tableRef.FLD_ACCOUNTID;

				sqlParams.Add(new SqlParameter(PARAM_ENTERREDCOUNT,SqlDbType.Int));
				sqlParams[PARAM_ENTERREDCOUNT].SourceColumn = tableRef.FLD_ENTERREDCOUNT;

				sqlParams.Add(new SqlParameter(PARAM_ENTERREDAMOUNT,SqlDbType.Decimal));
				sqlParams[PARAM_ENTERREDAMOUNT].SourceColumn = tableRef.FLD_ENTERREDAMOUNT;

				sqlParams.Add(new SqlParameter(PARAM_CALCULATEDAMOUNT,SqlDbType.Decimal));
				sqlParams[PARAM_CALCULATEDAMOUNT].SourceColumn = tableRef.FLD_CALCULATEDAMOUNT;

				sqlParams.Add(new SqlParameter(PARAM_STATUSINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_STATUSINSTANCE].SourceColumn = tableRef.FLD_STATUSINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_KE3FILENAME,SqlDbType.VarChar));
				sqlParams[PARAM_KE3FILENAME].SourceColumn = tableRef.FLD_KE3FILENAME;

				sqlParams.Add(new SqlParameter(PARAM_CHANGEUSERID,SqlDbType.VarChar));
				sqlParams[PARAM_CHANGEUSERID].SourceColumn = tableRef.FLD_CHANGEUSERID;

				sqlParams.Add(new SqlParameter(PARAM_CHANGEDATE,SqlDbType.DateTime));
				sqlParams[PARAM_CHANGEDATE].SourceColumn = tableRef.FLD_CHANGEDATE;

				sqlParams.Add(new SqlParameter(PARAM_TEACHERCOUNT,SqlDbType.Int));
				sqlParams[PARAM_TEACHERCOUNT].SourceColumn = tableRef.FLD_TEACHERCOUNT;

				sqlParams.Add(new SqlParameter(PARAM_STUDENTCOUNT,SqlDbType.Int));
				sqlParams[PARAM_STUDENTCOUNT].SourceColumn = tableRef.FLD_STUDENTCOUNT;

				sqlParams.Add(new SqlParameter(PARAM_CUSTOMERCOUNT,SqlDbType.Int));
				sqlParams[PARAM_CUSTOMERCOUNT].SourceColumn = tableRef.FLD_CUSTOMERCOUNT;

				sqlParams.Add(new SqlParameter(PARAM_ORDERCOUNT,SqlDbType.Int));
				sqlParams[PARAM_ORDERCOUNT].SourceColumn = tableRef.FLD_ORDERCOUNT;

				sqlParams.Add(new SqlParameter(PARAM_ORDERCOUNTACCEPT,SqlDbType.Int));
				sqlParams[PARAM_ORDERCOUNTACCEPT].SourceColumn = tableRef.FLD_ORDERCOUNTACCEPT;

				sqlParams.Add(new SqlParameter(PARAM_ORDERDETAILCOUNT,SqlDbType.Int));
				sqlParams[PARAM_ORDERDETAILCOUNT].SourceColumn = tableRef.FLD_ORDERDETAILCOUNT;

				sqlParams.Add(new SqlParameter(PARAM_ORDERDETAILCOUNTERROR,SqlDbType.Int));
				sqlParams[PARAM_ORDERDETAILCOUNTERROR].SourceColumn = tableRef.FLD_ORDERDETAILCOUNTERROR;

				sqlParams.Add(new SqlParameter(PARAM_STARTIMPORTTIME,SqlDbType.DateTime));
				sqlParams[PARAM_STARTIMPORTTIME].SourceColumn = tableRef.FLD_STARTIMPORTTIME;

				sqlParams.Add(new SqlParameter(PARAM_ENDIMPORTTIME,SqlDbType.DateTime));
				sqlParams[PARAM_ENDIMPORTTIME].SourceColumn = tableRef.FLD_ENDIMPORTTIME;

				sqlParams.Add(new SqlParameter(PARAM_IMPORTTIMESECONDS,SqlDbType.Int));
				sqlParams[PARAM_IMPORTTIMESECONDS].SourceColumn = tableRef.FLD_IMPORTTIMESECONDS;

				sqlParams.Add(new SqlParameter(PARAM_CLERK,SqlDbType.VarChar));
				sqlParams[PARAM_CLERK].SourceColumn = tableRef.FLD_CLERK;

				sqlParams.Add(new SqlParameter(PARAM_DATECREATED,SqlDbType.DateTime));
				sqlParams[PARAM_DATECREATED].SourceColumn = tableRef.FLD_DATECREATED;

				sqlParams.Add(new SqlParameter(PARAM_USERIDCREATED,SqlDbType.VarChar));
				sqlParams[PARAM_USERIDCREATED].SourceColumn = tableRef.FLD_USERIDCREATED;

				sqlParams.Add(new SqlParameter(PARAM_DATEKEYED,SqlDbType.DateTime));
				sqlParams[PARAM_DATEKEYED].SourceColumn = tableRef.FLD_DATEKEYED;

				sqlParams.Add(new SqlParameter(PARAM_DATEBATCHCOMPLETED,SqlDbType.DateTime));
				sqlParams[PARAM_DATEBATCHCOMPLETED].SourceColumn = tableRef.FLD_DATEBATCHCOMPLETED;

				sqlParams.Add(new SqlParameter(PARAM_OVERRIDEPCTSTATE,SqlDbType.Bit));
				sqlParams[PARAM_OVERRIDEPCTSTATE].SourceColumn = tableRef.FLD_OVERRIDEPCTSTATE;

				sqlParams.Add(new SqlParameter(PARAM_PCTSTATE,SqlDbType.Decimal));
				sqlParams[PARAM_PCTSTATE].SourceColumn = tableRef.FLD_PCTSTATE;

				sqlParams.Add(new SqlParameter(PARAM_ORIGINALSTATUSINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_ORIGINALSTATUSINSTANCE].SourceColumn = tableRef.FLD_ORIGINALSTATUSINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_ORDERTYPECODE,SqlDbType.Int));
				sqlParams[PARAM_ORDERTYPECODE].SourceColumn = tableRef.FLD_ORDERTYPECODE;

				sqlParams.Add(new SqlParameter(PARAM_CAMPAIGNID,SqlDbType.Int));
				sqlParams[PARAM_CAMPAIGNID].SourceColumn = tableRef.FLD_CAMPAIGNID;

				sqlParams.Add(new SqlParameter(PARAM_BILLTOADDRESSID,SqlDbType.Int));
				sqlParams[PARAM_BILLTOADDRESSID].SourceColumn = tableRef.FLD_BILLTOADDRESSID;

				sqlParams.Add(new SqlParameter(PARAM_SHIPTOADDRESSID,SqlDbType.Int));
				sqlParams[PARAM_SHIPTOADDRESSID].SourceColumn = tableRef.FLD_SHIPTOADDRESSID;

				sqlParams.Add(new SqlParameter(PARAM_SHIPTOACCOUNTID,SqlDbType.Int));
				sqlParams[PARAM_SHIPTOACCOUNTID].SourceColumn = tableRef.FLD_SHIPTOACCOUNTID;

				sqlParams.Add(new SqlParameter(PARAM_BILLTOFMID,SqlDbType.VarChar));
				sqlParams[PARAM_BILLTOFMID].SourceColumn = tableRef.FLD_BILLTOFMID;

				sqlParams.Add(new SqlParameter(PARAM_SHIPTOFMID,SqlDbType.VarChar));
				sqlParams[PARAM_SHIPTOFMID].SourceColumn = tableRef.FLD_SHIPTOFMID;

				sqlParams.Add(new SqlParameter(PARAM_REPORTEDENVELOPES,SqlDbType.Int));
				sqlParams[PARAM_REPORTEDENVELOPES].SourceColumn = tableRef.FLD_REPORTEDENVELOPES;

				sqlParams.Add(new SqlParameter(PARAM_PAYMENTSEND,SqlDbType.Decimal));
				sqlParams[PARAM_PAYMENTSEND].SourceColumn = tableRef.FLD_PAYMENTSEND;

				sqlParams.Add(new SqlParameter(PARAM_SALESBEFORETAX,SqlDbType.Decimal));
				sqlParams[PARAM_SALESBEFORETAX].SourceColumn = tableRef.FLD_SALESBEFORETAX;

				sqlParams.Add(new SqlParameter(PARAM_DATESENT,SqlDbType.DateTime));
				sqlParams[PARAM_DATESENT].SourceColumn = tableRef.FLD_DATESENT;

				sqlParams.Add(new SqlParameter(PARAM_DATERECEIVED,SqlDbType.DateTime));
				sqlParams[PARAM_DATERECEIVED].SourceColumn = tableRef.FLD_DATERECEIVED;

				sqlParams.Add(new SqlParameter(PARAM_CONTACTFIRSTNAME,SqlDbType.VarChar));
				sqlParams[PARAM_CONTACTFIRSTNAME].SourceColumn = tableRef.FLD_CONTACTFIRSTNAME;

				sqlParams.Add(new SqlParameter(PARAM_CONTACTLASTNAME,SqlDbType.VarChar));
				sqlParams[PARAM_CONTACTLASTNAME].SourceColumn = tableRef.FLD_CONTACTLASTNAME;

				sqlParams.Add(new SqlParameter(PARAM_CONTACTEMAIL,SqlDbType.VarChar));
				sqlParams[PARAM_CONTACTEMAIL].SourceColumn = tableRef.FLD_CONTACTEMAIL;

				sqlParams.Add(new SqlParameter(PARAM_CONTACTPHONE,SqlDbType.VarChar));
				sqlParams[PARAM_CONTACTPHONE].SourceColumn = tableRef.FLD_CONTACTPHONE;

				sqlParams.Add(new SqlParameter(PARAM_COMMENT,SqlDbType.VarChar));
				sqlParams[PARAM_COMMENT].SourceColumn = tableRef.FLD_COMMENT;

				sqlParams.Add(new SqlParameter(PARAM_INCENTIVECALCULATIONSTATUS,SqlDbType.Int));
				sqlParams[PARAM_INCENTIVECALCULATIONSTATUS].SourceColumn = tableRef.FLD_INCENTIVECALCULATIONSTATUS;

				sqlParams.Add(new SqlParameter(PARAM_MAGNETBOOKLETCOUNT,SqlDbType.Int));
				sqlParams[PARAM_MAGNETBOOKLETCOUNT].SourceColumn = tableRef.FLD_MAGNETBOOKLETCOUNT;

				sqlParams.Add(new SqlParameter(PARAM_MAGNETCARDCOUNT,SqlDbType.Int));
				sqlParams[PARAM_MAGNETCARDCOUNT].SourceColumn = tableRef.FLD_MAGNETCARDCOUNT;

				sqlParams.Add(new SqlParameter(PARAM_MAGNETGOODCARDCOUNT,SqlDbType.Int));
				sqlParams[PARAM_MAGNETGOODCARDCOUNT].SourceColumn = tableRef.FLD_MAGNETGOODCARDCOUNT;

				sqlParams.Add(new SqlParameter(PARAM_MAGNETCARDSMAILED,SqlDbType.Int));
				sqlParams[PARAM_MAGNETCARDSMAILED].SourceColumn = tableRef.FLD_MAGNETCARDSMAILED;

				sqlParams.Add(new SqlParameter(PARAM_MAGNETMAILDATE,SqlDbType.DateTime));
				sqlParams[PARAM_MAGNETMAILDATE].SourceColumn = tableRef.FLD_MAGNETMAILDATE;

				sqlParams.Add(new SqlParameter(PARAM_PICKDATE,SqlDbType.DateTime));
				sqlParams[PARAM_PICKDATE].SourceColumn = tableRef.FLD_PICKDATE;

				sqlParams.Add(new SqlParameter(PARAM_ISDMAPPROVED,SqlDbType.Bit));
				sqlParams[PARAM_ISDMAPPROVED].SourceColumn = tableRef.FLD_ISDMAPPROVED;

				sqlParams.Add(new SqlParameter(PARAM_COUNTRYCODE,SqlDbType.VarChar));
				sqlParams[PARAM_COUNTRYCODE].SourceColumn = tableRef.FLD_COUNTRYCODE;

				sqlParams.Add(new SqlParameter(PARAM_PICKLINE,SqlDbType.Int));
				sqlParams[PARAM_PICKLINE].SourceColumn = tableRef.FLD_PICKLINE;

				sqlParams.Add(new SqlParameter(PARAM_ORDERQUALIFIERID,SqlDbType.Int));
				sqlParams[PARAM_ORDERQUALIFIERID].SourceColumn = tableRef.FLD_ORDERQUALIFIERID;

				sqlParams.Add(new SqlParameter(PARAM_CHECKPAYABLETOQSPAMOUNT,SqlDbType.Decimal));
				sqlParams[PARAM_CHECKPAYABLETOQSPAMOUNT].SourceColumn = tableRef.FLD_CHECKPAYABLETOQSPAMOUNT;

				sqlParams.Add(new SqlParameter(PARAM_ISINCENTIVE,SqlDbType.Bit));
				sqlParams[PARAM_ISINCENTIVE].SourceColumn = tableRef.FLD_ISINCENTIVE;

				sqlParams.Add(new SqlParameter(PARAM_ORDERDELIVERYDATE,SqlDbType.DateTime));
				sqlParams[PARAM_ORDERDELIVERYDATE].SourceColumn = tableRef.FLD_ORDERDELIVERYDATE;

				sqlParams.Add(new SqlParameter(PARAM_REFNUMBER,SqlDbType.Int));
				sqlParams[PARAM_REFNUMBER].SourceColumn = tableRef.FLD_REFNUMBER;

				sqlParams.Add(new SqlParameter(PARAM_PAYMENTBATCHDATE,SqlDbType.DateTime));
				sqlParams[PARAM_PAYMENTBATCHDATE].SourceColumn = tableRef.FLD_PAYMENTBATCHDATE;

				sqlParams.Add(new SqlParameter(PARAM_PAYMENTBATCHID,SqlDbType.Int));
				sqlParams[PARAM_PAYMENTBATCHID].SourceColumn = tableRef.FLD_PAYMENTBATCHID;

				sqlParams.Add(new SqlParameter(PARAM_ISSTAFFORDER,SqlDbType.Bit));
				sqlParams[PARAM_ISSTAFFORDER].SourceColumn = tableRef.FLD_ISSTAFFORDER;

				sqlParams.Add(new SqlParameter(PARAM_INQUIREUPONCOMPLETE,SqlDbType.Bit));
				sqlParams[PARAM_INQUIREUPONCOMPLETE].SourceColumn = tableRef.FLD_INQUIREUPONCOMPLETE;

				sqlParams.Add(new SqlParameter(PARAM_GROUPPROFIT,SqlDbType.Decimal));
				sqlParams[PARAM_GROUPPROFIT].SourceColumn = tableRef.FLD_GROUPPROFIT;

				sqlParams.Add(new SqlParameter(PARAM_ORDERID,SqlDbType.Int));
				sqlParams[PARAM_ORDERID].SourceColumn = tableRef.FLD_ORDERID;

				sqlParams.Add(new SqlParameter(PARAM_ORDERAMNTDUE,SqlDbType.Decimal));
				sqlParams[PARAM_ORDERAMNTDUE].SourceColumn = tableRef.FLD_ORDERAMNTDUE;

				sqlParams.Add(new SqlParameter(PARAM_MAGNETPOSTAGE,SqlDbType.Decimal));
				sqlParams[PARAM_MAGNETPOSTAGE].SourceColumn = tableRef.FLD_MAGNETPOSTAGE;

				sqlParams.Add(new SqlParameter(PARAM_ORDERIDINCENTIVE,SqlDbType.Int));
				sqlParams[PARAM_ORDERIDINCENTIVE].SourceColumn = tableRef.FLD_ORDERIDINCENTIVE;

				sqlParams.Add(new SqlParameter(PARAM_ISINVOICED,SqlDbType.Bit));
				sqlParams[PARAM_ISINVOICED].SourceColumn = tableRef.FLD_ISINVOICED;

				sqlParams.Add(new SqlParameter(PARAM_CAMPAIGNNETTOTAL,SqlDbType.Decimal));
				sqlParams[PARAM_CAMPAIGNNETTOTAL].SourceColumn = tableRef.FLD_CAMPAIGNNETTOTAL;
			}
			return updateCommand;
		}
		protected override string TableName
		{
			get
			{
				return tableRef.TBL_BATCH;
			}
		}
		public void SelectSearch(DataTable Table,int SearchType,string SearchCriteria)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_Batch_Search";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_TYPE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchType));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_CRITERIA, SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchCriteria));
			Select(cmdToExecute,Table);
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>daDate</LI>
		///		 <LI>iID</LI>
		/// </UL>
		///		 <LI>daDate</LI>
		///		 <LI>iID</LI>
		///		 <LI>iAccountID</LI>
		///		 <LI>iEnterredCount</LI>
		///		 <LI>dcEnterredAmount</LI>
		///		 <LI>dcCalculatedAmount</LI>
		///		 <LI>iStatusInstance</LI>
		///		 <LI>sKE3FileName</LI>
		///		 <LI>sChangeUserID</LI>
		///		 <LI>daChangeDate</LI>
		///		 <LI>iTeacherCount</LI>
		///		 <LI>iStudentCount</LI>
		///		 <LI>iCustomerCount</LI>
		///		 <LI>iOrderCount</LI>
		///		 <LI>iOrderCountAccept</LI>
		///		 <LI>iOrderDetailCount</LI>
		///		 <LI>iOrderDetailCountError</LI>
		///		 <LI>daStartImportTime</LI>
		///		 <LI>daEndImportTime</LI>
		///		 <LI>iImportTimeSeconds</LI>
		///		 <LI>sClerk</LI>
		///		 <LI>daDateCreated</LI>
		///		 <LI>sUserIDCreated</LI>
		///		 <LI>daDateKeyed</LI>
		///		 <LI>daDateBatchCompleted</LI>
		///		 <LI>bOverridePctState</LI>
		///		 <LI>dcPctState</LI>
		///		 <LI>iOriginalStatusInstance</LI>
		///		 <LI>iOrderTypeCode</LI>
		///		 <LI>iCampaignID</LI>
		///		 <LI>iBillToAddressID</LI>
		///		 <LI>iShipToAddressID</LI>
		///		 <LI>iShipToAccountID</LI>
		///		 <LI>sBillToFMID</LI>
		///		 <LI>sShipToFMID</LI>
		///		 <LI>iReportedEnvelopes</LI>
		///		 <LI>dcPaymentSend</LI>
		///		 <LI>dcSalesBeforeTax</LI>
		///		 <LI>daDateSent</LI>
		///		 <LI>daDateReceived</LI>
		///		 <LI>sContactFirstName</LI>
		///		 <LI>sContactLastName</LI>
		///		 <LI>sContactEmail</LI>
		///		 <LI>sContactPhone</LI>
		///		 <LI>sComment</LI>
		///		 <LI>iIncentiveCalculationStatus</LI>
		///		 <LI>iMagnetBookletCount</LI>
		///		 <LI>iMagnetCardCount</LI>
		///		 <LI>iMagnetGoodCardCount</LI>
		///		 <LI>iMagnetCardsMailed</LI>
		///		 <LI>daMagnetMailDate</LI>
		///		 <LI>daPickDate</LI>
		///		 <LI>bIsDMApproved</LI>
		///		 <LI>sCountryCode</LI>
		///		 <LI>iPickLine</LI>
		///		 <LI>iOrderQualifierID</LI>
		///		 <LI>dcCheckPayableToQSPAmount</LI>
		///		 <LI>bIsIncentive</LI>
		///		 <LI>daOrderDeliveryDate</LI>
		///		 <LI>iRefNumber</LI>
		///		 <LI>daPaymentBatchDate</LI>
		///		 <LI>iPaymentBatchID</LI>
		///		 <LI>bIsStaffOrder</LI>
		///		 <LI>bInquireUponComplete</LI>
		///		 <LI>dcGroupProfit</LI>
		///		 <LI>iOrderID</LI>
		///		 <LI>dcOrderAmntDue</LI>
		///		 <LI>dcMagnetPostage</LI>
		///		 <LI>iOrderIDIncentive</LI>
		///		 <LI>bIsInvoiced</LI>
		///		 <LI>dcCampaignNetTotal</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public  void SelectOne(DataTable Table, DateTime Date, Int32 ID)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_Batch_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_DATE, SqlDbType.DateTime, 8, ParameterDirection.Input, false, 23, 3, "", DataRowVersion.Proposed, Date));
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ID));
			Select(scmCmdToExecute,Table);
		}
		public  void SelectOneByOrderID(DataTable Table, int OrderID)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_Batch_SelectOneByOrderID]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_ORDERID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, OrderID));
			Select(scmCmdToExecute,Table);
		}

		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public  void SelectAll(DataTable Table)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_Batch_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(scmCmdToExecute,Table);
		}

		public int CreateBatchForProductReplacement(int campaignID, int orderQualifierID, string comment, int userID) 
		{
			SqlCommand scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_CreateBatchForProductReplacement]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iCampaignID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, campaignID));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iOrderQualifierID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, orderQualifierID));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@zComment", SqlDbType.VarChar, 300, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, comment));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iUserProfileID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, userID));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iOrderID", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));
			
			ExecuteCmd(scmCmdToExecute);
			
			return Convert.ToInt32(scmCmdToExecute.Parameters["@iOrderID"].Value);
		}
		public int CreateBatchForKanataOrder(int campaignID, int isFmAcct, int orderQualifierID, string comment, DateTime orderDeliveryDate, int userID) 
		{
			SqlCommand scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_Kanata_Batch_Create]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iCampaignID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, campaignID));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iIsFMAccount", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, isFmAcct));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iOrderQualifierID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, orderQualifierID));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@zComment", SqlDbType.VarChar, 300, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, comment));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@dOrderDeliveryDate", SqlDbType.DateTime, 300, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, orderDeliveryDate));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iUserProfileID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, userID));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iOrderID", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));
			
			ExecuteCmd(scmCmdToExecute);
			
			return Convert.ToInt32(scmCmdToExecute.Parameters["@iOrderID"].Value);
		}
		
		public int UpdateBatchForKanataOrder(int orderID, int orderQualifierID, DateTime orderDeliveryDate) 
		{
			SqlCommand scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_Kanata_Batch_Update]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iOrderID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, orderID));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iOrderQualifierID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, orderQualifierID));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@dOrderDeliveryDate", SqlDbType.DateTime, 300, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, orderDeliveryDate));
			
			ExecuteCmd(scmCmdToExecute);
			
			return Convert.ToInt32(scmCmdToExecute.Parameters["@iOrderID"].Value);
		}

		public bool ForceCloseOrder(int orderID) 
		{
			SqlCommand scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_ForceCloseOrder]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iOrderID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, orderID));
			return Convert.ToBoolean(ExecuteScalar(scmCmdToExecute));
		}

		public int SelectFMByOrderID(DataTable Table, int orderID) 
		{
			{
				SqlCommand	scmCmdToExecute = new SqlCommand();
				scmCmdToExecute.CommandText = "dbo.[pr_Batch_SelectFMByOrderID]";
				scmCmdToExecute.CommandType = CommandType.StoredProcedure;
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iOrderID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, orderID));
				return Convert.ToInt32(scmCmdToExecute.Parameters["@iOrderID"].Value);
			}
		}

		public bool BatchUpdateStatus(int OrderID, int StatusInstance) 
		{
			SqlCommand scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_batch_update_status]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iOrderID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, OrderID));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iStatusInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, StatusInstance));
			
			return Convert.ToBoolean(ExecuteScalar(scmCmdToExecute));
		}
	}
}
