///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'CustomerOrderDetailRemitHistory'
// Generated by LLBLGen v1.2.1603.19903 Final
// on: Saturday, May 22, 2004, 12:05:19 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using tableRef =QSPFulfillment.DataAccess.Common.TableDef.CustomerOrderDetailRemitHistoryTable;


namespace QSPFulfillment.DataAccess.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'CustomerOrderDetailRemitHistory'.
	/// </summary>
	public class CustomerOrderDetailRemitHistoryData : QSPFulfillment.DataAccess.Data.DBTableOperation
	{
		#region Class Member Declarations
		internal const string PARAM_CUSTOMERORDERHEADERINSTANCE= "@iCustomerOrderHeaderInstance";
		internal const string PARAM_TRANSID= "@iTransID";
		internal const string PARAM_REMITBATCHID= "@iRemitBatchID";
		internal const string PARAM_COUNTRYCODE= "@sCountryCode";
		internal const string PARAM_CUSTOMERREMITHISTORYINSTANCE= "@iCustomerRemitHistoryInstance";
		internal const string PARAM_STATUS= "@iStatus";
		internal const string PARAM_QUANTITY= "@iQuantity";
		internal const string PARAM_REMITRATE= "@dcRemitRate";
		internal const string PARAM_BASEPRICE= "@dcBasePrice";
		internal const string PARAM_CURRENCYID= "@iCurrencyID";
		internal const string PARAM_LANG= "@sLang";
		internal const string PARAM_PREMIUMINDICATOR= "@iPremiumIndicator";
		internal const string PARAM_PREMIUMCODE= "@sPremiumCode";
		internal const string PARAM_PREMIUMDESCRIPTION= "@sPremiumDescription";
		internal const string PARAM_ABCCODE= "@sABCCode";
		internal const string PARAM_RENEWAL= "@sRenewal";
		internal const string PARAM_TITLECODE= "@sTitleCode";
		internal const string PARAM_MAGAZINETITLE= "@sMagazineTitle";
		internal const string PARAM_CATALOGPRICE= "@dcCatalogPrice";
		internal const string PARAM_ITEMPRICETOTAL= "@dcItemPriceTotal";
		internal const string PARAM_NUMBEROFISSUES= "@iNumberOfIssues";
		internal const string PARAM_DEFAULTGROSSVALUE= "@dcDefaultGrossValue";
		internal const string PARAM_COMMENT= "@sComment";
		internal const string PARAM_SWITCHLETTERBATCHID= "@iSwitchLetterBatchID";
		internal const string PARAM_GIFTORDERTYPE= "@sGiftOrderType";
		internal const string PARAM_GIFTORDERSTATUS= "@iGiftOrderStatus";
		internal const string PARAM_GIFTCARDDATEGENERATED= "@daGiftCardDateGenerated";
		internal const string PARAM_SUPPORTERNAME= "@sSupporterName";
		internal const string PARAM_DATECHANGED= "@daDateChanged";
		internal const string PARAM_USERIDCHANGED= "@sUserIDChanged";
		internal const string PARAM_EFFORTKEY= "@sEffortKey";
		internal const string PARAM_SEARCH_CRITERIA = "@isearch_type";

		internal const string PARAM_SEARCH_TYPE = "@scriteria";

		//

		// DataSetCommand object

		//

		private SqlCommand insertCommand;

		private SqlCommand deleteCommand;

		private SqlCommand updateCommand;

		#endregion
		#region StoredProcedure NAme
		
		internal const string SP_SELECT_CUSTOMERORDERDETAILREMITHISTORY  = "pr_selectCustomerOrderDetailRemitHistoryByStatusByDate";
		
		#endregion

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public CustomerOrderDetailRemitHistoryData()
		{
			// Nothing for now.
		}
		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand("dbo.[pr_CustomerOrderDetailRemitHistory_Insert]");
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
				SqlParameterCollection sqlParams = insertCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_CUSTOMERORDERHEADERINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_CUSTOMERORDERHEADERINSTANCE].SourceColumn = tableRef.FLD_CUSTOMERORDERHEADERINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_TRANSID,SqlDbType.Int));
				sqlParams[PARAM_TRANSID].SourceColumn = tableRef.FLD_TRANSID;

				sqlParams.Add(new SqlParameter(PARAM_REMITBATCHID,SqlDbType.Int));
				sqlParams[PARAM_REMITBATCHID].SourceColumn = tableRef.FLD_REMITBATCHID;

				sqlParams.Add(new SqlParameter(PARAM_COUNTRYCODE,SqlDbType.VarChar));
				sqlParams[PARAM_COUNTRYCODE].SourceColumn = tableRef.FLD_COUNTRYCODE;

				sqlParams.Add(new SqlParameter(PARAM_CUSTOMERREMITHISTORYINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_CUSTOMERREMITHISTORYINSTANCE].SourceColumn = tableRef.FLD_CUSTOMERREMITHISTORYINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_STATUS,SqlDbType.Int));
				sqlParams[PARAM_STATUS].SourceColumn = tableRef.FLD_STATUS;

				sqlParams.Add(new SqlParameter(PARAM_QUANTITY,SqlDbType.Int));
				sqlParams[PARAM_QUANTITY].SourceColumn = tableRef.FLD_QUANTITY;

				sqlParams.Add(new SqlParameter(PARAM_REMITRATE,SqlDbType.Decimal));
				sqlParams[PARAM_REMITRATE].SourceColumn = tableRef.FLD_REMITRATE;

				sqlParams.Add(new SqlParameter(PARAM_BASEPRICE,SqlDbType.Decimal));
				sqlParams[PARAM_BASEPRICE].SourceColumn = tableRef.FLD_BASEPRICE;

				sqlParams.Add(new SqlParameter(PARAM_CURRENCYID,SqlDbType.Int));
				sqlParams[PARAM_CURRENCYID].SourceColumn = tableRef.FLD_CURRENCYID;

				sqlParams.Add(new SqlParameter(PARAM_LANG,SqlDbType.VarChar));
				sqlParams[PARAM_LANG].SourceColumn = tableRef.FLD_LANG;

				sqlParams.Add(new SqlParameter(PARAM_PREMIUMINDICATOR,SqlDbType.Int));
				sqlParams[PARAM_PREMIUMINDICATOR].SourceColumn = tableRef.FLD_PREMIUMINDICATOR;

				sqlParams.Add(new SqlParameter(PARAM_PREMIUMCODE,SqlDbType.VarChar));
				sqlParams[PARAM_PREMIUMCODE].SourceColumn = tableRef.FLD_PREMIUMCODE;

				sqlParams.Add(new SqlParameter(PARAM_PREMIUMDESCRIPTION,SqlDbType.VarChar));
				sqlParams[PARAM_PREMIUMDESCRIPTION].SourceColumn = tableRef.FLD_PREMIUMDESCRIPTION;

				sqlParams.Add(new SqlParameter(PARAM_ABCCODE,SqlDbType.VarChar));
				sqlParams[PARAM_ABCCODE].SourceColumn = tableRef.FLD_ABCCODE;

				sqlParams.Add(new SqlParameter(PARAM_RENEWAL,SqlDbType.Char));
				sqlParams[PARAM_RENEWAL].SourceColumn = tableRef.FLD_RENEWAL;

				sqlParams.Add(new SqlParameter(PARAM_TITLECODE,SqlDbType.VarChar));
				sqlParams[PARAM_TITLECODE].SourceColumn = tableRef.FLD_TITLECODE;

				sqlParams.Add(new SqlParameter(PARAM_MAGAZINETITLE,SqlDbType.VarChar));
				sqlParams[PARAM_MAGAZINETITLE].SourceColumn = tableRef.FLD_MAGAZINETITLE;

				sqlParams.Add(new SqlParameter(PARAM_CATALOGPRICE,SqlDbType.Decimal));
				sqlParams[PARAM_CATALOGPRICE].SourceColumn = tableRef.FLD_CATALOGPRICE;

				sqlParams.Add(new SqlParameter(PARAM_ITEMPRICETOTAL,SqlDbType.Decimal));
				sqlParams[PARAM_ITEMPRICETOTAL].SourceColumn = tableRef.FLD_ITEMPRICETOTAL;

				sqlParams.Add(new SqlParameter(PARAM_NUMBEROFISSUES,SqlDbType.Int));
				sqlParams[PARAM_NUMBEROFISSUES].SourceColumn = tableRef.FLD_NUMBEROFISSUES;

				sqlParams.Add(new SqlParameter(PARAM_DEFAULTGROSSVALUE,SqlDbType.Decimal));
				sqlParams[PARAM_DEFAULTGROSSVALUE].SourceColumn = tableRef.FLD_DEFAULTGROSSVALUE;

				sqlParams.Add(new SqlParameter(PARAM_COMMENT,SqlDbType.VarChar));
				sqlParams[PARAM_COMMENT].SourceColumn = tableRef.FLD_COMMENT;

				sqlParams.Add(new SqlParameter(PARAM_SWITCHLETTERBATCHID,SqlDbType.Int));
				sqlParams[PARAM_SWITCHLETTERBATCHID].SourceColumn = tableRef.FLD_SWITCHLETTERBATCHID;

				sqlParams.Add(new SqlParameter(PARAM_GIFTORDERTYPE,SqlDbType.Char));
				sqlParams[PARAM_GIFTORDERTYPE].SourceColumn = tableRef.FLD_GIFTORDERTYPE;

				sqlParams.Add(new SqlParameter(PARAM_GIFTORDERSTATUS,SqlDbType.Int));
				sqlParams[PARAM_GIFTORDERSTATUS].SourceColumn = tableRef.FLD_GIFTORDERSTATUS;

				sqlParams.Add(new SqlParameter(PARAM_GIFTCARDDATEGENERATED,SqlDbType.DateTime));
				sqlParams[PARAM_GIFTCARDDATEGENERATED].SourceColumn = tableRef.FLD_GIFTCARDDATEGENERATED;

				sqlParams.Add(new SqlParameter(PARAM_SUPPORTERNAME,SqlDbType.VarChar));
				sqlParams[PARAM_SUPPORTERNAME].SourceColumn = tableRef.FLD_SUPPORTERNAME;

				sqlParams.Add(new SqlParameter(PARAM_DATECHANGED,SqlDbType.DateTime));
				sqlParams[PARAM_DATECHANGED].SourceColumn = tableRef.FLD_DATECHANGED;

				sqlParams.Add(new SqlParameter(PARAM_USERIDCHANGED,SqlDbType.VarChar));
				sqlParams[PARAM_USERIDCHANGED].SourceColumn = tableRef.FLD_USERIDCHANGED;

				sqlParams.Add(new SqlParameter(PARAM_EFFORTKEY,SqlDbType.VarChar));
				sqlParams[PARAM_EFFORTKEY].SourceColumn = tableRef.FLD_EFFORTKEY;
			}
			return insertCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand("dbo.[pr_CustomerOrderDetailRemitHistory_Delete]");
				deleteCommand.CommandType = CommandType.StoredProcedure;
				SqlParameterCollection sqlParams = deleteCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_CUSTOMERORDERHEADERINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_CUSTOMERORDERHEADERINSTANCE].SourceColumn = tableRef.FLD_CUSTOMERORDERHEADERINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_TRANSID,SqlDbType.Int));
				sqlParams[PARAM_TRANSID].SourceColumn = tableRef.FLD_TRANSID;

				sqlParams.Add(new SqlParameter(PARAM_REMITBATCHID,SqlDbType.Int));
				sqlParams[PARAM_REMITBATCHID].SourceColumn = tableRef.FLD_REMITBATCHID;
			}
			return deleteCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand("dbo.[pr_CustomerOrderDetailRemitHistory_Update]");
				updateCommand.CommandType = CommandType.StoredProcedure;
				updateCommand.UpdatedRowSource = UpdateRowSource.OutputParameters;
				SqlParameterCollection sqlParams = updateCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_CUSTOMERORDERHEADERINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_CUSTOMERORDERHEADERINSTANCE].SourceColumn = tableRef.FLD_CUSTOMERORDERHEADERINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_TRANSID,SqlDbType.Int));
				sqlParams[PARAM_TRANSID].SourceColumn = tableRef.FLD_TRANSID;

				sqlParams.Add(new SqlParameter(PARAM_REMITBATCHID,SqlDbType.Int));
				sqlParams[PARAM_REMITBATCHID].SourceColumn = tableRef.FLD_REMITBATCHID;

				sqlParams.Add(new SqlParameter(PARAM_COUNTRYCODE,SqlDbType.VarChar));
				sqlParams[PARAM_COUNTRYCODE].SourceColumn = tableRef.FLD_COUNTRYCODE;

				sqlParams.Add(new SqlParameter(PARAM_CUSTOMERREMITHISTORYINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_CUSTOMERREMITHISTORYINSTANCE].SourceColumn = tableRef.FLD_CUSTOMERREMITHISTORYINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_STATUS,SqlDbType.Int));
				sqlParams[PARAM_STATUS].SourceColumn = tableRef.FLD_STATUS;

				sqlParams.Add(new SqlParameter(PARAM_QUANTITY,SqlDbType.Int));
				sqlParams[PARAM_QUANTITY].SourceColumn = tableRef.FLD_QUANTITY;

				sqlParams.Add(new SqlParameter(PARAM_REMITRATE,SqlDbType.Decimal));
				sqlParams[PARAM_REMITRATE].SourceColumn = tableRef.FLD_REMITRATE;

				sqlParams.Add(new SqlParameter(PARAM_BASEPRICE,SqlDbType.Decimal));
				sqlParams[PARAM_BASEPRICE].SourceColumn = tableRef.FLD_BASEPRICE;

				sqlParams.Add(new SqlParameter(PARAM_CURRENCYID,SqlDbType.Int));
				sqlParams[PARAM_CURRENCYID].SourceColumn = tableRef.FLD_CURRENCYID;

				sqlParams.Add(new SqlParameter(PARAM_LANG,SqlDbType.VarChar));
				sqlParams[PARAM_LANG].SourceColumn = tableRef.FLD_LANG;

				sqlParams.Add(new SqlParameter(PARAM_PREMIUMINDICATOR,SqlDbType.Int));
				sqlParams[PARAM_PREMIUMINDICATOR].SourceColumn = tableRef.FLD_PREMIUMINDICATOR;

				sqlParams.Add(new SqlParameter(PARAM_PREMIUMCODE,SqlDbType.VarChar));
				sqlParams[PARAM_PREMIUMCODE].SourceColumn = tableRef.FLD_PREMIUMCODE;

				sqlParams.Add(new SqlParameter(PARAM_PREMIUMDESCRIPTION,SqlDbType.VarChar));
				sqlParams[PARAM_PREMIUMDESCRIPTION].SourceColumn = tableRef.FLD_PREMIUMDESCRIPTION;

				sqlParams.Add(new SqlParameter(PARAM_ABCCODE,SqlDbType.VarChar));
				sqlParams[PARAM_ABCCODE].SourceColumn = tableRef.FLD_ABCCODE;

				sqlParams.Add(new SqlParameter(PARAM_RENEWAL,SqlDbType.Char));
				sqlParams[PARAM_RENEWAL].SourceColumn = tableRef.FLD_RENEWAL;

				sqlParams.Add(new SqlParameter(PARAM_TITLECODE,SqlDbType.VarChar));
				sqlParams[PARAM_TITLECODE].SourceColumn = tableRef.FLD_TITLECODE;

				sqlParams.Add(new SqlParameter(PARAM_MAGAZINETITLE,SqlDbType.VarChar));
				sqlParams[PARAM_MAGAZINETITLE].SourceColumn = tableRef.FLD_MAGAZINETITLE;

				sqlParams.Add(new SqlParameter(PARAM_CATALOGPRICE,SqlDbType.Decimal));
				sqlParams[PARAM_CATALOGPRICE].SourceColumn = tableRef.FLD_CATALOGPRICE;

				sqlParams.Add(new SqlParameter(PARAM_ITEMPRICETOTAL,SqlDbType.Decimal));
				sqlParams[PARAM_ITEMPRICETOTAL].SourceColumn = tableRef.FLD_ITEMPRICETOTAL;

				sqlParams.Add(new SqlParameter(PARAM_NUMBEROFISSUES,SqlDbType.Int));
				sqlParams[PARAM_NUMBEROFISSUES].SourceColumn = tableRef.FLD_NUMBEROFISSUES;

				sqlParams.Add(new SqlParameter(PARAM_DEFAULTGROSSVALUE,SqlDbType.Decimal));
				sqlParams[PARAM_DEFAULTGROSSVALUE].SourceColumn = tableRef.FLD_DEFAULTGROSSVALUE;

				sqlParams.Add(new SqlParameter(PARAM_COMMENT,SqlDbType.VarChar));
				sqlParams[PARAM_COMMENT].SourceColumn = tableRef.FLD_COMMENT;

				sqlParams.Add(new SqlParameter(PARAM_SWITCHLETTERBATCHID,SqlDbType.Int));
				sqlParams[PARAM_SWITCHLETTERBATCHID].SourceColumn = tableRef.FLD_SWITCHLETTERBATCHID;

				sqlParams.Add(new SqlParameter(PARAM_GIFTORDERTYPE,SqlDbType.Char));
				sqlParams[PARAM_GIFTORDERTYPE].SourceColumn = tableRef.FLD_GIFTORDERTYPE;

				sqlParams.Add(new SqlParameter(PARAM_GIFTORDERSTATUS,SqlDbType.Int));
				sqlParams[PARAM_GIFTORDERSTATUS].SourceColumn = tableRef.FLD_GIFTORDERSTATUS;

				sqlParams.Add(new SqlParameter(PARAM_GIFTCARDDATEGENERATED,SqlDbType.DateTime));
				sqlParams[PARAM_GIFTCARDDATEGENERATED].SourceColumn = tableRef.FLD_GIFTCARDDATEGENERATED;

				sqlParams.Add(new SqlParameter(PARAM_SUPPORTERNAME,SqlDbType.VarChar));
				sqlParams[PARAM_SUPPORTERNAME].SourceColumn = tableRef.FLD_SUPPORTERNAME;

				sqlParams.Add(new SqlParameter(PARAM_DATECHANGED,SqlDbType.DateTime));
				sqlParams[PARAM_DATECHANGED].SourceColumn = tableRef.FLD_DATECHANGED;

				sqlParams.Add(new SqlParameter(PARAM_USERIDCHANGED,SqlDbType.VarChar));
				sqlParams[PARAM_USERIDCHANGED].SourceColumn = tableRef.FLD_USERIDCHANGED;

				sqlParams.Add(new SqlParameter(PARAM_EFFORTKEY,SqlDbType.VarChar));
				sqlParams[PARAM_EFFORTKEY].SourceColumn = tableRef.FLD_EFFORTKEY;
			}
			return updateCommand;
		}
		protected override string TableName
		{
			get
			{
				return tableRef.TBL_CUSTOMERORDERDETAILREMITHISTORY;
			}
		}
		public void SelectSearch(DataTable Table,int SearchType,string SearchCriteria)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_CustomerOrderDetailRemitHistory_Search";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_TYPE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchType));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_CRITERIA, SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchCriteria));
			Select(cmdToExecute,Table);
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iCustomerOrderHeaderInstance</LI>
		///		 <LI>iTransID</LI>
		///		 <LI>iRemitBatchID</LI>
		/// </UL>
		///		 <LI>iCustomerOrderHeaderInstance</LI>
		///		 <LI>iTransID</LI>
		///		 <LI>iRemitBatchID</LI>
		///		 <LI>sCountryCode</LI>
		///		 <LI>iCustomerRemitHistoryInstance</LI>
		///		 <LI>iStatus</LI>
		///		 <LI>iQuantity</LI>
		///		 <LI>dcRemitRate</LI>
		///		 <LI>dcBasePrice</LI>
		///		 <LI>iCurrencyID</LI>
		///		 <LI>sLang</LI>
		///		 <LI>iPremiumIndicator</LI>
		///		 <LI>sPremiumCode</LI>
		///		 <LI>sPremiumDescription</LI>
		///		 <LI>sABCCode</LI>
		///		 <LI>sRenewal</LI>
		///		 <LI>sTitleCode</LI>
		///		 <LI>sMagazineTitle</LI>
		///		 <LI>dcCatalogPrice</LI>
		///		 <LI>dcItemPriceTotal</LI>
		///		 <LI>iNumberOfIssues</LI>
		///		 <LI>dcDefaultGrossValue</LI>
		///		 <LI>sComment</LI>
		///		 <LI>iSwitchLetterBatchID</LI>
		///		 <LI>sGiftOrderType</LI>
		///		 <LI>iGiftOrderStatus</LI>
		///		 <LI>daGiftCardDateGenerated</LI>
		///		 <LI>sSupporterName</LI>
		///		 <LI>daDateChanged</LI>
		///		 <LI>sUserIDChanged</LI>
		///		 <LI>sEffortKey</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public  void SelectOne(DataTable Table, Int32 CustomerOrderHeaderInstance, Int32 TransID, Int32 RemitBatchID)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_CustomerOrderDetailRemitHistory_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_CUSTOMERORDERHEADERINSTANCE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CustomerOrderHeaderInstance));
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_TRANSID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, TransID));
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_REMITBATCHID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, RemitBatchID));
			Select(scmCmdToExecute,Table);
		}
		public  void SelectOneLastTransaction(DataTable Table, Int32 CustomerOrderHeaderInstance, Int32 TransID)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_CustomerOrderDetailRemitHistory_SelectLast]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_CUSTOMERORDERHEADERINSTANCE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CustomerOrderHeaderInstance));
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_TRANSID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, TransID));
			Select(scmCmdToExecute,Table);
		}
		public  void SelectByCOHInstance(DataTable Table, Int32 CustomerOrderHeaderInstance,int TransID)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_CustomerOrderDetailRemitHistory_SelectByCOHInstance]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_CUSTOMERORDERHEADERINSTANCE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CustomerOrderHeaderInstance));
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_TRANSID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, TransID));
			
			Select(scmCmdToExecute,Table);
		}
		
		


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public  void SelectAll(DataTable Table)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_CustomerOrderDetailRemitHistory_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(scmCmdToExecute,Table);
		}

		public void SelectByDate(DataTable Table,int Status,DateTime From,DateTime To)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = SP_SELECT_CUSTOMERORDERDETAILREMITHISTORY;
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_STATUS, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Status));
			AddParameterDate(RemitBatchData.PARAM_DATE_FROM,From,scmCmdToExecute,true);
			AddParameterDate(RemitBatchData.PARAM_DATE_TO,To,scmCmdToExecute,true);
			/*scmCmdToExecute.Parameters.Add(new SqlParameter(RemitBatchData.PARAM_DATE_FROM, SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, From));
			scmCmdToExecute.Parameters.Add(new SqlParameter(RemitBatchData.PARAM_DATE_TO, SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, To));*/
			Select(scmCmdToExecute,Table);
		}
	}
}
