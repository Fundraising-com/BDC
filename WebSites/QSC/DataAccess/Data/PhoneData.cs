///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'Phone'
// Generated by LLBLGen v1.2.1655.16789 Final
// on: Tuesday, September 07, 2004, 10:20:34 AM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using tableRef =QSPFulfillment.DataAccess.Common.TableDef.PhoneTable;


namespace QSPFulfillment.DataAccess.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Phone'.
	/// </summary>
	public class PhoneData : QSPFulfillment.DataAccess.Data.DBTableOperation
	{
		#region Class Member Declarations
		internal const string PARAM_ID= "@ID";
		internal const string PARAM_TYPE= "@Type";
		internal const string PARAM_PHONELISTID= "@PhoneListID";
		internal const string PARAM_PHONENUMBER= "@PhoneNumber";
		internal const string PARAM_BESTTIMETOCALL= "@BestTimeToCall";
		internal const string PARAM_CANADA_OM_PHONELISTID= "@iCanada_OM_PhoneListID";
		
		//

		// DataSetCommand object

		//

		private SqlCommand insertCommand;

		private SqlCommand deleteCommand;

		private SqlCommand updateCommand;

		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public PhoneData()
		{
			// Nothing for now.
		}
		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand("qspcanadacommon..pr_ins_Phone");
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
				SqlParameterCollection sqlParams = insertCommand.Parameters;

				sqlParams.Add(new SqlParameter("@Phone_ID",SqlDbType.Int));
				sqlParams["@Phone_ID"].Direction = ParameterDirection.Output;
				sqlParams["@Phone_ID"].SourceColumn = tableRef.FLD_ID;

				sqlParams.Add(new SqlParameter(PARAM_TYPE,SqlDbType.Int));
				sqlParams[PARAM_TYPE].SourceColumn = tableRef.FLD_TYPE;

				sqlParams.Add(new SqlParameter(PARAM_PHONELISTID,SqlDbType.Int));
				sqlParams[PARAM_PHONELISTID].SourceColumn = tableRef.FLD_PHONELISTID;

				sqlParams.Add(new SqlParameter(PARAM_PHONENUMBER,SqlDbType.VarChar));
				sqlParams[PARAM_PHONENUMBER].SourceColumn = tableRef.FLD_PHONENUMBER;

				sqlParams.Add(new SqlParameter(PARAM_BESTTIMETOCALL,SqlDbType.VarChar));
				sqlParams[PARAM_BESTTIMETOCALL].SourceColumn = tableRef.FLD_BESTTIMETOCALL;

				
			}
			return insertCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand("dbo.[pr_Phone_Delete]");
				deleteCommand.CommandType = CommandType.StoredProcedure;
				SqlParameterCollection sqlParams = deleteCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_ID,SqlDbType.Int));
				sqlParams[PARAM_ID].SourceColumn = tableRef.FLD_ID;
			}
			return deleteCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand("qspcanadacommon..pr_upd_Phone_by_id");
				updateCommand.CommandType = CommandType.StoredProcedure;
				updateCommand.UpdatedRowSource = UpdateRowSource.OutputParameters;
				SqlParameterCollection sqlParams = updateCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_ID,SqlDbType.Int));
				sqlParams[PARAM_ID].SourceColumn = tableRef.FLD_ID;

				sqlParams.Add(new SqlParameter(PARAM_TYPE,SqlDbType.Int));
				sqlParams[PARAM_TYPE].SourceColumn = tableRef.FLD_TYPE;

				sqlParams.Add(new SqlParameter(PARAM_PHONELISTID,SqlDbType.Int));
				sqlParams[PARAM_PHONELISTID].SourceColumn = tableRef.FLD_PHONELISTID;

				sqlParams.Add(new SqlParameter(PARAM_PHONENUMBER,SqlDbType.VarChar));
				sqlParams[PARAM_PHONENUMBER].SourceColumn = tableRef.FLD_PHONENUMBER;

				sqlParams.Add(new SqlParameter(PARAM_BESTTIMETOCALL,SqlDbType.VarChar));
				sqlParams[PARAM_BESTTIMETOCALL].SourceColumn = tableRef.FLD_BESTTIMETOCALL;

				
			}
			return updateCommand;
		}
		protected override string TableName
		{
			get
			{
				return tableRef.TBL_PHONE;
			}
		}
		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iID</LI>
		/// </UL>
		///		 <LI>iID</LI>
		///		 <LI>iType</LI>
		///		 <LI>iPhoneListID</LI>
		///		 <LI>sPhoneNumber</LI>
		///		 <LI>sBestTimeToCall</LI>
		///		 <LI>iCanada_OM_PhoneListID</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public  void SelectOne(DataTable Table, Int32 ID)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "qspcanadacommon..pr_get_Phone_by_id";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ID));
			Select(scmCmdToExecute,Table);
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public  void SelectAll(DataTable Table,int ListID)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "qspcanadacommon..pr_get_PhoneList";
			scmCmdToExecute.Parameters.Add(new SqlParameter("@ListID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ListID));
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(scmCmdToExecute,Table);
		}
	}
}
