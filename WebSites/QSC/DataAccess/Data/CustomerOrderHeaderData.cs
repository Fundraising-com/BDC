///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'CustomerOrderHeader'
// Generated by LLBLGen v1.2.1594.24829 Final
// on: Thursday, May 13, 2004, 2:49:53 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using tableRef =QSPFulfillment.DataAccess.Common.TableDef.CustomerOrderHeaderTable;
using QSPFulfillment.DataAccess.Common.ActionObject;


namespace QSPFulfillment.DataAccess.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'CustomerOrderHeader'.
	/// </summary>
	public class CustomerOrderHeaderData : QSPFulfillment.DataAccess.Data.DBTableOperation
	{
		#region Class Member Declarations
		internal const string PARAM_INSTANCE= "@iInstance";
		internal const string PARAM_NEXTDETAILTRANSID= "@iNextDetailTransID";
		internal const string PARAM_ACCOUNTID= "@iAccountID";
		internal const string PARAM_CUSTOMERBILLTOINSTANCE= "@iCustomerBillToInstance";
		internal const string PARAM_STUDENTINSTANCE= "@iStudentInstance";
		internal const string PARAM_STATUSINSTANCE= "@iStatusInstance";
		internal const string PARAM_FIRSTSTATUSINSTANCE= "@iFirstStatusInstance";
		internal const string PARAM_TOTALPROCESSINGFEE= "@fTotalProcessingFee";
		internal const string PARAM_TOTALPROCESSINGFEEA= "@fTotalProcessingFeeA";
		internal const string PARAM_PROCESSINGFEETAX= "@fProcessingFeeTax";
		internal const string PARAM_PROCESSINGFEETAXA= "@fProcessingFeeTaxA";
		internal const string PARAM_PROCESSINGFEETRANSID= "@iProcessingFeeTransID";
		internal const string PARAM_ORDERBATCHDATE= "@daOrderBatchDate";
		internal const string PARAM_ORDERBATCHID= "@iOrderBatchID";
		internal const string PARAM_ORDERBATCHSEQUENCE= "@iOrderBatchSequence";
		internal const string PARAM_CREATIONDATE= "@daCreationDate";
		internal const string PARAM_LASTSENTINVOICEDATE= "@daLastSentInvoiceDate";
		internal const string PARAM_NUMBERINVOICESSENT= "@iNumberInvoicesSent";
		internal const string PARAM_FORCEINVOICE= "@bForceInvoice";
		internal const string PARAM_DELFLAG= "@bDelFlag";
		internal const string PARAM_CHANGEUSERID= "@sChangeUserID";
		internal const string PARAM_CHANGEDATE= "@daChangeDate";
		internal const string PARAM_TYPE= "@iType";
		internal const string PARAM_PAYMENTMETHODINSTANCE= "@iPaymentMethodInstance";
		internal const string PARAM_CAMPAIGNID= "@iCampaignID";
		internal const string PARAM_SEARCH_CRITERIA = "@isearch_type";
				internal const string PARAM_ADDRESS_TYPE = "@AddressType";
		internal const string PARAM_SEARCH_TYPE = "@scriteria";

		//

		// DataSetCommand object

		//

		private SqlCommand insertCommand;

		private SqlCommand deleteCommand;

		private SqlCommand updateCommand;

		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public CustomerOrderHeaderData()
		{
			// Nothing for now.
		}
		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand("dbo.[pr_CustomerOrderHeader_Insert]");
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
				SqlParameterCollection sqlParams = insertCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_INSTANCE,SqlDbType.Int));
				sqlParams[PARAM_INSTANCE].SourceColumn = tableRef.FLD_INSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_NEXTDETAILTRANSID,SqlDbType.Int));
				sqlParams[PARAM_NEXTDETAILTRANSID].SourceColumn = tableRef.FLD_NEXTDETAILTRANSID;

				sqlParams.Add(new SqlParameter(PARAM_ACCOUNTID,SqlDbType.Int));
				sqlParams[PARAM_ACCOUNTID].SourceColumn = tableRef.FLD_ACCOUNTID;

				sqlParams.Add(new SqlParameter(PARAM_CUSTOMERBILLTOINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_CUSTOMERBILLTOINSTANCE].SourceColumn = tableRef.FLD_CUSTOMERBILLTOINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_STUDENTINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_STUDENTINSTANCE].SourceColumn = tableRef.FLD_STUDENTINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_STATUSINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_STATUSINSTANCE].SourceColumn = tableRef.FLD_STATUSINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_FIRSTSTATUSINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_FIRSTSTATUSINSTANCE].SourceColumn = tableRef.FLD_FIRSTSTATUSINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_TOTALPROCESSINGFEE,SqlDbType.Float));
				sqlParams[PARAM_TOTALPROCESSINGFEE].SourceColumn = tableRef.FLD_TOTALPROCESSINGFEE;

				sqlParams.Add(new SqlParameter(PARAM_TOTALPROCESSINGFEEA,SqlDbType.Float));
				sqlParams[PARAM_TOTALPROCESSINGFEEA].SourceColumn = tableRef.FLD_TOTALPROCESSINGFEEA;

				sqlParams.Add(new SqlParameter(PARAM_PROCESSINGFEETAX,SqlDbType.Float));
				sqlParams[PARAM_PROCESSINGFEETAX].SourceColumn = tableRef.FLD_PROCESSINGFEETAX;

				sqlParams.Add(new SqlParameter(PARAM_PROCESSINGFEETAXA,SqlDbType.Float));
				sqlParams[PARAM_PROCESSINGFEETAXA].SourceColumn = tableRef.FLD_PROCESSINGFEETAXA;

				sqlParams.Add(new SqlParameter(PARAM_PROCESSINGFEETRANSID,SqlDbType.Int));
				sqlParams[PARAM_PROCESSINGFEETRANSID].SourceColumn = tableRef.FLD_PROCESSINGFEETRANSID;

				sqlParams.Add(new SqlParameter(PARAM_ORDERBATCHDATE,SqlDbType.DateTime));
				sqlParams[PARAM_ORDERBATCHDATE].SourceColumn = tableRef.FLD_ORDERBATCHDATE;

				sqlParams.Add(new SqlParameter(PARAM_ORDERBATCHID,SqlDbType.Int));
				sqlParams[PARAM_ORDERBATCHID].SourceColumn = tableRef.FLD_ORDERBATCHID;

				sqlParams.Add(new SqlParameter(PARAM_ORDERBATCHSEQUENCE,SqlDbType.Int));
				sqlParams[PARAM_ORDERBATCHSEQUENCE].SourceColumn = tableRef.FLD_ORDERBATCHSEQUENCE;

				sqlParams.Add(new SqlParameter(PARAM_CREATIONDATE,SqlDbType.DateTime));
				sqlParams[PARAM_CREATIONDATE].SourceColumn = tableRef.FLD_CREATIONDATE;

				sqlParams.Add(new SqlParameter(PARAM_LASTSENTINVOICEDATE,SqlDbType.DateTime));
				sqlParams[PARAM_LASTSENTINVOICEDATE].SourceColumn = tableRef.FLD_LASTSENTINVOICEDATE;

				sqlParams.Add(new SqlParameter(PARAM_NUMBERINVOICESSENT,SqlDbType.Int));
				sqlParams[PARAM_NUMBERINVOICESSENT].SourceColumn = tableRef.FLD_NUMBERINVOICESSENT;

				sqlParams.Add(new SqlParameter(PARAM_FORCEINVOICE,SqlDbType.Bit));
				sqlParams[PARAM_FORCEINVOICE].SourceColumn = tableRef.FLD_FORCEINVOICE;

				sqlParams.Add(new SqlParameter(PARAM_DELFLAG,SqlDbType.Bit));
				sqlParams[PARAM_DELFLAG].SourceColumn = tableRef.FLD_DELFLAG;

				sqlParams.Add(new SqlParameter(PARAM_CHANGEUSERID,SqlDbType.VarChar));
				sqlParams[PARAM_CHANGEUSERID].SourceColumn = tableRef.FLD_CHANGEUSERID;

				sqlParams.Add(new SqlParameter(PARAM_CHANGEDATE,SqlDbType.DateTime));
				sqlParams[PARAM_CHANGEDATE].SourceColumn = tableRef.FLD_CHANGEDATE;

				sqlParams.Add(new SqlParameter(PARAM_TYPE,SqlDbType.Int));
				sqlParams[PARAM_TYPE].SourceColumn = tableRef.FLD_TYPE;

				sqlParams.Add(new SqlParameter(PARAM_PAYMENTMETHODINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_PAYMENTMETHODINSTANCE].SourceColumn = tableRef.FLD_PAYMENTMETHODINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_CAMPAIGNID,SqlDbType.Int));
				sqlParams[PARAM_CAMPAIGNID].SourceColumn = tableRef.FLD_CAMPAIGNID;
			}
			return insertCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand("dbo.[pr_CustomerOrderHeader_Delete]");
				deleteCommand.CommandType = CommandType.StoredProcedure;
				SqlParameterCollection sqlParams = deleteCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_INSTANCE,SqlDbType.Int));
				sqlParams[PARAM_INSTANCE].SourceColumn = tableRef.FLD_INSTANCE;
			}
			return deleteCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand("dbo.[pr_CustomerOrderHeader_Update]");
				updateCommand.CommandType = CommandType.StoredProcedure;
				updateCommand.UpdatedRowSource = UpdateRowSource.OutputParameters;
				SqlParameterCollection sqlParams = updateCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_INSTANCE,SqlDbType.Int));
				sqlParams[PARAM_INSTANCE].SourceColumn = tableRef.FLD_INSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_NEXTDETAILTRANSID,SqlDbType.Int));
				sqlParams[PARAM_NEXTDETAILTRANSID].SourceColumn = tableRef.FLD_NEXTDETAILTRANSID;

				sqlParams.Add(new SqlParameter(PARAM_ACCOUNTID,SqlDbType.Int));
				sqlParams[PARAM_ACCOUNTID].SourceColumn = tableRef.FLD_ACCOUNTID;

				sqlParams.Add(new SqlParameter(PARAM_CUSTOMERBILLTOINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_CUSTOMERBILLTOINSTANCE].SourceColumn = tableRef.FLD_CUSTOMERBILLTOINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_STUDENTINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_STUDENTINSTANCE].SourceColumn = tableRef.FLD_STUDENTINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_STATUSINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_STATUSINSTANCE].SourceColumn = tableRef.FLD_STATUSINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_FIRSTSTATUSINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_FIRSTSTATUSINSTANCE].SourceColumn = tableRef.FLD_FIRSTSTATUSINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_TOTALPROCESSINGFEE,SqlDbType.Float));
				sqlParams[PARAM_TOTALPROCESSINGFEE].SourceColumn = tableRef.FLD_TOTALPROCESSINGFEE;

				sqlParams.Add(new SqlParameter(PARAM_TOTALPROCESSINGFEEA,SqlDbType.Float));
				sqlParams[PARAM_TOTALPROCESSINGFEEA].SourceColumn = tableRef.FLD_TOTALPROCESSINGFEEA;

				sqlParams.Add(new SqlParameter(PARAM_PROCESSINGFEETAX,SqlDbType.Float));
				sqlParams[PARAM_PROCESSINGFEETAX].SourceColumn = tableRef.FLD_PROCESSINGFEETAX;

				sqlParams.Add(new SqlParameter(PARAM_PROCESSINGFEETAXA,SqlDbType.Float));
				sqlParams[PARAM_PROCESSINGFEETAXA].SourceColumn = tableRef.FLD_PROCESSINGFEETAXA;

				sqlParams.Add(new SqlParameter(PARAM_PROCESSINGFEETRANSID,SqlDbType.Int));
				sqlParams[PARAM_PROCESSINGFEETRANSID].SourceColumn = tableRef.FLD_PROCESSINGFEETRANSID;

				sqlParams.Add(new SqlParameter(PARAM_ORDERBATCHDATE,SqlDbType.DateTime));
				sqlParams[PARAM_ORDERBATCHDATE].SourceColumn = tableRef.FLD_ORDERBATCHDATE;

				sqlParams.Add(new SqlParameter(PARAM_ORDERBATCHID,SqlDbType.Int));
				sqlParams[PARAM_ORDERBATCHID].SourceColumn = tableRef.FLD_ORDERBATCHID;

				sqlParams.Add(new SqlParameter(PARAM_ORDERBATCHSEQUENCE,SqlDbType.Int));
				sqlParams[PARAM_ORDERBATCHSEQUENCE].SourceColumn = tableRef.FLD_ORDERBATCHSEQUENCE;

				sqlParams.Add(new SqlParameter(PARAM_CREATIONDATE,SqlDbType.DateTime));
				sqlParams[PARAM_CREATIONDATE].SourceColumn = tableRef.FLD_CREATIONDATE;

				sqlParams.Add(new SqlParameter(PARAM_LASTSENTINVOICEDATE,SqlDbType.DateTime));
				sqlParams[PARAM_LASTSENTINVOICEDATE].SourceColumn = tableRef.FLD_LASTSENTINVOICEDATE;

				sqlParams.Add(new SqlParameter(PARAM_NUMBERINVOICESSENT,SqlDbType.Int));
				sqlParams[PARAM_NUMBERINVOICESSENT].SourceColumn = tableRef.FLD_NUMBERINVOICESSENT;

				sqlParams.Add(new SqlParameter(PARAM_FORCEINVOICE,SqlDbType.Bit));
				sqlParams[PARAM_FORCEINVOICE].SourceColumn = tableRef.FLD_FORCEINVOICE;

				sqlParams.Add(new SqlParameter(PARAM_DELFLAG,SqlDbType.Bit));
				sqlParams[PARAM_DELFLAG].SourceColumn = tableRef.FLD_DELFLAG;

				sqlParams.Add(new SqlParameter(PARAM_CHANGEUSERID,SqlDbType.VarChar));
				sqlParams[PARAM_CHANGEUSERID].SourceColumn = tableRef.FLD_CHANGEUSERID;

				sqlParams.Add(new SqlParameter(PARAM_CHANGEDATE,SqlDbType.DateTime));
				sqlParams[PARAM_CHANGEDATE].SourceColumn = tableRef.FLD_CHANGEDATE;

				sqlParams.Add(new SqlParameter(PARAM_TYPE,SqlDbType.Int));
				sqlParams[PARAM_TYPE].SourceColumn = tableRef.FLD_TYPE;

				sqlParams.Add(new SqlParameter(PARAM_PAYMENTMETHODINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_PAYMENTMETHODINSTANCE].SourceColumn = tableRef.FLD_PAYMENTMETHODINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_CAMPAIGNID,SqlDbType.Int));
				sqlParams[PARAM_CAMPAIGNID].SourceColumn = tableRef.FLD_CAMPAIGNID;
			}
			return updateCommand;
		}
		protected override string TableName
		{
			get
			{
				return tableRef.TBL_CUSTOMERORDERHEADER;
			}
		}
		public void SelectSearch(DataTable Table,int SearchType,string SearchCriteria)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_CustomerOrderHeader_Search";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_TYPE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchType));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_CRITERIA, SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchCriteria));
			Select(cmdToExecute,Table);
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iInstance</LI>
		/// </UL>
		///		 <LI>iInstance</LI>
		///		 <LI>iNextDetailTransID</LI>
		///		 <LI>iAccountID</LI>
		///		 <LI>iCustomerBillToInstance</LI>
		///		 <LI>iStudentInstance</LI>
		///		 <LI>iStatusInstance</LI>
		///		 <LI>iFirstStatusInstance</LI>
		///		 <LI>fTotalProcessingFee</LI>
		///		 <LI>fTotalProcessingFeeA</LI>
		///		 <LI>fProcessingFeeTax</LI>
		///		 <LI>fProcessingFeeTaxA</LI>
		///		 <LI>iProcessingFeeTransID</LI>
		///		 <LI>daOrderBatchDate</LI>
		///		 <LI>iOrderBatchID</LI>
		///		 <LI>iOrderBatchSequence</LI>
		///		 <LI>daCreationDate</LI>
		///		 <LI>daLastSentInvoiceDate</LI>
		///		 <LI>iNumberInvoicesSent</LI>
		///		 <LI>bForceInvoice</LI>
		///		 <LI>bDelFlag</LI>
		///		 <LI>sChangeUserID</LI>
		///		 <LI>daChangeDate</LI>
		///		 <LI>iType</LI>
		///		 <LI>iPaymentMethodInstance</LI>
		///		 <LI>iCampaignID</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public  void SelectOne(DataTable Table, Int32 Instance)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_CustomerOrderHeader_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_INSTANCE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Instance));
			Select(scmCmdToExecute,Table);
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public  void SelectAll(DataTable Table)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_CustomerOrderHeader_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(scmCmdToExecute,Table);
		}
		public  void SelectAllByBatch(DataTable Table, string dOrderBatchDate, int nOrderBatchIDP)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_CustomerOrderHeader_SelectAllByBatch]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_ORDERBATCHDATE, SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, dOrderBatchDate));
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_ORDERBATCHID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, nOrderBatchIDP));

			Select(scmCmdToExecute,Table);
		}
		public void Select(DataTable Table,int CampaignID,string Type)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_Account_Select_By_Address_Type]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(PARAM_CAMPAIGNID,CampaignID);
			scmCmdToExecute.Parameters.Add(PARAM_ADDRESS_TYPE,Type);
			scmCmdToExecute.Parameters.Add(new SqlParameter("@Query",SqlDbType.NVarChar,4000,ParameterDirection.Output,true,1,1,"",DataRowVersion.Current,""));
			Select(scmCmdToExecute,Table);
		}
		public void SelectCustomerAddress(DataTable Table,int COHI,int TransID)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_SelectCustomerAddress]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add("@iCustomerOrderHeaderInstance",COHI);
			scmCmdToExecute.Parameters.Add("@iTransID",TransID);
			Select(scmCmdToExecute,Table);
		}
		public void SelectCustomerAddressHistory(DataTable Table,int COHI, int transID)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_SelectCustomerAddressHistory]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add("@iCustomerOrderHeaderInstance",COHI);
			scmCmdToExecute.Parameters.Add("@iTransID", transID);
			Select(scmCmdToExecute,Table);
		}
		public void SelectShipToAddressHistory(DataTable Table,int COHI,int TransID)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_SelectRecipientAddressHistory]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add("@iCustomerOrderHeaderInstance",COHI);
			scmCmdToExecute.Parameters.Add("@iTransID",TransID);
			Select(scmCmdToExecute,Table);
		}
		public void SelectShipToAddress(DataTable Table,int COHI,int TransID)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_SelectRecipientAddress]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add("@iCustomerOrderHeaderInstance",COHI);
			scmCmdToExecute.Parameters.Add("@iTransID",TransID);
			Select(scmCmdToExecute,Table);
		}

		public int RecordRecipientAddressHistory(int customerOrderHeaderInstance, int transID) 
		{
			SqlCommand scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_RecordRecipientAddressHistory]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add("@iCustomerOrderHeaderInstance", customerOrderHeaderInstance);
			scmCmdToExecute.Parameters.Add("@iTransID", transID);
			return ExecuteCmd(scmCmdToExecute);
		}

		public int ChangeNameAddress(ChangeOfAddress value, int communicationChannelInstance, int communicationSourceInstance)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_Changeofaddressbycod]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add("@iCustomerInstance", value.CustomerInfo.CustomerInstance);
			scmCmdToExecute.Parameters.Add("@iCustomerOrderHeaderInstance",value.CustomerOrderHeaderInstance);
			scmCmdToExecute.Parameters.Add("@iTransID",value.TransID);
			scmCmdToExecute.Parameters.Add("@sFirstName",value.CustomerInfo.FirstName);
			scmCmdToExecute.Parameters.Add("@sLastName ",value.CustomerInfo.LastName);
			scmCmdToExecute.Parameters.Add("@sAddress1",value.CustomerInfo.CustomerAddress.Street1);
			scmCmdToExecute.Parameters.Add("@sAddress2",value.CustomerInfo.CustomerAddress.Street2);
			scmCmdToExecute.Parameters.Add("@sCity",value.CustomerInfo.CustomerAddress.City);
			scmCmdToExecute.Parameters.Add("@sStateCode",value.CustomerInfo.CustomerAddress.StateProvinceCode);
			scmCmdToExecute.Parameters.Add("@sZip",value.CustomerInfo.CustomerAddress.PostalCode);
			scmCmdToExecute.Parameters.Add("@sZipPlusFour","");
			scmCmdToExecute.Parameters.Add("@sOldAddress1",value.CustomerOldInfo.CustomerAddress.Street1);
			scmCmdToExecute.Parameters.Add("@sOldAddress2",value.CustomerOldInfo.CustomerAddress.Street2);
			scmCmdToExecute.Parameters.Add("@sOldCity",value.CustomerOldInfo.CustomerAddress.City);
			scmCmdToExecute.Parameters.Add("@sOldStateCode",value.CustomerOldInfo.CustomerAddress.StateProvinceCode);
			scmCmdToExecute.Parameters.Add("@sOldZip",value.CustomerOldInfo.CustomerAddress.PostalCode);
			scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserID", SqlDbType.NVarChar, 15, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed,value.UserID));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iProblemCode", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, value.ProblemCode));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iCommunicationChannelInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, communicationChannelInstance));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iCommunicationSourceInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, communicationSourceInstance));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iCustomerRemitHistoryInstance", SqlDbType.NVarChar, 15, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed,""));
			ExecuteCmd(scmCmdToExecute);
			return Convert.ToInt32(scmCmdToExecute.Parameters["@iCustomerRemitHistoryInstance"].Value);
		}
		public void ChangeNameAddressBeforeRemit(ChangeOfAddress value, int communicationChannelInstance, int communicationSourceInstance)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_ChangeOfAddressBeforeRemit]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add("@iCustomerOrderHeaderInstance",value.CustomerOrderHeaderInstance);
			scmCmdToExecute.Parameters.Add("@iTransID",value.TransID);
			scmCmdToExecute.Parameters.Add("@sFirstName",value.CustomerInfo.FirstName);
			scmCmdToExecute.Parameters.Add("@sLastName ",value.CustomerInfo.LastName);
			scmCmdToExecute.Parameters.Add("@sAddress1",value.CustomerInfo.CustomerAddress.Street1);
			scmCmdToExecute.Parameters.Add("@sAddress2",value.CustomerInfo.CustomerAddress.Street2);
			scmCmdToExecute.Parameters.Add("@sCity",value.CustomerInfo.CustomerAddress.City);
			scmCmdToExecute.Parameters.Add("@sStateCode",value.CustomerInfo.CustomerAddress.StateProvinceCode);
			scmCmdToExecute.Parameters.Add("@sZip",value.CustomerInfo.CustomerAddress.PostalCode);
			scmCmdToExecute.Parameters.Add("@sZipPlusFour","");
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iProblemCode", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, value.ProblemCode));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iCommunicationChannelInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, communicationChannelInstance));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iCommunicationSourceInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, communicationSourceInstance));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserID", SqlDbType.NVarChar, 15, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed,value.UserID));
			ExecuteCmd(scmCmdToExecute);
		}

		public int CreateOrderHeaderForProductReplacement(int orderID, string teacherFirstName, string teacherLastName, string studentFirstName, string studentLastName, int userID) 
		{
			SqlCommand scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_CreateOrderHeaderForProductReplacement]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iOrderID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, orderID));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@zTeacherFirstName", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, teacherFirstName));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@zTeacherLastName", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, teacherLastName));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@zStudentFirstName", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, studentFirstName));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@zStudentLastName", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, studentLastName));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iUserProfileID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, userID));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iCustomerOrderHeaderInstance", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));

			ExecuteCmd(scmCmdToExecute);

			return Convert.ToInt32(scmCmdToExecute.Parameters["@iCustomerOrderHeaderInstance"].Value);
		}

		public void SelectCustomerRefundAddress(DataTable Table,int COHI,int TransID)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_SelectCustomerAddressRefund]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add("@iCustomerOrderHeaderInstance",COHI);
			scmCmdToExecute.Parameters.Add("@iTransID",TransID);
			
			Select(scmCmdToExecute,Table);
		}
		public void SelectOrderTotals(DataTable Table,int OrderID)
		 {
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_SelectOrderTotals]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add("@iOrderID",OrderID);
			
			Select(scmCmdToExecute,Table);
		 }

		//Kanata
		public int CreateOrderHeaderForKanataOrder(int orderID, int billToInstance, int userID) 
		{
			SqlCommand scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_Kanata_OrderHeader_Create]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iOrderID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, orderID));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iUserProfileID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, userID));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iBillToInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, billToInstance));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iCustomerOrderHeaderInstance", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));

			ExecuteCmd(scmCmdToExecute);

			return Convert.ToInt32(scmCmdToExecute.Parameters["@iCustomerOrderHeaderInstance"].Value);
		}

		public void UpdateOrderHeaderForKanataOrder(int CustomerOrderHeaderInstance, string billTo ,string CustFname, string CustLname,  string email, string address1, string address2, string city, string province, string postal, string postal2, int userID) 
		{
			SqlCommand scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_Kanata_OrderHeader_Update]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iCustomerOrderHeaderInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CustomerOrderHeaderInstance));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@zBillTo", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, billTo));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@zBillToFirstname", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CustFname));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@zBillToLastName", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CustLname));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@zBillToEmail", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, email));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@zBillToAddress1", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, address1));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@zBillToAddress2", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, address2));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@zBillToCity", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, city));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@zBillToProvince", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, province));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@zBillToPostal", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, postal));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@zBillToPostal2", SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, postal2));

			ExecuteCmd(scmCmdToExecute);
		}		
	}
}
