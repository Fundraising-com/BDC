///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'Product'
// Generated by LLBLGen v1.2.1655.16789 Final
// on: Tuesday, July 13, 2004, 10:23:38 AM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;


namespace QSPFulfillment.DataAccess.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Product'.
	/// </summary>
	public class ProductContractData : QSPFulfillment.DataAccess.Data.DBTableOperation
	{
		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public ProductContractData()
		{
			// Nothing for now.
		}
		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			return null;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			return null;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			return null;
		}
		protected override string TableName
		{
			get
			{
				return "QSPCanadaProduct.dbo.Pricing_Details";
			}
		}

		public void SelectAllGST_HST(DataTable table)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_SelectAllPricingDetails_GST_HST";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(cmdToExecute,table);
		}

		public void SelectAllGST_HST(DataTable table, int productInstance, string productCode, string remitCode, string productName, int year, string season, int productStatus, int productType, string oracleCode, int numberOfIssues, string catalogCode, int publisherID, int fulfillmentHouseID, int programSectionID, bool includeBlank)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_SelectAllPricingDetails_GST_HST";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iProductInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productInstance));
			cmdToExecute.Parameters.Add(new SqlParameter("@zProductCode", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@zRemitCode", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, remitCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@zProductName", SqlDbType.VarChar, 55, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productName));
			cmdToExecute.Parameters.Add(new SqlParameter("@iYearSearch", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, year));
			cmdToExecute.Parameters.Add(new SqlParameter("@zSeasonSearch", SqlDbType.VarChar, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, season));
			cmdToExecute.Parameters.Add(new SqlParameter("@iProductStatus", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productStatus));
			cmdToExecute.Parameters.Add(new SqlParameter("@iProductType", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productType));
			cmdToExecute.Parameters.Add(new SqlParameter("@zOracleCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, oracleCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@iNumberOfIssues", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, numberOfIssues));
			cmdToExecute.Parameters.Add(new SqlParameter("@zCatalogCode", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, catalogCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@iPublisherID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, publisherID));
			cmdToExecute.Parameters.Add(new SqlParameter("@iFulfillmentHouseID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fulfillmentHouseID));
			cmdToExecute.Parameters.Add(new SqlParameter("@iProgramSectionID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, programSectionID));
			cmdToExecute.Parameters.Add(new SqlParameter("@bIncludeBlank", SqlDbType.Bit, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, includeBlank));
			Select(cmdToExecute,table);
		}

		public void SelectAllSingle(DataTable table)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_SelectAllPricingDetails_Single";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(cmdToExecute,table);
		}

		public void SelectAllSingle(DataTable table, int productInstance, string productCode, string remitCode, string productName, int year, string season, int productStatus, int productType, string oracleCode, int numberOfIssues, string catalogCode, int publisherID, int fulfillmentHouseID, int programSectionID, bool includeBlank)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_SelectAllPricingDetails_Single";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iProductInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productInstance));
			cmdToExecute.Parameters.Add(new SqlParameter("@zProductCode", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@zRemitCode", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, remitCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@zProductName", SqlDbType.VarChar, 55, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productName));
			cmdToExecute.Parameters.Add(new SqlParameter("@iYearSearch", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, year));
			cmdToExecute.Parameters.Add(new SqlParameter("@zSeasonSearch", SqlDbType.VarChar, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, season));
			cmdToExecute.Parameters.Add(new SqlParameter("@iProductStatus", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productStatus));
			cmdToExecute.Parameters.Add(new SqlParameter("@iProductType", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productType));
			cmdToExecute.Parameters.Add(new SqlParameter("@zOracleCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, oracleCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@iNumberOfIssues", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, numberOfIssues));
			cmdToExecute.Parameters.Add(new SqlParameter("@zCatalogCode", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, catalogCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@iPublisherID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, publisherID));
			cmdToExecute.Parameters.Add(new SqlParameter("@iFulfillmentHouseID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fulfillmentHouseID));
			cmdToExecute.Parameters.Add(new SqlParameter("@iProgramSectionID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, programSectionID));
			cmdToExecute.Parameters.Add(new SqlParameter("@bIncludeBlank", SqlDbType.Bit, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, includeBlank));
			Select(cmdToExecute,table);
		}

		public void SelectAllTypes(DataTable table)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_SelectAllPricingDetails_All";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(cmdToExecute,table);
		}

		public void SelectAllTypes(DataTable table, int productInstance, string productCode, string productName, int year, string season, int productStatus, string productTypeList, string catalogCode, int programSectionID, bool includeBlank)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_SelectAllPricingDetails_All";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iProductInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productInstance));
			cmdToExecute.Parameters.Add(new SqlParameter("@zProductCode", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@zProductName", SqlDbType.VarChar, 55, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productName));
			cmdToExecute.Parameters.Add(new SqlParameter("@iYearSearch", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, year));
			cmdToExecute.Parameters.Add(new SqlParameter("@zSeasonSearch", SqlDbType.VarChar, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, season));
			cmdToExecute.Parameters.Add(new SqlParameter("@iProductStatus", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productStatus));
			cmdToExecute.Parameters.Add(new SqlParameter("@zProductTypeList", SqlDbType.VarChar, 150, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productTypeList));
			cmdToExecute.Parameters.Add(new SqlParameter("@zCatalogCode", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, catalogCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@iProgramSectionID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, programSectionID));
			cmdToExecute.Parameters.Add(new SqlParameter("@bIncludeBlank", SqlDbType.Bit, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, includeBlank));
			Select(cmdToExecute,table);
		}

		public void SelectOneGST_HST(DataTable table, int magPriceInstanceGST, int magPriceInstanceHST) 
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "QSPCanadaProduct.dbo.[pr_SelectPricingDetails_GST_HST]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iMagPriceInstanceGST", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, magPriceInstanceGST));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iMagPriceInstanceHST", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, magPriceInstanceHST));
			Select(scmCmdToExecute,table);
		}

		public void SelectOneSingle(DataTable table, int magPriceInstance) 
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "QSPCanadaProduct.dbo.[pr_SelectPricingDetails_Single]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iMagPriceInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, magPriceInstance));
			Select(scmCmdToExecute,table);
		}

		public int InsertGST_HST(int productInstance, string productCode, int year, string season, int catalogSectionID, int status, DateTime effectiveDate, DateTime endDate, DateTime dateSubmitted, double remitRate, double conversionRate, double newsStandPrice, int listingLevelID, string listingCopyText, int adInCatalog, int adPageSizeID, int adPaymentCurrency, double adCost, string comment, int effortKeyRequired, string effortKey, int numberOfIssues, double basePrice, double QSPPriceGST, double QSPPriceHST, int internetApproval, string ABCCode, int QSPPremiumID, string oracleCode, int fsApplicabilityId, int fsDistributionLevelID, int fsExtraLimitRate, bool fsIsBrochure, string fsCatalogProductCode, string fsContentCatalogCode, int fsProgramID, int taxRegionID, string premiumIndicator, 
							string premiumCode, string premiumCopy, string fsProvinceCode, string userID,
							int contractFormReceived, string magazineCoverFilename, string catalogAdFilename,
							int catalogPageNumber, 
							int placementLevel, string contractComments,
							string printerComments, string qspcaListingCopyText,
                            double dBasePriceSansPostage, double dPostageRemitRate, double dPostageAmount, double dBaseRemitRate, string listAgentCode, string QSPAgencyCode)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_InsertPricingDetails_GST_HST";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iProductInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productInstance));
			cmdToExecute.Parameters.Add(new SqlParameter("@zProductCode", SqlDbType.VarChar, 30, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@iYear", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, year));
			cmdToExecute.Parameters.Add(new SqlParameter("@zSeason", SqlDbType.VarChar, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, season));
			cmdToExecute.Parameters.Add(new SqlParameter("@iCatalogSectionID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, catalogSectionID));
			cmdToExecute.Parameters.Add(new SqlParameter("@iStatus", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, status));
			cmdToExecute.Parameters.Add(new SqlParameter("@dEffectiveDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, effectiveDate));
			cmdToExecute.Parameters.Add(new SqlParameter("@dEndDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, endDate));
			cmdToExecute.Parameters.Add(new SqlParameter("@dDateSubmitted", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, dateSubmitted));
			cmdToExecute.Parameters.Add(new SqlParameter("@fRemitRate", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, remitRate));
			cmdToExecute.Parameters.Add(new SqlParameter("@fConversionRate", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, conversionRate));
			cmdToExecute.Parameters.Add(new SqlParameter("@fNewsStandPrice", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, newsStandPrice));
			cmdToExecute.Parameters.Add(new SqlParameter("@iListingLevelID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, listingLevelID));
			cmdToExecute.Parameters.Add(new SqlParameter("@zListingCopyText", SqlDbType.VarChar, 500, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, listingCopyText));
			cmdToExecute.Parameters.Add(new SqlParameter("@iAdInCatalog", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, adInCatalog));
			cmdToExecute.Parameters.Add(new SqlParameter("@iAdPageSizeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, adPageSizeID));
			cmdToExecute.Parameters.Add(new SqlParameter("@iAdPaymentCurrency", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, adPaymentCurrency));
			cmdToExecute.Parameters.Add(new SqlParameter("@fAdCost", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, adCost));
			cmdToExecute.Parameters.Add(new SqlParameter("@zComment", SqlDbType.VarChar, 200, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, comment));
			cmdToExecute.Parameters.Add(new SqlParameter("@iEffortKeyRequired", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, effortKeyRequired));
			cmdToExecute.Parameters.Add(new SqlParameter("@zEffortKey", SqlDbType.VarChar, 40, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, effortKey));
			cmdToExecute.Parameters.Add(new SqlParameter("@iNumberOfIssues", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, numberOfIssues));
			cmdToExecute.Parameters.Add(new SqlParameter("@fBasePrice", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, basePrice));
			cmdToExecute.Parameters.Add(new SqlParameter("@fQSPPriceGST", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, QSPPriceGST));
			cmdToExecute.Parameters.Add(new SqlParameter("@fQSPPriceHST", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, QSPPriceHST));
			cmdToExecute.Parameters.Add(new SqlParameter("@iInternetApproval", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, internetApproval));
			cmdToExecute.Parameters.Add(new SqlParameter("@zABCCode", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ABCCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@iQSPPremiumID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, QSPPremiumID));
			cmdToExecute.Parameters.Add(new SqlParameter("@zOracleCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, oracleCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@iFSApplicabilityId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fsApplicabilityId));
			cmdToExecute.Parameters.Add(new SqlParameter("@iFSDistributionLevelID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fsDistributionLevelID));
			cmdToExecute.Parameters.Add(new SqlParameter("@iFSExtraLimitRate", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fsExtraLimitRate));
			cmdToExecute.Parameters.Add(new SqlParameter("@bFSIsBrochure", SqlDbType.Bit, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fsIsBrochure));
			cmdToExecute.Parameters.Add(new SqlParameter("@zFSCatalogProductCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fsCatalogProductCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@zFSContentCatalogCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fsContentCatalogCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@iFSProgramID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fsProgramID));
			cmdToExecute.Parameters.Add(new SqlParameter("@iTaxRegionID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, taxRegionID));
			cmdToExecute.Parameters.Add(new SqlParameter("@zPremiumInd", SqlDbType.VarChar, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, premiumIndicator));
			cmdToExecute.Parameters.Add(new SqlParameter("@zPremiumCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, premiumCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@zPremiumCopy", SqlDbType.VarChar, 500, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, premiumCopy));
			cmdToExecute.Parameters.Add(new SqlParameter("@zFSProvinceCode", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fsProvinceCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@zUserID", SqlDbType.VarChar, 30, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, userID));
			cmdToExecute.Parameters.Add(new SqlParameter("@iContractFormReceived", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, contractFormReceived));
			cmdToExecute.Parameters.Add(new SqlParameter("@zMagazineCoverFilename", SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, magazineCoverFilename));
			cmdToExecute.Parameters.Add(new SqlParameter("@zCatalogAdFilename", SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, catalogAdFilename));
			cmdToExecute.Parameters.Add(new SqlParameter("@iCatalogPageNumber", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, catalogPageNumber));
			cmdToExecute.Parameters.Add(new SqlParameter("@iPlacementLevel", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, placementLevel));
			cmdToExecute.Parameters.Add(new SqlParameter("@zContractComments", SqlDbType.VarChar, 500, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, contractComments));
			cmdToExecute.Parameters.Add(new SqlParameter("@zPrinterComments", SqlDbType.VarChar, 500, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, printerComments));
			cmdToExecute.Parameters.Add(new SqlParameter("@zQspcaListingCopyText", SqlDbType.VarChar, 500, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, qspcaListingCopyText));
			cmdToExecute.Parameters.Add(new SqlParameter("@fBasePriceSansPostage", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, dBasePriceSansPostage));
			cmdToExecute.Parameters.Add(new SqlParameter("@fPostageRemitRate", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, dPostageRemitRate));
			cmdToExecute.Parameters.Add(new SqlParameter("@fPostageAmount", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, dPostageAmount));
			cmdToExecute.Parameters.Add(new SqlParameter("@fBaseRemitRate", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, dBaseRemitRate));
            cmdToExecute.Parameters.Add(new SqlParameter("@zListAgentCode", SqlDbType.VarChar, 5, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, listAgentCode));
            cmdToExecute.Parameters.Add(new SqlParameter("@zQSPAgencyCode", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, QSPAgencyCode));

			return ExecuteCmd(cmdToExecute);
		}

        public int InsertSingle(int productInstance, string productCode, int year, string season, int catalogSectionID, int status, DateTime effectiveDate, DateTime endDate, DateTime dateSubmitted, double remitRate, double conversionRate, double newsStandPrice, int listingLevelID, string listingCopyText, int adInCatalog, int adPageSizeID, int adPaymentCurrency, double adCost, string comment, int effortKeyRequired, string effortKey, int numberOfIssues, double basePrice, double QSPPrice, int internetApproval, string ABCCode, int QSPPremiumID, string oracleCode, int fsApplicabilityId, int fsDistributionLevelID, int fsExtraLimitRate, bool fsIsBrochure, string fsCatalogProductCode, string fsContentCatalogCode, int fsProgramID, int taxRegionID, string premiumIndicator, string premiumCode, string premiumCopy, string fsProvinceCode, string userID, string qspcaListingCopyText, double addlHandlingFee)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_InsertPricingDetails_Single";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iProductInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productInstance));
			cmdToExecute.Parameters.Add(new SqlParameter("@zProductCode", SqlDbType.VarChar, 30, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@iYear", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, year));
			cmdToExecute.Parameters.Add(new SqlParameter("@zSeason", SqlDbType.VarChar, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, season));
			cmdToExecute.Parameters.Add(new SqlParameter("@iCatalogSectionID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, catalogSectionID));
			cmdToExecute.Parameters.Add(new SqlParameter("@iStatus", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, status));
			cmdToExecute.Parameters.Add(new SqlParameter("@dEffectiveDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, effectiveDate));
			cmdToExecute.Parameters.Add(new SqlParameter("@dEndDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, endDate));
			cmdToExecute.Parameters.Add(new SqlParameter("@dDateSubmitted", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, dateSubmitted));
			cmdToExecute.Parameters.Add(new SqlParameter("@fRemitRate", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, remitRate));
			cmdToExecute.Parameters.Add(new SqlParameter("@fConversionRate", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, conversionRate));
			cmdToExecute.Parameters.Add(new SqlParameter("@fNewsStandPrice", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, newsStandPrice));
			cmdToExecute.Parameters.Add(new SqlParameter("@iListingLevelID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, listingLevelID));
			cmdToExecute.Parameters.Add(new SqlParameter("@zListingCopyText", SqlDbType.VarChar, 500, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, listingCopyText));
			cmdToExecute.Parameters.Add(new SqlParameter("@iAdInCatalog", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, adInCatalog));
			cmdToExecute.Parameters.Add(new SqlParameter("@iAdPageSizeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, adPageSizeID));
			cmdToExecute.Parameters.Add(new SqlParameter("@iAdPaymentCurrency", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, adPaymentCurrency));
			cmdToExecute.Parameters.Add(new SqlParameter("@fAdCost", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, adCost));
			cmdToExecute.Parameters.Add(new SqlParameter("@zComment", SqlDbType.VarChar, 200, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, comment));
			cmdToExecute.Parameters.Add(new SqlParameter("@iEffortKeyRequired", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, effortKeyRequired));
			cmdToExecute.Parameters.Add(new SqlParameter("@zEffortKey", SqlDbType.VarChar, 40, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, effortKey));
			cmdToExecute.Parameters.Add(new SqlParameter("@iNumberOfIssues", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, numberOfIssues));
			cmdToExecute.Parameters.Add(new SqlParameter("@fBasePrice", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, basePrice));
			cmdToExecute.Parameters.Add(new SqlParameter("@fQSPPrice", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, QSPPrice));
			cmdToExecute.Parameters.Add(new SqlParameter("@iInternetApproval", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, internetApproval));
			cmdToExecute.Parameters.Add(new SqlParameter("@zABCCode", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ABCCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@iQSPPremiumID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, QSPPremiumID));
			cmdToExecute.Parameters.Add(new SqlParameter("@zOracleCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, oracleCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@iFSApplicabilityId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fsApplicabilityId));
			cmdToExecute.Parameters.Add(new SqlParameter("@iFSDistributionLevelID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fsDistributionLevelID));
			cmdToExecute.Parameters.Add(new SqlParameter("@iFSExtraLimitRate", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fsExtraLimitRate));
			cmdToExecute.Parameters.Add(new SqlParameter("@bFSIsBrochure", SqlDbType.Bit, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fsIsBrochure));
			cmdToExecute.Parameters.Add(new SqlParameter("@zFSCatalogProductCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fsCatalogProductCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@zFSContentCatalogCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fsContentCatalogCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@iFSProgramID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fsProgramID));
			cmdToExecute.Parameters.Add(new SqlParameter("@iTaxRegionID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, taxRegionID));
			cmdToExecute.Parameters.Add(new SqlParameter("@zPremiumInd", SqlDbType.VarChar, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, premiumIndicator));
			cmdToExecute.Parameters.Add(new SqlParameter("@zPremiumCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, premiumCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@zPremiumCopy", SqlDbType.VarChar, 500, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, premiumCopy));
			cmdToExecute.Parameters.Add(new SqlParameter("@zFSProvinceCode", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fsProvinceCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@zUserID", SqlDbType.VarChar, 30, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, userID));
            cmdToExecute.Parameters.Add(new SqlParameter("@zQspcaListingCopyText", SqlDbType.VarChar, 500, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, qspcaListingCopyText));
            cmdToExecute.Parameters.Add(new SqlParameter("@fAddlHandlingFee", SqlDbType.Money, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, addlHandlingFee));
			return ExecuteCmd(cmdToExecute);
		}
		
		public int UpdateGST_HST(int magPriceInstanceGST, int magPriceInstanceHST, int status, DateTime effectiveDate, DateTime endDate, DateTime dateSubmitted, double remitRate, double conversionRate, double newsStandPrice, int listingLevelID, string listingCopyText, int adInCatalog, int adPageSizeID, int adPaymentCurrency, double adCost, string comment, int effortKeyRequired, string effortKey, int numberOfIssues, double basePrice, double QSPPriceGST, double QSPPriceHST, int internetApproval, string ABCCode, int QSPPremiumID, string oracleCode, int fsApplicabilityId, int fsDistributionLevelID, int fsExtraLimitRate, bool fsIsBrochure, string fsCatalogProductCode, string fsContentCatalogCode, int fsProgramID, int taxRegionID, string premiumIndicator, string premiumCode, string premiumCopy, string fsProvinceCode,
			int contractFormReceived, string magazineCoverFilename, string catalogAdFilename,
			int catalogPageNumber, 
			int placementLevel, string contractComments,
			string printerComments, string qspcaListingCopyText,
            double dBasePriceSansPostage, double dPostageRemitRate, double dPostageAmount, double dBaseRemitRate, string listAgentCode, string QSPAgencyCode)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_UpdatePricingDetails_GST_HST";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iMagPriceInstanceGST", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, magPriceInstanceGST));
			cmdToExecute.Parameters.Add(new SqlParameter("@iMagPriceInstanceHST", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, magPriceInstanceHST));
			cmdToExecute.Parameters.Add(new SqlParameter("@iStatus", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, status));
			cmdToExecute.Parameters.Add(new SqlParameter("@dEffectiveDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, effectiveDate));
			cmdToExecute.Parameters.Add(new SqlParameter("@dEndDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, endDate));
			cmdToExecute.Parameters.Add(new SqlParameter("@dDateSubmitted", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, dateSubmitted));
			cmdToExecute.Parameters.Add(new SqlParameter("@fRemitRate", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, remitRate));
			cmdToExecute.Parameters.Add(new SqlParameter("@fConversionRate", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, conversionRate));
			cmdToExecute.Parameters.Add(new SqlParameter("@fNewsStandPrice", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, newsStandPrice));
			cmdToExecute.Parameters.Add(new SqlParameter("@iListingLevelID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, listingLevelID));
			cmdToExecute.Parameters.Add(new SqlParameter("@zListingCopyText", SqlDbType.VarChar, 500, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, listingCopyText));
			cmdToExecute.Parameters.Add(new SqlParameter("@iAdInCatalog", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, adInCatalog));
			cmdToExecute.Parameters.Add(new SqlParameter("@iAdPageSizeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, adPageSizeID));
			cmdToExecute.Parameters.Add(new SqlParameter("@iAdPaymentCurrency", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, adPaymentCurrency));
			cmdToExecute.Parameters.Add(new SqlParameter("@fAdCost", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, adCost));
			cmdToExecute.Parameters.Add(new SqlParameter("@zComment", SqlDbType.VarChar, 200, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, comment));
			cmdToExecute.Parameters.Add(new SqlParameter("@iEffortKeyRequired", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, effortKeyRequired));
			cmdToExecute.Parameters.Add(new SqlParameter("@zEffortKey", SqlDbType.VarChar, 40, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, effortKey));
			cmdToExecute.Parameters.Add(new SqlParameter("@iNumberOfIssues", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, numberOfIssues));
			cmdToExecute.Parameters.Add(new SqlParameter("@fBasePrice", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, basePrice));
			cmdToExecute.Parameters.Add(new SqlParameter("@fQSPPriceGST", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, QSPPriceGST));
			cmdToExecute.Parameters.Add(new SqlParameter("@fQSPPriceHST", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, QSPPriceHST));
			cmdToExecute.Parameters.Add(new SqlParameter("@iInternetApproval", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, internetApproval));
			cmdToExecute.Parameters.Add(new SqlParameter("@zABCCode", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ABCCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@iQSPPremiumID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, QSPPremiumID));
			cmdToExecute.Parameters.Add(new SqlParameter("@zOracleCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, oracleCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@iFSApplicabilityId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fsApplicabilityId));
			cmdToExecute.Parameters.Add(new SqlParameter("@iFSDistributionLevelID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fsDistributionLevelID));
			cmdToExecute.Parameters.Add(new SqlParameter("@iFSExtraLimitRate", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fsExtraLimitRate));
			cmdToExecute.Parameters.Add(new SqlParameter("@bFSIsBrochure", SqlDbType.Bit, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fsIsBrochure));
			cmdToExecute.Parameters.Add(new SqlParameter("@zFSCatalogProductCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fsCatalogProductCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@zFSContentCatalogCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fsContentCatalogCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@iFSProgramID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fsProgramID));
			cmdToExecute.Parameters.Add(new SqlParameter("@iTaxRegionID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, taxRegionID));
			cmdToExecute.Parameters.Add(new SqlParameter("@zPremiumInd", SqlDbType.VarChar, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, premiumIndicator));
			cmdToExecute.Parameters.Add(new SqlParameter("@zPremiumCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, premiumCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@zPremiumCopy", SqlDbType.VarChar, 500, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, premiumCopy));
			cmdToExecute.Parameters.Add(new SqlParameter("@zFSProvinceCode", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fsProvinceCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@iContractFormReceived", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, contractFormReceived));
			cmdToExecute.Parameters.Add(new SqlParameter("@zMagazineCoverFilename", SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, magazineCoverFilename));
			cmdToExecute.Parameters.Add(new SqlParameter("@zCatalogAdFilename", SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, catalogAdFilename));
			cmdToExecute.Parameters.Add(new SqlParameter("@iCatalogPageNumber", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, catalogPageNumber));
			cmdToExecute.Parameters.Add(new SqlParameter("@iPlacementLevel", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, placementLevel));
			cmdToExecute.Parameters.Add(new SqlParameter("@zContractComments", SqlDbType.VarChar, 500, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, contractComments));
			cmdToExecute.Parameters.Add(new SqlParameter("@zPrinterComments", SqlDbType.VarChar, 500, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, printerComments));
			cmdToExecute.Parameters.Add(new SqlParameter("@zQspcaListingCopyText", SqlDbType.VarChar, 500, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, qspcaListingCopyText));
			cmdToExecute.Parameters.Add(new SqlParameter("@fBasePriceSansPostage", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, dBasePriceSansPostage));
			cmdToExecute.Parameters.Add(new SqlParameter("@fPostageRemitRate", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, dPostageRemitRate));
			cmdToExecute.Parameters.Add(new SqlParameter("@fPostageAmount", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, dPostageAmount));
			cmdToExecute.Parameters.Add(new SqlParameter("@fBaseRemitRate", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, dBaseRemitRate));
            cmdToExecute.Parameters.Add(new SqlParameter("@zListAgentCode", SqlDbType.VarChar, 5, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, listAgentCode));
            cmdToExecute.Parameters.Add(new SqlParameter("@zQSPAgencyCode", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, QSPAgencyCode));

			return ExecuteCmd(cmdToExecute);
		}

        public int UpdateSingle(int magPriceInstance, int status, DateTime effectiveDate, DateTime endDate, DateTime dateSubmitted, double remitRate, double conversionRate, double newsStandPrice, int listingLevelID, string listingCopyText, int adInCatalog, int adPageSizeID, int adPaymentCurrency, double adCost, string comment, int effortKeyRequired, string effortKey, int numberOfIssues, double basePrice, double QSPPrice, int internetApproval, string ABCCode, int QSPPremiumID, string oracleCode, int fsApplicabilityId, int fsDistributionLevelID, int fsExtraLimitRate, bool fsIsBrochure, string fsCatalogProductCode, string fsContentCatalogCode, int fsProgramID, int taxRegionID, string premiumIndicator, string premiumCode, string premiumCopy, string fsProvinceCode, string qspcaListingCopyText, double addlHandlingFee)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_UpdatePricingDetails_Single";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iMagPriceInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, magPriceInstance));
			cmdToExecute.Parameters.Add(new SqlParameter("@iStatus", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, status));
			cmdToExecute.Parameters.Add(new SqlParameter("@dEffectiveDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, effectiveDate));
			cmdToExecute.Parameters.Add(new SqlParameter("@dEndDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, endDate));
			cmdToExecute.Parameters.Add(new SqlParameter("@dDateSubmitted", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, dateSubmitted));
			cmdToExecute.Parameters.Add(new SqlParameter("@fRemitRate", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, remitRate));
			cmdToExecute.Parameters.Add(new SqlParameter("@fConversionRate", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, conversionRate));
			cmdToExecute.Parameters.Add(new SqlParameter("@fNewsStandPrice", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, newsStandPrice));
			cmdToExecute.Parameters.Add(new SqlParameter("@iListingLevelID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, listingLevelID));
			cmdToExecute.Parameters.Add(new SqlParameter("@zListingCopyText", SqlDbType.VarChar, 500, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, listingCopyText));
			cmdToExecute.Parameters.Add(new SqlParameter("@iAdInCatalog", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, adInCatalog));
			cmdToExecute.Parameters.Add(new SqlParameter("@iAdPageSizeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, adPageSizeID));
			cmdToExecute.Parameters.Add(new SqlParameter("@iAdPaymentCurrency", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, adPaymentCurrency));
			cmdToExecute.Parameters.Add(new SqlParameter("@fAdCost", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, adCost));
			cmdToExecute.Parameters.Add(new SqlParameter("@zComment", SqlDbType.VarChar, 200, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, comment));
			cmdToExecute.Parameters.Add(new SqlParameter("@iEffortKeyRequired", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, effortKeyRequired));
			cmdToExecute.Parameters.Add(new SqlParameter("@zEffortKey", SqlDbType.VarChar, 40, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, effortKey));
			cmdToExecute.Parameters.Add(new SqlParameter("@iNumberOfIssues", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, numberOfIssues));
			cmdToExecute.Parameters.Add(new SqlParameter("@fBasePrice", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, basePrice));
			cmdToExecute.Parameters.Add(new SqlParameter("@fQSPPrice", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, QSPPrice));
			cmdToExecute.Parameters.Add(new SqlParameter("@iInternetApproval", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, internetApproval));
			cmdToExecute.Parameters.Add(new SqlParameter("@zABCCode", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ABCCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@iQSPPremiumID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, QSPPremiumID));
			cmdToExecute.Parameters.Add(new SqlParameter("@zOracleCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, oracleCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@iFSApplicabilityId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fsApplicabilityId));
			cmdToExecute.Parameters.Add(new SqlParameter("@iFSDistributionLevelID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fsDistributionLevelID));
			cmdToExecute.Parameters.Add(new SqlParameter("@iFSExtraLimitRate", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fsExtraLimitRate));
			cmdToExecute.Parameters.Add(new SqlParameter("@bFSIsBrochure", SqlDbType.Bit, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fsIsBrochure));
			cmdToExecute.Parameters.Add(new SqlParameter("@zFSCatalogProductCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fsCatalogProductCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@zFSContentCatalogCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fsContentCatalogCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@iFSProgramID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fsProgramID));
			cmdToExecute.Parameters.Add(new SqlParameter("@iTaxRegionID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, taxRegionID));
			cmdToExecute.Parameters.Add(new SqlParameter("@zPremiumInd", SqlDbType.VarChar, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, premiumIndicator));
			cmdToExecute.Parameters.Add(new SqlParameter("@zPremiumCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, premiumCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@zPremiumCopy", SqlDbType.VarChar, 500, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, premiumCopy));
			cmdToExecute.Parameters.Add(new SqlParameter("@zFSProvinceCode", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fsProvinceCode));
            cmdToExecute.Parameters.Add(new SqlParameter("@zQspcaListingCopyText", SqlDbType.VarChar, 500, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, qspcaListingCopyText));
            cmdToExecute.Parameters.Add(new SqlParameter("@fAddlHandlingFee", SqlDbType.Money, 9, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, addlHandlingFee));

			return ExecuteCmd(cmdToExecute);
		}

		public int ImportGST_HST(int magPriceInstanceGST, int magPriceInstanceHST, int productInstance, int newCatalogSectionID, string importForSeason, string userID, string newProductCode)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_ImportPricingDetails_GST_HST";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iMagPriceInstanceGST", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, magPriceInstanceGST));
			cmdToExecute.Parameters.Add(new SqlParameter("@iMagPriceInstanceHST", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, magPriceInstanceHST));
			cmdToExecute.Parameters.Add(new SqlParameter("@iProductInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productInstance));
			cmdToExecute.Parameters.Add(new SqlParameter("@iNewCatalogSectionID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, newCatalogSectionID));
			cmdToExecute.Parameters.Add(new SqlParameter("@zImportForSeason", SqlDbType.VarChar, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, importForSeason));
			cmdToExecute.Parameters.Add(new SqlParameter("@zUserID", SqlDbType.VarChar, 30, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, userID));
			cmdToExecute.Parameters.Add(new SqlParameter("@zNewProductCode", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, newProductCode));
			return ExecuteCmd(cmdToExecute);
		}

		public int ImportSingle(int magPriceInstance, int productInstance, int newCatalogSectionID, string importForSeason, string userID, string newProductCode)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_ImportPricingDetails_Single";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iMagPriceInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, magPriceInstance));
			cmdToExecute.Parameters.Add(new SqlParameter("@iProductInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productInstance));
			cmdToExecute.Parameters.Add(new SqlParameter("@iNewCatalogSectionID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, newCatalogSectionID));
			cmdToExecute.Parameters.Add(new SqlParameter("@zImportForSeason", SqlDbType.VarChar, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, importForSeason));
			cmdToExecute.Parameters.Add(new SqlParameter("@zUserID", SqlDbType.VarChar, 30, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, userID));
			cmdToExecute.Parameters.Add(new SqlParameter("@zNewProductCode", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, newProductCode));
			return ExecuteCmd(cmdToExecute);
		}

		public int SelectCustomerOrderDetailCountGST_HST(int magPriceInstanceGST, int magPriceInstanceHST) 
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_SelectCustomerOrderDetailCount_GST_HST";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iMagPriceInstanceGST", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, magPriceInstanceGST));
			cmdToExecute.Parameters.Add(new SqlParameter("@iMagPriceInstanceHST", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, magPriceInstanceHST));
			return Convert.ToInt32(ExecuteScalar(cmdToExecute));
		}

		public int SelectCustomerOrderDetailCountSingle(int magPriceInstance) 
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_SelectCustomerOrderDetailCount_Single";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iMagPriceInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, magPriceInstance));
			return Convert.ToInt32(ExecuteScalar(cmdToExecute));
		}

		public int DeleteGST_HST(int magPriceInstanceGST, int magPriceInstanceHST)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_DeletePricingDetails_GST_HST";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iMagPriceInstanceGST", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, magPriceInstanceGST));
			cmdToExecute.Parameters.Add(new SqlParameter("@iMagPriceInstanceHST", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, magPriceInstanceHST));
			return ExecuteCmd(cmdToExecute);
		}

		public int DeleteSingle(int magPriceInstance)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_DeletePricingDetails_Single";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iMagPriceInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, magPriceInstance));
			return ExecuteCmd(cmdToExecute);
		}

		public int DeleteByCatalogSectionID(int catalogSectionID)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_DeletePricingDetailsByCatalogSectionID";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iCatalogSectionID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, catalogSectionID));
			return ExecuteCmd(cmdToExecute);
		}

		public int DeleteByProductInstance(int productInstance)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_DeletePricingDetailsByProductInstance";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iProductInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productInstance));
			return ExecuteCmd(cmdToExecute);
		}
	}
}
