///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'SwitchLetterBatch'
// Generated by LLBLGen v1.2.1649.27880 Final
// on: Wednesday, July 07, 2004, 4:30:48 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using tableRef =QSPFulfillment.DataAccess.Common.TableDef.SwitchLetterBatchTable;


namespace QSPFulfillment.DataAccess.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'SwitchLetterBatch'.
	/// </summary>
	public class SwitchLetterBatchData : QSPFulfillment.DataAccess.Data.DBTableOperation
	{
		#region Class Member Declarations
		internal const string PARAM_INSTANCE= "@iInstance";
		internal const string PARAM_PRODUCTCODE= "@sProductCode";
		internal const string PARAM_DATECREATED= "@daDateCreated";
		internal const string PARAM_USERID= "@sUserID";
		internal const string PARAM_SEARCH_CRITERIA = "@isearch_type";

		internal const string PARAM_SEARCH_TYPE = "@scriteria";

		//

		// DataSetCommand object

		//

		private SqlCommand insertCommand;

		private SqlCommand deleteCommand;

		private SqlCommand updateCommand;

		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public SwitchLetterBatchData()
		{
			// Nothing for now.
		}
		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand("dbo.[pr_SwitchLetterBatch_Insert]");
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
				SqlParameterCollection sqlParams = insertCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_INSTANCE,SqlDbType.Int));
				sqlParams[PARAM_INSTANCE].SourceColumn = tableRef.FLD_INSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_PRODUCTCODE,SqlDbType.VarChar));
				sqlParams[PARAM_PRODUCTCODE].SourceColumn = tableRef.FLD_PRODUCTCODE;



				sqlParams.Add(new SqlParameter(PARAM_DATECREATED,SqlDbType.DateTime));
				sqlParams[PARAM_DATECREATED].SourceColumn = tableRef.FLD_DATECREATED;

				sqlParams.Add(new SqlParameter(PARAM_USERID,SqlDbType.VarChar));
				sqlParams[PARAM_USERID].SourceColumn = tableRef.FLD_USERID;
			}
			return insertCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand("dbo.[pr_SwitchLetterBatch_Delete]");
				deleteCommand.CommandType = CommandType.StoredProcedure;
				SqlParameterCollection sqlParams = deleteCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_INSTANCE,SqlDbType.Int));
				sqlParams[PARAM_INSTANCE].SourceColumn = tableRef.FLD_INSTANCE;
			}
			return deleteCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand("dbo.[pr_SwitchLetterBatch_Update]");
				updateCommand.CommandType = CommandType.StoredProcedure;
				updateCommand.UpdatedRowSource = UpdateRowSource.OutputParameters;
				SqlParameterCollection sqlParams = updateCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_INSTANCE,SqlDbType.Int));
				sqlParams[PARAM_INSTANCE].SourceColumn = tableRef.FLD_INSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_PRODUCTCODE,SqlDbType.VarChar));
				sqlParams[PARAM_PRODUCTCODE].SourceColumn = tableRef.FLD_PRODUCTCODE;


				sqlParams.Add(new SqlParameter(PARAM_DATECREATED,SqlDbType.DateTime));
				sqlParams[PARAM_DATECREATED].SourceColumn = tableRef.FLD_DATECREATED;

				sqlParams.Add(new SqlParameter(PARAM_USERID,SqlDbType.VarChar));
				sqlParams[PARAM_USERID].SourceColumn = tableRef.FLD_USERID;
			}
			return updateCommand;
		}
		protected override string TableName
		{
			get
			{
				return tableRef.TBL_SWITCHLETTERBATCH;
			}
		}
		public void SelectSearch(DataTable Table,int SearchType,string SearchCriteria)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_SwitchLetterBatch_Search";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_TYPE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchType));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_CRITERIA, SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchCriteria));
			Select(cmdToExecute,Table);
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iInstance</LI>
		/// </UL>
		///		 <LI>iInstance</LI>
		///		 <LI>sProductCode</LI>
		///		 <LI>sProductName</LI>
		///		 <LI>daDateCreated</LI>
		///		 <LI>sUserID</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public  void SelectOne(DataTable Table, Int32 Instance)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_SwitchLetterBatch_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_INSTANCE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Instance));
			Select(scmCmdToExecute,Table);
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public  void SelectAll(DataTable Table)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_SwitchLetterBatch_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(scmCmdToExecute,Table);
		}
		public void SelectBySub(DataTable table, int customerOrderHeaderInstance, int transID)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_SwitchLetterBatch_SelectBySub]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iCustomerOrderHeaderInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, customerOrderHeaderInstance));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iTransID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, transID));
			Select(scmCmdToExecute,table);
		}
		public void SelectSwitchLetterReport(DataTable Table,int SwitchLetterBatchID)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_SwitchLetterSelectReport]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iSwitchLetterBatchID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SwitchLetterBatchID));
			Select(scmCmdToExecute,Table);
		}
		public int GenerateSwitchLetterBatch(string TitleCode,int RemitBatchID,int Reason,string UserID)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_GenerateSwitchLetterBatch]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@sTitleCode", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, TitleCode));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iRemitBatchID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, RemitBatchID));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iReasonID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Reason));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserID", SqlDbType.NVarChar, 15, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, UserID));
			
			return Convert.ToInt32(ExecuteScalar(scmCmdToExecute));
			
		}
		public int GenerateSwitchLetterBatch(string TitleCode,int Reason,DateTime From,DateTime To,string UserID)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_GenerateSwitchLetterBatch]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@sTitleCode", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, TitleCode));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iReasonID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Reason));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserID", SqlDbType.NVarChar, 15, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, UserID));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@dFrom", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, From));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@dTo", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, To));
		
			return Convert.ToInt32(ExecuteScalar(scmCmdToExecute));
			
		}
		public object GenerateSwitchLetterSub(int CustomerOrderHeaderInstance,int TransID,int Reason,string UserID)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_GenerateSwitchLetterSub]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iCustomerOrderHeaderInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CustomerOrderHeaderInstance));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iTransID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, TransID));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iReasonID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Reason));
            scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserID", SqlDbType.NVarChar, 15, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, UserID));
			return ExecuteScalar(scmCmdToExecute);
		}

		public object UpdateSwitchLetterStatus(int BatchID, int IsLocked, int IsPrinted)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_SwitchLetterBatchUpdateStatus]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@BatchID", SqlDbType.Int,4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, BatchID));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@IsLocked", SqlDbType.Int,4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, IsLocked));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@IsPrinted", SqlDbType.Int,4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, IsPrinted));
			return ExecuteScalar(scmCmdToExecute);
		}
		/*public int CancelSwitchLetterSub(int CustomerOrderHeaderInstance,int TransID)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_CancelSwitchLetterSub]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iCustomerOrderHeaderInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CustomerOrderHeaderInstance));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iTransID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, TransID));
			return  ExecuteCmd(scmCmdToExecute);
		}*/
		public int CancelSwitchLetterBatch(int SwitchLetterBatchID,string UserID)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_CancelSwitchLetterBatch]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iSwitchLetterBatchInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed,SwitchLetterBatchID));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserID", SqlDbType.NVarChar, 15, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, UserID));
			return ExecuteCmd(scmCmdToExecute);
		}
		internal int CountSubscriptionSwitchLetter(string TitleCode,int RemitBatchID)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_CountSubscriptionSwitchLetter]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@sTitleCode", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, TitleCode));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iRemitBatchID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, RemitBatchID));
			return (int) ExecuteScalar(scmCmdToExecute);
			
		}
		public void SelectSwitchLetterReportPreview(DataTable Table,string TitleCode,int RemitBatchID)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_SwitchLetterSelectReportPreview]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@sTitleCode", SqlDbType.NVarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, TitleCode));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iRemitBatchID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, RemitBatchID));
			Select(scmCmdToExecute,Table);
		}
		public void SelectSwitchLetterReportPreview(DataTable Table,string TitleCode,DateTime From,DateTime To)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_SwitchLetterSelectReportPreview]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@sTitleCode", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, TitleCode));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@dFrom", SqlDbType.DateTime,8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, From));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@dTo", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, To));
			Select(scmCmdToExecute,Table);
		}
		public void SelectSwitchLetterReportPreviewSub(DataTable Table,int CustomerOrderHeaderInstance,int TransID)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_SwitchLetterSelectReportPreviewSub]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iCustomerOrderHeaderInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CustomerOrderHeaderInstance));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iTransID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, TransID));
			Select(scmCmdToExecute,Table);
		}
		internal bool AlreadyExist(int CustomerOrderHeaderInstance,int TransID)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_SwitchLetterAlreadyExist]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iCustomerOrderHeaderInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CustomerOrderHeaderInstance));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iTransID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, TransID));
			return Convert.ToBoolean(ExecuteScalar(scmCmdToExecute));
		}
		internal bool AlreadyExist(int RemitBatchID,string TitleCode)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_SwitchLetterAlreadyExist]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iRemitBatchID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, RemitBatchID));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@sTitleCode", SqlDbType.NVarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, TitleCode));
			return Convert.ToBoolean(ExecuteScalar(scmCmdToExecute));
		}
		internal bool AlreadyExist(string TitleCode,DateTime From,DateTime To)
		{
		
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_SwitchLetterAlreadyExist]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@dFrom", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, From));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@dTo", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, To));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@sTitleCode", SqlDbType.NVarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, TitleCode));
			return Convert.ToBoolean(ExecuteScalar(scmCmdToExecute));
		
		}
		internal void CancelSwitchLetterSub(int CustomerOrderHeaderInstance,int TransID,string UserID)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_CancelSwitchLetterSub]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iCustomerOrderHeaderInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CustomerOrderHeaderInstance));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iTransID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, TransID));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserID", SqlDbType.NVarChar, 15, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, UserID));
			ExecuteCmd(scmCmdToExecute);
		}
	}
}
