///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'Product'
// Generated by LLBLGen v1.2.1655.16789 Final
// on: Tuesday, July 13, 2004, 10:23:38 AM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using tableRef =QSPFulfillment.DataAccess.Common.TableDef.ProductTable;


namespace QSPFulfillment.DataAccess.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Product'.
	/// </summary>
	public class ProductData : QSPFulfillment.DataAccess.Data.DBTableOperation
	{
		#region Class Member Declarations
		internal const string PARAM_PRODUCT_INSTANCE= "@iProduct_Instance";
		internal const string PARAM_PRODUCT_CODE= "@sProduct_Code";
		internal const string PARAM_PRODUCT_YEAR= "@iProduct_Year";
		internal const string PARAM_PRODUCT_SEASON= "@sProduct_Season";
		internal const string PARAM_ALPHA_CODE= "@sAlpha_Code";
		internal const string PARAM_PRODUCT_NAME= "@sProduct_Name";
		internal const string PARAM_PRODUCT_SORT_NAME= "@sProduct_Sort_Name";
		internal const string PARAM_PUB_NBR= "@iPub_Nbr";
		internal const string PARAM_AGES= "@sAges";
		internal const string PARAM_INTERNET= "@sInternet";
		internal const string PARAM_ISSUE_RCVD_DT= "@daIssue_Rcvd_Dt";
		internal const string PARAM_COVERRECEIVED= "@sCoverReceived";
		internal const string PARAM_HIGHLIGHTCOVER= "@iHighlightCover";
		internal const string PARAM_FEATURING= "@iFeaturing";
		internal const string PARAM_STATUS= "@sStatus";
		internal const string PARAM_COMMENT= "@sComment";
		internal const string PARAM_COMMENTDATE= "@daCommentDate";
		internal const string PARAM_CATEGORY_CODE= "@iCategory_Code";
		internal const string PARAM_FULFILL_HOUSE_NBR= "@sFulfill_House_Nbr";
		internal const string PARAM_MAIL_DT= "@sMail_Dt";
		internal const string PARAM_AUTH_FORM_RTRN_DT= "@daAuth_Form_Rtrn_Dt";
		internal const string PARAM_ISSUEDATEUSED= "@sIssueDateUsed";
		internal const string PARAM_LOGGED_BY= "@sLogged_By";
		internal const string PARAM_LOG_DT= "@daLog_Dt";
		internal const string PARAM_LANG= "@sLang";
		internal const string PARAM_PRODUCTLINE= "@iProductLine";
		internal const string PARAM_DAYSLEADTIME= "@iDaysLeadTime";
		internal const string PARAM_VENDORNUMBER= "@sVendorNumber";
		internal const string PARAM_VENDORSITENAME= "@sVendorSiteName";
		internal const string PARAM_PAYGROUPLOOKUPCODE= "@sPayGroupLookUpCode";
		internal const string PARAM_TERMSNAME= "@sTermsName";
		internal const string PARAM_CURRENCY= "@iCurrency";
		internal const string PARAM_COUNTRYCODE= "@sCountryCode";
		internal const string PARAM_TYPE= "@iType";
		internal const string PARAM_UNITOFMEASURE= "@sUnitOfMeasure";
		internal const string PARAM_UOMCONVFACTOR= "@iUOMConvFactor";
		internal const string PARAM_UNITWEIGHT= "@dcUnitWeight";
		internal const string PARAM_UNITCOST= "@dcUnitCost";
		internal const string PARAM_ORACLECODE= "@sOracleCode";
		internal const string PARAM_PRIZE_LEVEL= "@sPrize_Level";
		internal const string PARAM_PRIZE_LEVEL_QTY_REQUIRED= "@iPrize_Level_Qty_Required";
		internal const string PARAM_SEARCH_CRITERIA = "@isearch_type";

		internal const string PARAM_SEARCH_TYPE = "@scriteria";

		//

		// DataSetCommand object

		//

		private SqlCommand insertCommand;

		private SqlCommand deleteCommand;

		private SqlCommand updateCommand;

		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public ProductData()
		{
			// Nothing for now.
		}
		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand("dbo.[pr_Product_Insert]");
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
				SqlParameterCollection sqlParams = insertCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_PRODUCT_INSTANCE,SqlDbType.Int));
				sqlParams[PARAM_PRODUCT_INSTANCE].Direction = ParameterDirection.Output;
				sqlParams[PARAM_PRODUCT_INSTANCE].SourceColumn = tableRef.FLD_PRODUCT_INSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_PRODUCT_CODE,SqlDbType.VarChar));
				sqlParams[PARAM_PRODUCT_CODE].SourceColumn = tableRef.FLD_PRODUCT_CODE;

				sqlParams.Add(new SqlParameter(PARAM_PRODUCT_YEAR,SqlDbType.Int));
				sqlParams[PARAM_PRODUCT_YEAR].SourceColumn = tableRef.FLD_PRODUCT_YEAR;

				sqlParams.Add(new SqlParameter(PARAM_PRODUCT_SEASON,SqlDbType.Char));
				sqlParams[PARAM_PRODUCT_SEASON].SourceColumn = tableRef.FLD_PRODUCT_SEASON;

				sqlParams.Add(new SqlParameter(PARAM_ALPHA_CODE,SqlDbType.VarChar));
				sqlParams[PARAM_ALPHA_CODE].SourceColumn = tableRef.FLD_ALPHA_CODE;

				sqlParams.Add(new SqlParameter(PARAM_PRODUCT_NAME,SqlDbType.VarChar));
				sqlParams[PARAM_PRODUCT_NAME].SourceColumn = tableRef.FLD_PRODUCT_NAME;

				sqlParams.Add(new SqlParameter(PARAM_PRODUCT_SORT_NAME,SqlDbType.VarChar));
				sqlParams[PARAM_PRODUCT_SORT_NAME].SourceColumn = tableRef.FLD_PRODUCT_SORT_NAME;

				sqlParams.Add(new SqlParameter(PARAM_PUB_NBR,SqlDbType.Int));
				sqlParams[PARAM_PUB_NBR].SourceColumn = tableRef.FLD_PUB_NBR;

				sqlParams.Add(new SqlParameter(PARAM_AGES,SqlDbType.VarChar));
				sqlParams[PARAM_AGES].SourceColumn = tableRef.FLD_AGES;

				sqlParams.Add(new SqlParameter(PARAM_INTERNET,SqlDbType.VarChar));
				sqlParams[PARAM_INTERNET].SourceColumn = tableRef.FLD_INTERNET;

				sqlParams.Add(new SqlParameter(PARAM_ISSUE_RCVD_DT,SqlDbType.SmallDateTime));
				sqlParams[PARAM_ISSUE_RCVD_DT].SourceColumn = tableRef.FLD_ISSUE_RCVD_DT;

				sqlParams.Add(new SqlParameter(PARAM_COVERRECEIVED,SqlDbType.VarChar));
				sqlParams[PARAM_COVERRECEIVED].SourceColumn = tableRef.FLD_COVERRECEIVED;

				sqlParams.Add(new SqlParameter(PARAM_HIGHLIGHTCOVER,SqlDbType.Int));
				sqlParams[PARAM_HIGHLIGHTCOVER].SourceColumn = tableRef.FLD_HIGHLIGHTCOVER;

				sqlParams.Add(new SqlParameter(PARAM_FEATURING,SqlDbType.Int));
				sqlParams[PARAM_FEATURING].SourceColumn = tableRef.FLD_FEATURING;

				sqlParams.Add(new SqlParameter(PARAM_STATUS,SqlDbType.VarChar));
				sqlParams[PARAM_STATUS].SourceColumn = tableRef.FLD_STATUS;

				sqlParams.Add(new SqlParameter(PARAM_COMMENT,SqlDbType.VarChar));
				sqlParams[PARAM_COMMENT].SourceColumn = tableRef.FLD_COMMENT;

				sqlParams.Add(new SqlParameter(PARAM_COMMENTDATE,SqlDbType.DateTime));
				sqlParams[PARAM_COMMENTDATE].SourceColumn = tableRef.FLD_COMMENTDATE;

				sqlParams.Add(new SqlParameter(PARAM_CATEGORY_CODE,SqlDbType.Int));
				sqlParams[PARAM_CATEGORY_CODE].SourceColumn = tableRef.FLD_CATEGORY_CODE;

				sqlParams.Add(new SqlParameter(PARAM_FULFILL_HOUSE_NBR,SqlDbType.VarChar));
				sqlParams[PARAM_FULFILL_HOUSE_NBR].SourceColumn = tableRef.FLD_FULFILL_HOUSE_NBR;

				sqlParams.Add(new SqlParameter(PARAM_MAIL_DT,SqlDbType.VarChar));
				sqlParams[PARAM_MAIL_DT].SourceColumn = tableRef.FLD_MAIL_DT;

				sqlParams.Add(new SqlParameter(PARAM_AUTH_FORM_RTRN_DT,SqlDbType.SmallDateTime));
				sqlParams[PARAM_AUTH_FORM_RTRN_DT].SourceColumn = tableRef.FLD_AUTH_FORM_RTRN_DT;

				sqlParams.Add(new SqlParameter(PARAM_ISSUEDATEUSED,SqlDbType.VarChar));
				sqlParams[PARAM_ISSUEDATEUSED].SourceColumn = tableRef.FLD_ISSUEDATEUSED;

				sqlParams.Add(new SqlParameter(PARAM_LOGGED_BY,SqlDbType.VarChar));
				sqlParams[PARAM_LOGGED_BY].SourceColumn = tableRef.FLD_LOGGED_BY;

				sqlParams.Add(new SqlParameter(PARAM_LOG_DT,SqlDbType.SmallDateTime));
				sqlParams[PARAM_LOG_DT].SourceColumn = tableRef.FLD_LOG_DT;

				sqlParams.Add(new SqlParameter(PARAM_LANG,SqlDbType.VarChar));
				sqlParams[PARAM_LANG].SourceColumn = tableRef.FLD_LANG;

				sqlParams.Add(new SqlParameter(PARAM_PRODUCTLINE,SqlDbType.Int));
				sqlParams[PARAM_PRODUCTLINE].SourceColumn = tableRef.FLD_PRODUCTLINE;

				sqlParams.Add(new SqlParameter(PARAM_DAYSLEADTIME,SqlDbType.Int));
				sqlParams[PARAM_DAYSLEADTIME].SourceColumn = tableRef.FLD_DAYSLEADTIME;

				sqlParams.Add(new SqlParameter(PARAM_VENDORNUMBER,SqlDbType.VarChar));
				sqlParams[PARAM_VENDORNUMBER].SourceColumn = tableRef.FLD_VENDORNUMBER;

				sqlParams.Add(new SqlParameter(PARAM_VENDORSITENAME,SqlDbType.VarChar));
				sqlParams[PARAM_VENDORSITENAME].SourceColumn = tableRef.FLD_VENDORSITENAME;

				sqlParams.Add(new SqlParameter(PARAM_PAYGROUPLOOKUPCODE,SqlDbType.VarChar));
				sqlParams[PARAM_PAYGROUPLOOKUPCODE].SourceColumn = tableRef.FLD_PAYGROUPLOOKUPCODE;

				sqlParams.Add(new SqlParameter(PARAM_TERMSNAME,SqlDbType.VarChar));
				sqlParams[PARAM_TERMSNAME].SourceColumn = tableRef.FLD_TERMSNAME;

				sqlParams.Add(new SqlParameter(PARAM_CURRENCY,SqlDbType.Int));
				sqlParams[PARAM_CURRENCY].SourceColumn = tableRef.FLD_CURRENCY;

				sqlParams.Add(new SqlParameter(PARAM_COUNTRYCODE,SqlDbType.VarChar));
				sqlParams[PARAM_COUNTRYCODE].SourceColumn = tableRef.FLD_COUNTRYCODE;

				sqlParams.Add(new SqlParameter(PARAM_TYPE,SqlDbType.Int));
				sqlParams[PARAM_TYPE].SourceColumn = tableRef.FLD_TYPE;

				sqlParams.Add(new SqlParameter(PARAM_UNITOFMEASURE,SqlDbType.VarChar));
				sqlParams[PARAM_UNITOFMEASURE].SourceColumn = tableRef.FLD_UNITOFMEASURE;

				sqlParams.Add(new SqlParameter(PARAM_UOMCONVFACTOR,SqlDbType.Int));
				sqlParams[PARAM_UOMCONVFACTOR].SourceColumn = tableRef.FLD_UOMCONVFACTOR;

				sqlParams.Add(new SqlParameter(PARAM_UNITWEIGHT,SqlDbType.Decimal));
				sqlParams[PARAM_UNITWEIGHT].SourceColumn = tableRef.FLD_UNITWEIGHT;

				sqlParams.Add(new SqlParameter(PARAM_UNITCOST,SqlDbType.Decimal));
				sqlParams[PARAM_UNITCOST].SourceColumn = tableRef.FLD_UNITCOST;

				sqlParams.Add(new SqlParameter(PARAM_ORACLECODE,SqlDbType.VarChar));
				sqlParams[PARAM_ORACLECODE].SourceColumn = tableRef.FLD_ORACLECODE;

				sqlParams.Add(new SqlParameter(PARAM_PRIZE_LEVEL,SqlDbType.VarChar));
				sqlParams[PARAM_PRIZE_LEVEL].SourceColumn = tableRef.FLD_PRIZE_LEVEL;

				sqlParams.Add(new SqlParameter(PARAM_PRIZE_LEVEL_QTY_REQUIRED,SqlDbType.Int));
				sqlParams[PARAM_PRIZE_LEVEL_QTY_REQUIRED].SourceColumn = tableRef.FLD_PRIZE_LEVEL_QTY_REQUIRED;
			}
			return insertCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand("dbo.[pr_Product_Delete]");
				deleteCommand.CommandType = CommandType.StoredProcedure;
				SqlParameterCollection sqlParams = deleteCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_PRODUCT_INSTANCE,SqlDbType.Int));
				sqlParams[PARAM_PRODUCT_INSTANCE].SourceColumn = tableRef.FLD_PRODUCT_INSTANCE;
			}
			return deleteCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand("dbo.[pr_Product_Update]");
				updateCommand.CommandType = CommandType.StoredProcedure;
				updateCommand.UpdatedRowSource = UpdateRowSource.OutputParameters;
				SqlParameterCollection sqlParams = updateCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_PRODUCT_INSTANCE,SqlDbType.Int));
				sqlParams[PARAM_PRODUCT_INSTANCE].SourceColumn = tableRef.FLD_PRODUCT_INSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_PRODUCT_CODE,SqlDbType.VarChar));
				sqlParams[PARAM_PRODUCT_CODE].SourceColumn = tableRef.FLD_PRODUCT_CODE;

				sqlParams.Add(new SqlParameter(PARAM_PRODUCT_YEAR,SqlDbType.Int));
				sqlParams[PARAM_PRODUCT_YEAR].SourceColumn = tableRef.FLD_PRODUCT_YEAR;

				sqlParams.Add(new SqlParameter(PARAM_PRODUCT_SEASON,SqlDbType.Char));
				sqlParams[PARAM_PRODUCT_SEASON].SourceColumn = tableRef.FLD_PRODUCT_SEASON;

				sqlParams.Add(new SqlParameter(PARAM_ALPHA_CODE,SqlDbType.VarChar));
				sqlParams[PARAM_ALPHA_CODE].SourceColumn = tableRef.FLD_ALPHA_CODE;

				sqlParams.Add(new SqlParameter(PARAM_PRODUCT_NAME,SqlDbType.VarChar));
				sqlParams[PARAM_PRODUCT_NAME].SourceColumn = tableRef.FLD_PRODUCT_NAME;

				sqlParams.Add(new SqlParameter(PARAM_PRODUCT_SORT_NAME,SqlDbType.VarChar));
				sqlParams[PARAM_PRODUCT_SORT_NAME].SourceColumn = tableRef.FLD_PRODUCT_SORT_NAME;

				sqlParams.Add(new SqlParameter(PARAM_PUB_NBR,SqlDbType.Int));
				sqlParams[PARAM_PUB_NBR].SourceColumn = tableRef.FLD_PUB_NBR;

				sqlParams.Add(new SqlParameter(PARAM_AGES,SqlDbType.VarChar));
				sqlParams[PARAM_AGES].SourceColumn = tableRef.FLD_AGES;

				sqlParams.Add(new SqlParameter(PARAM_INTERNET,SqlDbType.VarChar));
				sqlParams[PARAM_INTERNET].SourceColumn = tableRef.FLD_INTERNET;

				sqlParams.Add(new SqlParameter(PARAM_ISSUE_RCVD_DT,SqlDbType.SmallDateTime));
				sqlParams[PARAM_ISSUE_RCVD_DT].SourceColumn = tableRef.FLD_ISSUE_RCVD_DT;

				sqlParams.Add(new SqlParameter(PARAM_COVERRECEIVED,SqlDbType.VarChar));
				sqlParams[PARAM_COVERRECEIVED].SourceColumn = tableRef.FLD_COVERRECEIVED;

				sqlParams.Add(new SqlParameter(PARAM_HIGHLIGHTCOVER,SqlDbType.Int));
				sqlParams[PARAM_HIGHLIGHTCOVER].SourceColumn = tableRef.FLD_HIGHLIGHTCOVER;

				sqlParams.Add(new SqlParameter(PARAM_FEATURING,SqlDbType.Int));
				sqlParams[PARAM_FEATURING].SourceColumn = tableRef.FLD_FEATURING;

				sqlParams.Add(new SqlParameter(PARAM_STATUS,SqlDbType.VarChar));
				sqlParams[PARAM_STATUS].SourceColumn = tableRef.FLD_STATUS;

				sqlParams.Add(new SqlParameter(PARAM_COMMENT,SqlDbType.VarChar));
				sqlParams[PARAM_COMMENT].SourceColumn = tableRef.FLD_COMMENT;

				sqlParams.Add(new SqlParameter(PARAM_COMMENTDATE,SqlDbType.DateTime));
				sqlParams[PARAM_COMMENTDATE].SourceColumn = tableRef.FLD_COMMENTDATE;

				sqlParams.Add(new SqlParameter(PARAM_CATEGORY_CODE,SqlDbType.Int));
				sqlParams[PARAM_CATEGORY_CODE].SourceColumn = tableRef.FLD_CATEGORY_CODE;

				sqlParams.Add(new SqlParameter(PARAM_FULFILL_HOUSE_NBR,SqlDbType.VarChar));
				sqlParams[PARAM_FULFILL_HOUSE_NBR].SourceColumn = tableRef.FLD_FULFILL_HOUSE_NBR;

				sqlParams.Add(new SqlParameter(PARAM_MAIL_DT,SqlDbType.VarChar));
				sqlParams[PARAM_MAIL_DT].SourceColumn = tableRef.FLD_MAIL_DT;

				sqlParams.Add(new SqlParameter(PARAM_AUTH_FORM_RTRN_DT,SqlDbType.SmallDateTime));
				sqlParams[PARAM_AUTH_FORM_RTRN_DT].SourceColumn = tableRef.FLD_AUTH_FORM_RTRN_DT;

				sqlParams.Add(new SqlParameter(PARAM_ISSUEDATEUSED,SqlDbType.VarChar));
				sqlParams[PARAM_ISSUEDATEUSED].SourceColumn = tableRef.FLD_ISSUEDATEUSED;

				sqlParams.Add(new SqlParameter(PARAM_LOGGED_BY,SqlDbType.VarChar));
				sqlParams[PARAM_LOGGED_BY].SourceColumn = tableRef.FLD_LOGGED_BY;

				sqlParams.Add(new SqlParameter(PARAM_LOG_DT,SqlDbType.SmallDateTime));
				sqlParams[PARAM_LOG_DT].SourceColumn = tableRef.FLD_LOG_DT;

				sqlParams.Add(new SqlParameter(PARAM_LANG,SqlDbType.VarChar));
				sqlParams[PARAM_LANG].SourceColumn = tableRef.FLD_LANG;

				sqlParams.Add(new SqlParameter(PARAM_PRODUCTLINE,SqlDbType.Int));
				sqlParams[PARAM_PRODUCTLINE].SourceColumn = tableRef.FLD_PRODUCTLINE;

				sqlParams.Add(new SqlParameter(PARAM_DAYSLEADTIME,SqlDbType.Int));
				sqlParams[PARAM_DAYSLEADTIME].SourceColumn = tableRef.FLD_DAYSLEADTIME;

				sqlParams.Add(new SqlParameter(PARAM_VENDORNUMBER,SqlDbType.VarChar));
				sqlParams[PARAM_VENDORNUMBER].SourceColumn = tableRef.FLD_VENDORNUMBER;

				sqlParams.Add(new SqlParameter(PARAM_VENDORSITENAME,SqlDbType.VarChar));
				sqlParams[PARAM_VENDORSITENAME].SourceColumn = tableRef.FLD_VENDORSITENAME;

				sqlParams.Add(new SqlParameter(PARAM_PAYGROUPLOOKUPCODE,SqlDbType.VarChar));
				sqlParams[PARAM_PAYGROUPLOOKUPCODE].SourceColumn = tableRef.FLD_PAYGROUPLOOKUPCODE;

				sqlParams.Add(new SqlParameter(PARAM_TERMSNAME,SqlDbType.VarChar));
				sqlParams[PARAM_TERMSNAME].SourceColumn = tableRef.FLD_TERMSNAME;

				sqlParams.Add(new SqlParameter(PARAM_CURRENCY,SqlDbType.Int));
				sqlParams[PARAM_CURRENCY].SourceColumn = tableRef.FLD_CURRENCY;

				sqlParams.Add(new SqlParameter(PARAM_COUNTRYCODE,SqlDbType.VarChar));
				sqlParams[PARAM_COUNTRYCODE].SourceColumn = tableRef.FLD_COUNTRYCODE;

				sqlParams.Add(new SqlParameter(PARAM_TYPE,SqlDbType.Int));
				sqlParams[PARAM_TYPE].SourceColumn = tableRef.FLD_TYPE;

				sqlParams.Add(new SqlParameter(PARAM_UNITOFMEASURE,SqlDbType.VarChar));
				sqlParams[PARAM_UNITOFMEASURE].SourceColumn = tableRef.FLD_UNITOFMEASURE;

				sqlParams.Add(new SqlParameter(PARAM_UOMCONVFACTOR,SqlDbType.Int));
				sqlParams[PARAM_UOMCONVFACTOR].SourceColumn = tableRef.FLD_UOMCONVFACTOR;

				sqlParams.Add(new SqlParameter(PARAM_UNITWEIGHT,SqlDbType.Decimal));
				sqlParams[PARAM_UNITWEIGHT].SourceColumn = tableRef.FLD_UNITWEIGHT;

				sqlParams.Add(new SqlParameter(PARAM_UNITCOST,SqlDbType.Decimal));
				sqlParams[PARAM_UNITCOST].SourceColumn = tableRef.FLD_UNITCOST;

				sqlParams.Add(new SqlParameter(PARAM_ORACLECODE,SqlDbType.VarChar));
				sqlParams[PARAM_ORACLECODE].SourceColumn = tableRef.FLD_ORACLECODE;

				sqlParams.Add(new SqlParameter(PARAM_PRIZE_LEVEL,SqlDbType.VarChar));
				sqlParams[PARAM_PRIZE_LEVEL].SourceColumn = tableRef.FLD_PRIZE_LEVEL;

				sqlParams.Add(new SqlParameter(PARAM_PRIZE_LEVEL_QTY_REQUIRED,SqlDbType.Int));
				sqlParams[PARAM_PRIZE_LEVEL_QTY_REQUIRED].SourceColumn = tableRef.FLD_PRIZE_LEVEL_QTY_REQUIRED;
			}
			return updateCommand;
		}
		protected override string TableName
		{
			get
			{
				return tableRef.TBL_PRODUCT;
			}
		}
		public void SelectSearch(DataTable Table,int SearchType,string SearchCriteria)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_Product_Search";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_TYPE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchType));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_CRITERIA, SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchCriteria));
			Select(cmdToExecute,Table);
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iProduct_Instance</LI>
		/// </UL>
		///		 <LI>iProduct_Instance</LI>
		///		 <LI>sProduct_Code</LI>
		///		 <LI>iProduct_Year</LI>
		///		 <LI>sProduct_Season</LI>
		///		 <LI>sAlpha_Code</LI>
		///		 <LI>sProduct_Name</LI>
		///		 <LI>sProduct_Sort_Name</LI>
		///		 <LI>iPub_Nbr</LI>
		///		 <LI>sAges</LI>
		///		 <LI>sInternet</LI>
		///		 <LI>daIssue_Rcvd_Dt</LI>
		///		 <LI>sCoverReceived</LI>
		///		 <LI>iHighlightCover</LI>
		///		 <LI>iFeaturing</LI>
		///		 <LI>sStatus</LI>
		///		 <LI>sComment</LI>
		///		 <LI>daCommentDate</LI>
		///		 <LI>iCategory_Code</LI>
		///		 <LI>sFulfill_House_Nbr</LI>
		///		 <LI>sMail_Dt</LI>
		///		 <LI>daAuth_Form_Rtrn_Dt</LI>
		///		 <LI>sIssueDateUsed</LI>
		///		 <LI>sLogged_By</LI>
		///		 <LI>daLog_Dt</LI>
		///		 <LI>sLang</LI>
		///		 <LI>iProductLine</LI>
		///		 <LI>iDaysLeadTime</LI>
		///		 <LI>sVendorNumber</LI>
		///		 <LI>sVendorSiteName</LI>
		///		 <LI>sPayGroupLookUpCode</LI>
		///		 <LI>sTermsName</LI>
		///		 <LI>iCurrency</LI>
		///		 <LI>sCountryCode</LI>
		///		 <LI>iType</LI>
		///		 <LI>sUnitOfMeasure</LI>
		///		 <LI>iUOMConvFactor</LI>
		///		 <LI>dcUnitWeight</LI>
		///		 <LI>dcUnitCost</LI>
		///		 <LI>sOracleCode</LI>
		///		 <LI>sPrize_Level</LI>
		///		 <LI>iPrize_Level_Qty_Required</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public  void SelectOne(DataTable Table, Int32 Product_Instance)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_Product_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_PRODUCT_INSTANCE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Product_Instance));
			Select(scmCmdToExecute,Table);
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public  void SelectAll(DataTable Table)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_Product_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(scmCmdToExecute,Table);
		}

		public void SelectAllProducts(DataTable table, string productCode, string remitCode, string productName, int year, string season, int productStatus, int productType, int publisherID, int fulfillmentHouseID)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_SelectAllProducts";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@zProductCode", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@zRemitCode", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, remitCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@zProductName", SqlDbType.VarChar, 55, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productName));
			cmdToExecute.Parameters.Add(new SqlParameter("@iYear", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, year));
			cmdToExecute.Parameters.Add(new SqlParameter("@zSeason", SqlDbType.VarChar, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, season));
			cmdToExecute.Parameters.Add(new SqlParameter("@iProductStatus", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productStatus));
			cmdToExecute.Parameters.Add(new SqlParameter("@iProductType", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productType));
			cmdToExecute.Parameters.Add(new SqlParameter("@iPublisherID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, publisherID));
			cmdToExecute.Parameters.Add(new SqlParameter("@iFulfillmentHouseID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fulfillmentHouseID));
			Select(cmdToExecute, table);
		}

		public void SelectByProductCode(DataTable Table,string Product_Code)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_Product_SelectByProductCode]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_PRODUCT_CODE, SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed,Product_Code));
			Select(scmCmdToExecute,Table);
		}
		public void SelectByProductCode(DataTable Table,string Product_Code, int Year, string Season)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_Product_SelectByProductCode]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_PRODUCT_CODE, SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed,Product_Code));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iProduct_Year", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Year));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@sProduct_Season", SqlDbType.VarChar, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Season));
			Select(scmCmdToExecute,Table);
		}

		public void SelectByProductInstance(DataTable table, int productInstance)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_Product_SelectByProductInstance]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iProductInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productInstance));
			Select(scmCmdToExecute, table);
		}

		public void SelectAllByFulfillmentHouseID(DataTable table, int fulfillmentHouseID)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "QSPCanadaProduct.dbo.[pr_SelectAllProductsByFulfillmentHouseID]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iFulfillmentHouseID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fulfillmentHouseID));
			Select(scmCmdToExecute, table);
		}

		/*public void SelectByCampaignTitleCode(DataTable Table,string Product_Code,int CampaignID,int ProdcutType)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[spGetCodeAndCampaign_V2]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@Code", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed,Product_Code));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@CampaignId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed,CampaignID));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@ProductType", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed,ProdcutType));
			Select(scmCmdToExecute,Table);
		}*/
		public void SelectByCampaignTitleCode(DataTable Table,string Product_Code,int CampaignID,int ProdcutType,int CustomerInstance)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "[spGetCodeAndCampaignForCustomerService]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@Code", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed,Product_Code));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@CampaignId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed,CampaignID));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@ProductType", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed,ProdcutType));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@CustomerInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed,CustomerInstance));
			
			Select(scmCmdToExecute,Table);
		}
		public void SelectByCampaignTitleCode(DataTable Table,string Product_Code,int CampaignID,int ProdcutType,int CustomerInstance,int CouponSetID)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "[spGetCodeAndCampaignForCustomerService]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@Code", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed,Product_Code));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@CampaignId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed,CampaignID));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@ProductType", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed,ProdcutType));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@CustomerInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed,CustomerInstance));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@CouponSetID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed,CouponSetID));
			Select(scmCmdToExecute,Table);
		}
		public void SelectProductByCatalogSectionID(DataTable Table, int ProgramSectionID)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "QSPCanadaProduct.dbo.[pr_SelectProductByCatalogSectionID]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iProgramSectionID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ProgramSectionID));
			Select(scmCmdToExecute,Table);
		}

		/*public int ProductReplacement(int CampaignID, int ProductPriceInstance, int Quantity, float Price, int OverrideCode, int ProductType, int UserID, string StudentFirstName, string StudentLastName, string Comment) 
		{
			SqlCommand scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "[pr_ProductReplacement]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@lCampaignID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CampaignID));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@lProductpriceInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ProductPriceInstance));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@IQuantity", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Quantity));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@dPrice", SqlDbType.Float, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Price));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@lOverrideCode", SqlDbType.Float, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, OverrideCode));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@zProductType", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ProductType.ToString()));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@lUserProfileID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, UserID));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@zStudentFirstName", SqlDbType.VarChar, 40, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, StudentFirstName));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@zStudentLastName", SqlDbType.VarChar, 40, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, StudentLastName));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@zComment", SqlDbType.VarChar, 300, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Comment));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@lOrderID", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));
			
			ExecuteCmd(scmCmdToExecute);

			return Convert.ToInt32(scmCmdToExecute.Parameters["@lOrderID"].Value);
		}*/

		public int AddNewItemForProductReplacement(int customerOrderHeaderInstance, int magPriceInstance, int quantity, float price, int overrideCode, int productReplacementReason) 
		{
			SqlCommand scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_AddNewItemForProductReplacement]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iCustomerOrderHeaderInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, customerOrderHeaderInstance));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iMagPriceInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, magPriceInstance));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iQuantity", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, quantity));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@fPrice", SqlDbType.Float, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, price));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iOverrideCode", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, overrideCode));
            scmCmdToExecute.Parameters.Add(new SqlParameter("@iReasonId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productReplacementReason));

			return ExecuteCmd(scmCmdToExecute);
		}

		public void SelectPricingDetailsForNewSubToInvoice(DataTable Table, string ProductCode, int NumberOfIssues, int ProgramSectionID, float CatalogPrice)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "[pr_SelectPricingDetailsForNewSubToInvoice]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@sProductCode", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ProductCode));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iNumberOfIssues", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, NumberOfIssues));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iProgramSectionID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ProgramSectionID));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@fCatalogPrice", SqlDbType.Float, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CatalogPrice));
			Select(scmCmdToExecute,Table);
		}

		public void SelectAllProductCategories(DataTable Table)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "QSPCanadaProduct.dbo.[pr_SelectAllProductCategories]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(scmCmdToExecute,Table);
		}

		public void SelectAllProductTypes(DataTable table) 
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.[pr_SelectAllProductTypes]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(cmdToExecute, table);
		}

        public int InsertProductInformation(string productCode, string season, int year, string productName, string productSortName, string language, int categoryID, int status, int productType, int daysLeadTime, int numberOfIssues, int publisherID, int fulfillmentHouseID, string comment, string vendorNumber, string vendorSiteName, string payGroupLookupCode, int currency, string GSTRegistrationNumber, string HSTRegistrationNumber, string PSTRegistrationNumber, string oracleCode, string prizeLevel, int prizeLevelQuantityRequired, string remitCode, bool isQSPExclusive, string englishDescription, string frenchDescription, string userID, string vendorProductCode)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_InsertProduct";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@zUMC", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@iYear", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, year));
			cmdToExecute.Parameters.Add(new SqlParameter("@zSeason", SqlDbType.VarChar, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, season));
			cmdToExecute.Parameters.Add(new SqlParameter("@zProductName", SqlDbType.VarChar, 55, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productName));
			cmdToExecute.Parameters.Add(new SqlParameter("@zProductSortName", SqlDbType.VarChar, 55, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productSortName));
			cmdToExecute.Parameters.Add(new SqlParameter("@zLanguage", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, language));
			cmdToExecute.Parameters.Add(new SqlParameter("@iCategoryID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, categoryID));
			cmdToExecute.Parameters.Add(new SqlParameter("@iStatus", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, status));
			cmdToExecute.Parameters.Add(new SqlParameter("@iProductType", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productType));
			cmdToExecute.Parameters.Add(new SqlParameter("@iDaysLeadTime", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, daysLeadTime));
			cmdToExecute.Parameters.Add(new SqlParameter("@iNbrOfIssuesPerYear", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, numberOfIssues));
			cmdToExecute.Parameters.Add(new SqlParameter("@iPublisherID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, publisherID));
			cmdToExecute.Parameters.Add(new SqlParameter("@iFulfillmentHouseID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fulfillmentHouseID));
			cmdToExecute.Parameters.Add(new SqlParameter("@zComment", SqlDbType.VarChar, 200, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, comment));
			cmdToExecute.Parameters.Add(new SqlParameter("@zVendorNumber", SqlDbType.VarChar, 30, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, vendorNumber));
			cmdToExecute.Parameters.Add(new SqlParameter("@zVendorSiteName", SqlDbType.VarChar, 15, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, vendorSiteName));
			cmdToExecute.Parameters.Add(new SqlParameter("@zPayGroupLookupCode", SqlDbType.VarChar, 30, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, payGroupLookupCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@iCurrency", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, currency));
			cmdToExecute.Parameters.Add(new SqlParameter("@zGSTRegistrationNumber", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, GSTRegistrationNumber));
			cmdToExecute.Parameters.Add(new SqlParameter("@zHSTRegistrationNumber", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, HSTRegistrationNumber));
			cmdToExecute.Parameters.Add(new SqlParameter("@zPSTRegistrationNumber", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, PSTRegistrationNumber));
			cmdToExecute.Parameters.Add(new SqlParameter("@zOracleCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, oracleCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@zPrizeLevel", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, prizeLevel));
			cmdToExecute.Parameters.Add(new SqlParameter("@iPrizeLevelQtyRequired", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, prizeLevelQuantityRequired));
			cmdToExecute.Parameters.Add(new SqlParameter("@zRemitCode", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, remitCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@bIsQSPExclusive", SqlDbType.Bit, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, isQSPExclusive));
			cmdToExecute.Parameters.Add(new SqlParameter("@zEnglishDescription", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, englishDescription));
			cmdToExecute.Parameters.Add(new SqlParameter("@zFrenchDescription", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, frenchDescription));
			cmdToExecute.Parameters.Add(new SqlParameter("@zUserID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, userID));
            cmdToExecute.Parameters.Add(new SqlParameter("@zVendorProductCode", SqlDbType.VarChar, 12, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, vendorProductCode));
			return Convert.ToInt32(ExecuteScalar(cmdToExecute));
		}

        public int UpdateProductInformation(int productInstance, string productCode, string season, int year, string productName, string productSortName, string language, int categoryID, int status, int productType, int daysLeadTime, int numberOfIssues, int publisherID, int fulfillmentHouseID, string comment, string vendorNumber, string vendorSiteName, string payGroupLookupCode, int currency, string GSTRegistrationNumber, string HSTRegistrationNumber, string PSTRegistrationNumber, string oracleCode, string prizeLevel, int prizeLevelQuantityRequired, string remitCode, bool isQSPExclusive, string englishDescription, string frenchDescription, string vendorProductCode)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_UpdateProduct";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iProductInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productInstance));
			cmdToExecute.Parameters.Add(new SqlParameter("@zUMC", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@iYear", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, year));
			cmdToExecute.Parameters.Add(new SqlParameter("@zSeason", SqlDbType.VarChar, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, season));
			cmdToExecute.Parameters.Add(new SqlParameter("@zProductName", SqlDbType.VarChar, 55, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productName));
			cmdToExecute.Parameters.Add(new SqlParameter("@zProductSortName", SqlDbType.VarChar, 55, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productSortName));
			cmdToExecute.Parameters.Add(new SqlParameter("@zLanguage", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, language));
			cmdToExecute.Parameters.Add(new SqlParameter("@iCategoryID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, categoryID));
			cmdToExecute.Parameters.Add(new SqlParameter("@iStatus", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, status));
			cmdToExecute.Parameters.Add(new SqlParameter("@iProductType", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productType));
			cmdToExecute.Parameters.Add(new SqlParameter("@iDaysLeadTime", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, daysLeadTime));
			cmdToExecute.Parameters.Add(new SqlParameter("@iNbrOfIssuesPerYear", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, numberOfIssues));
			cmdToExecute.Parameters.Add(new SqlParameter("@iPublisherID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, publisherID));
			cmdToExecute.Parameters.Add(new SqlParameter("@iFulfillmentHouseID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fulfillmentHouseID));
			cmdToExecute.Parameters.Add(new SqlParameter("@zComment", SqlDbType.VarChar, 200, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, comment));
			cmdToExecute.Parameters.Add(new SqlParameter("@zVendorNumber", SqlDbType.VarChar, 30, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, vendorNumber));
			cmdToExecute.Parameters.Add(new SqlParameter("@zVendorSiteName", SqlDbType.VarChar, 30, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, vendorSiteName));
			cmdToExecute.Parameters.Add(new SqlParameter("@zPayGroupLookupCode", SqlDbType.VarChar, 30, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, payGroupLookupCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@iCurrency", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, currency));
			cmdToExecute.Parameters.Add(new SqlParameter("@zGSTRegistrationNumber", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, GSTRegistrationNumber));
			cmdToExecute.Parameters.Add(new SqlParameter("@zHSTRegistrationNumber", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, HSTRegistrationNumber));
			cmdToExecute.Parameters.Add(new SqlParameter("@zPSTRegistrationNumber", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, PSTRegistrationNumber));
			cmdToExecute.Parameters.Add(new SqlParameter("@zOracleCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, oracleCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@zPrizeLevel", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, prizeLevel));
			cmdToExecute.Parameters.Add(new SqlParameter("@iPrizeLevelQtyRequired", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, prizeLevelQuantityRequired));
			cmdToExecute.Parameters.Add(new SqlParameter("@zRemitCode", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, remitCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@bIsQSPExclusive", SqlDbType.Bit, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, isQSPExclusive));
			cmdToExecute.Parameters.Add(new SqlParameter("@zEnglishDescription", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, englishDescription));
			cmdToExecute.Parameters.Add(new SqlParameter("@zFrenchDescription", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, frenchDescription));
            cmdToExecute.Parameters.Add(new SqlParameter("@zVendorProductCode", SqlDbType.VarChar, 12, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, vendorProductCode));
			return ExecuteCmd(cmdToExecute);
		}

		public bool ValidateProductCode(string productCode, string season, int year)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_ValidateProductCode";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@zProductCode", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@zSeason", SqlDbType.VarChar, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, season));
			cmdToExecute.Parameters.Add(new SqlParameter("@iYear", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, year));
			return Convert.ToBoolean(ExecuteScalar(cmdToExecute));
		}

		public int Delete(int productInstance)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_DeleteProduct";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iProductInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productInstance));
			return ExecuteCmd(cmdToExecute);
		}

		public int SelectCustomerOrderDetailCount(int productInstance) 
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_SelectCustomerOrderDetailCountByProductInstance";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iProductInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productInstance));
			return Convert.ToInt32(ExecuteScalar(cmdToExecute));
		}
		public void SelectByCampaignProductCatalogCode(DataTable Table,string CatalogCode, string Product_Code,int CampaignID, int IsFMAccount)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "[pr_GetItemsByCatalogAndAccountType]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@CatalogCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed,CatalogCode));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@Code", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed,Product_Code));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@CampaignId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed,CampaignID));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@IsFmAccount", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed,IsFMAccount));
			//scmCmdToExecute.Parameters.Add(new SqlParameter("@ProductType", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed,ProdcutType));
			Select(scmCmdToExecute,Table);
		}
		public int UpdateItem(int customerOrderHeaderInstance, int transID, int ShipToInstance,
					string recipient,
					int quantity, 
					float price, 
					int magPriceInstance,	
					int overrideCode,
					int status,
					int delflag) 
		{
			SqlCommand scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_CustomerOrderDetail_Update]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@coh", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, customerOrderHeaderInstance));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@transID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, transID));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iShipToInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ShipToInstance));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@recipient", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed,recipient));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@quantity", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, quantity));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@price", SqlDbType.Float, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, price));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@pricingdetailsid", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, magPriceInstance));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@overrideCode", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, overrideCode));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@status", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, status));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@delflag", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, delflag));

			return ExecuteCmd(scmCmdToExecute);
		}
	}
}
