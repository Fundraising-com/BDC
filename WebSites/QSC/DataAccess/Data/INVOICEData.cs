///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'INVOICE'
// Generated by LLBLGen v1.2.1640.28593 Final
// on: Wednesday, June 30, 2004, 2:19:05 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using tableRef =QSPFulfillment.DataAccess.Common.TableDef.INVOICETable;


namespace QSPFulfillment.DataAccess.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'INVOICE'.
	/// </summary>
	public class INVOICEData : QSPFulfillment.DataAccess.Data.DBTableOperation
	{
		#region Class Member Declarations
		internal const string PARAM_INVOICE_ID= "@iINVOICE_ID";
		internal const string PARAM_ACCOUNT_ID= "@iACCOUNT_ID";
		internal const string PARAM_ACCOUNT_TYPE_ID= "@iACCOUNT_TYPE_ID";
		internal const string PARAM_ORDER_ID= "@iORDER_ID";
		internal const string PARAM_INVOICE_DATE= "@daINVOICE_DATE";
		internal const string PARAM_INVOICE_DUE_DATE= "@daINVOICE_DUE_DATE";
		internal const string PARAM_INVOICE_AMOUNT= "@dcINVOICE_AMOUNT";
		internal const string PARAM_FIRST_PRINT_DATE= "@daFIRST_PRINT_DATE";
		internal const string PARAM_NOTE_TO_PRINT= "@sNOTE_TO_PRINT";
		internal const string PARAM_DATETIME_CREATED= "@daDATETIME_CREATED";
		internal const string PARAM_DATETIME_MODIFIED= "@daDATETIME_MODIFIED";
		internal const string PARAM_LAST_UPDATED_BY= "@sLAST_UPDATED_BY";
		internal const string PARAM_COUNTRY_CODE= "@sCOUNTRY_CODE";
		internal const string PARAM_IS_PRINTED= "@sIS_PRINTED";
		internal const string PARAM_DATETIME_APPROVED= "@daDATETIME_APPROVED";
		internal const string PARAM_INVOICE_EFFECTIVE_DATE= "@daINVOICE_EFFECTIVE_DATE";
		internal const string PARAM_SEARCH_CRITERIA = "@isearch_type";

		internal const string PARAM_SEARCH_TYPE = "@scriteria";

		//

		// DataSetCommand object

		//

		private SqlCommand insertCommand;

		private SqlCommand deleteCommand;

		private SqlCommand updateCommand;

		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public INVOICEData()
		{
			// Nothing for now.
		}
		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand("dbo.[pr_INVOICE_Insert]");
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
				SqlParameterCollection sqlParams = insertCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_INVOICE_ID,SqlDbType.Int));
				sqlParams[PARAM_INVOICE_ID].Direction = ParameterDirection.Output;
				sqlParams[PARAM_INVOICE_ID].SourceColumn = tableRef.FLD_INVOICE_ID;

				sqlParams.Add(new SqlParameter(PARAM_ACCOUNT_ID,SqlDbType.Int));
				sqlParams[PARAM_ACCOUNT_ID].SourceColumn = tableRef.FLD_ACCOUNT_ID;

				sqlParams.Add(new SqlParameter(PARAM_ACCOUNT_TYPE_ID,SqlDbType.Int));
				sqlParams[PARAM_ACCOUNT_TYPE_ID].SourceColumn = tableRef.FLD_ACCOUNT_TYPE_ID;

				sqlParams.Add(new SqlParameter(PARAM_ORDER_ID,SqlDbType.Int));
				sqlParams[PARAM_ORDER_ID].SourceColumn = tableRef.FLD_ORDER_ID;

				sqlParams.Add(new SqlParameter(PARAM_INVOICE_DATE,SqlDbType.DateTime));
				sqlParams[PARAM_INVOICE_DATE].SourceColumn = tableRef.FLD_INVOICE_DATE;

				sqlParams.Add(new SqlParameter(PARAM_INVOICE_DUE_DATE,SqlDbType.DateTime));
				sqlParams[PARAM_INVOICE_DUE_DATE].SourceColumn = tableRef.FLD_INVOICE_DUE_DATE;

				sqlParams.Add(new SqlParameter(PARAM_INVOICE_AMOUNT,SqlDbType.Decimal));
				sqlParams[PARAM_INVOICE_AMOUNT].SourceColumn = tableRef.FLD_INVOICE_AMOUNT;

				sqlParams.Add(new SqlParameter(PARAM_FIRST_PRINT_DATE,SqlDbType.DateTime));
				sqlParams[PARAM_FIRST_PRINT_DATE].SourceColumn = tableRef.FLD_FIRST_PRINT_DATE;

				sqlParams.Add(new SqlParameter(PARAM_NOTE_TO_PRINT,SqlDbType.VarChar));
				sqlParams[PARAM_NOTE_TO_PRINT].SourceColumn = tableRef.FLD_NOTE_TO_PRINT;

				sqlParams.Add(new SqlParameter(PARAM_DATETIME_CREATED,SqlDbType.DateTime));
				sqlParams[PARAM_DATETIME_CREATED].SourceColumn = tableRef.FLD_DATETIME_CREATED;

				sqlParams.Add(new SqlParameter(PARAM_DATETIME_MODIFIED,SqlDbType.DateTime));
				sqlParams[PARAM_DATETIME_MODIFIED].SourceColumn = tableRef.FLD_DATETIME_MODIFIED;

				sqlParams.Add(new SqlParameter(PARAM_LAST_UPDATED_BY,SqlDbType.VarChar));
				sqlParams[PARAM_LAST_UPDATED_BY].SourceColumn = tableRef.FLD_LAST_UPDATED_BY;

				sqlParams.Add(new SqlParameter(PARAM_COUNTRY_CODE,SqlDbType.VarChar));
				sqlParams[PARAM_COUNTRY_CODE].SourceColumn = tableRef.FLD_COUNTRY_CODE;

				sqlParams.Add(new SqlParameter(PARAM_IS_PRINTED,SqlDbType.Char));
				sqlParams[PARAM_IS_PRINTED].SourceColumn = tableRef.FLD_IS_PRINTED;

				sqlParams.Add(new SqlParameter(PARAM_DATETIME_APPROVED,SqlDbType.DateTime));
				sqlParams[PARAM_DATETIME_APPROVED].SourceColumn = tableRef.FLD_DATETIME_APPROVED;

				sqlParams.Add(new SqlParameter(PARAM_INVOICE_EFFECTIVE_DATE,SqlDbType.DateTime));
				sqlParams[PARAM_INVOICE_EFFECTIVE_DATE].SourceColumn = tableRef.FLD_INVOICE_EFFECTIVE_DATE;
			}
			return insertCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand("dbo.[pr_INVOICE_Delete]");
				deleteCommand.CommandType = CommandType.StoredProcedure;
				SqlParameterCollection sqlParams = deleteCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_INVOICE_ID,SqlDbType.Int));
				sqlParams[PARAM_INVOICE_ID].SourceColumn = tableRef.FLD_INVOICE_ID;
			}
			return deleteCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand("dbo.[pr_INVOICE_Update]");
				updateCommand.CommandType = CommandType.StoredProcedure;
				updateCommand.UpdatedRowSource = UpdateRowSource.OutputParameters;
				SqlParameterCollection sqlParams = updateCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_INVOICE_ID,SqlDbType.Int));
				sqlParams[PARAM_INVOICE_ID].SourceColumn = tableRef.FLD_INVOICE_ID;

				sqlParams.Add(new SqlParameter(PARAM_ACCOUNT_ID,SqlDbType.Int));
				sqlParams[PARAM_ACCOUNT_ID].SourceColumn = tableRef.FLD_ACCOUNT_ID;

				sqlParams.Add(new SqlParameter(PARAM_ACCOUNT_TYPE_ID,SqlDbType.Int));
				sqlParams[PARAM_ACCOUNT_TYPE_ID].SourceColumn = tableRef.FLD_ACCOUNT_TYPE_ID;

				sqlParams.Add(new SqlParameter(PARAM_ORDER_ID,SqlDbType.Int));
				sqlParams[PARAM_ORDER_ID].SourceColumn = tableRef.FLD_ORDER_ID;

				sqlParams.Add(new SqlParameter(PARAM_INVOICE_DATE,SqlDbType.DateTime));
				sqlParams[PARAM_INVOICE_DATE].SourceColumn = tableRef.FLD_INVOICE_DATE;

				sqlParams.Add(new SqlParameter(PARAM_INVOICE_DUE_DATE,SqlDbType.DateTime));
				sqlParams[PARAM_INVOICE_DUE_DATE].SourceColumn = tableRef.FLD_INVOICE_DUE_DATE;

				sqlParams.Add(new SqlParameter(PARAM_INVOICE_AMOUNT,SqlDbType.Decimal));
				sqlParams[PARAM_INVOICE_AMOUNT].SourceColumn = tableRef.FLD_INVOICE_AMOUNT;

				sqlParams.Add(new SqlParameter(PARAM_FIRST_PRINT_DATE,SqlDbType.DateTime));
				sqlParams[PARAM_FIRST_PRINT_DATE].SourceColumn = tableRef.FLD_FIRST_PRINT_DATE;

				sqlParams.Add(new SqlParameter(PARAM_NOTE_TO_PRINT,SqlDbType.VarChar));
				sqlParams[PARAM_NOTE_TO_PRINT].SourceColumn = tableRef.FLD_NOTE_TO_PRINT;

				sqlParams.Add(new SqlParameter(PARAM_DATETIME_CREATED,SqlDbType.DateTime));
				sqlParams[PARAM_DATETIME_CREATED].SourceColumn = tableRef.FLD_DATETIME_CREATED;

				sqlParams.Add(new SqlParameter(PARAM_DATETIME_MODIFIED,SqlDbType.DateTime));
				sqlParams[PARAM_DATETIME_MODIFIED].SourceColumn = tableRef.FLD_DATETIME_MODIFIED;

				sqlParams.Add(new SqlParameter(PARAM_LAST_UPDATED_BY,SqlDbType.VarChar));
				sqlParams[PARAM_LAST_UPDATED_BY].SourceColumn = tableRef.FLD_LAST_UPDATED_BY;

				sqlParams.Add(new SqlParameter(PARAM_COUNTRY_CODE,SqlDbType.VarChar));
				sqlParams[PARAM_COUNTRY_CODE].SourceColumn = tableRef.FLD_COUNTRY_CODE;

				sqlParams.Add(new SqlParameter(PARAM_IS_PRINTED,SqlDbType.Char));
				sqlParams[PARAM_IS_PRINTED].SourceColumn = tableRef.FLD_IS_PRINTED;

				sqlParams.Add(new SqlParameter(PARAM_DATETIME_APPROVED,SqlDbType.DateTime));
				sqlParams[PARAM_DATETIME_APPROVED].SourceColumn = tableRef.FLD_DATETIME_APPROVED;

				sqlParams.Add(new SqlParameter(PARAM_INVOICE_EFFECTIVE_DATE,SqlDbType.DateTime));
				sqlParams[PARAM_INVOICE_EFFECTIVE_DATE].SourceColumn = tableRef.FLD_INVOICE_EFFECTIVE_DATE;
			}
			return updateCommand;
		}
		protected override string TableName
		{
			get
			{
				return tableRef.TBL_INVOICE;
			}
		}
		public void SelectSearch(DataTable Table,int SearchType,string SearchCriteria)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_INVOICE_Search";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_TYPE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchType));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_CRITERIA, SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchCriteria));
			Select(cmdToExecute,Table);
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iINVOICE_ID</LI>
		/// </UL>
		///		 <LI>iINVOICE_ID</LI>
		///		 <LI>iACCOUNT_ID</LI>
		///		 <LI>iACCOUNT_TYPE_ID</LI>
		///		 <LI>iORDER_ID</LI>
		///		 <LI>daINVOICE_DATE</LI>
		///		 <LI>daINVOICE_DUE_DATE</LI>
		///		 <LI>dcINVOICE_AMOUNT</LI>
		///		 <LI>daFIRST_PRINT_DATE</LI>
		///		 <LI>sNOTE_TO_PRINT</LI>
		///		 <LI>daDATETIME_CREATED</LI>
		///		 <LI>daDATETIME_MODIFIED</LI>
		///		 <LI>sLAST_UPDATED_BY</LI>
		///		 <LI>sCOUNTRY_CODE</LI>
		///		 <LI>sIS_PRINTED</LI>
		///		 <LI>daDATETIME_APPROVED</LI>
		///		 <LI>daINVOICE_EFFECTIVE_DATE</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public  void SelectOne(DataTable Table, Int32 INVOICE_ID)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_INVOICE_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_INVOICE_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, INVOICE_ID));
			Select(scmCmdToExecute,Table);
		}

		public void SelectByOrderID(DataTable Table,int OrderID)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_INVOICE_SelectByOrderID]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_ORDER_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, OrderID));
			Select(scmCmdToExecute,Table);
		}
		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public  void SelectAll(DataTable Table)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_INVOICE_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(scmCmdToExecute,Table);
		}
	}
}
