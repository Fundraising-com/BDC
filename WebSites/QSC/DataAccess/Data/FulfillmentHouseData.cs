///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'Phone'
// Generated by LLBLGen v1.2.1655.16789 Final
// on: Tuesday, September 07, 2004, 10:20:34 AM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;


namespace QSPFulfillment.DataAccess.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Phone'.
	/// </summary>
	public class FulfillmentHouseData : QSPFulfillment.DataAccess.Data.DBTableOperation
	{
		#region Class Member Declarations
		//

		// DataSetCommand object

		//

		private SqlCommand insertCommand;

		private SqlCommand deleteCommand;

		private SqlCommand updateCommand;

		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public FulfillmentHouseData()
		{
			// Nothing for now.
		}
		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				insertCommand = null;
			}
			return insertCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				deleteCommand = null;
			}
			return deleteCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				updateCommand = null;
			}
			return updateCommand;
		}
		protected override string TableName
		{
			get
			{
				return "QSPCanadaProduct.dbo.Fulfillment_House";
			}
		}
		

		public void SelectOne(DataTable table, int fulfillmentHouseID) 
		{
			SqlCommand cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_FulfillmentHouse_SelectOne";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iFulfillmentHouseID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fulfillmentHouseID));
			Select(cmdToExecute, table);
		}

		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public  void SelectAll(DataTable table)		
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_SelectAllFulfillmentHouses";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(cmdToExecute, table);
		}

		public void SelectAllActive(DataTable table)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_FulfillmentHouse_SelectAll";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(cmdToExecute, table);
		}

		public int Insert(string status, string name, string address1, string address2, string city, string province, string postalCode, string country, int interfaceMediaID, int interfaceLayoutID, int transmissionMethodID, bool hardCopy, string qspAgencyCode, string isEffortKeyRequired)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_InsertFulfillmentHouse";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@zStatus", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, status));
			cmdToExecute.Parameters.Add(new SqlParameter("@zName", SqlDbType.VarChar, 80, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, name));
			cmdToExecute.Parameters.Add(new SqlParameter("@zAddress1", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, address1));
			cmdToExecute.Parameters.Add(new SqlParameter("@zAddress2", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, address2));
			cmdToExecute.Parameters.Add(new SqlParameter("@zCity", SqlDbType.VarChar, 25, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, city));
			cmdToExecute.Parameters.Add(new SqlParameter("@zProvince", SqlDbType.VarChar, 2, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, province));
			cmdToExecute.Parameters.Add(new SqlParameter("@zPostalCode", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, postalCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@zCountry", SqlDbType.VarChar, 2, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, country));
			cmdToExecute.Parameters.Add(new SqlParameter("@iInterfaceMediaID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, interfaceMediaID));
			cmdToExecute.Parameters.Add(new SqlParameter("@iInterfaceLayoutID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, interfaceLayoutID));
			cmdToExecute.Parameters.Add(new SqlParameter("@iTransmissionMethodID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, transmissionMethodID));
			cmdToExecute.Parameters.Add(new SqlParameter("@bHardCopy", SqlDbType.Bit, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, hardCopy));
			cmdToExecute.Parameters.Add(new SqlParameter("@zQSPAgencyCode", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, qspAgencyCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@zIsEffortKeyRequired", SqlDbType.VarChar, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, isEffortKeyRequired));
			return Convert.ToInt32(ExecuteScalar(cmdToExecute));
		}

		public int Update(int fulfillmentHouseID, string status, string name, string address1, string address2, string city, string province, string postalCode, string country, int interfaceMediaID, int interfaceLayoutID, int transmissionMethodID, bool hardCopy, string qspAgencyCode, string isEffortKeyRequired)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_UpdateFulfillmentHouse";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iFulfillmentHouseID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fulfillmentHouseID));
			cmdToExecute.Parameters.Add(new SqlParameter("@zStatus", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, status));
			cmdToExecute.Parameters.Add(new SqlParameter("@zName", SqlDbType.VarChar, 80, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, name));
			cmdToExecute.Parameters.Add(new SqlParameter("@zAddress1", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, address1));
			cmdToExecute.Parameters.Add(new SqlParameter("@zAddress2", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, address2));
			cmdToExecute.Parameters.Add(new SqlParameter("@zCity", SqlDbType.VarChar, 25, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, city));
			cmdToExecute.Parameters.Add(new SqlParameter("@zProvince", SqlDbType.VarChar, 2, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, province));
			cmdToExecute.Parameters.Add(new SqlParameter("@zPostalCode", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, postalCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@zCountry", SqlDbType.VarChar, 2, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, country));
			cmdToExecute.Parameters.Add(new SqlParameter("@iInterfaceMediaID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, interfaceMediaID));
			cmdToExecute.Parameters.Add(new SqlParameter("@iInterfaceLayoutID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, interfaceLayoutID));
			cmdToExecute.Parameters.Add(new SqlParameter("@iTransmissionMethodID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, transmissionMethodID));
			cmdToExecute.Parameters.Add(new SqlParameter("@bHardCopy", SqlDbType.Bit, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, hardCopy));
			cmdToExecute.Parameters.Add(new SqlParameter("@zQSPAgencyCode", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, qspAgencyCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@zIsEffortKeyRequired", SqlDbType.VarChar, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, isEffortKeyRequired));
			return ExecuteCmd(cmdToExecute);
		}
	}
}
