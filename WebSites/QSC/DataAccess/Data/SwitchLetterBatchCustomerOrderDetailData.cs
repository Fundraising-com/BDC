///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'SwitchBatchLetterCustomerOrderDetail'
// Generated by LLBLGen v1.2.1649.27880 Final
// on: Wednesday, July 07, 2004, 4:30:33 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using tableRef =QSPFulfillment.DataAccess.Common.TableDef.SwitchLetterBatchCustomerOrderDetailTable;


namespace QSPFulfillment.DataAccess.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'SwitchBatchLetterCustomerOrderDetail'.
	/// </summary>
	public class SwitchLetterBatchCustomerOrderDetailData : QSPFulfillment.DataAccess.Data.DBTableOperation
	{
		#region Class Member Declarations
		internal const string PARAM_SWITCHLETTERBATCHINSTANCE= "@iSwitchLetterBatchInstance";
		internal const string PARAM_CUSTOMERORDERHEADERINSTANCE= "@iCustomerOrderHeaderInstance";
		internal const string PARAM_TRANSID= "@iTransID";
		internal const string PARAM_SEARCH_CRITERIA = "@isearch_type";

		internal const string PARAM_SEARCH_TYPE = "@scriteria";

		//

		// DataSetCommand object

		//

		private SqlCommand insertCommand;

		private SqlCommand deleteCommand;

		private SqlCommand updateCommand;

		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public SwitchLetterBatchCustomerOrderDetailData()
		{
			// Nothing for now.
		}
		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand("dbo.[pr_SwitchBatchLetterCustomerOrderDetail_Insert]");
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
				SqlParameterCollection sqlParams = insertCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_SWITCHLETTERBATCHINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_SWITCHLETTERBATCHINSTANCE].SourceColumn = tableRef.FLD_SWITCHLETTERBATCHINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_CUSTOMERORDERHEADERINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_CUSTOMERORDERHEADERINSTANCE].SourceColumn = tableRef.FLD_CUSTOMERORDERHEADERINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_TRANSID,SqlDbType.Int));
				sqlParams[PARAM_TRANSID].SourceColumn = tableRef.FLD_TRANSID;
			}
			return insertCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand("dbo.[pr_SwitchBatchLetterCustomerOrderDetail_Delete]");
				deleteCommand.CommandType = CommandType.StoredProcedure;
				SqlParameterCollection sqlParams = deleteCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_SWITCHLETTERBATCHINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_SWITCHLETTERBATCHINSTANCE].SourceColumn = tableRef.FLD_SWITCHLETTERBATCHINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_CUSTOMERORDERHEADERINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_CUSTOMERORDERHEADERINSTANCE].SourceColumn = tableRef.FLD_CUSTOMERORDERHEADERINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_TRANSID,SqlDbType.Int));
				sqlParams[PARAM_TRANSID].SourceColumn = tableRef.FLD_TRANSID;
			}
			return deleteCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand("dbo.[pr_SwitchBatchLetterCustomerOrderDetail_Update]");
				updateCommand.CommandType = CommandType.StoredProcedure;
				updateCommand.UpdatedRowSource = UpdateRowSource.OutputParameters;
				SqlParameterCollection sqlParams = updateCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_SWITCHLETTERBATCHINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_SWITCHLETTERBATCHINSTANCE].SourceColumn = tableRef.FLD_SWITCHLETTERBATCHINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_CUSTOMERORDERHEADERINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_CUSTOMERORDERHEADERINSTANCE].SourceColumn = tableRef.FLD_CUSTOMERORDERHEADERINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_TRANSID,SqlDbType.Int));
				sqlParams[PARAM_TRANSID].SourceColumn = tableRef.FLD_TRANSID;
			}
			return updateCommand;
		}
		protected override string TableName
		{
			get
			{
				return tableRef.TBL_SWITCHBATCHLETTERCUSTOMERORDERDETAIL;
			}
		}
		
		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iSwitchLetterBatchInstance</LI>
		///		 <LI>iCustomerOrderHeaderInstance</LI>
		///		 <LI>iTransID</LI>
		/// </UL>
		///		 <LI>iSwitchLetterBatchInstance</LI>
		///		 <LI>iCustomerOrderHeaderInstance</LI>
		///		 <LI>iTransID</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public  void SelectOne(DataTable Table, Int32 SwitchLetterBatchInstance, Int32 CustomerOrderHeaderInstance, Int32 TransID)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_SwitchLetterBatchCustomerOrderDetail_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_SWITCHLETTERBATCHINSTANCE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SwitchLetterBatchInstance));
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_CUSTOMERORDERHEADERINSTANCE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CustomerOrderHeaderInstance));
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_TRANSID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, TransID));
			Select(scmCmdToExecute,Table);
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public  void SelectAll(DataTable Table)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_SwitchLetterBatchCustomerOrderDetail_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(scmCmdToExecute,Table);
		}
	}
}
