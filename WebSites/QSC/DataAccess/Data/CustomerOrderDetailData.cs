// Description: Data Access class for the table 'CustomerOrderDetail'
// Generated by LLBLGen v1.2.1594.24829 Final
// on: Thursday, May 13, 2004, 2:49:48 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using tableRef =QSPFulfillment.DataAccess.Common.TableDef.CustomerOrderDetailTable;
using QSPFulfillment.DataAccess.Common.ActionObject;


namespace QSPFulfillment.DataAccess.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'CustomerOrderDetail'.
	/// </summary>
	public class CustomerOrderDetailData : QSPFulfillment.DataAccess.Data.DBTableOperation
	{
		#region Class Member Declarations
		internal const string PARAM_CUSTOMERORDERHEADERINSTANCE= "@iCustomerOrderHeaderInstance";
		internal const string PARAM_TRANSID= "@iTransID";
		internal const string PARAM_CUSTOMERSHIPTOINSTANCE= "@iCustomerShipToInstance";
		internal const string PARAM_PRODUCTCODE= "@sProductCode";
		internal const string PARAM_PRODUCTNAME= "@sProductName";
		internal const string PARAM_QUANTITY= "@iQuantity";
		internal const string PARAM_PRICE= "@dcPrice";
		internal const string PARAM_PRICEA= "@dcPriceA";
		internal const string PARAM_TAX= "@dcTax";
		internal const string PARAM_TAXA= "@dcTaxA";
		internal const string PARAM_STATUSINSTANCE= "@iStatusInstance";
		internal const string PARAM_DELFLAG= "@bDelFlag";
		internal const string PARAM_RENEWAL= "@sRenewal";
		internal const string PARAM_RECIPIENT= "@sRecipient";
		internal const string PARAM_OVERRIDEPRODUCT= "@bOverrideProduct";
		internal const string PARAM_CREATIONDATE= "@daCreationDate";
		internal const string PARAM_CROSSEDBRIDGEDATE= "@daCrossedBridgeDate";
		internal const string PARAM_CHANGEUSERID= "@sChangeUserID";
		internal const string PARAM_CHANGEDATE= "@daChangeDate";
		internal const string PARAM_INVOICENUMBER= "@iInvoiceNumber";
		internal const string PARAM_ALPHAPRODUCTCODE= "@sAlphaProductCode";
		internal const string PARAM_COUPONPAGE= "@sCouponPage";
		internal const string PARAM_FDINDICATOR= "@sFDIndicator";
		internal const string PARAM_MKTGINDICATOR= "@sMktgIndicator";
		internal const string PARAM_TOTEINSTANCE= "@iToteInstance";
		internal const string PARAM_GIFTCD= "@sGiftCD";
		internal const string PARAM_ISGIFT= "@bIsGift";
		internal const string PARAM_ISGIFTCARDSENT= "@bIsGiftCardSent";
		internal const string PARAM_SENDGIFTCARDBEFOREDATE= "@daSendGiftCardBeforeDate";
		internal const string PARAM_PROGRAMSECTIONID= "@iProgramSectionID";
		internal const string PARAM_CATALOGPRICE= "@dcCatalogPrice";
		internal const string PARAM_QUANTITYRESERVED= "@iQuantityReserved";
		internal const string PARAM_PRICEOVERRIDEID= "@iPriceOverrideID";
		internal const string PARAM_PRODUCTTYPE= "@iProductType";
		internal const string PARAM_PRICINGDETAILSID= "@iPricingDetailsID";
		internal const string PARAM_TAX2= "@dcTax2";
		internal const string PARAM_TAX2A= "@dcTax2A";
		internal const string PARAM_NET= "@dcNet";
		internal const string PARAM_GROSS= "@dcGross";
		internal const string PARAM_SUPPORTERNAME= "@sSupporterName";
		internal const string PARAM_SENDGIFTCARD= "@bSendGiftCard";
		internal const string PARAM_SEARCH_CRITERIA = "@isearch_type";

		internal const string PARAM_SEARCH_TYPE = "@scriteria";

		//

		// DataSetCommand object

		//

		private SqlCommand insertCommand;

		private SqlCommand deleteCommand;

		private SqlCommand updateCommand;

		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public CustomerOrderDetailData()
		{
			// Nothing for now.
		}
		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand("dbo.[pr_CustomerOrderDetail_Insert]");
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
				SqlParameterCollection sqlParams = insertCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_CUSTOMERORDERHEADERINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_CUSTOMERORDERHEADERINSTANCE].SourceColumn = tableRef.FLD_CUSTOMERORDERHEADERINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_TRANSID,SqlDbType.Int));
				sqlParams[PARAM_TRANSID].SourceColumn = tableRef.FLD_TRANSID;

				sqlParams.Add(new SqlParameter(PARAM_CUSTOMERSHIPTOINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_CUSTOMERSHIPTOINSTANCE].SourceColumn = tableRef.FLD_CUSTOMERSHIPTOINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_PRODUCTCODE,SqlDbType.VarChar));
				sqlParams[PARAM_PRODUCTCODE].SourceColumn = tableRef.FLD_PRODUCTCODE;

				sqlParams.Add(new SqlParameter(PARAM_PRODUCTNAME,SqlDbType.VarChar));
				sqlParams[PARAM_PRODUCTNAME].SourceColumn = tableRef.FLD_PRODUCTNAME;

				sqlParams.Add(new SqlParameter(PARAM_QUANTITY,SqlDbType.Int));
				sqlParams[PARAM_QUANTITY].SourceColumn = tableRef.FLD_QUANTITY;

				sqlParams.Add(new SqlParameter(PARAM_PRICE,SqlDbType.Decimal));
				sqlParams[PARAM_PRICE].SourceColumn = tableRef.FLD_PRICE;

				sqlParams.Add(new SqlParameter(PARAM_PRICEA,SqlDbType.Decimal));
				sqlParams[PARAM_PRICEA].SourceColumn = tableRef.FLD_PRICEA;

				sqlParams.Add(new SqlParameter(PARAM_TAX,SqlDbType.Decimal));
				sqlParams[PARAM_TAX].SourceColumn = tableRef.FLD_TAX;

				sqlParams.Add(new SqlParameter(PARAM_TAXA,SqlDbType.Decimal));
				sqlParams[PARAM_TAXA].SourceColumn = tableRef.FLD_TAXA;

				sqlParams.Add(new SqlParameter(PARAM_STATUSINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_STATUSINSTANCE].SourceColumn = tableRef.FLD_STATUSINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_DELFLAG,SqlDbType.Bit));
				sqlParams[PARAM_DELFLAG].SourceColumn = tableRef.FLD_DELFLAG;

				sqlParams.Add(new SqlParameter(PARAM_RENEWAL,SqlDbType.VarChar));
				sqlParams[PARAM_RENEWAL].SourceColumn = tableRef.FLD_RENEWAL;

				sqlParams.Add(new SqlParameter(PARAM_RECIPIENT,SqlDbType.VarChar));
				sqlParams[PARAM_RECIPIENT].SourceColumn = tableRef.FLD_RECIPIENT;

				sqlParams.Add(new SqlParameter(PARAM_OVERRIDEPRODUCT,SqlDbType.Bit));
				sqlParams[PARAM_OVERRIDEPRODUCT].SourceColumn = tableRef.FLD_OVERRIDEPRODUCT;

				sqlParams.Add(new SqlParameter(PARAM_CREATIONDATE,SqlDbType.DateTime));
				sqlParams[PARAM_CREATIONDATE].SourceColumn = tableRef.FLD_CREATIONDATE;

				sqlParams.Add(new SqlParameter(PARAM_CROSSEDBRIDGEDATE,SqlDbType.DateTime));
				sqlParams[PARAM_CROSSEDBRIDGEDATE].SourceColumn = tableRef.FLD_CROSSEDBRIDGEDATE;

				sqlParams.Add(new SqlParameter(PARAM_CHANGEUSERID,SqlDbType.VarChar));
				sqlParams[PARAM_CHANGEUSERID].SourceColumn = tableRef.FLD_CHANGEUSERID;

				sqlParams.Add(new SqlParameter(PARAM_CHANGEDATE,SqlDbType.DateTime));
				sqlParams[PARAM_CHANGEDATE].SourceColumn = tableRef.FLD_CHANGEDATE;

				sqlParams.Add(new SqlParameter(PARAM_INVOICENUMBER,SqlDbType.Int));
				sqlParams[PARAM_INVOICENUMBER].SourceColumn = tableRef.FLD_INVOICENUMBER;

				sqlParams.Add(new SqlParameter(PARAM_ALPHAPRODUCTCODE,SqlDbType.VarChar));
				sqlParams[PARAM_ALPHAPRODUCTCODE].SourceColumn = tableRef.FLD_ALPHAPRODUCTCODE;

				sqlParams.Add(new SqlParameter(PARAM_COUPONPAGE,SqlDbType.VarChar));
				sqlParams[PARAM_COUPONPAGE].SourceColumn = tableRef.FLD_COUPONPAGE;

				sqlParams.Add(new SqlParameter(PARAM_FDINDICATOR,SqlDbType.VarChar));
				sqlParams[PARAM_FDINDICATOR].SourceColumn = tableRef.FLD_FDINDICATOR;

				sqlParams.Add(new SqlParameter(PARAM_MKTGINDICATOR,SqlDbType.VarChar));
				sqlParams[PARAM_MKTGINDICATOR].SourceColumn = tableRef.FLD_MKTGINDICATOR;

				sqlParams.Add(new SqlParameter(PARAM_TOTEINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_TOTEINSTANCE].SourceColumn = tableRef.FLD_TOTEINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_GIFTCD,SqlDbType.VarChar));
				sqlParams[PARAM_GIFTCD].SourceColumn = tableRef.FLD_GIFTCD;

				sqlParams.Add(new SqlParameter(PARAM_ISGIFT,SqlDbType.Bit));
				sqlParams[PARAM_ISGIFT].SourceColumn = tableRef.FLD_ISGIFT;

				sqlParams.Add(new SqlParameter(PARAM_ISGIFTCARDSENT,SqlDbType.Bit));
				sqlParams[PARAM_ISGIFTCARDSENT].SourceColumn = tableRef.FLD_ISGIFTCARDSENT;

				sqlParams.Add(new SqlParameter(PARAM_SENDGIFTCARDBEFOREDATE,SqlDbType.DateTime));
				sqlParams[PARAM_SENDGIFTCARDBEFOREDATE].SourceColumn = tableRef.FLD_SENDGIFTCARDBEFOREDATE;

				sqlParams.Add(new SqlParameter(PARAM_PROGRAMSECTIONID,SqlDbType.Int));
				sqlParams[PARAM_PROGRAMSECTIONID].SourceColumn = tableRef.FLD_PROGRAMSECTIONID;

				sqlParams.Add(new SqlParameter(PARAM_CATALOGPRICE,SqlDbType.Decimal));
				sqlParams[PARAM_CATALOGPRICE].SourceColumn = tableRef.FLD_CATALOGPRICE;

				sqlParams.Add(new SqlParameter(PARAM_QUANTITYRESERVED,SqlDbType.Int));
				sqlParams[PARAM_QUANTITYRESERVED].SourceColumn = tableRef.FLD_QUANTITYRESERVED;

				sqlParams.Add(new SqlParameter(PARAM_PRICEOVERRIDEID,SqlDbType.Int));
				sqlParams[PARAM_PRICEOVERRIDEID].SourceColumn = tableRef.FLD_PRICEOVERRIDEID;

				sqlParams.Add(new SqlParameter(PARAM_PRODUCTTYPE,SqlDbType.Int));
				sqlParams[PARAM_PRODUCTTYPE].SourceColumn = tableRef.FLD_PRODUCTTYPE;

				sqlParams.Add(new SqlParameter(PARAM_PRICINGDETAILSID,SqlDbType.Int));
				sqlParams[PARAM_PRICINGDETAILSID].SourceColumn = tableRef.FLD_PRICINGDETAILSID;

				sqlParams.Add(new SqlParameter(PARAM_TAX2,SqlDbType.Decimal));
				sqlParams[PARAM_TAX2].SourceColumn = tableRef.FLD_TAX2;

				sqlParams.Add(new SqlParameter(PARAM_TAX2A,SqlDbType.Decimal));
				sqlParams[PARAM_TAX2A].SourceColumn = tableRef.FLD_TAX2A;

				sqlParams.Add(new SqlParameter(PARAM_NET,SqlDbType.Decimal));
				sqlParams[PARAM_NET].SourceColumn = tableRef.FLD_NET;

				sqlParams.Add(new SqlParameter(PARAM_GROSS,SqlDbType.Decimal));
				sqlParams[PARAM_GROSS].SourceColumn = tableRef.FLD_GROSS;

				sqlParams.Add(new SqlParameter(PARAM_SUPPORTERNAME,SqlDbType.VarChar));
				sqlParams[PARAM_SUPPORTERNAME].SourceColumn = tableRef.FLD_SUPPORTERNAME;

				sqlParams.Add(new SqlParameter(PARAM_SENDGIFTCARD,SqlDbType.Bit));
				sqlParams[PARAM_SENDGIFTCARD].SourceColumn = tableRef.FLD_SENDGIFTCARD;
			}
			return insertCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand("dbo.[pr_CustomerOrderDetail_Delete]");
				deleteCommand.CommandType = CommandType.StoredProcedure;
				SqlParameterCollection sqlParams = deleteCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_CUSTOMERORDERHEADERINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_CUSTOMERORDERHEADERINSTANCE].SourceColumn = tableRef.FLD_CUSTOMERORDERHEADERINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_TRANSID,SqlDbType.Int));
				sqlParams[PARAM_TRANSID].SourceColumn = tableRef.FLD_TRANSID;
			}
			return deleteCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand("dbo.[pr_CustomerOrderDetail_Update]");
				updateCommand.CommandType = CommandType.StoredProcedure;
				updateCommand.UpdatedRowSource = UpdateRowSource.OutputParameters;
				SqlParameterCollection sqlParams = updateCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_CUSTOMERORDERHEADERINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_CUSTOMERORDERHEADERINSTANCE].SourceColumn = tableRef.FLD_CUSTOMERORDERHEADERINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_TRANSID,SqlDbType.Int));
				sqlParams[PARAM_TRANSID].SourceColumn = tableRef.FLD_TRANSID;

				sqlParams.Add(new SqlParameter(PARAM_CUSTOMERSHIPTOINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_CUSTOMERSHIPTOINSTANCE].SourceColumn = tableRef.FLD_CUSTOMERSHIPTOINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_PRODUCTCODE,SqlDbType.VarChar));
				sqlParams[PARAM_PRODUCTCODE].SourceColumn = tableRef.FLD_PRODUCTCODE;

				sqlParams.Add(new SqlParameter(PARAM_PRODUCTNAME,SqlDbType.VarChar));
				sqlParams[PARAM_PRODUCTNAME].SourceColumn = tableRef.FLD_PRODUCTNAME;

				sqlParams.Add(new SqlParameter(PARAM_QUANTITY,SqlDbType.Int));
				sqlParams[PARAM_QUANTITY].SourceColumn = tableRef.FLD_QUANTITY;

				sqlParams.Add(new SqlParameter(PARAM_PRICE,SqlDbType.Decimal));
				sqlParams[PARAM_PRICE].SourceColumn = tableRef.FLD_PRICE;

				sqlParams.Add(new SqlParameter(PARAM_PRICEA,SqlDbType.Decimal));
				sqlParams[PARAM_PRICEA].SourceColumn = tableRef.FLD_PRICEA;

				sqlParams.Add(new SqlParameter(PARAM_TAX,SqlDbType.Decimal));
				sqlParams[PARAM_TAX].SourceColumn = tableRef.FLD_TAX;

				sqlParams.Add(new SqlParameter(PARAM_TAXA,SqlDbType.Decimal));
				sqlParams[PARAM_TAXA].SourceColumn = tableRef.FLD_TAXA;

				sqlParams.Add(new SqlParameter(PARAM_STATUSINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_STATUSINSTANCE].SourceColumn = tableRef.FLD_STATUSINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_DELFLAG,SqlDbType.Bit));
				sqlParams[PARAM_DELFLAG].SourceColumn = tableRef.FLD_DELFLAG;

				sqlParams.Add(new SqlParameter(PARAM_RENEWAL,SqlDbType.VarChar));
				sqlParams[PARAM_RENEWAL].SourceColumn = tableRef.FLD_RENEWAL;

				sqlParams.Add(new SqlParameter(PARAM_RECIPIENT,SqlDbType.VarChar));
				sqlParams[PARAM_RECIPIENT].SourceColumn = tableRef.FLD_RECIPIENT;

				sqlParams.Add(new SqlParameter(PARAM_OVERRIDEPRODUCT,SqlDbType.Bit));
				sqlParams[PARAM_OVERRIDEPRODUCT].SourceColumn = tableRef.FLD_OVERRIDEPRODUCT;

				sqlParams.Add(new SqlParameter(PARAM_CREATIONDATE,SqlDbType.DateTime));
				sqlParams[PARAM_CREATIONDATE].SourceColumn = tableRef.FLD_CREATIONDATE;

				sqlParams.Add(new SqlParameter(PARAM_CROSSEDBRIDGEDATE,SqlDbType.DateTime));
				sqlParams[PARAM_CROSSEDBRIDGEDATE].SourceColumn = tableRef.FLD_CROSSEDBRIDGEDATE;

				sqlParams.Add(new SqlParameter(PARAM_CHANGEUSERID,SqlDbType.VarChar));
				sqlParams[PARAM_CHANGEUSERID].SourceColumn = tableRef.FLD_CHANGEUSERID;

				sqlParams.Add(new SqlParameter(PARAM_CHANGEDATE,SqlDbType.DateTime));
				sqlParams[PARAM_CHANGEDATE].SourceColumn = tableRef.FLD_CHANGEDATE;

				sqlParams.Add(new SqlParameter(PARAM_INVOICENUMBER,SqlDbType.Int));
				sqlParams[PARAM_INVOICENUMBER].SourceColumn = tableRef.FLD_INVOICENUMBER;

				sqlParams.Add(new SqlParameter(PARAM_ALPHAPRODUCTCODE,SqlDbType.VarChar));
				sqlParams[PARAM_ALPHAPRODUCTCODE].SourceColumn = tableRef.FLD_ALPHAPRODUCTCODE;

				sqlParams.Add(new SqlParameter(PARAM_COUPONPAGE,SqlDbType.VarChar));
				sqlParams[PARAM_COUPONPAGE].SourceColumn = tableRef.FLD_COUPONPAGE;

				sqlParams.Add(new SqlParameter(PARAM_FDINDICATOR,SqlDbType.VarChar));
				sqlParams[PARAM_FDINDICATOR].SourceColumn = tableRef.FLD_FDINDICATOR;

				sqlParams.Add(new SqlParameter(PARAM_MKTGINDICATOR,SqlDbType.VarChar));
				sqlParams[PARAM_MKTGINDICATOR].SourceColumn = tableRef.FLD_MKTGINDICATOR;

				sqlParams.Add(new SqlParameter(PARAM_TOTEINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_TOTEINSTANCE].SourceColumn = tableRef.FLD_TOTEINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_GIFTCD,SqlDbType.VarChar));
				sqlParams[PARAM_GIFTCD].SourceColumn = tableRef.FLD_GIFTCD;

				sqlParams.Add(new SqlParameter(PARAM_ISGIFT,SqlDbType.Bit));
				sqlParams[PARAM_ISGIFT].SourceColumn = tableRef.FLD_ISGIFT;

				sqlParams.Add(new SqlParameter(PARAM_ISGIFTCARDSENT,SqlDbType.Bit));
				sqlParams[PARAM_ISGIFTCARDSENT].SourceColumn = tableRef.FLD_ISGIFTCARDSENT;

				sqlParams.Add(new SqlParameter(PARAM_SENDGIFTCARDBEFOREDATE,SqlDbType.DateTime));
				sqlParams[PARAM_SENDGIFTCARDBEFOREDATE].SourceColumn = tableRef.FLD_SENDGIFTCARDBEFOREDATE;

				sqlParams.Add(new SqlParameter(PARAM_PROGRAMSECTIONID,SqlDbType.Int));
				sqlParams[PARAM_PROGRAMSECTIONID].SourceColumn = tableRef.FLD_PROGRAMSECTIONID;

				sqlParams.Add(new SqlParameter(PARAM_CATALOGPRICE,SqlDbType.Decimal));
				sqlParams[PARAM_CATALOGPRICE].SourceColumn = tableRef.FLD_CATALOGPRICE;

				sqlParams.Add(new SqlParameter(PARAM_QUANTITYRESERVED,SqlDbType.Int));
				sqlParams[PARAM_QUANTITYRESERVED].SourceColumn = tableRef.FLD_QUANTITYRESERVED;

				sqlParams.Add(new SqlParameter(PARAM_PRICEOVERRIDEID,SqlDbType.Int));
				sqlParams[PARAM_PRICEOVERRIDEID].SourceColumn = tableRef.FLD_PRICEOVERRIDEID;

				sqlParams.Add(new SqlParameter(PARAM_PRODUCTTYPE,SqlDbType.Int));
				sqlParams[PARAM_PRODUCTTYPE].SourceColumn = tableRef.FLD_PRODUCTTYPE;

				sqlParams.Add(new SqlParameter(PARAM_PRICINGDETAILSID,SqlDbType.Int));
				sqlParams[PARAM_PRICINGDETAILSID].SourceColumn = tableRef.FLD_PRICINGDETAILSID;

				sqlParams.Add(new SqlParameter(PARAM_TAX2,SqlDbType.Decimal));
				sqlParams[PARAM_TAX2].SourceColumn = tableRef.FLD_TAX2;

				sqlParams.Add(new SqlParameter(PARAM_TAX2A,SqlDbType.Decimal));
				sqlParams[PARAM_TAX2A].SourceColumn = tableRef.FLD_TAX2A;

				sqlParams.Add(new SqlParameter(PARAM_NET,SqlDbType.Decimal));
				sqlParams[PARAM_NET].SourceColumn = tableRef.FLD_NET;

				sqlParams.Add(new SqlParameter(PARAM_GROSS,SqlDbType.Decimal));
				sqlParams[PARAM_GROSS].SourceColumn = tableRef.FLD_GROSS;

				sqlParams.Add(new SqlParameter(PARAM_SUPPORTERNAME,SqlDbType.VarChar));
				sqlParams[PARAM_SUPPORTERNAME].SourceColumn = tableRef.FLD_SUPPORTERNAME;

				sqlParams.Add(new SqlParameter(PARAM_SENDGIFTCARD,SqlDbType.Bit));
				sqlParams[PARAM_SENDGIFTCARD].SourceColumn = tableRef.FLD_SENDGIFTCARD;
			}
			return updateCommand;
		}
		protected override string TableName
		{
			get
			{
				return tableRef.TBL_CUSTOMERORDERDETAIL;
			}
		}
		public void SelectSearch(DataTable Table,int SearchType,string SearchCriteria)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_CustomerOrderDetail_Search";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_TYPE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchType));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_CRITERIA, SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchCriteria));
			Select(cmdToExecute,Table);
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iCustomerOrderHeaderInstance</LI>
		///		 <LI>iTransID</LI>
		/// </UL>
		///		 <LI>iCustomerOrderHeaderInstance</LI>
		///		 <LI>iTransID</LI>
		///		 <LI>iCustomerShipToInstance</LI>
		///		 <LI>sProductCode</LI>
		///		 <LI>sProductName</LI>
		///		 <LI>iQuantity</LI>
		///		 <LI>dcPrice</LI>
		///		 <LI>dcPriceA</LI>
		///		 <LI>dcTax</LI>
		///		 <LI>dcTaxA</LI>
		///		 <LI>iStatusInstance</LI>
		///		 <LI>bDelFlag</LI>
		///		 <LI>sRenewal</LI>
		///		 <LI>sRecipient</LI>
		///		 <LI>bOverrideProduct</LI>
		///		 <LI>daCreationDate</LI>
		///		 <LI>daCrossedBridgeDate</LI>
		///		 <LI>sChangeUserID</LI>
		///		 <LI>daChangeDate</LI>
		///		 <LI>iInvoiceNumber</LI>
		///		 <LI>sAlphaProductCode</LI>
		///		 <LI>sCouponPage</LI>
		///		 <LI>sFDIndicator</LI>
		///		 <LI>sMktgIndicator</LI>
		///		 <LI>iToteInstance</LI>
		///		 <LI>sGiftCD</LI>
		///		 <LI>bIsGift</LI>
		///		 <LI>bIsGiftCardSent</LI>
		///		 <LI>daSendGiftCardBeforeDate</LI>
		///		 <LI>iProgramSectionID</LI>
		///		 <LI>dcCatalogPrice</LI>
		///		 <LI>iQuantityReserved</LI>
		///		 <LI>iPriceOverrideID</LI>
		///		 <LI>iProductType</LI>
		///		 <LI>iPricingDetailsID</LI>
		///		 <LI>dcTax2</LI>
		///		 <LI>dcTax2A</LI>
		///		 <LI>dcNet</LI>
		///		 <LI>dcGross</LI>
		///		 <LI>sSupporterName</LI>
		///		 <LI>bSendGiftCard</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public  void SelectOne(DataTable Table, Int32 CustomerOrderHeaderInstance, Int32 TransID, int AdjustPriceToStaffOrder)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_CustomerOrderDetail_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_CUSTOMERORDERHEADERINSTANCE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CustomerOrderHeaderInstance));
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_TRANSID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, TransID));
			scmCmdToExecute.Parameters.Add("@iAdjustPriceToStaffOrder", AdjustPriceToStaffOrder);
			Select(scmCmdToExecute,Table);
		}
		public  void SelectAllByCustomerOrderHeaderInstance(DataTable Table, Int32 CustomerOrderHeaderInstance, int AdjustPriceToStaffOrder)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_CustomerOrderDetail_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_CUSTOMERORDERHEADERINSTANCE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CustomerOrderHeaderInstance));
			scmCmdToExecute.Parameters.Add("@iAdjustPriceToStaffOrder", AdjustPriceToStaffOrder);
			Select(scmCmdToExecute,Table);
		}

		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public  void SelectAll(DataTable Table)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_CustomerOrderDetail_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(scmCmdToExecute,Table);
		}
		public int NewItem(NewSubcription value, int productType, int orderQualifierID, int oldCustomerOrderHeaderInstance, int oldTransID)
		{

			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_AddNewItemForCustomerService]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter("@lCampaignID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, value.CampaignID));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@lProductpriceInstance", SqlDbType.Int, 15, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, value.MagPriceInstance));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@zNewRenewal", SqlDbType.NVarChar, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, value.NewRenewal.ToString()));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@dPrice", SqlDbType.Float, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, value.Price));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@lOverrideCode", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, value.OverrideCode));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@lCustomerInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, value.CustomerInstance));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@zProductType", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productType.ToString()));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@lUserProfileID", SqlDbType.Int,4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, value.UserID));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@sFirstName", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, value.FirstName.ToUpper()));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@sLastName", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, value.LastName.ToUpper()));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@sAddress1", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, value.Address1.ToUpper()));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@sAddress2", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, value.Address2.ToUpper()));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@sCity", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, value.City.ToUpper()));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@sStateCode", SqlDbType.NVarChar, 5, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, value.Province.ToUpper()));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@sZip", SqlDbType.NVarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, value.PostalCode.ToUpper()));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iOrderQualifierID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, orderQualifierID));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iOldCustomerOrderHeaderInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, oldCustomerOrderHeaderInstance));
			scmCmdToExecute.Parameters.Add(new SqlParameter("@iOldTransID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, oldTransID));
			return ExecuteCmd(scmCmdToExecute);
		}

		public int CancelSub(CancelSubscription Value)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_CancelSub]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add("@iCustomerOrderHeaderInstance",Value.CustomerOrderHeaderInstance);
			scmCmdToExecute.Parameters.Add("@iTransID",Value.TransID);
			scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserID", SqlDbType.NVarChar, 15, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed,Value.UserID));
			return ExecuteCmd(scmCmdToExecute);
		}
		public int CancelSubPriorToRemit(CancelSubscription Value)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_CancelSubPriorToRemit]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add("@iCustomerOrderHeaderInstance",Value.CustomerOrderHeaderInstance);
			scmCmdToExecute.Parameters.Add("@iTransID",Value.TransID);
			scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserID", SqlDbType.NVarChar, 15, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed,Value.UserID));
			return ExecuteCmd(scmCmdToExecute);
		
		}
		public void SelectSubscriptionForChadd(DataTable Table,int CustomerOrderHeaderInstance, int TransID, bool ShowCancelledSubs, bool ShowCurrentSubscription)
		{
			
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_GetAllSubsForChadd]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add("@iCustomerOrderHeaderInstance",CustomerOrderHeaderInstance);
			scmCmdToExecute.Parameters.Add("@iTransID",TransID);
			scmCmdToExecute.Parameters.Add("@iShowCancelled", ShowCancelledSubs ? 1 : 0);
			scmCmdToExecute.Parameters.Add("@iShowCurrentSub", ShowCurrentSubscription ? 1 : 0);
						
			Select(scmCmdToExecute,Table);
			
		}
		public void UpdateSubscriptionForChadd(int CustomerOrderHeaderInstance, int TransID, int CustomerInstance)
		{
			
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_UpdateSubscriptionForChadd]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add("@iCustomerOrderHeaderInstance", CustomerOrderHeaderInstance);
			scmCmdToExecute.Parameters.Add("@iTransID", TransID);
			scmCmdToExecute.Parameters.Add("@iCustomerInstance", CustomerInstance);
						
			ExecuteCmd(scmCmdToExecute);

		}
		public object GetCancelAction(int CustomerOrderHeaderInstance,int TransID)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_GetCancelAction]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add("@iCustomerOrderHeaderInstance",CustomerOrderHeaderInstance);
			scmCmdToExecute.Parameters.Add("@iTransID",TransID);
			
			return ExecuteScalar(scmCmdToExecute);
			
		}

        public int ResendSub(ResendSubscription Value)
        {
            SqlCommand scmCmdToExecute = new SqlCommand();
            scmCmdToExecute.CommandText = "dbo.[pr_Remit_ReRemitSubsByCOD]";
            scmCmdToExecute.CommandType = CommandType.StoredProcedure;
            scmCmdToExecute.Parameters.Add("@CustomerOrderHeaderInstance", Value.CustomerOrderHeaderInstance);
            scmCmdToExecute.Parameters.Add("@TransID", Value.TransID);
            return ExecuteCmd(scmCmdToExecute);
        }

        public int ProductUpdate(int CustomerOrderHeaderInstance, int TransID, int MagPriceInstance)
        {
            SqlCommand scmCmdToExecute = new SqlCommand();
            scmCmdToExecute.CommandText = "dbo.[pr_CustomerOrderDetail_UpdateProduct]";
            scmCmdToExecute.CommandType = CommandType.StoredProcedure;
            scmCmdToExecute.Parameters.Add(new SqlParameter("@ProductPriceInstance", SqlDbType.Int, 15, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, MagPriceInstance));
            scmCmdToExecute.Parameters.Add(new SqlParameter("@CustomerOrderHeaderInstance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CustomerOrderHeaderInstance));
            scmCmdToExecute.Parameters.Add(new SqlParameter("@TransID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, TransID));
            return ExecuteCmd(scmCmdToExecute);
        }
	}
}
