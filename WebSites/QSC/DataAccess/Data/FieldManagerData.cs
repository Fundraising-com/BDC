///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'FieldManager'
// Generated by LLBLGen v1.2.1712.15942 Final
// on: Wednesday, September 08, 2004, 9:53:14 AM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using tableRef =QSPFulfillment.DataAccess.Common.TableDef.FieldManagerTable;


namespace QSPFulfillment.DataAccess.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'FieldManager'.
	/// </summary>
	public class FieldManagerData : QSPFulfillment.DataAccess.Data.DBTableOperation
	{
		#region Class Member Declarations
		internal const string PARAM_FMID= "@FMID";
		internal const string PARAM_STATUS= "@status";
		internal const string PARAM_STREET2= "@country";
		internal const string PARAM_PHONELISTID= "@phonelistID";
		internal const string PARAM_ADDRESSLISTID= "@AddressListID";
		internal const string PARAM_FIRST_NAME= "@FirstName";
		internal const string PARAM_LAST_NAME= "@LastName";
		internal const string PARAM_MIDDLE_NAME = "@MiddleName";
		internal const string PARAM_EMAIL= "@Email";
		internal const string PARAM_DMID = "@DMID";
		internal const string PARAM_USERIDMODIFIED= "@userIDModified";
		internal const string PARAM_DATEMODIFIED = "@dateModified";
		internal const string PARAM_COMMENT= "@comment";
		internal const string PARAM_DMINDICATOR= "@DMIndicator";
		internal const string PARAM_LANG= "@lang";
		internal const string PARAM_DELETEDTF= "@deletedTF";

		//

		// DataSetCommand object

		//

		private SqlCommand insertCommand = null;

		private SqlCommand deleteCommand = null;

		private SqlCommand updateCommand = null;

		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public FieldManagerData()
		{
			// Nothing for now.
		}
		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{

			return insertCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			return deleteCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			return updateCommand;
		}

		protected override string TableName
		{
			get
			{
				return tableRef.TBL_FIELDMANAGER;
			}
		}
		
		public  void SelectOne(DataTable Table, string FMID)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "qspcanadacommon..pr_get_FieldManager";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_FMID, SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FMID));
			Select(scmCmdToExecute,Table);
		}

		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public  void SelectAll(DataTable Table)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_FieldManager_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(scmCmdToExecute,Table);
		}
	}
}
