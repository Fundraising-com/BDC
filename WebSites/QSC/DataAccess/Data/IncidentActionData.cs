///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'IncidentAction'
// Generated by LLBLGen v1.2.1635.19725 Final
// on: Wednesday, June 23, 2004, 3:59:07 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using tableRef =QSPFulfillment.DataAccess.Common.TableDef.IncidentActionTable;


namespace QSPFulfillment.DataAccess.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'IncidentAction'.
	/// </summary>
	public class IncidentActionData : QSPFulfillment.DataAccess.Data.DBTableOperation
	{
		#region Class Member Declarations
		internal const string PARAM_INCIDENTINSTANCE= "@iIncidentInstance";
		internal const string PARAM_ACTIONINSTANCE= "@iActionInstance";
		internal const string PARAM_COMMENTS= "@sComments";
		internal const string PARAM_USERIDCREATED= "@sUserIDCreated";
		internal const string PARAM_DATECREATED= "@daDateCreated";
		internal const string PARAM_SEARCH_CRITERIA = "@isearch_type";
		internal const string PARAM_INSTANCE = "@iInstance";
		internal const string PARAM_CUSTOMERREMITHISTORYINSTANCE = "@iCustomerRemitHistoryInstance";



		//

		// DataSetCommand object

		//

		private SqlCommand insertCommand;

		private SqlCommand deleteCommand;

		private SqlCommand updateCommand;

		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public IncidentActionData()
		{
			// Nothing for now.
		}
		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand("dbo.[pr_IncidentAction_Insert]");
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
				SqlParameterCollection sqlParams = insertCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_INSTANCE,SqlDbType.Int));
				sqlParams[PARAM_INSTANCE].SourceColumn = tableRef.FLD_INSTANCE;
				sqlParams[PARAM_INSTANCE].Direction = ParameterDirection.Output;


				sqlParams.Add(new SqlParameter(PARAM_INCIDENTINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_INCIDENTINSTANCE].SourceColumn = tableRef.FLD_INCIDENTINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_ACTIONINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_ACTIONINSTANCE].SourceColumn = tableRef.FLD_ACTIONINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_COMMENTS,SqlDbType.VarChar));
				sqlParams[PARAM_COMMENTS].SourceColumn = tableRef.FLD_COMMENTS;

				sqlParams.Add(new SqlParameter(PARAM_USERIDCREATED,SqlDbType.VarChar));
				sqlParams[PARAM_USERIDCREATED].SourceColumn = tableRef.FLD_USERIDCREATED;

				//sqlParams.Add(new SqlParameter(PARAM_CUSTOMERREMITHISTORYINSTANCE,SqlDbType.Int));
				//sqlParams[PARAM_CUSTOMERREMITHISTORYINSTANCE].SourceColumn = tableRef.FLD_CUSTOMERREMITHISTORYINSTANCE;

				
			}
			return insertCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand("dbo.[pr_IncidentAction_Delete]");
				deleteCommand.CommandType = CommandType.StoredProcedure;
				SqlParameterCollection sqlParams = deleteCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_INSTANCE,SqlDbType.Int));
				sqlParams[PARAM_INSTANCE].SourceColumn = tableRef.FLD_INSTANCE;
			}
			return deleteCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand("dbo.[pr_IncidentAction_Update]");
				updateCommand.CommandType = CommandType.StoredProcedure;
				updateCommand.UpdatedRowSource = UpdateRowSource.OutputParameters;
				SqlParameterCollection sqlParams = updateCommand.Parameters;


				sqlParams.Add(new SqlParameter(PARAM_INSTANCE,SqlDbType.Int));
				sqlParams[PARAM_INSTANCE].SourceColumn = tableRef.FLD_INSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_INCIDENTINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_INCIDENTINSTANCE].SourceColumn = tableRef.FLD_INCIDENTINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_ACTIONINSTANCE,SqlDbType.Int));
				sqlParams[PARAM_ACTIONINSTANCE].SourceColumn = tableRef.FLD_ACTIONINSTANCE;

				sqlParams.Add(new SqlParameter(PARAM_COMMENTS,SqlDbType.VarChar));
				sqlParams[PARAM_COMMENTS].SourceColumn = tableRef.FLD_COMMENTS;

				sqlParams.Add(new SqlParameter(PARAM_USERIDCREATED,SqlDbType.VarChar));
				sqlParams[PARAM_USERIDCREATED].SourceColumn = tableRef.FLD_USERIDCREATED;


				//sqlParams.Add(new SqlParameter(PARAM_CUSTOMERREMITHISTORYINSTANCE,SqlDbType.Int));
				//sqlParams[PARAM_CUSTOMERREMITHISTORYINSTANCE].SourceColumn = tableRef.FLD_CUSTOMERREMITHISTORYINSTANCE;
				

				
			}
			return updateCommand;
		}
		protected override string TableName
		{
			get
			{
				return tableRef.TBL_INCIDENTACTION;
			}
		}
		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iIncidentInstance</LI>
		///		 <LI>iActionInstance</LI>
		/// </UL>
		///		 <LI>iIncidentInstance</LI>
		///		 <LI>iActionInstance</LI>
		///		 <LI>sComments</LI>
		///		 <LI>sUserIDCreated</LI>
		///		 <LI>daDateCreated</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public  void SelectOne(DataTable Table, Int32 Instance)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_IncidentAction_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_INSTANCE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Instance));
			Select(scmCmdToExecute,Table);
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public  void SelectAll(DataTable Table)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_IncidentAction_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(scmCmdToExecute,Table);
		}

		public void SelectByIncidentID(DataTable Table,int IncidentID)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_IncidentAction_SelectByIncidentID]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_INCIDENTINSTANCE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, IncidentID));
			Select(scmCmdToExecute,Table);
		}
		
	}
}
