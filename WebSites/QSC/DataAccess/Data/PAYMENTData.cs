///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'PAYMENT'
// Generated by LLBLGen v1.2.1640.28593 Final
// on: Wednesday, June 30, 2004, 2:19:10 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using tableRef =QSPFulfillment.DataAccess.Common.TableDef.PAYMENTTable;
using QSPFulfillment.DataAccess.Common.ActionObject;

namespace QSPFulfillment.DataAccess.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'PAYMENT'.
	/// </summary>
	public class PAYMENTData : QSPFulfillment.DataAccess.Data.DBTableOperation
	{
		#region Class Member Declarations
		internal const string PARAM_PAYMENT_ID= "@iPAYMENT_ID";
		internal const string PARAM_ACCOUNT_ID= "@iACCOUNT_ID";
		internal const string PARAM_ACCOUNT_TYPE_ID= "@iACCOUNT_TYPE_ID";
		internal const string PARAM_PAYMENT_METHOD_ID= "@iPAYMENT_METHOD_ID";
		internal const string PARAM_PAYMENT_EFFECTIVE_DATE= "@daPAYMENT_EFFECTIVE_DATE";
		internal const string PARAM_CHEQUE_NUMBER= "@sCHEQUE_NUMBER";
		internal const string PARAM_CHEQUE_DATE= "@daCHEQUE_DATE";
		internal const string PARAM_CHEQUE_PAYER= "@sCHEQUE_PAYER";
		internal const string PARAM_CREDIT_CARD_OWNER= "@sCREDIT_CARD_OWNER";
		internal const string PARAM_CREDIT_CARD_AUTHORIZATION= "@sCREDIT_CARD_AUTHORIZATION";
		internal const string PARAM_PAYMENT_AMOUNT= "@dcPAYMENT_AMOUNT";
		internal const string PARAM_NOTE_TO_PRINT= "@sNOTE_TO_PRINT";
		internal const string PARAM_DATETIME_CREATED= "@daDATETIME_CREATED";
		internal const string PARAM_DATETIME_MODIFIED= "@daDATETIME_MODIFIED";
		internal const string PARAM_LAST_UPDATED_BY= "@sLAST_UPDATED_BY";
		internal const string PARAM_ORDER_ID= "@iORDER_ID";
		internal const string PARAM_COUNTRY_CODE= "@sCOUNTRY_CODE";
		internal const string PARAM_CAMPAIGN_ID= "@iCAMPAIGN_ID";
		internal const string PARAM_SEARCH_CRITERIA = "@isearch_type";

		internal const string PARAM_SEARCH_TYPE = "@scriteria";

		//

		// DataSetCommand object

		//

		private SqlCommand insertCommand;

		private SqlCommand deleteCommand;

		private SqlCommand updateCommand;

		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public PAYMENTData()
		{
			// Nothing for now.
		}
		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand("dbo.[pr_PAYMENT_Insert]");
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
				SqlParameterCollection sqlParams = insertCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_PAYMENT_ID,SqlDbType.Int));
				sqlParams[PARAM_PAYMENT_ID].Direction = ParameterDirection.Output;
				sqlParams[PARAM_PAYMENT_ID].SourceColumn = tableRef.FLD_PAYMENT_ID;

				sqlParams.Add(new SqlParameter(PARAM_ACCOUNT_ID,SqlDbType.Int));
				sqlParams[PARAM_ACCOUNT_ID].SourceColumn = tableRef.FLD_ACCOUNT_ID;

				sqlParams.Add(new SqlParameter(PARAM_ACCOUNT_TYPE_ID,SqlDbType.Int));
				sqlParams[PARAM_ACCOUNT_TYPE_ID].SourceColumn = tableRef.FLD_ACCOUNT_TYPE_ID;

				sqlParams.Add(new SqlParameter(PARAM_PAYMENT_METHOD_ID,SqlDbType.Int));
				sqlParams[PARAM_PAYMENT_METHOD_ID].SourceColumn = tableRef.FLD_PAYMENT_METHOD_ID;

				sqlParams.Add(new SqlParameter(PARAM_PAYMENT_EFFECTIVE_DATE,SqlDbType.DateTime));
				sqlParams[PARAM_PAYMENT_EFFECTIVE_DATE].SourceColumn = tableRef.FLD_PAYMENT_EFFECTIVE_DATE;

				sqlParams.Add(new SqlParameter(PARAM_CHEQUE_NUMBER,SqlDbType.VarChar));
				sqlParams[PARAM_CHEQUE_NUMBER].SourceColumn = tableRef.FLD_CHEQUE_NUMBER;

				sqlParams.Add(new SqlParameter(PARAM_CHEQUE_DATE,SqlDbType.DateTime));
				sqlParams[PARAM_CHEQUE_DATE].SourceColumn = tableRef.FLD_CHEQUE_DATE;

				sqlParams.Add(new SqlParameter(PARAM_CHEQUE_PAYER,SqlDbType.VarChar));
				sqlParams[PARAM_CHEQUE_PAYER].SourceColumn = tableRef.FLD_CHEQUE_PAYER;

				sqlParams.Add(new SqlParameter(PARAM_CREDIT_CARD_OWNER,SqlDbType.VarChar));
				sqlParams[PARAM_CREDIT_CARD_OWNER].SourceColumn = tableRef.FLD_CREDIT_CARD_OWNER;

				sqlParams.Add(new SqlParameter(PARAM_CREDIT_CARD_AUTHORIZATION,SqlDbType.VarChar));
				sqlParams[PARAM_CREDIT_CARD_AUTHORIZATION].SourceColumn = tableRef.FLD_CREDIT_CARD_AUTHORIZATION;

				sqlParams.Add(new SqlParameter(PARAM_PAYMENT_AMOUNT,SqlDbType.Decimal));
				sqlParams[PARAM_PAYMENT_AMOUNT].SourceColumn = tableRef.FLD_PAYMENT_AMOUNT;

				sqlParams.Add(new SqlParameter(PARAM_NOTE_TO_PRINT,SqlDbType.VarChar));
				sqlParams[PARAM_NOTE_TO_PRINT].SourceColumn = tableRef.FLD_NOTE_TO_PRINT;

				sqlParams.Add(new SqlParameter(PARAM_DATETIME_CREATED,SqlDbType.DateTime));
				sqlParams[PARAM_DATETIME_CREATED].SourceColumn = tableRef.FLD_DATETIME_CREATED;

				sqlParams.Add(new SqlParameter(PARAM_DATETIME_MODIFIED,SqlDbType.DateTime));
				sqlParams[PARAM_DATETIME_MODIFIED].SourceColumn = tableRef.FLD_DATETIME_MODIFIED;

				sqlParams.Add(new SqlParameter(PARAM_LAST_UPDATED_BY,SqlDbType.VarChar));
				sqlParams[PARAM_LAST_UPDATED_BY].SourceColumn = tableRef.FLD_LAST_UPDATED_BY;

				sqlParams.Add(new SqlParameter(PARAM_ORDER_ID,SqlDbType.Int));
				sqlParams[PARAM_ORDER_ID].SourceColumn = tableRef.FLD_ORDER_ID;

				sqlParams.Add(new SqlParameter(PARAM_COUNTRY_CODE,SqlDbType.VarChar));
				sqlParams[PARAM_COUNTRY_CODE].SourceColumn = tableRef.FLD_COUNTRY_CODE;

				sqlParams.Add(new SqlParameter(PARAM_CAMPAIGN_ID,SqlDbType.Int));
				sqlParams[PARAM_CAMPAIGN_ID].SourceColumn = tableRef.FLD_CAMPAIGN_ID;
			}
			return insertCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand("dbo.[pr_PAYMENT_Delete]");
				deleteCommand.CommandType = CommandType.StoredProcedure;
				SqlParameterCollection sqlParams = deleteCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_PAYMENT_ID,SqlDbType.Int));
				sqlParams[PARAM_PAYMENT_ID].SourceColumn = tableRef.FLD_PAYMENT_ID;
			}
			return deleteCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand("dbo.[pr_PAYMENT_Update]");
				updateCommand.CommandType = CommandType.StoredProcedure;
				updateCommand.UpdatedRowSource = UpdateRowSource.OutputParameters;
				SqlParameterCollection sqlParams = updateCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_PAYMENT_ID,SqlDbType.Int));
				sqlParams[PARAM_PAYMENT_ID].SourceColumn = tableRef.FLD_PAYMENT_ID;

				sqlParams.Add(new SqlParameter(PARAM_ACCOUNT_ID,SqlDbType.Int));
				sqlParams[PARAM_ACCOUNT_ID].SourceColumn = tableRef.FLD_ACCOUNT_ID;

				sqlParams.Add(new SqlParameter(PARAM_ACCOUNT_TYPE_ID,SqlDbType.Int));
				sqlParams[PARAM_ACCOUNT_TYPE_ID].SourceColumn = tableRef.FLD_ACCOUNT_TYPE_ID;

				sqlParams.Add(new SqlParameter(PARAM_PAYMENT_METHOD_ID,SqlDbType.Int));
				sqlParams[PARAM_PAYMENT_METHOD_ID].SourceColumn = tableRef.FLD_PAYMENT_METHOD_ID;

				sqlParams.Add(new SqlParameter(PARAM_PAYMENT_EFFECTIVE_DATE,SqlDbType.DateTime));
				sqlParams[PARAM_PAYMENT_EFFECTIVE_DATE].SourceColumn = tableRef.FLD_PAYMENT_EFFECTIVE_DATE;

				sqlParams.Add(new SqlParameter(PARAM_CHEQUE_NUMBER,SqlDbType.VarChar));
				sqlParams[PARAM_CHEQUE_NUMBER].SourceColumn = tableRef.FLD_CHEQUE_NUMBER;

				sqlParams.Add(new SqlParameter(PARAM_CHEQUE_DATE,SqlDbType.DateTime));
				sqlParams[PARAM_CHEQUE_DATE].SourceColumn = tableRef.FLD_CHEQUE_DATE;

				sqlParams.Add(new SqlParameter(PARAM_CHEQUE_PAYER,SqlDbType.VarChar));
				sqlParams[PARAM_CHEQUE_PAYER].SourceColumn = tableRef.FLD_CHEQUE_PAYER;

				sqlParams.Add(new SqlParameter(PARAM_CREDIT_CARD_OWNER,SqlDbType.VarChar));
				sqlParams[PARAM_CREDIT_CARD_OWNER].SourceColumn = tableRef.FLD_CREDIT_CARD_OWNER;

				sqlParams.Add(new SqlParameter(PARAM_CREDIT_CARD_AUTHORIZATION,SqlDbType.VarChar));
				sqlParams[PARAM_CREDIT_CARD_AUTHORIZATION].SourceColumn = tableRef.FLD_CREDIT_CARD_AUTHORIZATION;

				sqlParams.Add(new SqlParameter(PARAM_PAYMENT_AMOUNT,SqlDbType.Decimal));
				sqlParams[PARAM_PAYMENT_AMOUNT].SourceColumn = tableRef.FLD_PAYMENT_AMOUNT;

				sqlParams.Add(new SqlParameter(PARAM_NOTE_TO_PRINT,SqlDbType.VarChar));
				sqlParams[PARAM_NOTE_TO_PRINT].SourceColumn = tableRef.FLD_NOTE_TO_PRINT;

				sqlParams.Add(new SqlParameter(PARAM_DATETIME_CREATED,SqlDbType.DateTime));
				sqlParams[PARAM_DATETIME_CREATED].SourceColumn = tableRef.FLD_DATETIME_CREATED;

				sqlParams.Add(new SqlParameter(PARAM_DATETIME_MODIFIED,SqlDbType.DateTime));
				sqlParams[PARAM_DATETIME_MODIFIED].SourceColumn = tableRef.FLD_DATETIME_MODIFIED;

				sqlParams.Add(new SqlParameter(PARAM_LAST_UPDATED_BY,SqlDbType.VarChar));
				sqlParams[PARAM_LAST_UPDATED_BY].SourceColumn = tableRef.FLD_LAST_UPDATED_BY;

				sqlParams.Add(new SqlParameter(PARAM_ORDER_ID,SqlDbType.Int));
				sqlParams[PARAM_ORDER_ID].SourceColumn = tableRef.FLD_ORDER_ID;

				sqlParams.Add(new SqlParameter(PARAM_COUNTRY_CODE,SqlDbType.VarChar));
				sqlParams[PARAM_COUNTRY_CODE].SourceColumn = tableRef.FLD_COUNTRY_CODE;

				sqlParams.Add(new SqlParameter(PARAM_CAMPAIGN_ID,SqlDbType.Int));
				sqlParams[PARAM_CAMPAIGN_ID].SourceColumn = tableRef.FLD_CAMPAIGN_ID;
			}
			return updateCommand;
		}
		protected override string TableName
		{
			get
			{
				return tableRef.TBL_PAYMENT;
			}
		}
		public void SelectSearch(DataTable Table,int SearchType,string SearchCriteria)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_PAYMENT_Search";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_TYPE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchType));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_CRITERIA, SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchCriteria));
			Select(cmdToExecute,Table);
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iPAYMENT_ID</LI>
		/// </UL>
		///		 <LI>iPAYMENT_ID</LI>
		///		 <LI>iACCOUNT_ID</LI>
		///		 <LI>iACCOUNT_TYPE_ID</LI>
		///		 <LI>iPAYMENT_METHOD_ID</LI>
		///		 <LI>daPAYMENT_EFFECTIVE_DATE</LI>
		///		 <LI>sCHEQUE_NUMBER</LI>
		///		 <LI>daCHEQUE_DATE</LI>
		///		 <LI>sCHEQUE_PAYER</LI>
		///		 <LI>sCREDIT_CARD_OWNER</LI>
		///		 <LI>sCREDIT_CARD_AUTHORIZATION</LI>
		///		 <LI>dcPAYMENT_AMOUNT</LI>
		///		 <LI>sNOTE_TO_PRINT</LI>
		///		 <LI>daDATETIME_CREATED</LI>
		///		 <LI>daDATETIME_MODIFIED</LI>
		///		 <LI>sLAST_UPDATED_BY</LI>
		///		 <LI>iORDER_ID</LI>
		///		 <LI>sCOUNTRY_CODE</LI>
		///		 <LI>iCAMPAIGN_ID</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public  void SelectOne(DataTable Table, Int32 PAYMENT_ID)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_PAYMENT_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_PAYMENT_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, PAYMENT_ID));
			Select(scmCmdToExecute,Table);
		}

		public void SelectByOrderID(DataTable Table,int OrderID)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_PAYMENT_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_PAYMENT_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, OrderID));
			Select(scmCmdToExecute,Table);
		}
		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public  void SelectAll(DataTable Table)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_PAYMENT_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(scmCmdToExecute,Table);
		}
		public void SelectCustomerCreditCardInformation(DataTable Table,int COHI)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_selectcreditcardinformation]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add("@iCustomerOrderHeaderInstance",COHI);
			
			Select(scmCmdToExecute,Table);
			
		}
      public void SelectCustomerGiftCardInformation(DataTable Table, int COHI)
      {
         SqlCommand scmCmdToExecute = new SqlCommand();
         scmCmdToExecute.CommandText = "dbo.[pr_selectGiftcardinformation]";
         scmCmdToExecute.CommandType = CommandType.StoredProcedure;
         scmCmdToExecute.Parameters.Add("@iCustomerOrderHeaderInstance", COHI);

         Select(scmCmdToExecute, Table);

      }
      public int UpdateCreditCardInformation(CreditCard creditCardInfo, int customerOrderHeaderInstance, int transID, int newCustomerOrderHeaderInstance, bool closeOrder, int problemCode, int communicationChannelInstance, int communicationSourceInstance, double priceToCharge)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_UpdateCreditCardInformation]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add("@CustomerOrderHeaderInstance", customerOrderHeaderInstance);
			scmCmdToExecute.Parameters.Add("@iTransID", transID);
			scmCmdToExecute.Parameters.Add("@iNewCustomerOrderHeaderInstance", newCustomerOrderHeaderInstance);
			scmCmdToExecute.Parameters.Add("@iCloseOrder", closeOrder ? 1 : 0);
			scmCmdToExecute.Parameters.Add("@CreditCardNumber", creditCardInfo.SafeOutPutCreditCardNumber);
			scmCmdToExecute.Parameters.Add("@ExpDate", new DateTime(2000 + Convert.ToInt32(creditCardInfo.ExpirationYear), Convert.ToInt32(creditCardInfo.ExpirationMonth), 1));
			scmCmdToExecute.Parameters.Add("@iPaymentMethodInstance", (int) creditCardInfo.PaymentMethodID);
			scmCmdToExecute.Parameters.Add("@authorization_number", creditCardInfo.AuthorizationCode);
			scmCmdToExecute.Parameters.Add("@iProblemCode", problemCode);
			scmCmdToExecute.Parameters.Add("@iCommunicationChannelInstance", communicationChannelInstance);
			scmCmdToExecute.Parameters.Add("@iCommunicationSourceInstance", communicationSourceInstance);
			scmCmdToExecute.Parameters.Add("@lUserProfileID", creditCardInfo.UserID);
            scmCmdToExecute.Parameters.Add("@priceToCharge", priceToCharge);
			
			return Convert.ToInt32(ExecuteScalar(scmCmdToExecute));
		}

		public void SelectRefundsByCOD(DataTable Table, int CustomerOrderHeaderInstance, int TransID) 
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
            scmCmdToExecute.CommandText = "QSPCanadaFinance..AP_Refund_SelectByCOD";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add("@CustomerOrderHeaderInstance", CustomerOrderHeaderInstance);
			scmCmdToExecute.Parameters.Add("@TransID", TransID);
			
			Select(scmCmdToExecute,Table);
		}

        public double SelectMaxRefundAmountByCustomerOrderDetail(int customerOrderHeaderInstance, int transID)
        {
            string sql = String.Concat("SELECT dbo.UDF_Refund_GetMaxCustomerRefundAmount(",customerOrderHeaderInstance, ",", transID, ")");

            SqlCommand scmCmdToExecute = new SqlCommand();
            scmCmdToExecute.CommandText = sql;
            scmCmdToExecute.CommandType = CommandType.Text;

            return Convert.ToDouble(ExecuteScalar(scmCmdToExecute));
        }

        public int CancelRefund(int RefundID)
        {
            SqlCommand scmCmdToExecute = new SqlCommand();
            scmCmdToExecute.CommandText = "QSPCanadaFinance..AP_Refund_Cancel";
            scmCmdToExecute.CommandType = CommandType.StoredProcedure;
            scmCmdToExecute.Parameters.Add(new SqlParameter("@Refund_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, RefundID));
            return ExecuteCmd(scmCmdToExecute);
        }
	}
}
