///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'Product'
// Generated by LLBLGen v1.2.1655.16789 Final
// on: Tuesday, July 13, 2004, 10:23:38 AM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
//using tableRef =QSPFulfillment.DataAccess.Common.TableDef.ProductTable;


namespace QSPFulfillment.DataAccess.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Product'.
	/// </summary>
	public class CatalogData : QSPFulfillment.DataAccess.Data.DBTableOperation
	{
		#region Class Member Declarations
		internal const string PARAM_PRODUCT_INSTANCE= "@iProduct_Instance";
		internal const string PARAM_PRODUCT_CODE= "@sProduct_Code";
		internal const string PARAM_PRODUCT_YEAR= "@iProduct_Year";
		internal const string PARAM_PRODUCT_SEASON= "@sProduct_Season";
		internal const string PARAM_ALPHA_CODE= "@sAlpha_Code";
		internal const string PARAM_PRODUCT_NAME= "@sProduct_Name";
		internal const string PARAM_PRODUCT_SORT_NAME= "@sProduct_Sort_Name";
		internal const string PARAM_PUB_NBR= "@iPub_Nbr";
		internal const string PARAM_AGES= "@sAges";
		internal const string PARAM_INTERNET= "@sInternet";
		internal const string PARAM_ISSUE_RCVD_DT= "@daIssue_Rcvd_Dt";
		internal const string PARAM_COVERRECEIVED= "@sCoverReceived";
		internal const string PARAM_HIGHLIGHTCOVER= "@iHighlightCover";
		internal const string PARAM_FEATURING= "@iFeaturing";
		internal const string PARAM_STATUS= "@sStatus";
		internal const string PARAM_COMMENT= "@sComment";
		internal const string PARAM_COMMENTDATE= "@daCommentDate";
		internal const string PARAM_CATEGORY_CODE= "@iCategory_Code";
		internal const string PARAM_FULFILL_HOUSE_NBR= "@sFulfill_House_Nbr";
		internal const string PARAM_MAIL_DT= "@sMail_Dt";
		internal const string PARAM_AUTH_FORM_RTRN_DT= "@daAuth_Form_Rtrn_Dt";
		internal const string PARAM_ISSUEDATEUSED= "@sIssueDateUsed";
		internal const string PARAM_LOGGED_BY= "@sLogged_By";
		internal const string PARAM_LOG_DT= "@daLog_Dt";
		internal const string PARAM_LANG= "@sLang";
		internal const string PARAM_PRODUCTLINE= "@iProductLine";
		internal const string PARAM_DAYSLEADTIME= "@iDaysLeadTime";
		internal const string PARAM_VENDORNUMBER= "@sVendorNumber";
		internal const string PARAM_VENDORSITENAME= "@sVendorSiteName";
		internal const string PARAM_PAYGROUPLOOKUPCODE= "@sPayGroupLookUpCode";
		internal const string PARAM_TERMSNAME= "@sTermsName";
		internal const string PARAM_CURRENCY= "@iCurrency";
		internal const string PARAM_COUNTRYCODE= "@sCountryCode";
		internal const string PARAM_TYPE= "@iType";
		internal const string PARAM_UNITOFMEASURE= "@sUnitOfMeasure";
		internal const string PARAM_UOMCONVFACTOR= "@iUOMConvFactor";
		internal const string PARAM_UNITWEIGHT= "@dcUnitWeight";
		internal const string PARAM_UNITCOST= "@dcUnitCost";
		internal const string PARAM_ORACLECODE= "@sOracleCode";
		internal const string PARAM_PRIZE_LEVEL= "@sPrize_Level";
		internal const string PARAM_PRIZE_LEVEL_QTY_REQUIRED= "@iPrize_Level_Qty_Required";
		internal const string PARAM_SEARCH_CRITERIA = "@isearch_type";

		internal const string PARAM_SEARCH_TYPE = "@scriteria";

		//

		// DataSetCommand object

		//

		private SqlCommand insertCommand;

		private SqlCommand deleteCommand;

		private SqlCommand updateCommand;

		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public CatalogData()
		{
			// Nothing for now.
		}
		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			insertCommand = null;

			return insertCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			deleteCommand = null;

			return deleteCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			updateCommand = null;

			return updateCommand;
		}
		protected override string TableName
		{
			get
			{
				return "QSPCanadaProduct.dbo.Program_Master";
			}
		}

		public void SelectSearch(DataTable table, string code, string name, int year, string season, int type, string language, int status, int campaignID, string productCode)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_SelectCatalogForMarketingMgt";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@sCatalogCode", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, code));
			cmdToExecute.Parameters.Add(new SqlParameter("@sCatalogName", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, name));
			cmdToExecute.Parameters.Add(new SqlParameter("@iCatalogYear", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, year));
			cmdToExecute.Parameters.Add(new SqlParameter("@sCatalogSeason", SqlDbType.VarChar, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, season));
			cmdToExecute.Parameters.Add(new SqlParameter("@iCatalogType", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, type));
			cmdToExecute.Parameters.Add(new SqlParameter("@sCatalogLang", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, language));
			cmdToExecute.Parameters.Add(new SqlParameter("@iCatalogStatus", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, status));
			cmdToExecute.Parameters.Add(new SqlParameter("@iCampaignID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, campaignID));
			cmdToExecute.Parameters.Add(new SqlParameter("@sProductCode", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productCode));
			Select(cmdToExecute, table);
		}

		public void SelectAllCatalogFinancialYears(DataTable Table)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_SelectAllCatalogFinancialYears";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(cmdToExecute,Table);
		}

		public void SelectAllCatalogSeasons(DataTable Table)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_SelectAllCatalogSeasons";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(cmdToExecute,Table);
		}

		public void SelectAllCatalogTypes(DataTable Table)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_SelectAllCatalogTypes";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(cmdToExecute,Table);
		}

		public void SelectAllCatalogStatus(DataTable Table)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_SelectAllCatalogStatus";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(cmdToExecute,Table);
		}

		public void SelectAllPremiums(DataTable Table, int Year, string Season)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_SelectAllPremiums";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iYear", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Year));
			cmdToExecute.Parameters.Add(new SqlParameter("@zSeason", SqlDbType.VarChar, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Season));
			Select(cmdToExecute,Table);
		}

		public void SelectAllPayGroupLookUpCodes(DataTable Table)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_SelectAllPayGroupLookUpCodes";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(cmdToExecute,Table);
		}

		public void SelectAllVendorSiteNames(DataTable Table)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_SelectAllVendorSiteNames";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(cmdToExecute,Table);
		}

		public void SelectAllPhones(DataTable Table)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_SelectAllPhones";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(cmdToExecute,Table);
		}

		public void SelectAllPhones(DataTable Table, int PhoneListID)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_SelectAllPhones";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iPhoneListID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, PhoneListID));
			Select(cmdToExecute,Table);
		}

		public void SelectSeason(DataTable Table, int Year, string Season)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_SelectSeason";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iYear", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Year));
			cmdToExecute.Parameters.Add(new SqlParameter("@zSeason", SqlDbType.VarChar, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Season));
			Select(cmdToExecute,Table);
		}

		public double SelectGSTTaxRate() 
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaCommon.dbo.pr_SelectTaxRate";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iTaxRegionID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, 1));
			return Convert.ToDouble(ExecuteScalar(cmdToExecute));
		}

		public double SelectHSTTaxRate() 
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaCommon.dbo.pr_SelectTaxRate";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iTaxRegionID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, 2));
			return Convert.ToDouble(ExecuteScalar(cmdToExecute));
		}

		public int InsertCatalogInformations(string CatalogCode, string CatalogName, int CatalogType, string Language, int Year, string Season, int CatalogStatus, string IsReplacement, string UserID)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_InsertCatalog";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@zCatalogCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CatalogCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@zCatalogName", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CatalogName));
			cmdToExecute.Parameters.Add(new SqlParameter("@iCatalogType", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CatalogType));
			cmdToExecute.Parameters.Add(new SqlParameter("@zLanguage", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Language));
			cmdToExecute.Parameters.Add(new SqlParameter("@iYear", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Year));
			cmdToExecute.Parameters.Add(new SqlParameter("@zSeason", SqlDbType.VarChar, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Season));
			cmdToExecute.Parameters.Add(new SqlParameter("@iCatalogStatus", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CatalogStatus));
			cmdToExecute.Parameters.Add(new SqlParameter("@zIsReplacement", SqlDbType.VarChar, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, IsReplacement));
			cmdToExecute.Parameters.Add(new SqlParameter("@zUserID", SqlDbType.VarChar, 30, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, UserID));
			return Convert.ToInt32(ExecuteScalar(cmdToExecute));
		}

		public int InsertProductCategory(string Description)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_InsertProductCategory";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@zDescription", SqlDbType.VarChar, 64, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Description));
			return Convert.ToInt32(ExecuteScalar(cmdToExecute));
		}

		public int InsertPremiumInformations(string PremiumCode, int Year, string Season, int IsActive, string EnglishDescription, string FrenchDescription, string UserID)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_InsertPremium";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@zPremiumCode", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, PremiumCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@iYear", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Year));
			cmdToExecute.Parameters.Add(new SqlParameter("@zSeason", SqlDbType.VarChar, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Season));
			cmdToExecute.Parameters.Add(new SqlParameter("@iIsActive", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, IsActive));
			cmdToExecute.Parameters.Add(new SqlParameter("@zEnglishDescription", SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, EnglishDescription));
			cmdToExecute.Parameters.Add(new SqlParameter("@zFrenchDescription", SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FrenchDescription));
			cmdToExecute.Parameters.Add(new SqlParameter("@zUserID", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, UserID));
			return Convert.ToInt32(ExecuteScalar(cmdToExecute));
		}

		public int InsertPhoneInformations(int Type, int PhoneListID, string PhoneNumber, string BestTimeToCall)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_InsertPhone";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iType", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Type));
			cmdToExecute.Parameters.Add(new SqlParameter("@iPhoneListID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, PhoneListID));
			cmdToExecute.Parameters.Add(new SqlParameter("@zPhoneNumber", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, PhoneNumber));
			cmdToExecute.Parameters.Add(new SqlParameter("@zBestTimeToCall", SqlDbType.VarChar, 2000, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, BestTimeToCall));
			return Convert.ToInt32(ExecuteScalar(cmdToExecute));
		}

		public int UpdateCatalogInformations(int CatalogID, string CatalogCode, string CatalogName, int CatalogType, string Language, int Year, string Season, int CatalogStatus, string IsReplacement, string UserID)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_UpdateCatalog";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iCatalogID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CatalogID));
			cmdToExecute.Parameters.Add(new SqlParameter("@zCatalogCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CatalogCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@zCatalogName", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CatalogName));
			cmdToExecute.Parameters.Add(new SqlParameter("@iCatalogType", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CatalogType));
			cmdToExecute.Parameters.Add(new SqlParameter("@zLanguage", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Language));
			cmdToExecute.Parameters.Add(new SqlParameter("@iYear", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Year));
			cmdToExecute.Parameters.Add(new SqlParameter("@zSeason", SqlDbType.VarChar, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Season));
			cmdToExecute.Parameters.Add(new SqlParameter("@iCatalogStatus", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CatalogStatus));
			cmdToExecute.Parameters.Add(new SqlParameter("@zIsReplacement", SqlDbType.VarChar, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, IsReplacement));
			cmdToExecute.Parameters.Add(new SqlParameter("@zUserID", SqlDbType.VarChar, 30, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, UserID));
			return ExecuteCmd(cmdToExecute);
		}

		public int UpdateProductCategory(int CategoryID, string Description)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_UpdateProductCategory";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iCategoryID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CategoryID));
			cmdToExecute.Parameters.Add(new SqlParameter("@zDescription", SqlDbType.VarChar, 64, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Description));
			return ExecuteCmd(cmdToExecute);
		}

		public int UpdatePremiumInformations(int PremiumID, string PremiumCode, int Year, string Season, int IsActive, string EnglishDescription, string FrenchDescription, string UserID)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_UpdatePremium";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iPremiumID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, PremiumID));
			cmdToExecute.Parameters.Add(new SqlParameter("@zPremiumCode", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, PremiumCode));
			cmdToExecute.Parameters.Add(new SqlParameter("@iYear", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Year));
			cmdToExecute.Parameters.Add(new SqlParameter("@zSeason", SqlDbType.VarChar, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Season));
			cmdToExecute.Parameters.Add(new SqlParameter("@iIsActive", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, IsActive));
			cmdToExecute.Parameters.Add(new SqlParameter("@zEnglishDescription", SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, EnglishDescription));
			cmdToExecute.Parameters.Add(new SqlParameter("@zFrenchDescription", SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FrenchDescription));
			cmdToExecute.Parameters.Add(new SqlParameter("@zUserID", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, UserID));
			return ExecuteCmd(cmdToExecute);
		}

		public int UpdatePhoneInformations(int PhoneID, int Type, string PhoneNumber, string BestTimeToCall)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_UpdatePhone";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iPhoneID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, PhoneID));
			cmdToExecute.Parameters.Add(new SqlParameter("@iType", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Type));
			cmdToExecute.Parameters.Add(new SqlParameter("@zPhoneNumber", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, PhoneNumber));
			cmdToExecute.Parameters.Add(new SqlParameter("@zBestTimeToCall", SqlDbType.VarChar, 2000, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, BestTimeToCall));
			return ExecuteCmd(cmdToExecute);
		}

		//delete catalog, given catalogID
		public int DeleteCatalog(int catalogID)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_DeleteCatalogByCatalogID";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iCatalogID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, catalogID));
			return ExecuteCmd(cmdToExecute);
		}

		public int DeletePhone(int PhoneID)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_DeletePhone";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iPhoneID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, PhoneID));
			return ExecuteCmd(cmdToExecute);
		}

		//verify if catalog code already exists in the system
		public int SelectCatalogCount(int catalogID, string catalogCode)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_SelectCatalogCount";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iCatalogID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, catalogID));
			cmdToExecute.Parameters.Add(new SqlParameter("@sCatalogCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, catalogCode));
			return Convert.ToInt32(ExecuteScalar(cmdToExecute));
		}

		//verify if catalog has any customer orders associated with it
		public int SelectCustomerOrderDetailCount(int catalogID) 
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_SelectCustomerOrderDetailCountByCatalogID";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iCatalogID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, catalogID));
			return Convert.ToInt32(ExecuteScalar(cmdToExecute));
		}

		public void CatalogSelectByCatalogSectionID(DataTable Table, int programSectionID) 
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_Catalog_SelectByCatalogSectionID";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iProgramSectionID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, programSectionID));
			Select(cmdToExecute,Table);
		}
	}
}