///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'CodeDetail'
// Generated by LLBLGen v1.2.1594.24829 Final
// on: Tuesday, June 22, 2004, 4:35:15 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using tableRef =QSPFulfillment.DataAccess.Common.TableDef.PublisherContactProductTable;


namespace QSPFulfillment.DataAccess.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'CodeDetail'.
	/// </summary>
	public class PublisherContactProductData : QSPFulfillment.DataAccess.Data.DBTableOperation
	{
		#region Class Member Declarations
		internal const string PARAM_ID= "@iID";
		internal const string PARAM_PUBLISHERCONTACTID= "@iPublisherContactID";
		internal const string PARAM_PRODUCT_CODE= "@zProductCode";
		internal const string PARAM_DATECREATED= "@dDateCreated";
		internal const string PARAM_USERIDCREATED= "@iUserIDCreated";
		internal const string PARAM_DATECHANGED= "@dDateChanged";
		internal const string PARAM_USERIDCHANGED= "@iUserIDChanged";
		internal const string PARAM_DELETEDTF= "@bDeletedTF";
		internal const string PARAM_USERID= "@iUserID";

		//

		// DataSetCommand object

		//

		private SqlCommand insertCommand;

		private SqlCommand deleteCommand;

		private SqlCommand updateCommand;

		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public PublisherContactProductData()
		{
			// Nothing for now.
		}
		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand("QSPCanadaProduct.dbo.[pr_PublisherContactProduct_Insert]");
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
				SqlParameterCollection sqlParams = insertCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_ID,SqlDbType.Int));
				sqlParams[PARAM_ID].SourceColumn = tableRef.FLD_ID;

				sqlParams.Add(new SqlParameter(PARAM_PUBLISHERCONTACTID,SqlDbType.Int));
				sqlParams[PARAM_PUBLISHERCONTACTID].SourceColumn = tableRef.FLD_PUBLISHERCONTACTID;

				sqlParams.Add(new SqlParameter(PARAM_PRODUCT_CODE,SqlDbType.VarChar));
				sqlParams[PARAM_PRODUCT_CODE].SourceColumn = tableRef.FLD_PRODUCT_CODE;

				sqlParams.Add(new SqlParameter(PARAM_DATECREATED,SqlDbType.DateTime));
				sqlParams[PARAM_DATECREATED].SourceColumn = tableRef.FLD_DATECREATED;

				sqlParams.Add(new SqlParameter(PARAM_USERIDCREATED,SqlDbType.Int));
				sqlParams[PARAM_USERIDCREATED].SourceColumn = tableRef.FLD_USERIDCREATED;

				sqlParams.Add(new SqlParameter(PARAM_DATECHANGED,SqlDbType.DateTime));
				sqlParams[PARAM_DATECHANGED].SourceColumn = tableRef.FLD_DATECHANGED;

				sqlParams.Add(new SqlParameter(PARAM_USERIDCHANGED,SqlDbType.Int));
				sqlParams[PARAM_USERIDCHANGED].SourceColumn = tableRef.FLD_USERIDCHANGED;

				sqlParams.Add(new SqlParameter(PARAM_DELETEDTF,SqlDbType.Bit));
				sqlParams[PARAM_DELETEDTF].SourceColumn = tableRef.FLD_DELETEDTF;
			}
			return insertCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand("QSPCanadaProduct.dbo.[pr_PublisherContactProduct_Delete]");
				deleteCommand.CommandType = CommandType.StoredProcedure;
				SqlParameterCollection sqlParams = deleteCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_ID,SqlDbType.Int));
				sqlParams[PARAM_ID].SourceColumn = tableRef.FLD_ID;
			}
			return deleteCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand("QSPCanadaProduct.dbo.[pr_PublisherContactProduct_Update]");
				updateCommand.CommandType = CommandType.StoredProcedure;
				updateCommand.UpdatedRowSource = UpdateRowSource.OutputParameters;
				SqlParameterCollection sqlParams = updateCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_ID,SqlDbType.Int));
				sqlParams[PARAM_ID].SourceColumn = tableRef.FLD_ID;

				sqlParams.Add(new SqlParameter(PARAM_PUBLISHERCONTACTID,SqlDbType.Int));
				sqlParams[PARAM_PUBLISHERCONTACTID].SourceColumn = tableRef.FLD_PUBLISHERCONTACTID;

				sqlParams.Add(new SqlParameter(PARAM_PRODUCT_CODE,SqlDbType.VarChar));
				sqlParams[PARAM_PRODUCT_CODE].SourceColumn = tableRef.FLD_PRODUCT_CODE;

				sqlParams.Add(new SqlParameter(PARAM_DATECREATED,SqlDbType.DateTime));
				sqlParams[PARAM_DATECREATED].SourceColumn = tableRef.FLD_DATECREATED;

				sqlParams.Add(new SqlParameter(PARAM_USERIDCREATED,SqlDbType.Int));
				sqlParams[PARAM_USERIDCREATED].SourceColumn = tableRef.FLD_USERIDCREATED;

				sqlParams.Add(new SqlParameter(PARAM_DATECHANGED,SqlDbType.DateTime));
				sqlParams[PARAM_DATECHANGED].SourceColumn = tableRef.FLD_DATECHANGED;

				sqlParams.Add(new SqlParameter(PARAM_USERIDCHANGED,SqlDbType.Int));
				sqlParams[PARAM_USERIDCHANGED].SourceColumn = tableRef.FLD_USERIDCHANGED;

				sqlParams.Add(new SqlParameter(PARAM_DELETEDTF,SqlDbType.Bit));
				sqlParams[PARAM_DELETEDTF].SourceColumn = tableRef.FLD_DELETEDTF;
			}
			return updateCommand;
		}
		protected override string TableName
		{
			get
			{
				return tableRef.TBL_PUBLISHERCONTACT_PRODUCT;
			}
		}
		public void SelectAllByPublisherContactID(DataTable table, int publisherContactID)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_PublisherContactProduct_SelectAllByPublisherContactID";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PUBLISHERCONTACTID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, publisherContactID));
			Select(cmdToExecute, table);
		}

		public int Insert(int publisherContactID, string productCode, int userID)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_PublisherContactProduct_Insert";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PUBLISHERCONTACTID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, publisherContactID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PRODUCT_CODE, SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, productCode));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_USERID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, userID));
			return Convert.ToInt32(ExecuteScalar(cmdToExecute));
		}

		public void Delete(int id)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QSPCanadaProduct.dbo.pr_PublisherContactProduct_Delete";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, id));
			ExecuteCmd(cmdToExecute);
		}
	}
}
