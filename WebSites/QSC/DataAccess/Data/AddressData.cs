///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'Address'
// Generated by LLBLGen v1.2.1712.15942 Final
// on: Wednesday, September 08, 2004, 9:53:14 AM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using tableRef =QSPFulfillment.DataAccess.Common.TableDef.AddressTable;


namespace QSPFulfillment.DataAccess.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Address'.
	/// </summary>
	public class AddressData : QSPFulfillment.DataAccess.Data.DBTableOperation
	{
		#region Class Member Declarations
		internal const string PARAM_ADDRESS_ID= "@address_id";
		internal const string PARAM_STREET1= "@street1";
		internal const string PARAM_STREET2= "@street2";
		internal const string PARAM_CITY= "@city";
		internal const string PARAM_STATEPROVINCE= "@stateProvince";
		internal const string PARAM_POSTAL_CODE= "@postal_code";
		internal const string PARAM_ZIP4= "@zip4";
		internal const string PARAM_COUNTRY= "@country";
		internal const string PARAM_ADDRESS_TYPE= "@address_type";
		internal const string PARAM_ADDRESSLISTID= "@AddressListID";
		//

		// DataSetCommand object

		//

		private SqlCommand insertCommand;

		private SqlCommand deleteCommand;

		private SqlCommand updateCommand;

		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public AddressData()
		{
			// Nothing for now.
		}
		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand("qspcanadacommon..pr_ins_Address");
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
				SqlParameterCollection sqlParams = insertCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_ADDRESS_ID,SqlDbType.Int));
				sqlParams[PARAM_ADDRESS_ID].Direction = ParameterDirection.Output;
				sqlParams[PARAM_ADDRESS_ID].SourceColumn = tableRef.FLD_ADDRESS_ID;

				sqlParams.Add(new SqlParameter(PARAM_STREET1,SqlDbType.VarChar));
				sqlParams[PARAM_STREET1].SourceColumn = tableRef.FLD_STREET1;

				sqlParams.Add(new SqlParameter(PARAM_STREET2,SqlDbType.VarChar));
				sqlParams[PARAM_STREET2].SourceColumn = tableRef.FLD_STREET2;

				sqlParams.Add(new SqlParameter(PARAM_CITY,SqlDbType.VarChar));
				sqlParams[PARAM_CITY].SourceColumn = tableRef.FLD_CITY;

				sqlParams.Add(new SqlParameter(PARAM_STATEPROVINCE,SqlDbType.VarChar));
				sqlParams[PARAM_STATEPROVINCE].SourceColumn = tableRef.FLD_STATEPROVINCE;

				sqlParams.Add(new SqlParameter(PARAM_POSTAL_CODE,SqlDbType.VarChar));
				sqlParams[PARAM_POSTAL_CODE].SourceColumn = tableRef.FLD_POSTAL_CODE;

				sqlParams.Add(new SqlParameter(PARAM_ZIP4,SqlDbType.VarChar));
				sqlParams[PARAM_ZIP4].SourceColumn = tableRef.FLD_ZIP4;

				sqlParams.Add(new SqlParameter(PARAM_COUNTRY,SqlDbType.VarChar));
				sqlParams[PARAM_COUNTRY].SourceColumn = tableRef.FLD_COUNTRY;

				sqlParams.Add(new SqlParameter(PARAM_ADDRESS_TYPE,SqlDbType.Int));
				sqlParams[PARAM_ADDRESS_TYPE].SourceColumn = tableRef.FLD_ADDRESS_TYPE;

				sqlParams.Add(new SqlParameter(PARAM_ADDRESSLISTID,SqlDbType.Int));
				sqlParams[PARAM_ADDRESSLISTID].SourceColumn = tableRef.FLD_ADDRESSLISTID;
			}
			return insertCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand("dbo.[pr_Address_Delete]");
				deleteCommand.CommandType = CommandType.StoredProcedure;
				SqlParameterCollection sqlParams = deleteCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_ADDRESS_ID,SqlDbType.Int));
				sqlParams[PARAM_ADDRESS_ID].SourceColumn = tableRef.FLD_ADDRESS_ID;
			}
			return deleteCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand("qspcanadacommon..pr_upd_Address_by_id");
				updateCommand.CommandType = CommandType.StoredProcedure;
				updateCommand.UpdatedRowSource = UpdateRowSource.OutputParameters;
				SqlParameterCollection sqlParams = updateCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_ADDRESS_ID,SqlDbType.Int));
				sqlParams[PARAM_ADDRESS_ID].SourceColumn = tableRef.FLD_ADDRESS_ID;

				sqlParams.Add(new SqlParameter(PARAM_STREET1,SqlDbType.VarChar));
				sqlParams[PARAM_STREET1].SourceColumn = tableRef.FLD_STREET1;

				sqlParams.Add(new SqlParameter(PARAM_STREET2,SqlDbType.VarChar));
				sqlParams[PARAM_STREET2].SourceColumn = tableRef.FLD_STREET2;

				sqlParams.Add(new SqlParameter(PARAM_CITY,SqlDbType.VarChar));
				sqlParams[PARAM_CITY].SourceColumn = tableRef.FLD_CITY;

				sqlParams.Add(new SqlParameter(PARAM_STATEPROVINCE,SqlDbType.VarChar));
				sqlParams[PARAM_STATEPROVINCE].SourceColumn = tableRef.FLD_STATEPROVINCE;

				sqlParams.Add(new SqlParameter(PARAM_POSTAL_CODE,SqlDbType.VarChar));
				sqlParams[PARAM_POSTAL_CODE].SourceColumn = tableRef.FLD_POSTAL_CODE;

				sqlParams.Add(new SqlParameter(PARAM_ZIP4,SqlDbType.VarChar));
				sqlParams[PARAM_ZIP4].SourceColumn = tableRef.FLD_ZIP4;

				sqlParams.Add(new SqlParameter(PARAM_COUNTRY,SqlDbType.VarChar));
				sqlParams[PARAM_COUNTRY].SourceColumn = tableRef.FLD_COUNTRY;

				sqlParams.Add(new SqlParameter(PARAM_ADDRESS_TYPE,SqlDbType.Int));
				sqlParams[PARAM_ADDRESS_TYPE].SourceColumn = tableRef.FLD_ADDRESS_TYPE;

				sqlParams.Add(new SqlParameter(PARAM_ADDRESSLISTID,SqlDbType.Int));
				sqlParams[PARAM_ADDRESSLISTID].SourceColumn = tableRef.FLD_ADDRESSLISTID;
			}
			return updateCommand;
		}
		protected override string TableName
		{
			get
			{
				return tableRef.TBL_ADDRESS;
			}
		}
		


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iAddress_id</LI>
		/// </UL>
		///		 <LI>iAddress_id</LI>
		///		 <LI>sStreet1</LI>
		///		 <LI>sStreet2</LI>
		///		 <LI>sCity</LI>
		///		 <LI>sStateProvince</LI>
		///		 <LI>sPostal_code</LI>
		///		 <LI>sZip4</LI>
		///		 <LI>sCountry</LI>
		///		 <LI>iAddress_type</LI>
		///		 <LI>iAddressListID</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public  void SelectOne(DataTable Table, Int32 AddressListID)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "qspcanadacommon..pr_Get_Address_By_AddressListID";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_ADDRESSLISTID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, AddressListID));
			Select(scmCmdToExecute,Table);
		}

		public  void SelectShippingAddressByAddressListID(DataTable Table, Int32 AddressListID)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "qspcanadacommon..pr_Address_SelectShippingAddressByAddressListID";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_ADDRESSLISTID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, AddressListID));
			Select(scmCmdToExecute,Table);
		}

		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public  void SelectAll(DataTable Table)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_Address_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(scmCmdToExecute,Table);
		}
		
		//Todo, add integernullable class to allow sending null int's
		/// <summary>
		/// Purpose: Selects row(s) from the Address Table
		/// </summary>
		public void AddressSelectAll(DataTable Table, Int32 Address_ID, string Street1, string Street2, string City, string StateProvince, string Postal_Code, string Zip4, string Country, Int32 Address_Type, Int32 AddressListID)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "qspcanadacommon..pr_Address_SelectAll";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
//			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_ADDRESS_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Address_ID));
//			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_STREET1, SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Street1));
//			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_STREET2, SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Street2));
//			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_CITY, SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, City));
//			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_STATEPROVINCE, SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, StateProvince));
//			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_POSTAL_CODE, SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Postal_Code));
//			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_ZIP4, SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Zip4));
//			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_COUNTRY, SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Country));
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_ADDRESS_TYPE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Address_Type));
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_ADDRESSLISTID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, AddressListID));
			Select(scmCmdToExecute,Table);
		}

		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'address_type'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iAddress_type</LI>
		/// </UL>
		/// </remarks>
		public void SelectAllWaddress_typeLogic(DataTable Table, Int32 address_type)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_Address_SelectAllWaddress_typeLogic]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_ADDRESS_TYPE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, address_type));
			Select(scmCmdToExecute,Table);
		}
	}
}
