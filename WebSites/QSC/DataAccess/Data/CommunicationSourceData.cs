///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'CommunicationSource'
// Generated by LLBLGen v1.2.1635.19725 Final
// on: Wednesday, June 23, 2004, 3:58:46 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using tableRef =QSPFulfillment.DataAccess.Common.TableDef.CommunicationSourceTable;


namespace QSPFulfillment.DataAccess.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'CommunicationSource'.
	/// </summary>
	public class CommunicationSourceData : QSPFulfillment.DataAccess.Data.DBTableOperation
	{
		#region Class Member Declarations
				 internal const string PARAM_INSTANCE= "@iInstance";
				 internal const string PARAM_DESCRIPTION= "@sDescription";
				 internal const string PARAM_SEARCH_CRITERIA = "@isearch_type";

				 internal const string PARAM_SEARCH_TYPE = "@scriteria";

//

// DataSetCommand object

//

private SqlCommand insertCommand;

private SqlCommand deleteCommand;

private SqlCommand updateCommand;

		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public CommunicationSourceData()
		{
			// Nothing for now.
		}
//----------------------------------------------------------------
// Sub GetInsertCommand:
//   Initialize the parameterized Insert command for the DataAdapter
//----------------------------------------------------------------
protected override SqlCommand GetInsertCommand()
{
	if ( insertCommand == null )
	{
		//
		// Construct the command since we don't have it already
		// 
		insertCommand = new SqlCommand("dbo.[pr_CommunicationSource_Insert]");
		insertCommand.CommandType = CommandType.StoredProcedure;
		insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
		SqlParameterCollection sqlParams = insertCommand.Parameters;

sqlParams.Add(new SqlParameter(PARAM_INSTANCE,SqlDbType.Int));
sqlParams[PARAM_INSTANCE].SourceColumn = tableRef.FLD_INSTANCE;

sqlParams.Add(new SqlParameter(PARAM_DESCRIPTION,SqlDbType.VarChar));
sqlParams[PARAM_DESCRIPTION].SourceColumn = tableRef.FLD_DESCRIPTION;
}
return insertCommand;
}
//----------------------------------------------------------------
// Sub BuildUpdateCommand:
//   Initialize the parameterized Update command for the DataAdapter
//----------------------------------------------------------------
protected override SqlCommand GetDeleteCommand()
{
	if ( deleteCommand == null )
	{
		//
		// Construct the command since we don't have it already
		//
		deleteCommand = new SqlCommand("dbo.[pr_CommunicationSource_Delete]");
		deleteCommand.CommandType = CommandType.StoredProcedure;
		SqlParameterCollection sqlParams = deleteCommand.Parameters;

sqlParams.Add(new SqlParameter(PARAM_INSTANCE,SqlDbType.Int));
sqlParams[PARAM_INSTANCE].SourceColumn = tableRef.FLD_INSTANCE;
	}
	return deleteCommand;
}
//----------------------------------------------------------------
// Sub BuildUpdateCommand:
//   Initialize the parameterized Update command for the DataAdapter
//----------------------------------------------------------------
protected override SqlCommand GetUpdateCommand()
{
	if ( updateCommand == null )
	{
		//
		// Construct the command since we don't have it already
		//
		updateCommand = new SqlCommand("dbo.[pr_CommunicationSource_Update]");
		updateCommand.CommandType = CommandType.StoredProcedure;
		updateCommand.UpdatedRowSource = UpdateRowSource.OutputParameters;
SqlParameterCollection sqlParams = updateCommand.Parameters;

sqlParams.Add(new SqlParameter(PARAM_INSTANCE,SqlDbType.Int));
sqlParams[PARAM_INSTANCE].SourceColumn = tableRef.FLD_INSTANCE;

sqlParams.Add(new SqlParameter(PARAM_DESCRIPTION,SqlDbType.VarChar));
sqlParams[PARAM_DESCRIPTION].SourceColumn = tableRef.FLD_DESCRIPTION;
	}
	return updateCommand;
}
protected override string TableName
{
get{return tableRef.TBL_COMMUNICATIONSOURCE;
}
}
public void SelectSearch(DataTable Table,int SearchType,string SearchCriteria)
{
SqlCommand	cmdToExecute = new SqlCommand();
cmdToExecute.CommandText = "dbo.pr_CommunicationSource_Search";
cmdToExecute.CommandType = CommandType.StoredProcedure;
cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_TYPE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchType));
cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_CRITERIA, SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchCriteria));
Select(cmdToExecute,Table);
}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iInstance</LI>
		/// </UL>
		///		 <LI>iInstance</LI>
		///		 <LI>sDescription</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public  void SelectOne(DataTable Table, Int32 Instance)		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_CommunicationSource_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
				scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_INSTANCE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Instance));
Select(scmCmdToExecute,Table);
			}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public  void SelectAll(DataTable Table)		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_CommunicationSource_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
Select(scmCmdToExecute,Table);
			}
	}
}
