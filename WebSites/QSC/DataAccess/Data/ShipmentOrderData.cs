///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'ShipmentOrder'
// Generated by LLBLGen v1.2.1655.16789 Final
// on: Friday, July 23, 2004, 3:19:02 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using tableRef =QSPFulfillment.DataAccess.Common.TableDef.ShipmentOrderTable;


namespace QSPFulfillment.DataAccess.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'ShipmentOrder'.
	/// </summary>
	public class ShipmentOrderData : QSPFulfillment.DataAccess.Data.DBTableOperation
	{
		#region Class Member Declarations
		internal const string PARAM_SHIPMENTID= "@iShipmentID";
		internal const string PARAM_ORDERID= "@iOrderID";
		internal const string PARAM_SHIPMENTBATCHID= "@iShipmentBatchID";
		internal const string PARAM_ISSHIPMENTBATCHCREATED= "@bIsShipmentBatchCreated";
		internal const string PARAM_SEARCH_CRITERIA = "@isearch_type";

		internal const string PARAM_SEARCH_TYPE = "@scriteria";

		//

		// DataSetCommand object

		//

		private SqlCommand insertCommand;

		private SqlCommand deleteCommand;

		private SqlCommand updateCommand;

		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public ShipmentOrderData()
		{
			// Nothing for now.
		}
		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand("dbo.[pr_ShipmentOrder_Insert]");
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
				SqlParameterCollection sqlParams = insertCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_SHIPMENTID,SqlDbType.Int));
				sqlParams[PARAM_SHIPMENTID].SourceColumn = tableRef.FLD_SHIPMENTID;

				sqlParams.Add(new SqlParameter(PARAM_ORDERID,SqlDbType.Int));
				sqlParams[PARAM_ORDERID].SourceColumn = tableRef.FLD_ORDERID;

				sqlParams.Add(new SqlParameter(PARAM_SHIPMENTBATCHID,SqlDbType.Int));
				sqlParams[PARAM_SHIPMENTBATCHID].SourceColumn = tableRef.FLD_SHIPMENTBATCHID;

				sqlParams.Add(new SqlParameter(PARAM_ISSHIPMENTBATCHCREATED,SqlDbType.Bit));
				sqlParams[PARAM_ISSHIPMENTBATCHCREATED].SourceColumn = tableRef.FLD_ISSHIPMENTBATCHCREATED;
			}
			return insertCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand("dbo.[pr_ShipmentOrder_Delete]");
				deleteCommand.CommandType = CommandType.StoredProcedure;
				SqlParameterCollection sqlParams = deleteCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_SHIPMENTID,SqlDbType.Int));
				sqlParams[PARAM_SHIPMENTID].SourceColumn = tableRef.FLD_SHIPMENTID;

				sqlParams.Add(new SqlParameter(PARAM_ORDERID,SqlDbType.Int));
				sqlParams[PARAM_ORDERID].SourceColumn = tableRef.FLD_ORDERID;
			}
			return deleteCommand;
		}
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand("dbo.[pr_ShipmentOrder_Update]");
				updateCommand.CommandType = CommandType.StoredProcedure;
				updateCommand.UpdatedRowSource = UpdateRowSource.OutputParameters;
				SqlParameterCollection sqlParams = updateCommand.Parameters;

				sqlParams.Add(new SqlParameter(PARAM_SHIPMENTID,SqlDbType.Int));
				sqlParams[PARAM_SHIPMENTID].SourceColumn = tableRef.FLD_SHIPMENTID;

				sqlParams.Add(new SqlParameter(PARAM_ORDERID,SqlDbType.Int));
				sqlParams[PARAM_ORDERID].SourceColumn = tableRef.FLD_ORDERID;

				sqlParams.Add(new SqlParameter(PARAM_SHIPMENTBATCHID,SqlDbType.Int));
				sqlParams[PARAM_SHIPMENTBATCHID].SourceColumn = tableRef.FLD_SHIPMENTBATCHID;

				sqlParams.Add(new SqlParameter(PARAM_ISSHIPMENTBATCHCREATED,SqlDbType.Bit));
				sqlParams[PARAM_ISSHIPMENTBATCHCREATED].SourceColumn = tableRef.FLD_ISSHIPMENTBATCHCREATED;
			}
			return updateCommand;
		}
		protected override string TableName
		{
			get
			{
				return tableRef.TBL_SHIPMENTORDER;
			}
		}
		public void SelectSearch(DataTable Table,int SearchType,string SearchCriteria)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_ShipmentOrder_Search";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_TYPE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchType));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_CRITERIA, SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchCriteria));
			Select(cmdToExecute,Table);
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iShipmentID</LI>
		///		 <LI>iOrderID</LI>
		/// </UL>
		///		 <LI>iShipmentID</LI>
		///		 <LI>iOrderID</LI>
		///		 <LI>iShipmentBatchID</LI>
		///		 <LI>bIsShipmentBatchCreated</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public  void SelectOne(DataTable Table, Int32 ShipmentID, Int32 OrderID)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_ShipmentOrder_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_SHIPMENTID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ShipmentID));
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_ORDERID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, OrderID));
			Select(scmCmdToExecute,Table);
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public  void SelectAll(DataTable Table)		
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_ShipmentOrder_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(scmCmdToExecute,Table);
		}
		public void SelectShipmentDetail(DataTable Table,int ShipmentID)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_SelectShipmentDetails]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_SHIPMENTID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ShipmentID));
			Select(scmCmdToExecute,Table);	
		}
		public void SelectShipmentInformation(DataTable Table,int ShipmentID)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_SelectShipmentInformation]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			
			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_SHIPMENTID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ShipmentID));
			Select(scmCmdToExecute,Table);	
		}

		public void SelectShipmentByCOHInstance(DataTable Table,int CustomerOrderHeaderInstance, int TransID)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_Shipment_SelectByCOHInstance]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			
			scmCmdToExecute.Parameters.Add("@iCustomerOrderHeaderInstance", CustomerOrderHeaderInstance);
			scmCmdToExecute.Parameters.Add("@iTransID", TransID);
			Select(scmCmdToExecute,Table);	
		}
		
		public void SelectContactInformation(DataTable Table,int OrderID)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_SelectContactInformation]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			scmCmdToExecute.Parameters.Add(new SqlParameter(PARAM_ORDERID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, OrderID));
			Select(scmCmdToExecute,Table);	
		}
	}
}
