//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.209
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace ADONET {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ConnStringDataSet : DataSet {
        
        private SqlClientDataTable tableSqlClient;
        
        public ConnStringDataSet() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ConnStringDataSet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["SqlClient"] != null)) {
                    this.Tables.Add(new SqlClientDataTable(ds.Tables["SqlClient"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SqlClientDataTable SqlClient {
            get {
                return this.tableSqlClient;
            }
        }
        
        public override DataSet Clone() {
            ConnStringDataSet cln = ((ConnStringDataSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["SqlClient"] != null)) {
                this.Tables.Add(new SqlClientDataTable(ds.Tables["SqlClient"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableSqlClient = ((SqlClientDataTable)(this.Tables["SqlClient"]));
            if ((this.tableSqlClient != null)) {
                this.tableSqlClient.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "ConnStringDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ConnStringDataSet.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableSqlClient = new SqlClientDataTable();
            this.Tables.Add(this.tableSqlClient);
        }
        
        private bool ShouldSerializeSqlClient() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void SqlClientRowChangeEventHandler(object sender, SqlClientRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SqlClientDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnServer;
            
            private DataColumn columnDatabase;
            
            private DataColumn columnAttachDBFilename;
            
            private DataColumn columnNetwork_Library;
            
            private DataColumn columnPooling;
            
            private DataColumn columnEnlist;
            
            private DataColumn columnConnection_Reset;
            
            private DataColumn columnMin_Pool_Size;
            
            private DataColumn columnMax_Pool_Size;
            
            private DataColumn columnUser_ID;
            
            private DataColumn columnPwd;
            
            private DataColumn columnIntegrated_Security;
            
            private DataColumn columnPersist_Security_Info;
            
            private DataColumn columnConnection_Timeout;
            
            private DataColumn columnConnection_Lifetime;
            
            private DataColumn columnPacket_Size;
            
            internal SqlClientDataTable() : 
                    base("SqlClient") {
                this.InitClass();
            }
            
            internal SqlClientDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ServerColumn {
                get {
                    return this.columnServer;
                }
            }
            
            internal DataColumn DatabaseColumn {
                get {
                    return this.columnDatabase;
                }
            }
            
            internal DataColumn AttachDBFilenameColumn {
                get {
                    return this.columnAttachDBFilename;
                }
            }
            
            internal DataColumn Network_LibraryColumn {
                get {
                    return this.columnNetwork_Library;
                }
            }
            
            internal DataColumn PoolingColumn {
                get {
                    return this.columnPooling;
                }
            }
            
            internal DataColumn EnlistColumn {
                get {
                    return this.columnEnlist;
                }
            }
            
            internal DataColumn Connection_ResetColumn {
                get {
                    return this.columnConnection_Reset;
                }
            }
            
            internal DataColumn Min_Pool_SizeColumn {
                get {
                    return this.columnMin_Pool_Size;
                }
            }
            
            internal DataColumn Max_Pool_SizeColumn {
                get {
                    return this.columnMax_Pool_Size;
                }
            }
            
            internal DataColumn User_IDColumn {
                get {
                    return this.columnUser_ID;
                }
            }
            
            internal DataColumn PwdColumn {
                get {
                    return this.columnPwd;
                }
            }
            
            internal DataColumn Integrated_SecurityColumn {
                get {
                    return this.columnIntegrated_Security;
                }
            }
            
            internal DataColumn Persist_Security_InfoColumn {
                get {
                    return this.columnPersist_Security_Info;
                }
            }
            
            internal DataColumn Connection_TimeoutColumn {
                get {
                    return this.columnConnection_Timeout;
                }
            }
            
            internal DataColumn Connection_LifetimeColumn {
                get {
                    return this.columnConnection_Lifetime;
                }
            }
            
            internal DataColumn Packet_SizeColumn {
                get {
                    return this.columnPacket_Size;
                }
            }
            
            public SqlClientRow this[int index] {
                get {
                    return ((SqlClientRow)(this.Rows[index]));
                }
            }
            
            public event SqlClientRowChangeEventHandler SqlClientRowChanged;
            
            public event SqlClientRowChangeEventHandler SqlClientRowChanging;
            
            public event SqlClientRowChangeEventHandler SqlClientRowDeleted;
            
            public event SqlClientRowChangeEventHandler SqlClientRowDeleting;
            
            public void AddSqlClientRow(SqlClientRow row) {
                this.Rows.Add(row);
            }
            
            public SqlClientRow AddSqlClientRow(
                        string Server, 
                        string Database, 
                        string AttachDBFilename, 
                        string Network_Library, 
                        bool Pooling, 
                        bool Enlist, 
                        bool Connection_Reset, 
                        int Min_Pool_Size, 
                        int Max_Pool_Size, 
                        string User_ID, 
                        string Pwd, 
                        bool Integrated_Security, 
                        bool Persist_Security_Info, 
                        int Connection_Timeout, 
                        int Connection_Lifetime, 
                        int Packet_Size) {
                SqlClientRow rowSqlClientRow = ((SqlClientRow)(this.NewRow()));
                rowSqlClientRow.ItemArray = new object[] {
                        Server,
                        Database,
                        AttachDBFilename,
                        Network_Library,
                        Pooling,
                        Enlist,
                        Connection_Reset,
                        Min_Pool_Size,
                        Max_Pool_Size,
                        User_ID,
                        Pwd,
                        Integrated_Security,
                        Persist_Security_Info,
                        Connection_Timeout,
                        Connection_Lifetime,
                        Packet_Size};
                this.Rows.Add(rowSqlClientRow);
                return rowSqlClientRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SqlClientDataTable cln = ((SqlClientDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SqlClientDataTable();
            }
            
            internal void InitVars() {
                this.columnServer = this.Columns["Server"];
                this.columnDatabase = this.Columns["Database"];
                this.columnAttachDBFilename = this.Columns["AttachDBFilename"];
                this.columnNetwork_Library = this.Columns["Network Library"];
                this.columnPooling = this.Columns["Pooling"];
                this.columnEnlist = this.Columns["Enlist"];
                this.columnConnection_Reset = this.Columns["Connection Reset"];
                this.columnMin_Pool_Size = this.Columns["Min Pool Size"];
                this.columnMax_Pool_Size = this.Columns["Max Pool Size"];
                this.columnUser_ID = this.Columns["User ID"];
                this.columnPwd = this.Columns["Pwd"];
                this.columnIntegrated_Security = this.Columns["Integrated Security"];
                this.columnPersist_Security_Info = this.Columns["Persist Security Info"];
                this.columnConnection_Timeout = this.Columns["Connection Timeout"];
                this.columnConnection_Lifetime = this.Columns["Connection Lifetime"];
                this.columnPacket_Size = this.Columns["Packet Size"];
            }
            
            private void InitClass() {
                this.columnServer = new DataColumn("Server", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnServer);
                this.columnDatabase = new DataColumn("Database", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDatabase);
                this.columnAttachDBFilename = new DataColumn("AttachDBFilename", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAttachDBFilename);
                this.columnNetwork_Library = new DataColumn("Network Library", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNetwork_Library);
                this.columnPooling = new DataColumn("Pooling", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPooling);
                this.columnEnlist = new DataColumn("Enlist", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEnlist);
                this.columnConnection_Reset = new DataColumn("Connection Reset", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnConnection_Reset);
                this.columnMin_Pool_Size = new DataColumn("Min Pool Size", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMin_Pool_Size);
                this.columnMax_Pool_Size = new DataColumn("Max Pool Size", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMax_Pool_Size);
                this.columnUser_ID = new DataColumn("User ID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUser_ID);
                this.columnPwd = new DataColumn("Pwd", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPwd);
                this.columnIntegrated_Security = new DataColumn("Integrated Security", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIntegrated_Security);
                this.columnPersist_Security_Info = new DataColumn("Persist Security Info", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPersist_Security_Info);
                this.columnConnection_Timeout = new DataColumn("Connection Timeout", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnConnection_Timeout);
                this.columnConnection_Lifetime = new DataColumn("Connection Lifetime", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnConnection_Lifetime);
                this.columnPacket_Size = new DataColumn("Packet Size", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPacket_Size);
                this.columnNetwork_Library.DefaultValue = "TCP/IP";
                this.columnPooling.DefaultValue = true;
                this.columnEnlist.DefaultValue = true;
                this.columnConnection_Reset.DefaultValue = true;
                this.columnMin_Pool_Size.DefaultValue = 0;
                this.columnMax_Pool_Size.DefaultValue = 100;
                this.columnIntegrated_Security.DefaultValue = false;
                this.columnPersist_Security_Info.DefaultValue = false;
                this.columnConnection_Timeout.DefaultValue = 15;
                this.columnConnection_Lifetime.DefaultValue = 0;
                this.columnPacket_Size.DefaultValue = 8192;
            }
            
            public SqlClientRow NewSqlClientRow() {
                return ((SqlClientRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SqlClientRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SqlClientRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SqlClientRowChanged != null)) {
                    this.SqlClientRowChanged(this, new SqlClientRowChangeEvent(((SqlClientRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SqlClientRowChanging != null)) {
                    this.SqlClientRowChanging(this, new SqlClientRowChangeEvent(((SqlClientRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SqlClientRowDeleted != null)) {
                    this.SqlClientRowDeleted(this, new SqlClientRowChangeEvent(((SqlClientRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SqlClientRowDeleting != null)) {
                    this.SqlClientRowDeleting(this, new SqlClientRowChangeEvent(((SqlClientRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSqlClientRow(SqlClientRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SqlClientRow : DataRow {
            
            private SqlClientDataTable tableSqlClient;
            
            internal SqlClientRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSqlClient = ((SqlClientDataTable)(this.Table));
            }
            
            public string Server {
                get {
                    try {
                        return ((string)(this[this.tableSqlClient.ServerColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSqlClient.ServerColumn] = value;
                }
            }
            
            public string Database {
                get {
                    try {
                        return ((string)(this[this.tableSqlClient.DatabaseColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSqlClient.DatabaseColumn] = value;
                }
            }
            
            public string AttachDBFilename {
                get {
                    try {
                        return ((string)(this[this.tableSqlClient.AttachDBFilenameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSqlClient.AttachDBFilenameColumn] = value;
                }
            }
            
            public string Network_Library {
                get {
                    try {
                        return ((string)(this[this.tableSqlClient.Network_LibraryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSqlClient.Network_LibraryColumn] = value;
                }
            }
            
            public bool Pooling {
                get {
                    try {
                        return ((bool)(this[this.tableSqlClient.PoolingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSqlClient.PoolingColumn] = value;
                }
            }
            
            public bool Enlist {
                get {
                    try {
                        return ((bool)(this[this.tableSqlClient.EnlistColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSqlClient.EnlistColumn] = value;
                }
            }
            
            public bool Connection_Reset {
                get {
                    try {
                        return ((bool)(this[this.tableSqlClient.Connection_ResetColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSqlClient.Connection_ResetColumn] = value;
                }
            }
            
            public int Min_Pool_Size {
                get {
                    try {
                        return ((int)(this[this.tableSqlClient.Min_Pool_SizeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSqlClient.Min_Pool_SizeColumn] = value;
                }
            }
            
            public int Max_Pool_Size {
                get {
                    try {
                        return ((int)(this[this.tableSqlClient.Max_Pool_SizeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSqlClient.Max_Pool_SizeColumn] = value;
                }
            }
            
            public string User_ID {
                get {
                    try {
                        return ((string)(this[this.tableSqlClient.User_IDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSqlClient.User_IDColumn] = value;
                }
            }
            
            public string Pwd {
                get {
                    try {
                        return ((string)(this[this.tableSqlClient.PwdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSqlClient.PwdColumn] = value;
                }
            }
            
            public bool Integrated_Security {
                get {
                    try {
                        return ((bool)(this[this.tableSqlClient.Integrated_SecurityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSqlClient.Integrated_SecurityColumn] = value;
                }
            }
            
            public bool Persist_Security_Info {
                get {
                    try {
                        return ((bool)(this[this.tableSqlClient.Persist_Security_InfoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSqlClient.Persist_Security_InfoColumn] = value;
                }
            }
            
            public int Connection_Timeout {
                get {
                    try {
                        return ((int)(this[this.tableSqlClient.Connection_TimeoutColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSqlClient.Connection_TimeoutColumn] = value;
                }
            }
            
            public int Connection_Lifetime {
                get {
                    try {
                        return ((int)(this[this.tableSqlClient.Connection_LifetimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSqlClient.Connection_LifetimeColumn] = value;
                }
            }
            
            public int Packet_Size {
                get {
                    try {
                        return ((int)(this[this.tableSqlClient.Packet_SizeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSqlClient.Packet_SizeColumn] = value;
                }
            }
            
            public bool IsServerNull() {
                return this.IsNull(this.tableSqlClient.ServerColumn);
            }
            
            public void SetServerNull() {
                this[this.tableSqlClient.ServerColumn] = System.Convert.DBNull;
            }
            
            public bool IsDatabaseNull() {
                return this.IsNull(this.tableSqlClient.DatabaseColumn);
            }
            
            public void SetDatabaseNull() {
                this[this.tableSqlClient.DatabaseColumn] = System.Convert.DBNull;
            }
            
            public bool IsAttachDBFilenameNull() {
                return this.IsNull(this.tableSqlClient.AttachDBFilenameColumn);
            }
            
            public void SetAttachDBFilenameNull() {
                this[this.tableSqlClient.AttachDBFilenameColumn] = System.Convert.DBNull;
            }
            
            public bool IsNetwork_LibraryNull() {
                return this.IsNull(this.tableSqlClient.Network_LibraryColumn);
            }
            
            public void SetNetwork_LibraryNull() {
                this[this.tableSqlClient.Network_LibraryColumn] = System.Convert.DBNull;
            }
            
            public bool IsPoolingNull() {
                return this.IsNull(this.tableSqlClient.PoolingColumn);
            }
            
            public void SetPoolingNull() {
                this[this.tableSqlClient.PoolingColumn] = System.Convert.DBNull;
            }
            
            public bool IsEnlistNull() {
                return this.IsNull(this.tableSqlClient.EnlistColumn);
            }
            
            public void SetEnlistNull() {
                this[this.tableSqlClient.EnlistColumn] = System.Convert.DBNull;
            }
            
            public bool IsConnection_ResetNull() {
                return this.IsNull(this.tableSqlClient.Connection_ResetColumn);
            }
            
            public void SetConnection_ResetNull() {
                this[this.tableSqlClient.Connection_ResetColumn] = System.Convert.DBNull;
            }
            
            public bool IsMin_Pool_SizeNull() {
                return this.IsNull(this.tableSqlClient.Min_Pool_SizeColumn);
            }
            
            public void SetMin_Pool_SizeNull() {
                this[this.tableSqlClient.Min_Pool_SizeColumn] = System.Convert.DBNull;
            }
            
            public bool IsMax_Pool_SizeNull() {
                return this.IsNull(this.tableSqlClient.Max_Pool_SizeColumn);
            }
            
            public void SetMax_Pool_SizeNull() {
                this[this.tableSqlClient.Max_Pool_SizeColumn] = System.Convert.DBNull;
            }
            
            public bool IsUser_IDNull() {
                return this.IsNull(this.tableSqlClient.User_IDColumn);
            }
            
            public void SetUser_IDNull() {
                this[this.tableSqlClient.User_IDColumn] = System.Convert.DBNull;
            }
            
            public bool IsPwdNull() {
                return this.IsNull(this.tableSqlClient.PwdColumn);
            }
            
            public void SetPwdNull() {
                this[this.tableSqlClient.PwdColumn] = System.Convert.DBNull;
            }
            
            public bool IsIntegrated_SecurityNull() {
                return this.IsNull(this.tableSqlClient.Integrated_SecurityColumn);
            }
            
            public void SetIntegrated_SecurityNull() {
                this[this.tableSqlClient.Integrated_SecurityColumn] = System.Convert.DBNull;
            }
            
            public bool IsPersist_Security_InfoNull() {
                return this.IsNull(this.tableSqlClient.Persist_Security_InfoColumn);
            }
            
            public void SetPersist_Security_InfoNull() {
                this[this.tableSqlClient.Persist_Security_InfoColumn] = System.Convert.DBNull;
            }
            
            public bool IsConnection_TimeoutNull() {
                return this.IsNull(this.tableSqlClient.Connection_TimeoutColumn);
            }
            
            public void SetConnection_TimeoutNull() {
                this[this.tableSqlClient.Connection_TimeoutColumn] = System.Convert.DBNull;
            }
            
            public bool IsConnection_LifetimeNull() {
                return this.IsNull(this.tableSqlClient.Connection_LifetimeColumn);
            }
            
            public void SetConnection_LifetimeNull() {
                this[this.tableSqlClient.Connection_LifetimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsPacket_SizeNull() {
                return this.IsNull(this.tableSqlClient.Packet_SizeColumn);
            }
            
            public void SetPacket_SizeNull() {
                this[this.tableSqlClient.Packet_SizeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SqlClientRowChangeEvent : EventArgs {
            
            private SqlClientRow eventRow;
            
            private DataRowAction eventAction;
            
            public SqlClientRowChangeEvent(SqlClientRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SqlClientRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
