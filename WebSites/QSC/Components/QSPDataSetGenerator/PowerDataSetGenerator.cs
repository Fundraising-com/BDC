// PowerDataSetGenerator.cs: Shawn Wildermuth [swildermuth@adoguy.com]

using System;
using System.Data;
using System.Data.Common;
using System.IO;
using System.Text;
using System.Xml;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Runtime.InteropServices;
using System.Diagnostics;
using System.Text.RegularExpressions;
using Microsoft.CSharp;
using Microsoft.VisualBasic;
using VSInterfaces;
using System.Globalization;
using System.Collections;
using System.Reflection;
using System.ComponentModel;

namespace QSP.CommonObjects
{
  /// <summary>
	/// Summary description for PowerDataSetGenerator.
	/// </summary>
	public class PowerDataSetGenerator : ImprovedTypedDataSetGenerator
	{
    /// <summary>
    /// 
    /// </summary>
		public PowerDataSetGenerator()
		{ 
      this.addComments = true;
      this.commentText = "Autogenerated by the QSPDataSetGenerator.";
    }

    /// <summary>
    /// 
    /// </summary>
    protected override MemberAttributes AssemblyVisibility
    {
      get
      {
        return MemberAttributes.FamilyAndAssembly;
      }
    }
  
    /// <summary>
    /// 
    /// </summary>
    protected override MemberAttributes FamilyOverrideVisibility
    {
      get
      {
        return MemberAttributes.Family | MemberAttributes.Override;
      }
    }
  
    /// <summary>
    /// 
    /// </summary>
    protected override MemberAttributes FamilyVisibility
    {
      get
      {
        return MemberAttributes.Family;
      }
    }
  
    /// <summary>
    /// 
    /// </summary>
    protected override MemberAttributes PrivateVisibility
    {
      get
      {
        return MemberAttributes.Family;
      }
    }
  
    /// <summary>
    /// 
    /// </summary>
    protected override MemberAttributes PublicOverrideVisibility
    {
      get
      {
        return MemberAttributes.Public | MemberAttributes.Override;
      }
    }
  
    /// <summary>
    /// 
    /// </summary>
    protected override MemberAttributes PublicVisibility
    {
      get
      {
        return MemberAttributes.Public;
      }
    }
  
    /// <summary>
    /// Specialed version of this method to stop columns with expressions from 
    /// being included in the Typed AddRow method.
    /// </summary>
    /// <param name="table">The DataTable to find the list of columns for.</param>
    /// <returns>An array of Data Columns</returns>
    protected override DataColumn[] GetTableColumnSelection(DataTable table)
    {
      ArrayList list = new ArrayList();
      
      // Get the base class' list just incase that changes
      DataColumn[] columns = base.GetTableColumnSelection(table);

      // Go through each column to filter them out
      foreach (DataColumn column in columns)
      {
        // I want to stop expression columns in the Table class's add method
        if (column.Expression.Length == 0)
        {
          list.Add(column);
        }
      }

      // Create the new DataColumn
      DataColumn[] newColumns = new DataColumn[(uint) list.Count];

      // Copy the array
      list.CopyTo(newColumns);

      return newColumns;
    }
  
  
    protected override CodeExpression GenerateDataSetDataTableCreationWithDataTable(DataTable table, CodeExpression[] tableExpressions)
    {
      return MethodCall(This(), string.Format("Create{0}DataTable", FixIdName(table.TableName)), tableExpressions);
    }
  
  
    protected override CodeExpression GenerateDataSetDataTableCreation(DataTable table)
    {
      return GenerateDataSetDataTableCreationWithDataTable(table, new CodeExpression[0]);
    }
  
    protected override CodeTypeDeclaration GenerateDataSet()
    {
      CodeTypeDeclaration type = base.GenerateDataSet ();

      foreach (DataTable table in _dataSet.Tables)
      {
        // Add the Create Method without the parameter
        CodeMemberMethod createMethod = MethodDecl(TableClassName(table), string.Format("Create{0}DataTable", FixIdName(table.TableName)), MemberAttributes.Family);
        createMethod.Statements.Add(Return(New(TableClassName(table), new CodeExpression[0])));
        type.Members.Add(createMethod);

        // Add the Create Method without the parameter
        createMethod = MethodDecl(TableClassName(table), string.Format("Create{0}DataTable", FixIdName(table.TableName)), MemberAttributes.Family);
        createMethod.Parameters.Add(ParameterDecl("DataTable", "table"));
        createMethod.Statements.Add(Return(New(TableClassName(table), new CodeExpression[] { this.Variable("table")})));
        type.Members.Add(createMethod);
      }

      return type;
    }
  }
}
