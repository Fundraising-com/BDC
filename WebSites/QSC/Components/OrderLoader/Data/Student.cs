//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Data
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CustomerOrderHeader))]
    [KnownType(typeof(Teacher))]
    public partial class Student: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int Instance
        {
            get { return _instance; }
            set
            {
                if (_instance != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Instance' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _instance = value;
                    OnPropertyChanged("Instance");
                }
            }
        }
        private int _instance;
    
        [DataMember]
        public Nullable<int> TeacherInstance
        {
            get { return _teacherInstance; }
            set
            {
                if (_teacherInstance != value)
                {
                    ChangeTracker.RecordOriginalValue("TeacherInstance", _teacherInstance);
                    if (!IsDeserializing)
                    {
                        if (Teacher != null && Teacher.Instance != value)
                        {
                            Teacher = null;
                        }
                    }
                    _teacherInstance = value;
                    OnPropertyChanged("TeacherInstance");
                }
            }
        }
        private Nullable<int> _teacherInstance;
    
        [DataMember]
        public string LastName
        {
            get { return _lastName; }
            set
            {
                if (_lastName != value)
                {
                    _lastName = value;
                    OnPropertyChanged("LastName");
                }
            }
        }
        private string _lastName;
    
        [DataMember]
        public string FirstName
        {
            get { return _firstName; }
            set
            {
                if (_firstName != value)
                {
                    _firstName = value;
                    OnPropertyChanged("FirstName");
                }
            }
        }
        private string _firstName;
    
        [DataMember]
        public Nullable<System.DateTime> DateCreated
        {
            get { return _dateCreated; }
            set
            {
                if (_dateCreated != value)
                {
                    _dateCreated = value;
                    OnPropertyChanged("DateCreated");
                }
            }
        }
        private Nullable<System.DateTime> _dateCreated;
    
        [DataMember]
        public string UserIDCreated
        {
            get { return _userIDCreated; }
            set
            {
                if (_userIDCreated != value)
                {
                    _userIDCreated = value;
                    OnPropertyChanged("UserIDCreated");
                }
            }
        }
        private string _userIDCreated;
    
        [DataMember]
        public Nullable<System.DateTime> DateChanged
        {
            get { return _dateChanged; }
            set
            {
                if (_dateChanged != value)
                {
                    _dateChanged = value;
                    OnPropertyChanged("DateChanged");
                }
            }
        }
        private Nullable<System.DateTime> _dateChanged;
    
        [DataMember]
        public string UserIDChanged
        {
            get { return _userIDChanged; }
            set
            {
                if (_userIDChanged != value)
                {
                    _userIDChanged = value;
                    OnPropertyChanged("UserIDChanged");
                }
            }
        }
        private string _userIDChanged;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<CustomerOrderHeader> CustomerOrderHeaders
        {
            get
            {
                if (_customerOrderHeaders == null)
                {
                    _customerOrderHeaders = new TrackableCollection<CustomerOrderHeader>();
                    _customerOrderHeaders.CollectionChanged += FixupCustomerOrderHeaders;
                }
                return _customerOrderHeaders;
            }
            set
            {
                if (!ReferenceEquals(_customerOrderHeaders, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_customerOrderHeaders != null)
                    {
                        _customerOrderHeaders.CollectionChanged -= FixupCustomerOrderHeaders;
                    }
                    _customerOrderHeaders = value;
                    if (_customerOrderHeaders != null)
                    {
                        _customerOrderHeaders.CollectionChanged += FixupCustomerOrderHeaders;
                    }
                    OnNavigationPropertyChanged("CustomerOrderHeaders");
                }
            }
        }
        private TrackableCollection<CustomerOrderHeader> _customerOrderHeaders;
    
        [DataMember]
        public Teacher Teacher
        {
            get { return _teacher; }
            set
            {
                if (!ReferenceEquals(_teacher, value))
                {
                    var previousValue = _teacher;
                    _teacher = value;
                    FixupTeacher(previousValue);
                    OnNavigationPropertyChanged("Teacher");
                }
            }
        }
        private Teacher _teacher;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            CustomerOrderHeaders.Clear();
            Teacher = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupTeacher(Teacher previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Students.Contains(this))
            {
                previousValue.Students.Remove(this);
            }
    
            if (Teacher != null)
            {
                if (!Teacher.Students.Contains(this))
                {
                    Teacher.Students.Add(this);
                }
    
                TeacherInstance = Teacher.Instance;
            }
            else if (!skipKeys)
            {
                TeacherInstance = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Teacher")
                    && (ChangeTracker.OriginalValues["Teacher"] == Teacher))
                {
                    ChangeTracker.OriginalValues.Remove("Teacher");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Teacher", previousValue);
                }
                if (Teacher != null && !Teacher.ChangeTracker.ChangeTrackingEnabled)
                {
                    Teacher.StartTracking();
                }
            }
        }
    
        private void FixupCustomerOrderHeaders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CustomerOrderHeader item in e.NewItems)
                {
                    item.Student = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CustomerOrderHeaders", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerOrderHeader item in e.OldItems)
                {
                    if (ReferenceEquals(item.Student, this))
                    {
                        item.Student = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CustomerOrderHeaders", item);
                    }
                }
            }
        }

        #endregion
    }
}
