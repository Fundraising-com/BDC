//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Data
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CreditCardPayment))]
    public partial class CreditCardBatch: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string InputFileName
        {
            get { return _inputFileName; }
            set
            {
                if (_inputFileName != value)
                {
                    _inputFileName = value;
                    OnPropertyChanged("InputFileName");
                }
            }
        }
        private string _inputFileName;
    
        [DataMember]
        public string OutputFileName
        {
            get { return _outputFileName; }
            set
            {
                if (_outputFileName != value)
                {
                    _outputFileName = value;
                    OnPropertyChanged("OutputFileName");
                }
            }
        }
        private string _outputFileName;
    
        [DataMember]
        public System.DateTime StartImportTime
        {
            get { return _startImportTime; }
            set
            {
                if (_startImportTime != value)
                {
                    _startImportTime = value;
                    OnPropertyChanged("StartImportTime");
                }
            }
        }
        private System.DateTime _startImportTime;
    
        [DataMember]
        public System.DateTime EndImportTime
        {
            get { return _endImportTime; }
            set
            {
                if (_endImportTime != value)
                {
                    _endImportTime = value;
                    OnPropertyChanged("EndImportTime");
                }
            }
        }
        private System.DateTime _endImportTime;
    
        [DataMember]
        public int Status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    _status = value;
                    OnPropertyChanged("Status");
                }
            }
        }
        private int _status;
    
        [DataMember]
        public int TotalRecordCount
        {
            get { return _totalRecordCount; }
            set
            {
                if (_totalRecordCount != value)
                {
                    _totalRecordCount = value;
                    OnPropertyChanged("TotalRecordCount");
                }
            }
        }
        private int _totalRecordCount;
    
        [DataMember]
        public int TotalDollarAmount
        {
            get { return _totalDollarAmount; }
            set
            {
                if (_totalDollarAmount != value)
                {
                    _totalDollarAmount = value;
                    OnPropertyChanged("TotalDollarAmount");
                }
            }
        }
        private int _totalDollarAmount;
    
        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;
    
        [DataMember]
        public Nullable<System.DateTime> DateCreated
        {
            get { return _dateCreated; }
            set
            {
                if (_dateCreated != value)
                {
                    _dateCreated = value;
                    OnPropertyChanged("DateCreated");
                }
            }
        }
        private Nullable<System.DateTime> _dateCreated;
    
        [DataMember]
        public string UserIDCreated
        {
            get { return _userIDCreated; }
            set
            {
                if (_userIDCreated != value)
                {
                    _userIDCreated = value;
                    OnPropertyChanged("UserIDCreated");
                }
            }
        }
        private string _userIDCreated;
    
        [DataMember]
        public Nullable<System.DateTime> ChangeDate
        {
            get { return _changeDate; }
            set
            {
                if (_changeDate != value)
                {
                    _changeDate = value;
                    OnPropertyChanged("ChangeDate");
                }
            }
        }
        private Nullable<System.DateTime> _changeDate;
    
        [DataMember]
        public string ChangeUserID
        {
            get { return _changeUserID; }
            set
            {
                if (_changeUserID != value)
                {
                    _changeUserID = value;
                    OnPropertyChanged("ChangeUserID");
                }
            }
        }
        private string _changeUserID;
    
        [DataMember]
        public Nullable<int> Type
        {
            get { return _type; }
            set
            {
                if (_type != value)
                {
                    _type = value;
                    OnPropertyChanged("Type");
                }
            }
        }
        private Nullable<int> _type;
    
        [DataMember]
        public Nullable<int> IsGLDone
        {
            get { return _isGLDone; }
            set
            {
                if (_isGLDone != value)
                {
                    _isGLDone = value;
                    OnPropertyChanged("IsGLDone");
                }
            }
        }
        private Nullable<int> _isGLDone;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<CreditCardPayment> CreditCardPayments
        {
            get
            {
                if (_creditCardPayments == null)
                {
                    _creditCardPayments = new TrackableCollection<CreditCardPayment>();
                    _creditCardPayments.CollectionChanged += FixupCreditCardPayments;
                }
                return _creditCardPayments;
            }
            set
            {
                if (!ReferenceEquals(_creditCardPayments, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_creditCardPayments != null)
                    {
                        _creditCardPayments.CollectionChanged -= FixupCreditCardPayments;
                    }
                    _creditCardPayments = value;
                    if (_creditCardPayments != null)
                    {
                        _creditCardPayments.CollectionChanged += FixupCreditCardPayments;
                    }
                    OnNavigationPropertyChanged("CreditCardPayments");
                }
            }
        }
        private TrackableCollection<CreditCardPayment> _creditCardPayments;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            CreditCardPayments.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupCreditCardPayments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CreditCardPayment item in e.NewItems)
                {
                    item.CreditCardBatch = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CreditCardPayments", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CreditCardPayment item in e.OldItems)
                {
                    if (ReferenceEquals(item.CreditCardBatch, this))
                    {
                        item.CreditCardBatch = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CreditCardPayments", item);
                    }
                }
            }
        }

        #endregion
    }
}
