//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Data
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CustomerOrderHeader))]
    [KnownType(typeof(CustomerOrderDetail))]
    public partial class Customer: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int Instance
        {
            get { return _instance; }
            set
            {
                if (_instance != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Instance' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _instance = value;
                    OnPropertyChanged("Instance");
                }
            }
        }
        private int _instance;
    
        [DataMember]
        public int StatusInstance
        {
            get { return _statusInstance; }
            set
            {
                if (_statusInstance != value)
                {
                    _statusInstance = value;
                    OnPropertyChanged("StatusInstance");
                }
            }
        }
        private int _statusInstance;
    
        [DataMember]
        public string LastName
        {
            get { return _lastName; }
            set
            {
                if (_lastName != value)
                {
                    _lastName = value;
                    OnPropertyChanged("LastName");
                }
            }
        }
        private string _lastName;
    
        [DataMember]
        public string FirstName
        {
            get { return _firstName; }
            set
            {
                if (_firstName != value)
                {
                    _firstName = value;
                    OnPropertyChanged("FirstName");
                }
            }
        }
        private string _firstName;
    
        [DataMember]
        public string Address1
        {
            get { return _address1; }
            set
            {
                if (_address1 != value)
                {
                    _address1 = value;
                    OnPropertyChanged("Address1");
                }
            }
        }
        private string _address1;
    
        [DataMember]
        public string Address2
        {
            get { return _address2; }
            set
            {
                if (_address2 != value)
                {
                    _address2 = value;
                    OnPropertyChanged("Address2");
                }
            }
        }
        private string _address2;
    
        [DataMember]
        public string City
        {
            get { return _city; }
            set
            {
                if (_city != value)
                {
                    _city = value;
                    OnPropertyChanged("City");
                }
            }
        }
        private string _city;
    
        [DataMember]
        public string County
        {
            get { return _county; }
            set
            {
                if (_county != value)
                {
                    _county = value;
                    OnPropertyChanged("County");
                }
            }
        }
        private string _county;
    
        [DataMember]
        public string State
        {
            get { return _state; }
            set
            {
                if (_state != value)
                {
                    _state = value;
                    OnPropertyChanged("State");
                }
            }
        }
        private string _state;
    
        [DataMember]
        public string Zip
        {
            get { return _zip; }
            set
            {
                if (_zip != value)
                {
                    _zip = value;
                    OnPropertyChanged("Zip");
                }
            }
        }
        private string _zip;
    
        [DataMember]
        public string ZipPlusFour
        {
            get { return _zipPlusFour; }
            set
            {
                if (_zipPlusFour != value)
                {
                    _zipPlusFour = value;
                    OnPropertyChanged("ZipPlusFour");
                }
            }
        }
        private string _zipPlusFour;
    
        [DataMember]
        public bool OverrideAddress
        {
            get { return _overrideAddress; }
            set
            {
                if (_overrideAddress != value)
                {
                    _overrideAddress = value;
                    OnPropertyChanged("OverrideAddress");
                }
            }
        }
        private bool _overrideAddress;
    
        [DataMember]
        public string ChangeUserID
        {
            get { return _changeUserID; }
            set
            {
                if (_changeUserID != value)
                {
                    _changeUserID = value;
                    OnPropertyChanged("ChangeUserID");
                }
            }
        }
        private string _changeUserID;
    
        [DataMember]
        public System.DateTime ChangeDate
        {
            get { return _changeDate; }
            set
            {
                if (_changeDate != value)
                {
                    _changeDate = value;
                    OnPropertyChanged("ChangeDate");
                }
            }
        }
        private System.DateTime _changeDate;
    
        [DataMember]
        public string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    OnPropertyChanged("Email");
                }
            }
        }
        private string _email;
    
        [DataMember]
        public string Phone
        {
            get { return _phone; }
            set
            {
                if (_phone != value)
                {
                    _phone = value;
                    OnPropertyChanged("Phone");
                }
            }
        }
        private string _phone;
    
        [DataMember]
        public Nullable<int> Type
        {
            get { return _type; }
            set
            {
                if (_type != value)
                {
                    _type = value;
                    OnPropertyChanged("Type");
                }
            }
        }
        private Nullable<int> _type;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<CustomerOrderHeader> CustomerOrderHeaders
        {
            get
            {
                if (_customerOrderHeaders == null)
                {
                    _customerOrderHeaders = new TrackableCollection<CustomerOrderHeader>();
                    _customerOrderHeaders.CollectionChanged += FixupCustomerOrderHeaders;
                }
                return _customerOrderHeaders;
            }
            set
            {
                if (!ReferenceEquals(_customerOrderHeaders, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_customerOrderHeaders != null)
                    {
                        _customerOrderHeaders.CollectionChanged -= FixupCustomerOrderHeaders;
                    }
                    _customerOrderHeaders = value;
                    if (_customerOrderHeaders != null)
                    {
                        _customerOrderHeaders.CollectionChanged += FixupCustomerOrderHeaders;
                    }
                    OnNavigationPropertyChanged("CustomerOrderHeaders");
                }
            }
        }
        private TrackableCollection<CustomerOrderHeader> _customerOrderHeaders;
    
        [DataMember]
        public TrackableCollection<CustomerOrderDetail> CustomerOrderDetails
        {
            get
            {
                if (_customerOrderDetails == null)
                {
                    _customerOrderDetails = new TrackableCollection<CustomerOrderDetail>();
                    _customerOrderDetails.CollectionChanged += FixupCustomerOrderDetails;
                }
                return _customerOrderDetails;
            }
            set
            {
                if (!ReferenceEquals(_customerOrderDetails, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_customerOrderDetails != null)
                    {
                        _customerOrderDetails.CollectionChanged -= FixupCustomerOrderDetails;
                    }
                    _customerOrderDetails = value;
                    if (_customerOrderDetails != null)
                    {
                        _customerOrderDetails.CollectionChanged += FixupCustomerOrderDetails;
                    }
                    OnNavigationPropertyChanged("CustomerOrderDetails");
                }
            }
        }
        private TrackableCollection<CustomerOrderDetail> _customerOrderDetails;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            CustomerOrderHeaders.Clear();
            CustomerOrderDetails.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupCustomerOrderHeaders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CustomerOrderHeader item in e.NewItems)
                {
                    item.Customer = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CustomerOrderHeaders", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerOrderHeader item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CustomerOrderHeaders", item);
                    }
                }
            }
        }
    
        private void FixupCustomerOrderDetails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CustomerOrderDetail item in e.NewItems)
                {
                    item.Customer = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CustomerOrderDetails", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerOrderDetail item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CustomerOrderDetails", item);
                    }
                }
            }
        }

        #endregion
    }
}
