//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Data
{
    
    public partial class TaxResult : INotifyComplexPropertyChanging, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public Nullable<decimal> Tax1
        {
            get { return _tax1; }
            set
            {
                if (_tax1 != value)
                {
                    OnComplexPropertyChanging();
                    _tax1 = value;
                    OnPropertyChanged("Tax1");
                }
            }
        }
        private Nullable<decimal> _tax1;
    
        [DataMember]
        public Nullable<decimal> Tax2
        {
            get { return _tax2; }
            set
            {
                if (_tax2 != value)
                {
                    OnComplexPropertyChanging();
                    _tax2 = value;
                    OnPropertyChanged("Tax2");
                }
            }
        }
        private Nullable<decimal> _tax2;
    
        [DataMember]
        public Nullable<decimal> Gross
        {
            get { return _gross; }
            set
            {
                if (_gross != value)
                {
                    OnComplexPropertyChanging();
                    _gross = value;
                    OnPropertyChanged("Gross");
                }
            }
        }
        private Nullable<decimal> _gross;
    
        [DataMember]
        public Nullable<decimal> Net
        {
            get { return _net; }
            set
            {
                if (_net != value)
                {
                    OnComplexPropertyChanging();
                    _net = value;
                    OnPropertyChanged("Net");
                }
            }
        }
        private Nullable<decimal> _net;

        #endregion
        #region ChangeTracking
    
        private void OnComplexPropertyChanging()
        {
            if (_complexPropertyChanging != null)
            {
                _complexPropertyChanging(this, new EventArgs());
            }
        }
    
        event EventHandler INotifyComplexPropertyChanging.ComplexPropertyChanging { add { _complexPropertyChanging += value; } remove { _complexPropertyChanging -= value; } }
        private event EventHandler _complexPropertyChanging;
    
        private void OnPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
    
        public static void RecordComplexOriginalValues(String parentPropertyName, TaxResult complexObject, ObjectChangeTracker changeTracker)
        {
            if (String.IsNullOrEmpty(parentPropertyName))
            {
                throw new ArgumentException("String parameter cannot be null or empty.", "parentPropertyName");
            }
    
            if (changeTracker == null)
            {
                throw new ArgumentNullException("changeTracker");
            }
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Tax1", parentPropertyName), complexObject == null ? null : (object)complexObject.Tax1);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Tax2", parentPropertyName), complexObject == null ? null : (object)complexObject.Tax2);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Gross", parentPropertyName), complexObject == null ? null : (object)complexObject.Gross);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Net", parentPropertyName), complexObject == null ? null : (object)complexObject.Net);
        }

        #endregion
    }
}
