//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Common;
using System.Data.EntityClient;
using System.Data.Metadata.Edm;
using System.Data.Objects.DataClasses;
using System.Data.Objects;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace Data
{
    public partial class QSPCanadaOrderManagementEntities : ObjectContext
    {
        public const string ConnectionString = "name=QSPCanadaOrderManagementEntities";
        public const string ContainerName = "QSPCanadaOrderManagementEntities";
    
        #region Constructors
    
        public QSPCanadaOrderManagementEntities()
            : base(ConnectionString, ContainerName)
        {
            Initialize();
        }
    
        public QSPCanadaOrderManagementEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            Initialize();
        }
    
        public QSPCanadaOrderManagementEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            Initialize();
        }
    
        private void Initialize()
        {
            // Creating proxies requires the use of the ProxyDataContractResolver and
            // may allow lazy loading which can expand the loaded graph during serialization.
            ContextOptions.ProxyCreationEnabled = false;
            ObjectMaterialized += new ObjectMaterializedEventHandler(HandleObjectMaterialized);
        }
    
        private void HandleObjectMaterialized(object sender, ObjectMaterializedEventArgs e)
        {
            var entity = e.Entity as IObjectWithChangeTracker;
            if (entity != null)
            {
                bool changeTrackingEnabled = entity.ChangeTracker.ChangeTrackingEnabled;
                try
                {
                    entity.MarkAsUnchanged();
                }
                finally
                {
                    entity.ChangeTracker.ChangeTrackingEnabled = changeTrackingEnabled;
                }
                this.StoreReferenceKeyValues(entity);
            }
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<Batch> Batchs
        {
            get { return _batchs  ?? (_batchs = CreateObjectSet<Batch>("Batchs")); }
        }
        private ObjectSet<Batch> _batchs;
    
        public ObjectSet<CustomerOrderHeader> CustomerOrderHeaders
        {
            get { return _customerOrderHeaders  ?? (_customerOrderHeaders = CreateObjectSet<CustomerOrderHeader>("CustomerOrderHeaders")); }
        }
        private ObjectSet<CustomerOrderHeader> _customerOrderHeaders;
    
        public ObjectSet<Customer> Customers
        {
            get { return _customers  ?? (_customers = CreateObjectSet<Customer>("Customers")); }
        }
        private ObjectSet<Customer> _customers;
    
        public ObjectSet<CustomerOrderDetail> CustomerOrderDetails
        {
            get { return _customerOrderDetails  ?? (_customerOrderDetails = CreateObjectSet<CustomerOrderDetail>("CustomerOrderDetails")); }
        }
        private ObjectSet<CustomerOrderDetail> _customerOrderDetails;
    
        public ObjectSet<Student> Students
        {
            get { return _students  ?? (_students = CreateObjectSet<Student>("Students")); }
        }
        private ObjectSet<Student> _students;
    
        public ObjectSet<Teacher> Teachers
        {
            get { return _teachers  ?? (_teachers = CreateObjectSet<Teacher>("Teachers")); }
        }
        private ObjectSet<Teacher> _teachers;
    
        public ObjectSet<Product> Product
        {
            get { return _product  ?? (_product = CreateObjectSet<Product>("Product")); }
        }
        private ObjectSet<Product> _product;
    
        public ObjectSet<Account> Accounts
        {
            get { return _accounts  ?? (_accounts = CreateObjectSet<Account>("Accounts")); }
        }
        private ObjectSet<Account> _accounts;
    
        public ObjectSet<Campaign> Campaigns
        {
            get { return _campaigns  ?? (_campaigns = CreateObjectSet<Campaign>("Campaigns")); }
        }
        private ObjectSet<Campaign> _campaigns;
    
        public ObjectSet<CreditCardPayment> CreditCardPayments
        {
            get { return _creditCardPayments  ?? (_creditCardPayments = CreateObjectSet<CreditCardPayment>("CreditCardPayments")); }
        }
        private ObjectSet<CreditCardPayment> _creditCardPayments;
    
        public ObjectSet<CustomerPaymentHeader> CustomerPaymentHeaders
        {
            get { return _customerPaymentHeaders  ?? (_customerPaymentHeaders = CreateObjectSet<CustomerPaymentHeader>("CustomerPaymentHeaders")); }
        }
        private ObjectSet<CustomerPaymentHeader> _customerPaymentHeaders;
    
        public ObjectSet<InternetOrderID> InternetOrderIDs
        {
            get { return _internetOrderIDs  ?? (_internetOrderIDs = CreateObjectSet<InternetOrderID>("InternetOrderIDs")); }
        }
        private ObjectSet<InternetOrderID> _internetOrderIDs;
    
        public ObjectSet<SystemOption> SystemOptions1
        {
            get { return _systemOptions1  ?? (_systemOptions1 = CreateObjectSet<SystemOption>("SystemOptions1")); }
        }
        private ObjectSet<SystemOption> _systemOptions1;
    
        public ObjectSet<ProductPricings> ProductPricings
        {
            get { return _productPricings  ?? (_productPricings = CreateObjectSet<ProductPricings>("ProductPricings")); }
        }
        private ObjectSet<ProductPricings> _productPricings;
    
        public ObjectSet<CreditCardBatch> CreditCardBatches
        {
            get { return _creditCardBatches  ?? (_creditCardBatches = CreateObjectSet<CreditCardBatch>("CreditCardBatches")); }
        }
        private ObjectSet<CreditCardBatch> _creditCardBatches;

        #endregion
        #region Function Imports
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="term">No Metadata Documentation available.</param>
        /// <param name="campaignId">No Metadata Documentation available.</param>
        /// <param name="productType">No Metadata Documentation available.</param>
        public virtual ObjectResult<PricingData> spGetCodeTermAndCampaign(string code, Nullable<int> term, Nullable<int> campaignId, Nullable<int> productType)
        {
    
            ObjectParameter codeParameter;
    
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(string));
            }
    
            ObjectParameter termParameter;
    
            if (term.HasValue)
            {
                termParameter = new ObjectParameter("term", term);
            }
            else
            {
                termParameter = new ObjectParameter("term", typeof(int));
            }
    
            ObjectParameter campaignIdParameter;
    
            if (campaignId.HasValue)
            {
                campaignIdParameter = new ObjectParameter("CampaignId", campaignId);
            }
            else
            {
                campaignIdParameter = new ObjectParameter("CampaignId", typeof(int));
            }
    
            ObjectParameter productTypeParameter;
    
            if (productType.HasValue)
            {
                productTypeParameter = new ObjectParameter("ProductType", productType);
            }
            else
            {
                productTypeParameter = new ObjectParameter("ProductType", typeof(int));
            }
            return base.ExecuteFunction<PricingData>("spGetCodeTermAndCampaign", codeParameter, termParameter, campaignIdParameter, productTypeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="price">No Metadata Documentation available.</param>
        /// <param name="campaignId">No Metadata Documentation available.</param>
        /// <param name="productType">No Metadata Documentation available.</param>
        public virtual ObjectResult<PricingData> GetCodePriceAndCampaign(string code, Nullable<decimal> price, Nullable<int> campaignId, Nullable<int> productType)
        {
    
            ObjectParameter codeParameter;
    
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(string));
            }
    
            ObjectParameter priceParameter;
    
            if (price.HasValue)
            {
                priceParameter = new ObjectParameter("price", price);
            }
            else
            {
                priceParameter = new ObjectParameter("price", typeof(decimal));
            }
    
            ObjectParameter campaignIdParameter;
    
            if (campaignId.HasValue)
            {
                campaignIdParameter = new ObjectParameter("CampaignId", campaignId);
            }
            else
            {
                campaignIdParameter = new ObjectParameter("CampaignId", typeof(int));
            }
    
            ObjectParameter productTypeParameter;
    
            if (productType.HasValue)
            {
                productTypeParameter = new ObjectParameter("ProductType", productType);
            }
            else
            {
                productTypeParameter = new ObjectParameter("ProductType", typeof(int));
            }
            return base.ExecuteFunction<PricingData>("GetCodePriceAndCampaign", codeParameter, priceParameter, campaignIdParameter, productTypeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="term">No Metadata Documentation available.</param>
        /// <param name="price">No Metadata Documentation available.</param>
        /// <param name="campaignId">No Metadata Documentation available.</param>
        /// <param name="productType">No Metadata Documentation available.</param>
        public virtual ObjectResult<PricingData> GetCodeTermPriceAndCampaign(string code, Nullable<int> term, Nullable<decimal> price, Nullable<int> campaignId, Nullable<int> productType)
        {
    
            ObjectParameter codeParameter;
    
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(string));
            }
    
            ObjectParameter termParameter;
    
            if (term.HasValue)
            {
                termParameter = new ObjectParameter("term", term);
            }
            else
            {
                termParameter = new ObjectParameter("term", typeof(int));
            }
    
            ObjectParameter priceParameter;
    
            if (price.HasValue)
            {
                priceParameter = new ObjectParameter("price", price);
            }
            else
            {
                priceParameter = new ObjectParameter("price", typeof(decimal));
            }
    
            ObjectParameter campaignIdParameter;
    
            if (campaignId.HasValue)
            {
                campaignIdParameter = new ObjectParameter("CampaignId", campaignId);
            }
            else
            {
                campaignIdParameter = new ObjectParameter("CampaignId", typeof(int));
            }
    
            ObjectParameter productTypeParameter;
    
            if (productType.HasValue)
            {
                productTypeParameter = new ObjectParameter("ProductType", productType);
            }
            else
            {
                productTypeParameter = new ObjectParameter("ProductType", typeof(int));
            }
            return base.ExecuteFunction<PricingData>("GetCodeTermPriceAndCampaign", codeParameter, termParameter, priceParameter, campaignIdParameter, productTypeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="zRemitCode">No Metadata Documentation available.</param>
        /// <param name="iTerm">No Metadata Documentation available.</param>
        /// <param name="iCampaignID">No Metadata Documentation available.</param>
        public virtual ObjectResult<ProductCodeFromRemitCode> GetProductCodeFromRemitCodeAndTerm(string zRemitCode, Nullable<int> iTerm, Nullable<int> iCampaignID)
        {
    
            ObjectParameter zRemitCodeParameter;
    
            if (zRemitCode != null)
            {
                zRemitCodeParameter = new ObjectParameter("zRemitCode", zRemitCode);
            }
            else
            {
                zRemitCodeParameter = new ObjectParameter("zRemitCode", typeof(string));
            }
    
            ObjectParameter iTermParameter;
    
            if (iTerm.HasValue)
            {
                iTermParameter = new ObjectParameter("iTerm", iTerm);
            }
            else
            {
                iTermParameter = new ObjectParameter("iTerm", typeof(int));
            }
    
            ObjectParameter iCampaignIDParameter;
    
            if (iCampaignID.HasValue)
            {
                iCampaignIDParameter = new ObjectParameter("iCampaignID", iCampaignID);
            }
            else
            {
                iCampaignIDParameter = new ObjectParameter("iCampaignID", typeof(int));
            }
            return base.ExecuteFunction<ProductCodeFromRemitCode>("GetProductCodeFromRemitCodeAndTerm", zRemitCodeParameter, iTermParameter, iCampaignIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="p_date">No Metadata Documentation available.</param>
        /// <param name="p_amount">No Metadata Documentation available.</param>
        /// <param name="p_section_id">No Metadata Documentation available.</param>
        /// <param name="p_product_code">No Metadata Documentation available.</param>
        /// <param name="p_is_straight_order">No Metadata Documentation available.</param>
        /// <param name="p_campaign_id">No Metadata Documentation available.</param>
        /// <param name="magPrice_Instance">No Metadata Documentation available.</param>
        /// <param name="p_ProvinceCode">No Metadata Documentation available.</param>
        public virtual ObjectResult<TaxResult> CalculateTax(string p_date, Nullable<decimal> p_amount, Nullable<int> p_section_id, string p_product_code, string p_is_straight_order, Nullable<int> p_campaign_id, Nullable<int> magPrice_Instance, string p_ProvinceCode)
        {
    
            ObjectParameter p_dateParameter;
    
            if (p_date != null)
            {
                p_dateParameter = new ObjectParameter("p_date", p_date);
            }
            else
            {
                p_dateParameter = new ObjectParameter("p_date", typeof(string));
            }
    
            ObjectParameter p_amountParameter;
    
            if (p_amount.HasValue)
            {
                p_amountParameter = new ObjectParameter("p_amount", p_amount);
            }
            else
            {
                p_amountParameter = new ObjectParameter("p_amount", typeof(decimal));
            }
    
            ObjectParameter p_section_idParameter;
    
            if (p_section_id.HasValue)
            {
                p_section_idParameter = new ObjectParameter("p_section_id", p_section_id);
            }
            else
            {
                p_section_idParameter = new ObjectParameter("p_section_id", typeof(int));
            }
    
            ObjectParameter p_product_codeParameter;
    
            if (p_product_code != null)
            {
                p_product_codeParameter = new ObjectParameter("p_product_code", p_product_code);
            }
            else
            {
                p_product_codeParameter = new ObjectParameter("p_product_code", typeof(string));
            }
    
            ObjectParameter p_is_straight_orderParameter;
    
            if (p_is_straight_order != null)
            {
                p_is_straight_orderParameter = new ObjectParameter("p_is_straight_order", p_is_straight_order);
            }
            else
            {
                p_is_straight_orderParameter = new ObjectParameter("p_is_straight_order", typeof(string));
            }
    
            ObjectParameter p_campaign_idParameter;
    
            if (p_campaign_id.HasValue)
            {
                p_campaign_idParameter = new ObjectParameter("p_campaign_id", p_campaign_id);
            }
            else
            {
                p_campaign_idParameter = new ObjectParameter("p_campaign_id", typeof(int));
            }
    
            ObjectParameter magPrice_InstanceParameter;
    
            if (magPrice_Instance.HasValue)
            {
                magPrice_InstanceParameter = new ObjectParameter("MagPrice_Instance", magPrice_Instance);
            }
            else
            {
                magPrice_InstanceParameter = new ObjectParameter("MagPrice_Instance", typeof(int));
            }
    
            ObjectParameter p_ProvinceCodeParameter;
    
            if (p_ProvinceCode != null)
            {
                p_ProvinceCodeParameter = new ObjectParameter("p_ProvinceCode", p_ProvinceCode);
            }
            else
            {
                p_ProvinceCodeParameter = new ObjectParameter("p_ProvinceCode", typeof(string));
            }
            return base.ExecuteFunction<TaxResult>("CalculateTax", p_dateParameter, p_amountParameter, p_section_idParameter, p_product_codeParameter, p_is_straight_orderParameter, p_campaign_idParameter, magPrice_InstanceParameter, p_ProvinceCodeParameter);
        }

        #endregion
    }
}
