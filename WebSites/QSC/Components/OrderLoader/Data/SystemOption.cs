//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Data
{
    [DataContract(IsReference = true)]
    public partial class SystemOption: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string KeyValue
        {
            get { return _keyValue; }
            set
            {
                if (_keyValue != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'KeyValue' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _keyValue = value;
                    OnPropertyChanged("KeyValue");
                }
            }
        }
        private string _keyValue;
    
        [DataMember]
        public string DescValue
        {
            get { return _descValue; }
            set
            {
                if (_descValue != value)
                {
                    _descValue = value;
                    OnPropertyChanged("DescValue");
                }
            }
        }
        private string _descValue;
    
        [DataMember]
        public string TextValue
        {
            get { return _textValue; }
            set
            {
                if (_textValue != value)
                {
                    _textValue = value;
                    OnPropertyChanged("TextValue");
                }
            }
        }
        private string _textValue;
    
        [DataMember]
        public double DoubleValue
        {
            get { return _doubleValue; }
            set
            {
                if (_doubleValue != value)
                {
                    _doubleValue = value;
                    OnPropertyChanged("DoubleValue");
                }
            }
        }
        private double _doubleValue;
    
        [DataMember]
        public int Long1Value
        {
            get { return _long1Value; }
            set
            {
                if (_long1Value != value)
                {
                    _long1Value = value;
                    OnPropertyChanged("Long1Value");
                }
            }
        }
        private int _long1Value;
    
        [DataMember]
        public int Long2Value
        {
            get { return _long2Value; }
            set
            {
                if (_long2Value != value)
                {
                    _long2Value = value;
                    OnPropertyChanged("Long2Value");
                }
            }
        }
        private int _long2Value;
    
        [DataMember]
        public string TextPrompt
        {
            get { return _textPrompt; }
            set
            {
                if (_textPrompt != value)
                {
                    _textPrompt = value;
                    OnPropertyChanged("TextPrompt");
                }
            }
        }
        private string _textPrompt;
    
        [DataMember]
        public string DoublePrompt
        {
            get { return _doublePrompt; }
            set
            {
                if (_doublePrompt != value)
                {
                    _doublePrompt = value;
                    OnPropertyChanged("DoublePrompt");
                }
            }
        }
        private string _doublePrompt;
    
        [DataMember]
        public string Long1Prompt
        {
            get { return _long1Prompt; }
            set
            {
                if (_long1Prompt != value)
                {
                    _long1Prompt = value;
                    OnPropertyChanged("Long1Prompt");
                }
            }
        }
        private string _long1Prompt;
    
        [DataMember]
        public string Long2Prompt
        {
            get { return _long2Prompt; }
            set
            {
                if (_long2Prompt != value)
                {
                    _long2Prompt = value;
                    OnPropertyChanged("Long2Prompt");
                }
            }
        }
        private string _long2Prompt;
    
        [DataMember]
        public int CodeHeaderInstance
        {
            get { return _codeHeaderInstance; }
            set
            {
                if (_codeHeaderInstance != value)
                {
                    _codeHeaderInstance = value;
                    OnPropertyChanged("CodeHeaderInstance");
                }
            }
        }
        private int _codeHeaderInstance;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
