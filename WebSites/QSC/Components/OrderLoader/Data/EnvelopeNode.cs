//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Data
{
    
    public partial class EnvelopeNode : INotifyComplexPropertyChanging, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string LASTNAME
        {
            get { return _lASTNAME; }
            set
            {
                if (_lASTNAME != value)
                {
                    OnComplexPropertyChanging();
                    _lASTNAME = value;
                    OnPropertyChanged("LASTNAME");
                }
            }
        }
        private string _lASTNAME;
    
        [DataMember]
        public string FIRSTINITIAL
        {
            get { return _fIRSTINITIAL; }
            set
            {
                if (_fIRSTINITIAL != value)
                {
                    OnComplexPropertyChanging();
                    _fIRSTINITIAL = value;
                    OnPropertyChanged("FIRSTINITIAL");
                }
            }
        }
        private string _fIRSTINITIAL;
    
        [DataMember]
        public string CLASSROOM
        {
            get { return _cLASSROOM; }
            set
            {
                if (_cLASSROOM != value)
                {
                    OnComplexPropertyChanging();
                    _cLASSROOM = value;
                    OnPropertyChanged("CLASSROOM");
                }
            }
        }
        private string _cLASSROOM;
    
        [DataMember]
        public Nullable<int> NUMBEROFFORMS
        {
            get { return _nUMBEROFFORMS; }
            set
            {
                if (_nUMBEROFFORMS != value)
                {
                    OnComplexPropertyChanging();
                    _nUMBEROFFORMS = value;
                    OnPropertyChanged("NUMBEROFFORMS");
                }
            }
        }
        private Nullable<int> _nUMBEROFFORMS;
    
        [DataMember]
        public Nullable<int> NUMBEROFUNITS
        {
            get { return _nUMBEROFUNITS; }
            set
            {
                if (_nUMBEROFUNITS != value)
                {
                    OnComplexPropertyChanging();
                    _nUMBEROFUNITS = value;
                    OnPropertyChanged("NUMBEROFUNITS");
                }
            }
        }
        private Nullable<int> _nUMBEROFUNITS;

        #endregion
        #region ChangeTracking
    
        private void OnComplexPropertyChanging()
        {
            if (_complexPropertyChanging != null)
            {
                _complexPropertyChanging(this, new EventArgs());
            }
        }
    
        event EventHandler INotifyComplexPropertyChanging.ComplexPropertyChanging { add { _complexPropertyChanging += value; } remove { _complexPropertyChanging -= value; } }
        private event EventHandler _complexPropertyChanging;
    
        private void OnPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
    
        public static void RecordComplexOriginalValues(String parentPropertyName, EnvelopeNode complexObject, ObjectChangeTracker changeTracker)
        {
            if (String.IsNullOrEmpty(parentPropertyName))
            {
                throw new ArgumentException("String parameter cannot be null or empty.", "parentPropertyName");
            }
    
            if (changeTracker == null)
            {
                throw new ArgumentNullException("changeTracker");
            }
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.LASTNAME", parentPropertyName), complexObject == null ? null : (object)complexObject.LASTNAME);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.FIRSTINITIAL", parentPropertyName), complexObject == null ? null : (object)complexObject.FIRSTINITIAL);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.CLASSROOM", parentPropertyName), complexObject == null ? null : (object)complexObject.CLASSROOM);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.NUMBEROFFORMS", parentPropertyName), complexObject == null ? null : (object)complexObject.NUMBEROFFORMS);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.NUMBEROFUNITS", parentPropertyName), complexObject == null ? null : (object)complexObject.NUMBEROFUNITS);
        }

        #endregion
    }
}
