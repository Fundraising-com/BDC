//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Data
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CustomerPaymentHeader))]
    [KnownType(typeof(CreditCardBatch))]
    public partial class CreditCardPayment: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int CustomerPaymentHeaderInstance
        {
            get { return _customerPaymentHeaderInstance; }
            set
            {
                if (_customerPaymentHeaderInstance != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CustomerPaymentHeaderInstance' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (CustomerPaymentHeader != null && CustomerPaymentHeader.Instance != value)
                        {
                            CustomerPaymentHeader = null;
                        }
                    }
                    _customerPaymentHeaderInstance = value;
                    OnPropertyChanged("CustomerPaymentHeaderInstance");
                }
            }
        }
        private int _customerPaymentHeaderInstance;
    
        [DataMember]
        public string CreditCardNumber
        {
            get { return _creditCardNumber; }
            set
            {
                if (_creditCardNumber != value)
                {
                    _creditCardNumber = value;
                    OnPropertyChanged("CreditCardNumber");
                }
            }
        }
        private string _creditCardNumber;
    
        [DataMember]
        public string ExpirationDate
        {
            get { return _expirationDate; }
            set
            {
                if (_expirationDate != value)
                {
                    _expirationDate = value;
                    OnPropertyChanged("ExpirationDate");
                }
            }
        }
        private string _expirationDate;
    
        [DataMember]
        public int ReasonCode
        {
            get { return _reasonCode; }
            set
            {
                if (_reasonCode != value)
                {
                    _reasonCode = value;
                    OnPropertyChanged("ReasonCode");
                }
            }
        }
        private int _reasonCode;
    
        [DataMember]
        public string AuthorizationSource
        {
            get { return _authorizationSource; }
            set
            {
                if (_authorizationSource != value)
                {
                    _authorizationSource = value;
                    OnPropertyChanged("AuthorizationSource");
                }
            }
        }
        private string _authorizationSource;
    
        [DataMember]
        public string AuthorizationCode
        {
            get { return _authorizationCode; }
            set
            {
                if (_authorizationCode != value)
                {
                    _authorizationCode = value;
                    OnPropertyChanged("AuthorizationCode");
                }
            }
        }
        private string _authorizationCode;
    
        [DataMember]
        public System.DateTime AuthorizationDate
        {
            get { return _authorizationDate; }
            set
            {
                if (_authorizationDate != value)
                {
                    _authorizationDate = value;
                    OnPropertyChanged("AuthorizationDate");
                }
            }
        }
        private System.DateTime _authorizationDate;
    
        [DataMember]
        public string AVSResponseCode
        {
            get { return _aVSResponseCode; }
            set
            {
                if (_aVSResponseCode != value)
                {
                    _aVSResponseCode = value;
                    OnPropertyChanged("AVSResponseCode");
                }
            }
        }
        private string _aVSResponseCode;
    
        [DataMember]
        public int StatusInstance
        {
            get { return _statusInstance; }
            set
            {
                if (_statusInstance != value)
                {
                    _statusInstance = value;
                    OnPropertyChanged("StatusInstance");
                }
            }
        }
        private int _statusInstance;
    
        [DataMember]
        public System.DateTime DateCreated
        {
            get { return _dateCreated; }
            set
            {
                if (_dateCreated != value)
                {
                    _dateCreated = value;
                    OnPropertyChanged("DateCreated");
                }
            }
        }
        private System.DateTime _dateCreated;
    
        [DataMember]
        public string UserIDCreated
        {
            get { return _userIDCreated; }
            set
            {
                if (_userIDCreated != value)
                {
                    _userIDCreated = value;
                    OnPropertyChanged("UserIDCreated");
                }
            }
        }
        private string _userIDCreated;
    
        [DataMember]
        public System.DateTime DateChanged
        {
            get { return _dateChanged; }
            set
            {
                if (_dateChanged != value)
                {
                    _dateChanged = value;
                    OnPropertyChanged("DateChanged");
                }
            }
        }
        private System.DateTime _dateChanged;
    
        [DataMember]
        public string UserIDChanged
        {
            get { return _userIDChanged; }
            set
            {
                if (_userIDChanged != value)
                {
                    _userIDChanged = value;
                    OnPropertyChanged("UserIDChanged");
                }
            }
        }
        private string _userIDChanged;
    
        [DataMember]
        public int BatchID
        {
            get { return _batchID; }
            set
            {
                if (_batchID != value)
                {
                    ChangeTracker.RecordOriginalValue("BatchID", _batchID);
                    if (!IsDeserializing)
                    {
                        if (CreditCardBatch != null && CreditCardBatch.ID != value)
                        {
                            CreditCardBatch = null;
                        }
                    }
                    _batchID = value;
                    OnPropertyChanged("BatchID");
                }
            }
        }
        private int _batchID;
    
        [DataMember]
        public string VeriSignID
        {
            get { return _veriSignID; }
            set
            {
                if (_veriSignID != value)
                {
                    _veriSignID = value;
                    OnPropertyChanged("VeriSignID");
                }
            }
        }
        private string _veriSignID;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public CustomerPaymentHeader CustomerPaymentHeader
        {
            get { return _customerPaymentHeader; }
            set
            {
                if (!ReferenceEquals(_customerPaymentHeader, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (CustomerPaymentHeaderInstance != value.Instance)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _customerPaymentHeader;
                    _customerPaymentHeader = value;
                    FixupCustomerPaymentHeader(previousValue);
                    OnNavigationPropertyChanged("CustomerPaymentHeader");
                }
            }
        }
        private CustomerPaymentHeader _customerPaymentHeader;
    
        [DataMember]
        public CreditCardBatch CreditCardBatch
        {
            get { return _creditCardBatch; }
            set
            {
                if (!ReferenceEquals(_creditCardBatch, value))
                {
                    var previousValue = _creditCardBatch;
                    _creditCardBatch = value;
                    FixupCreditCardBatch(previousValue);
                    OnNavigationPropertyChanged("CreditCardBatch");
                }
            }
        }
        private CreditCardBatch _creditCardBatch;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            CustomerPaymentHeader = null;
            CreditCardBatch = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupCustomerPaymentHeader(CustomerPaymentHeader previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.CreditCardPayment, this))
            {
                previousValue.CreditCardPayment = null;
            }
    
            if (CustomerPaymentHeader != null)
            {
                CustomerPaymentHeader.CreditCardPayment = this;
                CustomerPaymentHeaderInstance = CustomerPaymentHeader.Instance;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CustomerPaymentHeader")
                    && (ChangeTracker.OriginalValues["CustomerPaymentHeader"] == CustomerPaymentHeader))
                {
                    ChangeTracker.OriginalValues.Remove("CustomerPaymentHeader");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CustomerPaymentHeader", previousValue);
                }
                if (CustomerPaymentHeader != null && !CustomerPaymentHeader.ChangeTracker.ChangeTrackingEnabled)
                {
                    CustomerPaymentHeader.StartTracking();
                }
            }
        }
    
        private void FixupCreditCardBatch(CreditCardBatch previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CreditCardPayments.Contains(this))
            {
                previousValue.CreditCardPayments.Remove(this);
            }
    
            if (CreditCardBatch != null)
            {
                if (!CreditCardBatch.CreditCardPayments.Contains(this))
                {
                    CreditCardBatch.CreditCardPayments.Add(this);
                }
    
                BatchID = CreditCardBatch.ID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CreditCardBatch")
                    && (ChangeTracker.OriginalValues["CreditCardBatch"] == CreditCardBatch))
                {
                    ChangeTracker.OriginalValues.Remove("CreditCardBatch");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CreditCardBatch", previousValue);
                }
                if (CreditCardBatch != null && !CreditCardBatch.ChangeTracker.ChangeTrackingEnabled)
                {
                    CreditCardBatch.StartTracking();
                }
            }
        }

        #endregion
    }
}
