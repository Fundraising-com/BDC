//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Data
{
    
    public partial class PricingData : INotifyComplexPropertyChanging, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string Product_Code
        {
            get { return _product_Code; }
            set
            {
                if (_product_Code != value)
                {
                    OnComplexPropertyChanging();
                    _product_Code = value;
                    OnPropertyChanged("Product_Code");
                }
            }
        }
        private string _product_Code;
    
        [DataMember]
        public string Product_Sort_Name
        {
            get { return _product_Sort_Name; }
            set
            {
                if (_product_Sort_Name != value)
                {
                    OnComplexPropertyChanging();
                    _product_Sort_Name = value;
                    OnPropertyChanged("Product_Sort_Name");
                }
            }
        }
        private string _product_Sort_Name;
    
        [DataMember]
        public int MagPrice_instance
        {
            get { return _magPrice_instance; }
            set
            {
                if (_magPrice_instance != value)
                {
                    OnComplexPropertyChanging();
                    _magPrice_instance = value;
                    OnPropertyChanged("MagPrice_instance");
                }
            }
        }
        private int _magPrice_instance;
    
        [DataMember]
        public int Term
        {
            get { return _term; }
            set
            {
                if (_term != value)
                {
                    OnComplexPropertyChanging();
                    _term = value;
                    OnPropertyChanged("Term");
                }
            }
        }
        private int _term;
    
        [DataMember]
        public decimal Price
        {
            get { return _price; }
            set
            {
                if (_price != value)
                {
                    OnComplexPropertyChanging();
                    _price = value;
                    OnPropertyChanged("Price");
                }
            }
        }
        private decimal _price;
    
        [DataMember]
        public int ProgramSection
        {
            get { return _programSection; }
            set
            {
                if (_programSection != value)
                {
                    OnComplexPropertyChanging();
                    _programSection = value;
                    OnPropertyChanged("ProgramSection");
                }
            }
        }
        private int _programSection;
    
        [DataMember]
        public string pricing_season
        {
            get { return _pricing_season; }
            set
            {
                if (_pricing_season != value)
                {
                    OnComplexPropertyChanging();
                    _pricing_season = value;
                    OnPropertyChanged("pricing_season");
                }
            }
        }
        private string _pricing_season;
    
        [DataMember]
        public string Language_code
        {
            get { return _language_code; }
            set
            {
                if (_language_code != value)
                {
                    OnComplexPropertyChanging();
                    _language_code = value;
                    OnPropertyChanged("Language_code");
                }
            }
        }
        private string _language_code;
    
        [DataMember]
        public string CatalogCode
        {
            get { return _catalogCode; }
            set
            {
                if (_catalogCode != value)
                {
                    OnComplexPropertyChanging();
                    _catalogCode = value;
                    OnPropertyChanged("CatalogCode");
                }
            }
        }
        private string _catalogCode;

        #endregion
        #region ChangeTracking
    
        private void OnComplexPropertyChanging()
        {
            if (_complexPropertyChanging != null)
            {
                _complexPropertyChanging(this, new EventArgs());
            }
        }
    
        event EventHandler INotifyComplexPropertyChanging.ComplexPropertyChanging { add { _complexPropertyChanging += value; } remove { _complexPropertyChanging -= value; } }
        private event EventHandler _complexPropertyChanging;
    
        private void OnPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
    
        public static void RecordComplexOriginalValues(String parentPropertyName, PricingData complexObject, ObjectChangeTracker changeTracker)
        {
            if (String.IsNullOrEmpty(parentPropertyName))
            {
                throw new ArgumentException("String parameter cannot be null or empty.", "parentPropertyName");
            }
    
            if (changeTracker == null)
            {
                throw new ArgumentNullException("changeTracker");
            }
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Product_Code", parentPropertyName), complexObject == null ? null : (object)complexObject.Product_Code);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Product_Sort_Name", parentPropertyName), complexObject == null ? null : (object)complexObject.Product_Sort_Name);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.MagPrice_instance", parentPropertyName), complexObject == null ? null : (object)complexObject.MagPrice_instance);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Term", parentPropertyName), complexObject == null ? null : (object)complexObject.Term);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Price", parentPropertyName), complexObject == null ? null : (object)complexObject.Price);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ProgramSection", parentPropertyName), complexObject == null ? null : (object)complexObject.ProgramSection);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.pricing_season", parentPropertyName), complexObject == null ? null : (object)complexObject.pricing_season);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Language_code", parentPropertyName), complexObject == null ? null : (object)complexObject.Language_code);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.CatalogCode", parentPropertyName), complexObject == null ? null : (object)complexObject.CatalogCode);
        }

        #endregion
    }
}
