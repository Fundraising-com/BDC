//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Data
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CustomerOrderHeader))]
    [KnownType(typeof(Customer))]
    public partial class CustomerOrderDetail: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int CustomerOrderHeaderInstance
        {
            get { return _customerOrderHeaderInstance; }
            set
            {
                if (_customerOrderHeaderInstance != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CustomerOrderHeaderInstance' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (CustomerOrderHeader != null && CustomerOrderHeader.Instance != value)
                        {
                            CustomerOrderHeader = null;
                        }
                    }
                    _customerOrderHeaderInstance = value;
                    OnPropertyChanged("CustomerOrderHeaderInstance");
                }
            }
        }
        private int _customerOrderHeaderInstance;
    
        [DataMember]
        public int TransID
        {
            get { return _transID; }
            set
            {
                if (_transID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TransID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _transID = value;
                    OnPropertyChanged("TransID");
                }
            }
        }
        private int _transID;
    
        [DataMember]
        public Nullable<int> CustomerShipToInstance
        {
            get { return _customerShipToInstance; }
            set
            {
                if (_customerShipToInstance != value)
                {
                    ChangeTracker.RecordOriginalValue("CustomerShipToInstance", _customerShipToInstance);
                    if (!IsDeserializing)
                    {
                        if (Customer != null && Customer.Instance != value)
                        {
                            Customer = null;
                        }
                    }
                    _customerShipToInstance = value;
                    OnPropertyChanged("CustomerShipToInstance");
                }
            }
        }
        private Nullable<int> _customerShipToInstance;
    
        [DataMember]
        public string ProductCode
        {
            get { return _productCode; }
            set
            {
                if (_productCode != value)
                {
                    _productCode = value;
                    OnPropertyChanged("ProductCode");
                }
            }
        }
        private string _productCode;
    
        [DataMember]
        public string ProductName
        {
            get { return _productName; }
            set
            {
                if (_productName != value)
                {
                    _productName = value;
                    OnPropertyChanged("ProductName");
                }
            }
        }
        private string _productName;
    
        [DataMember]
        public Nullable<int> Quantity
        {
            get { return _quantity; }
            set
            {
                if (_quantity != value)
                {
                    _quantity = value;
                    OnPropertyChanged("Quantity");
                }
            }
        }
        private Nullable<int> _quantity;
    
        [DataMember]
        public Nullable<decimal> Price
        {
            get { return _price; }
            set
            {
                if (_price != value)
                {
                    _price = value;
                    OnPropertyChanged("Price");
                }
            }
        }
        private Nullable<decimal> _price;
    
        [DataMember]
        public Nullable<decimal> PriceA
        {
            get { return _priceA; }
            set
            {
                if (_priceA != value)
                {
                    _priceA = value;
                    OnPropertyChanged("PriceA");
                }
            }
        }
        private Nullable<decimal> _priceA;
    
        [DataMember]
        public Nullable<decimal> Tax
        {
            get { return _tax; }
            set
            {
                if (_tax != value)
                {
                    _tax = value;
                    OnPropertyChanged("Tax");
                }
            }
        }
        private Nullable<decimal> _tax;
    
        [DataMember]
        public Nullable<decimal> TaxA
        {
            get { return _taxA; }
            set
            {
                if (_taxA != value)
                {
                    _taxA = value;
                    OnPropertyChanged("TaxA");
                }
            }
        }
        private Nullable<decimal> _taxA;
    
        [DataMember]
        public Nullable<int> StatusInstance
        {
            get { return _statusInstance; }
            set
            {
                if (_statusInstance != value)
                {
                    _statusInstance = value;
                    OnPropertyChanged("StatusInstance");
                }
            }
        }
        private Nullable<int> _statusInstance;
    
        [DataMember]
        public Nullable<bool> DelFlag
        {
            get { return _delFlag; }
            set
            {
                if (_delFlag != value)
                {
                    _delFlag = value;
                    OnPropertyChanged("DelFlag");
                }
            }
        }
        private Nullable<bool> _delFlag;
    
        [DataMember]
        public string Renewal
        {
            get { return _renewal; }
            set
            {
                if (_renewal != value)
                {
                    _renewal = value;
                    OnPropertyChanged("Renewal");
                }
            }
        }
        private string _renewal;
    
        [DataMember]
        public string Recipient
        {
            get { return _recipient; }
            set
            {
                if (_recipient != value)
                {
                    _recipient = value;
                    OnPropertyChanged("Recipient");
                }
            }
        }
        private string _recipient;
    
        [DataMember]
        public Nullable<bool> OverrideProduct
        {
            get { return _overrideProduct; }
            set
            {
                if (_overrideProduct != value)
                {
                    _overrideProduct = value;
                    OnPropertyChanged("OverrideProduct");
                }
            }
        }
        private Nullable<bool> _overrideProduct;
    
        [DataMember]
        public Nullable<System.DateTime> CreationDate
        {
            get { return _creationDate; }
            set
            {
                if (_creationDate != value)
                {
                    _creationDate = value;
                    OnPropertyChanged("CreationDate");
                }
            }
        }
        private Nullable<System.DateTime> _creationDate;
    
        [DataMember]
        public Nullable<System.DateTime> CrossedBridgeDate
        {
            get { return _crossedBridgeDate; }
            set
            {
                if (_crossedBridgeDate != value)
                {
                    _crossedBridgeDate = value;
                    OnPropertyChanged("CrossedBridgeDate");
                }
            }
        }
        private Nullable<System.DateTime> _crossedBridgeDate;
    
        [DataMember]
        public string ChangeUserID
        {
            get { return _changeUserID; }
            set
            {
                if (_changeUserID != value)
                {
                    _changeUserID = value;
                    OnPropertyChanged("ChangeUserID");
                }
            }
        }
        private string _changeUserID;
    
        [DataMember]
        public Nullable<System.DateTime> ChangeDate
        {
            get { return _changeDate; }
            set
            {
                if (_changeDate != value)
                {
                    _changeDate = value;
                    OnPropertyChanged("ChangeDate");
                }
            }
        }
        private Nullable<System.DateTime> _changeDate;
    
        [DataMember]
        public Nullable<int> InvoiceNumber
        {
            get { return _invoiceNumber; }
            set
            {
                if (_invoiceNumber != value)
                {
                    _invoiceNumber = value;
                    OnPropertyChanged("InvoiceNumber");
                }
            }
        }
        private Nullable<int> _invoiceNumber;
    
        [DataMember]
        public string AlphaProductCode
        {
            get { return _alphaProductCode; }
            set
            {
                if (_alphaProductCode != value)
                {
                    _alphaProductCode = value;
                    OnPropertyChanged("AlphaProductCode");
                }
            }
        }
        private string _alphaProductCode;
    
        [DataMember]
        public string CouponPage
        {
            get { return _couponPage; }
            set
            {
                if (_couponPage != value)
                {
                    _couponPage = value;
                    OnPropertyChanged("CouponPage");
                }
            }
        }
        private string _couponPage;
    
        [DataMember]
        public string FDIndicator
        {
            get { return _fDIndicator; }
            set
            {
                if (_fDIndicator != value)
                {
                    _fDIndicator = value;
                    OnPropertyChanged("FDIndicator");
                }
            }
        }
        private string _fDIndicator;
    
        [DataMember]
        public string MktgIndicator
        {
            get { return _mktgIndicator; }
            set
            {
                if (_mktgIndicator != value)
                {
                    _mktgIndicator = value;
                    OnPropertyChanged("MktgIndicator");
                }
            }
        }
        private string _mktgIndicator;
    
        [DataMember]
        public Nullable<int> ToteInstance
        {
            get { return _toteInstance; }
            set
            {
                if (_toteInstance != value)
                {
                    _toteInstance = value;
                    OnPropertyChanged("ToteInstance");
                }
            }
        }
        private Nullable<int> _toteInstance;
    
        [DataMember]
        public string GiftCD
        {
            get { return _giftCD; }
            set
            {
                if (_giftCD != value)
                {
                    _giftCD = value;
                    OnPropertyChanged("GiftCD");
                }
            }
        }
        private string _giftCD;
    
        [DataMember]
        public Nullable<bool> IsGift
        {
            get { return _isGift; }
            set
            {
                if (_isGift != value)
                {
                    _isGift = value;
                    OnPropertyChanged("IsGift");
                }
            }
        }
        private Nullable<bool> _isGift;
    
        [DataMember]
        public Nullable<bool> IsGiftCardSent
        {
            get { return _isGiftCardSent; }
            set
            {
                if (_isGiftCardSent != value)
                {
                    _isGiftCardSent = value;
                    OnPropertyChanged("IsGiftCardSent");
                }
            }
        }
        private Nullable<bool> _isGiftCardSent;
    
        [DataMember]
        public Nullable<System.DateTime> SendGiftCardBeforeDate
        {
            get { return _sendGiftCardBeforeDate; }
            set
            {
                if (_sendGiftCardBeforeDate != value)
                {
                    _sendGiftCardBeforeDate = value;
                    OnPropertyChanged("SendGiftCardBeforeDate");
                }
            }
        }
        private Nullable<System.DateTime> _sendGiftCardBeforeDate;
    
        [DataMember]
        public Nullable<int> ProgramSectionID
        {
            get { return _programSectionID; }
            set
            {
                if (_programSectionID != value)
                {
                    _programSectionID = value;
                    OnPropertyChanged("ProgramSectionID");
                }
            }
        }
        private Nullable<int> _programSectionID;
    
        [DataMember]
        public Nullable<decimal> CatalogPrice
        {
            get { return _catalogPrice; }
            set
            {
                if (_catalogPrice != value)
                {
                    _catalogPrice = value;
                    OnPropertyChanged("CatalogPrice");
                }
            }
        }
        private Nullable<decimal> _catalogPrice;
    
        [DataMember]
        public Nullable<int> QuantityReserved
        {
            get { return _quantityReserved; }
            set
            {
                if (_quantityReserved != value)
                {
                    _quantityReserved = value;
                    OnPropertyChanged("QuantityReserved");
                }
            }
        }
        private Nullable<int> _quantityReserved;
    
        [DataMember]
        public Nullable<int> PriceOverrideID
        {
            get { return _priceOverrideID; }
            set
            {
                if (_priceOverrideID != value)
                {
                    _priceOverrideID = value;
                    OnPropertyChanged("PriceOverrideID");
                }
            }
        }
        private Nullable<int> _priceOverrideID;
    
        [DataMember]
        public Nullable<int> ProductType
        {
            get { return _productType; }
            set
            {
                if (_productType != value)
                {
                    _productType = value;
                    OnPropertyChanged("ProductType");
                }
            }
        }
        private Nullable<int> _productType;
    
        [DataMember]
        public Nullable<int> PricingDetailsID
        {
            get { return _pricingDetailsID; }
            set
            {
                if (_pricingDetailsID != value)
                {
                    _pricingDetailsID = value;
                    OnPropertyChanged("PricingDetailsID");
                }
            }
        }
        private Nullable<int> _pricingDetailsID;
    
        [DataMember]
        public Nullable<decimal> Tax2
        {
            get { return _tax2; }
            set
            {
                if (_tax2 != value)
                {
                    _tax2 = value;
                    OnPropertyChanged("Tax2");
                }
            }
        }
        private Nullable<decimal> _tax2;
    
        [DataMember]
        public Nullable<decimal> Tax2A
        {
            get { return _tax2A; }
            set
            {
                if (_tax2A != value)
                {
                    _tax2A = value;
                    OnPropertyChanged("Tax2A");
                }
            }
        }
        private Nullable<decimal> _tax2A;
    
        [DataMember]
        public Nullable<decimal> Net
        {
            get { return _net; }
            set
            {
                if (_net != value)
                {
                    _net = value;
                    OnPropertyChanged("Net");
                }
            }
        }
        private Nullable<decimal> _net;
    
        [DataMember]
        public Nullable<decimal> Gross
        {
            get { return _gross; }
            set
            {
                if (_gross != value)
                {
                    _gross = value;
                    OnPropertyChanged("Gross");
                }
            }
        }
        private Nullable<decimal> _gross;
    
        [DataMember]
        public string SupporterName
        {
            get { return _supporterName; }
            set
            {
                if (_supporterName != value)
                {
                    _supporterName = value;
                    OnPropertyChanged("SupporterName");
                }
            }
        }
        private string _supporterName;
    
        [DataMember]
        public Nullable<bool> SendGiftCard
        {
            get { return _sendGiftCard; }
            set
            {
                if (_sendGiftCard != value)
                {
                    _sendGiftCard = value;
                    OnPropertyChanged("SendGiftCard");
                }
            }
        }
        private Nullable<bool> _sendGiftCard;
    
        [DataMember]
        public Nullable<int> QuantityShipped
        {
            get { return _quantityShipped; }
            set
            {
                if (_quantityShipped != value)
                {
                    _quantityShipped = value;
                    OnPropertyChanged("QuantityShipped");
                }
            }
        }
        private Nullable<int> _quantityShipped;
    
        [DataMember]
        public Nullable<int> ShipmentID
        {
            get { return _shipmentID; }
            set
            {
                if (_shipmentID != value)
                {
                    _shipmentID = value;
                    OnPropertyChanged("ShipmentID");
                }
            }
        }
        private Nullable<int> _shipmentID;
    
        [DataMember]
        public string ReplacedProductCode
        {
            get { return _replacedProductCode; }
            set
            {
                if (_replacedProductCode != value)
                {
                    _replacedProductCode = value;
                    OnPropertyChanged("ReplacedProductCode");
                }
            }
        }
        private string _replacedProductCode;
    
        [DataMember]
        public Nullable<int> ReplacedProductQty
        {
            get { return _replacedProductQty; }
            set
            {
                if (_replacedProductQty != value)
                {
                    _replacedProductQty = value;
                    OnPropertyChanged("ReplacedProductQty");
                }
            }
        }
        private Nullable<int> _replacedProductQty;
    
        [DataMember]
        public Nullable<int> DistributionCenterID
        {
            get { return _distributionCenterID; }
            set
            {
                if (_distributionCenterID != value)
                {
                    _distributionCenterID = value;
                    OnPropertyChanged("DistributionCenterID");
                }
            }
        }
        private Nullable<int> _distributionCenterID;
    
        [DataMember]
        public string Comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
                    _comment = value;
                    OnPropertyChanged("Comment");
                }
            }
        }
        private string _comment;
    
        [DataMember]
        public string CustomerComment
        {
            get { return _customerComment; }
            set
            {
                if (_customerComment != value)
                {
                    _customerComment = value;
                    OnPropertyChanged("CustomerComment");
                }
            }
        }
        private string _customerComment;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public CustomerOrderHeader CustomerOrderHeader
        {
            get { return _customerOrderHeader; }
            set
            {
                if (!ReferenceEquals(_customerOrderHeader, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (CustomerOrderHeaderInstance != value.Instance)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _customerOrderHeader;
                    _customerOrderHeader = value;
                    FixupCustomerOrderHeader(previousValue);
                    OnNavigationPropertyChanged("CustomerOrderHeader");
                }
            }
        }
        private CustomerOrderHeader _customerOrderHeader;
    
        [DataMember]
        public Customer Customer
        {
            get { return _customer; }
            set
            {
                if (!ReferenceEquals(_customer, value))
                {
                    var previousValue = _customer;
                    _customer = value;
                    FixupCustomer(previousValue);
                    OnNavigationPropertyChanged("Customer");
                }
            }
        }
        private Customer _customer;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            CustomerOrderHeader = null;
            Customer = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupCustomerOrderHeader(CustomerOrderHeader previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CustomerOrderDetails.Contains(this))
            {
                previousValue.CustomerOrderDetails.Remove(this);
            }
    
            if (CustomerOrderHeader != null)
            {
                if (!CustomerOrderHeader.CustomerOrderDetails.Contains(this))
                {
                    CustomerOrderHeader.CustomerOrderDetails.Add(this);
                }
    
                CustomerOrderHeaderInstance = CustomerOrderHeader.Instance;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CustomerOrderHeader")
                    && (ChangeTracker.OriginalValues["CustomerOrderHeader"] == CustomerOrderHeader))
                {
                    ChangeTracker.OriginalValues.Remove("CustomerOrderHeader");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CustomerOrderHeader", previousValue);
                }
                if (CustomerOrderHeader != null && !CustomerOrderHeader.ChangeTracker.ChangeTrackingEnabled)
                {
                    CustomerOrderHeader.StartTracking();
                }
            }
        }
    
        private void FixupCustomer(Customer previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CustomerOrderDetails.Contains(this))
            {
                previousValue.CustomerOrderDetails.Remove(this);
            }
    
            if (Customer != null)
            {
                if (!Customer.CustomerOrderDetails.Contains(this))
                {
                    Customer.CustomerOrderDetails.Add(this);
                }
    
                CustomerShipToInstance = Customer.Instance;
            }
            else if (!skipKeys)
            {
                CustomerShipToInstance = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Customer")
                    && (ChangeTracker.OriginalValues["Customer"] == Customer))
                {
                    ChangeTracker.OriginalValues.Remove("Customer");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Customer", previousValue);
                }
                if (Customer != null && !Customer.ChangeTracker.ChangeTrackingEnabled)
                {
                    Customer.StartTracking();
                }
            }
        }

        #endregion
    }
}
