//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Data
{
    
    public partial class AddressNode : INotifyComplexPropertyChanging, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string Address1
        {
            get { return _address1; }
            set
            {
                if (_address1 != value)
                {
                    OnComplexPropertyChanging();
                    _address1 = value;
                    OnPropertyChanged("Address1");
                }
            }
        }
        private string _address1;
    
        [DataMember]
        public string Address2
        {
            get { return _address2; }
            set
            {
                if (_address2 != value)
                {
                    OnComplexPropertyChanging();
                    _address2 = value;
                    OnPropertyChanged("Address2");
                }
            }
        }
        private string _address2;
    
        [DataMember]
        public string City
        {
            get { return _city; }
            set
            {
                if (_city != value)
                {
                    OnComplexPropertyChanging();
                    _city = value;
                    OnPropertyChanged("City");
                }
            }
        }
        private string _city;
    
        [DataMember]
        public string Province
        {
            get { return _province; }
            set
            {
                if (_province != value)
                {
                    OnComplexPropertyChanging();
                    _province = value;
                    OnPropertyChanged("Province");
                }
            }
        }
        private string _province;
    
        [DataMember]
        public string Postal
        {
            get { return _postal; }
            set
            {
                if (_postal != value)
                {
                    OnComplexPropertyChanging();
                    _postal = value;
                    OnPropertyChanged("Postal");
                }
            }
        }
        private string _postal;
    
        [DataMember]
        public string Phone
        {
            get { return _phone; }
            set
            {
                if (_phone != value)
                {
                    OnComplexPropertyChanging();
                    _phone = value;
                    OnPropertyChanged("Phone");
                }
            }
        }
        private string _phone;
    
        [DataMember]
        public int Status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    OnComplexPropertyChanging();
                    _status = value;
                    OnPropertyChanged("Status");
                }
            }
        }
        private int _status;

        #endregion
        #region ChangeTracking
    
        private void OnComplexPropertyChanging()
        {
            if (_complexPropertyChanging != null)
            {
                _complexPropertyChanging(this, new EventArgs());
            }
        }
    
        event EventHandler INotifyComplexPropertyChanging.ComplexPropertyChanging { add { _complexPropertyChanging += value; } remove { _complexPropertyChanging -= value; } }
        private event EventHandler _complexPropertyChanging;
    
        private void OnPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
    
        public static void RecordComplexOriginalValues(String parentPropertyName, AddressNode complexObject, ObjectChangeTracker changeTracker)
        {
            if (String.IsNullOrEmpty(parentPropertyName))
            {
                throw new ArgumentException("String parameter cannot be null or empty.", "parentPropertyName");
            }
    
            if (changeTracker == null)
            {
                throw new ArgumentNullException("changeTracker");
            }
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Address1", parentPropertyName), complexObject == null ? null : (object)complexObject.Address1);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Address2", parentPropertyName), complexObject == null ? null : (object)complexObject.Address2);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.City", parentPropertyName), complexObject == null ? null : (object)complexObject.City);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Province", parentPropertyName), complexObject == null ? null : (object)complexObject.Province);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Postal", parentPropertyName), complexObject == null ? null : (object)complexObject.Postal);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Phone", parentPropertyName), complexObject == null ? null : (object)complexObject.Phone);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Status", parentPropertyName), complexObject == null ? null : (object)complexObject.Status);
        }

        #endregion
    }
}
