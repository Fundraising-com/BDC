//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Data
{
    
    public partial class BatchNode : INotifyComplexPropertyChanging, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public Nullable<int> ORDERID
        {
            get { return _oRDERID; }
            set
            {
                if (_oRDERID != value)
                {
                    OnComplexPropertyChanging();
                    _oRDERID = value;
                    OnPropertyChanged("ORDERID");
                }
            }
        }
        private Nullable<int> _oRDERID;
    
        [DataMember]
        public Nullable<int> CAMPAIGNID
        {
            get { return _cAMPAIGNID; }
            set
            {
                if (_cAMPAIGNID != value)
                {
                    OnComplexPropertyChanging();
                    _cAMPAIGNID = value;
                    OnPropertyChanged("CAMPAIGNID");
                }
            }
        }
        private Nullable<int> _cAMPAIGNID;
    
        [DataMember]
        public Nullable<int> ACCOUNTID
        {
            get { return _aCCOUNTID; }
            set
            {
                if (_aCCOUNTID != value)
                {
                    OnComplexPropertyChanging();
                    _aCCOUNTID = value;
                    OnPropertyChanged("ACCOUNTID");
                }
            }
        }
        private Nullable<int> _aCCOUNTID;
    
        [DataMember]
        public string ACCOUNTNAME
        {
            get { return _aCCOUNTNAME; }
            set
            {
                if (_aCCOUNTNAME != value)
                {
                    OnComplexPropertyChanging();
                    _aCCOUNTNAME = value;
                    OnPropertyChanged("ACCOUNTNAME");
                }
            }
        }
        private string _aCCOUNTNAME;
    
        [DataMember]
        public Nullable<int> ORDERTYPE
        {
            get { return _oRDERTYPE; }
            set
            {
                if (_oRDERTYPE != value)
                {
                    OnComplexPropertyChanging();
                    _oRDERTYPE = value;
                    OnPropertyChanged("ORDERTYPE");
                }
            }
        }
        private Nullable<int> _oRDERTYPE;
    
        [DataMember]
        public Nullable<int> ORDERQUALIFIER
        {
            get { return _oRDERQUALIFIER; }
            set
            {
                if (_oRDERQUALIFIER != value)
                {
                    OnComplexPropertyChanging();
                    _oRDERQUALIFIER = value;
                    OnPropertyChanged("ORDERQUALIFIER");
                }
            }
        }
        private Nullable<int> _oRDERQUALIFIER;
    
        [DataMember]
        public string DATESENT
        {
            get { return _dATESENT; }
            set
            {
                if (_dATESENT != value)
                {
                    OnComplexPropertyChanging();
                    _dATESENT = value;
                    OnPropertyChanged("DATESENT");
                }
            }
        }
        private string _dATESENT;
    
        [DataMember]
        public string DATERECVD
        {
            get { return _dATERECVD; }
            set
            {
                if (_dATERECVD != value)
                {
                    OnComplexPropertyChanging();
                    _dATERECVD = value;
                    OnPropertyChanged("DATERECVD");
                }
            }
        }
        private string _dATERECVD;
    
        [DataMember]
        public Nullable<int> PROBLEMCODE
        {
            get { return _pROBLEMCODE; }
            set
            {
                if (_pROBLEMCODE != value)
                {
                    OnComplexPropertyChanging();
                    _pROBLEMCODE = value;
                    OnPropertyChanged("PROBLEMCODE");
                }
            }
        }
        private Nullable<int> _pROBLEMCODE;
    
        [DataMember]
        public decimal CHECKAMOUNT
        {
            get { return _cHECKAMOUNT; }
            set
            {
                if (_cHECKAMOUNT != value)
                {
                    OnComplexPropertyChanging();
                    _cHECKAMOUNT = value;
                    OnPropertyChanged("CHECKAMOUNT");
                }
            }
        }
        private decimal _cHECKAMOUNT;
    
        [DataMember]
        public decimal TOTALGROSSESTIMATE
        {
            get { return _tOTALGROSSESTIMATE; }
            set
            {
                if (_tOTALGROSSESTIMATE != value)
                {
                    OnComplexPropertyChanging();
                    _tOTALGROSSESTIMATE = value;
                    OnPropertyChanged("TOTALGROSSESTIMATE");
                }
            }
        }
        private decimal _tOTALGROSSESTIMATE;
    
        [DataMember]
        public Nullable<int> TOTALENVELOPES
        {
            get { return _tOTALENVELOPES; }
            set
            {
                if (_tOTALENVELOPES != value)
                {
                    OnComplexPropertyChanging();
                    _tOTALENVELOPES = value;
                    OnPropertyChanged("TOTALENVELOPES");
                }
            }
        }
        private Nullable<int> _tOTALENVELOPES;
    
        [DataMember]
        public Nullable<int> TOTALFORMS
        {
            get { return _tOTALFORMS; }
            set
            {
                if (_tOTALFORMS != value)
                {
                    OnComplexPropertyChanging();
                    _tOTALFORMS = value;
                    OnPropertyChanged("TOTALFORMS");
                }
            }
        }
        private Nullable<int> _tOTALFORMS;
    
        [DataMember]
        public Nullable<int> ISSTAFF
        {
            get { return _iSSTAFF; }
            set
            {
                if (_iSSTAFF != value)
                {
                    OnComplexPropertyChanging();
                    _iSSTAFF = value;
                    OnPropertyChanged("ISSTAFF");
                }
            }
        }
        private Nullable<int> _iSSTAFF;
    
        [DataMember]
        public Nullable<int> SOURCEID
        {
            get { return _sOURCEID; }
            set
            {
                if (_sOURCEID != value)
                {
                    OnComplexPropertyChanging();
                    _sOURCEID = value;
                    OnPropertyChanged("SOURCEID");
                }
            }
        }
        private Nullable<int> _sOURCEID;
    
        [DataMember]
        public decimal REPORTEDAMOUNT
        {
            get { return _rEPORTEDAMOUNT; }
            set
            {
                if (_rEPORTEDAMOUNT != value)
                {
                    OnComplexPropertyChanging();
                    _rEPORTEDAMOUNT = value;
                    OnPropertyChanged("REPORTEDAMOUNT");
                }
            }
        }
        private decimal _rEPORTEDAMOUNT;
    
        [DataMember]
        public string BATCHDATE
        {
            get { return _bATCHDATE; }
            set
            {
                if (_bATCHDATE != value)
                {
                    OnComplexPropertyChanging();
                    _bATCHDATE = value;
                    OnPropertyChanged("BATCHDATE");
                }
            }
        }
        private string _bATCHDATE;

        #endregion
        #region ChangeTracking
    
        private void OnComplexPropertyChanging()
        {
            if (_complexPropertyChanging != null)
            {
                _complexPropertyChanging(this, new EventArgs());
            }
        }
    
        event EventHandler INotifyComplexPropertyChanging.ComplexPropertyChanging { add { _complexPropertyChanging += value; } remove { _complexPropertyChanging -= value; } }
        private event EventHandler _complexPropertyChanging;
    
        private void OnPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
    
        public static void RecordComplexOriginalValues(String parentPropertyName, BatchNode complexObject, ObjectChangeTracker changeTracker)
        {
            if (String.IsNullOrEmpty(parentPropertyName))
            {
                throw new ArgumentException("String parameter cannot be null or empty.", "parentPropertyName");
            }
    
            if (changeTracker == null)
            {
                throw new ArgumentNullException("changeTracker");
            }
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ORDERID", parentPropertyName), complexObject == null ? null : (object)complexObject.ORDERID);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.CAMPAIGNID", parentPropertyName), complexObject == null ? null : (object)complexObject.CAMPAIGNID);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ACCOUNTID", parentPropertyName), complexObject == null ? null : (object)complexObject.ACCOUNTID);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ACCOUNTNAME", parentPropertyName), complexObject == null ? null : (object)complexObject.ACCOUNTNAME);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ORDERTYPE", parentPropertyName), complexObject == null ? null : (object)complexObject.ORDERTYPE);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ORDERQUALIFIER", parentPropertyName), complexObject == null ? null : (object)complexObject.ORDERQUALIFIER);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.DATESENT", parentPropertyName), complexObject == null ? null : (object)complexObject.DATESENT);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.DATERECVD", parentPropertyName), complexObject == null ? null : (object)complexObject.DATERECVD);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.PROBLEMCODE", parentPropertyName), complexObject == null ? null : (object)complexObject.PROBLEMCODE);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.CHECKAMOUNT", parentPropertyName), complexObject == null ? null : (object)complexObject.CHECKAMOUNT);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.TOTALGROSSESTIMATE", parentPropertyName), complexObject == null ? null : (object)complexObject.TOTALGROSSESTIMATE);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.TOTALENVELOPES", parentPropertyName), complexObject == null ? null : (object)complexObject.TOTALENVELOPES);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.TOTALFORMS", parentPropertyName), complexObject == null ? null : (object)complexObject.TOTALFORMS);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ISSTAFF", parentPropertyName), complexObject == null ? null : (object)complexObject.ISSTAFF);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.SOURCEID", parentPropertyName), complexObject == null ? null : (object)complexObject.SOURCEID);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.REPORTEDAMOUNT", parentPropertyName), complexObject == null ? null : (object)complexObject.REPORTEDAMOUNT);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.BATCHDATE", parentPropertyName), complexObject == null ? null : (object)complexObject.BATCHDATE);
        }

        #endregion
    }
}
