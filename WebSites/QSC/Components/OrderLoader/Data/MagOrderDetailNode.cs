//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Data
{
    
    public partial class MagOrderDetailNode : INotifyComplexPropertyChanging, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string RECIPIENT
        {
            get { return _rECIPIENT; }
            set
            {
                if (_rECIPIENT != value)
                {
                    OnComplexPropertyChanging();
                    _rECIPIENT = value;
                    OnPropertyChanged("RECIPIENT");
                }
            }
        }
        private string _rECIPIENT;
    
        [DataMember]
        public string PRODUCTCODE
        {
            get { return _pRODUCTCODE; }
            set
            {
                if (_pRODUCTCODE != value)
                {
                    OnComplexPropertyChanging();
                    _pRODUCTCODE = value;
                    OnPropertyChanged("PRODUCTCODE");
                }
            }
        }
        private string _pRODUCTCODE;
    
        [DataMember]
        public string PRODUCTNAME
        {
            get { return _pRODUCTNAME; }
            set
            {
                if (_pRODUCTNAME != value)
                {
                    OnComplexPropertyChanging();
                    _pRODUCTNAME = value;
                    OnPropertyChanged("PRODUCTNAME");
                }
            }
        }
        private string _pRODUCTNAME;
    
        [DataMember]
        public Nullable<int> QUANTITY
        {
            get { return _qUANTITY; }
            set
            {
                if (_qUANTITY != value)
                {
                    OnComplexPropertyChanging();
                    _qUANTITY = value;
                    OnPropertyChanged("QUANTITY");
                }
            }
        }
        private Nullable<int> _qUANTITY;
    
        [DataMember]
        public decimal PRICE
        {
            get { return _pRICE; }
            set
            {
                if (_pRICE != value)
                {
                    OnComplexPropertyChanging();
                    _pRICE = value;
                    OnPropertyChanged("PRICE");
                }
            }
        }
        private decimal _pRICE;
    
        [DataMember]
        public int PRODUCTLINE
        {
            get { return _pRODUCTLINE; }
            set
            {
                if (_pRODUCTLINE != value)
                {
                    OnComplexPropertyChanging();
                    _pRODUCTLINE = value;
                    OnPropertyChanged("PRODUCTLINE");
                }
            }
        }
        private int _pRODUCTLINE;
    
        [DataMember]
        public string RENEWA
        {
            get { return _rENEWA; }
            set
            {
                if (_rENEWA != value)
                {
                    OnComplexPropertyChanging();
                    _rENEWA = value;
                    OnPropertyChanged("RENEWA");
                }
            }
        }
        private string _rENEWA;
    
        [DataMember]
        public int STATUSINSTANCE
        {
            get { return _sTATUSINSTANCE; }
            set
            {
                if (_sTATUSINSTANCE != value)
                {
                    OnComplexPropertyChanging();
                    _sTATUSINSTANCE = value;
                    OnPropertyChanged("STATUSINSTANCE");
                }
            }
        }
        private int _sTATUSINSTANCE;
    
        [DataMember]
        public int PRICEOVERRIDE
        {
            get { return _pRICEOVERRIDE; }
            set
            {
                if (_pRICEOVERRIDE != value)
                {
                    OnComplexPropertyChanging();
                    _pRICEOVERRIDE = value;
                    OnPropertyChanged("PRICEOVERRIDE");
                }
            }
        }
        private int _pRICEOVERRIDE;

        #endregion
        #region ChangeTracking
    
        private void OnComplexPropertyChanging()
        {
            if (_complexPropertyChanging != null)
            {
                _complexPropertyChanging(this, new EventArgs());
            }
        }
    
        event EventHandler INotifyComplexPropertyChanging.ComplexPropertyChanging { add { _complexPropertyChanging += value; } remove { _complexPropertyChanging -= value; } }
        private event EventHandler _complexPropertyChanging;
    
        private void OnPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
    
        public static void RecordComplexOriginalValues(String parentPropertyName, MagOrderDetailNode complexObject, ObjectChangeTracker changeTracker)
        {
            if (String.IsNullOrEmpty(parentPropertyName))
            {
                throw new ArgumentException("String parameter cannot be null or empty.", "parentPropertyName");
            }
    
            if (changeTracker == null)
            {
                throw new ArgumentNullException("changeTracker");
            }
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.RECIPIENT", parentPropertyName), complexObject == null ? null : (object)complexObject.RECIPIENT);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.PRODUCTCODE", parentPropertyName), complexObject == null ? null : (object)complexObject.PRODUCTCODE);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.PRODUCTNAME", parentPropertyName), complexObject == null ? null : (object)complexObject.PRODUCTNAME);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.QUANTITY", parentPropertyName), complexObject == null ? null : (object)complexObject.QUANTITY);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.PRICE", parentPropertyName), complexObject == null ? null : (object)complexObject.PRICE);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.PRODUCTLINE", parentPropertyName), complexObject == null ? null : (object)complexObject.PRODUCTLINE);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.RENEWA", parentPropertyName), complexObject == null ? null : (object)complexObject.RENEWA);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.STATUSINSTANCE", parentPropertyName), complexObject == null ? null : (object)complexObject.STATUSINSTANCE);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.PRICEOVERRIDE", parentPropertyName), complexObject == null ? null : (object)complexObject.PRICEOVERRIDE);
        }

        #endregion
    }
}
