//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Data
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Batch))]
    [KnownType(typeof(Customer))]
    [KnownType(typeof(CustomerOrderDetail))]
    [KnownType(typeof(Student))]
    [KnownType(typeof(InternetOrderID))]
    [KnownType(typeof(CustomerPaymentHeader))]
    public partial class CustomerOrderHeader: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int Instance
        {
            get { return _instance; }
            set
            {
                if (_instance != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Instance' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _instance = value;
                    OnPropertyChanged("Instance");
                }
            }
        }
        private int _instance;
    
        [DataMember]
        public Nullable<int> NextDetailTransID
        {
            get { return _nextDetailTransID; }
            set
            {
                if (_nextDetailTransID != value)
                {
                    _nextDetailTransID = value;
                    OnPropertyChanged("NextDetailTransID");
                }
            }
        }
        private Nullable<int> _nextDetailTransID;
    
        [DataMember]
        public Nullable<int> AccountID
        {
            get { return _accountID; }
            set
            {
                if (_accountID != value)
                {
                    _accountID = value;
                    OnPropertyChanged("AccountID");
                }
            }
        }
        private Nullable<int> _accountID;
    
        [DataMember]
        public Nullable<int> CustomerBillToInstance
        {
            get { return _customerBillToInstance; }
            set
            {
                if (_customerBillToInstance != value)
                {
                    ChangeTracker.RecordOriginalValue("CustomerBillToInstance", _customerBillToInstance);
                    if (!IsDeserializing)
                    {
                        if (Customer != null && Customer.Instance != value)
                        {
                            Customer = null;
                        }
                    }
                    _customerBillToInstance = value;
                    OnPropertyChanged("CustomerBillToInstance");
                }
            }
        }
        private Nullable<int> _customerBillToInstance;
    
        [DataMember]
        public Nullable<int> StudentInstance
        {
            get { return _studentInstance; }
            set
            {
                if (_studentInstance != value)
                {
                    ChangeTracker.RecordOriginalValue("StudentInstance", _studentInstance);
                    if (!IsDeserializing)
                    {
                        if (Student != null && Student.Instance != value)
                        {
                            Student = null;
                        }
                    }
                    _studentInstance = value;
                    OnPropertyChanged("StudentInstance");
                }
            }
        }
        private Nullable<int> _studentInstance;
    
        [DataMember]
        public Nullable<int> StatusInstance
        {
            get { return _statusInstance; }
            set
            {
                if (_statusInstance != value)
                {
                    _statusInstance = value;
                    OnPropertyChanged("StatusInstance");
                }
            }
        }
        private Nullable<int> _statusInstance;
    
        [DataMember]
        public Nullable<int> FirstStatusInstance
        {
            get { return _firstStatusInstance; }
            set
            {
                if (_firstStatusInstance != value)
                {
                    _firstStatusInstance = value;
                    OnPropertyChanged("FirstStatusInstance");
                }
            }
        }
        private Nullable<int> _firstStatusInstance;
    
        [DataMember]
        public Nullable<double> TotalProcessingFee
        {
            get { return _totalProcessingFee; }
            set
            {
                if (_totalProcessingFee != value)
                {
                    _totalProcessingFee = value;
                    OnPropertyChanged("TotalProcessingFee");
                }
            }
        }
        private Nullable<double> _totalProcessingFee;
    
        [DataMember]
        public Nullable<double> TotalProcessingFeeA
        {
            get { return _totalProcessingFeeA; }
            set
            {
                if (_totalProcessingFeeA != value)
                {
                    _totalProcessingFeeA = value;
                    OnPropertyChanged("TotalProcessingFeeA");
                }
            }
        }
        private Nullable<double> _totalProcessingFeeA;
    
        [DataMember]
        public Nullable<double> ProcessingFeeTax
        {
            get { return _processingFeeTax; }
            set
            {
                if (_processingFeeTax != value)
                {
                    _processingFeeTax = value;
                    OnPropertyChanged("ProcessingFeeTax");
                }
            }
        }
        private Nullable<double> _processingFeeTax;
    
        [DataMember]
        public Nullable<double> ProcessingFeeTaxA
        {
            get { return _processingFeeTaxA; }
            set
            {
                if (_processingFeeTaxA != value)
                {
                    _processingFeeTaxA = value;
                    OnPropertyChanged("ProcessingFeeTaxA");
                }
            }
        }
        private Nullable<double> _processingFeeTaxA;
    
        [DataMember]
        public Nullable<int> ProcessingFeeTransID
        {
            get { return _processingFeeTransID; }
            set
            {
                if (_processingFeeTransID != value)
                {
                    _processingFeeTransID = value;
                    OnPropertyChanged("ProcessingFeeTransID");
                }
            }
        }
        private Nullable<int> _processingFeeTransID;
    
        [DataMember]
        public Nullable<System.DateTime> OrderBatchDate
        {
            get { return _orderBatchDate; }
            set
            {
                if (_orderBatchDate != value)
                {
                    ChangeTracker.RecordOriginalValue("OrderBatchDate", _orderBatchDate);
                    if (!IsDeserializing)
                    {
                        if (Batch != null && Batch.Date != value)
                        {
                            var previousValue = _batch;
                            _batch = null;
                            FixupBatch(previousValue, skipKeys: true);
                            OnNavigationPropertyChanged("Batch");
                        }
                    }
                    _orderBatchDate = value;
                    OnPropertyChanged("OrderBatchDate");
                }
            }
        }
        private Nullable<System.DateTime> _orderBatchDate;
    
        [DataMember]
        public Nullable<int> OrderBatchID
        {
            get { return _orderBatchID; }
            set
            {
                if (_orderBatchID != value)
                {
                    ChangeTracker.RecordOriginalValue("OrderBatchID", _orderBatchID);
                    if (!IsDeserializing)
                    {
                        if (Batch != null && Batch.ID != value)
                        {
                            var previousValue = _batch;
                            _batch = null;
                            FixupBatch(previousValue, skipKeys: true);
                            OnNavigationPropertyChanged("Batch");
                        }
                    }
                    _orderBatchID = value;
                    OnPropertyChanged("OrderBatchID");
                }
            }
        }
        private Nullable<int> _orderBatchID;
    
        [DataMember]
        public Nullable<int> OrderBatchSequence
        {
            get { return _orderBatchSequence; }
            set
            {
                if (_orderBatchSequence != value)
                {
                    _orderBatchSequence = value;
                    OnPropertyChanged("OrderBatchSequence");
                }
            }
        }
        private Nullable<int> _orderBatchSequence;
    
        [DataMember]
        public Nullable<System.DateTime> CreationDate
        {
            get { return _creationDate; }
            set
            {
                if (_creationDate != value)
                {
                    _creationDate = value;
                    OnPropertyChanged("CreationDate");
                }
            }
        }
        private Nullable<System.DateTime> _creationDate;
    
        [DataMember]
        public Nullable<System.DateTime> LastSentInvoiceDate
        {
            get { return _lastSentInvoiceDate; }
            set
            {
                if (_lastSentInvoiceDate != value)
                {
                    _lastSentInvoiceDate = value;
                    OnPropertyChanged("LastSentInvoiceDate");
                }
            }
        }
        private Nullable<System.DateTime> _lastSentInvoiceDate;
    
        [DataMember]
        public Nullable<int> NumberInvoicesSent
        {
            get { return _numberInvoicesSent; }
            set
            {
                if (_numberInvoicesSent != value)
                {
                    _numberInvoicesSent = value;
                    OnPropertyChanged("NumberInvoicesSent");
                }
            }
        }
        private Nullable<int> _numberInvoicesSent;
    
        [DataMember]
        public Nullable<bool> ForceInvoice
        {
            get { return _forceInvoice; }
            set
            {
                if (_forceInvoice != value)
                {
                    _forceInvoice = value;
                    OnPropertyChanged("ForceInvoice");
                }
            }
        }
        private Nullable<bool> _forceInvoice;
    
        [DataMember]
        public Nullable<bool> DelFlag
        {
            get { return _delFlag; }
            set
            {
                if (_delFlag != value)
                {
                    _delFlag = value;
                    OnPropertyChanged("DelFlag");
                }
            }
        }
        private Nullable<bool> _delFlag;
    
        [DataMember]
        public string ChangeUserID
        {
            get { return _changeUserID; }
            set
            {
                if (_changeUserID != value)
                {
                    _changeUserID = value;
                    OnPropertyChanged("ChangeUserID");
                }
            }
        }
        private string _changeUserID;
    
        [DataMember]
        public Nullable<System.DateTime> ChangeDate
        {
            get { return _changeDate; }
            set
            {
                if (_changeDate != value)
                {
                    _changeDate = value;
                    OnPropertyChanged("ChangeDate");
                }
            }
        }
        private Nullable<System.DateTime> _changeDate;
    
        [DataMember]
        public Nullable<int> Type
        {
            get { return _type; }
            set
            {
                if (_type != value)
                {
                    _type = value;
                    OnPropertyChanged("Type");
                }
            }
        }
        private Nullable<int> _type;
    
        [DataMember]
        public Nullable<int> PaymentMethodInstance
        {
            get { return _paymentMethodInstance; }
            set
            {
                if (_paymentMethodInstance != value)
                {
                    _paymentMethodInstance = value;
                    OnPropertyChanged("PaymentMethodInstance");
                }
            }
        }
        private Nullable<int> _paymentMethodInstance;
    
        [DataMember]
        public Nullable<int> CampaignID
        {
            get { return _campaignID; }
            set
            {
                if (_campaignID != value)
                {
                    _campaignID = value;
                    OnPropertyChanged("CampaignID");
                }
            }
        }
        private Nullable<int> _campaignID;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Batch Batch
        {
            get { return _batch; }
            set
            {
                if (!ReferenceEquals(_batch, value))
                {
                    var previousValue = _batch;
                    _batch = value;
                    FixupBatch(previousValue);
                    OnNavigationPropertyChanged("Batch");
                }
            }
        }
        private Batch _batch;
    
        [DataMember]
        public Customer Customer
        {
            get { return _customer; }
            set
            {
                if (!ReferenceEquals(_customer, value))
                {
                    var previousValue = _customer;
                    _customer = value;
                    FixupCustomer(previousValue);
                    OnNavigationPropertyChanged("Customer");
                }
            }
        }
        private Customer _customer;
    
        [DataMember]
        public TrackableCollection<CustomerOrderDetail> CustomerOrderDetails
        {
            get
            {
                if (_customerOrderDetails == null)
                {
                    _customerOrderDetails = new TrackableCollection<CustomerOrderDetail>();
                    _customerOrderDetails.CollectionChanged += FixupCustomerOrderDetails;
                }
                return _customerOrderDetails;
            }
            set
            {
                if (!ReferenceEquals(_customerOrderDetails, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_customerOrderDetails != null)
                    {
                        _customerOrderDetails.CollectionChanged -= FixupCustomerOrderDetails;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (CustomerOrderDetail item in _customerOrderDetails)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _customerOrderDetails = value;
                    if (_customerOrderDetails != null)
                    {
                        _customerOrderDetails.CollectionChanged += FixupCustomerOrderDetails;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (CustomerOrderDetail item in _customerOrderDetails)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("CustomerOrderDetails");
                }
            }
        }
        private TrackableCollection<CustomerOrderDetail> _customerOrderDetails;
    
        [DataMember]
        public Student Student
        {
            get { return _student; }
            set
            {
                if (!ReferenceEquals(_student, value))
                {
                    var previousValue = _student;
                    _student = value;
                    FixupStudent(previousValue);
                    OnNavigationPropertyChanged("Student");
                }
            }
        }
        private Student _student;
    
        [DataMember]
        public InternetOrderID InternetOrderID
        {
            get { return _internetOrderID; }
            set
            {
                if (!ReferenceEquals(_internetOrderID, value))
                {
                    var previousValue = _internetOrderID;
                    _internetOrderID = value;
                    FixupInternetOrderID(previousValue);
                    OnNavigationPropertyChanged("InternetOrderID");
                }
            }
        }
        private InternetOrderID _internetOrderID;
    
        [DataMember]
        public TrackableCollection<CustomerPaymentHeader> CustomerPaymentHeaders
        {
            get
            {
                if (_customerPaymentHeaders == null)
                {
                    _customerPaymentHeaders = new TrackableCollection<CustomerPaymentHeader>();
                    _customerPaymentHeaders.CollectionChanged += FixupCustomerPaymentHeaders;
                }
                return _customerPaymentHeaders;
            }
            set
            {
                if (!ReferenceEquals(_customerPaymentHeaders, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_customerPaymentHeaders != null)
                    {
                        _customerPaymentHeaders.CollectionChanged -= FixupCustomerPaymentHeaders;
                    }
                    _customerPaymentHeaders = value;
                    if (_customerPaymentHeaders != null)
                    {
                        _customerPaymentHeaders.CollectionChanged += FixupCustomerPaymentHeaders;
                    }
                    OnNavigationPropertyChanged("CustomerPaymentHeaders");
                }
            }
        }
        private TrackableCollection<CustomerPaymentHeader> _customerPaymentHeaders;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Batch = null;
            Customer = null;
            CustomerOrderDetails.Clear();
            Student = null;
            InternetOrderID = null;
            CustomerPaymentHeaders.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupBatch(Batch previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CustomerOrderHeaders.Contains(this))
            {
                previousValue.CustomerOrderHeaders.Remove(this);
            }
    
            if (Batch != null)
            {
                if (!Batch.CustomerOrderHeaders.Contains(this))
                {
                    Batch.CustomerOrderHeaders.Add(this);
                }
    
                OrderBatchDate = Batch.Date;
                OrderBatchID = Batch.ID;
            }
            else if (!skipKeys)
            {
                OrderBatchDate = null;
                OrderBatchID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Batch")
                    && (ChangeTracker.OriginalValues["Batch"] == Batch))
                {
                    ChangeTracker.OriginalValues.Remove("Batch");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Batch", previousValue);
                }
                if (Batch != null && !Batch.ChangeTracker.ChangeTrackingEnabled)
                {
                    Batch.StartTracking();
                }
            }
        }
    
        private void FixupCustomer(Customer previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CustomerOrderHeaders.Contains(this))
            {
                previousValue.CustomerOrderHeaders.Remove(this);
            }
    
            if (Customer != null)
            {
                if (!Customer.CustomerOrderHeaders.Contains(this))
                {
                    Customer.CustomerOrderHeaders.Add(this);
                }
    
                CustomerBillToInstance = Customer.Instance;
            }
            else if (!skipKeys)
            {
                CustomerBillToInstance = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Customer")
                    && (ChangeTracker.OriginalValues["Customer"] == Customer))
                {
                    ChangeTracker.OriginalValues.Remove("Customer");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Customer", previousValue);
                }
                if (Customer != null && !Customer.ChangeTracker.ChangeTrackingEnabled)
                {
                    Customer.StartTracking();
                }
            }
        }
    
        private void FixupStudent(Student previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CustomerOrderHeaders.Contains(this))
            {
                previousValue.CustomerOrderHeaders.Remove(this);
            }
    
            if (Student != null)
            {
                if (!Student.CustomerOrderHeaders.Contains(this))
                {
                    Student.CustomerOrderHeaders.Add(this);
                }
    
                StudentInstance = Student.Instance;
            }
            else if (!skipKeys)
            {
                StudentInstance = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Student")
                    && (ChangeTracker.OriginalValues["Student"] == Student))
                {
                    ChangeTracker.OriginalValues.Remove("Student");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Student", previousValue);
                }
                if (Student != null && !Student.ChangeTracker.ChangeTrackingEnabled)
                {
                    Student.StartTracking();
                }
            }
        }
    
        private void FixupInternetOrderID(InternetOrderID previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (InternetOrderID != null)
            {
                ChangeTracker.ObjectStateChanging += InternetOrderID.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.CustomerOrderHeader, this))
            {
                previousValue.CustomerOrderHeader = null;
            }
    
            if (InternetOrderID != null)
            {
                InternetOrderID.CustomerOrderHeader = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("InternetOrderID")
                    && (ChangeTracker.OriginalValues["InternetOrderID"] == InternetOrderID))
                {
                    ChangeTracker.OriginalValues.Remove("InternetOrderID");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("InternetOrderID", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (InternetOrderID != null && !InternetOrderID.ChangeTracker.ChangeTrackingEnabled)
                {
                    InternetOrderID.StartTracking();
                }
            }
        }
    
        private void FixupCustomerOrderDetails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CustomerOrderDetail item in e.NewItems)
                {
                    item.CustomerOrderHeader = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CustomerOrderDetails", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerOrderDetail item in e.OldItems)
                {
                    if (ReferenceEquals(item.CustomerOrderHeader, this))
                    {
                        item.CustomerOrderHeader = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CustomerOrderDetails", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupCustomerPaymentHeaders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CustomerPaymentHeader item in e.NewItems)
                {
                    item.CustomerOrderHeader = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CustomerPaymentHeaders", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerPaymentHeader item in e.OldItems)
                {
                    if (ReferenceEquals(item.CustomerOrderHeader, this))
                    {
                        item.CustomerOrderHeader = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CustomerPaymentHeaders", item);
                    }
                }
            }
        }

        #endregion
    }
}
