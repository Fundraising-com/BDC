//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Data
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CreditCardPayment))]
    [KnownType(typeof(CustomerOrderHeader))]
    public partial class CustomerPaymentHeader: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int Instance
        {
            get { return _instance; }
            set
            {
                if (_instance != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Instance' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _instance = value;
                    OnPropertyChanged("Instance");
                }
            }
        }
        private int _instance;
    
        [DataMember]
        public int CustomerOrderHeaderInstance
        {
            get { return _customerOrderHeaderInstance; }
            set
            {
                if (_customerOrderHeaderInstance != value)
                {
                    ChangeTracker.RecordOriginalValue("CustomerOrderHeaderInstance", _customerOrderHeaderInstance);
                    if (!IsDeserializing)
                    {
                        if (CustomerOrderHeader != null && CustomerOrderHeader.Instance != value)
                        {
                            CustomerOrderHeader = null;
                        }
                    }
                    _customerOrderHeaderInstance = value;
                    OnPropertyChanged("CustomerOrderHeaderInstance");
                }
            }
        }
        private int _customerOrderHeaderInstance;
    
        [DataMember]
        public int InvoiceNumber
        {
            get { return _invoiceNumber; }
            set
            {
                if (_invoiceNumber != value)
                {
                    _invoiceNumber = value;
                    OnPropertyChanged("InvoiceNumber");
                }
            }
        }
        private int _invoiceNumber;
    
        [DataMember]
        public System.DateTime PaymentBatchDate
        {
            get { return _paymentBatchDate; }
            set
            {
                if (_paymentBatchDate != value)
                {
                    _paymentBatchDate = value;
                    OnPropertyChanged("PaymentBatchDate");
                }
            }
        }
        private System.DateTime _paymentBatchDate;
    
        [DataMember]
        public int PaymentBatchID
        {
            get { return _paymentBatchID; }
            set
            {
                if (_paymentBatchID != value)
                {
                    _paymentBatchID = value;
                    OnPropertyChanged("PaymentBatchID");
                }
            }
        }
        private int _paymentBatchID;
    
        [DataMember]
        public int PaymentBatchSequence
        {
            get { return _paymentBatchSequence; }
            set
            {
                if (_paymentBatchSequence != value)
                {
                    _paymentBatchSequence = value;
                    OnPropertyChanged("PaymentBatchSequence");
                }
            }
        }
        private int _paymentBatchSequence;
    
        [DataMember]
        public int NextDetailTransID
        {
            get { return _nextDetailTransID; }
            set
            {
                if (_nextDetailTransID != value)
                {
                    _nextDetailTransID = value;
                    OnPropertyChanged("NextDetailTransID");
                }
            }
        }
        private int _nextDetailTransID;
    
        [DataMember]
        public decimal TotalAmount
        {
            get { return _totalAmount; }
            set
            {
                if (_totalAmount != value)
                {
                    _totalAmount = value;
                    OnPropertyChanged("TotalAmount");
                }
            }
        }
        private decimal _totalAmount;
    
        [DataMember]
        public System.DateTime DateCreated
        {
            get { return _dateCreated; }
            set
            {
                if (_dateCreated != value)
                {
                    _dateCreated = value;
                    OnPropertyChanged("DateCreated");
                }
            }
        }
        private System.DateTime _dateCreated;
    
        [DataMember]
        public string UserIDCreated
        {
            get { return _userIDCreated; }
            set
            {
                if (_userIDCreated != value)
                {
                    _userIDCreated = value;
                    OnPropertyChanged("UserIDCreated");
                }
            }
        }
        private string _userIDCreated;
    
        [DataMember]
        public System.DateTime DateChanged
        {
            get { return _dateChanged; }
            set
            {
                if (_dateChanged != value)
                {
                    _dateChanged = value;
                    OnPropertyChanged("DateChanged");
                }
            }
        }
        private System.DateTime _dateChanged;
    
        [DataMember]
        public string UserIDChanged
        {
            get { return _userIDChanged; }
            set
            {
                if (_userIDChanged != value)
                {
                    _userIDChanged = value;
                    OnPropertyChanged("UserIDChanged");
                }
            }
        }
        private string _userIDChanged;
    
        [DataMember]
        public int StatusInstance
        {
            get { return _statusInstance; }
            set
            {
                if (_statusInstance != value)
                {
                    _statusInstance = value;
                    OnPropertyChanged("StatusInstance");
                }
            }
        }
        private int _statusInstance;
    
        [DataMember]
        public bool IsCreditCard
        {
            get { return _isCreditCard; }
            set
            {
                if (_isCreditCard != value)
                {
                    _isCreditCard = value;
                    OnPropertyChanged("IsCreditCard");
                }
            }
        }
        private bool _isCreditCard;
    
        [DataMember]
        public string Signed
        {
            get { return _signed; }
            set
            {
                if (_signed != value)
                {
                    _signed = value;
                    OnPropertyChanged("Signed");
                }
            }
        }
        private string _signed;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public CreditCardPayment CreditCardPayment
        {
            get { return _creditCardPayment; }
            set
            {
                if (!ReferenceEquals(_creditCardPayment, value))
                {
                    var previousValue = _creditCardPayment;
                    _creditCardPayment = value;
                    FixupCreditCardPayment(previousValue);
                    OnNavigationPropertyChanged("CreditCardPayment");
                }
            }
        }
        private CreditCardPayment _creditCardPayment;
    
        [DataMember]
        public CustomerOrderHeader CustomerOrderHeader
        {
            get { return _customerOrderHeader; }
            set
            {
                if (!ReferenceEquals(_customerOrderHeader, value))
                {
                    var previousValue = _customerOrderHeader;
                    _customerOrderHeader = value;
                    FixupCustomerOrderHeader(previousValue);
                    OnNavigationPropertyChanged("CustomerOrderHeader");
                }
            }
        }
        private CustomerOrderHeader _customerOrderHeader;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            CreditCardPayment = null;
            CustomerOrderHeader = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupCreditCardPayment(CreditCardPayment previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (CreditCardPayment != null)
            {
                ChangeTracker.ObjectStateChanging += CreditCardPayment.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.CustomerPaymentHeader, this))
            {
                previousValue.CustomerPaymentHeader = null;
            }
    
            if (CreditCardPayment != null)
            {
                CreditCardPayment.CustomerPaymentHeader = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CreditCardPayment")
                    && (ChangeTracker.OriginalValues["CreditCardPayment"] == CreditCardPayment))
                {
                    ChangeTracker.OriginalValues.Remove("CreditCardPayment");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CreditCardPayment", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (CreditCardPayment != null && !CreditCardPayment.ChangeTracker.ChangeTrackingEnabled)
                {
                    CreditCardPayment.StartTracking();
                }
            }
        }
    
        private void FixupCustomerOrderHeader(CustomerOrderHeader previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CustomerPaymentHeaders.Contains(this))
            {
                previousValue.CustomerPaymentHeaders.Remove(this);
            }
    
            if (CustomerOrderHeader != null)
            {
                if (!CustomerOrderHeader.CustomerPaymentHeaders.Contains(this))
                {
                    CustomerOrderHeader.CustomerPaymentHeaders.Add(this);
                }
    
                CustomerOrderHeaderInstance = CustomerOrderHeader.Instance;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CustomerOrderHeader")
                    && (ChangeTracker.OriginalValues["CustomerOrderHeader"] == CustomerOrderHeader))
                {
                    ChangeTracker.OriginalValues.Remove("CustomerOrderHeader");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CustomerOrderHeader", previousValue);
                }
                if (CustomerOrderHeader != null && !CustomerOrderHeader.ChangeTracker.ChangeTrackingEnabled)
                {
                    CustomerOrderHeader.StartTracking();
                }
            }
        }

        #endregion
    }
}
