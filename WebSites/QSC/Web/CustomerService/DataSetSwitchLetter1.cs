//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace QSPFulfillment.CustomerService {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DataSetSwitchLetter : DataSet {
        
        private pr_SwitchLetterSelectReportDataTable tablepr_SwitchLetterSelectReport;
        
        public DataSetSwitchLetter() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DataSetSwitchLetter(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["pr_SwitchLetterSelectReport"] != null)) {
                    this.Tables.Add(new pr_SwitchLetterSelectReportDataTable(ds.Tables["pr_SwitchLetterSelectReport"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public pr_SwitchLetterSelectReportDataTable pr_SwitchLetterSelectReport {
            get {
                return this.tablepr_SwitchLetterSelectReport;
            }
        }
        
        public override DataSet Clone() {
            DataSetSwitchLetter cln = ((DataSetSwitchLetter)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["pr_SwitchLetterSelectReport"] != null)) {
                this.Tables.Add(new pr_SwitchLetterSelectReportDataTable(ds.Tables["pr_SwitchLetterSelectReport"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablepr_SwitchLetterSelectReport = ((pr_SwitchLetterSelectReportDataTable)(this.Tables["pr_SwitchLetterSelectReport"]));
            if ((this.tablepr_SwitchLetterSelectReport != null)) {
                this.tablepr_SwitchLetterSelectReport.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DataSetSwitchLetter";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSetSwitchLetter.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablepr_SwitchLetterSelectReport = new pr_SwitchLetterSelectReportDataTable();
            this.Tables.Add(this.tablepr_SwitchLetterSelectReport);
        }
        
        private bool ShouldSerializepr_SwitchLetterSelectReport() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void pr_SwitchLetterSelectReportRowChangeEventHandler(object sender, pr_SwitchLetterSelectReportRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class pr_SwitchLetterSelectReportDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFirstName;
            
            private DataColumn columnLastName;
            
            private DataColumn columnStreet1;
            
            private DataColumn columnStreet2;
            
            private DataColumn columnPostalCode;
            
            private DataColumn columnCity;
            
            private DataColumn columnCountry;
            
            private DataColumn columnMagazineTitle;
            
            private DataColumn columnAmount;
            
            private DataColumn columnNbIssues;
            
            private DataColumn columnProvince;
            
            private DataColumn columnTransID;
            
            private DataColumn columnCustomerOrderHeaderInstance;
            
            private DataColumn columnUniqueID;
            
            internal pr_SwitchLetterSelectReportDataTable() : 
                    base("pr_SwitchLetterSelectReport") {
                this.InitClass();
            }
            
            internal pr_SwitchLetterSelectReportDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            internal DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            internal DataColumn Street1Column {
                get {
                    return this.columnStreet1;
                }
            }
            
            internal DataColumn Street2Column {
                get {
                    return this.columnStreet2;
                }
            }
            
            internal DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            internal DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            internal DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            internal DataColumn MagazineTitleColumn {
                get {
                    return this.columnMagazineTitle;
                }
            }
            
            internal DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            internal DataColumn NbIssuesColumn {
                get {
                    return this.columnNbIssues;
                }
            }
            
            internal DataColumn ProvinceColumn {
                get {
                    return this.columnProvince;
                }
            }
            
            internal DataColumn TransIDColumn {
                get {
                    return this.columnTransID;
                }
            }
            
            internal DataColumn CustomerOrderHeaderInstanceColumn {
                get {
                    return this.columnCustomerOrderHeaderInstance;
                }
            }
            
            internal DataColumn UniqueIDColumn {
                get {
                    return this.columnUniqueID;
                }
            }
            
            public pr_SwitchLetterSelectReportRow this[int index] {
                get {
                    return ((pr_SwitchLetterSelectReportRow)(this.Rows[index]));
                }
            }
            
            public event pr_SwitchLetterSelectReportRowChangeEventHandler pr_SwitchLetterSelectReportRowChanged;
            
            public event pr_SwitchLetterSelectReportRowChangeEventHandler pr_SwitchLetterSelectReportRowChanging;
            
            public event pr_SwitchLetterSelectReportRowChangeEventHandler pr_SwitchLetterSelectReportRowDeleted;
            
            public event pr_SwitchLetterSelectReportRowChangeEventHandler pr_SwitchLetterSelectReportRowDeleting;
            
            public void Addpr_SwitchLetterSelectReportRow(pr_SwitchLetterSelectReportRow row) {
                this.Rows.Add(row);
            }
            
            public pr_SwitchLetterSelectReportRow Addpr_SwitchLetterSelectReportRow(string FirstName, string LastName, string Street1, string Street2, string PostalCode, string City, string Country, string MagazineTitle, string Amount, string NbIssues, string Province, int TransID, int CustomerOrderHeaderInstance, string UniqueID) {
                pr_SwitchLetterSelectReportRow rowpr_SwitchLetterSelectReportRow = ((pr_SwitchLetterSelectReportRow)(this.NewRow()));
                rowpr_SwitchLetterSelectReportRow.ItemArray = new object[] {
                        FirstName,
                        LastName,
                        Street1,
                        Street2,
                        PostalCode,
                        City,
                        Country,
                        MagazineTitle,
                        Amount,
                        NbIssues,
                        Province,
                        TransID,
                        CustomerOrderHeaderInstance,
                        UniqueID};
                this.Rows.Add(rowpr_SwitchLetterSelectReportRow);
                return rowpr_SwitchLetterSelectReportRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                pr_SwitchLetterSelectReportDataTable cln = ((pr_SwitchLetterSelectReportDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new pr_SwitchLetterSelectReportDataTable();
            }
            
            internal void InitVars() {
                this.columnFirstName = this.Columns["FirstName"];
                this.columnLastName = this.Columns["LastName"];
                this.columnStreet1 = this.Columns["Street1"];
                this.columnStreet2 = this.Columns["Street2"];
                this.columnPostalCode = this.Columns["PostalCode"];
                this.columnCity = this.Columns["City"];
                this.columnCountry = this.Columns["Country"];
                this.columnMagazineTitle = this.Columns["MagazineTitle"];
                this.columnAmount = this.Columns["Amount"];
                this.columnNbIssues = this.Columns["NbIssues"];
                this.columnProvince = this.Columns["Province"];
                this.columnTransID = this.Columns["TransID"];
                this.columnCustomerOrderHeaderInstance = this.Columns["CustomerOrderHeaderInstance"];
                this.columnUniqueID = this.Columns["UniqueID"];
            }
            
            private void InitClass() {
                this.columnFirstName = new DataColumn("FirstName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFirstName);
                this.columnLastName = new DataColumn("LastName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastName);
                this.columnStreet1 = new DataColumn("Street1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStreet1);
                this.columnStreet2 = new DataColumn("Street2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStreet2);
                this.columnPostalCode = new DataColumn("PostalCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostalCode);
                this.columnCity = new DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCity);
                this.columnCountry = new DataColumn("Country", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountry);
                this.columnMagazineTitle = new DataColumn("MagazineTitle", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMagazineTitle);
                this.columnAmount = new DataColumn("Amount", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAmount);
                this.columnNbIssues = new DataColumn("NbIssues", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNbIssues);
                this.columnProvince = new DataColumn("Province", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProvince);
                this.columnTransID = new DataColumn("TransID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransID);
                this.columnCustomerOrderHeaderInstance = new DataColumn("CustomerOrderHeaderInstance", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCustomerOrderHeaderInstance);
                this.columnUniqueID = new DataColumn("UniqueID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUniqueID);
                this.Constraints.Add(new UniqueConstraint("DataSetSwitchLetterKey1", new DataColumn[] {
                                this.columnUniqueID}, false));
                this.columnFirstName.ReadOnly = true;
                this.columnLastName.ReadOnly = true;
                this.columnStreet1.ReadOnly = true;
                this.columnStreet2.ReadOnly = true;
                this.columnPostalCode.ReadOnly = true;
                this.columnCity.ReadOnly = true;
                this.columnCountry.ReadOnly = true;
                this.columnMagazineTitle.ReadOnly = true;
                this.columnAmount.ReadOnly = true;
                this.columnNbIssues.ReadOnly = true;
                this.columnProvince.ReadOnly = true;
                this.columnUniqueID.AllowDBNull = false;
                this.columnUniqueID.Unique = true;
            }
            
            public pr_SwitchLetterSelectReportRow Newpr_SwitchLetterSelectReportRow() {
                return ((pr_SwitchLetterSelectReportRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new pr_SwitchLetterSelectReportRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(pr_SwitchLetterSelectReportRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.pr_SwitchLetterSelectReportRowChanged != null)) {
                    this.pr_SwitchLetterSelectReportRowChanged(this, new pr_SwitchLetterSelectReportRowChangeEvent(((pr_SwitchLetterSelectReportRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.pr_SwitchLetterSelectReportRowChanging != null)) {
                    this.pr_SwitchLetterSelectReportRowChanging(this, new pr_SwitchLetterSelectReportRowChangeEvent(((pr_SwitchLetterSelectReportRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.pr_SwitchLetterSelectReportRowDeleted != null)) {
                    this.pr_SwitchLetterSelectReportRowDeleted(this, new pr_SwitchLetterSelectReportRowChangeEvent(((pr_SwitchLetterSelectReportRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.pr_SwitchLetterSelectReportRowDeleting != null)) {
                    this.pr_SwitchLetterSelectReportRowDeleting(this, new pr_SwitchLetterSelectReportRowChangeEvent(((pr_SwitchLetterSelectReportRow)(e.Row)), e.Action));
                }
            }
            
            public void Removepr_SwitchLetterSelectReportRow(pr_SwitchLetterSelectReportRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class pr_SwitchLetterSelectReportRow : DataRow {
            
            private pr_SwitchLetterSelectReportDataTable tablepr_SwitchLetterSelectReport;
            
            internal pr_SwitchLetterSelectReportRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablepr_SwitchLetterSelectReport = ((pr_SwitchLetterSelectReportDataTable)(this.Table));
            }
            
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tablepr_SwitchLetterSelectReport.FirstNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepr_SwitchLetterSelectReport.FirstNameColumn] = value;
                }
            }
            
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tablepr_SwitchLetterSelectReport.LastNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepr_SwitchLetterSelectReport.LastNameColumn] = value;
                }
            }
            
            public string Street1 {
                get {
                    try {
                        return ((string)(this[this.tablepr_SwitchLetterSelectReport.Street1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepr_SwitchLetterSelectReport.Street1Column] = value;
                }
            }
            
            public string Street2 {
                get {
                    try {
                        return ((string)(this[this.tablepr_SwitchLetterSelectReport.Street2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepr_SwitchLetterSelectReport.Street2Column] = value;
                }
            }
            
            public string PostalCode {
                get {
                    try {
                        return ((string)(this[this.tablepr_SwitchLetterSelectReport.PostalCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepr_SwitchLetterSelectReport.PostalCodeColumn] = value;
                }
            }
            
            public string City {
                get {
                    try {
                        return ((string)(this[this.tablepr_SwitchLetterSelectReport.CityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepr_SwitchLetterSelectReport.CityColumn] = value;
                }
            }
            
            public string Country {
                get {
                    try {
                        return ((string)(this[this.tablepr_SwitchLetterSelectReport.CountryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepr_SwitchLetterSelectReport.CountryColumn] = value;
                }
            }
            
            public string MagazineTitle {
                get {
                    try {
                        return ((string)(this[this.tablepr_SwitchLetterSelectReport.MagazineTitleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepr_SwitchLetterSelectReport.MagazineTitleColumn] = value;
                }
            }
            
            public string Amount {
                get {
                    try {
                        return ((string)(this[this.tablepr_SwitchLetterSelectReport.AmountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepr_SwitchLetterSelectReport.AmountColumn] = value;
                }
            }
            
            public string NbIssues {
                get {
                    try {
                        return ((string)(this[this.tablepr_SwitchLetterSelectReport.NbIssuesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepr_SwitchLetterSelectReport.NbIssuesColumn] = value;
                }
            }
            
            public string Province {
                get {
                    try {
                        return ((string)(this[this.tablepr_SwitchLetterSelectReport.ProvinceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepr_SwitchLetterSelectReport.ProvinceColumn] = value;
                }
            }
            
            public int TransID {
                get {
                    try {
                        return ((int)(this[this.tablepr_SwitchLetterSelectReport.TransIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepr_SwitchLetterSelectReport.TransIDColumn] = value;
                }
            }
            
            public int CustomerOrderHeaderInstance {
                get {
                    try {
                        return ((int)(this[this.tablepr_SwitchLetterSelectReport.CustomerOrderHeaderInstanceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepr_SwitchLetterSelectReport.CustomerOrderHeaderInstanceColumn] = value;
                }
            }
            
            public string UniqueID {
                get {
                    return ((string)(this[this.tablepr_SwitchLetterSelectReport.UniqueIDColumn]));
                }
                set {
                    this[this.tablepr_SwitchLetterSelectReport.UniqueIDColumn] = value;
                }
            }
            
            public bool IsFirstNameNull() {
                return this.IsNull(this.tablepr_SwitchLetterSelectReport.FirstNameColumn);
            }
            
            public void SetFirstNameNull() {
                this[this.tablepr_SwitchLetterSelectReport.FirstNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastNameNull() {
                return this.IsNull(this.tablepr_SwitchLetterSelectReport.LastNameColumn);
            }
            
            public void SetLastNameNull() {
                this[this.tablepr_SwitchLetterSelectReport.LastNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsStreet1Null() {
                return this.IsNull(this.tablepr_SwitchLetterSelectReport.Street1Column);
            }
            
            public void SetStreet1Null() {
                this[this.tablepr_SwitchLetterSelectReport.Street1Column] = System.Convert.DBNull;
            }
            
            public bool IsStreet2Null() {
                return this.IsNull(this.tablepr_SwitchLetterSelectReport.Street2Column);
            }
            
            public void SetStreet2Null() {
                this[this.tablepr_SwitchLetterSelectReport.Street2Column] = System.Convert.DBNull;
            }
            
            public bool IsPostalCodeNull() {
                return this.IsNull(this.tablepr_SwitchLetterSelectReport.PostalCodeColumn);
            }
            
            public void SetPostalCodeNull() {
                this[this.tablepr_SwitchLetterSelectReport.PostalCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCityNull() {
                return this.IsNull(this.tablepr_SwitchLetterSelectReport.CityColumn);
            }
            
            public void SetCityNull() {
                this[this.tablepr_SwitchLetterSelectReport.CityColumn] = System.Convert.DBNull;
            }
            
            public bool IsCountryNull() {
                return this.IsNull(this.tablepr_SwitchLetterSelectReport.CountryColumn);
            }
            
            public void SetCountryNull() {
                this[this.tablepr_SwitchLetterSelectReport.CountryColumn] = System.Convert.DBNull;
            }
            
            public bool IsMagazineTitleNull() {
                return this.IsNull(this.tablepr_SwitchLetterSelectReport.MagazineTitleColumn);
            }
            
            public void SetMagazineTitleNull() {
                this[this.tablepr_SwitchLetterSelectReport.MagazineTitleColumn] = System.Convert.DBNull;
            }
            
            public bool IsAmountNull() {
                return this.IsNull(this.tablepr_SwitchLetterSelectReport.AmountColumn);
            }
            
            public void SetAmountNull() {
                this[this.tablepr_SwitchLetterSelectReport.AmountColumn] = System.Convert.DBNull;
            }
            
            public bool IsNbIssuesNull() {
                return this.IsNull(this.tablepr_SwitchLetterSelectReport.NbIssuesColumn);
            }
            
            public void SetNbIssuesNull() {
                this[this.tablepr_SwitchLetterSelectReport.NbIssuesColumn] = System.Convert.DBNull;
            }
            
            public bool IsProvinceNull() {
                return this.IsNull(this.tablepr_SwitchLetterSelectReport.ProvinceColumn);
            }
            
            public void SetProvinceNull() {
                this[this.tablepr_SwitchLetterSelectReport.ProvinceColumn] = System.Convert.DBNull;
            }
            
            public bool IsTransIDNull() {
                return this.IsNull(this.tablepr_SwitchLetterSelectReport.TransIDColumn);
            }
            
            public void SetTransIDNull() {
                this[this.tablepr_SwitchLetterSelectReport.TransIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCustomerOrderHeaderInstanceNull() {
                return this.IsNull(this.tablepr_SwitchLetterSelectReport.CustomerOrderHeaderInstanceColumn);
            }
            
            public void SetCustomerOrderHeaderInstanceNull() {
                this[this.tablepr_SwitchLetterSelectReport.CustomerOrderHeaderInstanceColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class pr_SwitchLetterSelectReportRowChangeEvent : EventArgs {
            
            private pr_SwitchLetterSelectReportRow eventRow;
            
            private DataRowAction eventAction;
            
            public pr_SwitchLetterSelectReportRowChangeEvent(pr_SwitchLetterSelectReportRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public pr_SwitchLetterSelectReportRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
