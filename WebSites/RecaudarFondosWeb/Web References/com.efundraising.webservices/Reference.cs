//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 1.1.4322.573.
// 
namespace efundraising.com.efundraising.webservices {
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="eFundDataSoap", Namespace="http://webservices.efundraising.com")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Person))]
    public class eFundData : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        /// <remarks/>
        public eFundData() {
            this.Url = "http://webservices.efundraising.com/efunddata.asmx";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.efundraising.com/Login", RequestNamespace="http://webservices.efundraising.com", ResponseNamespace="http://webservices.efundraising.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Login(string pUsername, string pPassword) {
            object[] results = this.Invoke("Login", new object[] {
                        pUsername,
                        pPassword});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLogin(string pUsername, string pPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Login", new object[] {
                        pUsername,
                        pPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndLogin(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.efundraising.com/Logout", RequestNamespace="http://webservices.efundraising.com", ResponseNamespace="http://webservices.efundraising.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Logout() {
            object[] results = this.Invoke("Logout", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLogout(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Logout", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndLogout(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.efundraising.com/IsLoggedIn", RequestNamespace="http://webservices.efundraising.com", ResponseNamespace="http://webservices.efundraising.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsLoggedIn() {
            object[] results = this.Invoke("IsLoggedIn", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIsLoggedIn(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("IsLoggedIn", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndIsLoggedIn(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.efundraising.com/AddNewLead", RequestNamespace="http://webservices.efundraising.com", ResponseNamespace="http://webservices.efundraising.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddNewLead(
                    string pFirstName, 
                    string pLastName, 
                    string pEmail, 
                    string pAddress, 
                    string pCity, 
                    string pState, 
                    string pZip, 
                    string pCountry, 
                    string pDayPhone, 
                    string pEveningPhone, 
                    int pGroupSize, 
                    string pOrganizationName, 
                    int pPromotionID, 
                    string pTitle, 
                    string pEveningPhoneExt, 
                    string pDayPhoneExt, 
                    string pBestTimeToCall, 
                    int pOrganizationTypeID, 
                    int pGroupTypeID, 
                    string pFundraisingDate, 
                    bool pDecisionMaker, 
                    string pProductsInterestIn, 
                    bool pOnEmailList, 
                    string pComments) {
            this.Invoke("AddNewLead", new object[] {
                        pFirstName,
                        pLastName,
                        pEmail,
                        pAddress,
                        pCity,
                        pState,
                        pZip,
                        pCountry,
                        pDayPhone,
                        pEveningPhone,
                        pGroupSize,
                        pOrganizationName,
                        pPromotionID,
                        pTitle,
                        pEveningPhoneExt,
                        pDayPhoneExt,
                        pBestTimeToCall,
                        pOrganizationTypeID,
                        pGroupTypeID,
                        pFundraisingDate,
                        pDecisionMaker,
                        pProductsInterestIn,
                        pOnEmailList,
                        pComments});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddNewLead(
                    string pFirstName, 
                    string pLastName, 
                    string pEmail, 
                    string pAddress, 
                    string pCity, 
                    string pState, 
                    string pZip, 
                    string pCountry, 
                    string pDayPhone, 
                    string pEveningPhone, 
                    int pGroupSize, 
                    string pOrganizationName, 
                    int pPromotionID, 
                    string pTitle, 
                    string pEveningPhoneExt, 
                    string pDayPhoneExt, 
                    string pBestTimeToCall, 
                    int pOrganizationTypeID, 
                    int pGroupTypeID, 
                    string pFundraisingDate, 
                    bool pDecisionMaker, 
                    string pProductsInterestIn, 
                    bool pOnEmailList, 
                    string pComments, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("AddNewLead", new object[] {
                        pFirstName,
                        pLastName,
                        pEmail,
                        pAddress,
                        pCity,
                        pState,
                        pZip,
                        pCountry,
                        pDayPhone,
                        pEveningPhone,
                        pGroupSize,
                        pOrganizationName,
                        pPromotionID,
                        pTitle,
                        pEveningPhoneExt,
                        pDayPhoneExt,
                        pBestTimeToCall,
                        pOrganizationTypeID,
                        pGroupTypeID,
                        pFundraisingDate,
                        pDecisionMaker,
                        pProductsInterestIn,
                        pOnEmailList,
                        pComments}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAddNewLead(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.efundraising.com/GetLeadsReport", RequestNamespace="http://webservices.efundraising.com", ResponseNamespace="http://webservices.efundraising.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Fundraiser[] GetLeadsReport(string pStartDate, string pEndDate) {
            object[] results = this.Invoke("GetLeadsReport", new object[] {
                        pStartDate,
                        pEndDate});
            return ((Fundraiser[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLeadsReport(string pStartDate, string pEndDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLeadsReport", new object[] {
                        pStartDate,
                        pEndDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public Fundraiser[] EndGetLeadsReport(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Fundraiser[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.efundraising.com/GetSalesReport", RequestNamespace="http://webservices.efundraising.com", ResponseNamespace="http://webservices.efundraising.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Fundraiser[] GetSalesReport(string pStartDate, string pEndDate) {
            object[] results = this.Invoke("GetSalesReport", new object[] {
                        pStartDate,
                        pEndDate});
            return ((Fundraiser[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSalesReport(string pStartDate, string pEndDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSalesReport", new object[] {
                        pStartDate,
                        pEndDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public Fundraiser[] EndGetSalesReport(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Fundraiser[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webservices.efundraising.com/GetLastError", RequestNamespace="http://webservices.efundraising.com", ResponseNamespace="http://webservices.efundraising.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLastError() {
            object[] results = this.Invoke("GetLastError", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLastError(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLastError", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetLastError(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://webservices.efundraising.com")]
    public class Fundraiser : Person {
        
        /// <remarks/>
        public string Date;
        
        /// <remarks/>
        public string OrganizationType;
        
        /// <remarks/>
        public string GroupType;
        
        /// <remarks/>
        public int GroupSize;
        
        /// <remarks/>
        public Sales Sale;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://webservices.efundraising.com")]
    public class Sales {
        
        /// <remarks/>
        public System.Double TotalAmount;
        
        /// <remarks/>
        public int SalesID;
        
        /// <remarks/>
        public int TotalProduct;
        
        /// <remarks/>
        public string ProductClassDesc;
        
        /// <remarks/>
        public string ShipDate;
        
        /// <remarks/>
        public string ConfirmDateSales;
        
        /// <remarks/>
        public string DateSales;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://webservices.efundraising.com")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Fundraiser))]
    public abstract class Person {
        
        /// <remarks/>
        public string FirstName;
        
        /// <remarks/>
        public string LastName;
        
        /// <remarks/>
        public string Email;
        
        /// <remarks/>
        public string Address;
        
        /// <remarks/>
        public string City;
        
        /// <remarks/>
        public string State;
        
        /// <remarks/>
        public string Zip;
        
        /// <remarks/>
        public string Country;
        
        /// <remarks/>
        public string DayPhone;
        
        /// <remarks/>
        public string EveningPhone;
    }
}
