////////////////////////////////////////////////////////////////////////////////////////////
// Class generated by SqlCodeGen 1.1.0.0.
// Do not edit this file directly. Changes will be lost when this file is regenerated.
// Extensions should be added in a separate file using partial classes.
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using NHibernate;
using NHibernate.Expression;
using NHibernate.Mapping.Attributes;

namespace QSP.Site.MyFeedback
{
	[Serializable]
	[Class(Schema="`dbo`", Table="`Feedback`")]
	public partial class Feedback
	{
		#region Constants
        public const string FeedbackEntity = "Feedback";
		public const string IdProperty = "Id";
		public const string NameProperty = "Name";
		public const string PhoneProperty = "Phone";
		public const string EmailProperty = "Email";
		public const string LocationProperty = "Location";
		public const string PublishedProperty = "Published";
		public const string MessageProperty = "Message";
		public const string CreateDateProperty = "CreateDate";
		public const string CategoryProperty = "Category";
		public const string ActiveProperty = "Active";
		#endregion

		#region Fields
		protected int id = 0;
		protected string name = "";
		protected string phone = "";
		protected string email = "";
		protected string location = "";
		protected bool published = true;
		protected string message = "";
		protected DateTime createDate = DateTime.Now;
		protected string category = "";
		protected bool active = true;
		#endregion

		#region Constructors
		public Feedback() 
		{
		}
		#endregion

		#region Properties
		[RawXml(Content=@"
		<id name=""Id"" column=""`Id`"">
			<generator class=""native"">
			</generator>
		</id>")]

		public virtual int Id
		{
			get { return this.id; }
			set { this.id = value; }
		}

		[Property(Column="`Name`")]
		public virtual string Name
		{
			get { return this.name; }
			set { this.name = value; }
		}

		[Property(Column="`Phone`")]
		public virtual string Phone
		{
			get { return this.phone; }
			set { this.phone = value; }
		}

		[Property(Column="`Email`")]
		public virtual string Email
		{
			get { return this.email; }
			set { this.email = value; }
		}

		[Property(Column="`Location`")]
		public virtual string Location
		{
			get { return this.location; }
			set { this.location = value; }
		}

		[Property(Column="`Published`")]
		public virtual bool Published
		{
			get { return this.published; }
			set { this.published = value; }
		}

		[Property(Column="`Message`")]
		public virtual string Message
		{
			get { return this.message; }
			set { this.message = value; }
		}

		[Property(Column="`CreateDate`")]
		public virtual DateTime CreateDate
		{
			get { return this.createDate; }
			set { this.createDate = value; }
		}

		[Property(Column="`Category`")]
		public virtual string Category
		{
			get { return this.category; }
			set { this.category = value; }
		}

		[Property(Column="`Active`")]
		public virtual bool Active
		{
			get { return this.active; }
			set { this.active = value; }
		}
		#endregion

		#region Methods
		public static Feedback GetFeedback(int id)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				return session.Get<Feedback>(id);
			}
		}

		public static List<Feedback> GetFeedbackList()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(Feedback));
				return (List<Feedback>)c.List<Feedback>();
			}
		}

		public static List<Feedback> GetFeedbackList(string sortExpression, int maximumRows, int startRowIndex)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(Feedback));
				if (sortExpression != null && sortExpression != "")
				{
					// Get ascending or descending order
					bool descending = sortExpression.Contains(" DESC");

					// Strip off ASC or DESC ordering
					sortExpression = sortExpression.Replace(" ASC", "");
					sortExpression = sortExpression.Replace(" DESC", "");
					sortExpression = sortExpression.Trim();

					// Get multi column sort from the comma delimited string
					List<String> expressions = new List<String>();
					if (sortExpression.Contains(","))
					{
						string[] tokens = sortExpression.Split(",".ToCharArray());
						for (int i = 0; i < tokens.Length; i++)
						{
							tokens[i] = tokens[i].Trim();
							if (tokens[i] != "")
								expressions.Add(tokens[i]);
						}
					}
					else if (sortExpression != "")
					{
						expressions.Add(sortExpression);
					}

					// Create the order
					for (int i = 0; i < expressions.Count; i++)
					{
						if (descending)
							c.AddOrder(NHibernate.Expression.Order.Desc(expressions[i]));
						else
							c.AddOrder(NHibernate.Expression.Order.Asc(expressions[i]));
					}
				}

				// Set offset and limit
				if (startRowIndex >= 0)
					c.SetFirstResult(startRowIndex);

				if (maximumRows >= 0)
					c.SetMaxResults(maximumRows);

				return (List<Feedback>)c.List<Feedback>();
			}
		}

		public static List<Feedback> GetFeedbackList(string sortExpression)
		{
			return GetFeedbackList(sortExpression, -1, -1);
		}

		public static void InsertFeedback(Feedback obj)
		{
			if (obj != null)
				obj.Insert();
		}

		public static void UpdateFeedback(Feedback obj)
		{
			if (obj != null)
				obj.Update();
		}

		public static void DeleteFeedback(Feedback obj)
		{
			if (obj != null)
				obj.Delete();
		}

        protected static Feedback PopulateFeedback(IDataReader r)
		{
			Feedback obj = new Feedback();
			obj.Id = (int)r["Id"];
			obj.Name = (string)r["Name"];
			obj.Phone = (string)r["Phone"];
			obj.Email = (string)r["Email"];
			obj.Location = (string)r["Location"];
			obj.Published = (bool)r["Published"];
			obj.Message = (string)r["Message"];
			obj.CreateDate = (DateTime)r["CreateDate"];
			obj.Category = (string)r["Category"];
			obj.Active = (bool)r["Active"];

			return obj;
		}

		public static int GetCount()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(Feedback));
				c.SetProjection(Projections.RowCount());
				return (int) c.UniqueResult();
			}
		}

		/// <summary>
		/// Insert the entity to database.
		/// </summary>
		public virtual void Insert()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Save(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Update the entity to database.
		/// </summary>
		public virtual void Update()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Update(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Persist the entity back to database.
		/// </summary>
		public virtual void Save()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.SaveOrUpdate(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Delete entity in database.
		/// </summary>
		public virtual void Delete()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Delete(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals(object obj)
		{
			if (this == obj)
				return true;

			if ((obj == null) || (obj.GetType() != this.GetType())) 
				return false;

			Feedback castObj = (Feedback)obj;
			return (castObj != null && this.id == castObj.Id);
		}

		/// <summary>
		/// Local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return 29 * (1 + this.id.GetHashCode());
		}
		#endregion
	}
}
