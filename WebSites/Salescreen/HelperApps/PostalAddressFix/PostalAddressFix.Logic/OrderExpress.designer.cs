#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PostalAddressFix.Logic
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="QSPFulfillment")]
	public partial class OrderExpressDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPostalAddress(PostalAddress instance);
    partial void UpdatePostalAddress(PostalAddress instance);
    partial void DeletePostalAddress(PostalAddress instance);
    #endregion
		
		public OrderExpressDataContext() : 
				base(global::PostalAddressFix.Logic.Properties.Settings.Default.QSPFulfillmentConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public OrderExpressDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OrderExpressDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OrderExpressDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OrderExpressDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<PostalAddress> PostalAddresses
		{
			get
			{
				return this.GetTable<PostalAddress>();
			}
		}
	}
	
	[Table(Name="dbo.postal_address")]
	public partial class PostalAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PostalAddressId;
		
		private string _Zip;
		
		private string _SubDivisionCode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPostalAddressIdChanging(int value);
    partial void OnPostalAddressIdChanged();
    partial void OnZipChanging(string value);
    partial void OnZipChanged();
    partial void OnSubDivisionCodeChanging(string value);
    partial void OnSubDivisionCodeChanged();
    #endregion
		
		public PostalAddress()
		{
			OnCreated();
		}
		
		[Column(Name="postal_address_id", Storage="_PostalAddressId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PostalAddressId
		{
			get
			{
				return this._PostalAddressId;
			}
			set
			{
				if ((this._PostalAddressId != value))
				{
					this.OnPostalAddressIdChanging(value);
					this.SendPropertyChanging();
					this._PostalAddressId = value;
					this.SendPropertyChanged("PostalAddressId");
					this.OnPostalAddressIdChanged();
				}
			}
		}
		
		[Column(Name="zip", Storage="_Zip", DbType="VarChar(50)")]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[Column(Name="subdivision_code", Storage="_SubDivisionCode", DbType="NVarChar(7)")]
		public string SubDivisionCode
		{
			get
			{
				return this._SubDivisionCode;
			}
			set
			{
				if ((this._SubDivisionCode != value))
				{
					this.OnSubDivisionCodeChanging(value);
					this.SendPropertyChanging();
					this._SubDivisionCode = value;
					this.SendPropertyChanged("SubDivisionCode");
					this.OnSubDivisionCodeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
