///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'form_detail'
// Generated by Jas on: Monday, November 03, 2003, 4:18:07 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using QSPForm.Common.DataDef;
using dataDef = QSPForm.Common.DataDef.FormCatalogGroupTable;

namespace QSPForm.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Form_catalog_group'.
	/// </summary>
	public class Form_catalog_group : DBTableOperation
	{

		#region Parameter
		//Stored procedure parameter names
		public const string PARAM_PKID = "@iform_catalog_group_id";
		public const string PARAM_FORM_ID = "@iform_id";
		public const string PARAM_CATALOG_GROUP_ID = "@icatalog_group_id";
		public const string PARAM_PRODUCT_CATALOG_ITEM_CATEGORY_ID = "@iproduct_catalog_item_category_id";
		public const string PARAM_SUPPLY_CATALOG_ITEM_CATEGORY_ID = "@isupply_catalog_item_category_id";
		//
		// Stored procedure names for each operation
		private const string SQL_PROC_DELETE = "pr_form_catalog_group_Delete";
		private const string SQL_PROC_INSERT = "pr_form_catalog_group_Insert";
		private const string SQL_PROC_UPDATE = "pr_form_catalog_group_Update";	
		private const string SQL_PROC_SELECT_ONE = "pr_form_catalog_group_SelectOne";
		private const string SQL_PROC_SELECT_ALL = "pr_form_catalog_group_SelectAll";

		#endregion

		//
		// DataSetCommand object
		//
		
		private SqlCommand insertCommand;
		private SqlCommand updateCommand;
		private SqlCommand deleteCommand;

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public Form_catalog_group()
		{
			// Nothing for now.
		}

		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand(SQL_PROC_INSERT);
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
            
				SqlParameterCollection sqlParams = insertCommand.Parameters;
            				
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_FORM_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_CATALOG_GROUP_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_PRODUCT_CATALOG_ITEM_CATEGORY_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_SUPPLY_CATALOG_ITEM_CATEGORY_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_CREATE_USER_ID, SqlDbType.Int));
						
				sqlParams[PARAM_PKID].Direction = ParameterDirection.Output;				
				//
				// Define the parameter mappings from the data table in the
				// dataset.
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_FORM_ID].SourceColumn = dataDef.FLD_FORM_ID;
				sqlParams[PARAM_CATALOG_GROUP_ID].SourceColumn = dataDef.FLD_CATALOG_GROUP_ID;
				sqlParams[PARAM_PRODUCT_CATALOG_ITEM_CATEGORY_ID].SourceColumn = dataDef.FLD_PRODUCT_CATALOG_ITEM_CATEGORY_ID;
				sqlParams[PARAM_SUPPLY_CATALOG_ITEM_CATEGORY_ID].SourceColumn = dataDef.FLD_SUPPLY_CATALOG_ITEM_CATEGORY_ID;
				sqlParams[PARAM_CREATE_USER_ID].SourceColumn = dataDef.FLD_CREATE_USER_ID;						
				
				//Don't need to map ErrorCode cause is not imply in the insert
				//Only Mapped DataColumn are imply...
			}
            
			return insertCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand(SQL_PROC_UPDATE);
				updateCommand.CommandType = CommandType.StoredProcedure;
				
            
				SqlParameterCollection sqlParams = updateCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_FORM_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_CATALOG_GROUP_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_PRODUCT_CATALOG_ITEM_CATEGORY_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_SUPPLY_CATALOG_ITEM_CATEGORY_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_DELETED, SqlDbType.Bit));
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));	

				// Define the parameter mappings from the data tabl
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_FORM_ID].SourceColumn = dataDef.FLD_FORM_ID;
				sqlParams[PARAM_CATALOG_GROUP_ID].SourceColumn = dataDef.FLD_CATALOG_GROUP_ID;
				sqlParams[PARAM_PRODUCT_CATALOG_ITEM_CATEGORY_ID].SourceColumn = dataDef.FLD_PRODUCT_CATALOG_ITEM_CATEGORY_ID;
				sqlParams[PARAM_SUPPLY_CATALOG_ITEM_CATEGORY_ID].SourceColumn = dataDef.FLD_SUPPLY_CATALOG_ITEM_CATEGORY_ID;
				sqlParams[PARAM_DELETED].SourceColumn = dataDef.FLD_DELETED;				
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;				
				//Don't need to map ErrorCode cause is not imply in the insert
				//Only Mapped DataColumn are imply...
			}
            
			return updateCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand(SQL_PROC_DELETE);
				deleteCommand.CommandType = CommandType.StoredProcedure;
				
				SqlParameterCollection sqlParams = deleteCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));
				//
				// Define the parameter mappings from the data tabl
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;	
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;
				//Only Mapped DataColumn are imply...
			}
            
			return deleteCommand;
		}

		protected override string TableName
		{
			get{return dataDef.TBL_FORM_CATALOG_GROUP;}
		}
		
		
		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public new dataDef SelectAll()
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ALL;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
					
			Select(cmdToExecute,Table);
			return  Table;
			
		}

		public new dataDef SelectOne(int ID)
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ONE;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ID));
					
			Select(cmdToExecute,Table);
			return  Table;
			
		}

		public dataDef SelectAllWform_idLogic(int FormID)
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_form_catalog_group_SelectAllWform_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FORM_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FormID));
								
			Select(cmdToExecute,Table);
			
			return  Table;
			
		}

	
	}
}
