///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'product'
// Generated by Jas on: Monday, November 03, 2003, 4:18:07 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using QSPForm.Common.DataDef;
using dataDef = QSPForm.Common.DataDef.Promo_LogoTable;

namespace QSPForm.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'product'.
	/// </summary>
	public class Promo_logo : DBTableOperation
	{

		#region Parameter
		//Stored procedure parameter names
		public const string PARAM_PKID = "@iPromo_logo_id";
		public const string PARAM_Promo_logo_NAME = "@sPromo_logo_name";
		public const string PARAM_FSM_ID = "@ifield_sales_manager_id";
		public const string PARAM_FILE_EXTENSION = "@sfile_extension";
		public const string PARAM_DESCRIPTION = "@sdescription";
		public const string PARAM_REGION_ID = "@iregion_id";
		public const string PARAM_NATIONAL = "@bnational";
		public const string PARAM_ENABLED = "@benabled";
		public const string PARAM_CATEGORY = "@iimage_category_id";

		//
		// Stored procedure names for each operation
		private const string SQL_PROC_INSERT = "pr_QSPForm_Promo_logo_Insert";
		private const string SQL_PROC_UPDATE = "pr_QSPForm_Promo_logo_Update";	
		private const string SQL_PROC_DELETE = "pr_QSPForm_Promo_logo_Delete";
		private const string SQL_PROC_SELECT_ONE = "pr_QSPForm_Promo_logo_SelectOne";
		private const string SQL_PROC_SELECT_ALL = "pr_QSPForm_Promo_logo_SelectAll";

		#endregion

		//
		// DataSetCommand object
		//
		
		private SqlCommand insertCommand;
		private SqlCommand updateCommand;
		private SqlCommand deleteCommand;

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public Promo_logo()
		{
			// Nothing for now.
		}

		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand(SQL_PROC_INSERT);
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
            
				SqlParameterCollection sqlParams = insertCommand.Parameters;
            
				//Fill the SqlParameterCollection
				FillParams(sqlParams);				
								
				//Adjust paramters direction
				sqlParams[PARAM_PKID].Direction = ParameterDirection.Output;				
				
				//Map the source column
				MapColumn(sqlParams);	


				//Adjust for insert context
				sqlParams.Add(new SqlParameter(PARAM_CREATE_USER_ID, SqlDbType.Int));
				sqlParams[PARAM_CREATE_USER_ID].SourceColumn = dataDef.FLD_CREATE_USER_ID;

			}
            
			return insertCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				
				updateCommand = new SqlCommand(SQL_PROC_UPDATE);
				updateCommand.CommandType = CommandType.StoredProcedure;
				
            
				SqlParameterCollection sqlParams = updateCommand.Parameters;
            
				//Fill the SqlParameterCollection
				FillParams(sqlParams);

				//Map the source column
				MapColumn(sqlParams);

				

				//Adjust for update context
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;

				sqlParams.Add(new SqlParameter(PARAM_DELETED, SqlDbType.Bit));
				sqlParams[PARAM_DELETED].SourceColumn = dataDef.FLD_DELETED;

			}
            
			return updateCommand;
		}
		//-----------------------
		// Set Mapping and Params in 2 differents method
		//-----------------------

		private void FillParams(SqlParameterCollection param)
		{
			param.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
			param.Add(new SqlParameter(PARAM_FSM_ID, SqlDbType.Int));
			param.Add(new SqlParameter(PARAM_Promo_logo_NAME,SqlDbType.VarChar, 50));
			param.Add(new SqlParameter(PARAM_FILE_EXTENSION,SqlDbType.VarChar, 4));
			param.Add(new SqlParameter(PARAM_DESCRIPTION,SqlDbType.VarChar, 500));
			param.Add(new SqlParameter(PARAM_ENABLED, SqlDbType.Bit));
			param.Add(new SqlParameter(PARAM_CATEGORY, SqlDbType.Int));			
			
		}

		private void MapColumn(SqlParameterCollection param)
		{
			param[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
			param[PARAM_FSM_ID].SourceColumn = dataDef.FLD_FSM_ID;
			param[PARAM_Promo_logo_NAME].SourceColumn = dataDef.FLD_PROMO_LOGO_NAME;
			param[PARAM_FILE_EXTENSION].SourceColumn = dataDef.FLD_FILE_EXTENSION;
			param[PARAM_DESCRIPTION].SourceColumn = dataDef.FLD_DESCRIPTION;
			param[PARAM_ENABLED].SourceColumn = dataDef.FLD_ENABLED;
			param[PARAM_CATEGORY].SourceColumn = dataDef.FLD_CATEGORY;

		}

		protected override string TableName
		{
			get{return dataDef.TBL_Promo_logo;}
		}

		
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand(SQL_PROC_DELETE);
				deleteCommand.CommandType = CommandType.StoredProcedure;
				
				SqlParameterCollection sqlParams = deleteCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));
				//
				// Define the parameter mappings from the data tabl
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;	
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;
				//Only Mapped DataColumn are imply...
			}
            
			return deleteCommand;
		}

		//public dataDef SelectAll_Search(int SearchType, String Criteria, int RegionID, int NationalStatus, int DisplayStatus, string StartDate, string EndDate, string FM_ID, bool IncludeFMReportedTo)
		public dataDef SelectAll_Search(int SearchType, String Criteria, string Subdivision, int NationalStatus, int DisplayStatus,string FM_ID, bool IncludeFMReportedTo, int ImageCategory)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_QSPForm_Promo_logo_SelectAll_Search2";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_TYPE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchType));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_CRITERIA, SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Criteria));
			
			if (FM_ID.Length > 0)
				cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FSM_ID, SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FM_ID));
			if(Subdivision != String.Empty)
				cmdToExecute.Parameters.Add(new SqlParameter("@ssubdivision", SqlDbType.VarChar,10,ParameterDirection.Input,false,10,0,"",DataRowVersion.Proposed, Subdivision));
			if(NationalStatus > -1)
				cmdToExecute.Parameters.Add(new SqlParameter("@bIsNational", SqlDbType.Bit,1,ParameterDirection.Input,false,10,0,"",DataRowVersion.Proposed, (NationalStatus == 1)));
			if (DisplayStatus > -1)
				cmdToExecute.Parameters.Add(new SqlParameter("@benabled", SqlDbType.Bit, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (DisplayStatus == 1)));
			if(ImageCategory > 0)
				cmdToExecute.Parameters.Add(new SqlParameter(PARAM_CATEGORY, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ImageCategory));
			cmdToExecute.Parameters.Add(new SqlParameter("@ball_fm_report_to", SqlDbType.Bit, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, IncludeFMReportedTo));
			
			
			Select(cmdToExecute,Table);

			return Table;
		}

		public dataDef SelectAll_Search(string Criteria, string FSM_ID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_QSPForm_Promo_logo_SelectAll_Search";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FSM_ID, SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FSM_ID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_CRITERIA, SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Criteria));
			Select(cmdToExecute,Table);
			return Table;
		}
		public new dataDef SelectAll()
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_QSPForm_Promo_logo_SelectAll";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			//cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_CRITERIA, SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Criteria));
			Select(cmdToExecute,Table);
			return Table;
		}
		public dataDef SelectAllByFMID(string FMID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_QSPForm_Promo_logo_SelectAllByUserID";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iFMID", SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FMID));
			Select(cmdToExecute,Table);
			return Table;
		}
		public new dataDef SelectOne(int Promo_logoID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_QSPForm_Promo_logo_SelectOne";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Promo_logoID));
			Select(cmdToExecute,Table);
			return Table;
		}
		public dataDef SelectAllPromo_logoURLByOrderID(int OrderID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.AV_SelectAllPromo_logoByOrderID";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iorder_id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, OrderID));
			Select(cmdToExecute,Table);
			return Table;
		}

	
	}
}
