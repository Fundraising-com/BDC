////////////////////////////////////////////////////////////////////////////////
// Description: Base class for Database Interaction.                       
// Generated by Jas on: Monday, November 03, 2003, 4:18:12 PM
// Because this class implements IDisposable, derived classes shouldn't do so.
///////////////////////////////////////////////////////////////////////////////
using System;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Reflection;
using System.ComponentModel;
using QSPForm.Common;


///////////////////////////////////////////////////////////////////////////
// Uncomment the following 2 lines if the assembly build with the generated classes
// is registered manually so it should be added to the GAC. Change values to your situation.
// [assembly: ApplicationName("MyCom+PackageName")]         // <-- UNCOMMENT THIS LINE. COM+ application name as it appears in the COM+ catalog.
// [assembly: AssemblyKeyFileAttribute("MyPublicKey.snk")]  // <-- UNCOMMENT THIS LINE. Strong name for assembly.
// Be sure to add 'Imports System.Reflection' to the Imports list if you uncomment the lines above.
///////////////////////////////////////////////////////////////////////////

namespace QSPForm.Data
{
	/// <summary>
	/// Purpose: Error Enums used by this library.
	/// </summary>
	public enum QSPFormError
	{
		AllOk
		// Add more here (check the comma's!)
	}
	

	public interface ICommonDBAccess
	{
		int Insert(DataTable table);
		int Update(DataTable table);
		int Delete(DataTable table);
		DataTable SelectOne();
		DataTable SelectAll();
	}
	

	/// <summary>
	/// Purpose: Abstract base class for Database Interaction classes.
	/// Class supports COM+ services and is therefor derived from ServicedComponent.
	/// </summary>
	///[ComVisible(true)]
	[Serializable()]
	//[JustInTimeActivation]
	///[ObjectPooling]
	//[LoadBalancingSupported]
	public abstract class DBInteractionBase// : ICommonDBAccess //: ServicedComponent,
	{
		//This parameter is in almost SP odf the system
		protected const String PARAM_ERROR           = "@iErrorCode";	
		public const string PARAM_SEARCH_TYPE		= "@isearch_type";
		public const string PARAM_SEARCH_CRITERIA = "@scriteria";
		
		#region Class Member Declarations
		public		SqlConnection			_mainConnection;
		protected	Int32				    _errorCode;
		protected  	bool					_mainConnectionIsCreatedLocal;
		protected  	ConnectionProvider	    _mainConnectionProvider;
		protected		bool				_isDisposed;
		#endregion
		#region connection

		/// <value>The constant used for the connection String. </value>
		//public const String ConnStr1 = "data source=uspvl2k11;initial catalog=QSPForm;UID=QSPFormWebUser;PWD=QSPFormWebUser";
		public static String ConnStr;//= "data source=161.230.144.77;initial catalog=QSPForm;password=QSPFormWebUser;persist security info=True;user id=QSPFormWebUser";
		
		/*#region override
		/// <summary>
		/// Purpose: Activation override. Will be called by COM+ when object is created or selected from a pool.
		/// </summary>
		override protected void Activate()
		{
			// Initialize the class' members.
			InitClass();
		}*/
		public static string ConnnectionString
		{
			set{ConnStr=value;}
		}
		
		public DBInteractionBase()
		{
			_mainConnection = new SqlConnection();
			_mainConnectionIsCreatedLocal = true;
			_mainConnectionProvider = null;
			AppSettingsReader _configReader = new AppSettingsReader();
			// Set connection string of the sqlconnection object
			//_mainConnection.ConnectionString = ConnStr;
			_mainConnection.ConnectionString = QSPForm.Common.QSPFormConfiguration.ConnectionString;
			//					_configReader.GetValue("Main.ConnectionString", typeof(System.String)).ToString();
			_errorCode = (int)QSPFormError.AllOk;
			_isDisposed = false;
		}
		/*	/// <summary>
			/// Purpose: De-activation override. Will be called by COM+ when the object is about to be deactivated.
			/// </summary>
			override protected void Deactivate()
			{
				// Destruct membervariables with resources.
				if(_mainConnection != null)
				{
					if(_mainConnectionIsCreatedLocal)
					{
						// Object is created in this class, so destroy it here.
						_mainConnection.Close();
						_mainConnection.Dispose();
						_mainConnectionIsCreatedLocal = false;
					}
					_mainConnection = null;
				}
			}


			/// <summary>
			/// Purpose: CanBePooled override. Will be called by COM+ when the object is about to be put back in the pool.
			/// </summary>
			override protected bool CanBePooled()
			{
				return true;
			}


			/// <summary>
			/// Purpose: Implements the Dispose functionality.
			/// </summary>
			protected override void Dispose(bool isDisposing)
			{
				// Check to see if Dispose has already been called.
				if(!_isDisposed)
				{
					if(isDisposing)
					{
						// Dispose managed resources.
						if(_mainConnectionIsCreatedLocal)
						{
							// Object is created in this class, so destroy it here.
							_mainConnection.Close();
							_mainConnection.Dispose();
							_mainConnectionIsCreatedLocal = false;
						}
						_mainConnectionProvider = null;
						_mainConnection = null;
					}
				}
				_isDisposed = true;
				base.Dispose(true);
			}
			#endregion
		
			/// <summary>
			/// Purpose: Initializes class members.
			/// </summary>
			private void InitClass()
			{
				string s;
				try
				{
					// create all the objects and initialize other members.
					_mainConnection = new SqlConnection();
					_mainConnectionIsCreatedLocal = true;
					_mainConnectionProvider = null;
					AppSettingsReader _configReader = new AppSettingsReader();
					// Set connection string of the sqlconnection object
					_mainConnection.ConnectionString = ConnStr;
	//					_configReader.GetValue("Main.ConnectionString", typeof(System.String)).ToString();
					_errorCode = (int)QSPFormError.AllOk;
					_isDisposed = false;
				}
				catch (Exception ex)
				{
					s = ex.Message;
				}
			}*/


		

		#endregion
		#region interface implementation
		/// <summary>
		/// Purpose: Implements the ICommonDBAccess.Insert() method.
		/// </summary>
		public virtual int Insert(DataTable table)
		{
			// No implementation, throw exception
			throw new NotImplementedException();
		}

		/// <summary>
		/// Purpose: Implements the ICommonDBAccess.Delete() method.
		/// </summary>
		public virtual int Delete(DataTable table)
		{
			// No implementation, throw exception
			throw new NotImplementedException();
		}


		/// <summary>
		/// Purpose: Implements the ICommonDBAccess.Update() method.
		/// </summary>
		public virtual int Update(DataTable table)
		{
			// No implementation, throw exception
			throw new NotImplementedException();
		}

		
		/// <summary>
		/// Purpose: Implements the ICommonDBAccess.SelectOne() method.
		/// </summary>
		public virtual DataTable SelectOne(int ID)
		{
			// No implementation, throw exception
			throw new NotImplementedException();
		}

		/// <summary>
		/// Purpose: Implements the ICommonDBAccess.SelectAll() method.
		/// </summary>
		public virtual DataTable SelectAll()
		{
			// No implementation, throw exception
			throw new NotImplementedException();
		
			
		}
		
		#endregion
		/// <summary>
		/// Execute Update, Insert, Delete Action into BD
		/// </summary>
		/// <param name="Command">command with parameter already set with values</param>
		protected bool ExecuteCmd(SqlCommand Command)
		{
			int NbRecAff = 0;			
			
			try
			{	
				
				Command.CommandTimeout = QSPForm.Common.QSPFormConfiguration.CommandTimeOut;
				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					Command.Connection = _mainConnection;
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						Command.Connection = _mainConnectionProvider.DBConnection;
						Command.Transaction = _mainConnectionProvider.CurrentTransaction;
						
					}
				}

				
				NbRecAff = Command.ExecuteNonQuery();				

						
			}
			catch(Exception ex)
			{
				throw ex;
			}
			finally
			{
				//_errorCode = (Int32)Command.Parameters[PARAM_ERROR].Value;
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					if (_mainConnection.State != ConnectionState.Closed)
						_mainConnection.Close();
				}				
			}
				
			
			return NbRecAff!=0;
		
		}

		#region insert
		/// <summary>
		/// insert in BD
		/// </summary>
		/// <param name="Command">command with value, param and connection</param>
		protected int Insert(SqlCommand Command, DataTable Table)
		{
			int NbRecAff = 0;

			Command.CommandTimeout = QSPForm.Common.QSPFormConfiguration.CommandTimeOut;
			SqlDataAdapter adapter = new SqlDataAdapter();
			adapter.InsertCommand = Command;

			try
			{	
				
				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					adapter.InsertCommand.Connection = _mainConnection;
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						adapter.InsertCommand.Connection = _mainConnectionProvider.DBConnection;
						adapter.InsertCommand.Transaction = _mainConnectionProvider.CurrentTransaction;
						
					}
				}
				
				NbRecAff = adapter.Update(Table);				
				
				
			}
			catch(Exception ex)
			{
				throw ex;
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					if (_mainConnection.State != ConnectionState.Closed)
						_mainConnection.Close();
				}				
			}

			return NbRecAff;
		}

		protected int Insert(SqlCommand Command, DataSet dts, String tableName)
		{
			int NbRecAff = 0;
			Command.CommandTimeout = QSPForm.Common.QSPFormConfiguration.CommandTimeOut;
			SqlDataAdapter adapter = new SqlDataAdapter();
			adapter.InsertCommand = Command;

			try
			{	
			
				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					adapter.InsertCommand.Connection = _mainConnection;
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						adapter.InsertCommand.Connection = _mainConnectionProvider.DBConnection;
						adapter.InsertCommand.Transaction = _mainConnectionProvider.CurrentTransaction;
					
					}
				}
				
				NbRecAff = adapter.Update(dts, tableName);					
				
			}
			catch(Exception ex)
			{
				throw ex;
			}
			finally
			{
				_errorCode = (Int32)Command.Parameters["@iErrorCode"].Value;
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					if (_mainConnection.State != ConnectionState.Closed)
						_mainConnection.Close();
				}				
			}
				
			
			return NbRecAff;
		
		}
		
		
		#endregion
		#region delete
		/// <summary>
		/// 
		/// </summary>
		/// <param name="Command"></param>
		/// <returns></returns>
		protected int Delete(SqlCommand Command,DataTable Table)
		{
			int NbRecAff = 0;
			Command.CommandTimeout = QSPForm.Common.QSPFormConfiguration.CommandTimeOut;
			SqlDataAdapter adapter = new SqlDataAdapter();
			adapter.DeleteCommand = Command;
			
			try
			{	
								
				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					adapter.DeleteCommand.Connection = _mainConnection;
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						adapter.DeleteCommand.Connection = _mainConnectionProvider.DBConnection;
						adapter.DeleteCommand.Transaction = _mainConnectionProvider.CurrentTransaction;
						
					}
				}

				// Execute query.
				NbRecAff = adapter.Update(Table);				

							
			}
			catch(Exception ex)
			{
				throw ex;
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					if (_mainConnection.State != ConnectionState.Closed)
						_mainConnection.Close();
				}				
			}
				
			
			return NbRecAff;
		
		}
		#endregion
		#region select
		/// <summary>
		/// 
		/// </summary>
		/// <param name="Command"></param>
		/// <returns></returns>
		protected void Select(SqlCommand Command,DataTable Table)
		{
			
			try
			{	
				Command.CommandTimeout = QSPForm.Common.QSPFormConfiguration.CommandTimeOut;	
				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					Command.Connection = _mainConnection;
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						Command.Connection = _mainConnectionProvider.DBConnection;
						Command.Transaction = _mainConnectionProvider.CurrentTransaction;
						
					}
				}

				SqlDataAdapter sda = new SqlDataAdapter(Command);				
				sda.Fill(Table);
			}
			catch(Exception ex)
			{			
				throw ex;
			}
			finally
			{
				//_errorCode = (Int32)Command.Parameters[PARAM_ERROR].Value;
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					if (_mainConnection.State != ConnectionState.Closed)
						_mainConnection.Close();
				}				
			}
							
		}

		protected void Select(SqlCommand Command, DataSet dts)
		{
			try
			{	
				
				Command.CommandTimeout = QSPForm.Common.QSPFormConfiguration.CommandTimeOut;
				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					Command.Connection = _mainConnection;
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						Command.Connection = _mainConnectionProvider.DBConnection;
						Command.Transaction = _mainConnectionProvider.CurrentTransaction;
						
					}
				}
				
				SqlDataAdapter sda = new SqlDataAdapter(Command);			
				sda.Fill(dts);
			}
			catch(Exception ex)
			{			
				throw ex;
			}
			finally
			{
				//_errorCode = (Int32)Command.Parameters[PARAM_ERROR].Value;
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					if (_mainConnection.State != ConnectionState.Closed)
						_mainConnection.Close();
				}				
			}
							
		}
		
		#endregion
		#region update
		/// <summary>
		/// 
		/// </summary>
		/// <param name="Command"></param>
		/// <param name="Table"></param>
		/// <returns></returns>
		protected int Update(SqlCommand Command,DataTable Table)
		{
			int NbRecAff = 0;

			Command.CommandTimeout = QSPForm.Common.QSPFormConfiguration.CommandTimeOut;
			SqlDataAdapter adapter = new SqlDataAdapter();
			adapter.UpdateCommand = Command;
			try
			{	
				
				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					adapter.UpdateCommand.Connection = _mainConnection;
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						adapter.UpdateCommand.Connection = _mainConnectionProvider.DBConnection;
						adapter.UpdateCommand.Transaction = _mainConnectionProvider.CurrentTransaction;
						
					}
				}

				// Execute query.
				NbRecAff = adapter.Update(Table);
			
			}
			catch(Exception ex)
			{				
				throw ex;
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					if (_mainConnection.State != ConnectionState.Closed)
						_mainConnection.Close();
				}				
			}
				
			
			return NbRecAff;
		
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="Command"></param>
		/// <returns></returns>
		protected int UpdateBatch(SqlDataAdapter adapter,DataTable Table)
		{
			
			int NbRecAff = 0;

			try
			{		
				adapter.InsertCommand.CommandTimeout = QSPForm.Common.QSPFormConfiguration.CommandTimeOut;				
				adapter.UpdateCommand.CommandTimeout = QSPForm.Common.QSPFormConfiguration.CommandTimeOut;
				adapter.DeleteCommand.CommandTimeout = QSPForm.Common.QSPFormConfiguration.CommandTimeOut;
				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					adapter.InsertCommand.Connection = _mainConnection;					
					adapter.UpdateCommand.Connection = _mainConnection;
					adapter.DeleteCommand.Connection = _mainConnection;
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						adapter.InsertCommand.Connection = _mainConnectionProvider.DBConnection;
						adapter.InsertCommand.Transaction = _mainConnectionProvider.CurrentTransaction;
						adapter.UpdateCommand.Connection = _mainConnectionProvider.DBConnection;
						adapter.UpdateCommand.Transaction = _mainConnectionProvider.CurrentTransaction;
						adapter.DeleteCommand.Connection = _mainConnectionProvider.DBConnection;
						adapter.DeleteCommand.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				NbRecAff = adapter.Update(Table);				

						
				
			}
			catch(Exception ex)
			{
				throw ex; 
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					if (_mainConnection.State != ConnectionState.Closed)
						_mainConnection.Close();
				}				
			}
				
			
			return NbRecAff;
		
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="Command"></param>
		/// <returns></returns>
		protected int UpdateBatch(SqlDataAdapter adapter, DataRow[] dataRows)
		{
			
			int NbRecAff = 0;

			try
			{		
				adapter.InsertCommand.CommandTimeout = QSPForm.Common.QSPFormConfiguration.CommandTimeOut;				
				adapter.UpdateCommand.CommandTimeout = QSPForm.Common.QSPFormConfiguration.CommandTimeOut;
				adapter.DeleteCommand.CommandTimeout = QSPForm.Common.QSPFormConfiguration.CommandTimeOut;
				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					adapter.InsertCommand.Connection = _mainConnection;					
					adapter.UpdateCommand.Connection = _mainConnection;
					adapter.DeleteCommand.Connection = _mainConnection;
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						adapter.InsertCommand.Connection = _mainConnectionProvider.DBConnection;
						adapter.InsertCommand.Transaction = _mainConnectionProvider.CurrentTransaction;
						adapter.UpdateCommand.Connection = _mainConnectionProvider.DBConnection;
						adapter.UpdateCommand.Transaction = _mainConnectionProvider.CurrentTransaction;
						adapter.DeleteCommand.Connection = _mainConnectionProvider.DBConnection;
						adapter.DeleteCommand.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				NbRecAff = adapter.Update(dataRows);				

						
				
			}
			catch(Exception ex)
			{
				throw ex; 
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					if (_mainConnection.State != ConnectionState.Closed)
						_mainConnection.Close();
				}				
			}
				
			
			return NbRecAff;
		
		}

		#endregion
		protected void AssignConnection(SqlCommand Command)
		{
			if(_mainConnectionIsCreatedLocal)
			{
				// Open connection.
				Command.Connection = _mainConnection;
				_mainConnection.Open();
			}
			else
			{
				if(_mainConnectionProvider.IsTransactionPending)
				{
					Command.Connection = _mainConnectionProvider.DBConnection;
					Command.Transaction = _mainConnectionProvider.CurrentTransaction;
						
				}
			}
		}

		protected void UnassignConnection(SqlCommand Command)
		{
			if (Command.Parameters.Contains("@iErrorCode"))
				_errorCode = (Int32)Command.Parameters["@iErrorCode"].Value;

			if(_mainConnectionIsCreatedLocal)
			{
				// Close connection.
				if (_mainConnection.State != ConnectionState.Closed)
					_mainConnection.Close();
			}
		}

		#region Class Property Declarations
		/// <summary>
		/// 
		/// </summary>
		public ConnectionProvider MainConnectionProvider
		{
			set
			{
				if(value==null)
				{
					// Invalid value
					throw new ArgumentNullException("MainConnectionProvider", "Null passed as value to this property which is not allowed.");
				}

				// A connection provider object is passed to this class.
				// Retrieve the SqlConnection object, if present and create a
				// reference to it. If there is already a MainConnection object
				// referenced by the membervar, destroy that one or simply 
				// remove the reference, based on the flag.
				if(_mainConnection!=null)
				{
					// First get rid of current connection object. Caller is responsible
					if(_mainConnectionIsCreatedLocal)
					{
						// Is local created object, close it and dispose it.
						_mainConnection.Close();
						_mainConnection.Dispose();
					}
					// Remove reference.
					_mainConnection = null;
				}
				_mainConnectionProvider = (ConnectionProvider)value;
				_mainConnection = _mainConnectionProvider.DBConnection;
				_mainConnectionIsCreatedLocal = false;
			}
		}


		public Int32 ErrorCode
		{
			get
			{
				return _errorCode;
			}
		}
		#endregion
	}
}
