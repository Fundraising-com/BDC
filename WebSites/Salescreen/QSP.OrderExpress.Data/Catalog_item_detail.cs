///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'catalog_item_detail'
// Generated by Jas on: Monday, November 03, 2003, 4:18:07 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using QSPForm.Common.DataDef;
using dataDef = QSPForm.Common.DataDef.CatalogItemDetailTable;

namespace QSPForm.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'catalog_item_detail'.
	/// </summary>
	public class CatalogItemDetail : DBTableOperation
	{

		#region Parameter
		//Stored procedure parameter names
		public const string PARAM_PKID = "@icatalog_item_detail_id";
		public const string PARAM_CATALOG_ITEM_ID ="@icatalog_item_id";
		public const string PARAM_CODE ="@scatalog_item_detail_code";
		public const string PARAM_NAME ="@scatalog_item_detail_name";	
		public const string PARAM_DESCRIPTION ="@sdescription";	
		public const string PARAM_NB_UNITS ="@inb_units";
		public const string PARAM_PRICE ="@mprice";
		public const string PARAM_TERM ="@iterm";
		public const string PARAM_IS_DEFAULT ="@bis_default";
		public const string PARAM_IMAGE_URL ="@simage_url";
		
		//
		// Stored procedure names for each operation
		private const string SQL_PROC_DELETE = "pr_catalog_item_detail_Delete";
		private const string SQL_PROC_INSERT = "pr_catalog_item_detail_Insert";
		private const string SQL_PROC_UPDATE = "pr_catalog_item_detail_Update";	
		private const string SQL_PROC_SELECT_ONE = "pr_catalog_item_detail_SelectOne";
		private const string SQL_PROC_SELECT_ALL = "pr_catalog_item_detail_SelectAll";

		#endregion

		//
		// DataSetCommand object
		//
		
		private SqlCommand insertCommand;
		private SqlCommand updateCommand;
		private SqlCommand deleteCommand;

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public CatalogItemDetail()
		{
			// Nothing for now.
		}

		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand(SQL_PROC_INSERT);
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
            
				SqlParameterCollection sqlParams = insertCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_CATALOG_ITEM_ID, SqlDbType.Int));	
				sqlParams.Add(new SqlParameter(PARAM_CODE, SqlDbType.VarChar, 50));	
				sqlParams.Add(new SqlParameter(PARAM_NAME, SqlDbType.VarChar, 50));		
				sqlParams.Add(new SqlParameter(PARAM_DESCRIPTION, SqlDbType.VarChar, 2000));	
				sqlParams.Add(new SqlParameter(PARAM_NB_UNITS, SqlDbType.Int));	
				sqlParams.Add(new SqlParameter(PARAM_PRICE, SqlDbType.Money));	
				sqlParams.Add(new SqlParameter(PARAM_TERM, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_IS_DEFAULT, SqlDbType.Bit));
				sqlParams.Add(new SqlParameter(PARAM_IMAGE_URL, SqlDbType.VarChar, 255));
				sqlParams.Add(new SqlParameter(PARAM_CREATE_USER_ID, SqlDbType.Int));
							
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
								
				sqlParams[PARAM_PKID].Direction = ParameterDirection.Output;				
				//
				// Define the parameter mappings from the data table in the
				// dataset.
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_CATALOG_ITEM_ID].SourceColumn = dataDef.FLD_CATALOG_ITEM_ID;
				sqlParams[PARAM_CODE].SourceColumn = dataDef.FLD_CODE;
				sqlParams[PARAM_NAME].SourceColumn = dataDef.FLD_NAME;
				sqlParams[PARAM_DESCRIPTION].SourceColumn = dataDef.FLD_DESCRIPTION;
				sqlParams[PARAM_NB_UNITS].SourceColumn = dataDef.FLD_NB_UNITS;
				sqlParams[PARAM_PRICE].SourceColumn = dataDef.FLD_PRICE;
				sqlParams[PARAM_TERM].SourceColumn = dataDef.FLD_TERM;
				sqlParams[PARAM_IS_DEFAULT].SourceColumn = dataDef.FLD_IS_DEFAULT;
				sqlParams[PARAM_CREATE_USER_ID].SourceColumn = dataDef.FLD_CREATE_USER_ID;						
				
				//Don't need to map ErrorCode cause is not imply in the insert
				//Only Mapped DataColumn are imply...
			}
            
			return insertCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand(SQL_PROC_UPDATE);
				updateCommand.CommandType = CommandType.StoredProcedure;
				
            
				SqlParameterCollection sqlParams = updateCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_CATALOG_ITEM_ID, SqlDbType.Int));	
				sqlParams.Add(new SqlParameter(PARAM_CODE, SqlDbType.VarChar, 50));	
				sqlParams.Add(new SqlParameter(PARAM_NAME, SqlDbType.VarChar, 50));		
				sqlParams.Add(new SqlParameter(PARAM_DESCRIPTION, SqlDbType.VarChar, 2000));	
				sqlParams.Add(new SqlParameter(PARAM_NB_UNITS, SqlDbType.Int));	
				sqlParams.Add(new SqlParameter(PARAM_PRICE, SqlDbType.Money));	
				sqlParams.Add(new SqlParameter(PARAM_TERM, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_IS_DEFAULT, SqlDbType.Bit));
				sqlParams.Add(new SqlParameter(PARAM_IMAGE_URL, SqlDbType.VarChar, 255));
				sqlParams.Add(new SqlParameter(PARAM_DELETED, SqlDbType.Bit));
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));	

				// Define the parameter mappings from the data table
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_CATALOG_ITEM_ID].SourceColumn = dataDef.FLD_CATALOG_ITEM_ID;
				sqlParams[PARAM_CODE].SourceColumn = dataDef.FLD_CODE;
				sqlParams[PARAM_NAME].SourceColumn = dataDef.FLD_NAME;
				sqlParams[PARAM_DESCRIPTION].SourceColumn = dataDef.FLD_DESCRIPTION;
				sqlParams[PARAM_NB_UNITS].SourceColumn = dataDef.FLD_NB_UNITS;
				sqlParams[PARAM_PRICE].SourceColumn = dataDef.FLD_PRICE;
				sqlParams[PARAM_TERM].SourceColumn = dataDef.FLD_TERM;
				sqlParams[PARAM_IS_DEFAULT].SourceColumn = dataDef.FLD_IS_DEFAULT;
				sqlParams[PARAM_DELETED].SourceColumn = dataDef.FLD_DELETED;				
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;				
				//Don't need to map ErrorCode cause is not imply in the insert
				//Only Mapped DataColumn are imply...
			}
            
			return updateCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand(SQL_PROC_DELETE);
				deleteCommand.CommandType = CommandType.StoredProcedure;
				
				SqlParameterCollection sqlParams = deleteCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));
				//
				// Define the parameter mappings from the data tabl
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;	
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;
				//Only Mapped DataColumn are imply...
			}
            
			return deleteCommand;
		}

		protected override string TableName
		{
			get{return dataDef.TBL_CATALOG_ITEM_DETAIL;}
		}
		
		//We create a new method when we want to the return type variable
		public new dataDef SelectOne(int CatalogItemID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ONE;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CatalogItemID));
			
			Select(cmdToExecute,Table);

			return Table;
				
		}

		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public new dataDef SelectAll()
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ALL;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
					
			Select(cmdToExecute,Table);
			return  Table;
			
		}

		public dataDef SelectAllWcatalog_item_idLogic(int CatalogItemID)
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_catalog_item_detail_SelectAllWcatalog_item_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_CATALOG_ITEM_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CatalogItemID));
			
					
			Select(cmdToExecute,Table);
			
			return  Table;
			
		}

		public dataDef SelectAllWform_idLogic(int FormID)
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();			
			cmdToExecute.CommandText = "dbo.pr_catalog_item_detail_SelectAllWform_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iform_id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FormID));
			
					
			Select(cmdToExecute,Table);
			
			return  Table;
			
		}

		public dataDef SelectAllWform_idLogic(int FormID, bool IsSupply)
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();			
			cmdToExecute.CommandText = "dbo.pr_catalog_item_detail_SelectAllWform_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iform_id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FormID));
			cmdToExecute.Parameters.Add(new SqlParameter("@bIsSupply", SqlDbType.Bit, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, IsSupply));
			
					
			Select(cmdToExecute,Table);
			
			return  Table;
			
		}

        public dataDef SelectAllWform_idLogic(int FormID, float ProfitRate)
        {
            dataDef Table = new dataDef();

            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.pr_catalog_item_detail_SelectAllWform_idLogic";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            cmdToExecute.Parameters.Add(new SqlParameter("@iform_id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FormID));
            cmdToExecute.Parameters.Add(new SqlParameter("@fprofit_rate", SqlDbType.Float, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ProfitRate));


            Select(cmdToExecute, Table);

            return Table;

        }

//		public dataDef SelectAll_Search(int SearchType, String Criteria, int AccountType, string SubdivisionCode)
//		{
//			dataDef Table = new dataDef();
//			SqlCommand	cmdToExecute = new SqlCommand();
//			cmdToExecute.CommandText = "dbo.pr_catalog_item_detail_SelectAll_Search";
//			cmdToExecute.CommandType = CommandType.StoredProcedure;
//			if (AccountType > 0)
//				cmdToExecute.Parameters.Add(new SqlParameter(PARAM_CATALOG_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, AccountType));
//			if (SubdivisionCode.Length > 0)
//				cmdToExecute.Parameters.Add(new SqlParameter("@ssubdivision_code", SqlDbType.NVarChar, 7, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SubdivisionCode));
//			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_TYPE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchType));
//			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_CRITERIA, SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Criteria));
//			
//			
//			
//			Select(cmdToExecute,Table);
//
//			return Table;
//		}

	
	}
}
