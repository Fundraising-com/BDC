///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'program_agreement'
// Generated by Jas on: Monday, November 03, 2003, 4:18:07 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using QSPForm.Common.DataDef;
using QSPForm.Common;
using dataDef = QSPForm.Common.DataDef.ProgramAgreementTable;

namespace QSPForm.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'program_agreement'.
	/// </summary>
	public class ProgramAgreement : DBTableOperation
	{

		#region Parameter
		//Stored procedure parameter names
		public const string PARAM_PKID = "@iprogram_agreement_id";
        public const string PARAM_FULF_PROGRAM_AGREEMENT_ID = "@sfulf_program_agreement_id";
        public const string PARAM_FORM_ID = "@iform_id";
		public const string PARAM_PROGRAM_AGREEMENT_STATUS_ID ="@iprogram_agreement_status_id";
        public const string PARAM_TAX_EXEMPTION_NO = "@stax_exemption_number";
        public const string PARAM_TAX_EXEMPTION_EXP_DATE = "@datax_exemption_expiration_date";
        public const String PARAM_START_DATE = "@dastart_date";
        public const String PARAM_END_DATE = "@daend_date";
        public const String PARAM_HOLYDAY_START_DATE = "@daholiday_start_date";
        public const String PARAM_HOLYDAY_END_DATE = "@daholiday_end_date";
        public const string PARAM_GOAL_ESTIMATED_GROSS = "@mgoal_estimated_gross";
        public const string PARAM_ENROLLMENT = "@ienrollment";
        public const string PARAM_RENEWAL_SIGN_UP_TERM = "@irenewal_sign_up_term";
        public const string PARAM_DEFAULT_PROFIT_RATE = "@fdefault_profit_rate";	
		public const string PARAM_COMMENTS ="@scomments";
        public const string PARAM_PRICED = "@ipriced";
		
		//
		// Stored procedure names for each operation
		private const string SQL_PROC_DELETE = "pr_program_agreement_Delete";
		private const string SQL_PROC_INSERT = "pr_program_agreement_Insert";
		private const string SQL_PROC_UPDATE = "pr_program_agreement_Update";	
		private const string SQL_PROC_SELECT_ONE = "pr_program_agreement_SelectOne";
		private const string SQL_PROC_SELECT_ALL = "pr_program_agreement_SelectAll";

		#endregion

		//
		// DataSetCommand object
		//
		
		private SqlCommand insertCommand;
		private SqlCommand updateCommand;
		private SqlCommand deleteCommand;

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public ProgramAgreement()
		{
			// Nothing for now.
		}

		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand(SQL_PROC_INSERT);
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
            
				SqlParameterCollection sqlParams = insertCommand.Parameters;

                sqlParams.Add(new SqlParameter(PARAM_FULF_PROGRAM_AGREEMENT_ID, SqlDbType.VarChar, 6));
                sqlParams.Add(new SqlParameter(PARAM_FORM_ID, SqlDbType.Int));
                sqlParams.Add(new SqlParameter(PARAM_PROGRAM_AGREEMENT_STATUS_ID, SqlDbType.Int));
                sqlParams.Add(new SqlParameter(PARAM_TAX_EXEMPTION_NO, SqlDbType.VarChar, 20));
                sqlParams.Add(new SqlParameter(PARAM_TAX_EXEMPTION_EXP_DATE, SqlDbType.DateTime));
                sqlParams.Add(new SqlParameter(PARAM_START_DATE, SqlDbType.DateTime));
                sqlParams.Add(new SqlParameter(PARAM_END_DATE, SqlDbType.DateTime));
                sqlParams.Add(new SqlParameter(PARAM_HOLYDAY_START_DATE, SqlDbType.DateTime));
                sqlParams.Add(new SqlParameter(PARAM_HOLYDAY_END_DATE, SqlDbType.DateTime));
                sqlParams.Add(new SqlParameter(PARAM_GOAL_ESTIMATED_GROSS, SqlDbType.Money));
                sqlParams.Add(new SqlParameter(PARAM_ENROLLMENT, SqlDbType.Int));
                sqlParams.Add(new SqlParameter(PARAM_RENEWAL_SIGN_UP_TERM, SqlDbType.Int));
                sqlParams.Add(new SqlParameter(PARAM_DEFAULT_PROFIT_RATE, SqlDbType.Float));
                sqlParams.Add(new SqlParameter(PARAM_COMMENTS, SqlDbType.VarChar, 4000));
				sqlParams.Add(new SqlParameter(PARAM_CREATE_USER_ID, SqlDbType.Int));
                sqlParams.Add(new SqlParameter(PARAM_PRICED, SqlDbType.Bit));
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
								
				sqlParams[PARAM_PKID].Direction = ParameterDirection.Output;				
				//
				// Define the parameter mappings from the data table in the
				// dataset.
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
                sqlParams[PARAM_FULF_PROGRAM_AGREEMENT_ID].SourceColumn = dataDef.FLD_FULF_PROGRAM_AGREEMENT_ID;
                sqlParams[PARAM_FORM_ID].SourceColumn = dataDef.FLD_FORM_ID;
                sqlParams[PARAM_PROGRAM_AGREEMENT_STATUS_ID].SourceColumn = dataDef.FLD_PROGRAM_AGREEMENT_STATUS_ID;
                sqlParams[PARAM_TAX_EXEMPTION_NO].SourceColumn = dataDef.FLD_TAX_EXEMPTION_NO;
                sqlParams[PARAM_TAX_EXEMPTION_EXP_DATE].SourceColumn = dataDef.FLD_TAX_EXEMPTION_EXP_DATE;
                sqlParams[PARAM_START_DATE].SourceColumn = dataDef.FLD_START_DATE;
				sqlParams[PARAM_END_DATE].SourceColumn = dataDef.FLD_END_DATE;
                sqlParams[PARAM_HOLYDAY_START_DATE].SourceColumn = dataDef.FLD_HOLIDAY_START_DATE;
                sqlParams[PARAM_HOLYDAY_END_DATE].SourceColumn = dataDef.FLD_HOLIDAY_END_DATE;
                sqlParams[PARAM_GOAL_ESTIMATED_GROSS].SourceColumn = dataDef.FLD_GOAL_ESTIMATED_GROSS;
				sqlParams[PARAM_ENROLLMENT].SourceColumn = dataDef.FLD_ENROLLMENT;   
				sqlParams[PARAM_RENEWAL_SIGN_UP_TERM].SourceColumn = dataDef.FLD_RENEWAL_SIGN_UP_TERM;
                sqlParams[PARAM_DEFAULT_PROFIT_RATE].SourceColumn = dataDef.FLD_PROFIT_RATE;
                sqlParams[PARAM_COMMENTS].SourceColumn = dataDef.FLD_COMMENTS;	
				sqlParams[PARAM_CREATE_USER_ID].SourceColumn = dataDef.FLD_CREATE_USER_ID;
                sqlParams[PARAM_PRICED].SourceColumn = dataDef.FLD_PRICED;
				
				//Don't need to map ErrorCode cause is not imply in the insert
				//Only Mapped DataColumn are imply...
			}
            
			return insertCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand(SQL_PROC_UPDATE);
				updateCommand.CommandType = CommandType.StoredProcedure;
				
            
				SqlParameterCollection sqlParams = updateCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
                sqlParams.Add(new SqlParameter(PARAM_FULF_PROGRAM_AGREEMENT_ID, SqlDbType.VarChar, 6));
                sqlParams.Add(new SqlParameter(PARAM_FORM_ID, SqlDbType.Int));
                sqlParams.Add(new SqlParameter(PARAM_PROGRAM_AGREEMENT_STATUS_ID, SqlDbType.Int));
                sqlParams.Add(new SqlParameter(PARAM_TAX_EXEMPTION_NO, SqlDbType.VarChar, 20));
                sqlParams.Add(new SqlParameter(PARAM_TAX_EXEMPTION_EXP_DATE, SqlDbType.DateTime));
                sqlParams.Add(new SqlParameter(PARAM_START_DATE, SqlDbType.DateTime));
                sqlParams.Add(new SqlParameter(PARAM_END_DATE, SqlDbType.DateTime));
                sqlParams.Add(new SqlParameter(PARAM_HOLYDAY_START_DATE, SqlDbType.DateTime));
                sqlParams.Add(new SqlParameter(PARAM_HOLYDAY_END_DATE, SqlDbType.DateTime));
                sqlParams.Add(new SqlParameter(PARAM_GOAL_ESTIMATED_GROSS, SqlDbType.Money));
                sqlParams.Add(new SqlParameter(PARAM_ENROLLMENT, SqlDbType.Int));
                sqlParams.Add(new SqlParameter(PARAM_RENEWAL_SIGN_UP_TERM, SqlDbType.Int));
                sqlParams.Add(new SqlParameter(PARAM_DEFAULT_PROFIT_RATE, SqlDbType.Float));
                sqlParams.Add(new SqlParameter(PARAM_COMMENTS, SqlDbType.VarChar, 4000));
                sqlParams.Add(new SqlParameter(PARAM_DELETED, SqlDbType.Bit));
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));
                sqlParams.Add(new SqlParameter(PARAM_PRICED, SqlDbType.Bit));

				// Define the parameter mappings from the data tabl
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
                sqlParams[PARAM_FULF_PROGRAM_AGREEMENT_ID].SourceColumn = dataDef.FLD_FULF_PROGRAM_AGREEMENT_ID;
                sqlParams[PARAM_FORM_ID].SourceColumn = dataDef.FLD_FORM_ID;
                sqlParams[PARAM_PROGRAM_AGREEMENT_STATUS_ID].SourceColumn = dataDef.FLD_PROGRAM_AGREEMENT_STATUS_ID;
                sqlParams[PARAM_TAX_EXEMPTION_NO].SourceColumn = dataDef.FLD_TAX_EXEMPTION_NO;
                sqlParams[PARAM_TAX_EXEMPTION_EXP_DATE].SourceColumn = dataDef.FLD_TAX_EXEMPTION_EXP_DATE;
                sqlParams[PARAM_START_DATE].SourceColumn = dataDef.FLD_START_DATE;
                sqlParams[PARAM_END_DATE].SourceColumn = dataDef.FLD_END_DATE;
                sqlParams[PARAM_HOLYDAY_START_DATE].SourceColumn = dataDef.FLD_HOLIDAY_START_DATE;
                sqlParams[PARAM_HOLYDAY_END_DATE].SourceColumn = dataDef.FLD_HOLIDAY_END_DATE;
                sqlParams[PARAM_GOAL_ESTIMATED_GROSS].SourceColumn = dataDef.FLD_GOAL_ESTIMATED_GROSS;
                sqlParams[PARAM_ENROLLMENT].SourceColumn = dataDef.FLD_ENROLLMENT;
                sqlParams[PARAM_RENEWAL_SIGN_UP_TERM].SourceColumn = dataDef.FLD_RENEWAL_SIGN_UP_TERM;
                sqlParams[PARAM_DEFAULT_PROFIT_RATE].SourceColumn = dataDef.FLD_PROFIT_RATE;
                sqlParams[PARAM_COMMENTS].SourceColumn = dataDef.FLD_COMMENTS;
                sqlParams[PARAM_DELETED].SourceColumn = dataDef.FLD_DELETED;				
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;
                sqlParams[PARAM_PRICED].SourceColumn = dataDef.FLD_PRICED;
				//Don't need to map ErrorCode cause is not imply in the insert
				//Only Mapped DataColumn are imply...
			}
            
			return updateCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand(SQL_PROC_DELETE);
				deleteCommand.CommandType = CommandType.StoredProcedure;
				
				SqlParameterCollection sqlParams = deleteCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));
				//
				// Define the parameter mappings from the data tabl
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;	
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;
				//Only Mapped DataColumn are imply...
			}
            
			return deleteCommand;
		}

		protected override string TableName
		{
			get{return dataDef.TBL_PROGRAM_AGREEMENT;}
		}
		
		//We create a new method when we want to the return type variable
		public new dataDef SelectOne(int ProgramAgreementID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ONE;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ProgramAgreementID));
			
			Select(cmdToExecute,Table);

			return Table;
				
		}

		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ALL;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
					
			Select(cmdToExecute,Table);
			return  Table;
			
		}

        public dataDef SelectAllWfm_idLogic(string FMID)
        {
            dataDef Table = new dataDef();

            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.pr_program_agreement_SelectAllWfm_idLogic";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            cmdToExecute.Parameters.Add(new SqlParameter("@sfm_id", SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FMID));


            Select(cmdToExecute, Table);

            return Table;

        }


        public dataDef SelectAllWprogram_type_idLogic(int ProgramTypeID)
        {
            dataDef Table = new dataDef();

            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.pr_program_agreement_SelectAllWprogram_type_idLogic";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            cmdToExecute.Parameters.Add(new SqlParameter("@iprogram_type_id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ProgramTypeID));

            Select(cmdToExecute, Table);

            return Table;

        }

        public dataDef SelectAllWprogram_idLogic(int ProgramID)
        {
            dataDef Table = new dataDef();

            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.pr_program_agreement_SelectAllWprogram_idLogic";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            cmdToExecute.Parameters.Add(new SqlParameter("@iprogram_id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ProgramID));

            Select(cmdToExecute, Table);

            return Table;

        }

				

		public dataDef SelectAllWcampaign_idLogic(int CampaignID)
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_program_agreement_SelectAllWcampaign_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@icampaign_id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CampaignID));
				
			Select(cmdToExecute,Table);
		
			return  Table;
		
		}

        public dataDef SelectAll_Search(int SearchType, String Criteria, int ProgramType, string SubdivisionCode, string FMID, int FSM_DisplayMode, int StatusCategoryID, string FMName)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_program_agreement_SelectAll_Search";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			if (ProgramType > 0)
				cmdToExecute.Parameters.Add(new SqlParameter("@iprogram_type_id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ProgramType));
			if (SubdivisionCode.Length > 0)
				cmdToExecute.Parameters.Add(new SqlParameter("@ssubdivision_code", SqlDbType.NVarChar, 7, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SubdivisionCode));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_TYPE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchType));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_CRITERIA, SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Criteria));
			
            if (FMID.Length > 0)
                cmdToExecute.Parameters.Add(new SqlParameter("@sfm_id", SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FMID));
			
            cmdToExecute.Parameters.Add(new SqlParameter("@idisplay_fm_mode", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FSM_DisplayMode));
            
            if (FMName.Length > 0)
                cmdToExecute.Parameters.Add(new SqlParameter("@sfm_name", SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FMName));
			
			if (StatusCategoryID > 0)
				cmdToExecute.Parameters.Add(new SqlParameter("@istatus_category_id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, StatusCategoryID));
			
			Select(cmdToExecute,Table);

			return Table;
		}

		
		public ProgramAgreementData SelectAllDetail(int ID)
		{	
			//This method fill the All Data needed for an program_agreement
			//into a predefined DataSet
			ProgramAgreementData dts = new ProgramAgreementData();
			try
			{				
				//Data Object Instanciation
                Data.Campaign campDataAccess = new Data.Campaign();
				Data.ProgramAgreement prgDataAccess = new Data.ProgramAgreement();
                Data.ProgramAgreementCampaign prgCampDataAccess = new Data.ProgramAgreementCampaign();
                Data.Postal_address_entity postDataAccess = new Data.Postal_address_entity();	
				Data.Phone_number_entity phoneDataAccess = new Data.Phone_number_entity();
				Data.Email_entity emailDataAccess = new Data.Email_entity();
				Data.Entity_exception excDataAccess = new Data.Entity_exception();
                Data.ProgramAgreementCatalog prgCatalogDataAccess = new Data.ProgramAgreementCatalog();

				if (_mainConnectionProvider != null)
				{
					// Pass the created ConnectionProvider object to the data-access objects.
					campDataAccess.MainConnectionProvider = _mainConnectionProvider;
                    prgDataAccess.MainConnectionProvider = _mainConnectionProvider;
                    prgCampDataAccess.MainConnectionProvider = _mainConnectionProvider;
                    postDataAccess.MainConnectionProvider = _mainConnectionProvider;
					phoneDataAccess.MainConnectionProvider = _mainConnectionProvider;
					emailDataAccess.MainConnectionProvider = _mainConnectionProvider;
					excDataAccess.MainConnectionProvider = _mainConnectionProvider;
                    prgCatalogDataAccess.MainConnectionProvider = _mainConnectionProvider;
				}
                //Program Agreement
				dts.Merge(SelectOne(ID));
                //Program Agreement Campaign
                dts.Merge(prgCampDataAccess.SelectAllWprogram_agreement_idLogic(ID));
                //Campaign
				dts.Merge(campDataAccess.SelectAllWprogram_agreement_idLogic(ID));
				//Postal Address
				dts.Merge(postDataAccess.SelectWentity_idLogic(EntityType.TYPE_PROGRAM_AGREEMENT, ID));
				//Phone Number
				dts.Merge(phoneDataAccess.SelectWentity_idLogic(EntityType.TYPE_PROGRAM_AGREEMENT, ID));
				//Email Addess
				dts.Merge(emailDataAccess.SelectWentity_idLogic(EntityType.TYPE_PROGRAM_AGREEMENT, ID));
                //Billing Account Information
                if (dts.Campaign.Rows.Count > 0)
                {
                    dts.Merge(postDataAccess.SelectWentity_idLogic(EntityType.TYPE_ACCOUNT, (int)dts.Campaign.Rows[0][CampaignTable.FLD_ACCOUNT_ID]));
                    dts.Merge(phoneDataAccess.SelectWentity_idLogic(EntityType.TYPE_ACCOUNT, (int)dts.Campaign.Rows[0][CampaignTable.FLD_ACCOUNT_ID]));
                    dts.Merge(emailDataAccess.SelectWentity_idLogic(EntityType.TYPE_ACCOUNT, (int)dts.Campaign.Rows[0][CampaignTable.FLD_ACCOUNT_ID]));
                }
				//ProgramAgreement Exception	
				dts.Merge(excDataAccess.SelectAllWentity_idLogic(ID, EntityType.TYPE_PROGRAM_AGREEMENT));	
			    //ProgramAgreement Catalog
                dts.Merge(prgCatalogDataAccess.SelectAllProgramAgreementCatalogs(ID,EntityType.TYPE_PROGRAM_AGREEMENT));
				ResolveFormID(dts);

			}
			catch (Exception ex)
			{
				throw ex;
			}
			return dts;

			
		}


		
		
		public void ResolveFormID(ProgramAgreementData dtsProgramAgreement)
		{
			if (dtsProgramAgreement.IsFormIDNull)
			{
				//Form Info -- We have to determine it
				int ProgType = 0;
				if (dtsProgramAgreement.Campaign.Rows.Count > 0)
					ProgType = Convert.ToInt32(dtsProgramAgreement.Campaign.Rows[0][CampaignTable.FLD_PROG_TYPE_ID]);
				Form formDataAccess = new Form();
				FormTable dTblForm = formDataAccess.SelectAllWentity_type_idLogic(QSPForm.Common.EntityType.TYPE_PROGRAM_AGREEMENT);
				DataView dvForm = new DataView(dTblForm);
				dvForm.RowFilter =  FormTable.FLD_PROGRAM_TYPE_ID + " = " + ProgType.ToString();
				if (dvForm.Count >0)
				{
					dtsProgramAgreement.Campaign.Rows[0][CampaignTable.FLD_FORM_ID] = dvForm[0][FormTable.FLD_PKID];
				}
			}
		}
	
	}
}
