///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'Tax_calculation_method'
// Generated by LLBLGen v1.2.1402.29234 Final on: Wednesday, November 12, 2003, 2:35:04 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using dataDef = QSPForm.Common.DataDef.TaxCalculationMethodTable;

namespace QSPForm.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Tax_calculation_method'.
	/// </summary>
	public class Tax_calculation_method : DBInteractionBase
	{
		
		#region Parameter
			//Stored procedure parameter names
            public const string TABLE_NAME = "Tax_calculation_method";
            public const string PARAM_PKID = "@itax_calculation_method_id";
            public const string PARAM_SUBDIVSION_CODE = "@ssubdivision_code";
            public const string PARAM_PRODUCT_TYPE_ID = "@iproduct_type_id";
            public const string PARAM_ORGANIZATION_TYPE_ID = "@iorganization_type_id";
			//
			// Stored procedure names for each operation
			private const string SQL_PROC_SELECT_ONE = "pr_tax_calculation_method_SelectOne";
			private const string SQL_PROC_SELECT_ALL_SEARCH = "pr_tax_calculation_method_SelectAll_Search";		
		
		#endregion
		

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public Tax_calculation_method()
		{
			// Nothing for now.
		}

		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iId</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>

        public new dataDef SelectOne(int TaxCalculationMethodID)
		{
            dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ONE;
			cmdToExecute.CommandType = CommandType.StoredProcedure;

            cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, TaxCalculationMethodID));
			
			Select(cmdToExecute,Table);
			
			return Table;
				
		}



		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			DataTable Table = new DataTable(TABLE_NAME);
			
			return  Table;
			
		}

        public dataDef SelectAllWsubdivision_codeLogic(string SubdivisionCode)
		{
            dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.pr_tax_calculation_method_SelectAllWsubdivision_codeLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

            if (SubdivisionCode.Length > 0)
                cmdToExecute.Parameters.Add(new SqlParameter("@ssubdivision_code", SqlDbType.NVarChar, 7, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SubdivisionCode));
					
			Select(cmdToExecute,Table);
			
			return  Table;
			
		}

        public dataDef SelectAll_Search(string SubdivisionCode, int ProductTypeID, int OrganizationTypeID)
		{
            dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = SQL_PROC_SELECT_ALL_SEARCH;
			cmdToExecute.CommandType = CommandType.StoredProcedure;

            cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SUBDIVSION_CODE, SqlDbType.NVarChar, 7, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SubdivisionCode));
            cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PRODUCT_TYPE_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ProductTypeID));
            cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ORGANIZATION_TYPE_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, OrganizationTypeID));
			
					
			Select(cmdToExecute,Table);
			
			return  Table;
			
		}

		
	}
}
