///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'PhoneNumber'
// Generated by Jas on: Monday, November 03, 2003, 4:18:07 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using QSPForm.Common.DataDef;
using dataDef = QSPForm.Common.DataDef.EmailEntityTable;

namespace QSPForm.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Email Entity'.
	/// </summary>
	public class Email_entity : DBTableOperation
	{

		//Stored procedure parameter names
		public const string PARAM_PKID = "@iemail_entity_id";
		public const string PARAM_EMAIL_ID ="@iemail_id";
		public const string PARAM_ENTITY_TYPE_ID ="@ientity_type_id";	
		public const string PARAM_ENTITY_ID ="@ientity_id";	
		public const string PARAM_TYPE ="@iemail_type_id";

		public const string PARAM_EMAIL_ADDRESS ="@semail_Address";
		public const string PARAM_RECIPIENT_NAME ="@srecipient_name";
		
		//
		// Stored procedure names for each operation
		private const string SQL_PROC_DELETE = "pr_email_entity_Delete";
		private const string SQL_PROC_INSERT = "pr_email_entity_Insert";
		private const string SQL_PROC_UPDATE = "pr_email_entity_Update";	
		private const string SQL_PROC_SELECT_ONE = "pr_email_entity_SelectOne";
        private const string SQL_PROC_SELECT_ONE_LOGIC = "pr_email_SelectOne";
		private const string SQL_PROC_SELECT_ALL = "pr_email_entity_SelectAll";

		public const String FLD_REASSIGNED = "reassigned";

		//
		// DataSetCommand object
		//
		
		private SqlCommand insertCommand;
		private SqlCommand updateCommand;
		private SqlCommand deleteCommand;

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public Email_entity()
		{
			// Nothing for now.
		}

		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand(SQL_PROC_INSERT);
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
            
				SqlParameterCollection sqlParams = insertCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_ENTITY_TYPE_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_ENTITY_ID, SqlDbType.Int));				
				sqlParams.Add(new SqlParameter(PARAM_EMAIL_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_TYPE, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_EMAIL_ADDRESS, SqlDbType.VarChar, 100));			
				sqlParams.Add(new SqlParameter(PARAM_RECIPIENT_NAME, SqlDbType.VarChar, 50));			
				sqlParams.Add(new SqlParameter(PARAM_CREATE_USER_ID, SqlDbType.Int));
							
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
								
				sqlParams[PARAM_PKID].Direction = ParameterDirection.Output;
				sqlParams[PARAM_EMAIL_ID].Direction = ParameterDirection.InputOutput;
				//
				// Define the parameter mappings from the data table in the
				// dataset.
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_ENTITY_ID].SourceColumn = dataDef.FLD_ENTITY_ID;
				sqlParams[PARAM_ENTITY_TYPE_ID].SourceColumn = dataDef.FLD_ENTITY_TYPE_ID;
				sqlParams[PARAM_EMAIL_ID].SourceColumn = dataDef.FLD_EMAIL_ID;
				sqlParams[PARAM_TYPE].SourceColumn = dataDef.FLD_TYPE;
				sqlParams[PARAM_EMAIL_ADDRESS].SourceColumn = dataDef.FLD_EMAIL_ADDRESS;	
				sqlParams[PARAM_RECIPIENT_NAME].SourceColumn = dataDef.FLD_RECIPIENT_NAME;
				sqlParams[PARAM_CREATE_USER_ID].SourceColumn = dataDef.FLD_CREATE_USER_ID;						
				
				//Don't need to map ErrorCode cause is not imply in the insert
				//Only Mapped DataColumn are imply...
			}
            
			return insertCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand(SQL_PROC_UPDATE);
				updateCommand.CommandType = CommandType.StoredProcedure;
				
            
				SqlParameterCollection sqlParams = updateCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_ENTITY_TYPE_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_ENTITY_ID, SqlDbType.Int));				
				sqlParams.Add(new SqlParameter(PARAM_TYPE, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_EMAIL_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_EMAIL_ADDRESS, SqlDbType.VarChar, 100));	
				sqlParams.Add(new SqlParameter(PARAM_RECIPIENT_NAME, SqlDbType.VarChar, 50));			
				sqlParams.Add(new SqlParameter(PARAM_DELETED, SqlDbType.Bit));
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));	

				sqlParams[PARAM_PKID].Direction = ParameterDirection.InputOutput;
				sqlParams[PARAM_EMAIL_ID].Direction = ParameterDirection.InputOutput;
				// Define the parameter mappings from the data tabl
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_ENTITY_ID].SourceColumn = dataDef.FLD_ENTITY_ID;
				sqlParams[PARAM_ENTITY_TYPE_ID].SourceColumn = dataDef.FLD_ENTITY_TYPE_ID;	
				sqlParams[PARAM_TYPE].SourceColumn = dataDef.FLD_TYPE;
				sqlParams[PARAM_EMAIL_ID].SourceColumn = dataDef.FLD_EMAIL_ID;
				sqlParams[PARAM_EMAIL_ADDRESS].SourceColumn = dataDef.FLD_EMAIL_ADDRESS;				
				sqlParams[PARAM_RECIPIENT_NAME].SourceColumn = dataDef.FLD_RECIPIENT_NAME;
				sqlParams[PARAM_DELETED].SourceColumn = dataDef.FLD_DELETED;				
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;				
				//Don't need to map ErrorCode cause is not imply in the insert
				//Only Mapped DataColumn are imply...
			}
            
			return updateCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand(SQL_PROC_DELETE);
				deleteCommand.CommandType = CommandType.StoredProcedure;
				
				SqlParameterCollection sqlParams = deleteCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_ENTITY_TYPE_ID, SqlDbType.Int));	
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));
				//
				// Define the parameter mappings from the data tabl
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;	
				sqlParams[PARAM_ENTITY_TYPE_ID].SourceColumn = dataDef.FLD_ENTITY_TYPE_ID;	
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;
				//Only Mapped DataColumn are imply...
			}
            
			return deleteCommand;
		}

		protected override string TableName
		{
			get{return dataDef.TBL_EMAIL_ENTITY;}
		}
		
		//We create a new method when we want to the return type variable
		public dataDef SelectOne(int EntityTypeID, int EmailEntityID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ONE;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, EmailEntityID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ENTITY_TYPE_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, EntityTypeID));
			
			Select(cmdToExecute,Table);

			return Table;
				
		}
        public dataDef SelectOne(int EmailEntityID)
        {
            dataDef Table = new dataDef();
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = SQL_PROC_SELECT_ONE_LOGIC;
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            cmdToExecute.Parameters.Add(new SqlParameter(PARAM_EMAIL_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, EmailEntityID));

            Select(cmdToExecute, Table);

            return Table;

        }

		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public dataDef SelectAll(int EntityTypeID)
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ALL;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ENTITY_TYPE_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, EntityTypeID));
			
					
			Select(cmdToExecute,Table);
			return  Table;
			
		}

		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public dataDef SelectWentity_idLogic(int EntityTypeID, int EntityID)
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_email_entity_SelectAllWentity_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ENTITY_TYPE_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, EntityTypeID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ENTITY_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, EntityID));
								
			Select(cmdToExecute,Table);
			return  Table;
			
		}
		
		
		public bool UpdateBatch(dataDef Table)
		{
			//We call a method from the inherit class, but the
			//validation with the overriden Validate Method 
			//is in the current class	
			bool IsSuccess = false;
			//Add a column to flag if the operation of reassignment have been done
			//Add our working column in the current table
			if (!Table.Columns.Contains(FLD_REASSIGNED))
				Table.Columns.Add(FLD_REASSIGNED, typeof(System.Boolean)).DefaultValue = false;
			

			foreach (DataRow row in Table.Rows)
			{
				if (row.RowState != DataRowState.Unchanged && row.RowState != DataRowState.Deleted)
				{
					DataRow[] dataRows = {row};
					IsSuccess = (UpdateBatch(dataRows) > 0);					
					if (!IsSuccess)
						break;
					else
					{
						if (row.RowState != DataRowState.Detached)
						{
							//Reassignment process
							//Only propagade a row that have not been part of the reassignment process
							bool reassigned = false;
							if (!row.IsNull(FLD_REASSIGNED))
								reassigned = Convert.ToBoolean(row[FLD_REASSIGNED]);
							if (!reassigned)
							{
								//Reassignment of Postal_Address_id when address are the same.
								DataView DV = new DataView(Table);
								DV.RowStateFilter = DataViewRowState.Added | 
									DataViewRowState.ModifiedCurrent;
								DV.RowFilter = "ISNULL([" + FLD_REASSIGNED + "],FALSE) <> TRUE ";
								//Only do that when some field have not been reasigned
								if (DV.Count > 0)
								{
									string email_address = "";							

									if (!row.IsNull(EmailEntityTable.FLD_EMAIL_ADDRESS))
										email_address = row[EmailEntityTable.FLD_EMAIL_ADDRESS].ToString();
									int EmailID = Convert.ToInt32(row[EmailEntityTable.FLD_EMAIL_ID]);
							

									DV.RowFilter = "ISNULL(" + EmailEntityTable.FLD_EMAIL_ADDRESS  + ", '') = '" + email_address + "'"; 
								
									if (DV.Count > 0)
									{
										//Reassign the new PostalAddress ID						
										foreach(DataRowView dvRow in DV)
										{
											DataRow duplRow = dvRow.Row;
											if (!duplRow.IsNull(EmailEntityTable.FLD_EMAIL_ID))
											{
												if (Convert.ToInt32(duplRow[EmailEntityTable.FLD_EMAIL_ID]) == EmailID)
													dvRow[EmailEntityTable.FLD_EMAIL_ID] = EmailID;
											}
											else
												dvRow[EmailEntityTable.FLD_EMAIL_ID] = EmailID;

											//Flag to mark the reassignment
											dvRow[FLD_REASSIGNED] = true;
										}
									}
								}	
							}
						}
					}
				}
			}
			//Check for remaining deleted row 
			if (Table.GetChanges(DataRowState.Deleted) != null)
			{
				base.UpdateBatch((dataDef)Table.GetChanges(DataRowState.Deleted));
				IsSuccess = true;
			}
			//Remove our working column
			if (Table.Columns.Contains(FLD_REASSIGNED))
				Table.Columns.Remove(FLD_REASSIGNED);

			//
			// Return the result of the operation
			//            
			return IsSuccess;

			//return this.UpdateBatch(Table, addrDataAccess);			
		}
	
	}
}
