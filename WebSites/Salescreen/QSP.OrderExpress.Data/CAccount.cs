///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'CAccount'
// Generated by LLBLGen v1.2.1402.29234 Final on: Wednesday, November 12, 2003, 2:35:04 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace QSPForm.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'CAccount'.
	/// </summary>
	public class CAccount : DBInteractionBase
	{
		
		#region Parameter
			//Stored procedure parameter names
			public const string PARAM_PKID = "@iId";
			public const string TABLE_NAME = "CAccount";
			
			//
			// Stored procedure names for each operation
			private const string SQL_PROC_SELECT_ONE = "pr_CAccount_SelectOne";
			private const string SQL_PROC_SELECT_ALL = "pr_CAccount_SelectAll";		
		
		#endregion
		

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public CAccount()
		{
			// Nothing for now.
		}

		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iId</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		///		 <LI>iId</LI>
		///		 <LI>sName</LI>
		///		 <LI>sAddress1</LI>
		///		 <LI>sAddress2</LI>
		///		 <LI>sCity</LI>
		///		 <LI>sState</LI>
		///		 <LI>sZip</LI>
		///		 <LI>sZip4</LI>
		///		 <LI>sSponsor</LI>
		///		 <LI>sFMID</LI>
		///		 <LI>sFMRegion</LI>
		///		 <LI>daProgramStartDate</LI>
		///		 <LI>daProgramEndDate</LI>
		///		 <LI>sSchoolType</LI>
		///		 <LI>iNumberOfStudents</LI>
		///		 <LI>siNumberOfClassRooms</LI>
		///		 <LI>byProgramType</LI>		///		
		///		 <LI>byStatus</LI>
		///		 <LI>iFlagpoleInstance</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		
		public override DataTable SelectOne(int Account_ID)
		{
			DataTable Table = new DataTable(TABLE_NAME);
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ONE;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Account_ID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ERROR, SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, 0));

			Select(cmdToExecute,Table);
			
			return Table;
				
		}



		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			DataTable Table = new DataTable(TABLE_NAME);

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ALL;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
					
			Select(cmdToExecute,Table);
			return  Table;
			
		}

		public DataTable SelectAllWFMIDLogic(string FM_ID)
		{
			DataTable Table = new DataTable(TABLE_NAME);

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_CAccount_SelectAllWFMIDLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter("@sFMID", SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FM_ID));			
			
					
			Select(cmdToExecute,Table);
			
			return  Table;
			
		}

		public DataTable SelectAll_Search(string FM_ID, int SearchType, String Criteria)
		{
			DataTable Table = new DataTable(TABLE_NAME);

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_CAccount_SelectAll_Search";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter("@sFMID", SqlDbType.VarChar, 4, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, FM_ID));			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_TYPE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchType));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_CRITERIA, SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Criteria));
			
					
			Select(cmdToExecute,Table);
			
			return  Table;
			
		}

		
	}
}
