///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'credit_application'
// Generated by Jas on: Monday, November 03, 2003, 4:18:08 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using QSPForm.Common;
using QSPForm.Common.DataDef;
using dataDef = QSPForm.Common.DataDef.CreditApplicationTable;

namespace QSPForm.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'credit_application'.
	/// </summary>
	public class Credit_application : DBTableOperation 
	{
		
		//
		// Stored procedure parameter names
		// Paremater Name must match with the SP Called
		public const string PARAM_PKID				= "@icredit_application_id";
		public const string PARAM_TYPE_ID			= "@icredit_application_type_id";
		public const string PARAM_ACCOUNT_ID		= "@iaccount_id";
		public const string PARAM_CUSTOMER_ID		= "@icustomer_id";
		public const string PARAM_CREDIT_CARD_ID	= "@icredit_card_id";
		public const string PARAM_FORM_ID			= "@iform_id";
		public const string PARAM_OFFICER_NAME		= "@sofficer_name";	
		public const string PARAM_SOCIAL_SECURITY_NUMBER = "@ssocial_security_number";		
		public const string PARAM_CREDIT_LIMIT		="@mcredit_limit";
		public const string PARAM_POSTAL_ADDRESS_ID		= "@ipostal_address_id";
		public const string PARAM_PHONE_NUMBER_ID		= "@iphone_number_id";
		public const string PARAM_HOME_PHONE_NUMBER_ID		= "@ihome_phone_number_id";
		public const string PARAM_APPROVED		="@bapproved";
		public const string PARAM_APPROVE_CODE	= "@sapprove_code";	
		
		//
		// Stored procedure names for each operation
		public const String SQL_PROC_INSERT       = "pr_credit_application_Insert";
		public const String SQL_PROC_UPDATE       = "pr_credit_application_Update";
		public const String SQL_PROC_DELETE       = "pr_credit_application_Delete";
		public const String SQL_PROC_SELECT_ONE   = "pr_credit_application_SelectOne";
		public const String SQL_PROC_SELECT_ALL   = "pr_credit_application_SelectAll";
		
		//
		// DataSetCommand object
		//
		
		private SqlCommand insertCommand;
		private SqlCommand updateCommand;
		private SqlCommand deleteCommand;

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public Credit_application()
		{
		
		}
		protected override string TableName
		{
			get{return dataDef.TBL_CREDIT_APPLICATIONS;}
		}
		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand(SQL_PROC_INSERT);
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters;
            
				SqlParameterCollection sqlParams = insertCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_TYPE_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_ACCOUNT_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_CUSTOMER_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_CREDIT_CARD_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_FORM_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_OFFICER_NAME, SqlDbType.VarChar, 100));	
				sqlParams.Add(new SqlParameter(PARAM_SOCIAL_SECURITY_NUMBER, SqlDbType.VarChar, 50));	
				sqlParams.Add(new SqlParameter(PARAM_CREDIT_LIMIT, SqlDbType.Money));
				sqlParams.Add(new SqlParameter(PARAM_POSTAL_ADDRESS_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_PHONE_NUMBER_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_HOME_PHONE_NUMBER_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_APPROVED, SqlDbType.Bit));
				sqlParams.Add(new SqlParameter(PARAM_APPROVE_CODE, SqlDbType.VarChar, 50));
				
				sqlParams.Add(new SqlParameter(PARAM_CREATE_USER_ID, SqlDbType.Int));
				
				sqlParams[PARAM_PKID].Direction = ParameterDirection.Output;
				//
				// Define the parameter mappings from the data table in the
				// dataset.
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_TYPE_ID].SourceColumn = dataDef.FLD_TYPE_ID;
				sqlParams[PARAM_ACCOUNT_ID].SourceColumn = dataDef.FLD_ACCOUNT_ID;
				sqlParams[PARAM_CUSTOMER_ID].SourceColumn = dataDef.FLD_CUSTOMER_ID;
				sqlParams[PARAM_CREDIT_CARD_ID].SourceColumn = dataDef.FLD_CREDIT_CARD_ID;
				sqlParams[PARAM_FORM_ID].SourceColumn = dataDef.FLD_FORM_ID;
				sqlParams[PARAM_OFFICER_NAME].SourceColumn = dataDef.FLD_OFFICER_NAME;
				sqlParams[PARAM_SOCIAL_SECURITY_NUMBER].SourceColumn = dataDef.FLD_SOCIAL_SECURITY_NUMBER;
				sqlParams[PARAM_CREDIT_LIMIT].SourceColumn = dataDef.FLD_CREDIT_LIMIT;
				sqlParams[PARAM_POSTAL_ADDRESS_ID].SourceColumn = dataDef.FLD_POSTAL_ADDRESS_ID;
				sqlParams[PARAM_PHONE_NUMBER_ID].SourceColumn = dataDef.FLD_PHONE_NUMBER_ID;
				sqlParams[PARAM_HOME_PHONE_NUMBER_ID].SourceColumn = dataDef.FLD_HOME_PHONE_NUMBER_ID;
				sqlParams[PARAM_APPROVED].SourceColumn = dataDef.FLD_APPROVED;
				sqlParams[PARAM_APPROVE_CODE].SourceColumn = dataDef.FLD_APPROVE_CODE;

				sqlParams[PARAM_CREATE_USER_ID].SourceColumn = dataDef.FLD_CREATE_USER_ID;
				//Don't need to map ErrorCode cause is not imply in the insert
				//Only Mapped DataColumn are imply...
				
			}
            
			return insertCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand(SQL_PROC_UPDATE);
				updateCommand.CommandType = CommandType.StoredProcedure;
				            
				SqlParameterCollection sqlParams = updateCommand.Parameters;
            				

				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_TYPE_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_ACCOUNT_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_CUSTOMER_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_CREDIT_CARD_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_FORM_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_OFFICER_NAME, SqlDbType.VarChar, 100));	
				sqlParams.Add(new SqlParameter(PARAM_SOCIAL_SECURITY_NUMBER, SqlDbType.VarChar, 50));	
				sqlParams.Add(new SqlParameter(PARAM_CREDIT_LIMIT, SqlDbType.Money));
				sqlParams.Add(new SqlParameter(PARAM_POSTAL_ADDRESS_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_PHONE_NUMBER_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_HOME_PHONE_NUMBER_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_APPROVED, SqlDbType.Bit));
				sqlParams.Add(new SqlParameter(PARAM_APPROVE_CODE, SqlDbType.VarChar, 50));
				
				sqlParams.Add(new SqlParameter(PARAM_DELETED, SqlDbType.Bit));
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));
				//
				// Define the parameter mappings from the data table in the
				// dataset.
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_TYPE_ID].SourceColumn = dataDef.FLD_TYPE_ID;
				sqlParams[PARAM_ACCOUNT_ID].SourceColumn = dataDef.FLD_ACCOUNT_ID;
				sqlParams[PARAM_CUSTOMER_ID].SourceColumn = dataDef.FLD_CUSTOMER_ID;
				sqlParams[PARAM_CREDIT_CARD_ID].SourceColumn = dataDef.FLD_CREDIT_CARD_ID;
				sqlParams[PARAM_FORM_ID].SourceColumn = dataDef.FLD_FORM_ID;
				sqlParams[PARAM_OFFICER_NAME].SourceColumn = dataDef.FLD_OFFICER_NAME;
				sqlParams[PARAM_SOCIAL_SECURITY_NUMBER].SourceColumn = dataDef.FLD_SOCIAL_SECURITY_NUMBER;
				sqlParams[PARAM_CREDIT_LIMIT].SourceColumn = dataDef.FLD_CREDIT_LIMIT;
				sqlParams[PARAM_POSTAL_ADDRESS_ID].SourceColumn = dataDef.FLD_POSTAL_ADDRESS_ID;
				sqlParams[PARAM_PHONE_NUMBER_ID].SourceColumn = dataDef.FLD_PHONE_NUMBER_ID;
				sqlParams[PARAM_HOME_PHONE_NUMBER_ID].SourceColumn = dataDef.FLD_HOME_PHONE_NUMBER_ID;
				sqlParams[PARAM_APPROVED].SourceColumn = dataDef.FLD_APPROVED;
				sqlParams[PARAM_APPROVE_CODE].SourceColumn = dataDef.FLD_APPROVE_CODE;

				sqlParams[PARAM_DELETED].SourceColumn = dataDef.FLD_DELETED;
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;
				//Only Mapped DataColumn are imply...
			}
            
			return updateCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )    
			{  
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand(SQL_PROC_DELETE);
				deleteCommand.CommandType = CommandType.StoredProcedure;
				
            
				SqlParameterCollection sqlParams = deleteCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));
				
				//
				// Define the parameter mappings from the data tabl
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;
				//Only Mapped DataColumn are imply...
			}
            
			return deleteCommand;
		}
		
		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Campaign_id</LI>
		/// </UL> 
		/// </remarks>
		public new dataDef SelectOne(int ID)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ONE;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ID));
			
			dataDef toReturn = new dataDef();			
			Select(cmdToExecute,toReturn);
			return toReturn;
			
		}

		
		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public new dataDef SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ALL;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			dataDef toReturn = new dataDef();			

			Select(cmdToExecute,toReturn);
			return toReturn;
		}



		public dataDef SelectAllWaccount_id(int AccountID)
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "pr_credit_application_SelectAllWaccount_id";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ACCOUNT_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, AccountID));
			
			dataDef toReturn = new dataDef();	
			
			Select(cmdToExecute,toReturn);
			return toReturn;
			
		}
		
		public dataDef SelectAllWcustomer_idLogic(int CustomerID)
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "pr_credit_application_SelectAllWuser_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_CUSTOMER_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CustomerID));
			
			dataDef toReturn = new dataDef();	
			
			Select(cmdToExecute,toReturn);
			return toReturn;
			
		}
		public CreditApplicationData SelectAllDetail(int ID)
		{			
			//This method fill the All Data needed for an organization
			//into a predefined DataSet
			CreditApplicationData dts = new CreditApplicationData();
			try
			{				
				//Data Object Instanciation
				Data.Credit_card ccrdDataAccess = new Data.Credit_card();
				Data.Account accDataAccess = new Data.Account();
				Data.Postal_address_entity postDataAccess = new Data.Postal_address_entity();	
				Data.Phone_number_entity phoneDataAccess = new Data.Phone_number_entity();
				Data.Email_entity emailDataAccess = new Data.Email_entity();
				Data.Document_entity docDataAccess = new Data.Document_entity();
				Data.Credit_application crdAppDataAccess = new Data.Credit_application();
				Data.Entity_exception excDataAccess = new Data.Entity_exception();

				if (_mainConnectionProvider != null)
				{
					// Pass the created ConnectionProvider object to the data-access objects.
					ccrdDataAccess.MainConnectionProvider = _mainConnectionProvider;
					accDataAccess.MainConnectionProvider = _mainConnectionProvider;
					postDataAccess.MainConnectionProvider = _mainConnectionProvider;
					phoneDataAccess.MainConnectionProvider = _mainConnectionProvider;
					emailDataAccess.MainConnectionProvider = _mainConnectionProvider;
					docDataAccess.MainConnectionProvider = _mainConnectionProvider;
					excDataAccess.MainConnectionProvider = _mainConnectionProvider;

				}

				dts.Merge(SelectOne(ID));	
				if (dts.CreditApplication.Rows.Count >0)
				{	
					//Credit App Postal Address
					dts.Merge(postDataAccess.SelectWentity_idLogic(EntityType.TYPE_CREDIT_APPLICATION, ID));
					//Credit App Phone Number
					dts.Merge(phoneDataAccess.SelectWentity_idLogic(EntityType.TYPE_CREDIT_APPLICATION, ID));
					
					//Credit App Document
					dts.Merge(docDataAccess.SelectAllWentity_idLogic(ID, EntityType.TYPE_CREDIT_APPLICATION));					
					//Credit App Exception	
					dts.Merge(excDataAccess.SelectAllWentity_idLogic(ID, EntityType.TYPE_CREDIT_APPLICATION));

					int AccountID = Convert.ToInt32(dts.CreditApplication.Rows[0][dataDef.FLD_ACCOUNT_ID]);								
					//Account
					dts.Merge(accDataAccess.SelectOne(AccountID));
					//Account Postal Address				
					dts.Merge(postDataAccess.SelectWentity_idLogic(EntityType.TYPE_ACCOUNT, AccountID));
					//Account Phone Number				
					dts.Merge(phoneDataAccess.SelectWentity_idLogic(EntityType.TYPE_ACCOUNT, AccountID));
					
					//Credit Card
					dts.Merge(ccrdDataAccess.SelectAllWcredit_application_idLogic(ID));						
					if (dts.CreditCard.Rows.Count > 0)
					{
						int CreditCardID = Convert.ToInt32(dts.CreditCard.Rows[0][CreditCardTable.FLD_PKID]);
						//Postal Address
						dts.Merge(postDataAccess.SelectWentity_idLogic(EntityType.TYPE_CREDIT_CARD, CreditCardID));
						//Phone Number
						dts.Merge(phoneDataAccess.SelectWentity_idLogic(EntityType.TYPE_CREDIT_CARD, CreditCardID));
					}
				}
			}
			catch (Exception ex)
			{
				throw ex;
			}
			return dts;			
		
		}

		public CreditApplicationData SelectAllDetailByAccountID(int AccountID)
		{			
			//This method fill the All Data needed for an organization
			//into a predefined DataSet
			CreditApplicationData dts = new CreditApplicationData();
			try
			{				
				//Data Object Instanciation
				Data.Credit_card ccrdDataAccess = new Data.Credit_card();
				Data.Account accDataAccess = new Data.Account();
				Data.Postal_address_entity postDataAccess = new Data.Postal_address_entity();	
				Data.Phone_number_entity phoneDataAccess = new Data.Phone_number_entity();
				Data.Email_entity emailDataAccess = new Data.Email_entity();
				Data.Document_entity docDataAccess = new Data.Document_entity();
				Data.Credit_application crdAppDataAccess = new Data.Credit_application();
				Data.Entity_exception excDataAccess = new Data.Entity_exception();

				if (_mainConnectionProvider != null)
				{
					// Pass the created ConnectionProvider object to the data-access objects.
					ccrdDataAccess.MainConnectionProvider = _mainConnectionProvider;
					accDataAccess.MainConnectionProvider = _mainConnectionProvider;
					postDataAccess.MainConnectionProvider = _mainConnectionProvider;
					phoneDataAccess.MainConnectionProvider = _mainConnectionProvider;
					emailDataAccess.MainConnectionProvider = _mainConnectionProvider;
					docDataAccess.MainConnectionProvider = _mainConnectionProvider;
					excDataAccess.MainConnectionProvider = _mainConnectionProvider;

				}

				dts.Merge(SelectAllWaccount_id(AccountID));	
				if (dts.CreditApplication.Rows.Count >0)
				{	
					int ID = Convert.ToInt32(dts.CreditApplication.Rows[0][CreditApplicationTable.FLD_PKID]);
					//Credit App Postal Address
					dts.Merge(postDataAccess.SelectWentity_idLogic(EntityType.TYPE_CREDIT_APPLICATION, ID));
					//Credit App Phone Number
					dts.Merge(phoneDataAccess.SelectWentity_idLogic(EntityType.TYPE_CREDIT_APPLICATION, ID));
					
					//Credit App Document
					dts.Merge(docDataAccess.SelectAllWentity_idLogic(ID, EntityType.TYPE_CREDIT_APPLICATION));					
					//Credit App Exception	
					dts.Merge(excDataAccess.SelectAllWentity_idLogic(ID, EntityType.TYPE_CREDIT_APPLICATION));

					//Account
					dts.Merge(accDataAccess.SelectOne(AccountID));
					//Account Postal Address				
					dts.Merge(postDataAccess.SelectWentity_idLogic(EntityType.TYPE_ACCOUNT, AccountID));
					//Account Phone Number				
					dts.Merge(phoneDataAccess.SelectWentity_idLogic(EntityType.TYPE_ACCOUNT, AccountID));
					
					//Credit Card
					dts.Merge(ccrdDataAccess.SelectAllWcredit_application_idLogic(ID));						
					if (dts.CreditCard.Rows.Count > 0)
					{
						int CreditCardID = Convert.ToInt32(dts.CreditCard.Rows[0][CreditCardTable.FLD_PKID]);
						//Postal Address
						dts.Merge(postDataAccess.SelectWentity_idLogic(EntityType.TYPE_CREDIT_CARD, CreditCardID));
						//Phone Number
						dts.Merge(phoneDataAccess.SelectWentity_idLogic(EntityType.TYPE_CREDIT_CARD, CreditCardID));
					}
				}
			}
			catch (Exception ex)
			{
				throw ex;
			}
			return dts;			
		
		}
		
	}
}
