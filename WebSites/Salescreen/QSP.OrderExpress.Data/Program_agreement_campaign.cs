///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'program_agreement'
// Generated by Jas on: Monday, November 03, 2003, 4:18:07 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using QSPForm.Common.DataDef;
using QSPForm.Common;
using dataDef = QSPForm.Common.DataDef.ProgramAgreementCampaignTable;

namespace QSPForm.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'program_agreement'.
	/// </summary>
	public class ProgramAgreementCampaign : DBTableOperation
	{

		#region Parameter
		//Stored procedure parameter names
		public const string PARAM_PKID = "@iprogram_agreement_campaign_id";
        public const string PARAM_PROGRAM_AGREEMENT_ID = "@iprogram_agreement_id";
        public const string PARAM_CAMPAIGN_ID = "@icampaign_id";
		public const string PARAM_PROGRAM_ID ="@iprogram_id";
        public const string PARAM_ORDER_ID = "@iorder_id";
        
		//
		// Stored procedure names for each operation
		private const string SQL_PROC_DELETE = "pr_program_agreement_campaign_Delete";
        private const string SQL_PROC_INSERT = "pr_program_agreement_campaign_Insert";
        private const string SQL_PROC_UPDATE = "pr_program_agreement_campaign_Update";
        private const string SQL_PROC_SELECT_ONE = "pr_program_agreement_campaign_SelectOne";
        private const string SQL_PROC_SELECT_ALL = "pr_program_agreement_campaign_SelectAll";

		#endregion

		//
		// DataSetCommand object
		//
		
		private SqlCommand insertCommand;
		private SqlCommand updateCommand;
		private SqlCommand deleteCommand;

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public ProgramAgreementCampaign()
		{
			// Nothing for now.
		}

		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand(SQL_PROC_INSERT);
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
            
				SqlParameterCollection sqlParams = insertCommand.Parameters;

                sqlParams.Add(new SqlParameter(PARAM_PROGRAM_AGREEMENT_ID, SqlDbType.Int));
                sqlParams.Add(new SqlParameter(PARAM_CAMPAIGN_ID, SqlDbType.Int));
                sqlParams.Add(new SqlParameter(PARAM_PROGRAM_ID, SqlDbType.Int));
                sqlParams.Add(new SqlParameter(PARAM_ORDER_ID, SqlDbType.Int));
                sqlParams.Add(new SqlParameter(PARAM_CREATE_USER_ID, SqlDbType.Int));
							
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
								
				sqlParams[PARAM_PKID].Direction = ParameterDirection.Output;				
				//
				// Define the parameter mappings from the data table in the
				// dataset.
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
                sqlParams[PARAM_PROGRAM_AGREEMENT_ID].SourceColumn = dataDef.FLD_PROGRAM_AGREEMENT_ID;
                sqlParams[PARAM_CAMPAIGN_ID].SourceColumn = dataDef.FLD_CAMPAIGN_ID;
                sqlParams[PARAM_PROGRAM_ID].SourceColumn = dataDef.FLD_PROGRAM_ID;
                sqlParams[PARAM_ORDER_ID].SourceColumn = dataDef.FLD_ORDER_ID;   
				sqlParams[PARAM_CREATE_USER_ID].SourceColumn = dataDef.FLD_CREATE_USER_ID;						
				
				//Don't need to map ErrorCode cause is not imply in the insert
				//Only Mapped DataColumn are imply...
			}
            
			return insertCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand(SQL_PROC_UPDATE);
				updateCommand.CommandType = CommandType.StoredProcedure;
				
            
				SqlParameterCollection sqlParams = updateCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
                sqlParams.Add(new SqlParameter(PARAM_PROGRAM_AGREEMENT_ID, SqlDbType.Int));
                sqlParams.Add(new SqlParameter(PARAM_CAMPAIGN_ID, SqlDbType.Int));
                sqlParams.Add(new SqlParameter(PARAM_PROGRAM_ID, SqlDbType.Int));
                sqlParams.Add(new SqlParameter(PARAM_ORDER_ID, SqlDbType.Int));
                sqlParams.Add(new SqlParameter(PARAM_DELETED, SqlDbType.Bit));
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));	

				// Define the parameter mappings from the data tabl
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
                sqlParams[PARAM_PROGRAM_AGREEMENT_ID].SourceColumn = dataDef.FLD_PROGRAM_AGREEMENT_ID;
                sqlParams[PARAM_CAMPAIGN_ID].SourceColumn = dataDef.FLD_CAMPAIGN_ID;
                sqlParams[PARAM_PROGRAM_ID].SourceColumn = dataDef.FLD_PROGRAM_ID;
                sqlParams[PARAM_ORDER_ID].SourceColumn = dataDef.FLD_ORDER_ID;
                sqlParams[PARAM_DELETED].SourceColumn = dataDef.FLD_DELETED;				
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;				
				//Don't need to map ErrorCode cause is not imply in the insert
				//Only Mapped DataColumn are imply...
			}
            
			return updateCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand(SQL_PROC_DELETE);
				deleteCommand.CommandType = CommandType.StoredProcedure;
				
				SqlParameterCollection sqlParams = deleteCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));
				//
				// Define the parameter mappings from the data tabl
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;	
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;
				//Only Mapped DataColumn are imply...
			}
            
			return deleteCommand;
		}

		protected override string TableName
		{
			get{return dataDef.TBL_PROGRAM_AGREEMENT_CAMPAIGN;}
		}
		
		//We create a new method when we want to the return type variable
		public new dataDef SelectOne(int ProgramAgreementCampaignID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ONE;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ProgramAgreementCampaignID));
			
			Select(cmdToExecute,Table);

			return Table;
				
		}

		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ALL;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
					
			Select(cmdToExecute,Table);
			return  Table;
			
		}

        
        public dataDef SelectAllWprogram_agreement_idLogic(int ProgramAgreementID)
        {
            dataDef Table = new dataDef();

            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.pr_program_agreement_campaign_SelectAllWprogram_agreement_idLogic";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PROGRAM_AGREEMENT_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ProgramAgreementID));

            Select(cmdToExecute, Table);

            return Table;

        }

        
	
	}
}
