///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'CCA'
// Generated by LLBLGen v1.2.1402.29234 Final on: Wednesday, November 12, 2003, 2:35:14 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using dataDef = QSPForm.Common.DataDef.WarehouseBusinessCalendarTable;

namespace QSPForm.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Form'.
	/// </summary>
	public class Warehouse_business_calendar : DBTableOperation
	{

		#region Parameter
		//Stored procedure parameter names
		public const string TABLE_NAME = "warehouse_business_calendar";
		public const string PARAM_WAREHOUSE_ID = "@iwarehouse_id";
		public const string PARAM_BUSINESS_DATE = "@dabusiness_date";
		public const string PARAM_IS_CLOSED = "@bclosed";
		//
		// Stored procedure names for each operation
		private const string SQL_PROC_DELETE = "pr_warehouse_business_calendar_Delete";
		private const string SQL_PROC_INSERT = "pr_warehouse_business_calendar_Insert";
		private const string SQL_PROC_UPDATE = "pr_warehouse_business_calendar_Update";
		private const string SQL_PROC_SELECT_ONE = "pr_warehouse_business_calendar_SelectOne";
		private const string SQL_PROC_SELECT_ALL = "pr_warehouse_business_calendar_SelectAll";		
		
		#endregion	
		

		//
		// DataSetCommand object
		//
		
		private SqlCommand insertCommand;
		private SqlCommand updateCommand;
		private SqlCommand deleteCommand;

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public Warehouse_business_calendar()
		{
			// Nothing for now.
		}

		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand(SQL_PROC_INSERT);
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
            
				SqlParameterCollection sqlParams = insertCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_WAREHOUSE_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_BUSINESS_DATE, SqlDbType.DateTime));				
				sqlParams.Add(new SqlParameter(PARAM_IS_CLOSED, SqlDbType.Bit));				
				
				//
				// Define the parameter mappings from the data table in the
				// dataset.
				//
				sqlParams[PARAM_WAREHOUSE_ID].SourceColumn = dataDef.FLD_WAREHOUSE_ID;	
				sqlParams[PARAM_BUSINESS_DATE].SourceColumn = dataDef.FLD_BUSINESS_DATE;
				sqlParams[PARAM_IS_CLOSED].SourceColumn = dataDef.FLD_IS_CLOSED;
								
				//Don't need to map ErrorCode cause is not imply in the insert
				//Only Mapped DataColumn are imply...
			}
            
			return insertCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand(SQL_PROC_UPDATE);
				updateCommand.CommandType = CommandType.StoredProcedure;
				
            
				SqlParameterCollection sqlParams = updateCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_WAREHOUSE_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_BUSINESS_DATE, SqlDbType.DateTime));
				sqlParams.Add(new SqlParameter(PARAM_IS_CLOSED, SqlDbType.Bit));				
				
				//
				// Define the parameter mappings from the data table in the
				// dataset.
				//
				sqlParams[PARAM_WAREHOUSE_ID].SourceColumn = dataDef.FLD_WAREHOUSE_ID;	
				sqlParams[PARAM_BUSINESS_DATE].SourceColumn = dataDef.FLD_BUSINESS_DATE;
				sqlParams[PARAM_IS_CLOSED].SourceColumn = dataDef.FLD_IS_CLOSED;
				
				//Don't need to map ErrorCode cause is not imply in the Update
				//Only Mapped DataColumn are imply...
			}
            
			return updateCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand(SQL_PROC_DELETE);
				deleteCommand.CommandType = CommandType.StoredProcedure;
				
				SqlParameterCollection sqlParams = deleteCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_WAREHOUSE_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_BUSINESS_DATE, SqlDbType.DateTime));
				//
				// Define the parameter mappings from the data tabl
				//
				sqlParams[PARAM_WAREHOUSE_ID].SourceColumn = dataDef.FLD_WAREHOUSE_ID;	
				sqlParams[PARAM_BUSINESS_DATE].SourceColumn = dataDef.FLD_BUSINESS_DATE;
				//Only Mapped DataColumn are imply...
			}
            
			return deleteCommand;
		}

		protected override string TableName
		{
			get{return dataDef.TBL_WAREHOUSE_BUSINESS_CALENDAR;}
		}

		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iInstance</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		///		 <LI>iInstance</LI>
		///		 <LI>daStartDate</LI>
		///		 <LI>daEndDate</LI>
		///		 <LI>iAccountInstance</LI>
		///		 <LI>iNumberInGroup</LI>
		///		 <LI>iNumberOfRooms</LI>
		///		 <LI>iNumberOfStudents</LI>		
		///		 <LI>sFMID</LI>		
		///		 <LI>iCAFiscal</LI>
		///		 <LI>bCampaignComplete</LI>
		
		/// </UL>
		/// Will fill all properties corresponding with a business_calendar in the table with the value of the row selected.
		/// </remarks>
		
		public dataDef SelectOne(int WarehouseID, DateTime bizDate)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ONE;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_WAREHOUSE_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, WarehouseID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_BUSINESS_DATE, SqlDbType.DateTime, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, bizDate));
			
			Select(cmdToExecute,Table);
			
			return Table;
				
		}

		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		/// </UL>
		/// </remarks>
		public new dataDef SelectAll()
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ALL;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
					
			Select(cmdToExecute,Table);
			//AssignInnerProperty(Table);
			return  Table;
			
		}	
	

		public dataDef SelectAllWwarehouse_idLogic(int WarehouseID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_warehouse_business_calendar_SelectAllWwarehouse_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_WAREHOUSE_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, WarehouseID));
			
			Select(cmdToExecute,Table);
			
			return Table;
				
		}

	}
}
