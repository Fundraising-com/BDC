///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'CMDRSchool'
// Based on code originally generated by LLBLGen v1.2.1402.29234 Final .
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using tableRef = QSPForm.Common.DataDef.CMDRTable;

namespace QSPForm.Data
{
	///<summary>Data Access class for the table 'CMDRSchool'.</summary>
	public class CMDRSchool : DBInteractionBase
	{

		//Stored procedure parameter names
		public const string PARAM_PKID = "@cPID";
		public const string PARAM_SCHOOLNAME = "@sSchoolName";
		public const string PARAM_ORGANIZATION_TYPE_ID = "@iorganization_type_id";
		public const string PARAM_STATE_CODE = "@sstate_code";
		//
		// Stored procedure names for each operation
		private const string SQL_PROC_SELECT_ONE = "dbo.pr_CMDRSchool_SelectOne";
		private const string SQL_PROC_SELECT_ALL = "dbo.pr_CMDRSchool_SelectAll";
		private const string SQL_PROC_SELECT_ALL_WSCHOOLNAME = "dbo.pr_CMDRSchool_SelectAllWSchoolNameLogic";
		private const string SQL_PROC_SELECT_ALL_SCHOOLSEARCH = "dbo.pr_CMDRSchool_SelectAllSchool_Search";
		private const string SQL_PROC_SELECT_ALL_SEARCH = "dbo.pr_CMDRSchool_SelectAll_Search";


		#region Constructors
		///<summary>default constructor</summary>
		public CMDRSchool()
		{
			// Nothing for now.
		}
		#endregion Constructors

		#region Methods
		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iInstance</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		///		 <LI>sUserName</LI>
		///		 <LI>sPassword</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public tableRef SelectOne(string cPID)
		{
			tableRef Table = new tableRef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ONE;
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			byte bytePrecision = 10;
			byte byteScale = 0;
			cmdToExecute.Parameters.Add(new SqlParameter(
				PARAM_PKID
				, SqlDbType.Char
				, 8
				, ParameterDirection.Input
				, false
				, bytePrecision
				, byteScale
				, ""
				, DataRowVersion.Proposed
				, cPID)
			);

			Select(cmdToExecute,Table);
			//AssignInnerProperty(Table);

			return Table;
		}

		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		/// </UL>
		/// </remarks>
		public new tableRef SelectAll()
		{
			tableRef Table = new tableRef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ALL;
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			Select(cmdToExecute,Table);
			//AssignInnerProperty(Table);
			return  Table;

		}

		public tableRef SelectAllWSchoolNameLogic(string SchoolName)
		{
			tableRef Table = new tableRef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ALL_WSCHOOLNAME;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			byte bytePrecision = 10;
			byte byteScale = 0;
			cmdToExecute.Parameters.Add(new SqlParameter(
				PARAM_SCHOOLNAME
				, SqlDbType.VarChar
				, 20
				, ParameterDirection.Input
				, false
				, bytePrecision
				, byteScale
				, ""
				, DataRowVersion.Proposed
				, SchoolName)
				);

			Select(cmdToExecute,Table);
			//AssignInnerProperty(Table);
			return  Table;

		}

		public tableRef SelectAll_Search(int SearchType, string Criteria, int OrgTypeID, string StateCode)
		{
			tableRef Table = new tableRef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ALL_SEARCH;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_TYPE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchType));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_CRITERIA, SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Criteria));
			if (OrgTypeID > 0)
				cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ORGANIZATION_TYPE_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, OrgTypeID));
			StateCode = StateCode.Replace("US-","").Trim();
			if (StateCode.Length > 0)
				cmdToExecute.Parameters.Add(new SqlParameter(PARAM_STATE_CODE, SqlDbType.VarChar, 5, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, StateCode));

			Select(cmdToExecute,Table);

			return Table;
		}
		#endregion Methods

	}
}
