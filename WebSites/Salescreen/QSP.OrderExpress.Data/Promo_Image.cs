///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'product'
// Generated by Jas on: Monday, November 03, 2003, 4:18:07 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using QSPForm.Common.DataDef;
using dataDef = QSPForm.Common.DataDef.Promo_ImageTable;

namespace QSPForm.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'product'.
	/// </summary>
	public class Promo_Image : DBTableOperation
	{

		#region Parameter
		//Stored procedure parameter names
		public const string PARAM_PKID = "@iid";
		public const string PARAM_PROMOTION_ID = "@ipromotion_id";
		public const string PARAM_FORMAT_ID = "@iformat_id";
        public const string PARAM_FILE_EXTENSION = "@sfile_extension";
        //public const string PARAM_DELETED = "@bdeleted";
        
		
		// Stored procedure names for each operation
		private const string SQL_PROC_INSERT = "pr_QSPForm_promo_image_Insert";
		private const string SQL_PROC_UPDATE = "pr_QSPForm_promo_image_Update";	
		private const string SQL_PROC_DELETE = "pr_QSPForm_promo_image_Delete";
		private const string SQL_PROC_SELECT_ONE = "pr_QSPForm_promo_image_SelectOne";
        private const string SQL_PROC_SELECT_ONE_FORMAT = "pr_QSPForm_promo_image_SelectOneWithFormat";
		private const string SQL_PROC_SELECT_ALL = "pr_QSPForm_promo_image_SelectAll";

		#endregion

		//
		// DataSetCommand object
		//
		
		private SqlCommand insertCommand;
		private SqlCommand updateCommand;
		private SqlCommand deleteCommand;

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public Promo_Image()
		{
			// Nothing for now.
		}

		//-----------------------
		// Set Mapping and Params in 2 differents method
		//-----------------------

		private void FillParams(SqlParameterCollection param)
		{
			param.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
			param.Add(new SqlParameter(PARAM_PROMOTION_ID, SqlDbType.Int));
            param.Add(new SqlParameter(PARAM_FORMAT_ID, SqlDbType.Int));
			param.Add(new SqlParameter(PARAM_FILE_EXTENSION,SqlDbType.VarChar, 4));
			param.Add(new SqlParameter(PARAM_DELETED, SqlDbType.Bit));
		}

		private void MapColumn(SqlParameterCollection param)
		{
			param[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
            param[PARAM_PROMOTION_ID].SourceColumn = dataDef.FLD_PROMOTION_ID;
            param[PARAM_FORMAT_ID].SourceColumn = dataDef.FLD_FORMAT_ID;
			param[PARAM_FILE_EXTENSION].SourceColumn = dataDef.FLD_FILE_EXTENSION;
            param[PARAM_DELETED].SourceColumn = dataDef.FLD_DELETED;
		}

		protected override string TableName
		{
			get{return dataDef.TBL_PROMO;}
		}

		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand(SQL_PROC_INSERT);
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
            
				SqlParameterCollection sqlParams = insertCommand.Parameters;
            
				//Fill the SqlParameterCollection
				FillParams(sqlParams);				
								
				//Adjust paramters direction
				sqlParams[PARAM_PKID].Direction = ParameterDirection.Output;				
				
				//Map the source column
				MapColumn(sqlParams);	


				//Adjust for insert context
				sqlParams.Add(new SqlParameter(PARAM_CREATE_USER_ID, SqlDbType.Int));
				sqlParams[PARAM_CREATE_USER_ID].SourceColumn = dataDef.FLD_CREATE_USER_ID;

			}
            
			return insertCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				
				updateCommand = new SqlCommand(SQL_PROC_UPDATE);
				updateCommand.CommandType = CommandType.StoredProcedure;
				
            
				SqlParameterCollection sqlParams = updateCommand.Parameters;
            
				//Fill the SqlParameterCollection
				FillParams(sqlParams);

				//Map the source column
				MapColumn(sqlParams);

				

				//Adjust for update context
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;

				sqlParams.Add(new SqlParameter(PARAM_DELETED, SqlDbType.Bit));
				sqlParams[PARAM_DELETED].SourceColumn = dataDef.FLD_DELETED;

			}
            
			return updateCommand;
		}
		

		
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand(SQL_PROC_DELETE);
				deleteCommand.CommandType = CommandType.StoredProcedure;
				
				SqlParameterCollection sqlParams = deleteCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));
				//
				// Define the parameter mappings from the data tabl
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;	
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;
				//Only Mapped DataColumn are imply...
			}
            
			return deleteCommand;
		}

        public new dataDef SelectOne(int PromoID, int FormatID)
        {
            dataDef Table = new dataDef();
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = SQL_PROC_SELECT_ONE_FORMAT;
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PROMOTION_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, PromoID));
            cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FORMAT_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FormatID));
            Select(cmdToExecute, Table);
            return Table;
            //return SelectOne(PromoID, 1);
        }

        public new dataDef SelectAllByOrderID(int OrderID, int FormatID)
        {
            dataDef Table = new dataDef();
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.AV_SelectAllPromoImageByOrderID";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            cmdToExecute.Parameters.Add(new SqlParameter("@iorder_id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, OrderID));
            cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FORMAT_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FormatID));
            Select(cmdToExecute, Table);
            return Table;

        }

		
        #region old stuff
        /*

        public dataDef SelectAll_Search(int SearchType, String Criteria, string Subdivision, int NationalStatus, int DisplayStatus, DateTime StartDate, DateTime EndDate, string FM_ID, bool IncludeFMReportedTo)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_QSPForm_Promo_SelectAll_Search2";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_TYPE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchType));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_CRITERIA, SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Criteria));
			
			if (FM_ID.Length > 0)
				cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FSM_ID, SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FM_ID));
			if(Subdivision != String.Empty)
				cmdToExecute.Parameters.Add(new SqlParameter("@zsubdivision", SqlDbType.VarChar,10,ParameterDirection.Input,false,10,0,"",DataRowVersion.Proposed, Subdivision));
			if(NationalStatus > -1)
				cmdToExecute.Parameters.Add(new SqlParameter("@bIsNational", SqlDbType.Bit,1,ParameterDirection.Input,false,10,0,"",DataRowVersion.Proposed, (NationalStatus == 1)));
			if (DisplayStatus > -1)
				cmdToExecute.Parameters.Add(new SqlParameter("@benabled", SqlDbType.Bit, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (DisplayStatus == 1)));
			
			//Mandatory
			cmdToExecute.Parameters.Add(new SqlParameter("@dastart_date", SqlDbType.DateTime, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, StartDate));
			cmdToExecute.Parameters.Add(new SqlParameter("@daend_date", SqlDbType.DateTime, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, EndDate));
			
			cmdToExecute.Parameters.Add(new SqlParameter("@ball_fm_report_to", SqlDbType.Bit, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, IncludeFMReportedTo));
			
			
			Select(cmdToExecute,Table);

			return Table;
        }

        public dataDef SelectAll_Search(string Criteria, string FSM_ID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_QSPForm_promo_SelectAll_Search";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FSM_ID, SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FSM_ID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_CRITERIA, SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Criteria));
			Select(cmdToExecute,Table);
			return Table;
		}
		public new dataDef SelectAll()
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ALL;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			Select(cmdToExecute,Table);
			return Table;
		}
		public new dataDef SelectOne(int PromoID)
		{
            dataDef Table = new dataDef();
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = SQL_PROC_SELECT_ONE;
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, PromoID));
            Select(cmdToExecute, Table);
            return Table;
            //return SelectOne(PromoID, 1);
		}
        //public new dataDef SelectOne(int PromoID, int FormatID)
        //{
        //    dataDef Table = new dataDef();
        //    SqlCommand cmdToExecute = new SqlCommand();
        //    cmdToExecute.CommandText = "pr_QSPForm_promo_SelectOneWithFormat";
        //    cmdToExecute.CommandType = CommandType.StoredProcedure;
        //    cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, PromoID));
        //    cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FORMAT, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FormatID));
        //    Select(cmdToExecute, Table);
        //    return Table;
        //}
		public dataDef SelectAllPromoURLByOrderID(int OrderID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.AV_SelectAllPromoByOrderID";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iorder_id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, OrderID));
			Select(cmdToExecute,Table);
			return Table;
		}
		public dataDef SelectAllWpromo_coupon_idLogic(int PromoCouponID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_QSPForm_promo_SelectAllWpromo_coupon_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PROMO_COUPON_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, PromoCouponID));
			Select(cmdToExecute,Table);
			return Table;
		}
         * */
        #endregion


    }
}
