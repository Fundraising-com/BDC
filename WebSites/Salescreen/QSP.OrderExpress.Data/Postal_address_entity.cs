///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'PostalAddress'
// Generated by Jas on: Monday, November 03, 2003, 4:18:07 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using QSPForm.Common.DataDef;
using dataDef = QSPForm.Common.DataDef.PostalAddressEntityTable;

namespace QSPForm.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'PostalAddressOrganization'.
	/// </summary>
	public class Postal_address_entity : DBTableOperation
	{


		//Stored procedure parameter names
		public const string PARAM_PKID = "@ipostal_address_entity_id";
		public const string PARAM_ADDRESS_ID ="@ipostal_address_id";
		public const string PARAM_ENTITY_TYPE_ID ="@ientity_type_id";	
		public const string PARAM_ENTITY_ID ="@ientity_id";	
		public const string PARAM_TYPE ="@ipostal_address_type_id";

		public const string PARAM_NAME = "@sname";
		public const string PARAM_FIRST_NAME = "@sfirst_name";
		public const string PARAM_LAST_NAME = "@slast_name";
		public const string PARAM_ADDRESS1 ="@saddress1";	
		public const string PARAM_ADDRESS2 ="@saddress2";
		public const string PARAM_CITY ="@scity";	
		public const string PARAM_COUNTY ="@scounty";	
		public const string PARAM_ZIP ="@szip";		
		public const string PARAM_SUBDIVISION_CODE ="@ssubdivision_code";
		public const string PARAM_RESIDENTIAL_AREA ="@bresidential_area";

		
		//
		// Stored procedure names for each operation
		private const string SQL_PROC_DELETE = "pr_postal_address_entity_Delete";
		private const string SQL_PROC_INSERT = "pr_postal_address_entity_Insert";
		private const string SQL_PROC_UPDATE = "pr_postal_address_entity_Update";	
		private const string SQL_PROC_SELECT_ONE = "pr_postal_address_entity_SelectOne";
        private const string SQL_PROC_SELECT_ONE_LOGIC = "pr_postal_address_SelectOne";
		private const string SQL_PROC_SELECT_ALL = "pr_postal_address_entity_SelectAll";

		public const String FLD_REASSIGNED = "reassigned";


		//
		// DataSetCommand object
		//
		
		private SqlCommand insertCommand;
		private SqlCommand updateCommand;
		private SqlCommand deleteCommand;

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public Postal_address_entity()
		{
			// Nothing for now.
		}

		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand(SQL_PROC_INSERT);
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
            
				SqlParameterCollection sqlParams = insertCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_ENTITY_TYPE_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_ENTITY_ID, SqlDbType.Int));				
				sqlParams.Add(new SqlParameter(PARAM_TYPE, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_ADDRESS_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_NAME, SqlDbType.VarChar, 100));
				sqlParams.Add(new SqlParameter(PARAM_FIRST_NAME, SqlDbType.VarChar, 50));
				sqlParams.Add(new SqlParameter(PARAM_LAST_NAME, SqlDbType.VarChar, 50));
				sqlParams.Add(new SqlParameter(PARAM_ADDRESS1, SqlDbType.VarChar, 50));				
				sqlParams.Add(new SqlParameter(PARAM_ADDRESS2, SqlDbType.VarChar, 50));				
				sqlParams.Add(new SqlParameter(PARAM_CITY, SqlDbType.VarChar, 50));	
				sqlParams.Add(new SqlParameter(PARAM_COUNTY, SqlDbType.VarChar, 50));	
				sqlParams.Add(new SqlParameter(PARAM_ZIP, SqlDbType.VarChar, 50));
				sqlParams.Add(new SqlParameter(PARAM_SUBDIVISION_CODE, SqlDbType.NVarChar, 7));				
				sqlParams.Add(new SqlParameter(PARAM_RESIDENTIAL_AREA, SqlDbType.Bit));

				sqlParams.Add(new SqlParameter(PARAM_CREATE_USER_ID, SqlDbType.Int));
							
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
								
				sqlParams[PARAM_PKID].Direction = ParameterDirection.Output;	
				sqlParams[PARAM_ADDRESS_ID].Direction = ParameterDirection.InputOutput;
				//
				// Define the parameter mappings from the data table in the
				// dataset.
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_ENTITY_ID].SourceColumn = dataDef.FLD_ENTITY_ID;
				sqlParams[PARAM_ENTITY_TYPE_ID].SourceColumn = dataDef.FLD_ENTITY_TYPE_ID;
				sqlParams[PARAM_TYPE].SourceColumn = dataDef.FLD_TYPE;
				sqlParams[PARAM_ADDRESS_ID].SourceColumn = dataDef.FLD_ADDRESS_ID;
				sqlParams[PARAM_NAME].SourceColumn = dataDef.FLD_NAME;
				sqlParams[PARAM_FIRST_NAME].SourceColumn = dataDef.FLD_FIRST_NAME;
				sqlParams[PARAM_LAST_NAME].SourceColumn = dataDef.FLD_LAST_NAME;
				sqlParams[PARAM_ADDRESS1].SourceColumn = dataDef.FLD_ADDRESS1;
				sqlParams[PARAM_ADDRESS2].SourceColumn = dataDef.FLD_ADDRESS2;
				sqlParams[PARAM_CITY].SourceColumn = dataDef.FLD_CITY; 
				sqlParams[PARAM_COUNTY].SourceColumn = dataDef.FLD_COUNTY; 
				sqlParams[PARAM_ZIP].SourceColumn = dataDef.FLD_ZIP;					
				sqlParams[PARAM_SUBDIVISION_CODE].SourceColumn = dataDef.FLD_SUBDIVISION_CODE;				
				sqlParams[PARAM_RESIDENTIAL_AREA].SourceColumn = dataDef.FLD_RESIDENTIAL_AREA;
				
				sqlParams[PARAM_CREATE_USER_ID].SourceColumn = dataDef.FLD_CREATE_USER_ID;						
				
				//Don't need to map ErrorCode cause is not imply in the insert
				//Only Mapped DataColumn are imply...
			}
            
			return insertCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand(SQL_PROC_UPDATE);
				updateCommand.CommandType = CommandType.StoredProcedure;
				
            
				SqlParameterCollection sqlParams = updateCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_ENTITY_TYPE_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_ENTITY_ID, SqlDbType.Int));				
				sqlParams.Add(new SqlParameter(PARAM_TYPE, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_ADDRESS_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_NAME, SqlDbType.VarChar, 100));
				sqlParams.Add(new SqlParameter(PARAM_FIRST_NAME, SqlDbType.VarChar, 50));
				sqlParams.Add(new SqlParameter(PARAM_LAST_NAME, SqlDbType.VarChar, 50));
				sqlParams.Add(new SqlParameter(PARAM_ADDRESS1, SqlDbType.VarChar, 50));				
				sqlParams.Add(new SqlParameter(PARAM_ADDRESS2, SqlDbType.VarChar, 50));				
				sqlParams.Add(new SqlParameter(PARAM_CITY, SqlDbType.VarChar, 50));	
				sqlParams.Add(new SqlParameter(PARAM_COUNTY, SqlDbType.VarChar, 50));
				sqlParams.Add(new SqlParameter(PARAM_ZIP, SqlDbType.VarChar, 50));
				sqlParams.Add(new SqlParameter(PARAM_SUBDIVISION_CODE, SqlDbType.NVarChar, 7));	
				sqlParams.Add(new SqlParameter(PARAM_RESIDENTIAL_AREA, SqlDbType.Bit));			
				
				sqlParams.Add(new SqlParameter(PARAM_DELETED, SqlDbType.Bit));
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));	

				sqlParams[PARAM_PKID].Direction = ParameterDirection.InputOutput;	
				sqlParams[PARAM_ADDRESS_ID].Direction = ParameterDirection.InputOutput;

				// Define the parameter mappings from the data tabl
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_ENTITY_ID].SourceColumn = dataDef.FLD_ENTITY_ID;
				sqlParams[PARAM_ENTITY_TYPE_ID].SourceColumn = dataDef.FLD_ENTITY_TYPE_ID;	
				sqlParams[PARAM_TYPE].SourceColumn = dataDef.FLD_TYPE;
				sqlParams[PARAM_ADDRESS_ID].SourceColumn = dataDef.FLD_ADDRESS_ID;
				sqlParams[PARAM_NAME].SourceColumn = dataDef.FLD_NAME;
				sqlParams[PARAM_FIRST_NAME].SourceColumn = dataDef.FLD_FIRST_NAME;
				sqlParams[PARAM_LAST_NAME].SourceColumn = dataDef.FLD_LAST_NAME;
				sqlParams[PARAM_ADDRESS1].SourceColumn = dataDef.FLD_ADDRESS1;
				sqlParams[PARAM_ADDRESS2].SourceColumn = dataDef.FLD_ADDRESS2;
				sqlParams[PARAM_CITY].SourceColumn = dataDef.FLD_CITY; 
				sqlParams[PARAM_COUNTY].SourceColumn = dataDef.FLD_COUNTY; 
				sqlParams[PARAM_ZIP].SourceColumn = dataDef.FLD_ZIP;	
				sqlParams[PARAM_SUBDIVISION_CODE].SourceColumn = dataDef.FLD_SUBDIVISION_CODE;				
				sqlParams[PARAM_RESIDENTIAL_AREA].SourceColumn = dataDef.FLD_RESIDENTIAL_AREA;
				
				sqlParams[PARAM_DELETED].SourceColumn = dataDef.FLD_DELETED;				
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;				
				//Don't need to map ErrorCode cause is not imply in the insert
				//Only Mapped DataColumn are imply...
			}
            
			return updateCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand(SQL_PROC_DELETE);
				deleteCommand.CommandType = CommandType.StoredProcedure;
				
				SqlParameterCollection sqlParams = deleteCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_ENTITY_TYPE_ID, SqlDbType.Int));					
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));
				//
				// Define the parameter mappings from the data tabl
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;	
				sqlParams[PARAM_ENTITY_TYPE_ID].SourceColumn = dataDef.FLD_ENTITY_TYPE_ID;	
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;
				//Only Mapped DataColumn are imply...
			}
            
			return deleteCommand;
		}

		protected override string TableName
		{
			get{return dataDef.TBL_POSTAL_ADDRESS_ENTITY;}
		}
		
		//We create a new method when we want to the return type variable
		public dataDef SelectOne(int EntityTypeID, int AddressEntityID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ONE;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, AddressEntityID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ENTITY_TYPE_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, EntityTypeID));
			
			Select(cmdToExecute,Table);

			return Table;
				
		}
        public dataDef SelectOne(int AddressEntityID)
        {
            dataDef Table = new dataDef();
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = SQL_PROC_SELECT_ONE_LOGIC;
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ADDRESS_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, AddressEntityID));
            Select(cmdToExecute, Table);
            return Table;
        }


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public dataDef SelectAll(int EntityTypeID)
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ALL;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ENTITY_TYPE_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, EntityTypeID));
			
					
			Select(cmdToExecute,Table);
			return  Table;
			
		}

		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public dataDef SelectWentity_idLogic(int EntityTypeID, int EntityID)
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_postal_address_entity_SelectAllWentity_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ENTITY_TYPE_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, EntityTypeID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ENTITY_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, EntityID));
								
			Select(cmdToExecute,Table);
			return  Table;
			
		}
		
		public bool UpdateBatch(dataDef Table)
		{
			//We call a method from the inherit class, but the
			//validation with the overriden Validate Method 
			//is in the current class	
			bool IsSuccess = false;
			//Add a column to flag if the operation of reassignment have been done
			//Add our working column in the current table
			if (!Table.Columns.Contains(FLD_REASSIGNED))
				Table.Columns.Add(FLD_REASSIGNED, typeof(System.Boolean)).DefaultValue = false;
			
			
			foreach (DataRow row in Table.Rows)
			{
				//We don't treat the deleted row now, just at the end
				//cause that will change the colletion of rows during a loop
				if (row.RowState != DataRowState.Unchanged && row.RowState != DataRowState.Deleted)
				{
					DataRow[] dataRows = {row};
					IsSuccess = (this.UpdateBatch(dataRows) > 0);					
					if (!IsSuccess)
						break;
					else
					{
						
						//Reassignment process
						//Only propagade a row that have not been part of the reassignment process
						bool reassigned = false;
						if (!row.IsNull(FLD_REASSIGNED))
							reassigned = Convert.ToBoolean(row[FLD_REASSIGNED]);
						if (!reassigned)
						{
							//Reassignment of Postal_Address_id when address are the same.
							DataView DV = new DataView(Table);
							DV.RowStateFilter = DataViewRowState.Added | 
								DataViewRowState.ModifiedCurrent;
							DV.RowFilter = "ISNULL([" + FLD_REASSIGNED + "],FALSE) <> TRUE ";
							//Only do that when some field have not been reasigned
							if (DV.Count > 0)
							{
								string org_name = "";
								string first_name = "";
								string last_name = "";
								string addr1 = "";
								string addr2 = "";
								string county = "";
								string subdcode = "";
								string city = "";
								string zip = "";
								bool residential_area = false;

								if (!row.IsNull(PostalAddressEntityTable.FLD_NAME))
									org_name = row[PostalAddressEntityTable.FLD_NAME].ToString();
								if (!row.IsNull(PostalAddressEntityTable.FLD_FIRST_NAME))
									first_name = row[PostalAddressEntityTable.FLD_FIRST_NAME].ToString();
								if (!row.IsNull(PostalAddressEntityTable.FLD_LAST_NAME))
									last_name = row[PostalAddressEntityTable.FLD_LAST_NAME].ToString();
								if (!row.IsNull(PostalAddressEntityTable.FLD_ADDRESS1))
									addr1 = row[PostalAddressEntityTable.FLD_ADDRESS1].ToString();
								if (!row.IsNull(PostalAddressEntityTable.FLD_ADDRESS2))
									addr2 = row[PostalAddressEntityTable.FLD_ADDRESS2].ToString();
								if (!row.IsNull(PostalAddressEntityTable.FLD_COUNTY))
									county = row[PostalAddressEntityTable.FLD_COUNTY].ToString();
								if (!row.IsNull(PostalAddressEntityTable.FLD_SUBDIVISION_CODE))
									subdcode = row[PostalAddressEntityTable.FLD_SUBDIVISION_CODE].ToString();
								if (!row.IsNull(PostalAddressEntityTable.FLD_CITY))
									city = row[PostalAddressEntityTable.FLD_CITY].ToString();
								if (!row.IsNull(PostalAddressEntityTable.FLD_ZIP))
									zip = row[PostalAddressEntityTable.FLD_ZIP].ToString();
								if (!row.IsNull(PostalAddressEntityTable.FLD_RESIDENTIAL_AREA))
									residential_area = Convert.ToBoolean(row[PostalAddressEntityTable.FLD_RESIDENTIAL_AREA]);
								int AddressID = Convert.ToInt32(row[PostalAddressEntityTable.FLD_ADDRESS_ID]);
						

								DV.RowFilter = "ISNULL(" + PostalAddressEntityTable.FLD_NAME  + ", '') = '" + org_name.Replace("'","''") + "'" + 
									" AND ISNULL(" + PostalAddressEntityTable.FLD_FIRST_NAME  + ", '') = '" + first_name.Replace("'","''") + "'" +
									" AND ISNULL(" + PostalAddressEntityTable.FLD_LAST_NAME  + ", '') = '" + last_name.Replace("'","''") + "'" +
									" AND ISNULL(" + PostalAddressEntityTable.FLD_ADDRESS1  + ", '') = '" + addr1.Replace("'","''") + "'" +
									" AND ISNULL(" + PostalAddressEntityTable.FLD_ADDRESS2  + ", '') = '" + addr2.Replace("'","''") + "'" +
									" AND ISNULL(" + PostalAddressEntityTable.FLD_COUNTY  + ", '') = '" + county.Replace("'","''") + "'" +
									" AND ISNULL(" + PostalAddressEntityTable.FLD_CITY  + ", '') = '" + city.Replace("'","''") + "'" +
									" AND ISNULL(" + PostalAddressEntityTable.FLD_SUBDIVISION_CODE  + ", '') = '" + subdcode + "'" +
									" AND ISNULL(" + PostalAddressEntityTable.FLD_ZIP  + ", '') = '" + zip + "'" + 
									" AND ISNULL(" + PostalAddressEntityTable.FLD_RESIDENTIAL_AREA  + ", FALSE) = " + residential_area.ToString(); 
								//" AND " + FLD_REASSIGNED + " <> TRUE ";
								if (DV.Count > 0)
								{
									//Reassign the new PostalAddress ID						
									foreach(DataRowView dvRow in DV)
									{
										DataRow duplRow = dvRow.Row;
										if (!duplRow.IsNull(PostalAddressEntityTable.FLD_ADDRESS_ID))
										{
											if (Convert.ToInt32(duplRow[PostalAddressEntityTable.FLD_ADDRESS_ID]) == AddressID)
												dvRow[PostalAddressEntityTable.FLD_ADDRESS_ID] = AddressID;
										}
										else
											dvRow[PostalAddressEntityTable.FLD_ADDRESS_ID] = AddressID;

										//Flag to mark the reassignment
										dvRow[FLD_REASSIGNED] = true;
									}
								}
							}
						}
					}					
				}
			}
			//Check for remaining deleted row 
			if (Table.GetChanges(DataRowState.Deleted) != null)
			{
				base.UpdateBatch((dataDef)Table.GetChanges(DataRowState.Deleted));
				IsSuccess = true;
			}

			//Remove our working column
			if (Table.Columns.Contains(FLD_REASSIGNED))
				Table.Columns.Remove(FLD_REASSIGNED);

			//
			// Return the result of the operation
			//            
			return IsSuccess;

			//return this.UpdateBatch(Table, addrDataAccess);			
		}

	
	}
}
