///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'CCA'
// Generated by LLBLGen v1.2.1402.29234 Final on: Wednesday, November 12, 2003, 2:35:14 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using dataDef = QSPForm.Common.DataDef.FormTable;

namespace QSPForm.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Form'.
	/// </summary>
	public class Form : DBTableOperation
	{

		//Stored procedure parameter names
		public const string TABLE_NAME = "form";
		public const string PARAM_PKID = "@iform_id";
		public const string PARAM_FORM_GROUP_ID = "@iform_group_id";
		public const string PARAM_VERSION = "@iversion";
		public const string PARAM_FORM_CODE = "@sform_code";
		public const string PARAM_FORM_NAME = "@sform_name";
		public const string PARAM_DESCRIPTION = "@sdescription";
		public const string PARAM_PROGRAM_BASICS_TEXT = "@sprogram_basics_text";
		public const string PARAM_ORDER_TERMS_TEXT = "@sorder_terms_text";
		public const string PARAM_PROGRAM_TYPE_ID = "@iprogram_type_id";
        public const string PARAM_PROGRAM_ID = "@iprogram_id";
        public const string PARAM_ENTITY_TYPE_ID = "@ientity_type_id";
		public const string PARAM_TAX_POSTAL_ADDRESS_TYPE_ID = "@itax_postal_address_type_id";
		public const string PARAM_CLOSING_TIMES = "@daclosing_time";
		public const string PARAM_IS_PRODUCT_PRICE_UPDATABLE = "@bis_product_price_updatable";
        public const string PARAM_IS_QUANTITY_ADJUSTMENT_ALLOWED = "@bis_quantity_adjustment_allowed";
		public const string PARAM_IMAGE_URL = "@simage_url";
		public const string PARAM_IS_BASE_FORM = "@bis_base_form";
		public const string PARAM_PARENT_FORM_ID = "@iparent_form_id";
		public const string PARAM_ENABLED = "@benabled";
			
		//
		// Stored procedure names for each operation
		private const string SQL_PROC_DELETE = "pr_form_Delete";
		private const string SQL_PROC_INSERT = "pr_form_Insert";
		private const string SQL_PROC_UPDATE = "pr_form_Update";
		private const string SQL_PROC_SELECT_ONE = "pr_form_SelectOne";
		private const string SQL_PROC_SELECT_ALL = "pr_form_SelectAll";		
		
		

		//
		// DataSetCommand object
		//
		
		private SqlCommand insertCommand;
		private SqlCommand updateCommand;
		private SqlCommand deleteCommand;

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public Form()
		{
			// Nothing for now.
		}

		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand(SQL_PROC_INSERT);
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
            
				SqlParameterCollection sqlParams = insertCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_FORM_GROUP_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_VERSION, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_FORM_CODE, SqlDbType.VarChar, 50));
				sqlParams.Add(new SqlParameter(PARAM_FORM_NAME, SqlDbType.VarChar, 50));				
				sqlParams.Add(new SqlParameter(PARAM_DESCRIPTION, SqlDbType.VarChar, 200));	
				sqlParams.Add(new SqlParameter(PARAM_PROGRAM_BASICS_TEXT, SqlDbType.VarChar, 2000));	
				sqlParams.Add(new SqlParameter(PARAM_ORDER_TERMS_TEXT, SqlDbType.VarChar, 2000));
				sqlParams.Add(new SqlParameter(PARAM_PROGRAM_TYPE_ID, SqlDbType.Int));
                sqlParams.Add(new SqlParameter(PARAM_PROGRAM_ID, SqlDbType.Int));
                sqlParams.Add(new SqlParameter(PARAM_ENTITY_TYPE_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_TAX_POSTAL_ADDRESS_TYPE_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_CLOSING_TIMES, SqlDbType.DateTime));
				sqlParams.Add(new SqlParameter(PARAM_IS_PRODUCT_PRICE_UPDATABLE, SqlDbType.Bit));
                sqlParams.Add(new SqlParameter(PARAM_IS_QUANTITY_ADJUSTMENT_ALLOWED, SqlDbType.Bit));
				sqlParams.Add(new SqlParameter(PARAM_IMAGE_URL, SqlDbType.VarChar, 100));
				sqlParams.Add(new SqlParameter(PARAM_IS_BASE_FORM, SqlDbType.Bit));
				sqlParams.Add(new SqlParameter(PARAM_PARENT_FORM_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_ENABLED, SqlDbType.Bit));

				sqlParams.Add(new SqlParameter(PARAM_CREATE_USER_ID, SqlDbType.Int));
							
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
								
				sqlParams[PARAM_PKID].Direction = ParameterDirection.Output;				
				//
				// Define the parameter mappings from the data table in the
				// dataset.
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_FORM_GROUP_ID].SourceColumn = dataDef.FLD_FORM_GROUP_ID;
				sqlParams[PARAM_VERSION].SourceColumn = dataDef.FLD_VERSION;
				sqlParams[PARAM_FORM_CODE].SourceColumn = dataDef.FLD_FORM_CODE;
				sqlParams[PARAM_FORM_NAME].SourceColumn = dataDef.FLD_FORM_NAME;
				sqlParams[PARAM_DESCRIPTION].SourceColumn = dataDef.FLD_DESCRIPTION;
				sqlParams[PARAM_PROGRAM_BASICS_TEXT].SourceColumn = dataDef.FLD_PROGRAM_BASICS_TEXT;
				sqlParams[PARAM_ORDER_TERMS_TEXT].SourceColumn = dataDef.FLD_ORDER_TERMS_TEXT;
				sqlParams[PARAM_PROGRAM_TYPE_ID].SourceColumn = dataDef.FLD_PROGRAM_TYPE_ID;
                sqlParams[PARAM_PROGRAM_ID].SourceColumn = dataDef.FLD_PROGRAM_ID;
                sqlParams[PARAM_ENTITY_TYPE_ID].SourceColumn = dataDef.FLD_ENTITY_TYPE_ID;
				sqlParams[PARAM_TAX_POSTAL_ADDRESS_TYPE_ID].SourceColumn = dataDef.FLD_TAX_POSTAL_ADDRESS_TYPE_ID;
				sqlParams[PARAM_CLOSING_TIMES].SourceColumn = dataDef.FLD_CLOSING_TIMES;
				sqlParams[PARAM_IS_PRODUCT_PRICE_UPDATABLE].SourceColumn = dataDef.FLD_IS_PRODUCT_PRICE_UPDATABLE;
                sqlParams[PARAM_IS_QUANTITY_ADJUSTMENT_ALLOWED].SourceColumn = dataDef.FLD_IS_QUANTITY_ADJUSTMENT_ALLOWED;
				sqlParams[PARAM_IMAGE_URL].SourceColumn = dataDef.FLD_IMAGE_URL;
				sqlParams[PARAM_IS_BASE_FORM].SourceColumn = dataDef.FLD_IS_BASE_FORM;
				sqlParams[PARAM_PARENT_FORM_ID].SourceColumn = dataDef.FLD_PARENT_FORM_ID;
				sqlParams[PARAM_ENABLED].SourceColumn = dataDef.FLD_ENABLED;
				sqlParams[PARAM_CREATE_USER_ID].SourceColumn = dataDef.FLD_CREATE_USER_ID;						
				
				//Don't need to map ErrorCode cause is not imply in the insert
				//Only Mapped DataColumn are imply...
			}
            
			return insertCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand(SQL_PROC_UPDATE);
				updateCommand.CommandType = CommandType.StoredProcedure;
				
            
				SqlParameterCollection sqlParams = updateCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_FORM_GROUP_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_VERSION, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_FORM_CODE, SqlDbType.VarChar, 50));
				sqlParams.Add(new SqlParameter(PARAM_FORM_NAME, SqlDbType.VarChar, 50));				
				sqlParams.Add(new SqlParameter(PARAM_DESCRIPTION, SqlDbType.VarChar, 200));	
				sqlParams.Add(new SqlParameter(PARAM_PROGRAM_BASICS_TEXT, SqlDbType.VarChar, 2000));
				sqlParams.Add(new SqlParameter(PARAM_ORDER_TERMS_TEXT, SqlDbType.VarChar, 2000));				
				sqlParams.Add(new SqlParameter(PARAM_PROGRAM_TYPE_ID, SqlDbType.Int));
                sqlParams.Add(new SqlParameter(PARAM_PROGRAM_ID, SqlDbType.Int));
                sqlParams.Add(new SqlParameter(PARAM_ENTITY_TYPE_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_TAX_POSTAL_ADDRESS_TYPE_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_CLOSING_TIMES, SqlDbType.DateTime));
				sqlParams.Add(new SqlParameter(PARAM_IS_PRODUCT_PRICE_UPDATABLE, SqlDbType.Bit));
                sqlParams.Add(new SqlParameter(PARAM_IS_QUANTITY_ADJUSTMENT_ALLOWED, SqlDbType.Bit));
				sqlParams.Add(new SqlParameter(PARAM_IMAGE_URL, SqlDbType.VarChar, 100));
				sqlParams.Add(new SqlParameter(PARAM_IS_BASE_FORM, SqlDbType.Bit));
				sqlParams.Add(new SqlParameter(PARAM_PARENT_FORM_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_ENABLED, SqlDbType.Bit));

				sqlParams.Add(new SqlParameter(PARAM_DELETED, SqlDbType.Bit));
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));	

				// Define the parameter mappings from the data table
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_FORM_GROUP_ID].SourceColumn = dataDef.FLD_FORM_GROUP_ID;
				sqlParams[PARAM_VERSION].SourceColumn = dataDef.FLD_VERSION;
				sqlParams[PARAM_FORM_CODE].SourceColumn = dataDef.FLD_FORM_CODE;
				sqlParams[PARAM_FORM_NAME].SourceColumn = dataDef.FLD_FORM_NAME;
				sqlParams[PARAM_DESCRIPTION].SourceColumn = dataDef.FLD_DESCRIPTION;
				sqlParams[PARAM_PROGRAM_BASICS_TEXT].SourceColumn = dataDef.FLD_PROGRAM_BASICS_TEXT;
				sqlParams[PARAM_ORDER_TERMS_TEXT].SourceColumn = dataDef.FLD_ORDER_TERMS_TEXT;				
				sqlParams[PARAM_PROGRAM_TYPE_ID].SourceColumn = dataDef.FLD_PROGRAM_TYPE_ID;
                sqlParams[PARAM_PROGRAM_ID].SourceColumn = dataDef.FLD_PROGRAM_ID;
                sqlParams[PARAM_ENTITY_TYPE_ID].SourceColumn = dataDef.FLD_ENTITY_TYPE_ID;
				sqlParams[PARAM_TAX_POSTAL_ADDRESS_TYPE_ID].SourceColumn = dataDef.FLD_TAX_POSTAL_ADDRESS_TYPE_ID;
				sqlParams[PARAM_CLOSING_TIMES].SourceColumn = dataDef.FLD_CLOSING_TIMES;
				sqlParams[PARAM_IS_PRODUCT_PRICE_UPDATABLE].SourceColumn = dataDef.FLD_IS_PRODUCT_PRICE_UPDATABLE;
                sqlParams[PARAM_IS_QUANTITY_ADJUSTMENT_ALLOWED].SourceColumn = dataDef.FLD_IS_QUANTITY_ADJUSTMENT_ALLOWED;
                sqlParams[PARAM_IMAGE_URL].SourceColumn = dataDef.FLD_IMAGE_URL;
				sqlParams[PARAM_IS_BASE_FORM].SourceColumn = dataDef.FLD_IS_BASE_FORM;
				sqlParams[PARAM_PARENT_FORM_ID].SourceColumn = dataDef.FLD_PARENT_FORM_ID;
				sqlParams[PARAM_ENABLED].SourceColumn = dataDef.FLD_ENABLED;
				
				sqlParams[PARAM_DELETED].SourceColumn = dataDef.FLD_DELETED;				
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;				
				//Don't need to map ErrorCode cause is not imply in the insert
				//Only Mapped DataColumn are imply...
			}
            
			return updateCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand(SQL_PROC_DELETE);
				deleteCommand.CommandType = CommandType.StoredProcedure;
				
				SqlParameterCollection sqlParams = deleteCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));
				//
				// Define the parameter mappings from the data tabl
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;	
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;
				//Only Mapped DataColumn are imply...
			}
            
			return deleteCommand;
		}

		protected override string TableName
		{
			get{return dataDef.TBL_FORM;}
		}

		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iInstance</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		///		 <LI>iInstance</LI>
		///		 <LI>daStartDate</LI>
		///		 <LI>daEndDate</LI>
		///		 <LI>iAccountInstance</LI>
		///		 <LI>iNumberInGroup</LI>
		///		 <LI>iNumberOfRooms</LI>
		///		 <LI>iNumberOfStudents</LI>		
		///		 <LI>sFMID</LI>		
		///		 <LI>iCAFiscal</LI>
		///		 <LI>bCampaignComplete</LI>
		
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		
		public new dataDef SelectOne(int FormID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ONE;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FormID));
			
			Select(cmdToExecute,Table);
			//AssignInnerProperty(Table);

			return Table;
				
		}

		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		/// </UL>
		/// </remarks>
		public new dataDef SelectAll()
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ALL;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
					
			Select(cmdToExecute,Table);
			//AssignInnerProperty(Table);
			return  Table;
			
		}

		public dataDef SelectAll(bool IncludeBaseForm)
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ALL;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@bIncludeAll", SqlDbType.Bit, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, IncludeBaseForm));
								
			Select(cmdToExecute,Table);
			
			return  Table;
			
		}

		public dataDef SelectAllWform_group_idLogic(int FormGroupID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_form_SelectAllWform_group_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FORM_GROUP_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FormGroupID));
			
			Select(cmdToExecute,Table);			

			return Table;
				
		}


		public dataDef SelectAllWentity_type_idLogic(int EntityTypeID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_form_SelectAllWentity_type_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ENTITY_TYPE_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, EntityTypeID));
			
			Select(cmdToExecute,Table);			

			return Table;
				
		}

		public dataDef SelectAllWentity_type_idLogic(int EntityTypeID, int ProgramTypeID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_form_SelectAllWentity_type_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ENTITY_TYPE_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, EntityTypeID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PROGRAM_TYPE_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ProgramTypeID));
			
			Select(cmdToExecute,Table);			

			return Table;
				
		}

        public dataDef SelectAllWentity_type_idLogic(int EntityTypeID, int ProgramTypeID, int ProgramID)
        {
            dataDef Table = new dataDef();
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.pr_form_SelectAllWentity_type_idLogic";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ENTITY_TYPE_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, EntityTypeID));
            cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PROGRAM_TYPE_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ProgramTypeID));
            cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PROGRAM_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ProgramID));

            Select(cmdToExecute, Table);

            return Table;

        }

		public dataDef SelectAllBaseFormWentity_type_idLogic(int EntityTypeID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_form_SelectAllBaseFormWentity_type_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ENTITY_TYPE_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, EntityTypeID));
			
			Select(cmdToExecute,Table);			

			return Table;
				
		}

		public dataDef SelectAllBaseFormWentity_type_idLogic(int EntityTypeID, int ProgramTypeID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_form_SelectAllBaseFormWentity_type_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ENTITY_TYPE_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, EntityTypeID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PROGRAM_TYPE_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ProgramTypeID));
			
			Select(cmdToExecute,Table);			

			return Table;
				
		}

		public dataDef SelectAllWprogram_type_idLogic(int ProgramTypeID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_form_SelectAllWprogram_type_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PROGRAM_TYPE_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ProgramTypeID));
			
			Select(cmdToExecute,Table);			

			return Table;
				
		}

		public dataDef SelectAllWcampaign_idLogic(int CampaignID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_form_SelectAllWcampaign_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter("@icampaign_id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CampaignID));
			
			Select(cmdToExecute,Table);			

			return Table;
				
		}

        public dataDef SelectAllWcampaign_idLogic(int CampaignID, int EntityTypeID)
        {
            dataDef Table = new dataDef();
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.pr_form_SelectAllWcampaign_idLogic";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            cmdToExecute.Parameters.Add(new SqlParameter("@icampaign_id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CampaignID));
            cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ENTITY_TYPE_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, EntityTypeID));
			
            Select(cmdToExecute, Table);

            return Table;

        }

		public dataDef SelectAllVersionWform_idLogic(int ID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_form_SelectAllVersionWform_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ID));
			
			Select(cmdToExecute,Table);			

			return Table;
				
		}

	}
}
