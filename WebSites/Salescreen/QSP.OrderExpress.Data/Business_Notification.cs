///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'CCA'
// Generated by LLBLGen v1.2.1402.29234 Final on: Wednesday, November 12, 2003, 2:35:14 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using dataDef = QSPForm.Common.DataDef.BusinessNotificationTable;

namespace QSPForm.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'business_notification'.
	/// </summary>
	public class Business_notification : DBTableOperation
	{

		//Stored procedure parameter names
		public const string TABLE_NAME = "business_notification";
		public const string PARAM_PKID = "@ibusiness_notification_id";
		public const string PARAM_NAME = "@sbusiness_notification_name";
		public const string PARAM_BUSINESS_NOTIFICATION_TYPE_ID = "@ibusiness_notification_type_id";
		public const string PARAM_SOURCE_ID = "@isource_id";
		public const string PARAM_BUSINESS_TASK_ID = "@ibusiness_task_id";
		public const string PARAM_ASSIGNED_USER_ID = "@iassigned_user_id";
		public const string PARAM_ENTITY_TYPE_ID = "@ientity_type_id";
		public const string PARAM_ENTITY_ID = "@ientity_id";
		public const string PARAM_SUBJECT = "@ssubject";
		public const string PARAM_MESSAGE = "@smessage";
		public const string PARAM_DESCRIPTION = "@sdescription";
		public const string PARAM_IS_COMPLETE = "@bis_complete";
		public const string PARAM_COMPLETE_DATE = "@dacomplete_date";
		public const string PARAM_SEND_EMAIL = "@bsend_email";

		//
		// Stored procedure names for each operation
		private const string SQL_PROC_DELETE = "dbo.pr_business_notification_Delete";
		private const string SQL_PROC_INSERT = "dbo.pr_business_notification_Insert";
		private const string SQL_PROC_UPDATE = "dbo.pr_business_notification_Update";
		private const string SQL_PROC_SELECT_ONE = "dbo.pr_business_notification_SelectOne";
		private const string SQL_PROC_SELECT_ALL = "dbo.pr_business_notification_SelectAll";		
		
		private bool sendEmail = false;
		

		//
		// DataSetCommand object
		//
		
		private SqlCommand insertCommand;
		private SqlCommand updateCommand;
		private SqlCommand deleteCommand;

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public Business_notification()
		{
			// Nothing for now.
		}

		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand(SQL_PROC_INSERT);
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
            
				SqlParameterCollection sqlParams = insertCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_BUSINESS_NOTIFICATION_TYPE_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_SOURCE_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_BUSINESS_TASK_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_ASSIGNED_USER_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_ENTITY_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_ENTITY_TYPE_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_NAME, SqlDbType.VarChar, 50));				
				sqlParams.Add(new SqlParameter(PARAM_DESCRIPTION, SqlDbType.VarChar, 200));	
				sqlParams.Add(new SqlParameter(PARAM_SUBJECT, SqlDbType.VarChar, 200));	
				sqlParams.Add(new SqlParameter(PARAM_MESSAGE, SqlDbType.VarChar, 4000));	
				sqlParams.Add(new SqlParameter(PARAM_IS_COMPLETE, SqlDbType.Bit));	
				sqlParams.Add(new SqlParameter(PARAM_COMPLETE_DATE, SqlDbType.DateTime));	

				sqlParams.Add(new SqlParameter(PARAM_CREATE_USER_ID, SqlDbType.Int));
							
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
								
				sqlParams[PARAM_PKID].Direction = ParameterDirection.Output;				
				//
				// Define the parameter mappings from the data table in the
				// dataset.
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_BUSINESS_NOTIFICATION_TYPE_ID].SourceColumn = dataDef.FLD_BUSINESS_NOTIFICATION_TYPE_ID;
				sqlParams[PARAM_SOURCE_ID].SourceColumn = dataDef.FLD_SOURCE_ID;
				sqlParams[PARAM_BUSINESS_TASK_ID].SourceColumn = dataDef.FLD_BUSINESS_TASK_ID;
				sqlParams[PARAM_ASSIGNED_USER_ID].SourceColumn = dataDef.FLD_ASSIGNED_USER_ID;
				sqlParams[PARAM_ENTITY_TYPE_ID].SourceColumn = dataDef.FLD_ENTITY_TYPE_ID;
				sqlParams[PARAM_ENTITY_ID].SourceColumn = dataDef.FLD_ENTITY_ID;
				sqlParams[PARAM_NAME].SourceColumn = dataDef.FLD_BUSINESS_NOTIFICATION_NAME;
				sqlParams[PARAM_DESCRIPTION].SourceColumn = dataDef.FLD_DESCRIPTION;
				sqlParams[PARAM_SUBJECT].SourceColumn = dataDef.FLD_SUBJECT;
				sqlParams[PARAM_MESSAGE].SourceColumn = dataDef.FLD_MESSAGE;
				sqlParams[PARAM_IS_COMPLETE].SourceColumn = dataDef.FLD_IS_COMPLETE;
				sqlParams[PARAM_COMPLETE_DATE].SourceColumn = dataDef.FLD_COMPLETE_DATE;

				sqlParams[PARAM_CREATE_USER_ID].SourceColumn = dataDef.FLD_CREATE_USER_ID;				
								
				if (sendEmail)
				{
					sqlParams.Add(new SqlParameter(PARAM_SEND_EMAIL, SqlDbType.Bit));	
					sqlParams[PARAM_SEND_EMAIL].Value = sendEmail;
				}
				//Don't need to map ErrorCode cause is not imply in the insert
				//Only Mapped DataColumn are imply...
			}
            
			return insertCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand(SQL_PROC_UPDATE);
				updateCommand.CommandType = CommandType.StoredProcedure;
				
            
				SqlParameterCollection sqlParams = updateCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_BUSINESS_NOTIFICATION_TYPE_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_SOURCE_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_BUSINESS_TASK_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_ASSIGNED_USER_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_ENTITY_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_ENTITY_TYPE_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_NAME, SqlDbType.VarChar, 50));				
				sqlParams.Add(new SqlParameter(PARAM_DESCRIPTION, SqlDbType.VarChar, 200));	
				sqlParams.Add(new SqlParameter(PARAM_SUBJECT, SqlDbType.VarChar, 200));	
				sqlParams.Add(new SqlParameter(PARAM_MESSAGE, SqlDbType.VarChar, 4000));	
				sqlParams.Add(new SqlParameter(PARAM_IS_COMPLETE, SqlDbType.Bit));	
				sqlParams.Add(new SqlParameter(PARAM_COMPLETE_DATE, SqlDbType.DateTime));	

				sqlParams.Add(new SqlParameter(PARAM_DELETED, SqlDbType.Bit));
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));	

				// Define the parameter mappings from the data tabl
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_BUSINESS_NOTIFICATION_TYPE_ID].SourceColumn = dataDef.FLD_BUSINESS_NOTIFICATION_TYPE_ID;
				sqlParams[PARAM_SOURCE_ID].SourceColumn = dataDef.FLD_SOURCE_ID;				
				sqlParams[PARAM_BUSINESS_TASK_ID].SourceColumn = dataDef.FLD_BUSINESS_TASK_ID;
				sqlParams[PARAM_ASSIGNED_USER_ID].SourceColumn = dataDef.FLD_ASSIGNED_USER_ID;
				sqlParams[PARAM_ENTITY_TYPE_ID].SourceColumn = dataDef.FLD_ENTITY_TYPE_ID;
				sqlParams[PARAM_ENTITY_ID].SourceColumn = dataDef.FLD_ENTITY_ID;
				sqlParams[PARAM_NAME].SourceColumn = dataDef.FLD_BUSINESS_NOTIFICATION_NAME;
				sqlParams[PARAM_DESCRIPTION].SourceColumn = dataDef.FLD_DESCRIPTION;
				sqlParams[PARAM_SUBJECT].SourceColumn = dataDef.FLD_SUBJECT;
				sqlParams[PARAM_MESSAGE].SourceColumn = dataDef.FLD_MESSAGE;
				sqlParams[PARAM_IS_COMPLETE].SourceColumn = dataDef.FLD_IS_COMPLETE;
				sqlParams[PARAM_COMPLETE_DATE].SourceColumn = dataDef.FLD_COMPLETE_DATE;

				sqlParams[PARAM_DELETED].SourceColumn = dataDef.FLD_DELETED;				
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;				
				//Don't need to map ErrorCode cause is not imply in the insert
				//Only Mapped DataColumn are imply...
			}
            
			return updateCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand(SQL_PROC_DELETE);
				deleteCommand.CommandType = CommandType.StoredProcedure;
				
				SqlParameterCollection sqlParams = deleteCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));
				//
				// Define the parameter mappings from the data tabl
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;	
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;
				//Only Mapped DataColumn are imply...
			}
            
			return deleteCommand;
		}

        

		public bool SendEmail
		{
			get
			{
				return sendEmail;
			}
			set
			{
				sendEmail = value;
			}
		}

		protected override string TableName
		{
			get{return dataDef.TBL_BUSINESS_NOTIFICATION;}
		}

		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		/// </UL>
		/// </remarks>
		public new dataDef SelectAll()
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ALL;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
					
			Select(cmdToExecute,Table);
			//AssignInnerProperty(Table);
			return  Table;
			
		}

		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iInstance</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		///		 <LI>iInstance</LI>
		///		 <LI>daStartDate</LI>
		///		 <LI>daEndDate</LI>
		///		 <LI>iAccountInstance</LI>
		///		 <LI>iNumberInGroup</LI>
		///		 <LI>iNumberOfRooms</LI>
		///		 <LI>iNumberOfStudents</LI>		
		///		 <LI>sFMID</LI>		
		///		 <LI>iCAFiscal</LI>
		///		 <LI>bCampaignComplete</LI>
		
		/// </UL>
		/// Will fill all properties corresponding with a task in the table with the value of the row selected.
		/// </remarks>
		
		public new dataDef SelectOne(int ID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ONE;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ID));
			
			Select(cmdToExecute,Table);
			//AssignInnerProperty(Table);

			return Table;
				
		}

        public bool DeleteOne(int ID, int UserID)
        {
            dataDef Table = new dataDef();
            SqlCommand cmdToExecute = GetDeleteCommand();
            cmdToExecute.Parameters[PARAM_PKID].Value = ID;
            cmdToExecute.Parameters[PARAM_UPDATE_USER_ID].Value = UserID;
			
			return ExecuteCmd(cmdToExecute);
			
        }

		public dataDef SelectAllWassigned_user_idLogic(int UserID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_business_notification_SelectAllWassigned_user_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ASSIGNED_USER_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, UserID));
			
			Select(cmdToExecute,Table);
			//AssignInnerProperty(Table);

			return Table;
				
		}

		public dataDef SelectAllWbusiness_task_idLogic(int BizTaskID, int EntityTypeID, int EntityID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_business_notification_SelectAllWbusiness_task_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_BUSINESS_TASK_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, BizTaskID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ENTITY_TYPE_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, EntityTypeID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ENTITY_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, EntityID));

			Select(cmdToExecute,Table);
			//AssignInnerProperty(Table);

			return Table;
				
		}

		public bool CompleteAllWbusiness_task_idLogic(int BizTaskID, int EntityTypeID, int EntityID)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_business_notification_CompleteAllWbusiness_task_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_BUSINESS_TASK_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, BizTaskID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ENTITY_TYPE_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, EntityTypeID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ENTITY_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, EntityID));
			
			return ExecuteCmd(cmdToExecute);			
				
		}

		public dataDef SelectAll_Search(int SearchType, String Criteria, int AssignedUserID, int BusinessNotificationTypeID, int EntityTypeID, bool IsComplete)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_business_notification_SelectAll_Search";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_TYPE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchType));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_CRITERIA, SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Criteria));
			
			if (AssignedUserID > 0)
				cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ASSIGNED_USER_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, AssignedUserID));
			if (BusinessNotificationTypeID > 0)
				cmdToExecute.Parameters.Add(new SqlParameter(PARAM_BUSINESS_NOTIFICATION_TYPE_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, BusinessNotificationTypeID));
			if (EntityTypeID > 0)
				cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ENTITY_TYPE_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, EntityTypeID));
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_IS_COMPLETE, SqlDbType.Bit, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, IsComplete));
			
			Select(cmdToExecute,Table);

			return Table;
		}

		public dataDef SelectAll_Search(int SearchType, String Criteria, int AssignedUserID, int BusinessNotificationTypeID, int EntityTypeID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_business_notification_SelectAll_Search";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_TYPE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchType));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_CRITERIA, SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Criteria));
			
			if (AssignedUserID > 0)
				cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ASSIGNED_USER_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, AssignedUserID));
			if (BusinessNotificationTypeID > 0)
				cmdToExecute.Parameters.Add(new SqlParameter(PARAM_BUSINESS_NOTIFICATION_TYPE_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, BusinessNotificationTypeID));
			if (EntityTypeID > 0)
				cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ENTITY_TYPE_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, EntityTypeID));
			
			Select(cmdToExecute,Table);

			return Table;
		}

	}
}
