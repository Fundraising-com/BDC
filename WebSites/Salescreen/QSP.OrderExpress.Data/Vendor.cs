///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'vendor'
// Generated by Jas on: Monday, November 03, 2003, 4:18:12 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using System.Runtime.InteropServices;
using dataDef = QSPForm.Common.DataDef.VendorTable;

namespace QSPForm.Data
{
	
	/// <summary>
	/// Purpose: Data Access class for the table 'vendor'.
	/// </summary>
	
	public class Vendor : DBTableOperation
	{
		
		//
		// Stored procedure parameter names
		// Paremater Name must match with the SP Called
		private const string PARAM_PKID      = "@ivendor_id";
		private const string PARAM_FULF_VENDOR_ID      = "@ifulf_vendor_id";
		private const string PARAM_CODE		 = "@svendor_code";
		private const string PARAM_NAME		 = "@svendor_name";
		private const string PARAM_POSTAL_ADDRESS_ID = "@ipostal_address_id";
		private const string PARAM_PHONE_NUMBER_ID = "@iphone_number_id";
		private const string PARAM_FAX_NUMBER_ID   = "@ifax_number_id";
		private const string PARAM_EMAIL_ID = "@iemail_id";
		private const string PARAM_DIVSION = "@sdivision";
		private const string PARAM_VENDOR_TERM = "@svendor_term";
		private const string PARAM_ORACLE_CODE = "@soracle_vendor_code";
		//
		// Stored procedure names for each operation
		private const string SQL_PROC_INSERT       = "pr_vendor_insert";
		private const string SQL_PROC_UPDATE       = "pr_vendor_update";
		private const string SQL_PROC_DELETE       = "pr_vendor_delete";
		private const string SQL_PROC_SELECT_ONE   = "pr_vendor_SelectOne";
		private const string SQL_PROC_SELECT_ALL   = "pr_vendor_SelectAll";

		//
		// DataSetCommand object
		//
		private SqlCommand insertCommand;
		private SqlCommand updateCommand;
		private SqlCommand deleteCommand;
		
		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public Vendor()
		{
			//
			// Create the DataSetCommand
			//
			adapter = new SqlDataAdapter();        
			adapter.TableMappings.Add("Table", dataDef.TBL_VENDOR);
		}
		protected override string TableName
		{
			get{return dataDef.TBL_VENDOR;}
		}

		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand(SQL_PROC_INSERT);
				insertCommand.CommandType = CommandType.StoredProcedure;				
            
				SqlParameterCollection sqlParams = insertCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_CODE, SqlDbType.VarChar, 50));
				sqlParams.Add(new SqlParameter(PARAM_NAME, SqlDbType.VarChar, 50));
				sqlParams.Add(new SqlParameter(PARAM_POSTAL_ADDRESS_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_PHONE_NUMBER_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_FAX_NUMBER_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_EMAIL_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_DIVSION, SqlDbType.VarChar, 50));
				sqlParams.Add(new SqlParameter(PARAM_VENDOR_TERM, SqlDbType.VarChar, 50));
				sqlParams.Add(new SqlParameter(PARAM_ORACLE_CODE, SqlDbType.VarChar, 50));
				
				sqlParams.Add(new SqlParameter(PARAM_CREATE_USER_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_ERROR, SqlDbType.Int));

				sqlParams[PARAM_PKID].Direction = ParameterDirection.Output;
				sqlParams[PARAM_ERROR].Direction = ParameterDirection.Output;
				sqlParams[PARAM_ERROR].Value = 0;
				//
				// Define the parameter mappings from the data table in the
				// dataset.
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_CODE].SourceColumn = dataDef.FLD_CODE;
				sqlParams[PARAM_NAME].SourceColumn = dataDef.FLD_NAME;
				sqlParams[PARAM_POSTAL_ADDRESS_ID].SourceColumn = dataDef.FLD_POSTAL_ADDRESS_ID;
				sqlParams[PARAM_PHONE_NUMBER_ID].SourceColumn = dataDef.FLD_PHONE_NUMBER_ID;
				sqlParams[PARAM_FAX_NUMBER_ID].SourceColumn = dataDef.FLD_FAX_NUMBER_ID;
				sqlParams[PARAM_EMAIL_ID].SourceColumn = dataDef.FLD_EMAIL_ID;
				sqlParams[PARAM_DIVSION].SourceColumn = dataDef.FLD_DIVISION;
				sqlParams[PARAM_VENDOR_TERM].SourceColumn = dataDef.FLD_VENDOR_TERM;
				sqlParams[PARAM_ORACLE_CODE].SourceColumn = dataDef.FLD_ORACLE_VENDOR_CODE;

				sqlParams[PARAM_CREATE_USER_ID].SourceColumn = dataDef.FLD_CREATE_USER_ID;

				//Don't need to map ErrorCode cause is not imply in the insert
				//Only Mapped DataColumn are imply...
				
			}
            
			return insertCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand(SQL_PROC_UPDATE);
				updateCommand.CommandType = CommandType.StoredProcedure;				
            
				SqlParameterCollection sqlParams = updateCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_CODE, SqlDbType.VarChar, 50));
				sqlParams.Add(new SqlParameter(PARAM_NAME, SqlDbType.VarChar, 50));
				sqlParams.Add(new SqlParameter(PARAM_POSTAL_ADDRESS_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_PHONE_NUMBER_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_FAX_NUMBER_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_EMAIL_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_DIVSION, SqlDbType.VarChar, 50));
				sqlParams.Add(new SqlParameter(PARAM_VENDOR_TERM, SqlDbType.VarChar, 50));
				sqlParams.Add(new SqlParameter(PARAM_ORACLE_CODE, SqlDbType.VarChar, 50));
				
				sqlParams.Add(new SqlParameter(PARAM_DELETED, SqlDbType.Bit));
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_ERROR, SqlDbType.Int));

				sqlParams[PARAM_ERROR].Direction = ParameterDirection.Output;
				sqlParams[PARAM_ERROR].Value = 0;
				//
				// Define the parameter mappings from the data table in the
				// dataset.
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_CODE].SourceColumn = dataDef.FLD_CODE;
				sqlParams[PARAM_NAME].SourceColumn = dataDef.FLD_NAME;
				sqlParams[PARAM_POSTAL_ADDRESS_ID].SourceColumn = dataDef.FLD_POSTAL_ADDRESS_ID;
				sqlParams[PARAM_PHONE_NUMBER_ID].SourceColumn = dataDef.FLD_PHONE_NUMBER_ID;
				sqlParams[PARAM_FAX_NUMBER_ID].SourceColumn = dataDef.FLD_FAX_NUMBER_ID;
				sqlParams[PARAM_EMAIL_ID].SourceColumn = dataDef.FLD_EMAIL_ID;
				sqlParams[PARAM_DIVSION].SourceColumn = dataDef.FLD_DIVISION;
				sqlParams[PARAM_VENDOR_TERM].SourceColumn = dataDef.FLD_VENDOR_TERM;
				sqlParams[PARAM_ORACLE_CODE].SourceColumn = dataDef.FLD_ORACLE_VENDOR_CODE;

				sqlParams[PARAM_DELETED].SourceColumn = dataDef.FLD_DELETED;
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;
				

				//Don't need to map ErrorCode cause is not imply in the insert
				//Only Mapped DataColumn are imply...
			}
            
			return updateCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand(SQL_PROC_DELETE);
				deleteCommand.CommandType = CommandType.StoredProcedure;				
            
				SqlParameterCollection sqlParams = deleteCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_ERROR, SqlDbType.Int));

				sqlParams[PARAM_ERROR].Direction = ParameterDirection.Output;
				sqlParams[PARAM_ERROR].Value = 0;
				//
				// Define the parameter mappings from the data tabl
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;
					//Only Mapped DataColumn are imply...
			}
            
			return deleteCommand;
		}
		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Vendor_id</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>Vendor_id</LI>
		///		 <LI>Vendor_name</LI>
		///		 <LI>Password</LI>
		///		 <LI>Title</LI>
		///		 <LI>Email</LI>
		///		 <LI>Best_time_to_call</LI>
		///		 <LI>Day_phone_no</LI>
		///		 <LI>Evening_phone_no</LI>
		///		 <LI>Fax_no</LI>
		///		 <LI>Deleted</LI>
		///		 <LI>Create_vendor_id</LI>
		///		 <LI>Create_date</LI>
		///		 <LI>Update_vendor_id</LI>
		///		 <LI>Update_date</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public new dataDef SelectOne(int ID)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ONE;
			cmdToExecute.CommandType = CommandType.StoredProcedure;			
			
			dataDef vendor = new dataDef();

			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ID));
			
			
			Select(cmdToExecute, vendor);

			return vendor;
		}

		public dataDef SelectAllWfulf_vendor_idLogic(int FulfVendorID)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_vendor_SelectAllWfulf_vendor_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;			
			
			dataDef vendor = new dataDef();

			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FULF_VENDOR_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FulfVendorID));
			
			
			Select(cmdToExecute, vendor);

			return vendor;
		}
		

		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public new dataDef SelectAll()
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ALL;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
				
			Select(cmdToExecute,Table);
			return Table;		
		}
		
		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the VendorName.
		/// </summary>
		/// <returns>dataDef (DataSet) object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Vendor_Name</LI>
		/// </UL>
		/// </remarks>
//		public dataDef SelectAllWvendor_nameLogic(String vendorName)
//		{
//			dataDef Table = new dataDef();
//			SqlCommand	cmdToExecute = new SqlCommand();
//			cmdToExecute.CommandText = "dbo.[pr_vendor_SelectAllWvendor_nameLogic]";
//			cmdToExecute.CommandType = CommandType.StoredProcedure;
//			
//			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_USER_NAME, SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, vendorName));
//			
//			Select(cmdToExecute,Table);
//			return Table;
//		}

		public dataDef SelectAll_Search(int SearchType, string Criteria, string SubdivisionCode)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_vendor_SelectAll_Search";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_TYPE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchType));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_CRITERIA, SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Criteria));
			if (SubdivisionCode.Length > 0)
				cmdToExecute.Parameters.Add(new SqlParameter("@ssubdivision_code", SqlDbType.NVarChar, 7, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SubdivisionCode));
			
			Select(cmdToExecute,Table);

			return Table;
		}

	

	}
}
