///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'TAXFLE'
// Based on code originally generated by LLBLGen v1.2.1402.29234 Final .
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using tableRef = QSPForm.Common.DataDef.TAXFLETable;
using QSPForm.Common;
using System.Data.SqlClient;

namespace QSPForm.DataRepository
{
	///<summary>Data Access class for the table 'TAXFLE'.</summary>
	public class TAXFLE : DBInteractionBase
	{
		#region Parameters
		//Stored procedure parameter names
        public const string PARAM_PKID = "@STCOCI";
        public const string PARAM_CITY_NAME = "@City_Name";
        public const string PARAM_COUNTY_NAME = "@County_Name";
        public const string PARAM_STATE_CODE = "@State_Code";
		//
		// Stored procedure names for each operation
		private string SQL_PROC_SELECT_ONE = "QDSDATA.dbo.pr_TAXFLE_SelectOne";
		
		#endregion Parameters


		///<summary>default constructor</summary>
		public TAXFLE()
		{
			// Nothing for now.
		}

		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iInstance</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		///		 <LI>sUserName</LI>
		///		 <LI>sPassword</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public new tableRef SelectOne(int StateCountyCityID)
		{
			tableRef Table = new tableRef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ONE;			
			cmdToExecute.CommandType = CommandType.StoredProcedure;
            cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, StateCountyCityID));

			Select(cmdToExecute,Table);

			return Table;
		}

        public tableRef SelectByAddress(string StateCode, string CityName)
        {
            return SelectByAddress(StateCode, CityName, "");
        }

        public tableRef SelectByAddress(string StateCode, string CityName, string CountyName)
		{
			tableRef Table = new tableRef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QDSDATA.dbo.pr_TAXFLE_SelectByAddress";			
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_CITY_NAME, SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CityName));
            if (CountyName.Trim().Length>0)
                cmdToExecute.Parameters.Add(new SqlParameter(PARAM_COUNTY_NAME, SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CountyName));
            cmdToExecute.Parameters.Add(new SqlParameter(PARAM_STATE_CODE, SqlDbType.VarChar, 2, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, StateCode));
				
			Select(cmdToExecute,Table);

			return Table;
		}

        public tableRef SelectByARCUST(int FulfAccountID)
		{
            tableRef Table = new tableRef();
			SqlCommand	cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "QDSDATA.dbo.pr_TAXFLE_SelectByARCUST";			
			cmdToExecute.CommandType = CommandType.StoredProcedure;
            cmdToExecute.Parameters.Add(new SqlParameter("@ARCUST", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FulfAccountID));

			Select(cmdToExecute,Table);

			return Table;
		}

		

	}
}
