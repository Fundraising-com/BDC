////////////////////////////////////////////////////////////////////////////////////////////
// Class generated by SqlCodeGen 1.1.0.0.
// Do not edit this file directly. Changes will be lost when this file is regenerated.
// Extensions should be added in a separate file using partial classes.
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using NHibernate;
using NHibernate.Expression;
using NHibernate.Mapping.Attributes;

namespace QSP.Business.Fulfillment
{
    [Serializable]
    [Class(Schema = "`dbo`", Table = "`delivery_service`")]
    public partial class DeliveryService
    {
        #region Constants
        public const string DeliveryServiceEntity = "DeliveryService";
        public const string DeliveryServiceIdProperty = "DeliveryServiceId";
        public const string DeliveryServiceTypeIdProperty = "DeliveryServiceTypeId";
        public const string FormIdProperty = "FormId";
        public const string ZipCodeProperty = "ZipCode";
        public const string TransitDaysProperty = "TransitDays";
        #endregion

        #region Fields
        protected int deliveryServiceId = 0;
        protected int deliveryServiceTypeId = 0;
        protected int formId = 0;
        protected string zipCode = "";
        protected int? transitDays = null;
        #endregion

        #region Constructors
        public DeliveryService()
        {
        }
        #endregion

        #region Properties
        [RawXml(Content = @"
		<id name=""DeliveryServiceId"" column=""`delivery_service_id`"">
			<generator class=""native"">
			</generator>
		</id>")]

        public virtual int DeliveryServiceId
        {
            get { return this.deliveryServiceId; }
            set { this.deliveryServiceId = value; }
        }

        [Property(Column = "`delivery_service_type_id`")]
        public virtual int DeliveryServiceTypeId
        {
            get { return this.deliveryServiceTypeId; }
            set { this.deliveryServiceTypeId = value; }
        }

        [Property(Column = "`form_id`")]
        public virtual int FormId
        {
            get { return this.formId; }
            set { this.formId = value; }
        }

        [Property(Column = "`zip_code`")]
        public virtual string ZipCode
        {
            get { return this.zipCode; }
            set { this.zipCode = value; }
        }

        [Property(Column = "`transit_days`")]
        public virtual int? TransitDays
        {
            get { return this.transitDays; }
            set { this.transitDays = value; }
        }
        #endregion

        #region Methods
        public static ICriteria CreateCriteria()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(DeliveryService));
                return c;
            }
        }

        public static DeliveryService GetDeliveryService(int deliveryServiceId)
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                return session.Get<DeliveryService>(deliveryServiceId);
            }
        }

        public static List<DeliveryService> GetDeliveryServiceList(ICriteria criteria)
        {
            return (List<DeliveryService>)criteria.List<DeliveryService>();
        }

        public static List<DeliveryService> GetDeliveryServiceList()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(DeliveryService));
                return (List<DeliveryService>)c.List<DeliveryService>();
            }
        }

        public static List<DeliveryService> GetDeliveryServiceList(string sortExpression, int maximumRows, int startRowIndex)
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(DeliveryService));
                if (sortExpression != null && sortExpression != "")
                {
                    // Get ascending or descending order
                    bool descending = sortExpression.Contains(" DESC");

                    // Strip off ASC or DESC ordering
                    sortExpression = sortExpression.Replace(" ASC", "");
                    sortExpression = sortExpression.Replace(" DESC", "");
                    sortExpression = sortExpression.Trim();

                    // Get multi column sort from the comma delimited string
                    List<String> expressions = new List<String>();
                    if (sortExpression.Contains(","))
                    {
                        string[] tokens = sortExpression.Split(",".ToCharArray());
                        for (int i = 0; i < tokens.Length; i++)
                        {
                            tokens[i] = tokens[i].Trim();
                            if (tokens[i] != "")
                                expressions.Add(tokens[i]);
                        }
                    }
                    else if (sortExpression != "")
                    {
                        expressions.Add(sortExpression);
                    }

                    // Create the order
                    for (int i = 0; i < expressions.Count; i++)
                    {
                        if (descending)
                            c.AddOrder(NHibernate.Expression.Order.Desc(expressions[i]));
                        else
                            c.AddOrder(NHibernate.Expression.Order.Asc(expressions[i]));
                    }
                }

                // Set offset and limit
                if (startRowIndex >= 0)
                    c.SetFirstResult(startRowIndex);

                if (maximumRows >= 0)
                    c.SetMaxResults(maximumRows);

                return (List<DeliveryService>)c.List<DeliveryService>();
            }
        }

        public static List<DeliveryService> GetDeliveryServiceList(string sortExpression)
        {
            return GetDeliveryServiceList(sortExpression, -1, -1);
        }

        public static void InsertDeliveryService(DeliveryService obj)
        {
            if (obj != null)
                obj.Insert();
        }

        public static void UpdateDeliveryService(DeliveryService obj)
        {
            if (obj != null)
                obj.Update();
        }

        public static void DeleteDeliveryService(DeliveryService obj)
        {
            if (obj != null)
                obj.Delete();
        }

        protected static DeliveryService PopulateDeliveryService(IDataReader r)
        {
            DeliveryService obj = new DeliveryService();
            obj.DeliveryServiceId = (int)r["delivery_service_id"];
            obj.DeliveryServiceTypeId = (int)r["delivery_service_type_id"];
            obj.FormId = (int)r["form_id"];
            obj.ZipCode = (string)r["zip_code"];
            obj.TransitDays = (r["transit_days"] == DBNull.Value) ? null : (int?)r["transit_days"];

            return obj;
        }

        public static int GetCount()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(DeliveryService));
                c.SetProjection(Projections.RowCount());
                return (int)c.UniqueResult();
            }
        }

        /// <summary>
        /// Insert the entity to database.
        /// </summary>
        public virtual void Insert()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ITransaction trans = session.BeginTransaction();
                try
                {
                    session.Save(this);
                    trans.Commit();
                }
                catch
                {
                    trans.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// Update the entity to database.
        /// </summary>
        public virtual void Update()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ITransaction trans = session.BeginTransaction();
                try
                {
                    session.Update(this);
                    trans.Commit();
                }
                catch
                {
                    trans.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// Persist the entity back to database.
        /// </summary>
        public virtual void Save()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ITransaction trans = session.BeginTransaction();
                try
                {
                    session.SaveOrUpdate(this);
                    trans.Commit();
                }
                catch
                {
                    trans.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// Delete entity in database.
        /// </summary>
        public virtual void Delete()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ITransaction trans = session.BeginTransaction();
                try
                {
                    session.Delete(this);
                    trans.Commit();
                }
                catch
                {
                    trans.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// Local implementation of Equals based on unique value members
        /// </summary>
        public override bool Equals(object obj)
        {
            if (this == obj)
                return true;

            if ((obj == null) || (obj.GetType() != this.GetType()))
                return false;

            DeliveryService castObj = (DeliveryService)obj;
            return (castObj != null && this.deliveryServiceId == castObj.DeliveryServiceId);
        }

        /// <summary>
        /// Local implementation of GetHashCode based on unique value members
        /// </summary>
        public override int GetHashCode()
        {
            return 29 * (1 + this.deliveryServiceId.GetHashCode());
        }
        #endregion
    }
}
