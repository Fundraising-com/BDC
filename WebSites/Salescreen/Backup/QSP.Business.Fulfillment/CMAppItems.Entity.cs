////////////////////////////////////////////////////////////////////////////////////////////
// Class generated by SqlCodeGen 1.1.0.0.
// Do not edit this file directly. Changes will be lost when this file is regenerated.
// Extensions should be added in a separate file using partial classes.
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using NHibernate;
using NHibernate.Expression;
using NHibernate.Mapping.Attributes;

namespace QSP.Business.Fulfillment
{
	[Serializable]
	[Class(Schema="`dbo`", Table="`CM_AppItems`")]
	public partial class CMAppItems
	{
		#region Constants
        public const string CMAppItemsEntity = "CMAppItems";
		public const string AppItemIDProperty = "AppItemID";
		public const string NoAppItemProperty = "NoAppItem";
		public const string SectionIDProperty = "SectionID";
		public const string NameProperty = "Name";
		public const string DescriptionProperty = "Description";
		public const string PageUrlProperty = "PageUrl";
		public const string InstructionProperty = "Instruction";
		public const string ImageUrlProperty = "ImageUrl";
		public const string ReportFileNameProperty = "ReportFileName";
		public const string DisplayMenuProperty = "DisplayMenu";
		public const string NoStepProperty = "NoStep";
		public const string ReportSPProperty = "ReportSP";
		public const string AppItemParentIDProperty = "AppItemParentID";
		public const string IsMenuProperty = "IsMenu";
		public const string DisplayOrderProperty = "DisplayOrder";
		public const string IsAdvMenuProperty = "IsAdvMenu";
		public const string ControlUrlProperty = "ControlUrl";
		public const string OpenInNewPageProperty = "OpenInNewPage";
		public const string EntityTypeIDProperty = "EntityTypeID";
		public const string PageTitleProperty = "PageTitle";
		public const string SectionTitleProperty = "SectionTitle";
		#endregion

		#region Fields
		protected int appItemID = 0;
		protected int? noAppItem = null;
		protected int? sectionID = null;
		protected string name = null;
		protected string description = null;
		protected string pageUrl = null;
		protected string instruction = null;
		protected string imageUrl = null;
		protected string reportFileName = null;
		protected bool? displayMenu = null;
		protected int? noStep = null;
		protected string reportSP = null;
		protected int? appItemParentID = null;
		protected bool? isMenu = false;
		protected int? displayOrder = null;
		protected bool? isAdvMenu = false;
		protected string controlUrl = null;
		protected bool? openInNewPage = false;
		protected int? entityTypeID = null;
		protected string pageTitle = null;
		protected string sectionTitle = null;
		#endregion

		#region Constructors
		public CMAppItems() 
		{
		}
		#endregion

		#region Properties
		[RawXml(Content=@"
		<id name=""AppItemID"" column=""`AppItem_ID`"">
			<generator class=""native"">
			</generator>
		</id>")]

		public virtual int AppItemID
		{
			get { return this.appItemID; }
			set { this.appItemID = value; }
		}

		[Property(Column="`NoAppItem`")]
		public virtual int? NoAppItem
		{
			get { return this.noAppItem; }
			set { this.noAppItem = value; }
		}

		[Property(Column="`Section_ID`")]
		public virtual int? SectionID
		{
			get { return this.sectionID; }
			set { this.sectionID = value; }
		}

		[Property(Column="`Name`")]
		public virtual string Name
		{
			get { return this.name; }
			set { this.name = value; }
		}

		[Property(Column="`Description`")]
		public virtual string Description
		{
			get { return this.description; }
			set { this.description = value; }
		}

		[Property(Column="`PageUrl`")]
		public virtual string PageUrl
		{
			get { return this.pageUrl; }
			set { this.pageUrl = value; }
		}

		[Property(Column="`Instruction`")]
		public virtual string Instruction
		{
			get { return this.instruction; }
			set { this.instruction = value; }
		}

		[Property(Column="`ImageUrl`")]
		public virtual string ImageUrl
		{
			get { return this.imageUrl; }
			set { this.imageUrl = value; }
		}

		[Property(Column="`ReportFileName`")]
		public virtual string ReportFileName
		{
			get { return this.reportFileName; }
			set { this.reportFileName = value; }
		}

		[Property(Column="`DisplayMenu`")]
		public virtual bool? DisplayMenu
		{
			get { return this.displayMenu; }
			set { this.displayMenu = value; }
		}

		[Property(Column="`NoStep`")]
		public virtual int? NoStep
		{
			get { return this.noStep; }
			set { this.noStep = value; }
		}

		[Property(Column="`Report_SP`")]
		public virtual string ReportSP
		{
			get { return this.reportSP; }
			set { this.reportSP = value; }
		}

		[Property(Column="`AppItem_ParentID`")]
		public virtual int? AppItemParentID
		{
			get { return this.appItemParentID; }
			set { this.appItemParentID = value; }
		}

		[Property(Column="`IsMenu`")]
		public virtual bool? IsMenu
		{
			get { return this.isMenu; }
			set { this.isMenu = value; }
		}

		[Property(Column="`DisplayOrder`")]
		public virtual int? DisplayOrder
		{
			get { return this.displayOrder; }
			set { this.displayOrder = value; }
		}

		[Property(Column="`IsAdvMenu`")]
		public virtual bool? IsAdvMenu
		{
			get { return this.isAdvMenu; }
			set { this.isAdvMenu = value; }
		}

		[Property(Column="`ControlUrl`")]
		public virtual string ControlUrl
		{
			get { return this.controlUrl; }
			set { this.controlUrl = value; }
		}

		[Property(Column="`OpenInNewPage`")]
		public virtual bool? OpenInNewPage
		{
			get { return this.openInNewPage; }
			set { this.openInNewPage = value; }
		}

		[Property(Column="`EntityTypeID`")]
		public virtual int? EntityTypeID
		{
			get { return this.entityTypeID; }
			set { this.entityTypeID = value; }
		}

		[Property(Column="`PageTitle`")]
		public virtual string PageTitle
		{
			get { return this.pageTitle; }
			set { this.pageTitle = value; }
		}

		[Property(Column="`SectionTitle`")]
		public virtual string SectionTitle
		{
			get { return this.sectionTitle; }
			set { this.sectionTitle = value; }
		}
		#endregion

		#region Methods

        public static ICriteria CreateCriteria()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(CMAppItems));
                return c;
            }
        }

		public static List<CMAppItems> GetCMAppItemsList(ICriteria criteria)
		{
			return (List<CMAppItems>)criteria.List<CMAppItems>();
		}

		public static CMAppItems GetCMAppItems(int appItemID)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				return session.Get<CMAppItems>(appItemID);
			}
		}

		public static List<CMAppItems> GetCMAppItemsList()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(CMAppItems));
				return (List<CMAppItems>)c.List<CMAppItems>();
			}
		}

		public static List<CMAppItems> GetCMAppItemsList(string sortExpression, int maximumRows, int startRowIndex)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(CMAppItems));
				if (sortExpression != null && sortExpression != "")
				{
					// Get ascending or descending order
					bool descending = sortExpression.Contains(" DESC");

					// Strip off ASC or DESC ordering
					sortExpression = sortExpression.Replace(" ASC", "");
					sortExpression = sortExpression.Replace(" DESC", "");
					sortExpression = sortExpression.Trim();

					// Get multi column sort from the comma delimited string
					List<String> expressions = new List<String>();
					if (sortExpression.Contains(","))
					{
						string[] tokens = sortExpression.Split(",".ToCharArray());
						for (int i = 0; i < tokens.Length; i++)
						{
							tokens[i] = tokens[i].Trim();
							if (tokens[i] != "")
								expressions.Add(tokens[i]);
						}
					}
					else if (sortExpression != "")
					{
						expressions.Add(sortExpression);
					}

					// Create the order
					for (int i = 0; i < expressions.Count; i++)
					{
						if (descending)
							c.AddOrder(NHibernate.Expression.Order.Desc(expressions[i]));
						else
							c.AddOrder(NHibernate.Expression.Order.Asc(expressions[i]));
					}
				}

				// Set offset and limit
				if (startRowIndex >= 0)
					c.SetFirstResult(startRowIndex);

				if (maximumRows >= 0)
					c.SetMaxResults(maximumRows);

				return (List<CMAppItems>)c.List<CMAppItems>();
			}
		}

		public static List<CMAppItems> GetCMAppItemsList(string sortExpression)
		{
			return GetCMAppItemsList(sortExpression, -1, -1);
		}

		public static void InsertCMAppItems(CMAppItems obj)
		{
			if (obj != null)
				obj.Insert();
		}

		public static void UpdateCMAppItems(CMAppItems obj)
		{
			if (obj != null)
				obj.Update();
		}

		public static void DeleteCMAppItems(CMAppItems obj)
		{
			if (obj != null)
				obj.Delete();
		}

        protected static CMAppItems PopulateCMAppItems(IDataReader r)
		{
			CMAppItems obj = new CMAppItems();
			obj.AppItemID = (int)r["AppItem_ID"];
			obj.NoAppItem = (r["NoAppItem"] == DBNull.Value) ? null : (int?)r["NoAppItem"];
			obj.SectionID = (r["Section_ID"] == DBNull.Value) ? null : (int?)r["Section_ID"];
			obj.Name = (r["Name"] == DBNull.Value) ? null : (string)r["Name"];
			obj.Description = (r["Description"] == DBNull.Value) ? null : (string)r["Description"];
			obj.PageUrl = (r["PageUrl"] == DBNull.Value) ? null : (string)r["PageUrl"];
			obj.Instruction = (r["Instruction"] == DBNull.Value) ? null : (string)r["Instruction"];
			obj.ImageUrl = (r["ImageUrl"] == DBNull.Value) ? null : (string)r["ImageUrl"];
			obj.ReportFileName = (r["ReportFileName"] == DBNull.Value) ? null : (string)r["ReportFileName"];
			obj.DisplayMenu = (r["DisplayMenu"] == DBNull.Value) ? null : (bool?)r["DisplayMenu"];
			obj.NoStep = (r["NoStep"] == DBNull.Value) ? null : (int?)r["NoStep"];
			obj.ReportSP = (r["Report_SP"] == DBNull.Value) ? null : (string)r["Report_SP"];
			obj.AppItemParentID = (r["AppItem_ParentID"] == DBNull.Value) ? null : (int?)r["AppItem_ParentID"];
			obj.IsMenu = (r["IsMenu"] == DBNull.Value) ? null : (bool?)r["IsMenu"];
			obj.DisplayOrder = (r["DisplayOrder"] == DBNull.Value) ? null : (int?)r["DisplayOrder"];
			obj.IsAdvMenu = (r["IsAdvMenu"] == DBNull.Value) ? null : (bool?)r["IsAdvMenu"];
			obj.ControlUrl = (r["ControlUrl"] == DBNull.Value) ? null : (string)r["ControlUrl"];
			obj.OpenInNewPage = (r["OpenInNewPage"] == DBNull.Value) ? null : (bool?)r["OpenInNewPage"];
			obj.EntityTypeID = (r["EntityTypeID"] == DBNull.Value) ? null : (int?)r["EntityTypeID"];
			obj.PageTitle = (r["PageTitle"] == DBNull.Value) ? null : (string)r["PageTitle"];
			obj.SectionTitle = (r["SectionTitle"] == DBNull.Value) ? null : (string)r["SectionTitle"];

			return obj;
		}

		public static int GetCount()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(CMAppItems));
				c.SetProjection(Projections.RowCount());
				return (int) c.UniqueResult();
			}
		}

		/// <summary>
		/// Insert the entity to database.
		/// </summary>
		public virtual void Insert()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Save(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Update the entity to database.
		/// </summary>
		public virtual void Update()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Update(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Persist the entity back to database.
		/// </summary>
		public virtual void Save()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.SaveOrUpdate(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Delete entity in database.
		/// </summary>
		public virtual void Delete()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Delete(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals(object obj)
		{
			if (this == obj)
				return true;

			if ((obj == null) || (obj.GetType() != this.GetType())) 
				return false;

			CMAppItems castObj = (CMAppItems)obj;
			return (castObj != null && this.appItemID == castObj.AppItemID);
		}

		/// <summary>
		/// Local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return 29 * (1 + this.appItemID.GetHashCode());
		}
		#endregion
	}
}
