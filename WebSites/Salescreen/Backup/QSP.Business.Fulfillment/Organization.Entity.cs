////////////////////////////////////////////////////////////////////////////////////////////
// Class generated by SqlCodeGen 1.1.0.0.
// Do not edit this file directly. Changes will be lost when this file is regenerated.
// Extensions should be added in a separate file using partial classes.
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using NHibernate;
using NHibernate.Expression;
using NHibernate.Mapping.Attributes;

namespace QSP.Business.Fulfillment
{
	[Serializable]
	[Class(Schema="`dbo`", Table="`organization`")]
	public partial class Organization
	{
		#region Constants
        public const string OrganizationEntity = "Organization";
		public const string OrganizationIdProperty = "OrganizationId";
		public const string OrganizationTypeIdProperty = "OrganizationTypeId";
		public const string OrganizationLevelIdProperty = "OrganizationLevelId";
		public const string OrganizationStatusIdProperty = "OrganizationStatusId";
		public const string OrganizationNameProperty = "OrganizationName";
		public const string FmIdProperty = "FmId";
		public const string TaxExemptionNumberProperty = "TaxExemptionNumber";
		public const string TaxExemptionExpirationDateProperty = "TaxExemptionExpirationDate";
		public const string MDRPIDProperty = "MDRPID";
		public const string ARNMBLProperty = "ARNMBL";
		public const string CommentsProperty = "Comments";
		public const string DeletedProperty = "Deleted";
		public const string CreateDateProperty = "CreateDate";
		public const string CreateUserIdProperty = "CreateUserId";
		public const string UpdateDateProperty = "UpdateDate";
		public const string UpdateUserIdProperty = "UpdateUserId";
		public const string BusinessDivisionIdProperty = "BusinessDivisionId";
		public const string DtsFlagpoleInstanceProperty = "DtsFlagpoleInstance";
		public const string DtsCAccountIDProperty = "DtsCAccountID";
		#endregion

		#region Fields
		protected int organizationId = 0;
		protected int organizationTypeId = 0;
		protected int? organizationLevelId = null;
		protected int? organizationStatusId = null;
		protected string organizationName = "";
		protected string fmId = null;
		protected string taxExemptionNumber = null;
		protected DateTime? taxExemptionExpirationDate = null;
		protected string mDRPID = null;
		protected string aRNMBL = null;
		protected string comments = null;
		protected bool deleted = false;
		protected DateTime createDate = DateTime.Now;
		protected int createUserId = 0;
		protected DateTime? updateDate = null;
		protected int? updateUserId = null;
		protected int businessDivisionId = 0;
		protected int? dtsFlagpoleInstance = null;
		protected int? dtsCAccountID = null;
		#endregion

		#region Constructors
		public Organization() 
		{
		}
		#endregion

		#region Properties
		[RawXml(Content=@"
		<id name=""OrganizationId"" column=""`organization_id`"">
			<generator class=""native"">
			</generator>
		</id>")]

		public virtual int OrganizationId
		{
			get { return this.organizationId; }
			set { this.organizationId = value; }
		}

		[Property(Column="`organization_type_id`")]
		public virtual int OrganizationTypeId
		{
			get { return this.organizationTypeId; }
			set { this.organizationTypeId = value; }
		}

		[Property(Column="`organization_level_id`")]
		public virtual int? OrganizationLevelId
		{
			get { return this.organizationLevelId; }
			set { this.organizationLevelId = value; }
		}

		[Property(Column="`organization_status_id`")]
		public virtual int? OrganizationStatusId
		{
			get { return this.organizationStatusId; }
			set { this.organizationStatusId = value; }
		}

		[Property(Column="`organization_name`")]
		public virtual string OrganizationName
		{
			get { return this.organizationName; }
			set { this.organizationName = value; }
		}

		[Property(Column="`fm_id`")]
		public virtual string FmId
		{
			get { return this.fmId; }
			set { this.fmId = value; }
		}

		[Property(Column="`tax_exemption_number`")]
		public virtual string TaxExemptionNumber
		{
			get { return this.taxExemptionNumber; }
			set { this.taxExemptionNumber = value; }
		}

		[Property(Column="`tax_exemption_expiration_date`")]
		public virtual DateTime? TaxExemptionExpirationDate
		{
			get { return this.taxExemptionExpirationDate; }
			set { this.taxExemptionExpirationDate = value; }
		}

		[Property(Column="`MDRPID`")]
		public virtual string MDRPID
		{
			get { return this.mDRPID; }
			set { this.mDRPID = value; }
		}

		[Property(Column="`ARNMBL`")]
		public virtual string ARNMBL
		{
			get { return this.aRNMBL; }
			set { this.aRNMBL = value; }
		}

		[Property(Column="`comments`")]
		public virtual string Comments
		{
			get { return this.comments; }
			set { this.comments = value; }
		}

		[Property(Column="`deleted`")]
		public virtual bool Deleted
		{
			get { return this.deleted; }
			set { this.deleted = value; }
		}

		[Property(Column="`create_date`")]
		public virtual DateTime CreateDate
		{
			get { return this.createDate; }
			set { this.createDate = value; }
		}

		[Property(Column="`create_user_id`")]
		public virtual int CreateUserId
		{
			get { return this.createUserId; }
			set { this.createUserId = value; }
		}

		[Property(Column="`update_date`")]
		public virtual DateTime? UpdateDate
		{
			get { return this.updateDate; }
			set { this.updateDate = value; }
		}

		[Property(Column="`update_user_id`")]
		public virtual int? UpdateUserId
		{
			get { return this.updateUserId; }
			set { this.updateUserId = value; }
		}

		[Property(Column="`business_division_id`")]
		public virtual int BusinessDivisionId
		{
			get { return this.businessDivisionId; }
			set { this.businessDivisionId = value; }
		}

		[Property(Column="`dts_FlagpoleInstance`")]
		public virtual int? DtsFlagpoleInstance
		{
			get { return this.dtsFlagpoleInstance; }
			set { this.dtsFlagpoleInstance = value; }
		}

		[Property(Column="`dts_CAccountID`")]
		public virtual int? DtsCAccountID
		{
			get { return this.dtsCAccountID; }
			set { this.dtsCAccountID = value; }
		}
		#endregion

		#region Methods

        public static ICriteria CreateCriteria()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(Organization));
                return c;
            }
        }

        public static List<Organization> GetOrganizationList(ICriteria criteria)
        {
            return (List<Organization>)criteria.List<Organization>();
        }

		public static Organization GetOrganization(int organizationId)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				return session.Get<Organization>(organizationId);
			}
		}

		public static List<Organization> GetOrganizationList()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(Organization));
				return (List<Organization>)c.List<Organization>();
			}
		}

		public static List<Organization> GetOrganizationList(string sortExpression, int maximumRows, int startRowIndex)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(Organization));
				if (sortExpression != null && sortExpression != "")
				{
					// Get ascending or descending order
					bool descending = sortExpression.Contains(" DESC");

					// Strip off ASC or DESC ordering
					sortExpression = sortExpression.Replace(" ASC", "");
					sortExpression = sortExpression.Replace(" DESC", "");
					sortExpression = sortExpression.Trim();

					// Get multi column sort from the comma delimited string
					List<String> expressions = new List<String>();
					if (sortExpression.Contains(","))
					{
						string[] tokens = sortExpression.Split(",".ToCharArray());
						for (int i = 0; i < tokens.Length; i++)
						{
							tokens[i] = tokens[i].Trim();
							if (tokens[i] != "")
								expressions.Add(tokens[i]);
						}
					}
					else if (sortExpression != "")
					{
						expressions.Add(sortExpression);
					}

					// Create the order
					for (int i = 0; i < expressions.Count; i++)
					{
						if (descending)
							c.AddOrder(NHibernate.Expression.Order.Desc(expressions[i]));
						else
							c.AddOrder(NHibernate.Expression.Order.Asc(expressions[i]));
					}
				}

				// Set offset and limit
				if (startRowIndex >= 0)
					c.SetFirstResult(startRowIndex);

				if (maximumRows >= 0)
					c.SetMaxResults(maximumRows);

				return (List<Organization>)c.List<Organization>();
			}
		}

		public static List<Organization> GetOrganizationList(string sortExpression)
		{
			return GetOrganizationList(sortExpression, -1, -1);
		}

		public static void InsertOrganization(Organization obj)
		{
			if (obj != null)
				obj.Insert();
		}

		public static void UpdateOrganization(Organization obj)
		{
			if (obj != null)
				obj.Update();
		}

		public static void DeleteOrganization(Organization obj)
		{
			if (obj != null)
				obj.Delete();
		}

        protected static Organization PopulateOrganization(IDataReader r)
		{
			Organization obj = new Organization();
			obj.OrganizationId = (int)r["organization_id"];
			obj.OrganizationTypeId = (int)r["organization_type_id"];
			obj.OrganizationLevelId = (r["organization_level_id"] == DBNull.Value) ? null : (int?)r["organization_level_id"];
			obj.OrganizationStatusId = (r["organization_status_id"] == DBNull.Value) ? null : (int?)r["organization_status_id"];
			obj.OrganizationName = (string)r["organization_name"];
			obj.FmId = (r["fm_id"] == DBNull.Value) ? null : (string)r["fm_id"];
			obj.TaxExemptionNumber = (r["tax_exemption_number"] == DBNull.Value) ? null : (string)r["tax_exemption_number"];
			obj.TaxExemptionExpirationDate = (r["tax_exemption_expiration_date"] == DBNull.Value) ? null : (DateTime?)r["tax_exemption_expiration_date"];
			obj.MDRPID = (r["MDRPID"] == DBNull.Value) ? null : (string)r["MDRPID"];
			obj.ARNMBL = (r["ARNMBL"] == DBNull.Value) ? null : (string)r["ARNMBL"];
			obj.Comments = (r["comments"] == DBNull.Value) ? null : (string)r["comments"];
			obj.Deleted = (bool)r["deleted"];
			obj.CreateDate = (DateTime)r["create_date"];
			obj.CreateUserId = (int)r["create_user_id"];
			obj.UpdateDate = (r["update_date"] == DBNull.Value) ? null : (DateTime?)r["update_date"];
			obj.UpdateUserId = (r["update_user_id"] == DBNull.Value) ? null : (int?)r["update_user_id"];
			obj.BusinessDivisionId = (int)r["business_division_id"];
			obj.DtsFlagpoleInstance = (r["dts_FlagpoleInstance"] == DBNull.Value) ? null : (int?)r["dts_FlagpoleInstance"];
			obj.DtsCAccountID = (r["dts_CAccountID"] == DBNull.Value) ? null : (int?)r["dts_CAccountID"];

			return obj;
		}

		public static int GetCount()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(Organization));
				c.SetProjection(Projections.RowCount());
				return (int) c.UniqueResult();
			}
		}

		/// <summary>
		/// Insert the entity to database.
		/// </summary>
		public virtual void Insert()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Save(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Update the entity to database.
		/// </summary>
		public virtual void Update()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Update(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Persist the entity back to database.
		/// </summary>
		public virtual void Save()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.SaveOrUpdate(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Delete entity in database.
		/// </summary>
		public virtual void Delete()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Delete(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals(object obj)
		{
			if (this == obj)
				return true;

			if ((obj == null) || (obj.GetType() != this.GetType())) 
				return false;

			Organization castObj = (Organization)obj;
			return (castObj != null && this.organizationId == castObj.OrganizationId);
		}

		/// <summary>
		/// Local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return 29 * (1 + this.organizationId.GetHashCode());
		}
		#endregion
	}
}
