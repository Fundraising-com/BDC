////////////////////////////////////////////////////////////////////////////////////////////
// Class generated by SqlCodeGen 1.1.0.0.
// Do not edit this file directly. Changes will be lost when this file is regenerated.
// Extensions should be added in a separate file using partial classes.
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using NHibernate;
using NHibernate.Expression;
using NHibernate.Mapping.Attributes;

namespace QSP.Business.Fulfillment
{
	[Serializable]
	[Class(Schema="`dbo`", Table="`task`")]
	public partial class Task
	{
		#region Constants
        public const string TaskEntity = "Task";
		public const string TaskIdProperty = "TaskId";
		public const string TaskTypeIdProperty = "TaskTypeId";
		public const string TaskNameProperty = "TaskName";
		public const string TemplateEmailIdProperty = "TemplateEmailId";
		public const string DescriptionProperty = "Description";
		public const string ParameterNameProperty = "ParameterName";
		public const string TaskSpProperty = "TaskSp";
		public const string DeletedProperty = "Deleted";
		public const string CreateDateProperty = "CreateDate";
		public const string CreateUserIdProperty = "CreateUserId";
		public const string UpdateDateProperty = "UpdateDate";
		public const string UpdateUserIdProperty = "UpdateUserId";
		public const string BusinessNotificationTypeIdProperty = "BusinessNotificationTypeId";
		#endregion

		#region Fields
		protected int taskId = 0;
		protected int? taskTypeId = null;
		protected string taskName = "";
		protected int? templateEmailId = null;
		protected string description = null;
		protected string parameterName = null;
		protected string taskSp = null;
		protected bool deleted = false;
		protected DateTime createDate = DateTime.Now;
		protected int createUserId = 0;
		protected DateTime? updateDate = DateTime.Now;
		protected int? updateUserId = null;
		protected int? businessNotificationTypeId = null;
		#endregion

		#region Constructors
		public Task() 
		{
		}
		#endregion

		#region Properties
		[RawXml(Content=@"
		<id name=""TaskId"" column=""`task_id`"">
			<generator class=""native"">
			</generator>
		</id>")]

		public virtual int TaskId
		{
			get { return this.taskId; }
			set { this.taskId = value; }
		}

		[Property(Column="`task_type_id`")]
		public virtual int? TaskTypeId
		{
			get { return this.taskTypeId; }
			set { this.taskTypeId = value; }
		}

		[Property(Column="`task_name`")]
		public virtual string TaskName
		{
			get { return this.taskName; }
			set { this.taskName = value; }
		}

		[Property(Column="`template_email_id`")]
		public virtual int? TemplateEmailId
		{
			get { return this.templateEmailId; }
			set { this.templateEmailId = value; }
		}

		[Property(Column="`description`")]
		public virtual string Description
		{
			get { return this.description; }
			set { this.description = value; }
		}

		[Property(Column="`parameter_name`")]
		public virtual string ParameterName
		{
			get { return this.parameterName; }
			set { this.parameterName = value; }
		}

		[Property(Column="`task_sp`")]
		public virtual string TaskSp
		{
			get { return this.taskSp; }
			set { this.taskSp = value; }
		}

		[Property(Column="`deleted`")]
		public virtual bool Deleted
		{
			get { return this.deleted; }
			set { this.deleted = value; }
		}

		[Property(Column="`create_date`")]
		public virtual DateTime CreateDate
		{
			get { return this.createDate; }
			set { this.createDate = value; }
		}

		[Property(Column="`create_user_id`")]
		public virtual int CreateUserId
		{
			get { return this.createUserId; }
			set { this.createUserId = value; }
		}

		[Property(Column="`update_date`")]
		public virtual DateTime? UpdateDate
		{
			get { return this.updateDate; }
			set { this.updateDate = value; }
		}

		[Property(Column="`update_user_id`")]
		public virtual int? UpdateUserId
		{
			get { return this.updateUserId; }
			set { this.updateUserId = value; }
		}

		[Property(Column="`business_notification_type_id`")]
		public virtual int? BusinessNotificationTypeId
		{
			get { return this.businessNotificationTypeId; }
			set { this.businessNotificationTypeId = value; }
		}
		#endregion

		#region Methods

        public static ICriteria CreateCriteria()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(Task));
                return c;
            }
        }

        public static List<Task> GetTaskList(ICriteria criteria)
        {
            return (List<Task>)criteria.List<Task>();
        }

		public static Task GetTask(int taskId)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				return session.Get<Task>(taskId);
			}
		}

		public static List<Task> GetTaskList()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(Task));
				return (List<Task>)c.List<Task>();
			}
		}

		public static List<Task> GetTaskList(string sortExpression, int maximumRows, int startRowIndex)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(Task));
				if (sortExpression != null && sortExpression != "")
				{
					// Get ascending or descending order
					bool descending = sortExpression.Contains(" DESC");

					// Strip off ASC or DESC ordering
					sortExpression = sortExpression.Replace(" ASC", "");
					sortExpression = sortExpression.Replace(" DESC", "");
					sortExpression = sortExpression.Trim();

					// Get multi column sort from the comma delimited string
					List<String> expressions = new List<String>();
					if (sortExpression.Contains(","))
					{
						string[] tokens = sortExpression.Split(",".ToCharArray());
						for (int i = 0; i < tokens.Length; i++)
						{
							tokens[i] = tokens[i].Trim();
							if (tokens[i] != "")
								expressions.Add(tokens[i]);
						}
					}
					else if (sortExpression != "")
					{
						expressions.Add(sortExpression);
					}

					// Create the order
					for (int i = 0; i < expressions.Count; i++)
					{
						if (descending)
							c.AddOrder(NHibernate.Expression.Order.Desc(expressions[i]));
						else
							c.AddOrder(NHibernate.Expression.Order.Asc(expressions[i]));
					}
				}

				// Set offset and limit
				if (startRowIndex >= 0)
					c.SetFirstResult(startRowIndex);

				if (maximumRows >= 0)
					c.SetMaxResults(maximumRows);

				return (List<Task>)c.List<Task>();
			}
		}

		public static List<Task> GetTaskList(string sortExpression)
		{
			return GetTaskList(sortExpression, -1, -1);
		}

		public static void InsertTask(Task obj)
		{
			if (obj != null)
				obj.Insert();
		}

		public static void UpdateTask(Task obj)
		{
			if (obj != null)
				obj.Update();
		}

		public static void DeleteTask(Task obj)
		{
			if (obj != null)
				obj.Delete();
		}

        protected static Task PopulateTask(IDataReader r)
		{
			Task obj = new Task();
			obj.TaskId = (int)r["task_id"];
			obj.TaskTypeId = (r["task_type_id"] == DBNull.Value) ? null : (int?)r["task_type_id"];
			obj.TaskName = (string)r["task_name"];
			obj.TemplateEmailId = (r["template_email_id"] == DBNull.Value) ? null : (int?)r["template_email_id"];
			obj.Description = (r["description"] == DBNull.Value) ? null : (string)r["description"];
			obj.ParameterName = (r["parameter_name"] == DBNull.Value) ? null : (string)r["parameter_name"];
			obj.TaskSp = (r["task_sp"] == DBNull.Value) ? null : (string)r["task_sp"];
			obj.Deleted = (bool)r["deleted"];
			obj.CreateDate = (DateTime)r["create_date"];
			obj.CreateUserId = (int)r["create_user_id"];
			obj.UpdateDate = (r["update_date"] == DBNull.Value) ? null : (DateTime?)r["update_date"];
			obj.UpdateUserId = (r["update_user_id"] == DBNull.Value) ? null : (int?)r["update_user_id"];
			obj.BusinessNotificationTypeId = (r["business_notification_type_id"] == DBNull.Value) ? null : (int?)r["business_notification_type_id"];

			return obj;
		}

		public static int GetCount()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(Task));
				c.SetProjection(Projections.RowCount());
				return (int) c.UniqueResult();
			}
		}

		/// <summary>
		/// Insert the entity to database.
		/// </summary>
		public virtual void Insert()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Save(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Update the entity to database.
		/// </summary>
		public virtual void Update()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Update(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Persist the entity back to database.
		/// </summary>
		public virtual void Save()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.SaveOrUpdate(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Delete entity in database.
		/// </summary>
		public virtual void Delete()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Delete(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals(object obj)
		{
			if (this == obj)
				return true;

			if ((obj == null) || (obj.GetType() != this.GetType())) 
				return false;

			Task castObj = (Task)obj;
			return (castObj != null && this.taskId == castObj.TaskId);
		}

		/// <summary>
		/// Local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return 29 * (1 + this.taskId.GetHashCode());
		}
		#endregion
	}
}
