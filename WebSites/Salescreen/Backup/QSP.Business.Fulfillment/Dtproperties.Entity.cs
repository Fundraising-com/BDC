////////////////////////////////////////////////////////////////////////////////////////////
// Class generated by SqlCodeGen 1.1.0.0.
// Do not edit this file directly. Changes will be lost when this file is regenerated.
// Extensions should be added in a separate file using partial classes.
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using NHibernate;
using NHibernate.Expression;
using NHibernate.Mapping.Attributes;

namespace QSP.Business.Fulfillment
{
	[Serializable]
	[Class(Schema="`dbo`", Table="`dtproperties`")]
	public partial class Dtproperties
	{
		#region Constants
        public const string DtpropertiesEntity = "Dtproperties";
		public const string IdProperty = "Id";
		public const string ObjectidProperty = "Objectid";
		public const string PropertyProperty = "Property";
		public const string PropertiesValueProperty = "PropertiesValue";
		public const string UvalueProperty = "Uvalue";
		public const string LvalueProperty = "Lvalue";
		public const string VersionProperty = "Version";
		#endregion

		#region Fields
		protected int id = 0;
		protected int? objectid = null;
		protected string property = "";
		protected string propertiesValue = null;
		protected string uvalue = null;
		protected byte[] lvalue = null;
		protected int version = 0;
		#endregion

		#region Constructors
		public Dtproperties() 
		{
		}
		#endregion

		#region Properties
		[RawXml(Content=@"
		<composite-id>
			<key-property name=""Id"" column=""`id`"" />
			<key-property name=""Property"" column=""`property`"" />
		</composite-id>")]

		public virtual int Id
		{
			get { return this.id; }
			set { this.id = value; }
		}

		[Property(Column="`objectid`")]
		public virtual int? Objectid
		{
			get { return this.objectid; }
			set { this.objectid = value; }
		}

		public virtual string Property
		{
			get { return this.property; }
			set { this.property = value; }
		}

		[Property(Column="`value`")]
		public virtual string PropertiesValue
		{
			get { return this.propertiesValue; }
			set { this.propertiesValue = value; }
		}

		[Property(Column="`uvalue`")]
		public virtual string Uvalue
		{
			get { return this.uvalue; }
			set { this.uvalue = value; }
		}

		[Property(Column="`lvalue`")]
		public virtual byte[] Lvalue
		{
			get { return this.lvalue; }
			set { this.lvalue = value; }
		}

		[Property(Column="`version`")]
		public virtual int Version
		{
			get { return this.version; }
			set { this.version = value; }
		}
		#endregion

		#region Methods

        public static ICriteria CreateCriteria()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(Dtproperties));
                return c;
            }
        }

        public static List<Dtproperties> GetDtpropertiesList(ICriteria criteria)
        {
            return (List<Dtproperties>)criteria.List<Dtproperties>();
        }

		public static Dtproperties GetDtproperties(int id, string property)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(Dtproperties));
				c.Add(Expression.Eq(IdProperty, id));
				c.Add(Expression.Eq(PropertyProperty, property));
				return c.UniqueResult<Dtproperties>();
			}
		}

		public static List<Dtproperties> GetDtpropertiesList()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(Dtproperties));
				return (List<Dtproperties>)c.List<Dtproperties>();
			}
		}

		public static List<Dtproperties> GetDtpropertiesList(string sortExpression, int maximumRows, int startRowIndex)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(Dtproperties));
				if (sortExpression != null && sortExpression != "")
				{
					// Get ascending or descending order
					bool descending = sortExpression.Contains(" DESC");

					// Strip off ASC or DESC ordering
					sortExpression = sortExpression.Replace(" ASC", "");
					sortExpression = sortExpression.Replace(" DESC", "");
					sortExpression = sortExpression.Trim();

					// Get multi column sort from the comma delimited string
					List<String> expressions = new List<String>();
					if (sortExpression.Contains(","))
					{
						string[] tokens = sortExpression.Split(",".ToCharArray());
						for (int i = 0; i < tokens.Length; i++)
						{
							tokens[i] = tokens[i].Trim();
							if (tokens[i] != "")
								expressions.Add(tokens[i]);
						}
					}
					else if (sortExpression != "")
					{
						expressions.Add(sortExpression);
					}

					// Create the order
					for (int i = 0; i < expressions.Count; i++)
					{
						if (descending)
							c.AddOrder(NHibernate.Expression.Order.Desc(expressions[i]));
						else
							c.AddOrder(NHibernate.Expression.Order.Asc(expressions[i]));
					}
				}

				// Set offset and limit
				if (startRowIndex >= 0)
					c.SetFirstResult(startRowIndex);

				if (maximumRows >= 0)
					c.SetMaxResults(maximumRows);

				return (List<Dtproperties>)c.List<Dtproperties>();
			}
		}

		public static List<Dtproperties> GetDtpropertiesList(string sortExpression)
		{
			return GetDtpropertiesList(sortExpression, -1, -1);
		}

		public static void InsertDtproperties(Dtproperties obj)
		{
			if (obj != null)
				obj.Insert();
		}

		public static void UpdateDtproperties(Dtproperties obj)
		{
			if (obj != null)
				obj.Update();
		}

		public static void DeleteDtproperties(Dtproperties obj)
		{
			if (obj != null)
				obj.Delete();
		}

        protected static Dtproperties PopulateDtproperties(IDataReader r)
		{
			Dtproperties obj = new Dtproperties();
			obj.Id = (int)r["id"];
			obj.Objectid = (r["objectid"] == DBNull.Value) ? null : (int?)r["objectid"];
			obj.Property = (string)r["property"];
			obj.PropertiesValue = (r["value"] == DBNull.Value) ? null : (string)r["value"];
			obj.Uvalue = (r["uvalue"] == DBNull.Value) ? null : (string)r["uvalue"];
			obj.Lvalue = (r["lvalue"] == DBNull.Value) ? null : (byte[])r["lvalue"];
			obj.Version = (int)r["version"];

			return obj;
		}

		public static int GetCount()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(Dtproperties));
				c.SetProjection(Projections.RowCount());
				return (int) c.UniqueResult();
			}
		}

		/// <summary>
		/// Insert the entity to database.
		/// </summary>
		public virtual void Insert()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Save(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Update the entity to database.
		/// </summary>
		public virtual void Update()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Update(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Delete entity in database.
		/// </summary>
		public virtual void Delete()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Delete(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals(object obj)
		{
			if (this == obj)
				return true;

			if ((obj == null) || (obj.GetType() != this.GetType())) 
				return false;

			Dtproperties castObj = (Dtproperties)obj;
			return (castObj != null && this.id == castObj.Id && this.property == castObj.Property);
		}

		/// <summary>
		/// Local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return 29 * (1 + this.id.GetHashCode() + this.property.GetHashCode());
		}
		#endregion
	}
}
