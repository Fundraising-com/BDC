////////////////////////////////////////////////////////////////////////////////////////////
// Class generated by SqlCodeGen 1.1.0.0.
// Do not edit this file directly. Changes will be lost when this file is regenerated.
// Extensions should be added in a separate file using partial classes.
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using NHibernate;
using NHibernate.Expression;
using NHibernate.Mapping.Attributes;

namespace QSP.Business.Fulfillment
{
	[Serializable]
	[Class(Schema="`dbo`", Table="`QSPCommon_DailyTransaction`")]
	public partial class QSPCommonDailyTransaction
	{
		#region Constants
        public const string QSPCommonDailyTransactionEntity = "QSPCommonDailyTransaction";
		public const string TransactionIDProperty = "TransactionID";
		public const string FiscalYearProperty = "FiscalYear";
		public const string CAccountFlagpoleInstanceProperty = "CAccountFlagpoleInstance";
		public const string CAccountIdProperty = "CAccountId";
		public const string CCAInstanceProperty = "CCAInstance";
		public const string NewCAccountFlagpoleProperty = "NewCAccountFlagpole";
		public const string NewCAccountProperty = "NewCAccount";
		public const string UpdateCAccountFlagpoleProperty = "UpdateCAccountFlagpole";
		public const string UpdateCAccountProperty = "UpdateCAccount";
		public const string UpdateCCAProperty = "UpdateCCA";
		public const string FromFlagpoleInstanceProperty = "FromFlagpoleInstance";
		public const string ToFlagpoleInstanceProperty = "ToFlagpoleInstance";
		public const string TransferCAccountProperty = "TransferCAccount";
		public const string StatusProperty = "Status";
		public const string CreateDateProperty = "CreateDate";
		public const string UpdateDateProperty = "UpdateDate";
		#endregion

		#region Fields
		protected int transactionID = 0;
		protected int fiscalYear = 0;
		protected int? cAccountFlagpoleInstance = null;
		protected int? cAccountId = null;
		protected int? cCAInstance = null;
		protected bool newCAccountFlagpole = false;
		protected bool newCAccount = false;
		protected bool updateCAccountFlagpole = false;
		protected bool updateCAccount = false;
		protected bool updateCCA = false;
		protected int? fromFlagpoleInstance = null;
		protected int? toFlagpoleInstance = null;
		protected bool transferCAccount = false;
		protected byte? status = null;
		protected DateTime createDate = DateTime.Now;
		protected DateTime? updateDate = null;
		#endregion

		#region Constructors
		public QSPCommonDailyTransaction() 
		{
		}
		#endregion

		#region Properties
		[RawXml(Content=@"
		<id name=""TransactionID"" column=""`TransactionID`"">
			<generator class=""native"">
			</generator>
		</id>")]

		public virtual int TransactionID
		{
			get { return this.transactionID; }
			set { this.transactionID = value; }
		}

		[Property(Column="`FiscalYear`")]
		public virtual int FiscalYear
		{
			get { return this.fiscalYear; }
			set { this.fiscalYear = value; }
		}

		[Property(Column="`CAccount_FlagpoleInstance`")]
		public virtual int? CAccountFlagpoleInstance
		{
			get { return this.cAccountFlagpoleInstance; }
			set { this.cAccountFlagpoleInstance = value; }
		}

		[Property(Column="`CAccountId`")]
		public virtual int? CAccountId
		{
			get { return this.cAccountId; }
			set { this.cAccountId = value; }
		}

		[Property(Column="`CCAInstance`")]
		public virtual int? CCAInstance
		{
			get { return this.cCAInstance; }
			set { this.cCAInstance = value; }
		}

		[Property(Column="`New_CAccount_Flagpole`")]
		public virtual bool NewCAccountFlagpole
		{
			get { return this.newCAccountFlagpole; }
			set { this.newCAccountFlagpole = value; }
		}

		[Property(Column="`New_CAccount`")]
		public virtual bool NewCAccount
		{
			get { return this.newCAccount; }
			set { this.newCAccount = value; }
		}

		[Property(Column="`Update_CAccount_Flagpole`")]
		public virtual bool UpdateCAccountFlagpole
		{
			get { return this.updateCAccountFlagpole; }
			set { this.updateCAccountFlagpole = value; }
		}

		[Property(Column="`Update_CAccount`")]
		public virtual bool UpdateCAccount
		{
			get { return this.updateCAccount; }
			set { this.updateCAccount = value; }
		}

		[Property(Column="`Update_CCA`")]
		public virtual bool UpdateCCA
		{
			get { return this.updateCCA; }
			set { this.updateCCA = value; }
		}

		[Property(Column="`From_FlagpoleInstance`")]
		public virtual int? FromFlagpoleInstance
		{
			get { return this.fromFlagpoleInstance; }
			set { this.fromFlagpoleInstance = value; }
		}

		[Property(Column="`To_FlagpoleInstance`")]
		public virtual int? ToFlagpoleInstance
		{
			get { return this.toFlagpoleInstance; }
			set { this.toFlagpoleInstance = value; }
		}

		[Property(Column="`TransferCAccount`")]
		public virtual bool TransferCAccount
		{
			get { return this.transferCAccount; }
			set { this.transferCAccount = value; }
		}

		[Property(Column="`Status`")]
		public virtual byte? Status
		{
			get { return this.status; }
			set { this.status = value; }
		}

		[Property(Column="`CreateDate`")]
		public virtual DateTime CreateDate
		{
			get { return this.createDate; }
			set { this.createDate = value; }
		}

		[Property(Column="`UpdateDate`")]
		public virtual DateTime? UpdateDate
		{
			get { return this.updateDate; }
			set { this.updateDate = value; }
		}
		#endregion

		#region Methods

        public static ICriteria CreateCriteria()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(QSPCommonDailyTransaction));
                return c;
            }
        }

        public static List<QSPCommonDailyTransaction> GetQSPCommonDailyTransactionList(ICriteria criteria)
        {
            return (List<QSPCommonDailyTransaction>)criteria.List<QSPCommonDailyTransaction>();
        }

		public static QSPCommonDailyTransaction GetQSPCommonDailyTransaction(int transactionID)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				return session.Get<QSPCommonDailyTransaction>(transactionID);
			}
		}

		public static List<QSPCommonDailyTransaction> GetQSPCommonDailyTransactionList()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(QSPCommonDailyTransaction));
				return (List<QSPCommonDailyTransaction>)c.List<QSPCommonDailyTransaction>();
			}
		}

		public static List<QSPCommonDailyTransaction> GetQSPCommonDailyTransactionList(string sortExpression, int maximumRows, int startRowIndex)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(QSPCommonDailyTransaction));
				if (sortExpression != null && sortExpression != "")
				{
					// Get ascending or descending order
					bool descending = sortExpression.Contains(" DESC");

					// Strip off ASC or DESC ordering
					sortExpression = sortExpression.Replace(" ASC", "");
					sortExpression = sortExpression.Replace(" DESC", "");
					sortExpression = sortExpression.Trim();

					// Get multi column sort from the comma delimited string
					List<String> expressions = new List<String>();
					if (sortExpression.Contains(","))
					{
						string[] tokens = sortExpression.Split(",".ToCharArray());
						for (int i = 0; i < tokens.Length; i++)
						{
							tokens[i] = tokens[i].Trim();
							if (tokens[i] != "")
								expressions.Add(tokens[i]);
						}
					}
					else if (sortExpression != "")
					{
						expressions.Add(sortExpression);
					}

					// Create the order
					for (int i = 0; i < expressions.Count; i++)
					{
						if (descending)
							c.AddOrder(NHibernate.Expression.Order.Desc(expressions[i]));
						else
							c.AddOrder(NHibernate.Expression.Order.Asc(expressions[i]));
					}
				}

				// Set offset and limit
				if (startRowIndex >= 0)
					c.SetFirstResult(startRowIndex);

				if (maximumRows >= 0)
					c.SetMaxResults(maximumRows);

				return (List<QSPCommonDailyTransaction>)c.List<QSPCommonDailyTransaction>();
			}
		}

		public static List<QSPCommonDailyTransaction> GetQSPCommonDailyTransactionList(string sortExpression)
		{
			return GetQSPCommonDailyTransactionList(sortExpression, -1, -1);
		}

		public static void InsertQSPCommonDailyTransaction(QSPCommonDailyTransaction obj)
		{
			if (obj != null)
				obj.Insert();
		}

		public static void UpdateQSPCommonDailyTransaction(QSPCommonDailyTransaction obj)
		{
			if (obj != null)
				obj.Update();
		}

		public static void DeleteQSPCommonDailyTransaction(QSPCommonDailyTransaction obj)
		{
			if (obj != null)
				obj.Delete();
		}

        protected static QSPCommonDailyTransaction PopulateQSPCommonDailyTransaction(IDataReader r)
		{
			QSPCommonDailyTransaction obj = new QSPCommonDailyTransaction();
			obj.TransactionID = (int)r["TransactionID"];
			obj.FiscalYear = (int)r["FiscalYear"];
			obj.CAccountFlagpoleInstance = (r["CAccount_FlagpoleInstance"] == DBNull.Value) ? null : (int?)r["CAccount_FlagpoleInstance"];
			obj.CAccountId = (r["CAccountId"] == DBNull.Value) ? null : (int?)r["CAccountId"];
			obj.CCAInstance = (r["CCAInstance"] == DBNull.Value) ? null : (int?)r["CCAInstance"];
			obj.NewCAccountFlagpole = (bool)r["New_CAccount_Flagpole"];
			obj.NewCAccount = (bool)r["New_CAccount"];
			obj.UpdateCAccountFlagpole = (bool)r["Update_CAccount_Flagpole"];
			obj.UpdateCAccount = (bool)r["Update_CAccount"];
			obj.UpdateCCA = (bool)r["Update_CCA"];
			obj.FromFlagpoleInstance = (r["From_FlagpoleInstance"] == DBNull.Value) ? null : (int?)r["From_FlagpoleInstance"];
			obj.ToFlagpoleInstance = (r["To_FlagpoleInstance"] == DBNull.Value) ? null : (int?)r["To_FlagpoleInstance"];
			obj.TransferCAccount = (bool)r["TransferCAccount"];
			obj.Status = (r["Status"] == DBNull.Value) ? null : (byte?)r["Status"];
			obj.CreateDate = (DateTime)r["CreateDate"];
			obj.UpdateDate = (r["UpdateDate"] == DBNull.Value) ? null : (DateTime?)r["UpdateDate"];

			return obj;
		}

		public static int GetCount()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(QSPCommonDailyTransaction));
				c.SetProjection(Projections.RowCount());
				return (int) c.UniqueResult();
			}
		}

		/// <summary>
		/// Insert the entity to database.
		/// </summary>
		public virtual void Insert()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Save(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Update the entity to database.
		/// </summary>
		public virtual void Update()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Update(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Persist the entity back to database.
		/// </summary>
		public virtual void Save()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.SaveOrUpdate(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Delete entity in database.
		/// </summary>
		public virtual void Delete()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Delete(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals(object obj)
		{
			if (this == obj)
				return true;

			if ((obj == null) || (obj.GetType() != this.GetType())) 
				return false;

			QSPCommonDailyTransaction castObj = (QSPCommonDailyTransaction)obj;
			return (castObj != null && this.transactionID == castObj.TransactionID);
		}

		/// <summary>
		/// Local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return 29 * (1 + this.transactionID.GetHashCode());
		}
		#endregion
	}
}
