////////////////////////////////////////////////////////////////////////////////////////////
// Class generated by SqlCodeGen 1.1.0.0.
// Do not edit this file directly. Changes will be lost when this file is regenerated.
// Extensions should be added in a separate file using partial classes.
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using NHibernate;
using NHibernate.Expression;
using NHibernate.Mapping.Attributes;

namespace QSP.Business.Fulfillment
{
	[Serializable]
	[Class(Schema="`dbo`", Table="`QSPForm_logo`")]
	public partial class QSPFormLogo
	{
		#region Constants
        public const string QSPFormLogoEntity = "QSPFormLogo";
		public const string LogoIdProperty = "LogoId";
		public const string LogoNameProperty = "LogoName";
		public const string FieldSalesManagerIdProperty = "FieldSalesManagerId";
		public const string FileExtensionProperty = "FileExtension";
		public const string DescriptionProperty = "Description";
		public const string EnabledProperty = "Enabled";
		public const string DeletedProperty = "Deleted";
		public const string CreateDateProperty = "CreateDate";
		public const string CreateUserIdProperty = "CreateUserId";
		public const string UpdateDateProperty = "UpdateDate";
		public const string UpdateUserIdProperty = "UpdateUserId";
		public const string ImageCategoryIdProperty = "ImageCategoryId";
		public const string AccountIdProperty = "AccountId";
		#endregion

		#region Fields
		protected int logoId = 0;
		protected string logoName = "";
		protected int? fieldSalesManagerId = null;
		protected string fileExtension = "";
		protected string description = "";
		protected bool enabled = false;
		protected bool deleted = false;
		protected DateTime createDate = DateTime.Now;
		protected int createUserId = 0;
		protected DateTime updateDate = DateTime.Now;
		protected int updateUserId = 0;
		protected int imageCategoryId = 0;
		protected int? accountId = null;
		#endregion

		#region Constructors
		public QSPFormLogo() 
		{
		}
		#endregion

		#region Properties
		[RawXml(Content=@"
		<id name=""LogoId"" column=""`logo_id`"">
			<generator class=""native"">
			</generator>
		</id>")]

		public virtual int LogoId
		{
			get { return this.logoId; }
			set { this.logoId = value; }
		}

		[Property(Column="`logo_name`")]
		public virtual string LogoName
		{
			get { return this.logoName; }
			set { this.logoName = value; }
		}

		[Property(Column="`field_sales_manager_id`")]
		public virtual int? FieldSalesManagerId
		{
			get { return this.fieldSalesManagerId; }
			set { this.fieldSalesManagerId = value; }
		}

		[Property(Column="`file_extension`")]
		public virtual string FileExtension
		{
			get { return this.fileExtension; }
			set { this.fileExtension = value; }
		}

		[Property(Column="`description`")]
		public virtual string Description
		{
			get { return this.description; }
			set { this.description = value; }
		}

		[Property(Column="`enabled`")]
		public virtual bool Enabled
		{
			get { return this.enabled; }
			set { this.enabled = value; }
		}

		[Property(Column="`deleted`")]
		public virtual bool Deleted
		{
			get { return this.deleted; }
			set { this.deleted = value; }
		}

		[Property(Column="`create_date`")]
		public virtual DateTime CreateDate
		{
			get { return this.createDate; }
			set { this.createDate = value; }
		}

		[Property(Column="`create_user_id`")]
		public virtual int CreateUserId
		{
			get { return this.createUserId; }
			set { this.createUserId = value; }
		}

		[Property(Column="`update_date`")]
		public virtual DateTime UpdateDate
		{
			get { return this.updateDate; }
			set { this.updateDate = value; }
		}

		[Property(Column="`update_user_id`")]
		public virtual int UpdateUserId
		{
			get { return this.updateUserId; }
			set { this.updateUserId = value; }
		}

		[Property(Column="`image_category_id`")]
		public virtual int ImageCategoryId
		{
			get { return this.imageCategoryId; }
			set { this.imageCategoryId = value; }
		}

		[Property(Column="`account_id`")]
		public virtual int? AccountId
		{
			get { return this.accountId; }
			set { this.accountId = value; }
		}
		#endregion

		#region Methods

        public static ICriteria CreateCriteria()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(QSPFormLogo));
                return c;
            }
        }

        public static List<QSPFormLogo> GetQSPFormLogoList(ICriteria criteria)
        {
            return (List<QSPFormLogo>)criteria.List<QSPFormLogo>();
        }

		public static QSPFormLogo GetQSPFormLogo(int logoId)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				return session.Get<QSPFormLogo>(logoId);
			}
		}

		public static List<QSPFormLogo> GetQSPFormLogoList()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(QSPFormLogo));
				return (List<QSPFormLogo>)c.List<QSPFormLogo>();
			}
		}

		public static List<QSPFormLogo> GetQSPFormLogoList(string sortExpression, int maximumRows, int startRowIndex)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(QSPFormLogo));
				if (sortExpression != null && sortExpression != "")
				{
					// Get ascending or descending order
					bool descending = sortExpression.Contains(" DESC");

					// Strip off ASC or DESC ordering
					sortExpression = sortExpression.Replace(" ASC", "");
					sortExpression = sortExpression.Replace(" DESC", "");
					sortExpression = sortExpression.Trim();

					// Get multi column sort from the comma delimited string
					List<String> expressions = new List<String>();
					if (sortExpression.Contains(","))
					{
						string[] tokens = sortExpression.Split(",".ToCharArray());
						for (int i = 0; i < tokens.Length; i++)
						{
							tokens[i] = tokens[i].Trim();
							if (tokens[i] != "")
								expressions.Add(tokens[i]);
						}
					}
					else if (sortExpression != "")
					{
						expressions.Add(sortExpression);
					}

					// Create the order
					for (int i = 0; i < expressions.Count; i++)
					{
						if (descending)
							c.AddOrder(NHibernate.Expression.Order.Desc(expressions[i]));
						else
							c.AddOrder(NHibernate.Expression.Order.Asc(expressions[i]));
					}
				}

				// Set offset and limit
				if (startRowIndex >= 0)
					c.SetFirstResult(startRowIndex);

				if (maximumRows >= 0)
					c.SetMaxResults(maximumRows);

				return (List<QSPFormLogo>)c.List<QSPFormLogo>();
			}
		}

		public static List<QSPFormLogo> GetQSPFormLogoList(string sortExpression)
		{
			return GetQSPFormLogoList(sortExpression, -1, -1);
		}

		public static void InsertQSPFormLogo(QSPFormLogo obj)
		{
			if (obj != null)
				obj.Insert();
		}

		public static void UpdateQSPFormLogo(QSPFormLogo obj)
		{
			if (obj != null)
				obj.Update();
		}

		public static void DeleteQSPFormLogo(QSPFormLogo obj)
		{
			if (obj != null)
				obj.Delete();
		}

        protected static QSPFormLogo PopulateQSPFormLogo(IDataReader r)
		{
			QSPFormLogo obj = new QSPFormLogo();
			obj.LogoId = (int)r["logo_id"];
			obj.LogoName = (string)r["logo_name"];
			obj.FieldSalesManagerId = (r["field_sales_manager_id"] == DBNull.Value) ? null : (int?)r["field_sales_manager_id"];
			obj.FileExtension = (string)r["file_extension"];
			obj.Description = (string)r["description"];
			obj.Enabled = (bool)r["enabled"];
			obj.Deleted = (bool)r["deleted"];
			obj.CreateDate = (DateTime)r["create_date"];
			obj.CreateUserId = (int)r["create_user_id"];
			obj.UpdateDate = (DateTime)r["update_date"];
			obj.UpdateUserId = (int)r["update_user_id"];
			obj.ImageCategoryId = (int)r["image_category_id"];
			obj.AccountId = (r["account_id"] == DBNull.Value) ? null : (int?)r["account_id"];

			return obj;
		}

		public static int GetCount()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(QSPFormLogo));
				c.SetProjection(Projections.RowCount());
				return (int) c.UniqueResult();
			}
		}

		/// <summary>
		/// Insert the entity to database.
		/// </summary>
		public virtual void Insert()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Save(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Update the entity to database.
		/// </summary>
		public virtual void Update()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Update(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Persist the entity back to database.
		/// </summary>
		public virtual void Save()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.SaveOrUpdate(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Delete entity in database.
		/// </summary>
		public virtual void Delete()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Delete(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals(object obj)
		{
			if (this == obj)
				return true;

			if ((obj == null) || (obj.GetType() != this.GetType())) 
				return false;

			QSPFormLogo castObj = (QSPFormLogo)obj;
			return (castObj != null && this.logoId == castObj.LogoId);
		}

		/// <summary>
		/// Local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return 29 * (1 + this.logoId.GetHashCode());
		}
		#endregion
	}
}
