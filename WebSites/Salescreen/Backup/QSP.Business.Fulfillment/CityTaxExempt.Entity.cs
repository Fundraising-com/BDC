////////////////////////////////////////////////////////////////////////////////////////////
// Class generated by SqlCodeGen 1.1.0.0.
// Do not edit this file directly. Changes will be lost when this file is regenerated.
// Extensions should be added in a separate file using partial classes.
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using NHibernate;
using NHibernate.Expression;
using NHibernate.Mapping.Attributes;

namespace QSP.Business.Fulfillment
{
	[Serializable]
	[Class(Schema="`dbo`", Table="`city_tax_exempt`")]
	public partial class CityTaxExempt
	{
		#region Constants
        public const string CityTaxExemptEntity = "CityTaxExempt";
		public const string CityTaxExemptIdProperty = "CityTaxExemptId";
		public const string CityNameProperty = "CityName";
		public const string ZipCodeStartProperty = "ZipCodeStart";
		public const string ZipCodeEndProperty = "ZipCodeEnd";
		public const string SubdivisionCodeProperty = "SubdivisionCode";
		#endregion

		#region Fields
		protected int cityTaxExemptId = 0;
		protected string cityName = "";
		protected int? zipCodeStart = null;
		protected int? zipCodeEnd = null;
		protected int subdivisionCode = 0;
		#endregion

		#region Constructors
		public CityTaxExempt() 
		{
		}
		#endregion

		#region Properties
		[RawXml(Content=@"
		<id name=""CityTaxExemptId"" column=""`city_tax_exempt_id`"">
			<generator class=""native"">
			</generator>
		</id>")]

		public virtual int CityTaxExemptId
		{
			get { return this.cityTaxExemptId; }
			set { this.cityTaxExemptId = value; }
		}

		[Property(Column="`city_name`")]
		public virtual string CityName
		{
			get { return this.cityName; }
			set { this.cityName = value; }
		}

		[Property(Column="`zip_code_start`")]
		public virtual int? ZipCodeStart
		{
			get { return this.zipCodeStart; }
			set { this.zipCodeStart = value; }
		}

		[Property(Column="`zip_code_end`")]
		public virtual int? ZipCodeEnd
		{
			get { return this.zipCodeEnd; }
			set { this.zipCodeEnd = value; }
		}

		[Property(Column="`subdivision_code`")]
		public virtual int SubdivisionCode
		{
			get { return this.subdivisionCode; }
			set { this.subdivisionCode = value; }
		}
		#endregion

		#region Methods

        public static ICriteria CreateCriteria()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(CityTaxExempt));
                return c;
            }
        }

        public static List<CityTaxExempt> GetCityTaxExemptList(ICriteria criteria)
        {
            return (List<CityTaxExempt>)criteria.List<CityTaxExempt>();
        }

		public static CityTaxExempt GetCityTaxExempt(int cityTaxExemptId)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				return session.Get<CityTaxExempt>(cityTaxExemptId);
			}
		}

		public static List<CityTaxExempt> GetCityTaxExemptList()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(CityTaxExempt));
				return (List<CityTaxExempt>)c.List<CityTaxExempt>();
			}
		}

		public static List<CityTaxExempt> GetCityTaxExemptList(string sortExpression, int maximumRows, int startRowIndex)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(CityTaxExempt));
				if (sortExpression != null && sortExpression != "")
				{
					// Get ascending or descending order
					bool descending = sortExpression.Contains(" DESC");

					// Strip off ASC or DESC ordering
					sortExpression = sortExpression.Replace(" ASC", "");
					sortExpression = sortExpression.Replace(" DESC", "");
					sortExpression = sortExpression.Trim();

					// Get multi column sort from the comma delimited string
					List<String> expressions = new List<String>();
					if (sortExpression.Contains(","))
					{
						string[] tokens = sortExpression.Split(",".ToCharArray());
						for (int i = 0; i < tokens.Length; i++)
						{
							tokens[i] = tokens[i].Trim();
							if (tokens[i] != "")
								expressions.Add(tokens[i]);
						}
					}
					else if (sortExpression != "")
					{
						expressions.Add(sortExpression);
					}

					// Create the order
					for (int i = 0; i < expressions.Count; i++)
					{
						if (descending)
							c.AddOrder(NHibernate.Expression.Order.Desc(expressions[i]));
						else
							c.AddOrder(NHibernate.Expression.Order.Asc(expressions[i]));
					}
				}

				// Set offset and limit
				if (startRowIndex >= 0)
					c.SetFirstResult(startRowIndex);

				if (maximumRows >= 0)
					c.SetMaxResults(maximumRows);

				return (List<CityTaxExempt>)c.List<CityTaxExempt>();
			}
		}

		public static List<CityTaxExempt> GetCityTaxExemptList(string sortExpression)
		{
			return GetCityTaxExemptList(sortExpression, -1, -1);
		}

		public static void InsertCityTaxExempt(CityTaxExempt obj)
		{
			if (obj != null)
				obj.Insert();
		}

		public static void UpdateCityTaxExempt(CityTaxExempt obj)
		{
			if (obj != null)
				obj.Update();
		}

		public static void DeleteCityTaxExempt(CityTaxExempt obj)
		{
			if (obj != null)
				obj.Delete();
		}

        protected static CityTaxExempt PopulateCityTaxExempt(IDataReader r)
		{
			CityTaxExempt obj = new CityTaxExempt();
			obj.CityTaxExemptId = (int)r["city_tax_exempt_id"];
			obj.CityName = (string)r["city_name"];
			obj.ZipCodeStart = (r["zip_code_start"] == DBNull.Value) ? null : (int?)r["zip_code_start"];
			obj.ZipCodeEnd = (r["zip_code_end"] == DBNull.Value) ? null : (int?)r["zip_code_end"];
			obj.SubdivisionCode = (int)r["subdivision_code"];

			return obj;
		}

		public static int GetCount()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(CityTaxExempt));
				c.SetProjection(Projections.RowCount());
				return (int) c.UniqueResult();
			}
		}

		/// <summary>
		/// Insert the entity to database.
		/// </summary>
		public virtual void Insert()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Save(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Update the entity to database.
		/// </summary>
		public virtual void Update()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Update(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Persist the entity back to database.
		/// </summary>
		public virtual void Save()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.SaveOrUpdate(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Delete entity in database.
		/// </summary>
		public virtual void Delete()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Delete(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals(object obj)
		{
			if (this == obj)
				return true;

			if ((obj == null) || (obj.GetType() != this.GetType())) 
				return false;

			CityTaxExempt castObj = (CityTaxExempt)obj;
			return (castObj != null && this.cityTaxExemptId == castObj.CityTaxExemptId);
		}

		/// <summary>
		/// Local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return 29 * (1 + this.cityTaxExemptId.GetHashCode());
		}
		#endregion
	}
}
