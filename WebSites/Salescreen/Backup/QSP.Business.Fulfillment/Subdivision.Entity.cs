////////////////////////////////////////////////////////////////////////////////////////////
// Class generated by SqlCodeGen 1.1.0.0.
// Do not edit this file directly. Changes will be lost when this file is regenerated.
// Extensions should be added in a separate file using partial classes.
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using NHibernate;
using NHibernate.Expression;
using NHibernate.Mapping.Attributes;

namespace QSP.Business.Fulfillment
{
	[Serializable]
	[Class(Schema="`dbo`", Table="`subdivision`")]
	public partial class Subdivision
	{
		#region Constants
        public const string SubdivisionEntity = "Subdivision";
		public const string SubdivisionCodeProperty = "SubdivisionCode";
		public const string CountryCodeProperty = "CountryCode";
		public const string SubdivisionName1Property = "SubdivisionName1";
		public const string SubdivisionName2Property = "SubdivisionName2";
		public const string SubdivisionName3Property = "SubdivisionName3";
		public const string RegionalDivisionProperty = "RegionalDivision";
		public const string SubdivisionCategoryProperty = "SubdivisionCategory";
		#endregion

		#region Fields
		protected string subdivisionCode = "";
		protected string countryCode = "";
		protected string subdivisionName1 = "";
		protected string subdivisionName2 = null;
		protected string subdivisionName3 = null;
		protected string regionalDivision = null;
		protected string subdivisionCategory = null;
		#endregion

		#region Constructors
		public Subdivision() 
		{
		}
		#endregion

		#region Properties
		[RawXml(Content=@"
		<id name=""SubdivisionCode"" column=""`subdivision_code`"">
			<generator class=""assigned"">
			</generator>
		</id>")]

		public virtual string SubdivisionCode
		{
			get { return this.subdivisionCode; }
			set { this.subdivisionCode = value; }
		}

		[Property(Column="`country_code`")]
		public virtual string CountryCode
		{
			get { return this.countryCode; }
			set { this.countryCode = value; }
		}

		[Property(Column="`subdivision_name_1`")]
		public virtual string SubdivisionName1
		{
			get { return this.subdivisionName1; }
			set { this.subdivisionName1 = value; }
		}

		[Property(Column="`subdivision_name_2`")]
		public virtual string SubdivisionName2
		{
			get { return this.subdivisionName2; }
			set { this.subdivisionName2 = value; }
		}

		[Property(Column="`subdivision_name_3`")]
		public virtual string SubdivisionName3
		{
			get { return this.subdivisionName3; }
			set { this.subdivisionName3 = value; }
		}

		[Property(Column="`regional_division`")]
		public virtual string RegionalDivision
		{
			get { return this.regionalDivision; }
			set { this.regionalDivision = value; }
		}

		[Property(Column="`subdivision_category`")]
		public virtual string SubdivisionCategory
		{
			get { return this.subdivisionCategory; }
			set { this.subdivisionCategory = value; }
		}
		#endregion

		#region Methods

        public static ICriteria CreateCriteria()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(Subdivision));
                return c;
            }
        }

        public static List<Subdivision> GetSubdivisionList(ICriteria criteria)
        {
            return (List<Subdivision>)criteria.List<Subdivision>();
        }

		public static Subdivision GetSubdivision(string subdivisionCode)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				return session.Get<Subdivision>(subdivisionCode);
			}
		}

		public static List<Subdivision> GetSubdivisionList()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(Subdivision));
				return (List<Subdivision>)c.List<Subdivision>();
			}
		}

		public static List<Subdivision> GetSubdivisionList(string sortExpression, int maximumRows, int startRowIndex)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(Subdivision));
				if (sortExpression != null && sortExpression != "")
				{
					// Get ascending or descending order
					bool descending = sortExpression.Contains(" DESC");

					// Strip off ASC or DESC ordering
					sortExpression = sortExpression.Replace(" ASC", "");
					sortExpression = sortExpression.Replace(" DESC", "");
					sortExpression = sortExpression.Trim();

					// Get multi column sort from the comma delimited string
					List<String> expressions = new List<String>();
					if (sortExpression.Contains(","))
					{
						string[] tokens = sortExpression.Split(",".ToCharArray());
						for (int i = 0; i < tokens.Length; i++)
						{
							tokens[i] = tokens[i].Trim();
							if (tokens[i] != "")
								expressions.Add(tokens[i]);
						}
					}
					else if (sortExpression != "")
					{
						expressions.Add(sortExpression);
					}

					// Create the order
					for (int i = 0; i < expressions.Count; i++)
					{
						if (descending)
							c.AddOrder(NHibernate.Expression.Order.Desc(expressions[i]));
						else
							c.AddOrder(NHibernate.Expression.Order.Asc(expressions[i]));
					}
				}

				// Set offset and limit
				if (startRowIndex >= 0)
					c.SetFirstResult(startRowIndex);

				if (maximumRows >= 0)
					c.SetMaxResults(maximumRows);

				return (List<Subdivision>)c.List<Subdivision>();
			}
		}

		public static List<Subdivision> GetSubdivisionList(string sortExpression)
		{
			return GetSubdivisionList(sortExpression, -1, -1);
		}

		public static void InsertSubdivision(Subdivision obj)
		{
			if (obj != null)
				obj.Insert();
		}

		public static void UpdateSubdivision(Subdivision obj)
		{
			if (obj != null)
				obj.Update();
		}

		public static void DeleteSubdivision(Subdivision obj)
		{
			if (obj != null)
				obj.Delete();
		}

        protected static Subdivision PopulateSubdivision(IDataReader r)
		{
			Subdivision obj = new Subdivision();
			obj.SubdivisionCode = (string)r["subdivision_code"];
			obj.CountryCode = (string)r["country_code"];
			obj.SubdivisionName1 = (string)r["subdivision_name_1"];
			obj.SubdivisionName2 = (r["subdivision_name_2"] == DBNull.Value) ? null : (string)r["subdivision_name_2"];
			obj.SubdivisionName3 = (r["subdivision_name_3"] == DBNull.Value) ? null : (string)r["subdivision_name_3"];
			obj.RegionalDivision = (r["regional_division"] == DBNull.Value) ? null : (string)r["regional_division"];
			obj.SubdivisionCategory = (r["subdivision_category"] == DBNull.Value) ? null : (string)r["subdivision_category"];

			return obj;
		}

		public static int GetCount()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(Subdivision));
				c.SetProjection(Projections.RowCount());
				return (int) c.UniqueResult();
			}
		}

		/// <summary>
		/// Insert the entity to database.
		/// </summary>
		public virtual void Insert()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Save(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Update the entity to database.
		/// </summary>
		public virtual void Update()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Update(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Delete entity in database.
		/// </summary>
		public virtual void Delete()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Delete(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals(object obj)
		{
			if (this == obj)
				return true;

			if ((obj == null) || (obj.GetType() != this.GetType())) 
				return false;

			Subdivision castObj = (Subdivision)obj;
			return (castObj != null && this.subdivisionCode == castObj.SubdivisionCode);
		}

		/// <summary>
		/// Local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return 29 * (1 + this.subdivisionCode.GetHashCode());
		}
		#endregion
	}
}
