////////////////////////////////////////////////////////////////////////////////////////////
// Class generated by SqlCodeGen 1.1.0.0.
// Do not edit this file directly. Changes will be lost when this file is regenerated.
// Extensions should be added in a separate file using partial classes.
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using NHibernate;
using NHibernate.Expression;
using NHibernate.Mapping.Attributes;

namespace QSP.Business.Fulfillment
{
	[Serializable]
	[Class(Schema="`dbo`", Table="`entity_exception`")]
	public partial class EntityException
	{
		#region Constants
        public const string EntityExceptionEntity = "EntityException";
		public const string EntityExceptionIdProperty = "EntityExceptionId";
		public const string EntityIdProperty = "EntityId";
		public const string EntityTypeIdProperty = "EntityTypeId";
		public const string BusinessExceptionIdProperty = "BusinessExceptionId";
		public const string ExceptionTypeIdProperty = "ExceptionTypeId";
		public const string MessageProperty = "Message";
		public const string ExceptionExpressionProperty = "ExceptionExpression";
		public const string FeesValueExpressionProperty = "FeesValueExpression";
		public const string FeesValueAmountProperty = "FeesValueAmount";
		public const string ApprovedProperty = "Approved";
		public const string ApproveDateProperty = "ApproveDate";
		public const string ApproveUserIdProperty = "ApproveUserId";
		public const string DeletedProperty = "Deleted";
		public const string CreateDateProperty = "CreateDate";
		public const string CreateUserIdProperty = "CreateUserId";
		public const string UpdateDateProperty = "UpdateDate";
		public const string UpdateUserIdProperty = "UpdateUserId";
		#endregion

		#region Fields
		protected int entityExceptionId = 0;
		protected int entityId = 0;
		protected int entityTypeId = 0;
		protected int businessExceptionId = 0;
		protected int? exceptionTypeId = null;
		protected string message = null;
		protected string exceptionExpression = null;
		protected string feesValueExpression = null;
		protected decimal? feesValueAmount = 0;
		protected bool? approved = false;
		protected DateTime? approveDate = null;
		protected int? approveUserId = null;
		protected bool deleted = false;
		protected DateTime createDate = DateTime.Now;
		protected int createUserId = 0;
		protected DateTime? updateDate = DateTime.Now;
		protected int? updateUserId = null;
		#endregion

		#region Constructors
		public EntityException() 
		{
		}
		#endregion

		#region Properties
		[RawXml(Content=@"
		<id name=""EntityExceptionId"" column=""`entity_exception_id`"">
			<generator class=""native"">
			</generator>
		</id>")]

		public virtual int EntityExceptionId
		{
			get { return this.entityExceptionId; }
			set { this.entityExceptionId = value; }
		}

		[Property(Column="`entity_id`")]
		public virtual int EntityId
		{
			get { return this.entityId; }
			set { this.entityId = value; }
		}

		[Property(Column="`entity_type_id`")]
		public virtual int EntityTypeId
		{
			get { return this.entityTypeId; }
			set { this.entityTypeId = value; }
		}

		[Property(Column="`business_exception_id`")]
		public virtual int BusinessExceptionId
		{
			get { return this.businessExceptionId; }
			set { this.businessExceptionId = value; }
		}

		[Property(Column="`exception_type_id`")]
		public virtual int? ExceptionTypeId
		{
			get { return this.exceptionTypeId; }
			set { this.exceptionTypeId = value; }
		}

		[Property(Column="`message`")]
		public virtual string Message
		{
			get { return this.message; }
			set { this.message = value; }
		}

		[Property(Column="`exception_expression`")]
		public virtual string ExceptionExpression
		{
			get { return this.exceptionExpression; }
			set { this.exceptionExpression = value; }
		}

		[Property(Column="`fees_value_expression`")]
		public virtual string FeesValueExpression
		{
			get { return this.feesValueExpression; }
			set { this.feesValueExpression = value; }
		}

		[Property(Column="`fees_value_amount`")]
		public virtual decimal? FeesValueAmount
		{
			get { return this.feesValueAmount; }
			set { this.feesValueAmount = value; }
		}

		[Property(Column="`approved`")]
		public virtual bool? Approved
		{
			get { return this.approved; }
			set { this.approved = value; }
		}

		[Property(Column="`approve_date`")]
		public virtual DateTime? ApproveDate
		{
			get { return this.approveDate; }
			set { this.approveDate = value; }
		}

		[Property(Column="`approve_user_id`")]
		public virtual int? ApproveUserId
		{
			get { return this.approveUserId; }
			set { this.approveUserId = value; }
		}

		[Property(Column="`deleted`")]
		public virtual bool Deleted
		{
			get { return this.deleted; }
			set { this.deleted = value; }
		}

		[Property(Column="`create_date`")]
		public virtual DateTime CreateDate
		{
			get { return this.createDate; }
			set { this.createDate = value; }
		}

		[Property(Column="`create_user_id`")]
		public virtual int CreateUserId
		{
			get { return this.createUserId; }
			set { this.createUserId = value; }
		}

		[Property(Column="`update_date`")]
		public virtual DateTime? UpdateDate
		{
			get { return this.updateDate; }
			set { this.updateDate = value; }
		}

		[Property(Column="`update_user_id`")]
		public virtual int? UpdateUserId
		{
			get { return this.updateUserId; }
			set { this.updateUserId = value; }
		}
		#endregion

		#region Methods

        public static ICriteria CreateCriteria()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(EntityException));
                return c;
            }
        }

        public static List<EntityException> GetEntityExceptionList(ICriteria criteria)
        {
            return (List<EntityException>)criteria.List<EntityException>();
        }

		public static EntityException GetEntityException(int entityExceptionId)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				return session.Get<EntityException>(entityExceptionId);
			}
		}

		public static List<EntityException> GetEntityExceptionList()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(EntityException));
				return (List<EntityException>)c.List<EntityException>();
			}
		}

		public static List<EntityException> GetEntityExceptionList(string sortExpression, int maximumRows, int startRowIndex)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(EntityException));
				if (sortExpression != null && sortExpression != "")
				{
					// Get ascending or descending order
					bool descending = sortExpression.Contains(" DESC");

					// Strip off ASC or DESC ordering
					sortExpression = sortExpression.Replace(" ASC", "");
					sortExpression = sortExpression.Replace(" DESC", "");
					sortExpression = sortExpression.Trim();

					// Get multi column sort from the comma delimited string
					List<String> expressions = new List<String>();
					if (sortExpression.Contains(","))
					{
						string[] tokens = sortExpression.Split(",".ToCharArray());
						for (int i = 0; i < tokens.Length; i++)
						{
							tokens[i] = tokens[i].Trim();
							if (tokens[i] != "")
								expressions.Add(tokens[i]);
						}
					}
					else if (sortExpression != "")
					{
						expressions.Add(sortExpression);
					}

					// Create the order
					for (int i = 0; i < expressions.Count; i++)
					{
						if (descending)
							c.AddOrder(NHibernate.Expression.Order.Desc(expressions[i]));
						else
							c.AddOrder(NHibernate.Expression.Order.Asc(expressions[i]));
					}
				}

				// Set offset and limit
				if (startRowIndex >= 0)
					c.SetFirstResult(startRowIndex);

				if (maximumRows >= 0)
					c.SetMaxResults(maximumRows);

				return (List<EntityException>)c.List<EntityException>();
			}
		}

		public static List<EntityException> GetEntityExceptionList(string sortExpression)
		{
			return GetEntityExceptionList(sortExpression, -1, -1);
		}

		public static void InsertEntityException(EntityException obj)
		{
			if (obj != null)
				obj.Insert();
		}

		public static void UpdateEntityException(EntityException obj)
		{
			if (obj != null)
				obj.Update();
		}

		public static void DeleteEntityException(EntityException obj)
		{
			if (obj != null)
				obj.Delete();
		}

        protected static EntityException PopulateEntityException(IDataReader r)
		{
			EntityException obj = new EntityException();
			obj.EntityExceptionId = (int)r["entity_exception_id"];
			obj.EntityId = (int)r["entity_id"];
			obj.EntityTypeId = (int)r["entity_type_id"];
			obj.BusinessExceptionId = (int)r["business_exception_id"];
			obj.ExceptionTypeId = (r["exception_type_id"] == DBNull.Value) ? null : (int?)r["exception_type_id"];
			obj.Message = (r["message"] == DBNull.Value) ? null : (string)r["message"];
			obj.ExceptionExpression = (r["exception_expression"] == DBNull.Value) ? null : (string)r["exception_expression"];
			obj.FeesValueExpression = (r["fees_value_expression"] == DBNull.Value) ? null : (string)r["fees_value_expression"];
			obj.FeesValueAmount = (r["fees_value_amount"] == DBNull.Value) ? null : (decimal?)r["fees_value_amount"];
			obj.Approved = (r["approved"] == DBNull.Value) ? null : (bool?)r["approved"];
			obj.ApproveDate = (r["approve_date"] == DBNull.Value) ? null : (DateTime?)r["approve_date"];
			obj.ApproveUserId = (r["approve_user_id"] == DBNull.Value) ? null : (int?)r["approve_user_id"];
			obj.Deleted = (bool)r["deleted"];
			obj.CreateDate = (DateTime)r["create_date"];
			obj.CreateUserId = (int)r["create_user_id"];
			obj.UpdateDate = (r["update_date"] == DBNull.Value) ? null : (DateTime?)r["update_date"];
			obj.UpdateUserId = (r["update_user_id"] == DBNull.Value) ? null : (int?)r["update_user_id"];

			return obj;
		}

		public static int GetCount()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(EntityException));
				c.SetProjection(Projections.RowCount());
				return (int) c.UniqueResult();
			}
		}

		/// <summary>
		/// Insert the entity to database.
		/// </summary>
		public virtual void Insert()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Save(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Update the entity to database.
		/// </summary>
		public virtual void Update()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Update(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Persist the entity back to database.
		/// </summary>
		public virtual void Save()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.SaveOrUpdate(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Delete entity in database.
		/// </summary>
		public virtual void Delete()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Delete(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals(object obj)
		{
			if (this == obj)
				return true;

			if ((obj == null) || (obj.GetType() != this.GetType())) 
				return false;

			EntityException castObj = (EntityException)obj;
			return (castObj != null && this.entityExceptionId == castObj.EntityExceptionId);
		}

		/// <summary>
		/// Local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return 29 * (1 + this.entityExceptionId.GetHashCode());
		}
		#endregion
	}
}
