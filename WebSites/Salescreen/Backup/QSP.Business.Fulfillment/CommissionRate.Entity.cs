////////////////////////////////////////////////////////////////////////////////////////////
// Class generated by SqlCodeGen 1.1.0.0.
// Do not edit this file directly. Changes will be lost when this file is regenerated.
// Extensions should be added in a separate file using partial classes.
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using NHibernate;
using NHibernate.Expression;
using NHibernate.Mapping.Attributes;

namespace QSP.Business.Fulfillment
{
	[Serializable]
	[Class(Schema="`dbo`", Table="`commission_rate`")]
	public partial class CommissionRate
    {
        #region Constants
        public const string CommissionRateEntity = "CommissionRate";
        public const string CommissionRateIdProperty = "CommissionRateId";
        public const string CatalogItemCategoryIdProperty = "CatalogItemCategoryId"; 
        public const string CatalogItemIdProperty = "CatalogItemId";
        public const string ProfitRateValueProperty = "ProfitRateValue";
        public const string CommissionRateValueProperty = "CommissionRateValue";
        public const string IsPaidUpfrontProperty = "IsPaidUpfront";
        public const string CountryCodeProperty = "CountryCode";
        #endregion

        #region Fields
        protected int commissionRateId = 0;
        protected int catalogItemCategoryId = 0;
        protected int? catalogItemId = 0;
        protected decimal? profitRateValue = 0;
        protected decimal commissionRateValue = 0;
        protected bool isPaidUpfront = false;
        protected string countryCode = "";
        #endregion

        #region Constructors
        public CommissionRate() 
		{
		}
		#endregion

        #region Properties
        [RawXml(Content = @"
		<id name=""CommissionRateId"" column=""`commission_rate_id`"">
			<generator class=""native"">
			</generator>
		</id>")]
        public virtual int CommissionRateId
        {
            get { return this.commissionRateId; }
            set { this.commissionRateId = value; }
        }

        /// <summary>
        /// Catalog item category id
        /// </summary>
        [Property(Column = "`catalog_item_category_id`")]
        public virtual int CatalogItemCategoryId
        {
            get { return this.catalogItemCategoryId; }
            set { this.catalogItemCategoryId = value; }
        }

        [Property(Column = "`catalog_item_id`")]
        public virtual int? CatalogItemId
        {
            get { return this.catalogItemId; }
            set { this.catalogItemId = value; }
        }

        [Property(Column = "`profit_rate_value`")]
        public virtual decimal? ProfitRateValue
        {
            get { return this.profitRateValue; }
            set { this.profitRateValue = value; }
        }

        [Property(Column = "`commission_rate_value`")]
        public virtual decimal CommissionRateValue
        {
            get { return this.commissionRateValue; }
            set { this.commissionRateValue = value; }
        }
        
        [Property(Column = "`is_paid_upfront`")]
        public virtual bool IsPaidUpfront
        {
            get { return this.isPaidUpfront; }
            set { this.isPaidUpfront = value; }
        }

        [Property(Column = "`country_code`")]
        public virtual string CountryCode
        {
            get { return this.countryCode; }
            set { this.countryCode = value; }
        }
        #endregion

        #region Methods
        public static ICriteria CreateCriteria()
        {
            ISession session = SqlSessionManager.OpenSession();
            ICriteria c = session.CreateCriteria(typeof(CommissionRate));
            return c;
        }

        public static CommissionRate GetCommissionRate(int commissionRateId)
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                return session.Get<CommissionRate>(commissionRateId);
            }
        }


        public static List<CommissionRate> GetCommissionRateList(ICriteria criteria)
        {
            return (List<CommissionRate>)criteria.List<CommissionRate>();
        }

        public static List<CommissionRate> GetCommissionRateList()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(CommissionRate));
                return (List<CommissionRate>)c.List<CommissionRate>();
            }
        }

        public static List<CommissionRate> GetCommissionRateList(string sortExpression, int maximumRows, int startRowIndex)
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(CommissionRate));
                if (sortExpression != null && sortExpression != "")
                {
                    // Get ascending or descending order
                    bool descending = sortExpression.Contains(" DESC");

                    // Strip off ASC or DESC ordering
                    sortExpression = sortExpression.Replace(" ASC", "");
                    sortExpression = sortExpression.Replace(" DESC", "");
                    sortExpression = sortExpression.Trim();

                    // Get multi column sort from the comma delimited string
                    List<String> expressions = new List<String>();
                    if (sortExpression.Contains(","))
                    {
                        string[] tokens = sortExpression.Split(",".ToCharArray());
                        for (int i = 0; i < tokens.Length; i++)
                        {
                            tokens[i] = tokens[i].Trim();
                            if (tokens[i] != "")
                                expressions.Add(tokens[i]);
                        }
                    }
                    else if (sortExpression != "")
                    {
                        expressions.Add(sortExpression);
                    }

                    // Create the order
                    for (int i = 0; i < expressions.Count; i++)
                    {
                        if (descending)
                            c.AddOrder(NHibernate.Expression.Order.Desc(expressions[i]));
                        else
                            c.AddOrder(NHibernate.Expression.Order.Asc(expressions[i]));
                    }
                }

                // Set offset and limit
                if (startRowIndex >= 0)
                    c.SetFirstResult(startRowIndex);

                if (maximumRows >= 0)
                    c.SetMaxResults(maximumRows);

                return (List<CommissionRate>)c.List<CommissionRate>();
            }
        }

        public static List<CommissionRate> GetCommissionRateList(string sortExpression)
        {
            return GetCommissionRateList(sortExpression, -1, -1);
        }

        public static void InsertCommissionRate(CommissionRate obj)
        {
            if (obj != null)
                obj.Insert();
        }

        public static void UpdateCommissionRate(CommissionRate obj)
        {
            if (obj != null)
                obj.Update();
        }

        public static void DeleteCommissionRate(CommissionRate obj)
        {
            if (obj != null)
                obj.Delete();
        }

        protected static CommissionRate PopulateCommissionRate(IDataReader r)
        {
            CommissionRate obj = new CommissionRate();
            obj.CommissionRateId = (int)r["commission_rate_id"];
            obj.CatalogItemCategoryId = (int)r["catalog_item_category_id"];
            obj.CatalogItemId = (r["catalog_item_id"] == DBNull.Value) ? null : (int?)r["catalog_item_id"];
            obj.ProfitRateValue = (r["profit_rate_value"] == DBNull.Value) ? null : (decimal?)r["profit_rate_value"];
            obj.CommissionRateValue = (decimal)r["commission_rate_value"];
            obj.IsPaidUpfront = (bool)r["is_paid_upfront"];
            obj.CountryCode = (string)r["country_code"];

            return obj;
        }

        public static int GetCount()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(CommissionRate));
                c.SetProjection(Projections.RowCount());
                return (int)c.UniqueResult();
            }
        }

        /// <summary>
        /// Insert the entity to database.
        /// </summary>
        public virtual void Insert()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ITransaction trans = session.BeginTransaction();
                try
                {
                    session.Save(this);
                    trans.Commit();
                }
                catch
                {
                    trans.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// Update the entity to database.
        /// </summary>
        public virtual void Update()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ITransaction trans = session.BeginTransaction();
                try
                {
                    session.Update(this);
                    trans.Commit();
                }
                catch
                {
                    trans.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// Persist the entity back to database.
        /// </summary>
        public virtual void Save()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ITransaction trans = session.BeginTransaction();
                try
                {
                    session.SaveOrUpdate(this);
                    trans.Commit();
                }
                catch
                {
                    trans.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// Delete entity in database.
        /// </summary>
        public virtual void Delete()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ITransaction trans = session.BeginTransaction();
                try
                {
                    session.Delete(this);
                    trans.Commit();
                }
                catch
                {
                    trans.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// Local implementation of Equals based on unique value members
        /// </summary>
        public override bool Equals(object obj)
        {
            if (this == obj)
                return true;

            if ((obj == null) || (obj.GetType() != this.GetType()))
                return false;

            CommissionRate castObj = (CommissionRate)obj;
            return (castObj != null && this.commissionRateId == castObj.CommissionRateId);
        }

        /// <summary>
        /// Local implementation of GetHashCode based on unique value members
        /// </summary>
        public override int GetHashCode()
        {
            return 29 * (1 + this.commissionRateId.GetHashCode());
        }
        #endregion
    }
}
