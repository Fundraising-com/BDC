////////////////////////////////////////////////////////////////////////////////////////////
// Class generated by SqlCodeGen 1.1.0.0.
// Do not edit this file directly. Changes will be lost when this file is regenerated.
// Extensions should be added in a separate file using partial classes.
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using NHibernate;
using NHibernate.Expression;
using NHibernate.Mapping.Attributes;

namespace QSP.Business.Fulfillment
{
	[Serializable]
	[Class(Schema="`dbo`", Table="`account`")]
	public partial class Account
	{
		#region Constants
        public const string AccountEntity = "Account";
		public const string AccountIdProperty = "AccountId";
		public const string AccountNameProperty = "AccountName";
		public const string AccountStatusIdProperty = "AccountStatusId";
		public const string AccountTypeIdProperty = "AccountTypeId";
		public const string OrganizationIdProperty = "OrganizationId";
		public const string CustomerIdProperty = "CustomerId";
		public const string FmIdProperty = "FmId";
		public const string FulfAccountIdProperty = "FulfAccountId";
		public const string ARCUSTProperty = "ARCUST";
		public const string ARCUSTUpdateDateProperty = "ARCUSTUpdateDate";
		public const string TaxExemptionNumberProperty = "TaxExemptionNumber";
		public const string TaxExemptionExpirationDateProperty = "TaxExemptionExpirationDate";
		public const string CreditLimitProperty = "CreditLimit";
		public const string CommentsProperty = "Comments";
		public const string DeletedProperty = "Deleted";
		public const string CreateDateProperty = "CreateDate";
		public const string CreateUserIdProperty = "CreateUserId";
		public const string UpdateDateProperty = "UpdateDate";
		public const string UpdateUserIdProperty = "UpdateUserId";
		public const string DtsFlagpoleInstanceProperty = "DtsFlagpoleInstance";
		public const string DtsCAccountIdProperty = "DtsCAccountId";
		#endregion

		#region Fields
		protected int accountId = 0;
		protected string accountName = null;
		protected int? accountStatusId = null;
		protected int accountTypeId = 0;
		protected int organizationId = 0;
		protected int? customerId = null;
		protected string fmId = null;
		protected int? fulfAccountId = null;
		protected string aRCUST = null;
		protected DateTime? aRCUSTUpdateDate = null;
		protected string taxExemptionNumber = null;
		protected DateTime? taxExemptionExpirationDate = null;
		protected decimal creditLimit = 0;
		protected string comments = null;
		protected bool deleted = false;
		protected DateTime createDate = DateTime.Now;
		protected int createUserId = 0;
		protected DateTime? updateDate = DateTime.Now;
		protected int? updateUserId = null;
		protected int? dtsFlagpoleInstance = null;
		protected int? dtsCAccountId = null;
		#endregion

		#region Constructors
		public Account() 
		{
		}
		#endregion

		#region Properties
		[RawXml(Content=@"
		<id name=""AccountId"" column=""`account_id`"">
			<generator class=""native"">
			</generator>
		</id>")]

		public virtual int AccountId
		{
			get { return this.accountId; }
			set { this.accountId = value; }
		}

		[Property(Column="`account_name`")]
		public virtual string AccountName
		{
			get { return this.accountName; }
			set { this.accountName = value; }
		}

		[Property(Column="`account_status_id`")]
		public virtual int? AccountStatusId
		{
			get { return this.accountStatusId; }
			set { this.accountStatusId = value; }
		}

		[Property(Column="`account_type_id`")]
		public virtual int AccountTypeId
		{
			get { return this.accountTypeId; }
			set { this.accountTypeId = value; }
		}

		[Property(Column="`organization_id`")]
		public virtual int OrganizationId
		{
			get { return this.organizationId; }
			set { this.organizationId = value; }
		}

		[Property(Column="`customer_id`")]
		public virtual int? CustomerId
		{
			get { return this.customerId; }
			set { this.customerId = value; }
		}

		[Property(Column="`fm_id`")]
		public virtual string FmId
		{
			get { return this.fmId; }
			set { this.fmId = value; }
		}

		[Property(Column="`fulf_account_id`")]
		public virtual int? FulfAccountId
		{
			get { return this.fulfAccountId; }
			set { this.fulfAccountId = value; }
		}

		[Property(Column="`ARCUST`")]
		public virtual string ARCUST
		{
			get { return this.aRCUST; }
			set { this.aRCUST = value; }
		}

		[Property(Column="`ARCUST_update_date`")]
		public virtual DateTime? ARCUSTUpdateDate
		{
			get { return this.aRCUSTUpdateDate; }
			set { this.aRCUSTUpdateDate = value; }
		}

		[Property(Column="`tax_exemption_number`")]
		public virtual string TaxExemptionNumber
		{
			get { return this.taxExemptionNumber; }
			set { this.taxExemptionNumber = value; }
		}

		[Property(Column="`tax_exemption_expiration_date`")]
		public virtual DateTime? TaxExemptionExpirationDate
		{
			get { return this.taxExemptionExpirationDate; }
			set { this.taxExemptionExpirationDate = value; }
		}

		[Property(Column="`credit_limit`")]
		public virtual decimal CreditLimit
		{
			get { return this.creditLimit; }
			set { this.creditLimit = value; }
		}

		[Property(Column="`comments`")]
		public virtual string Comments
		{
			get { return this.comments; }
			set { this.comments = value; }
		}

		[Property(Column="`deleted`")]
		public virtual bool Deleted
		{
			get { return this.deleted; }
			set { this.deleted = value; }
		}

		[Property(Column="`create_date`")]
		public virtual DateTime CreateDate
		{
			get { return this.createDate; }
			set { this.createDate = value; }
		}

		[Property(Column="`create_user_id`")]
		public virtual int CreateUserId
		{
			get { return this.createUserId; }
			set { this.createUserId = value; }
		}

		[Property(Column="`update_date`")]
		public virtual DateTime? UpdateDate
		{
			get { return this.updateDate; }
			set { this.updateDate = value; }
		}

		[Property(Column="`update_user_id`")]
		public virtual int? UpdateUserId
		{
			get { return this.updateUserId; }
			set { this.updateUserId = value; }
		}

		[Property(Column="`dts_FlagpoleInstance`")]
		public virtual int? DtsFlagpoleInstance
		{
			get { return this.dtsFlagpoleInstance; }
			set { this.dtsFlagpoleInstance = value; }
		}

		[Property(Column="`dts_CAccountId`")]
		public virtual int? DtsCAccountId
		{
			get { return this.dtsCAccountId; }
			set { this.dtsCAccountId = value; }
		}
		#endregion

		#region Methods
        public static ICriteria CreateCriteria()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(Account));
                return c;
            }
        }

        public static List<Account> GetAccountList(ICriteria criteria)
        {
            return (List<Account>)criteria.List<Account>();
        }

		public static Account GetAccount(int accountId)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				return session.Get<Account>(accountId);
			}
		}

		public static List<Account> GetAccountList()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(Account));
				return (List<Account>)c.List<Account>();
			}
		}

		public static List<Account> GetAccountList(string sortExpression, int maximumRows, int startRowIndex)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(Account));
				if (sortExpression != null && sortExpression != "")
				{
					// Get ascending or descending order
					bool descending = sortExpression.Contains(" DESC");

					// Strip off ASC or DESC ordering
					sortExpression = sortExpression.Replace(" ASC", "");
					sortExpression = sortExpression.Replace(" DESC", "");
					sortExpression = sortExpression.Trim();

					// Get multi column sort from the comma delimited string
					List<String> expressions = new List<String>();
					if (sortExpression.Contains(","))
					{
						string[] tokens = sortExpression.Split(",".ToCharArray());
						for (int i = 0; i < tokens.Length; i++)
						{
							tokens[i] = tokens[i].Trim();
							if (tokens[i] != "")
								expressions.Add(tokens[i]);
						}
					}
					else if (sortExpression != "")
					{
						expressions.Add(sortExpression);
					}

					// Create the order
					for (int i = 0; i < expressions.Count; i++)
					{
						if (descending)
							c.AddOrder(NHibernate.Expression.Order.Desc(expressions[i]));
						else
							c.AddOrder(NHibernate.Expression.Order.Asc(expressions[i]));
					}
				}

				// Set offset and limit
				if (startRowIndex >= 0)
					c.SetFirstResult(startRowIndex);

				if (maximumRows >= 0)
					c.SetMaxResults(maximumRows);

				return (List<Account>)c.List<Account>();
			}
		}

		public static List<Account> GetAccountList(string sortExpression)
		{
			return GetAccountList(sortExpression, -1, -1);
		}

		public static void InsertAccount(Account obj)
		{
			if (obj != null)
				obj.Insert();
		}

		public static void UpdateAccount(Account obj)
		{
			if (obj != null)
				obj.Update();
		}

		public static void DeleteAccount(Account obj)
		{
			if (obj != null)
				obj.Delete();
		}

        protected static Account PopulateAccount(IDataReader r)
		{
			Account obj = new Account();
			obj.AccountId = (int)r["account_id"];
			obj.AccountName = (r["account_name"] == DBNull.Value) ? null : (string)r["account_name"];
			obj.AccountStatusId = (r["account_status_id"] == DBNull.Value) ? null : (int?)r["account_status_id"];
			obj.AccountTypeId = (int)r["account_type_id"];
			obj.OrganizationId = (int)r["organization_id"];
			obj.CustomerId = (r["customer_id"] == DBNull.Value) ? null : (int?)r["customer_id"];
			obj.FmId = (r["fm_id"] == DBNull.Value) ? null : (string)r["fm_id"];
			obj.FulfAccountId = (r["fulf_account_id"] == DBNull.Value) ? null : (int?)r["fulf_account_id"];
			obj.ARCUST = (r["ARCUST"] == DBNull.Value) ? null : (string)r["ARCUST"];
			obj.ARCUSTUpdateDate = (r["ARCUST_update_date"] == DBNull.Value) ? null : (DateTime?)r["ARCUST_update_date"];
			obj.TaxExemptionNumber = (r["tax_exemption_number"] == DBNull.Value) ? null : (string)r["tax_exemption_number"];
			obj.TaxExemptionExpirationDate = (r["tax_exemption_expiration_date"] == DBNull.Value) ? null : (DateTime?)r["tax_exemption_expiration_date"];
			obj.CreditLimit = (decimal)r["credit_limit"];
			obj.Comments = (r["comments"] == DBNull.Value) ? null : (string)r["comments"];
			obj.Deleted = (bool)r["deleted"];
			obj.CreateDate = (DateTime)r["create_date"];
			obj.CreateUserId = (int)r["create_user_id"];
			obj.UpdateDate = (r["update_date"] == DBNull.Value) ? null : (DateTime?)r["update_date"];
			obj.UpdateUserId = (r["update_user_id"] == DBNull.Value) ? null : (int?)r["update_user_id"];
			obj.DtsFlagpoleInstance = (r["dts_FlagpoleInstance"] == DBNull.Value) ? null : (int?)r["dts_FlagpoleInstance"];
			obj.DtsCAccountId = (r["dts_CAccountId"] == DBNull.Value) ? null : (int?)r["dts_CAccountId"];

			return obj;
		}

		public static int GetCount()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(Account));
				c.SetProjection(Projections.RowCount());
				return (int) c.UniqueResult();
			}
		}

		/// <summary>
		/// Insert the entity to database.
		/// </summary>
		public virtual void Insert()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Save(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Update the entity to database.
		/// </summary>
		public virtual void Update()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Update(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Persist the entity back to database.
		/// </summary>
		public virtual void Save()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.SaveOrUpdate(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Delete entity in database.
		/// </summary>
		public virtual void Delete()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Delete(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals(object obj)
		{
			if (this == obj)
				return true;

			if ((obj == null) || (obj.GetType() != this.GetType())) 
				return false;

			Account castObj = (Account)obj;
			return (castObj != null && this.accountId == castObj.AccountId);
		}

		/// <summary>
		/// Local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return 29 * (1 + this.accountId.GetHashCode());
		}
		#endregion
	}
}
