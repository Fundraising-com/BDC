////////////////////////////////////////////////////////////////////////////////////////////
// Class generated by SqlCodeGen 1.1.0.0.
// Do not edit this file directly. Changes will be lost when this file is regenerated.
// Extensions should be added in a separate file using partial classes.
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using NHibernate;
using NHibernate.Expression;
using NHibernate.Mapping.Attributes;

namespace QSP.Business.Fulfillment
{
    [Serializable]
    [Class(Schema = "`dbo`", Table = "`form`")]
    public partial class Form
    {
        #region Constants
        public const string FormEntity = "Form";
        public const string FormIdProperty = "FormId";
        public const string FormGroupIdProperty = "FormGroupId";
        public const string VersionProperty = "Version";
        public const string ProgramTypeIdProperty = "ProgramTypeId";
        public const string ProgramIdProperty = "ProgramId";
        public const string EntityTypeIdProperty = "EntityTypeId";
        public const string FormCodeProperty = "FormCode";
        public const string FormNameProperty = "FormName";
        public const string DescriptionProperty = "Description";
        public const string ProgramBasicsTextProperty = "ProgramBasicsText";
        public const string OrderTermsTextProperty = "OrderTermsText";
        public const string ClosingTimeProperty = "ClosingTime";
        public const string EnabledProperty = "Enabled";
        public const string DeletedProperty = "Deleted";
        public const string ImageUrlProperty = "ImageUrl";
        public const string IsProductPriceUpdatableProperty = "IsProductPriceUpdatable";
        public const string ParentFormIdProperty = "ParentFormId";
        public const string TaxPostalAddressTypeIdProperty = "TaxPostalAddressTypeId";
        public const string IsBaseFormProperty = "IsBaseForm";
        public const string IsQuantityAdjustmentAllowedProperty = "IsQuantityAdjustmentAllowed";
        public const string StartDateProperty = "StartDate";
        public const string EndDateProperty = "EndDate";
        public const string CreateDateProperty = "CreateDate";
        public const string CreateUserIdProperty = "CreateUserId";
        public const string UpdateDateProperty = "UpdateDate";
        public const string UpdateUserIdProperty = "UpdateUserId";
        public const string WarehouseTypeIdProperty = "WarehouseTypeId";
        public const string IsBulkProperty = "IsBulk";
        public const string ReportNameProperty = "ReportName";
        public const string IsWarehouseSelectableProperty = "IsWarehouseSelectable";
        public const string DefaultWarehouseIdProperty = "DefaultWarehouseId";
        #endregion

        #region Fields
        protected int formId = 0;
        protected int formGroupId = 0;
        protected int version = 0;
        protected int? programTypeId = null;
        protected int? programId = null;
        protected int? entityTypeId = null;
        protected string formCode = null;
        protected string formName = "";
        protected string description = null;
        protected string programBasicsText = null;
        protected string orderTermsText = null;
        protected DateTime? closingTime = null;
        protected bool enabled = true;
        protected bool deleted = false;
        protected string imageUrl = null;
        protected bool? isProductPriceUpdatable = false;
        protected int? parentFormId = null;
        protected int? taxPostalAddressTypeId = null;
        protected bool isBaseForm = false;
        protected bool isQuantityAdjustmentAllowed = false;
        protected DateTime? startDate = null;
        protected DateTime? endDate = null;
        protected DateTime createDate = DateTime.Now;
        protected int createUserId = 0;
        protected DateTime updateDate = DateTime.Now;
        protected int updateUserId = 0;
        protected int? warehouseTypeId = null;
        protected bool isBulk = false;
        protected string reportName = null;
        protected bool isWarehouseSelectable = false;
        protected int? defaultWarehouseId = null;
        #endregion

        #region Constructors
        public Form()
        {
        }
        #endregion

        #region Properties
        [RawXml(Content = @"
		<id name=""FormId"" column=""`form_id`"">
			<generator class=""native"">
			</generator>
		</id>")]

        public virtual int FormId
        {
            get { return this.formId; }
            set { this.formId = value; }
        }

        [Property(Column = "`form_group_id`")]
        public virtual int FormGroupId
        {
            get { return this.formGroupId; }
            set { this.formGroupId = value; }
        }

        [Property(Column = "`version`")]
        public virtual int Version
        {
            get { return this.version; }
            set { this.version = value; }
        }

        [Property(Column = "`program_type_id`")]
        public virtual int? ProgramTypeId
        {
            get { return this.programTypeId; }
            set { this.programTypeId = value; }
        }

        [Property(Column = "`program_id`")]
        public virtual int? ProgramId
        {
            get { return this.programId; }
            set { this.programId = value; }
        }

        [Property(Column = "`entity_type_id`")]
        public virtual int? EntityTypeId
        {
            get { return this.entityTypeId; }
            set { this.entityTypeId = value; }
        }

        [Property(Column = "`form_code`")]
        public virtual string FormCode
        {
            get { return this.formCode; }
            set { this.formCode = value; }
        }

        [Property(Column = "`form_name`")]
        public virtual string FormName
        {
            get { return this.formName; }
            set { this.formName = value; }
        }

        [Property(Column = "`description`")]
        public virtual string Description
        {
            get { return this.description; }
            set { this.description = value; }
        }

        [Property(Column = "`program_basics_text`")]
        public virtual string ProgramBasicsText
        {
            get { return this.programBasicsText; }
            set { this.programBasicsText = value; }
        }

        [Property(Column = "`order_terms_text`")]
        public virtual string OrderTermsText
        {
            get { return this.orderTermsText; }
            set { this.orderTermsText = value; }
        }

        [Property(Column = "`closing_time`")]
        public virtual DateTime? ClosingTime
        {
            get { return this.closingTime; }
            set { this.closingTime = value; }
        }

        [Property(Column = "`enabled`")]
        public virtual bool Enabled
        {
            get { return this.enabled; }
            set { this.enabled = value; }
        }

        [Property(Column = "`deleted`")]
        public virtual bool Deleted
        {
            get { return this.deleted; }
            set { this.deleted = value; }
        }

        [Property(Column = "`image_url`")]
        public virtual string ImageUrl
        {
            get { return this.imageUrl; }
            set { this.imageUrl = value; }
        }

        [Property(Column = "`is_product_price_updatable`")]
        public virtual bool? IsProductPriceUpdatable
        {
            get { return this.isProductPriceUpdatable; }
            set { this.isProductPriceUpdatable = value; }
        }

        [Property(Column = "`parent_form_id`")]
        public virtual int? ParentFormId
        {
            get { return this.parentFormId; }
            set { this.parentFormId = value; }
        }

        [Property(Column = "`tax_postal_address_type_id`")]
        public virtual int? TaxPostalAddressTypeId
        {
            get { return this.taxPostalAddressTypeId; }
            set { this.taxPostalAddressTypeId = value; }
        }

        [Property(Column = "`is_base_form`")]
        public virtual bool IsBaseForm
        {
            get { return this.isBaseForm; }
            set { this.isBaseForm = value; }
        }

        [Property(Column = "`is_quantity_adjustment_allowed`")]
        public virtual bool IsQuantityAdjustmentAllowed
        {
            get { return this.isQuantityAdjustmentAllowed; }
            set { this.isQuantityAdjustmentAllowed = value; }
        }

        [Property(Column = "`start_date`")]
        public virtual DateTime? StartDate
        {
            get { return this.startDate; }
            set { this.startDate = value; }
        }

        [Property(Column = "`end_date`")]
        public virtual DateTime? EndDate
        {
            get { return this.endDate; }
            set { this.endDate = value; }
        }

        [Property(Column = "`create_date`")]
        public virtual DateTime CreateDate
        {
            get { return this.createDate; }
            set { this.createDate = value; }
        }

        [Property(Column = "`create_user_id`")]
        public virtual int CreateUserId
        {
            get { return this.createUserId; }
            set { this.createUserId = value; }
        }

        [Property(Column = "`update_date`")]
        public virtual DateTime UpdateDate
        {
            get { return this.updateDate; }
            set { this.updateDate = value; }
        }

        [Property(Column = "`update_user_id`")]
        public virtual int UpdateUserId
        {
            get { return this.updateUserId; }
            set { this.updateUserId = value; }
        }

        [Property(Column = "`warehouse_type_id`")]
        public virtual int? WarehouseTypeId
        {
            get { return this.warehouseTypeId; }
            set { this.warehouseTypeId = value; }
        }

        [Property(Column = "`is_bulk`")]
        public virtual bool IsBulk
        {
            get { return this.isBulk; }
            set { this.isBulk = value; }
        }

        [Property(Column = "`report_name`")]
        public virtual string ReportName
        {
            get { return this.reportName; }
            set { this.reportName = value; }
        }

        [Property(Column = "`is_warehouse_selectable`")]
        public virtual bool IsWarehouseSelectable
        {
            get { return this.isWarehouseSelectable; }
            set { this.isWarehouseSelectable = value; }
        }

        [Property(Column = "`default_warehouse_id`")]
        public virtual int? DefaultWarehouseId
        {
            get { return this.defaultWarehouseId; }
            set { this.defaultWarehouseId = value; }
        }
        #endregion

        #region Methods
        public static ICriteria CreateCriteria()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(Form));
                return c;
            }
        }

        public static Form GetForm(int formId)
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                return session.Get<Form>(formId);
            }
        }

        public static List<Form> GetFormList(ICriteria criteria)
        {
            return (List<Form>)criteria.List<Form>();
        }

        public static List<Form> GetFormList()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(Form));
                return (List<Form>)c.List<Form>();
            }
        }

        public static List<Form> GetFormList(string sortExpression, int maximumRows, int startRowIndex)
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(Form));
                if (sortExpression != null && sortExpression != "")
                {
                    // Get ascending or descending order
                    bool descending = sortExpression.Contains(" DESC");

                    // Strip off ASC or DESC ordering
                    sortExpression = sortExpression.Replace(" ASC", "");
                    sortExpression = sortExpression.Replace(" DESC", "");
                    sortExpression = sortExpression.Trim();

                    // Get multi column sort from the comma delimited string
                    List<String> expressions = new List<String>();
                    if (sortExpression.Contains(","))
                    {
                        string[] tokens = sortExpression.Split(",".ToCharArray());
                        for (int i = 0; i < tokens.Length; i++)
                        {
                            tokens[i] = tokens[i].Trim();
                            if (tokens[i] != "")
                                expressions.Add(tokens[i]);
                        }
                    }
                    else if (sortExpression != "")
                    {
                        expressions.Add(sortExpression);
                    }

                    // Create the order
                    for (int i = 0; i < expressions.Count; i++)
                    {
                        if (descending)
                            c.AddOrder(NHibernate.Expression.Order.Desc(expressions[i]));
                        else
                            c.AddOrder(NHibernate.Expression.Order.Asc(expressions[i]));
                    }
                }

                // Set offset and limit
                if (startRowIndex >= 0)
                    c.SetFirstResult(startRowIndex);

                if (maximumRows >= 0)
                    c.SetMaxResults(maximumRows);

                return (List<Form>)c.List<Form>();
            }
        }

        public static List<Form> GetFormList(string sortExpression)
        {
            return GetFormList(sortExpression, -1, -1);
        }

        public static void InsertForm(Form obj)
        {
            if (obj != null)
                obj.Insert();
        }

        public static void UpdateForm(Form obj)
        {
            if (obj != null)
                obj.Update();
        }

        public static void DeleteForm(Form obj)
        {
            if (obj != null)
                obj.Delete();
        }

        protected static Form PopulateForm(IDataReader r)
        {
            Form obj = new Form();
            obj.FormId = (int)r["form_id"];
            obj.FormGroupId = (int)r["form_group_id"];
            obj.Version = (int)r["version"];
            obj.ProgramTypeId = (r["program_type_id"] == DBNull.Value) ? null : (int?)r["program_type_id"];
            obj.ProgramId = (r["program_id"] == DBNull.Value) ? null : (int?)r["program_id"];
            obj.EntityTypeId = (r["entity_type_id"] == DBNull.Value) ? null : (int?)r["entity_type_id"];
            obj.FormCode = (r["form_code"] == DBNull.Value) ? null : (string)r["form_code"];
            obj.FormName = (string)r["form_name"];
            obj.Description = (r["description"] == DBNull.Value) ? null : (string)r["description"];
            obj.ProgramBasicsText = (r["program_basics_text"] == DBNull.Value) ? null : (string)r["program_basics_text"];
            obj.OrderTermsText = (r["order_terms_text"] == DBNull.Value) ? null : (string)r["order_terms_text"];
            obj.ClosingTime = (r["closing_time"] == DBNull.Value) ? null : (DateTime?)r["closing_time"];
            obj.Enabled = (bool)r["enabled"];
            obj.Deleted = (bool)r["deleted"];
            obj.ImageUrl = (r["image_url"] == DBNull.Value) ? null : (string)r["image_url"];
            obj.IsProductPriceUpdatable = (r["is_product_price_updatable"] == DBNull.Value) ? null : (bool?)r["is_product_price_updatable"];
            obj.ParentFormId = (r["parent_form_id"] == DBNull.Value) ? null : (int?)r["parent_form_id"];
            obj.TaxPostalAddressTypeId = (r["tax_postal_address_type_id"] == DBNull.Value) ? null : (int?)r["tax_postal_address_type_id"];
            obj.IsBaseForm = (bool)r["is_base_form"];
            obj.IsQuantityAdjustmentAllowed = (bool)r["is_quantity_adjustment_allowed"];
            obj.StartDate = (r["start_date"] == DBNull.Value) ? null : (DateTime?)r["start_date"];
            obj.EndDate = (r["end_date"] == DBNull.Value) ? null : (DateTime?)r["end_date"];
            obj.CreateDate = (DateTime)r["create_date"];
            obj.CreateUserId = (int)r["create_user_id"];
            obj.UpdateDate = (DateTime)r["update_date"];
            obj.UpdateUserId = (int)r["update_user_id"];
            obj.WarehouseTypeId = (r["warehouse_type_id"] == DBNull.Value) ? null : (int?)r["warehouse_type_id"];
            obj.IsBulk = (bool)r["is_bulk"];
            obj.ReportName = (r["report_name"] == DBNull.Value) ? null : (string)r["report_name"];
            obj.IsWarehouseSelectable = (bool)r["is_warehouse_selectable"];
            obj.DefaultWarehouseId = (r["default_warehouse_id"] == DBNull.Value) ? null : (int?)r["default_warehouse_id"];

            return obj;
        }

        public static int GetCount()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(Form));
                c.SetProjection(Projections.RowCount());
                return (int)c.UniqueResult();
            }
        }

        /// <summary>
        /// Insert the entity to database.
        /// </summary>
        public virtual void Insert()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ITransaction trans = session.BeginTransaction();
                try
                {
                    session.Save(this);
                    trans.Commit();
                }
                catch
                {
                    trans.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// Update the entity to database.
        /// </summary>
        public virtual void Update()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ITransaction trans = session.BeginTransaction();
                try
                {
                    session.Update(this);
                    trans.Commit();
                }
                catch
                {
                    trans.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// Persist the entity back to database.
        /// </summary>
        public virtual void Save()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ITransaction trans = session.BeginTransaction();
                try
                {
                    session.SaveOrUpdate(this);
                    trans.Commit();
                }
                catch
                {
                    trans.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// Delete entity in database.
        /// </summary>
        public virtual void Delete()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ITransaction trans = session.BeginTransaction();
                try
                {
                    session.Delete(this);
                    trans.Commit();
                }
                catch
                {
                    trans.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// Local implementation of Equals based on unique value members
        /// </summary>
        public override bool Equals(object obj)
        {
            if (this == obj)
                return true;

            if ((obj == null) || (obj.GetType() != this.GetType()))
                return false;

            Form castObj = (Form)obj;
            return (castObj != null && this.formId == castObj.FormId);
        }

        /// <summary>
        /// Local implementation of GetHashCode based on unique value members
        /// </summary>
        public override int GetHashCode()
        {
            return 29 * (1 + this.formId.GetHashCode());
        }
        #endregion
    }
}
