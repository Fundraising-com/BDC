////////////////////////////////////////////////////////////////////////////////////////////
// Class generated by SqlCodeGen 1.1.0.0.
// Do not edit this file directly. Changes will be lost when this file is regenerated.
// Extensions should be added in a separate file using partial classes.
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using NHibernate;
using NHibernate.Expression;
using NHibernate.Mapping.Attributes;

namespace QSP.Business.Fulfillment
{
	[Serializable]
	[Class(Schema="`dbo`", Table="`coupon`")]
	public partial class Coupon
	{
		#region Constants
        public const string CouponEntity = "Coupon";
		public const string CouponIdProperty = "CouponId";
		public const string CouponNameProperty = "CouponName";
		public const string CouponCodeProperty = "CouponCode";
		public const string DiscountAmountProperty = "DiscountAmount";
		public const string DiscountPercentageProperty = "DiscountPercentage";
		public const string DescriptionProperty = "Description";
		public const string IVCOUPProperty = "IVCOUP";
		public const string DeletedProperty = "Deleted";
		public const string CreateDateProperty = "CreateDate";
		public const string CreateUserIdProperty = "CreateUserId";
		public const string UpdateDateProperty = "UpdateDate";
		public const string UpdateUserIdProperty = "UpdateUserId";
		#endregion

		#region Fields
		protected int couponId = 0;
		protected string couponName = "";
		protected string couponCode = "";
		protected decimal? discountAmount = null;
		protected decimal? discountPercentage = null;
		protected string description = null;
		protected string iVCOUP = null;
		protected bool deleted = false;
		protected DateTime createDate = DateTime.Now;
		protected int createUserId = 0;
		protected DateTime? updateDate = DateTime.Now;
		protected int updateUserId = 0;
		#endregion

		#region Constructors
		public Coupon() 
		{
		}
		#endregion

		#region Properties
		[RawXml(Content=@"
		<id name=""CouponId"" column=""`coupon_id`"">
			<generator class=""native"">
			</generator>
		</id>")]

		public virtual int CouponId
		{
			get { return this.couponId; }
			set { this.couponId = value; }
		}

		[Property(Column="`coupon_name`")]
		public virtual string CouponName
		{
			get { return this.couponName; }
			set { this.couponName = value; }
		}

		[Property(Column="`coupon_code`")]
		public virtual string CouponCode
		{
			get { return this.couponCode; }
			set { this.couponCode = value; }
		}

		[Property(Column="`discount_amount`")]
		public virtual decimal? DiscountAmount
		{
			get { return this.discountAmount; }
			set { this.discountAmount = value; }
		}

		[Property(Column="`discount_percentage`")]
		public virtual decimal? DiscountPercentage
		{
			get { return this.discountPercentage; }
			set { this.discountPercentage = value; }
		}

		[Property(Column="`description`")]
		public virtual string Description
		{
			get { return this.description; }
			set { this.description = value; }
		}

		[Property(Column="`IVCOUP`")]
		public virtual string IVCOUP
		{
			get { return this.iVCOUP; }
			set { this.iVCOUP = value; }
		}

		[Property(Column="`deleted`")]
		public virtual bool Deleted
		{
			get { return this.deleted; }
			set { this.deleted = value; }
		}

		[Property(Column="`create_date`")]
		public virtual DateTime CreateDate
		{
			get { return this.createDate; }
			set { this.createDate = value; }
		}

		[Property(Column="`create_user_id`")]
		public virtual int CreateUserId
		{
			get { return this.createUserId; }
			set { this.createUserId = value; }
		}

		[Property(Column="`update_date`")]
		public virtual DateTime? UpdateDate
		{
			get { return this.updateDate; }
			set { this.updateDate = value; }
		}

		[Property(Column="`update_user_id`")]
		public virtual int UpdateUserId
		{
			get { return this.updateUserId; }
			set { this.updateUserId = value; }
		}
		#endregion

		#region Methods

        public static ICriteria CreateCriteria()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(Coupon));
                return c;
            }
        }

        public static List<Coupon> GetCouponList(ICriteria criteria)
        {
            return (List<Coupon>)criteria.List<Coupon>();
        }

		public static Coupon GetCoupon(int couponId)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				return session.Get<Coupon>(couponId);
			}
		}

		public static List<Coupon> GetCouponList()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(Coupon));
				return (List<Coupon>)c.List<Coupon>();
			}
		}

		public static List<Coupon> GetCouponList(string sortExpression, int maximumRows, int startRowIndex)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(Coupon));
				if (sortExpression != null && sortExpression != "")
				{
					// Get ascending or descending order
					bool descending = sortExpression.Contains(" DESC");

					// Strip off ASC or DESC ordering
					sortExpression = sortExpression.Replace(" ASC", "");
					sortExpression = sortExpression.Replace(" DESC", "");
					sortExpression = sortExpression.Trim();

					// Get multi column sort from the comma delimited string
					List<String> expressions = new List<String>();
					if (sortExpression.Contains(","))
					{
						string[] tokens = sortExpression.Split(",".ToCharArray());
						for (int i = 0; i < tokens.Length; i++)
						{
							tokens[i] = tokens[i].Trim();
							if (tokens[i] != "")
								expressions.Add(tokens[i]);
						}
					}
					else if (sortExpression != "")
					{
						expressions.Add(sortExpression);
					}

					// Create the order
					for (int i = 0; i < expressions.Count; i++)
					{
						if (descending)
							c.AddOrder(NHibernate.Expression.Order.Desc(expressions[i]));
						else
							c.AddOrder(NHibernate.Expression.Order.Asc(expressions[i]));
					}
				}

				// Set offset and limit
				if (startRowIndex >= 0)
					c.SetFirstResult(startRowIndex);

				if (maximumRows >= 0)
					c.SetMaxResults(maximumRows);

				return (List<Coupon>)c.List<Coupon>();
			}
		}

		public static List<Coupon> GetCouponList(string sortExpression)
		{
			return GetCouponList(sortExpression, -1, -1);
		}

		public static void InsertCoupon(Coupon obj)
		{
			if (obj != null)
				obj.Insert();
		}

		public static void UpdateCoupon(Coupon obj)
		{
			if (obj != null)
				obj.Update();
		}

		public static void DeleteCoupon(Coupon obj)
		{
			if (obj != null)
				obj.Delete();
		}

        protected static Coupon PopulateCoupon(IDataReader r)
		{
			Coupon obj = new Coupon();
			obj.CouponId = (int)r["coupon_id"];
			obj.CouponName = (string)r["coupon_name"];
			obj.CouponCode = (string)r["coupon_code"];
			obj.DiscountAmount = (r["discount_amount"] == DBNull.Value) ? null : (decimal?)r["discount_amount"];
			obj.DiscountPercentage = (r["discount_percentage"] == DBNull.Value) ? null : (decimal?)r["discount_percentage"];
			obj.Description = (r["description"] == DBNull.Value) ? null : (string)r["description"];
			obj.IVCOUP = (r["IVCOUP"] == DBNull.Value) ? null : (string)r["IVCOUP"];
			obj.Deleted = (bool)r["deleted"];
			obj.CreateDate = (DateTime)r["create_date"];
			obj.CreateUserId = (int)r["create_user_id"];
			obj.UpdateDate = (r["update_date"] == DBNull.Value) ? null : (DateTime?)r["update_date"];
			obj.UpdateUserId = (int)r["update_user_id"];

			return obj;
		}

		public static int GetCount()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(Coupon));
				c.SetProjection(Projections.RowCount());
				return (int) c.UniqueResult();
			}
		}

		/// <summary>
		/// Insert the entity to database.
		/// </summary>
		public virtual void Insert()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Save(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Update the entity to database.
		/// </summary>
		public virtual void Update()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Update(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Persist the entity back to database.
		/// </summary>
		public virtual void Save()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.SaveOrUpdate(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Delete entity in database.
		/// </summary>
		public virtual void Delete()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Delete(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals(object obj)
		{
			if (this == obj)
				return true;

			if ((obj == null) || (obj.GetType() != this.GetType())) 
				return false;

			Coupon castObj = (Coupon)obj;
			return (castObj != null && this.couponId == castObj.CouponId);
		}

		/// <summary>
		/// Local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return 29 * (1 + this.couponId.GetHashCode());
		}
		#endregion
	}
}
