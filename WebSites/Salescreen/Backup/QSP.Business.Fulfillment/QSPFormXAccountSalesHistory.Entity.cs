////////////////////////////////////////////////////////////////////////////////////////////
// Class generated by SqlCodeGen 1.1.0.0.
// Do not edit this file directly. Changes will be lost when this file is regenerated.
// Extensions should be added in a separate file using partial classes.
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using NHibernate;
using NHibernate.Expression;
using NHibernate.Mapping.Attributes;

namespace QSP.Business.Fulfillment
{
	[Serializable]
	[Class(Schema="`dbo`", Table="`QSPForm_X_Account_sales_history`")]
	public partial class QSPFormXAccountSalesHistory
	{
		#region Constants
        public const string QSPFormXAccountSalesHistoryEntity = "QSPFormXAccountSalesHistory";
		public const string AccountIdProperty = "AccountId";
		public const string LastSaleDateProperty = "LastSaleDate";
		#endregion

		#region Fields
		protected int accountId = 0;
		protected DateTime lastSaleDate = DateTime.Now;
		#endregion

		#region Constructors
		public QSPFormXAccountSalesHistory() 
		{
		}
		#endregion

		#region Properties
		[RawXml(Content=@"
		<id name=""AccountId"" column=""`account_id`"">
			<generator class=""assigned"">
			</generator>
		</id>")]

		public virtual int AccountId
		{
			get { return this.accountId; }
			set { this.accountId = value; }
		}

		[Property(Column="`last_sale_date`")]
		public virtual DateTime LastSaleDate
		{
			get { return this.lastSaleDate; }
			set { this.lastSaleDate = value; }
		}
		#endregion

		#region Methods

        public static ICriteria CreateCriteria()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(QSPFormXAccountSalesHistory));
                return c;
            }
        }

        public static List<QSPFormXAccountSalesHistory> GetQSPFormXAccountSalesHistoryList(ICriteria criteria)
        {
            return (List<QSPFormXAccountSalesHistory>)criteria.List<QSPFormXAccountSalesHistory>();
        }

		public static QSPFormXAccountSalesHistory GetQSPFormXAccountSalesHistory(int accountId)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				return session.Get<QSPFormXAccountSalesHistory>(accountId);
			}
		}

		public static List<QSPFormXAccountSalesHistory> GetQSPFormXAccountSalesHistoryList()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(QSPFormXAccountSalesHistory));
				return (List<QSPFormXAccountSalesHistory>)c.List<QSPFormXAccountSalesHistory>();
			}
		}

		public static List<QSPFormXAccountSalesHistory> GetQSPFormXAccountSalesHistoryList(string sortExpression, int maximumRows, int startRowIndex)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(QSPFormXAccountSalesHistory));
				if (sortExpression != null && sortExpression != "")
				{
					// Get ascending or descending order
					bool descending = sortExpression.Contains(" DESC");

					// Strip off ASC or DESC ordering
					sortExpression = sortExpression.Replace(" ASC", "");
					sortExpression = sortExpression.Replace(" DESC", "");
					sortExpression = sortExpression.Trim();

					// Get multi column sort from the comma delimited string
					List<String> expressions = new List<String>();
					if (sortExpression.Contains(","))
					{
						string[] tokens = sortExpression.Split(",".ToCharArray());
						for (int i = 0; i < tokens.Length; i++)
						{
							tokens[i] = tokens[i].Trim();
							if (tokens[i] != "")
								expressions.Add(tokens[i]);
						}
					}
					else if (sortExpression != "")
					{
						expressions.Add(sortExpression);
					}

					// Create the order
					for (int i = 0; i < expressions.Count; i++)
					{
						if (descending)
							c.AddOrder(NHibernate.Expression.Order.Desc(expressions[i]));
						else
							c.AddOrder(NHibernate.Expression.Order.Asc(expressions[i]));
					}
				}

				// Set offset and limit
				if (startRowIndex >= 0)
					c.SetFirstResult(startRowIndex);

				if (maximumRows >= 0)
					c.SetMaxResults(maximumRows);

				return (List<QSPFormXAccountSalesHistory>)c.List<QSPFormXAccountSalesHistory>();
			}
		}

		public static List<QSPFormXAccountSalesHistory> GetQSPFormXAccountSalesHistoryList(string sortExpression)
		{
			return GetQSPFormXAccountSalesHistoryList(sortExpression, -1, -1);
		}

		public static void InsertQSPFormXAccountSalesHistory(QSPFormXAccountSalesHistory obj)
		{
			if (obj != null)
				obj.Insert();
		}

		public static void UpdateQSPFormXAccountSalesHistory(QSPFormXAccountSalesHistory obj)
		{
			if (obj != null)
				obj.Update();
		}

		public static void DeleteQSPFormXAccountSalesHistory(QSPFormXAccountSalesHistory obj)
		{
			if (obj != null)
				obj.Delete();
		}

        protected static QSPFormXAccountSalesHistory PopulateQSPFormXAccountSalesHistory(IDataReader r)
		{
			QSPFormXAccountSalesHistory obj = new QSPFormXAccountSalesHistory();
			obj.AccountId = (int)r["account_id"];
			obj.LastSaleDate = (DateTime)r["last_sale_date"];

			return obj;
		}

		public static int GetCount()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(QSPFormXAccountSalesHistory));
				c.SetProjection(Projections.RowCount());
				return (int) c.UniqueResult();
			}
		}

		/// <summary>
		/// Insert the entity to database.
		/// </summary>
		public virtual void Insert()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Save(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Update the entity to database.
		/// </summary>
		public virtual void Update()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Update(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Delete entity in database.
		/// </summary>
		public virtual void Delete()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Delete(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals(object obj)
		{
			if (this == obj)
				return true;

			if ((obj == null) || (obj.GetType() != this.GetType())) 
				return false;

			QSPFormXAccountSalesHistory castObj = (QSPFormXAccountSalesHistory)obj;
			return (castObj != null && this.accountId == castObj.AccountId);
		}

		/// <summary>
		/// Local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return 29 * (1 + this.accountId.GetHashCode());
		}
		#endregion
	}
}
