////////////////////////////////////////////////////////////////////////////////////////////
// Class generated by SqlCodeGen 1.1.0.0.
// Do not edit this file directly. Changes will be lost when this file is regenerated.
// Extensions should be added in a separate file using partial classes.
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using NHibernate;
using NHibernate.Expression;
using NHibernate.Mapping.Attributes;

namespace QSP.Business.Fulfillment
{
    [Serializable]
    [Class(Schema = "`dbo`", Table = "`warehouse_zip_prefix_leadtime`")]
    public partial class WarehouseZipPrefixLeadtime
    {
        #region Constants
        public const string WarehouseZipPrefixLeadtimeEntity = "WarehouseZipPrefixLeadtime";
        public const string WarehouseZipPrefixLeadtimeIDProperty = "WarehouseZipPrefixLeadtimeID";
        public const string WarehouseIDProperty = "WarehouseID";
        public const string ZipPrefixIDProperty = "ZipPrefixID";
        public const string ZipProperty = "Zip";
        public const string StartDateProperty = "StartDate";
        public const string EndDateProperty = "EndDate";
        public const string LeadtimeProperty = "Leadtime";
        public const string DisabledProperty = "Disabled";
        public const string CreateDateProperty = "CreateDate";
        public const string CreateUserIDProperty = "CreateUserID";
        public const string UpdateDateProperty = "UpdateDate";
        public const string UpdateUserIDProperty = "UpdateUserID";
        #endregion

        #region Fields
        protected int warehouseZipPrefixLeadtimeID = 0;
        protected int warehouseID = 0;
        protected int zipPrefixID = 0;
        protected string zip = null;
        protected DateTime startDate = DateTime.Now;
        protected DateTime endDate = DateTime.Now;
        protected int? leadtime = null;
        protected bool disabled = false;
        protected DateTime createDate = DateTime.Now;
        protected int createUserID = 0;
        protected DateTime updateDate = DateTime.Now;
        protected int updateUserID = 0;
        #endregion

        #region Constructors
        public WarehouseZipPrefixLeadtime()
        {
        }
        #endregion

        #region Properties
        [RawXml(Content = @"
		<id name=""WarehouseZipPrefixLeadtimeID"" column=""`warehouse_zip_prefix_leadtime_ID`"">
			<generator class=""native"">
			</generator>
		</id>")]

        public virtual int WarehouseZipPrefixLeadtimeID
        {
            get { return this.warehouseZipPrefixLeadtimeID; }
            set { this.warehouseZipPrefixLeadtimeID = value; }
        }

        [Property(Column = "`warehouse_ID`")]
        public virtual int WarehouseID
        {
            get { return this.warehouseID; }
            set { this.warehouseID = value; }
        }

        [Property(Column = "`zip_prefix_ID`")]
        public virtual int ZipPrefixID
        {
            get { return this.zipPrefixID; }
            set { this.zipPrefixID = value; }
        }

        [Property(Column = "`zip`")]
        public virtual string Zip
        {
            get { return this.zip; }
            set { this.zip = value; }
        }

        [Property(Column = "`start_date`")]
        public virtual DateTime StartDate
        {
            get { return this.startDate; }
            set { this.startDate = value; }
        }

        [Property(Column = "`end_date`")]
        public virtual DateTime EndDate
        {
            get { return this.endDate; }
            set { this.endDate = value; }
        }

        [Property(Column = "`leadtime`")]
        public virtual int? Leadtime
        {
            get { return this.leadtime; }
            set { this.leadtime = value; }
        }

        [Property(Column = "`disabled`")]
        public virtual bool Disabled
        {
            get { return this.disabled; }
            set { this.disabled = value; }
        }

        [Property(Column = "`CreateDate`")]
        public virtual DateTime CreateDate
        {
            get { return this.createDate; }
            set { this.createDate = value; }
        }

        [Property(Column = "`CreateUserID`")]
        public virtual int CreateUserID
        {
            get { return this.createUserID; }
            set { this.createUserID = value; }
        }

        [Property(Column = "`UpdateDate`")]
        public virtual DateTime UpdateDate
        {
            get { return this.updateDate; }
            set { this.updateDate = value; }
        }

        [Property(Column = "`UpdateUserID`")]
        public virtual int UpdateUserID
        {
            get { return this.updateUserID; }
            set { this.updateUserID = value; }
        }
        #endregion

        #region Methods

        public static ICriteria CreateCriteria()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(WarehouseZipPrefixLeadtime));
                return c;
            }
        }


        public static WarehouseZipPrefixLeadtime GetWarehouseZipPrefixLeadtime(int warehouseZipPrefixLeadtimeID)
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                return session.Get<WarehouseZipPrefixLeadtime>(warehouseZipPrefixLeadtimeID);
            }
        }

        public static List<WarehouseZipPrefixLeadtime> GetWarehouseZipPrefixLeadtimeList()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(WarehouseZipPrefixLeadtime));
                return (List<WarehouseZipPrefixLeadtime>)c.List<WarehouseZipPrefixLeadtime>();
            }
        }

        public static List<WarehouseZipPrefixLeadtime> GetWarehouseZipPrefixLeadtimeList(string sortExpression, int maximumRows, int startRowIndex)
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(WarehouseZipPrefixLeadtime));
                if (sortExpression != null && sortExpression != "")
                {
                    // Get ascending or descending order
                    bool descending = sortExpression.Contains(" DESC");

                    // Strip off ASC or DESC ordering
                    sortExpression = sortExpression.Replace(" ASC", "");
                    sortExpression = sortExpression.Replace(" DESC", "");
                    sortExpression = sortExpression.Trim();

                    // Get multi column sort from the comma delimited string
                    List<String> expressions = new List<String>();
                    if (sortExpression.Contains(","))
                    {
                        string[] tokens = sortExpression.Split(",".ToCharArray());
                        for (int i = 0; i < tokens.Length; i++)
                        {
                            tokens[i] = tokens[i].Trim();
                            if (tokens[i] != "")
                                expressions.Add(tokens[i]);
                        }
                    }
                    else if (sortExpression != "")
                    {
                        expressions.Add(sortExpression);
                    }

                    // Create the order
                    for (int i = 0; i < expressions.Count; i++)
                    {
                        if (descending)
                            c.AddOrder(NHibernate.Expression.Order.Desc(expressions[i]));
                        else
                            c.AddOrder(NHibernate.Expression.Order.Asc(expressions[i]));
                    }
                }

                // Set offset and limit
                if (startRowIndex >= 0)
                    c.SetFirstResult(startRowIndex);

                if (maximumRows >= 0)
                    c.SetMaxResults(maximumRows);

                return (List<WarehouseZipPrefixLeadtime>)c.List<WarehouseZipPrefixLeadtime>();
            }
        }

        public static List<WarehouseZipPrefixLeadtime> GetWarehouseZipPrefixLeadtimeList(string sortExpression)
        {
            return GetWarehouseZipPrefixLeadtimeList(sortExpression, -1, -1);
        }

        public static List<WarehouseZipPrefixLeadtime> GetWarehouseZipPrefixLeadtimeList(ICriteria criteria)
        {
            return (List<WarehouseZipPrefixLeadtime>)criteria.List<WarehouseZipPrefixLeadtime>();
        }

        public static void InsertWarehouseZipPrefixLeadtime(WarehouseZipPrefixLeadtime obj)
        {
            if (obj != null)
                obj.Insert();
        }

        public static void UpdateWarehouseZipPrefixLeadtime(WarehouseZipPrefixLeadtime obj)
        {
            if (obj != null)
                obj.Update();
        }

        public static void DeleteWarehouseZipPrefixLeadtime(WarehouseZipPrefixLeadtime obj)
        {
            if (obj != null)
                obj.Delete();
        }

        protected static WarehouseZipPrefixLeadtime PopulateWarehouseZipPrefixLeadtime(IDataReader r)
        {
            WarehouseZipPrefixLeadtime obj = new WarehouseZipPrefixLeadtime();
            obj.WarehouseZipPrefixLeadtimeID = (int)r["warehouse_zip_prefix_leadtime_ID"];
            obj.WarehouseID = (int)r["warehouse_ID"];
            obj.ZipPrefixID = (int)r["zip_prefix_ID"];
            obj.Zip = (r["zip"] == DBNull.Value) ? null : (string)r["zip"];
            obj.StartDate = (DateTime)r["start_date"];
            obj.EndDate = (DateTime)r["end_date"];
            obj.Leadtime = (r["leadtime"] == DBNull.Value) ? null : (int?)r["leadtime"];
            obj.Disabled = (bool)r["disabled"];
            obj.CreateDate = (DateTime)r["CreateDate"];
            obj.CreateUserID = (int)r["CreateUserID"];
            obj.UpdateDate = (DateTime)r["UpdateDate"];
            obj.UpdateUserID = (int)r["UpdateUserID"];

            return obj;
        }

        public static int GetCount()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(WarehouseZipPrefixLeadtime));
                c.SetProjection(Projections.RowCount());
                return (int)c.UniqueResult();
            }
        }

        /// <summary>
        /// Insert the entity to database.
        /// </summary>
        public virtual void Insert()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ITransaction trans = session.BeginTransaction();
                try
                {
                    session.Save(this);
                    trans.Commit();
                }
                catch
                {
                    trans.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// Update the entity to database.
        /// </summary>
        public virtual void Update()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ITransaction trans = session.BeginTransaction();
                try
                {
                    session.Update(this);
                    trans.Commit();
                }
                catch
                {
                    trans.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// Persist the entity back to database.
        /// </summary>
        public virtual void Save()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ITransaction trans = session.BeginTransaction();
                try
                {
                    session.SaveOrUpdate(this);
                    trans.Commit();
                }
                catch
                {
                    trans.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// Delete entity in database.
        /// </summary>
        public virtual void Delete()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ITransaction trans = session.BeginTransaction();
                try
                {
                    session.Delete(this);
                    trans.Commit();
                }
                catch
                {
                    trans.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// Local implementation of Equals based on unique value members
        /// </summary>
        public override bool Equals(object obj)
        {
            if (this == obj)
                return true;

            if ((obj == null) || (obj.GetType() != this.GetType()))
                return false;

            WarehouseZipPrefixLeadtime castObj = (WarehouseZipPrefixLeadtime)obj;
            return (castObj != null && this.warehouseZipPrefixLeadtimeID == castObj.WarehouseZipPrefixLeadtimeID);
        }

        /// <summary>
        /// Local implementation of GetHashCode based on unique value members
        /// </summary>
        public override int GetHashCode()
        {
            return 29 * (1 + this.warehouseZipPrefixLeadtimeID.GetHashCode());
        }





        #endregion
    }
}
