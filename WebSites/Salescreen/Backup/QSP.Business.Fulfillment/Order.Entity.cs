////////////////////////////////////////////////////////////////////////////////////////////
// Class generated by SqlCodeGen 1.1.0.0.
// Do not edit this file directly. Changes will be lost when this file is regenerated.
// Extensions should be added in a separate file using partial classes.
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using NHibernate;
using NHibernate.Expression;
using NHibernate.Mapping.Attributes;

namespace QSP.Business.Fulfillment
{
    [Serializable]
    [Class(Schema = "`dbo`", Table = "`order`")]
    public partial class Order
    {
        #region Constants
        public const string OrderEntity = "Order";
        public const string OrderIdProperty = "OrderId";
        public const string CampaignIdProperty = "CampaignId";
        public const string OrderGroupIdProperty = "OrderGroupId";
        public const string CustomerIdProperty = "CustomerId";
        public const string SourceIdProperty = "SourceId";
        public const string OrderStatusIdProperty = "OrderStatusId";
        public const string StatusReasonIdProperty = "StatusReasonId";
        public const string BillingPostalAddressIdProperty = "BillingPostalAddressId";
        public const string BillingPhoneNumberIdProperty = "BillingPhoneNumberId";
        public const string BillingFaxNumberIdProperty = "BillingFaxNumberId";
        public const string BillingEmailIdProperty = "BillingEmailId";
        public const string ParticipantIdProperty = "ParticipantId";
        public const string InstallmentPlanIdProperty = "InstallmentPlanId";
        public const string FormIdProperty = "FormId";
        public const string OrderTypeIdProperty = "OrderTypeId";
        public const string FmIdProperty = "FmId";
        public const string OLORDProperty = "OLORD";
        public const string OrderDateProperty = "OrderDate";
        public const string AdjustmentAmountProperty = "AdjustmentAmount";
        public const string CommentsProperty = "Comments";
        public const string DeletedProperty = "Deleted";
        public const string CreateDateProperty = "CreateDate";
        public const string CreateUserIdProperty = "CreateUserId";
        public const string UpdateDateProperty = "UpdateDate";
        public const string UpdateUserIdProperty = "UpdateUserId";
        public const string FulfOrderIdProperty = "FulfOrderId";
        public const string ProfitRateProperty = "ProfitRate";
        public const string CustomerPoNumberProperty = "CustomerPoNumber";
        public const string IsDsdProperty = "IsDsd";
        public const string IsContinuationProperty = "IsContinuation";
        #endregion

        #region Fields
        protected int orderId = 0;
        protected int campaignId = 0;
        protected int? orderGroupId = null;
        protected int? customerId = null;
        protected int? sourceId = null;
        protected int orderStatusId = 0;
        protected int? statusReasonId = null;
        protected int billingPostalAddressId = 0;
        protected int? billingPhoneNumberId = null;
        protected int? billingFaxNumberId = null;
        protected int? billingEmailId = null;
        protected int? participantId = null;
        protected int? installmentPlanId = null;
        protected int? formId = null;
        protected int orderTypeId = 0;
        protected string fmId = "";
        protected string oLORD = null;
        protected DateTime orderDate = DateTime.Now;
        protected decimal? adjustmentAmount = null;
        protected string comments = null;
        protected bool deleted = false;
        protected DateTime createDate = DateTime.Now;
        protected int createUserId = 0;
        protected DateTime? updateDate = DateTime.Now;
        protected int? updateUserId = null;
        protected string fulfOrderId = null;
        protected decimal profitRate = 0;
        protected string customerPoNumber = null;
        protected bool isDsd = true;
        protected bool isContinuation = true;
        #endregion

        #region Constructors
        public Order()
        {
        }
        #endregion

        #region Properties
        [RawXml(Content = @"
		<id name=""OrderId"" column=""`order_id`"">
			<generator class=""native"">
			</generator>
		</id>")]

        public virtual int OrderId
        {
            get { return this.orderId; }
            set { this.orderId = value; }
        }

        [Property(Column = "`campaign_id`")]
        public virtual int CampaignId
        {
            get { return this.campaignId; }
            set { this.campaignId = value; }
        }

        [Property(Column = "`order_group_id`")]
        public virtual int? OrderGroupId
        {
            get { return this.orderGroupId; }
            set { this.orderGroupId = value; }
        }

        [Property(Column = "`customer_id`")]
        public virtual int? CustomerId
        {
            get { return this.customerId; }
            set { this.customerId = value; }
        }

        [Property(Column = "`source_id`")]
        public virtual int? SourceId
        {
            get { return this.sourceId; }
            set { this.sourceId = value; }
        }

        [Property(Column = "`order_status_id`")]
        public virtual int OrderStatusId
        {
            get { return this.orderStatusId; }
            set { this.orderStatusId = value; }
        }

        [Property(Column = "`status_reason_id`")]
        public virtual int? StatusReasonId
        {
            get { return this.statusReasonId; }
            set { this.statusReasonId = value; }
        }

        [Property(Column = "`billing_postal_address_id`")]
        public virtual int BillingPostalAddressId
        {
            get { return this.billingPostalAddressId; }
            set { this.billingPostalAddressId = value; }
        }

        [Property(Column = "`billing_phone_number_id`")]
        public virtual int? BillingPhoneNumberId
        {
            get { return this.billingPhoneNumberId; }
            set { this.billingPhoneNumberId = value; }
        }

        [Property(Column = "`billing_fax_number_id`")]
        public virtual int? BillingFaxNumberId
        {
            get { return this.billingFaxNumberId; }
            set { this.billingFaxNumberId = value; }
        }

        [Property(Column = "`billing_email_id`")]
        public virtual int? BillingEmailId
        {
            get { return this.billingEmailId; }
            set { this.billingEmailId = value; }
        }

        [Property(Column = "`participant_id`")]
        public virtual int? ParticipantId
        {
            get { return this.participantId; }
            set { this.participantId = value; }
        }

        [Property(Column = "`installment_plan_id`")]
        public virtual int? InstallmentPlanId
        {
            get { return this.installmentPlanId; }
            set { this.installmentPlanId = value; }
        }

        [Property(Column = "`form_id`")]
        public virtual int? FormId
        {
            get { return this.formId; }
            set { this.formId = value; }
        }

        [Property(Column = "`order_type_id`")]
        public virtual int OrderTypeId
        {
            get { return this.orderTypeId; }
            set { this.orderTypeId = value; }
        }

        [Property(Column = "`fm_id`")]
        public virtual string FmId
        {
            get { return this.fmId; }
            set { this.fmId = value; }
        }

        [Property(Column = "`OL#ORD`")]
        public virtual string OLORD
        {
            get { return this.oLORD; }
            set { this.oLORD = value; }
        }

        [Property(Column = "`order_date`")]
        public virtual DateTime OrderDate
        {
            get { return this.orderDate; }
            set { this.orderDate = value; }
        }

        [Property(Column = "`adjustment_amount`")]
        public virtual decimal? AdjustmentAmount
        {
            get { return this.adjustmentAmount; }
            set { this.adjustmentAmount = value; }
        }

        [Property(Column = "`comments`")]
        public virtual string Comments
        {
            get { return this.comments; }
            set { this.comments = value; }
        }

        [Property(Column = "`deleted`")]
        public virtual bool Deleted
        {
            get { return this.deleted; }
            set { this.deleted = value; }
        }

        [Property(Column = "`create_date`")]
        public virtual DateTime CreateDate
        {
            get { return this.createDate; }
            set { this.createDate = value; }
        }

        [Property(Column = "`create_user_id`")]
        public virtual int CreateUserId
        {
            get { return this.createUserId; }
            set { this.createUserId = value; }
        }

        [Property(Column = "`update_date`")]
        public virtual DateTime? UpdateDate
        {
            get { return this.updateDate; }
            set { this.updateDate = value; }
        }

        [Property(Column = "`update_user_id`")]
        public virtual int? UpdateUserId
        {
            get { return this.updateUserId; }
            set { this.updateUserId = value; }
        }

        [Property(Column = "`fulf_order_id`")]
        public virtual string FulfOrderId
        {
            get { return this.fulfOrderId; }
            set { this.fulfOrderId = value; }
        }

        [Property(Column = "`profit_rate`")]
        public virtual decimal ProfitRate
        {
            get { return this.profitRate; }
            set { this.profitRate = value; }
        }

        [Property(Column = "`customer_po_number`")]
        public virtual string CustomerPoNumber
        {
            get { return this.customerPoNumber; }
            set { this.customerPoNumber = value; }
        }

        [Property(Column = "`is_dsd`")]
        public virtual bool IsDsd
        {
            get { return this.isDsd; }
            set { this.isDsd = value; }
        }

        [Property(Column = "`is_continuation`")]
        public virtual bool IsContinuation
        {
            get { return this.isContinuation; }
            set { this.isContinuation = value; }
        }
        #endregion

        #region Methods

        public static ICriteria CreateCriteria()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(Order));
                return c;
            }
        }

        public static Order GetOrder(int orderId)
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                return session.Get<Order>(orderId);
            }
        }

        public static List<Order> GetOrderList(ICriteria criteria)
        {
            return (List<Order>)criteria.List<Order>();
        }

        public static List<Order> GetOrderList()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(Order));
                return (List<Order>)c.List<Order>();
            }
        }

        public static List<Order> GetOrderList(string sortExpression, int maximumRows, int startRowIndex)
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(Order));
                if (sortExpression != null && sortExpression != "")
                {
                    // Get ascending or descending order
                    bool descending = sortExpression.Contains(" DESC");

                    // Strip off ASC or DESC ordering
                    sortExpression = sortExpression.Replace(" ASC", "");
                    sortExpression = sortExpression.Replace(" DESC", "");
                    sortExpression = sortExpression.Trim();

                    // Get multi column sort from the comma delimited string
                    List<String> expressions = new List<String>();
                    if (sortExpression.Contains(","))
                    {
                        string[] tokens = sortExpression.Split(",".ToCharArray());
                        for (int i = 0; i < tokens.Length; i++)
                        {
                            tokens[i] = tokens[i].Trim();
                            if (tokens[i] != "")
                                expressions.Add(tokens[i]);
                        }
                    }
                    else if (sortExpression != "")
                    {
                        expressions.Add(sortExpression);
                    }

                    // Create the order
                    for (int i = 0; i < expressions.Count; i++)
                    {
                        if (descending)
                            c.AddOrder(NHibernate.Expression.Order.Desc(expressions[i]));
                        else
                            c.AddOrder(NHibernate.Expression.Order.Asc(expressions[i]));
                    }
                }

                // Set offset and limit
                if (startRowIndex >= 0)
                    c.SetFirstResult(startRowIndex);

                if (maximumRows >= 0)
                    c.SetMaxResults(maximumRows);

                return (List<Order>)c.List<Order>();
            }
        }

        public static List<Order> GetOrderList(string sortExpression)
        {
            return GetOrderList(sortExpression, -1, -1);
        }

        public static void InsertOrder(Order obj)
        {
            if (obj != null)
                obj.Insert();
        }

        public static void UpdateOrder(Order obj)
        {
            if (obj != null)
                obj.Update();
        }

        public static void DeleteOrder(Order obj)
        {
            if (obj != null)
                obj.Delete();
        }

        protected static Order PopulateOrder(IDataReader r)
        {
            Order obj = new Order();
            obj.OrderId = (int)r["order_id"];
            obj.CampaignId = (int)r["campaign_id"];
            obj.OrderGroupId = (r["order_group_id"] == DBNull.Value) ? null : (int?)r["order_group_id"];
            obj.CustomerId = (r["customer_id"] == DBNull.Value) ? null : (int?)r["customer_id"];
            obj.SourceId = (r["source_id"] == DBNull.Value) ? null : (int?)r["source_id"];
            obj.OrderStatusId = (int)r["order_status_id"];
            obj.StatusReasonId = (r["status_reason_id"] == DBNull.Value) ? null : (int?)r["status_reason_id"];
            obj.BillingPostalAddressId = (int)r["billing_postal_address_id"];
            obj.BillingPhoneNumberId = (r["billing_phone_number_id"] == DBNull.Value) ? null : (int?)r["billing_phone_number_id"];
            obj.BillingFaxNumberId = (r["billing_fax_number_id"] == DBNull.Value) ? null : (int?)r["billing_fax_number_id"];
            obj.BillingEmailId = (r["billing_email_id"] == DBNull.Value) ? null : (int?)r["billing_email_id"];
            obj.ParticipantId = (r["participant_id"] == DBNull.Value) ? null : (int?)r["participant_id"];
            obj.InstallmentPlanId = (r["installment_plan_id"] == DBNull.Value) ? null : (int?)r["installment_plan_id"];
            obj.FormId = (r["form_id"] == DBNull.Value) ? null : (int?)r["form_id"];
            obj.OrderTypeId = (int)r["order_type_id"];
            obj.FmId = (string)r["fm_id"];
            obj.OLORD = (r["OL#ORD"] == DBNull.Value) ? null : (string)r["OL#ORD"];
            obj.OrderDate = (DateTime)r["order_date"];
            obj.AdjustmentAmount = (r["adjustment_amount"] == DBNull.Value) ? null : (decimal?)r["adjustment_amount"];
            obj.Comments = (r["comments"] == DBNull.Value) ? null : (string)r["comments"];
            obj.Deleted = (bool)r["deleted"];
            obj.CreateDate = (DateTime)r["create_date"];
            obj.CreateUserId = (int)r["create_user_id"];
            obj.UpdateDate = (r["update_date"] == DBNull.Value) ? null : (DateTime?)r["update_date"];
            obj.UpdateUserId = (r["update_user_id"] == DBNull.Value) ? null : (int?)r["update_user_id"];
            obj.FulfOrderId = (r["fulf_order_id"] == DBNull.Value) ? null : (string)r["fulf_order_id"];
            obj.ProfitRate = (decimal)r["profit_rate"];
            obj.CustomerPoNumber = (r["customer_po_number"] == DBNull.Value) ? null : (string)r["customer_po_number"];
            obj.IsDsd = (bool)r["is_dsd"];
            obj.IsContinuation = (bool)r["is_continuation"];

            return obj;
        }

        public static int GetCount()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(Order));
                c.SetProjection(Projections.RowCount());
                return (int)c.UniqueResult();
            }
        }

        /// <summary>
        /// Insert the entity to database.
        /// </summary>
        public virtual void Insert()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ITransaction trans = session.BeginTransaction();
                try
                {
                    session.Save(this);
                    trans.Commit();
                }
                catch
                {
                    trans.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// Update the entity to database.
        /// </summary>
        public virtual void Update()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ITransaction trans = session.BeginTransaction();
                try
                {
                    session.Update(this);
                    trans.Commit();
                }
                catch
                {
                    trans.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// Persist the entity back to database.
        /// </summary>
        public virtual void Save()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ITransaction trans = session.BeginTransaction();
                try
                {
                    session.SaveOrUpdate(this);
                    trans.Commit();
                }
                catch
                {
                    trans.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// Delete entity in database.
        /// </summary>
        public virtual void Delete()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ITransaction trans = session.BeginTransaction();
                try
                {
                    session.Delete(this);
                    trans.Commit();
                }
                catch
                {
                    trans.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// Local implementation of Equals based on unique value members
        /// </summary>
        public override bool Equals(object obj)
        {
            if (this == obj)
                return true;

            if ((obj == null) || (obj.GetType() != this.GetType()))
                return false;

            Order castObj = (Order)obj;
            return (castObj != null && this.orderId == castObj.OrderId);
        }

        /// <summary>
        /// Local implementation of GetHashCode based on unique value members
        /// </summary>
        public override int GetHashCode()
        {
            return 29 * (1 + this.orderId.GetHashCode());
        }
        #endregion
    }
}
