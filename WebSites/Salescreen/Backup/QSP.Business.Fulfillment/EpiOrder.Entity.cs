////////////////////////////////////////////////////////////////////////////////////////////
// Class generated by SqlCodeGen 1.1.0.0.
// Do not edit this file directly. Changes will be lost when this file is regenerated.
// Extensions should be added in a separate file using partial classes.
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using NHibernate;
using NHibernate.Expression;
using NHibernate.Mapping.Attributes;

namespace QSP.Business.Fulfillment
{
	[Serializable]
	[Class(Schema="`dbo`", Table="`epi_order`")]
	public partial class EpiOrder
	{
		#region Constants
        public const string EpiOrderEntity = "EpiOrder";
		public const string EpiOrderIdProperty = "EpiOrderId";
		public const string EpiFileIdProperty = "EpiFileId";
		public const string ImportedTfProperty = "ImportedTf";
		public const string UNITProperty = "UNIT";
		public const string BATProperty = "BAT";
		public const string INVProperty = "INV";
		public const string NAMEProperty = "NAME";
		public const string STREETProperty = "STREET";
		public const string FOURTHProperty = "FOURTH";
		public const string CITYProperty = "CITY";
		public const string STATEProperty = "STATE";
		public const string ZIPProperty = "ZIP";
		public const string PRODProperty = "PROD";
		public const string PRODUProperty = "PRODU";
		public const string TERMProperty = "TERM";
		public const string ORDERVALUEProperty = "ORDERVALUE";
		public const string STUDProperty = "STUD";
		public const string DISTProperty = "DIST";
		public const string FMProperty = "FM";
		public const string COMMProperty = "COMM";
		public const string CPAGEProperty = "CPAGE";
		public const string NRDMProperty = "NRDM";
		public const string FDIRProperty = "FDIR";
		public const string OTYPEProperty = "OTYPE";
		public const string TESTINDProperty = "TESTIND";
		public const string TOTENUMProperty = "TOTENUM";
		public const string ORDERINDICATORProperty = "ORDERINDICATOR";
		public const string REASONCODEProperty = "REASONCODE";
		public const string CreateDateProperty = "CreateDate";
		public const string ImportDateProperty = "ImportDate";
		#endregion

		#region Fields
		protected int epiOrderId = 0;
		protected int epiFileId = 0;
		protected bool importedTf = false;
		protected string uNIT = null;
		protected string bAT = null;
		protected string iNV = null;
		protected string nAME = null;
		protected string sTREET = null;
		protected string fOURTH = null;
		protected string cITY = null;
		protected string sTATE = null;
		protected string zIP = null;
		protected string pROD = null;
		protected string pRODU = null;
		protected int? tERM = null;
		protected decimal? oRDERVALUE = null;
		protected string sTUD = null;
		protected string dIST = null;
		protected string fM = null;
		protected decimal? cOMM = null;
		protected string cPAGE = null;
		protected string nRDM = null;
		protected string fDIR = null;
		protected string oTYPE = null;
		protected string tESTIND = null;
		protected string tOTENUM = null;
		protected string oRDERINDICATOR = null;
		protected string rEASONCODE = null;
		protected DateTime createDate = DateTime.Now;
		protected DateTime importDate = DateTime.Now;
		#endregion

		#region Constructors
		public EpiOrder() 
		{
		}
		#endregion

		#region Properties
		[RawXml(Content=@"
		<id name=""EpiOrderId"" column=""`epi_order_id`"">
			<generator class=""native"">
			</generator>
		</id>")]

		public virtual int EpiOrderId
		{
			get { return this.epiOrderId; }
			set { this.epiOrderId = value; }
		}

		[Property(Column="`epi_file_id`")]
		public virtual int EpiFileId
		{
			get { return this.epiFileId; }
			set { this.epiFileId = value; }
		}

		[Property(Column="`imported_tf`")]
		public virtual bool ImportedTf
		{
			get { return this.importedTf; }
			set { this.importedTf = value; }
		}

		[Property(Column="`UNIT`")]
		public virtual string UNIT
		{
			get { return this.uNIT; }
			set { this.uNIT = value; }
		}

		[Property(Column="`BAT#`")]
		public virtual string BAT
		{
			get { return this.bAT; }
			set { this.bAT = value; }
		}

		[Property(Column="`INV#`")]
		public virtual string INV
		{
			get { return this.iNV; }
			set { this.iNV = value; }
		}

		[Property(Column="`NAME`")]
		public virtual string NAME
		{
			get { return this.nAME; }
			set { this.nAME = value; }
		}

		[Property(Column="`STREET`")]
		public virtual string STREET
		{
			get { return this.sTREET; }
			set { this.sTREET = value; }
		}

		[Property(Column="`FOURTH`")]
		public virtual string FOURTH
		{
			get { return this.fOURTH; }
			set { this.fOURTH = value; }
		}

		[Property(Column="`CITY`")]
		public virtual string CITY
		{
			get { return this.cITY; }
			set { this.cITY = value; }
		}

		[Property(Column="`STATE`")]
		public virtual string STATE
		{
			get { return this.sTATE; }
			set { this.sTATE = value; }
		}

		[Property(Column="`ZIP`")]
		public virtual string ZIP
		{
			get { return this.zIP; }
			set { this.zIP = value; }
		}

		[Property(Column="`PROD`")]
		public virtual string PROD
		{
			get { return this.pROD; }
			set { this.pROD = value; }
		}

		[Property(Column="`PRODU`")]
		public virtual string PRODU
		{
			get { return this.pRODU; }
			set { this.pRODU = value; }
		}

		[Property(Column="`TERM`")]
		public virtual int? TERM
		{
			get { return this.tERM; }
			set { this.tERM = value; }
		}

		[Property(Column="`VALUE`")]
		public virtual decimal? ORDERVALUE
		{
			get { return this.oRDERVALUE; }
			set { this.oRDERVALUE = value; }
		}

		[Property(Column="`STUD`")]
		public virtual string STUD
		{
			get { return this.sTUD; }
			set { this.sTUD = value; }
		}

		[Property(Column="`DIST`")]
		public virtual string DIST
		{
			get { return this.dIST; }
			set { this.dIST = value; }
		}

		[Property(Column="`FM`")]
		public virtual string FM
		{
			get { return this.fM; }
			set { this.fM = value; }
		}

		[Property(Column="`COMM`")]
		public virtual decimal? COMM
		{
			get { return this.cOMM; }
			set { this.cOMM = value; }
		}

		[Property(Column="`CPAGE`")]
		public virtual string CPAGE
		{
			get { return this.cPAGE; }
			set { this.cPAGE = value; }
		}

		[Property(Column="`NRDM`")]
		public virtual string NRDM
		{
			get { return this.nRDM; }
			set { this.nRDM = value; }
		}

		[Property(Column="`FDIR`")]
		public virtual string FDIR
		{
			get { return this.fDIR; }
			set { this.fDIR = value; }
		}

		[Property(Column="`OTYPE`")]
		public virtual string OTYPE
		{
			get { return this.oTYPE; }
			set { this.oTYPE = value; }
		}

		[Property(Column="`TESTIND`")]
		public virtual string TESTIND
		{
			get { return this.tESTIND; }
			set { this.tESTIND = value; }
		}

		[Property(Column="`TOTENUM`")]
		public virtual string TOTENUM
		{
			get { return this.tOTENUM; }
			set { this.tOTENUM = value; }
		}

		[Property(Column="`ORDERINDICATOR`")]
		public virtual string ORDERINDICATOR
		{
			get { return this.oRDERINDICATOR; }
			set { this.oRDERINDICATOR = value; }
		}

		[Property(Column="`REASONCODE`")]
		public virtual string REASONCODE
		{
			get { return this.rEASONCODE; }
			set { this.rEASONCODE = value; }
		}

		[Property(Column="`create_date`")]
		public virtual DateTime CreateDate
		{
			get { return this.createDate; }
			set { this.createDate = value; }
		}

		[Property(Column="`import_date`")]
		public virtual DateTime ImportDate
		{
			get { return this.importDate; }
			set { this.importDate = value; }
		}
		#endregion

		#region Methods

        public static ICriteria CreateCriteria()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(EpiOrder));
                return c;
            }
        }

        public static List<EpiOrder> GetEpiOrderList(ICriteria criteria)
        {
            return (List<EpiOrder>)criteria.List<EpiOrder>();
        }

		public static EpiOrder GetEpiOrder(int epiOrderId)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				return session.Get<EpiOrder>(epiOrderId);
			}
		}

		public static List<EpiOrder> GetEpiOrderList()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(EpiOrder));
				return (List<EpiOrder>)c.List<EpiOrder>();
			}
		}

		public static List<EpiOrder> GetEpiOrderList(string sortExpression, int maximumRows, int startRowIndex)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(EpiOrder));
				if (sortExpression != null && sortExpression != "")
				{
					// Get ascending or descending order
					bool descending = sortExpression.Contains(" DESC");

					// Strip off ASC or DESC ordering
					sortExpression = sortExpression.Replace(" ASC", "");
					sortExpression = sortExpression.Replace(" DESC", "");
					sortExpression = sortExpression.Trim();

					// Get multi column sort from the comma delimited string
					List<String> expressions = new List<String>();
					if (sortExpression.Contains(","))
					{
						string[] tokens = sortExpression.Split(",".ToCharArray());
						for (int i = 0; i < tokens.Length; i++)
						{
							tokens[i] = tokens[i].Trim();
							if (tokens[i] != "")
								expressions.Add(tokens[i]);
						}
					}
					else if (sortExpression != "")
					{
						expressions.Add(sortExpression);
					}

					// Create the order
					for (int i = 0; i < expressions.Count; i++)
					{
						if (descending)
							c.AddOrder(NHibernate.Expression.Order.Desc(expressions[i]));
						else
							c.AddOrder(NHibernate.Expression.Order.Asc(expressions[i]));
					}
				}

				// Set offset and limit
				if (startRowIndex >= 0)
					c.SetFirstResult(startRowIndex);

				if (maximumRows >= 0)
					c.SetMaxResults(maximumRows);

				return (List<EpiOrder>)c.List<EpiOrder>();
			}
		}

		public static List<EpiOrder> GetEpiOrderList(string sortExpression)
		{
			return GetEpiOrderList(sortExpression, -1, -1);
		}

		public static void InsertEpiOrder(EpiOrder obj)
		{
			if (obj != null)
				obj.Insert();
		}

		public static void UpdateEpiOrder(EpiOrder obj)
		{
			if (obj != null)
				obj.Update();
		}

		public static void DeleteEpiOrder(EpiOrder obj)
		{
			if (obj != null)
				obj.Delete();
		}

        protected static EpiOrder PopulateEpiOrder(IDataReader r)
		{
			EpiOrder obj = new EpiOrder();
			obj.EpiOrderId = (int)r["epi_order_id"];
			obj.EpiFileId = (int)r["epi_file_id"];
			obj.ImportedTf = (bool)r["imported_tf"];
			obj.UNIT = (r["UNIT"] == DBNull.Value) ? null : (string)r["UNIT"];
			obj.BAT = (r["BAT#"] == DBNull.Value) ? null : (string)r["BAT#"];
			obj.INV = (r["INV#"] == DBNull.Value) ? null : (string)r["INV#"];
			obj.NAME = (r["NAME"] == DBNull.Value) ? null : (string)r["NAME"];
			obj.STREET = (r["STREET"] == DBNull.Value) ? null : (string)r["STREET"];
			obj.FOURTH = (r["FOURTH"] == DBNull.Value) ? null : (string)r["FOURTH"];
			obj.CITY = (r["CITY"] == DBNull.Value) ? null : (string)r["CITY"];
			obj.STATE = (r["STATE"] == DBNull.Value) ? null : (string)r["STATE"];
			obj.ZIP = (r["ZIP"] == DBNull.Value) ? null : (string)r["ZIP"];
			obj.PROD = (r["PROD"] == DBNull.Value) ? null : (string)r["PROD"];
			obj.PRODU = (r["PRODU"] == DBNull.Value) ? null : (string)r["PRODU"];
			obj.TERM = (r["TERM"] == DBNull.Value) ? null : (int?)r["TERM"];
			obj.ORDERVALUE = (r["VALUE"] == DBNull.Value) ? null : (decimal?)r["VALUE"];
			obj.STUD = (r["STUD"] == DBNull.Value) ? null : (string)r["STUD"];
			obj.DIST = (r["DIST"] == DBNull.Value) ? null : (string)r["DIST"];
			obj.FM = (r["FM"] == DBNull.Value) ? null : (string)r["FM"];
			obj.COMM = (r["COMM"] == DBNull.Value) ? null : (decimal?)r["COMM"];
			obj.CPAGE = (r["CPAGE"] == DBNull.Value) ? null : (string)r["CPAGE"];
			obj.NRDM = (r["NRDM"] == DBNull.Value) ? null : (string)r["NRDM"];
			obj.FDIR = (r["FDIR"] == DBNull.Value) ? null : (string)r["FDIR"];
			obj.OTYPE = (r["OTYPE"] == DBNull.Value) ? null : (string)r["OTYPE"];
			obj.TESTIND = (r["TESTIND"] == DBNull.Value) ? null : (string)r["TESTIND"];
			obj.TOTENUM = (r["TOTENUM"] == DBNull.Value) ? null : (string)r["TOTENUM"];
			obj.ORDERINDICATOR = (r["ORDERINDICATOR"] == DBNull.Value) ? null : (string)r["ORDERINDICATOR"];
			obj.REASONCODE = (r["REASONCODE"] == DBNull.Value) ? null : (string)r["REASONCODE"];
			obj.CreateDate = (DateTime)r["create_date"];
			obj.ImportDate = (DateTime)r["import_date"];

			return obj;
		}

		public static int GetCount()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(EpiOrder));
				c.SetProjection(Projections.RowCount());
				return (int) c.UniqueResult();
			}
		}

		/// <summary>
		/// Insert the entity to database.
		/// </summary>
		public virtual void Insert()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Save(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Update the entity to database.
		/// </summary>
		public virtual void Update()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Update(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Persist the entity back to database.
		/// </summary>
		public virtual void Save()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.SaveOrUpdate(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Delete entity in database.
		/// </summary>
		public virtual void Delete()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Delete(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals(object obj)
		{
			if (this == obj)
				return true;

			if ((obj == null) || (obj.GetType() != this.GetType())) 
				return false;

			EpiOrder castObj = (EpiOrder)obj;
			return (castObj != null && this.epiOrderId == castObj.EpiOrderId);
		}

		/// <summary>
		/// Local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return 29 * (1 + this.epiOrderId.GetHashCode());
		}
		#endregion
	}
}
