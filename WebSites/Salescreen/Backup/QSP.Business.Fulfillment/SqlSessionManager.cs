////////////////////////////////////////////////////////////////////////////////////////////
// Class generated by SqlCodeGen 1.0.0.0.
// Do not edit this file directly. Changes will be lost when this file is regenerated.
// Extensions should be added in a separate file using partial classes.
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.IO;
using System.Reflection;
using System.Xml;
using NHibernate;
using NHibernate.Cfg;
using NHibernate.Mapping.Attributes;
using Npgsql;

namespace QSP.Business.Fulfillment
{
	/// <summary>
	/// Summary description for SqlSessionManager.
	/// </summary>
	public sealed class SqlSessionManager
	{
		#region Fields
		private static Configuration configuration;
		private static ISessionFactory sessionFactory;
		#endregion

		#region Constructors
		static SqlSessionManager()
		{
			// HACK: Force VS.NET to include the Npgsql.dll even though we 
			// never use it explicitly in the code, but loaded dynamically by NHibernate.
			NpgsqlCommand c = new NpgsqlCommand();

			configuration = new Configuration();
			configuration.SetProperty(NHibernate.Cfg.Environment.ConnectionProvider, "NHibernate.Connection.DriverConnectionProvider");
			configuration.SetProperty(NHibernate.Cfg.Environment.Dialect, "NHibernate.Dialect.MsSql2000Dialect");
			configuration.SetProperty(NHibernate.Cfg.Environment.ConnectionDriver, "NHibernate.Driver.SqlClientDriver");
			configuration.SetProperty(NHibernate.Cfg.Environment.ConnectionString, System.Configuration.ConfigurationManager.ConnectionStrings["QSPForm.Data.ConnectionString"].ConnectionString);
            configuration.SetProperty(NHibernate.Cfg.Environment.CommandTimeout, "0");

			configuration.AddInputStream(HbmSerializer.Default.Serialize(Assembly.GetExecutingAssembly()));
			sessionFactory = configuration.BuildSessionFactory();
		}
		#endregion

		#region Properties
		public static Configuration Configuration
		{
			get { return configuration; }
		}
		#endregion

		#region Methods
		public static ISession OpenSession()
		{
			return sessionFactory.OpenSession();
		}
		#endregion
	}
}
