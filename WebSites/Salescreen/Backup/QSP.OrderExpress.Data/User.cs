///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'user'
// Generated by Jas on: Monday, November 03, 2003, 4:18:12 PM
// Because the Base Class alrfeady implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using System.Runtime.InteropServices;
using dataDef = QSPForm.Common.DataDef.UserTable;

namespace QSPForm.Data
{
	
	/// <summary>
	/// Purpose: Data Access class for the table 'user'.
	/// </summary>
	
	public class User : DBTableOperation
	{
		
		//
		// Stored procedure parameter names
		// Paremater Name must match with the SP Called
		internal const String PARAM_PKID      = "@iuser_id";
		internal const String PARAM_USER_NAME = "@suser_name";
		internal const String PARAM_PASSWORD  = "@spassword";
		internal const String PARAM_TITLE     = "@stitle";
		internal const String PARAM_EMAIL     = "@semail";
		internal const String PARAM_BEST_TIME = "@sbest_time_to_call";
		internal const String PARAM_DAY_PHONE = "@sday_phone_no";
		internal const String PARAM_EVEN_PHONE = "@sevening_phone_no";
		internal const String PARAM_FAX_NO     = "@sfax_no";		
		internal const String PARAM_UPD_USER_ID     = "@iupdate_user_id";
		internal const String PARAM_UPD_DATE        = "@daupdate_date";
		internal const string PARAM_CAMPAIGN_ID ="@icampaign_id";
		internal const string PARAM_LAST_NAME = "@slast_name";
		public const string PARAM_FIRST_NAME = "@sfirst_name";
		internal const String PARAM_ROLE_ID   = "@irole_id";
		//
		// Stored procedure names for each operation
		private const String SQL_PROC_INSERT       = "pr_user_insert";
		private const String SQL_PROC_UPDATE       = "pr_user_update";
		private const String SQL_PROC_DELETE       = "pr_user_delete";
		private const String SQL_PROC_SELECT_ONE   = "pr_user_SelectOne";
		private const String SQL_PROC_SELECT_ALL   = "pr_user_SelectAll";

		//
		// DataSetCommand object
		//
		private SqlCommand insertCommand;
		private SqlCommand updateCommand;
		private SqlCommand deleteCommand;
		
		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public User()
		{
			//
			// Create the DataSetCommand
			//
			adapter = new SqlDataAdapter();        
			adapter.TableMappings.Add("Table", dataDef.TBL_USERS);
		}
		protected override string TableName
		{
			get{return dataDef.TBL_USERS;}
		}

		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand(SQL_PROC_INSERT);
				insertCommand.CommandType = CommandType.StoredProcedure;				
            
				SqlParameterCollection sqlParams = insertCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_USER_NAME, SqlDbType.VarChar, 50));
				sqlParams.Add(new SqlParameter(PARAM_PASSWORD, SqlDbType.VarChar, 50));
				sqlParams.Add(new SqlParameter(PARAM_TITLE, SqlDbType.VarChar, 50));
				sqlParams.Add(new SqlParameter(PARAM_EMAIL, SqlDbType.VarChar, 50));
				sqlParams.Add(new SqlParameter(PARAM_BEST_TIME, SqlDbType.VarChar, 20));
				sqlParams.Add(new SqlParameter(PARAM_DAY_PHONE, SqlDbType.VarChar, 20));
				sqlParams.Add(new SqlParameter(PARAM_EVEN_PHONE, SqlDbType.VarChar, 20));
				sqlParams.Add(new SqlParameter(PARAM_FAX_NO, SqlDbType.VarChar, 20));
				sqlParams.Add(new SqlParameter(PARAM_LAST_NAME, SqlDbType.VarChar, 50));
				sqlParams.Add(new SqlParameter(PARAM_FIRST_NAME, SqlDbType.VarChar, 50));
				sqlParams.Add(new SqlParameter(PARAM_ROLE_ID, SqlDbType.Int));

				sqlParams.Add(new SqlParameter(PARAM_CREATE_USER_ID, SqlDbType.Int));
				//sqlParams.Add(new SqlParameter(PARAM_ERROR, SqlDbType.Int));

				sqlParams[PARAM_PKID].Direction = ParameterDirection.Output;
				//sqlParams[PARAM_ERROR].Direction = ParameterDirection.Output;
				//sqlParams[PARAM_ERROR].Value = 0;
				//
				// Define the parameter mappings from the data table in the
				// dataset.
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_USER_NAME].SourceColumn = dataDef.FLD_USER_NAME;
				sqlParams[PARAM_PASSWORD].SourceColumn = dataDef.FLD_PASSWORD;
				sqlParams[PARAM_TITLE].SourceColumn = dataDef.FLD_TITLE;
				sqlParams[PARAM_EMAIL].SourceColumn = dataDef.FLD_EMAIL;
				sqlParams[PARAM_BEST_TIME].SourceColumn = dataDef.FLD_BEST_TIME_TO_CALL;
				sqlParams[PARAM_DAY_PHONE].SourceColumn = dataDef.FLD_DAY_PHONE_NO;
				sqlParams[PARAM_EVEN_PHONE].SourceColumn = dataDef.FLD_DAY_PHONE_NO;
				sqlParams[PARAM_FAX_NO].SourceColumn = dataDef.FLD_FAX_NO;
				sqlParams[PARAM_LAST_NAME].SourceColumn = dataDef.FLD_LAST_NAME;
				sqlParams[PARAM_FIRST_NAME].SourceColumn = dataDef.FLD_FIRST_NAME;
				sqlParams[PARAM_ROLE_ID].SourceColumn = dataDef.FLD_ROLE_ID;
				sqlParams[PARAM_CREATE_USER_ID].SourceColumn = dataDef.FLD_CREATE_USER_ID;
				//Don't need to map ErrorCode cause is not imply in the insert
				//Only Mapped DataColumn are imply...
				
			}
            
			return insertCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand(SQL_PROC_UPDATE);
				updateCommand.CommandType = CommandType.StoredProcedure;				
            
				SqlParameterCollection sqlParams = updateCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_USER_NAME, SqlDbType.VarChar, 50));
				sqlParams.Add(new SqlParameter(PARAM_PASSWORD, SqlDbType.VarChar, 50));
				sqlParams.Add(new SqlParameter(PARAM_TITLE, SqlDbType.VarChar, 50));
				sqlParams.Add(new SqlParameter(PARAM_EMAIL, SqlDbType.VarChar, 50));
				sqlParams.Add(new SqlParameter(PARAM_BEST_TIME, SqlDbType.VarChar, 20));
				sqlParams.Add(new SqlParameter(PARAM_DAY_PHONE, SqlDbType.VarChar, 20));
				sqlParams.Add(new SqlParameter(PARAM_EVEN_PHONE, SqlDbType.VarChar, 20));
				sqlParams.Add(new SqlParameter(PARAM_FAX_NO, SqlDbType.VarChar, 20));
				sqlParams.Add(new SqlParameter(PARAM_LAST_NAME, SqlDbType.VarChar, 50));
				sqlParams.Add(new SqlParameter(PARAM_FIRST_NAME, SqlDbType.VarChar, 50));
				sqlParams.Add(new SqlParameter(PARAM_ROLE_ID, SqlDbType.Int));

				sqlParams.Add(new SqlParameter(PARAM_DELETED, SqlDbType.Bit));
				sqlParams.Add(new SqlParameter(PARAM_UPD_USER_ID, SqlDbType.Int));
				//sqlParams.Add(new SqlParameter(PARAM_ERROR, SqlDbType.Int));

				//sqlParams[PARAM_ERROR].Direction = ParameterDirection.Output;
				//sqlParams[PARAM_ERROR].Value = 0;
				//
				// Define the parameter mappings from the data table in the
				// dataset.
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_USER_NAME].SourceColumn = dataDef.FLD_USER_NAME;
				sqlParams[PARAM_PASSWORD].SourceColumn = dataDef.FLD_PASSWORD;
				sqlParams[PARAM_TITLE].SourceColumn = dataDef.FLD_TITLE;
				sqlParams[PARAM_EMAIL].SourceColumn = dataDef.FLD_EMAIL;
				sqlParams[PARAM_BEST_TIME].SourceColumn = dataDef.FLD_BEST_TIME_TO_CALL;
				sqlParams[PARAM_DAY_PHONE].SourceColumn = dataDef.FLD_DAY_PHONE_NO;
				sqlParams[PARAM_EVEN_PHONE].SourceColumn = dataDef.FLD_DAY_PHONE_NO;
				sqlParams[PARAM_FAX_NO].SourceColumn = dataDef.FLD_FAX_NO;
				sqlParams[PARAM_LAST_NAME].SourceColumn = dataDef.FLD_LAST_NAME;
				sqlParams[PARAM_FIRST_NAME].SourceColumn = dataDef.FLD_FIRST_NAME;
				sqlParams[PARAM_DELETED].SourceColumn = dataDef.FLD_DELETED;
				sqlParams[PARAM_UPD_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;
				sqlParams[PARAM_ROLE_ID].SourceColumn = dataDef.FLD_ROLE_ID;

				//Don't need to map ErrorCode cause is not imply in the insert
				//Only Mapped DataColumn are imply...
			}
            
			return updateCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand(SQL_PROC_DELETE);
				deleteCommand.CommandType = CommandType.StoredProcedure;				
            
				SqlParameterCollection sqlParams = deleteCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_UPD_USER_ID, SqlDbType.Int));
				//sqlParams.Add(new SqlParameter(PARAM_ERROR, SqlDbType.Int));

				//sqlParams[PARAM_ERROR].Direction = ParameterDirection.Output;
				//sqlParams[PARAM_ERROR].Value = 0;
				//
				// Define the parameter mappings from the data tabl
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_UPD_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;
					//Only Mapped DataColumn are imply...
			}
            
			return deleteCommand;
		}
		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>User_id</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>User_id</LI>
		///		 <LI>User_name</LI>
		///		 <LI>Password</LI>
		///		 <LI>Title</LI>
		///		 <LI>Email</LI>
		///		 <LI>Best_time_to_call</LI>
		///		 <LI>Day_phone_no</LI>
		///		 <LI>Evening_phone_no</LI>
		///		 <LI>Fax_no</LI>
		///		 <LI>Deleted</LI>
		///		 <LI>Create_user_id</LI>
		///		 <LI>Create_date</LI>
		///		 <LI>Update_user_id</LI>
		///		 <LI>Update_date</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public new dataDef SelectOne(int UserID)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ONE;
			cmdToExecute.CommandType = CommandType.StoredProcedure;			
			
			dataDef user = new dataDef();

			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, UserID));
			
			
			Select(cmdToExecute, user);

			return user;
		}
		
		public dataDef SelectAllWrole_idLogic(int RoleID)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_user_SelectAllWrole_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;			
			
			dataDef user = new dataDef();

			cmdToExecute.Parameters.Add(new SqlParameter("@irole_id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, RoleID));
						
			Select(cmdToExecute, user);

			return user;
		}
		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public new dataDef SelectAll()
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ALL;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
		
			
			
			Select(cmdToExecute,Table);
			return Table;		
		}

		
		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the UserName.
		/// </summary>
		/// <returns>dataDef (DataSet) object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>User_Name</LI>
		/// </UL>
		/// </remarks>
		public dataDef SelectAllWuser_nameLogic(String userName)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_user_SelectAllWuser_nameLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_USER_NAME, SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, userName));
			
			Select(cmdToExecute,Table);
			return Table;
		}

		public dataDef SelectAll_Search(int SearchType, string Criteria)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_user_SelectAll_Search";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_TYPE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchType));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_CRITERIA, SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Criteria));
			
			
			Select(cmdToExecute,Table);

			return Table;
		}

		public DataTable Select_UsernameCheck(string UserName, int UserID)
		{
			DataTable DT = new DataTable();
			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_user_UserName_check";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_USER_NAME, SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, UserName));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, UserID));
					
			Select(cmdToExecute,DT);

			return DT;	
		}

		public DataTable Select_NameLookup(int UserID)
		{
			DataTable DT = new DataTable();
			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_user_SelectName";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, UserID));
			
			Select(cmdToExecute,DT);

			return DT;	
		}

		public dataDef SelectOneFSM_UserWentity_type_idLogic(int EntityTypeID, int EntityID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_user_SelectOneFSM_UserWentity_type_idLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter("@ientity_type_id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, EntityTypeID));
			cmdToExecute.Parameters.Add(new SqlParameter("@ientity_id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, EntityID));
			
			Select(cmdToExecute,Table);
			return Table;
		}

	}
}
