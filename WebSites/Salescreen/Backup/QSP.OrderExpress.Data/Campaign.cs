///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'campaign'
// Generated by Jas on: Monday, November 03, 2003, 4:18:08 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
//using System.EnterpriseServices;
//using System.Runtime.InteropServices;
using dataDef = QSPForm.Common.DataDef.CampaignTable;

namespace QSPForm.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'campaign'.
	/// </summary>
	public class Campaign : DBTableOperation 
	{
		
		//
		// Stored procedure parameter names
		// Paremater Name must match with the SP Called
		private const String PARAM_PKID				= "@icampaign_id";
		private const String PARAM_ACCOUNT_ID		= "@iaccount_id";
		private const String PARAM_PROG_TYPE_ID     = "@iprogram_type_id";
		private const string PARAM_TRADE_CLASS_ID	= "@itrade_class_id";
		private const String PARAM_WAREHOUSE_ID     = "@iwarehouse_id";
		private const String PARAM_NAME				= "@scampaign_name";
		public const string PARAM_FM_ID				= "@sfm_id";		
		public const string PARAM_TAX_EXEMPTION_NO	="@stax_exemption_number";
		public const string PARAM_TAX_EXEMPTION_EXP_DATE	= "@datax_exemption_expiration_date";
		private const String PARAM_START_DATE		= "@dastart_date";
		private const String PARAM_END_DATE			= "@daend_date";
		public const string PARAM_FISCAL_YEAR		= "@ifiscal_year";
		public const string PARAM_FORM_ID			= "@iform_id";
		public const string PARAM_GOAL_ESTIMATED_GROSS	= "@mgoal_estimated_gross";
		public const string PARAM_ENROLLMENT		= "@ienrollment";
		public const string PARAM_COMMENTS			= "@scomments";	
		public const string PARAM_ALL_FM_REPORT_TO	= "@ball_fm_report_to";
        //public const string PARAM_PROFIT_RATE = "@profit_rate";
        //move only at order level
		//
		// Stored procedure names for each operation
		private const String SQL_PROC_INSERT       = "pr_campaign_Insert";
		private const String SQL_PROC_UPDATE       = "pr_campaign_Update";
		private const String SQL_PROC_DELETE       = "pr_campaign_Delete";
		private const String SQL_PROC_SELECT_ONE   = "pr_campaign_SelectOne";
		private const String SQL_PROC_SELECT_ALL   = "pr_campaign_SelectAll";
		private const String SQL_PROC_INSERT_CAMPAIGN_USER = "pr_campaign_user_insert";
		private const string SQL_PROC_DELETE_CAMPAIGN_USER = "pr_campaign_user_Delete";

		//
		// DataSetCommand object
		//
		
		private SqlCommand insertCommand;
		private SqlCommand updateCommand;
		private SqlCommand deleteCommand;

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public Campaign()
		{
		
		}
		protected override string TableName
		{
			get{return dataDef.TBL_CAMPAIGNS;}
		}
		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand(SQL_PROC_INSERT);
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters;
            
				SqlParameterCollection sqlParams = insertCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_ACCOUNT_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_PROG_TYPE_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_TRADE_CLASS_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_WAREHOUSE_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_NAME, SqlDbType.VarChar, 100));
				sqlParams.Add(new SqlParameter(PARAM_FM_ID, SqlDbType.VarChar, 4));	
				sqlParams.Add(new SqlParameter(PARAM_TAX_EXEMPTION_NO, SqlDbType.VarChar, 20));
				sqlParams.Add(new SqlParameter(PARAM_TAX_EXEMPTION_EXP_DATE, SqlDbType.DateTime));
				sqlParams.Add(new SqlParameter(PARAM_START_DATE, SqlDbType.DateTime));
				sqlParams.Add(new SqlParameter(PARAM_END_DATE, SqlDbType.DateTime));
				sqlParams.Add(new SqlParameter(PARAM_FISCAL_YEAR, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_FORM_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_GOAL_ESTIMATED_GROSS, SqlDbType.Money));
				sqlParams.Add(new SqlParameter(PARAM_ENROLLMENT, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_COMMENTS, SqlDbType.VarChar, 4000));
				
				sqlParams.Add(new SqlParameter(PARAM_CREATE_USER_ID, SqlDbType.Int));

                //sqlParams.Add(new SqlParameter(PARAM_PROFIT_RATE, SqlDbType.Float));
                //move only at order level
				
				sqlParams[PARAM_PKID].Direction = ParameterDirection.Output;
				//
				// Define the parameter mappings from the data table in the
				// dataset.
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_ACCOUNT_ID].SourceColumn = dataDef.FLD_ACCOUNT_ID;
				sqlParams[PARAM_PROG_TYPE_ID].SourceColumn = dataDef.FLD_PROG_TYPE_ID;
				sqlParams[PARAM_TRADE_CLASS_ID].SourceColumn = dataDef.FLD_TRADE_CLASS_ID;
				sqlParams[PARAM_WAREHOUSE_ID].SourceColumn = dataDef.FLD_WAREHOUSE_ID;
				sqlParams[PARAM_NAME].SourceColumn = dataDef.FLD_NAME;
				sqlParams[PARAM_FM_ID].SourceColumn = dataDef.FLD_FM_ID;
				sqlParams[PARAM_TAX_EXEMPTION_NO].SourceColumn = dataDef.FLD_TAX_EXEMPTION_NO;
				sqlParams[PARAM_TAX_EXEMPTION_EXP_DATE].SourceColumn = dataDef.FLD_TAX_EXEMPTION_EXP_DATE;
				sqlParams[PARAM_START_DATE].SourceColumn = dataDef.FLD_START_DATE;
				sqlParams[PARAM_END_DATE].SourceColumn = dataDef.FLD_END_DATE;
				sqlParams[PARAM_FISCAL_YEAR].SourceColumn = dataDef.FLD_FISCAL_YEAR;
				sqlParams[PARAM_FORM_ID].SourceColumn = dataDef.FLD_FORM_ID;
				sqlParams[PARAM_GOAL_ESTIMATED_GROSS].SourceColumn = dataDef.FLD_GOAL_ESTIMATED_GROSS;
				sqlParams[PARAM_ENROLLMENT].SourceColumn = dataDef.FLD_ENROLLMENT;
				sqlParams[PARAM_COMMENTS].SourceColumn = dataDef.FLD_COMMENTS;
                //sqlParams[PARAM_PROFIT_RATE].SourceColumn = dataDef.FLD_PROFIT_RATE;
                //move only at order level

				sqlParams[PARAM_CREATE_USER_ID].SourceColumn = dataDef.FLD_CREATE_USER_ID;
				//Don't need to map ErrorCode cause is not imply in the insert
				//Only Mapped DataColumn are imply...
				
			}
            
			return insertCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand(SQL_PROC_UPDATE);
				updateCommand.CommandType = CommandType.StoredProcedure;
				            
				SqlParameterCollection sqlParams = updateCommand.Parameters;
            				

				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_ACCOUNT_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_PROG_TYPE_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_TRADE_CLASS_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_WAREHOUSE_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_NAME, SqlDbType.VarChar, 100));
				sqlParams.Add(new SqlParameter(PARAM_FM_ID, SqlDbType.VarChar, 4));	
				sqlParams.Add(new SqlParameter(PARAM_TAX_EXEMPTION_NO, SqlDbType.VarChar, 20));
				sqlParams.Add(new SqlParameter(PARAM_TAX_EXEMPTION_EXP_DATE, SqlDbType.DateTime));
				sqlParams.Add(new SqlParameter(PARAM_START_DATE, SqlDbType.DateTime));
				sqlParams.Add(new SqlParameter(PARAM_END_DATE, SqlDbType.DateTime));
				sqlParams.Add(new SqlParameter(PARAM_FISCAL_YEAR, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_FORM_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_GOAL_ESTIMATED_GROSS, SqlDbType.Money));
				sqlParams.Add(new SqlParameter(PARAM_ENROLLMENT, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_COMMENTS, SqlDbType.VarChar, 4000));

				sqlParams.Add(new SqlParameter(PARAM_DELETED, SqlDbType.Bit));
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));

                //sqlParams.Add(new SqlParameter(PARAM_PROFIT_RATE, SqlDbType.Float));
                //move only at order levels


				//
				// Define the parameter mappings from the data table in the
				// dataset.
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_ACCOUNT_ID].SourceColumn = dataDef.FLD_ACCOUNT_ID;
				sqlParams[PARAM_PROG_TYPE_ID].SourceColumn = dataDef.FLD_PROG_TYPE_ID;
				sqlParams[PARAM_TRADE_CLASS_ID].SourceColumn = dataDef.FLD_TRADE_CLASS_ID;
				sqlParams[PARAM_WAREHOUSE_ID].SourceColumn = dataDef.FLD_WAREHOUSE_ID;
				sqlParams[PARAM_NAME].SourceColumn = dataDef.FLD_NAME;
				sqlParams[PARAM_FM_ID].SourceColumn = dataDef.FLD_FM_ID;
				sqlParams[PARAM_TAX_EXEMPTION_NO].SourceColumn = dataDef.FLD_TAX_EXEMPTION_NO;
				sqlParams[PARAM_TAX_EXEMPTION_EXP_DATE].SourceColumn = dataDef.FLD_TAX_EXEMPTION_EXP_DATE;
				sqlParams[PARAM_START_DATE].SourceColumn = dataDef.FLD_START_DATE;
				sqlParams[PARAM_END_DATE].SourceColumn = dataDef.FLD_END_DATE;
				sqlParams[PARAM_FISCAL_YEAR].SourceColumn = dataDef.FLD_FISCAL_YEAR;
				sqlParams[PARAM_FORM_ID].SourceColumn = dataDef.FLD_FORM_ID;
				sqlParams[PARAM_GOAL_ESTIMATED_GROSS].SourceColumn = dataDef.FLD_GOAL_ESTIMATED_GROSS;
				sqlParams[PARAM_ENROLLMENT].SourceColumn = dataDef.FLD_ENROLLMENT;
				sqlParams[PARAM_COMMENTS].SourceColumn = dataDef.FLD_COMMENTS;

				sqlParams[PARAM_DELETED].SourceColumn = dataDef.FLD_DELETED;
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;
				//Only Mapped DataColumn are imply...

                //sqlParams[PARAM_PROFIT_RATE].SourceColumn = dataDef.FLD_PROFIT_RATE;
                //move only at order level

			}
            
			return updateCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )    
			{  
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand(SQL_PROC_DELETE);
				deleteCommand.CommandType = CommandType.StoredProcedure;
				
            
				SqlParameterCollection sqlParams = deleteCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));
				
				//
				// Define the parameter mappings from the data tabl
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;
				//Only Mapped DataColumn are imply...
			}
            
			return deleteCommand;
		}
		
		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Campaign_id</LI>
		/// </UL> 
		/// </remarks>
		public new dataDef SelectOne(int CampID)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ONE;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CampID));
			
			dataDef toReturn = new dataDef();			
			Select(cmdToExecute,toReturn);
			return toReturn;
			
		}

		public dataDef SelectOne_Info(int CampID)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_campaign_SelectOne_Info";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CampID));
			
			dataDef toReturn = new dataDef();						
			Select(cmdToExecute,toReturn);
			return toReturn;
			
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public new dataDef SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ALL;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			dataDef toReturn = new dataDef();			

			Select(cmdToExecute,toReturn);
			return toReturn;
		}



		public dataDef SelectTopOneWuser_idLogic(int UserID)
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "pr_campaign_SelectTopOneWuser_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iuser_id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, UserID));
			
			dataDef toReturn = new dataDef();	
			
			Select(cmdToExecute,toReturn);
			return toReturn;
			
		}
		
		public dataDef SelectAllWuser_idLogic(int UserID)
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "pr_campaign_SelectAllWuser_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iuser_id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, UserID));
			
			dataDef toReturn = new dataDef();	
			
			Select(cmdToExecute,toReturn);
			return toReturn;
			
		}

		public dataDef SelectLastOneWuser_idLogic(int UserID)
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "pr_campaign_SelectLastOneWuser_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iuser_id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, UserID));
			
			dataDef toReturn = new dataDef();	
			
			Select(cmdToExecute,toReturn);
			return toReturn;
			
		}

		public dataDef SelectTopOneWfm_idLogic(string FMID)
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "pr_campaign_SelectTopOneWfm_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@sfm_id", SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FMID));
			
			dataDef toReturn = new dataDef();	
			
			Select(cmdToExecute,toReturn);
			return toReturn;
			
		}
		
		public dataDef SelectAllWfm_idLogic(string FMID)
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "pr_campaign_SelectAllWfm_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@sfm_id", SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FMID));
			
			dataDef toReturn = new dataDef();	
			
			Select(cmdToExecute,toReturn);
			return toReturn;
			
		}

		public dataDef SelectAllWaccount_idLogic(int AccountID)
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_campaign_SelectAllWaccount_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ACCOUNT_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, AccountID));
			
			dataDef toReturn = new dataDef();	
			
			Select(cmdToExecute,toReturn);
			return toReturn;
			
		}

		public dataDef SelectAllWaccount_idLogic(int AccountID, int FiscalYear)
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_campaign_SelectAllWaccount_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ACCOUNT_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, AccountID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FISCAL_YEAR, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FiscalYear));
			
			dataDef toReturn = new dataDef();	
			
			Select(cmdToExecute,toReturn);
			return toReturn;
			
		}

		public dataDef SelectLastOneWaccount_idLogic(int AccountID)
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_campaign_SelectLastOneWaccount_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ACCOUNT_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, AccountID));
			
			dataDef toReturn = new dataDef();	
			
			Select(cmdToExecute,toReturn);
			return toReturn;
			
		}


		public dataDef SelectTopOne()
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "pr_campaign_SelectTopOne";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			dataDef toReturn = new dataDef();	
			
			Select(cmdToExecute,toReturn);
			return toReturn;
			
		}

        public dataDef SelectAllWprogram_agreement_idLogic(int ProgramAgreementID)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.pr_campaign_SelectAllWprogram_agreement_idLogic";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            cmdToExecute.Parameters.Add(new SqlParameter("@iprogram_agreement_id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ProgramAgreementID));
            
            dataDef toReturn = new dataDef();

            Select(cmdToExecute, toReturn);
            return toReturn;

        }
		
		public dataDef SelectAll_Search(int SearchType, String Criteria, string FM_ID, int FiscalYear, int ProgramType, string SubdivisionCode, DateTime StartDate, DateTime EndDate, bool WithAllFMReportTo)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_campaign_SelectAll_Search";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_TYPE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchType));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_CRITERIA, SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Criteria));
			
			if (FM_ID.Length > 0)
				cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FM_ID, SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FM_ID));
			if(FiscalYear > 0)
				cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FISCAL_YEAR, SqlDbType.Int,4,ParameterDirection.Input,false,10,0,"",DataRowVersion.Proposed, FiscalYear));
			if(ProgramType > 0)
				cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PROG_TYPE_ID, SqlDbType.Int,4,ParameterDirection.Input,false,10,0,"",DataRowVersion.Proposed, ProgramType));
			if (SubdivisionCode.Length > 0)
				cmdToExecute.Parameters.Add(new SqlParameter("@ssubdivision_code", SqlDbType.NVarChar, 7, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SubdivisionCode));
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ALL_FM_REPORT_TO, SqlDbType.Bit, 1, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, WithAllFMReportTo));
			//Mandatory
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_START_DATE, SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, StartDate));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_END_DATE, SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, EndDate));
			
			
			
			Select(cmdToExecute,Table);

			return Table;
		}

        public void CampaignLinkToCCA(int campaignID)
        {
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_campaign_link_to_cca";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
            cmdToExecute.Parameters.Add(new SqlParameter("@campaign_id", campaignID));
						
			ExecuteCmd(cmdToExecute);
        }
	}
}
