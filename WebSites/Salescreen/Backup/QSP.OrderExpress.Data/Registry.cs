///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'campaign'
// Generated by Jas on: Monday, November 03, 2003, 4:18:08 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
//using System.EnterpriseServices;
//using System.Runtime.InteropServices;
using dataDef = QSPForm.Common.DataDef.RegistryTable;

namespace QSPForm.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Registry'.
	/// </summary>
	public class Registry : DBTableOperation 
	{
		
		//
		// Stored procedure parameter names
		// Paremater Name must match with the SP Called
		private const String PARAM_PKID				= "@iregistry_id";
		private const String PARAM_USER_ID			= "@iuser_id";
		private const String PARAM_ROLE				= "@irole";
		private const String PARAM_FMID				= "@sfm_id";
		private const String PARAM_USER_NAME		= "@suser_name";
		private const String PARAM_PASSWORD         = "@spassword";
		
		

		//
		// Stored procedure names for each operation
		private const String SQL_PROC_INSERT       = "pr_registry_Login";
		private const String SQL_PROC_UPDATE       = "pr_registry_Logout";
		private const String SQL_PROC_SELECT_ONE   = "pr_registry_SelectOne";

		#region Class Member Declarations
			private Int32		_registry_id;
				
		#endregion

		//
		// DataSetCommand object
		//
		
		private SqlCommand insertCommand;
		private SqlCommand updateCommand;
		private SqlCommand deleteCommand;

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public Registry()
		{
		
		}
		protected override string TableName
		{
			get
			{
				return dataDef.TBL_REGISTRY;
			}
		}
		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand(SQL_PROC_INSERT);
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters;
            
				SqlParameterCollection sqlParams = insertCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_USER_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_ROLE, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_FMID, SqlDbType.VarChar));
				sqlParams.Add(new SqlParameter(PARAM_USER_NAME, SqlDbType.VarChar));
				sqlParams.Add(new SqlParameter(PARAM_PASSWORD, SqlDbType.VarChar));
				
				sqlParams[PARAM_PKID].Direction = ParameterDirection.Output;
				//
				// Define the parameter mappings from the data table in the
				// dataset.
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_USER_ID].SourceColumn = dataDef.FLD_USER_ID;
				sqlParams[PARAM_ROLE].SourceColumn = dataDef.FLD_ROLE;
				sqlParams[PARAM_FMID].SourceColumn = dataDef.FLD_FMID;
				sqlParams[PARAM_USER_NAME].SourceColumn = dataDef.FLD_USER_NAME;
				sqlParams[PARAM_PASSWORD].SourceColumn = dataDef.FLD_PASSWORD;
				//Don't need to map ErrorCode cause is not imply in the insert
				//Only Mapped DataColumn are imply...
				
			}
            
			return insertCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand(SQL_PROC_UPDATE);
				updateCommand.CommandType = CommandType.StoredProcedure;				            
				SqlParameterCollection sqlParams = updateCommand.Parameters;
            				

				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				
				//
				// Define the parameter mappings from the data table in the
				// dataset.
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;				
				//Don't need to map ErrorCode cause is not imply in the insert
				//Only Mapped DataColumn are imply...
			}
            
			return updateCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildDeleteCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )    
			{  
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand();
//				deleteCommand = new SqlCommand(SQL_PROC_DELETE);
//				deleteCommand.CommandType = CommandType.StoredProcedure;
//				
//            
//				SqlParameterCollection sqlParams = deleteCommand.Parameters;
//            
//				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
//				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));
//				sqlParams.Add(new SqlParameter(PARAM_ERROR, SqlDbType.Int));
//
//				sqlParams[PARAM_ERROR].Direction = ParameterDirection.Output;
//				sqlParams[PARAM_ERROR].Value = 0;
//				//
//				// Define the parameter mappings from the data tabl
//				//
//				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
//				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;
				//Only Mapped DataColumn are imply...
			}
            
			return deleteCommand;
		}

	

//		public override int Insert()
//		{
//			return 0;
//		}
//
//	
//
//		public override int Update()
//		{
//			return 0;
//		}
//
//		
//
//		public override int Delete()
//		{
//			return 0;
//		}

		
		
		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>RegistryID</LI>
		/// </UL> 
		/// </remarks> 
		public new dataDef SelectOne(int RegistryID)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ONE;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, RegistryID));
			

			dataDef toReturn = new dataDef();			
			
			Select(cmdToExecute,toReturn);
			return toReturn;
			
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public new dataDef SelectAll()
		{
//			SqlCommand	cmdToExecute = new SqlCommand();
//			cmdToExecute.CommandText = SQL_PROC_SELECT_ALL;
//			cmdToExecute.CommandType = CommandType.StoredProcedure;
			dataDef toReturn = new dataDef();			
//
//			Select(cmdToExecute,toReturn);
			return toReturn;
		}

		public dataDef SelectLastOneWuser_idLogic(int UserID)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_registry_SelectLastOneWuser_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_USER_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, UserID));
			

			dataDef toReturn = new dataDef();			
			
			Select(cmdToExecute,toReturn);
			return toReturn;
			
		}

		public dataDef SelectLastOneWuser_idLogic(int UserID, int RegistryID)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_registry_SelectLastOneWuser_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_USER_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, UserID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, RegistryID));			
			

			dataDef toReturn = new dataDef();			
			
			Select(cmdToExecute,toReturn);
			return toReturn;
			
		}

		public dataDef SelectAll_Search(int SearchType, String Criteria, DateTime StartDate, DateTime EndDate, int ExcludeRoleID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_registry_SelectAll_Search";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_TYPE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchType));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_CRITERIA, SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Criteria));
			//Mandatory
			cmdToExecute.Parameters.Add(new SqlParameter("@dastart_date", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, StartDate));
			cmdToExecute.Parameters.Add(new SqlParameter("@daend_date", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, EndDate));

			if (ExcludeRoleID > 0)
				cmdToExecute.Parameters.Add(new SqlParameter("@iexclude_role_id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ExcludeRoleID));
			
			Select(cmdToExecute,Table);

			return Table;
		}
		

		#region Class Property Declarations
		public Int32 Registry_id
		{
			get
			{
				return _registry_id;
			}
			set
			{				
				
				_registry_id = value;
			}
		}

		#endregion
	}
}
