///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'CCA'
// Generated by LLBLGen v1.2.1402.29234 Final on: Wednesday, November 12, 2003, 2:35:14 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using dataDef = QSPForm.Common.DataDef.BusinessCalendarTable;

namespace QSPForm.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Form'.
	/// </summary>
	public class Business_calendar : DBTableOperation
	{

		#region Parameter
		//Stored procedure parameter names
		public const string TABLE_NAME = "business_calendar";
		public const string PARAM_PKID = "@dabusiness_date";
		public const string PARAM_IS_WEEKEND = "@bweekend";
		public const string PARAM_IS_HOLYDAY = "@bholiday";
		//
		// Stored procedure names for each operation
		private const string SQL_PROC_DELETE = "pr_business_calendar_Delete";
		private const string SQL_PROC_INSERT = "pr_business_calendar_Insert";
		private const string SQL_PROC_UPDATE = "pr_business_calendar_Update";
		private const string SQL_PROC_SELECT_ONE = "pr_business_calendar_SelectOne";
		private const string SQL_PROC_SELECT_ALL = "pr_business_calendar_SelectAll";		
		
		#endregion	
		

		//
		// DataSetCommand object
		//
		
		private SqlCommand insertCommand;
		private SqlCommand updateCommand;
		private SqlCommand deleteCommand;

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public Business_calendar()
		{
			// Nothing for now.
		}

		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand(SQL_PROC_INSERT);
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
            
				SqlParameterCollection sqlParams = insertCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.DateTime));
				sqlParams.Add(new SqlParameter(PARAM_IS_WEEKEND, SqlDbType.Bit));				
				sqlParams.Add(new SqlParameter(PARAM_IS_HOLYDAY, SqlDbType.Bit));	

				//
				// Define the parameter mappings from the data table in the
				// dataset.
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_IS_WEEKEND].SourceColumn = dataDef.FLD_IS_WEEKEND;
				sqlParams[PARAM_IS_HOLYDAY].SourceColumn = dataDef.FLD_IS_HOLIDAY;
								
				//Don't need to map ErrorCode cause is not imply in the insert
				//Only Mapped DataColumn are imply...
			}
            
			return insertCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand(SQL_PROC_UPDATE);
				updateCommand.CommandType = CommandType.StoredProcedure;
				
            
				SqlParameterCollection sqlParams = updateCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.DateTime));
				sqlParams.Add(new SqlParameter(PARAM_IS_WEEKEND, SqlDbType.Bit));				
				sqlParams.Add(new SqlParameter(PARAM_IS_HOLYDAY, SqlDbType.Bit));	

				//
				// Define the parameter mappings from the data table in the
				// dataset.
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_IS_WEEKEND].SourceColumn = dataDef.FLD_IS_WEEKEND;
				sqlParams[PARAM_IS_HOLYDAY].SourceColumn = dataDef.FLD_IS_HOLIDAY;

				//Don't need to map ErrorCode cause is not imply in the Update
				//Only Mapped DataColumn are imply...
			}
            
			return updateCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand(SQL_PROC_DELETE);
				deleteCommand.CommandType = CommandType.StoredProcedure;
				
				SqlParameterCollection sqlParams = deleteCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				//sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));
				//
				// Define the parameter mappings from the data tabl
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;	
				//sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;
				//Only Mapped DataColumn are imply...
			}
            
			return deleteCommand;
		}

		protected override string TableName
		{
			get{return dataDef.TBL_BUSINESS_CALENDAR;}
		}

		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iInstance</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		///		 <LI>iInstance</LI>
		///		 <LI>daStartDate</LI>
		///		 <LI>daEndDate</LI>
		///		 <LI>iAccountInstance</LI>
		///		 <LI>iNumberInGroup</LI>
		///		 <LI>iNumberOfRooms</LI>
		///		 <LI>iNumberOfStudents</LI>		
		///		 <LI>sFMID</LI>		
		///		 <LI>iCAFiscal</LI>
		///		 <LI>bCampaignComplete</LI>
		
		/// </UL>
		/// Will fill all properties corresponding with a business_calendar in the table with the value of the row selected.
		/// </remarks>
		
		public dataDef SelectOne(DateTime bizDate)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ONE;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.DateTime, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, bizDate));
			
			Select(cmdToExecute,Table);
			//AssignInnerProperty(Table);

			return Table;
				
		}

		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		/// </UL>
		/// </remarks>
		public new dataDef SelectAll()
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ALL;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
					
			Select(cmdToExecute,Table);
			//AssignInnerProperty(Table);
			return  Table;
			
		}

		public dataDef SelectAll_Search(DateTime StartDate, DateTime EndDate, DateTime OrderDate)
		{
			return SelectAll_Search(StartDate, EndDate, OrderDate, 0);
			
		}

		public dataDef SelectAll_Search(DateTime StartDate, DateTime EndDate, DateTime OrderDate, int WarehouseID)
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_business_calendar_SelectAll_Search";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter("@dastart_date", SqlDbType.DateTime, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, StartDate));
			cmdToExecute.Parameters.Add(new SqlParameter("@daend_date", SqlDbType.DateTime, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, EndDate));
			cmdToExecute.Parameters.Add(new SqlParameter("@daorder_date", SqlDbType.DateTime, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, OrderDate));
			if (WarehouseID >0)
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iwarehouse_id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, WarehouseID));
			}
			Select(cmdToExecute,Table);
			//AssignInnerProperty(Table);
			return  Table;
			
		}

        /// <summary>
        /// Method for selecting all the calendar dates for spring shutdown
        /// </summary>
        /// <param name="startDate">StartDate of the calendar</param>
        /// <param name="endDate">End Date of the calendar</param>
        /// <param name="orderDate">Order Date</param>
        /// <param name="shutdownStartDate">Shutdown Start Date</param>
        /// <param name="shutdownEndDate">Shutdown End Date</param>
        /// <param name="warehouseID">Optional</param>
        /// <param name="formID">FormID for which spring shutdown value is valid</param>
        /// <returns></returns>
        public dataDef SelectAll_Search(DateTime startDate, DateTime endDate, DateTime orderDate, DateTime shutdownStartDate, DateTime shutdownEndDate, int warehouseID, int formID)
        {
            dataDef Table = new dataDef();

            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "pr_business_calendar_SelectAll_SearchByShutDownDate";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            cmdToExecute.Parameters.Add(new SqlParameter("@dastart_date", SqlDbType.DateTime, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, startDate));
            cmdToExecute.Parameters.Add(new SqlParameter("@daend_date", SqlDbType.DateTime, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, endDate));
            cmdToExecute.Parameters.Add(new SqlParameter("@daorder_date", SqlDbType.DateTime, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, orderDate));
            cmdToExecute.Parameters.Add(new SqlParameter("@shutdownstart_date", SqlDbType.DateTime, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, shutdownStartDate));
            cmdToExecute.Parameters.Add(new SqlParameter("@shutdownend_date", SqlDbType.DateTime, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, shutdownEndDate));

            if (warehouseID > 0)
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iwarehouse_id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, warehouseID));
            }

            if (formID > 0)
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@form_id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, formID));
            }
            Select(cmdToExecute, Table);
            //AssignInnerProperty(Table);
            return Table;

        }


		public DateTime GetNextBusinessDay(DateTime date, int duration)
		{			
			DateTime toReturn;
			SqlCommand	cmdToExecute = new SqlCommand();

			try
			{				
				cmdToExecute.CommandText = "dbo.[fn_NextBusinessDay]";
				cmdToExecute.CommandType = CommandType.StoredProcedure;
				cmdToExecute.Parameters.Add(new SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));
				cmdToExecute.Parameters.Add("@date", SqlDbType.DateTime);
				cmdToExecute.Parameters[1].Value = date;
				cmdToExecute.Parameters.Add("@duration", SqlDbType.Int);
				cmdToExecute.Parameters[2].Value = duration;
				AssignConnection(cmdToExecute);
				cmdToExecute.ExecuteScalar();
				toReturn = Convert.ToDateTime(cmdToExecute.Parameters[0].Value);
			}
			catch(Exception ex)
			{
				throw ex;
			}
			finally
			{
				UnassignConnection(cmdToExecute);
			}
			return toReturn;
		}

		public int GetNbDayLeadTime(DateTime StartDate, DateTime EndDate)
		{			
			int toReturn;
			SqlCommand	cmdToExecute = new SqlCommand();

			try
			{				
				cmdToExecute.CommandText = "dbo.[fn_GetNbDayLeadTime]";
				cmdToExecute.CommandType = CommandType.StoredProcedure;
				cmdToExecute.Parameters.Add(new SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));
				cmdToExecute.Parameters.Add("@StartDate", SqlDbType.DateTime);
				cmdToExecute.Parameters[1].Value = StartDate;
				cmdToExecute.Parameters.Add("@EndDate", SqlDbType.DateTime);
				cmdToExecute.Parameters[2].Value = EndDate;
				AssignConnection(cmdToExecute);
				cmdToExecute.ExecuteScalar();
				toReturn = Convert.ToInt32(cmdToExecute.Parameters[0].Value);
			}
			catch(Exception ex)
			{
				throw ex;
			}
			finally
			{
				UnassignConnection(cmdToExecute);
			}
			return toReturn;
		}

		public int GetFiscalYear(DateTime date)
		{			
			int toReturn = 0;
			SqlCommand	cmdToExecute = new SqlCommand();

			try
			{				
				cmdToExecute.CommandText = "dbo.[fnc_GetDateFiscalYR]";
				cmdToExecute.CommandType = CommandType.StoredProcedure;
				cmdToExecute.Parameters.Add(new SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));
				cmdToExecute.Parameters.Add("@FYDate", SqlDbType.DateTime);
				cmdToExecute.Parameters[1].Value = date;
				AssignConnection(cmdToExecute);
				cmdToExecute.ExecuteScalar();
				toReturn = Convert.ToInt32(cmdToExecute.Parameters[0].Value);
			}
			catch(Exception ex)
			{
				throw ex;
			}
			finally
			{
				UnassignConnection(cmdToExecute);
			}
			return toReturn;
		}

	}
}
