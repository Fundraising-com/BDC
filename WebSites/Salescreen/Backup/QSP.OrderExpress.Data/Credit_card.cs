///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'credit_card'
// Generated by Jas on: Monday, November 03, 2003, 4:18:08 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
//using System.EnterpriseServices;
//using System.Runtime.InteropServices;
using dataDef = QSPForm.Common.DataDef.CreditCardTable;

namespace QSPForm.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'credit_card'.
	/// </summary>
	public class Credit_card : DBTableOperation 
	{
		
		//
		// Stored procedure parameter names
		// Paremater Name must match with the SP Called
		public const String PARAM_PKID				= "@icredit_card_id";
		public const String PARAM_CREDIT_CARD_NUMBER	= "@icredit_card_number";
		public const String PARAM_CREDIT_CARD_NAME	= "@scredit_card_name";
		public const String PARAM_CREDIT_CARD_CVV2	= "@icredit_card_cvv2";
		public const String PARAM_TYPE_ID			= "@icredit_card_type_id";
		public const string PARAM_CREDIT_CARD_EXP_DATE = "@dcredit_card_expiration_date";	
		public const string PARAM_POSTAL_ADDRESS_ID		= "@ipostal_address_id";
		public const string PARAM_PHONE_NUMBER_ID		= "@iphone_number_id";
		//
		// Stored procedure names for each operation
		private const String SQL_PROC_INSERT       = "pr_credit_card_Insert";
		private const String SQL_PROC_UPDATE       = "pr_credit_card_Update";
		private const String SQL_PROC_DELETE       = "pr_credit_card_Delete";
		private const String SQL_PROC_SELECT_ONE   = "pr_credit_card_SelectOne";
		private const String SQL_PROC_SELECT_ALL   = "pr_credit_card_SelectAll";
		
		//
		// DataSetCommand object
		//
		
		private SqlCommand insertCommand;
		private SqlCommand updateCommand;
		private SqlCommand deleteCommand;

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public Credit_card()
		{
		
		}
		protected override string TableName
		{
			get{return dataDef.TBL_CREDIT_CARDS;}
		}
		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand(SQL_PROC_INSERT);
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters;
            
				SqlParameterCollection sqlParams = insertCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_CREDIT_CARD_NUMBER, SqlDbType.VarChar, 100));
				sqlParams.Add(new SqlParameter(PARAM_CREDIT_CARD_NAME, SqlDbType.VarChar, 100));
				sqlParams.Add(new SqlParameter(PARAM_CREDIT_CARD_CVV2, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_TYPE_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_CREDIT_CARD_EXP_DATE, SqlDbType.DateTime));	
				sqlParams.Add(new SqlParameter(PARAM_POSTAL_ADDRESS_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_PHONE_NUMBER_ID, SqlDbType.Int));
				
				sqlParams.Add(new SqlParameter(PARAM_CREATE_USER_ID, SqlDbType.Int));
				
				sqlParams[PARAM_PKID].Direction = ParameterDirection.Output;
				//
				// Define the parameter mappings from the data table in the
				// dataset.
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_CREDIT_CARD_NUMBER].SourceColumn = dataDef.FLD_CREDIT_CARD_NUMBER;
				sqlParams[PARAM_CREDIT_CARD_NAME].SourceColumn = dataDef.FLD_CREDIT_CARD_NAME;
				sqlParams[PARAM_CREDIT_CARD_CVV2].SourceColumn = dataDef.FLD_CREDIT_CARD_CVV2;
				sqlParams[PARAM_TYPE_ID].SourceColumn = dataDef.FLD_CREDIT_CARD_TYPE_ID;
				sqlParams[PARAM_CREDIT_CARD_EXP_DATE].SourceColumn = dataDef.FLD_CREDIT_CARD_EXPIRATION_DATE;
				sqlParams[PARAM_POSTAL_ADDRESS_ID].SourceColumn = dataDef.FLD_POSTAL_ADDRESS_ID;
				sqlParams[PARAM_PHONE_NUMBER_ID].SourceColumn = dataDef.FLD_PHONE_NUMBER_ID;
				
				sqlParams[PARAM_CREATE_USER_ID].SourceColumn = dataDef.FLD_CREATE_USER_ID;
				//Don't need to map ErrorCode cause is not imply in the insert
				//Only Mapped DataColumn are imply...
				
			}
            
			return insertCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand(SQL_PROC_UPDATE);
				updateCommand.CommandType = CommandType.StoredProcedure;
				            
				SqlParameterCollection sqlParams = updateCommand.Parameters;
            				

				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_CREDIT_CARD_NUMBER, SqlDbType.VarChar, 100));
				sqlParams.Add(new SqlParameter(PARAM_CREDIT_CARD_NAME, SqlDbType.VarChar, 100));
				sqlParams.Add(new SqlParameter(PARAM_CREDIT_CARD_CVV2, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_TYPE_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_CREDIT_CARD_EXP_DATE, SqlDbType.DateTime));	
				sqlParams.Add(new SqlParameter(PARAM_POSTAL_ADDRESS_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_PHONE_NUMBER_ID, SqlDbType.Int));
				
				sqlParams.Add(new SqlParameter(PARAM_DELETED, SqlDbType.Bit));
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));
				//
				// Define the parameter mappings from the data table in the
				// dataset.
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_CREDIT_CARD_NUMBER].SourceColumn = dataDef.FLD_CREDIT_CARD_NUMBER;
				sqlParams[PARAM_CREDIT_CARD_NAME].SourceColumn = dataDef.FLD_CREDIT_CARD_NAME;
				sqlParams[PARAM_CREDIT_CARD_CVV2].SourceColumn = dataDef.FLD_CREDIT_CARD_CVV2;
				sqlParams[PARAM_TYPE_ID].SourceColumn = dataDef.FLD_CREDIT_CARD_TYPE_ID;
				sqlParams[PARAM_CREDIT_CARD_EXP_DATE].SourceColumn = dataDef.FLD_CREDIT_CARD_EXPIRATION_DATE;
				sqlParams[PARAM_POSTAL_ADDRESS_ID].SourceColumn = dataDef.FLD_POSTAL_ADDRESS_ID;
				sqlParams[PARAM_PHONE_NUMBER_ID].SourceColumn = dataDef.FLD_PHONE_NUMBER_ID;
				
				sqlParams[PARAM_DELETED].SourceColumn = dataDef.FLD_DELETED;
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;
				//Only Mapped DataColumn are imply...
			}
            
			return updateCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )    
			{  
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand(SQL_PROC_DELETE);
				deleteCommand.CommandType = CommandType.StoredProcedure;
				
            
				SqlParameterCollection sqlParams = deleteCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));
				
				//
				// Define the parameter mappings from the data tabl
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;
				//Only Mapped DataColumn are imply...
			}
            
			return deleteCommand;
		}
		
		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Campaign_id</LI>
		/// </UL> 
		/// </remarks>
		public new dataDef SelectOne(int ID)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ONE;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ID));
			
			dataDef toReturn = new dataDef();			
			Select(cmdToExecute,toReturn);
			return toReturn;
			
		}

		
		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public new dataDef SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ALL;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			dataDef toReturn = new dataDef();			

			Select(cmdToExecute,toReturn);
			return toReturn;
		}



		public dataDef SelectAllWcredit_application_idLogic(int CreditApplicationID)
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_credit_card_SelectAllWcredit_application_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@icredit_application_id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CreditApplicationID));
			
			dataDef toReturn = new dataDef();	
			
			Select(cmdToExecute,toReturn);
			return toReturn;
			
		}

		public dataDef SelectAllWaccount_idLogic(int AccountID)
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_credit_card_SelectAllWaccount_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@iaccount_id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, AccountID));
			
			dataDef toReturn = new dataDef();	
			
			Select(cmdToExecute,toReturn);
			return toReturn;
			
		}

	}
}
