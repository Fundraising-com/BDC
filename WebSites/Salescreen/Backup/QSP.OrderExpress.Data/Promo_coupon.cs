///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'product'
// Generated by Jas on: Monday, November 03, 2003, 4:18:07 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using QSPForm.Common.DataDef;
using dataDef = QSPForm.Common.DataDef.PromoCouponTable;

namespace QSPForm.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'product'.
	/// </summary>
	public class Promo_coupon : DBTableOperation
	{

		#region Parameter

        public const string PARAM_PKID = "@ipromotion_id";
        public const string PARAM_DESCRIPTION = "@sdescription";
        public const string PARAM_PROMO_TEXT_ID = "@ipromo_text_id";
        public const string PARAM_PROMO_LOGO_ID = "@ipromo_logo_id";
        //public const string PARAM_NATIONAL = "IsNational";
        public const string PARAM_VENDOR_ID = "@ivendor_id";
        //public const string PARAM_VENDOR_NAME = "vendor_name";
        public const string PARAM_LABELING_START_DATE = "@dalabeling_start_date";
        public const string PARAM_LABELING_END_DATE = "@dalabeling_end_date";
        public const string PARAM_FIELD_SALES_MANAGER_ID = "@ifield_sales_manager_id";
        public const string PARAM_FM_ID = "@sfm_id";
        public const string PARAM_EXPIRATION_DATE = "@daexpiration_date";
        public const string PARAM_DELETED = "@bdeleted";
        public const string PARAM_CREATE_DATE = "@dacreate_date";
        public const string PARAM_CREATE_USER_ID = "@icreate_user_id";
        public const string PARAM_UPDATE_DATE = "@daupdate_date";
        public const string PARAM_UPDATE_USER_ID = "@iupdate_user_id";
		
		// Stored procedure names for each operation
		private const string SQL_PROC_INSERT = "pr_QSPForm_promo_coupon_Insert";
		private const string SQL_PROC_UPDATE = "pr_QSPForm_promo_coupon_Update";	
		private const string SQL_PROC_DELETE = "pr_QSPForm_promo_coupon_Delete";
		private const string SQL_PROC_SELECT_ONE = "pr_QSPForm_promo_coupon_SelectOne";
		private const string SQL_PROC_SELECT_ALL = "pr_QSPForm_promo_coupon_SelectAll";

		#endregion

		//
		// DataSetCommand object
		//
		
		private SqlCommand insertCommand;
		private SqlCommand updateCommand;
		private SqlCommand deleteCommand;

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public Promo_coupon()
		{
			// Nothing for now.
		}

		//-----------------------
		// Set Mapping and Params in 2 differents method
		//-----------------------

		private void FillParams(SqlParameterCollection param)
		{
            param.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
            param.Add(new SqlParameter(PARAM_DESCRIPTION, SqlDbType.VarChar,500));
            param.Add(new SqlParameter(PARAM_PROMO_TEXT_ID, SqlDbType.Int));
            param.Add(new SqlParameter(PARAM_PROMO_LOGO_ID, SqlDbType.Int));
            param.Add(new SqlParameter(PARAM_VENDOR_ID, SqlDbType.Int));
            param.Add(new SqlParameter(PARAM_LABELING_START_DATE, SqlDbType.DateTime));
            param.Add(new SqlParameter(PARAM_LABELING_END_DATE, SqlDbType.DateTime));
            //param.Add(new SqlParameter(PARAM_FIELD_SALES_MANAGER_ID, SqlDbType.Int));
            param.Add(new SqlParameter(PARAM_FM_ID, SqlDbType.Int));
            param.Add(new SqlParameter(PARAM_EXPIRATION_DATE, SqlDbType.DateTime));
            //param.Add(new SqlParameter(PARAM_DELETED, SqlDbType.Bit));
            //param.Add(new SqlParameter(PARAM_CREATE_DATE, SqlDbType.DateTime));
            //param.Add(new SqlParameter(PARAM_CREATE_USER_ID, SqlDbType.Int));
            param.Add(new SqlParameter(PARAM_UPDATE_DATE, SqlDbType.DateTime));
            param.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));
		}
		private void MapColumn(SqlParameterCollection param)
		{
            param[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
            param[PARAM_DESCRIPTION].SourceColumn = dataDef.FLD_DESCRIPTION;
            param[PARAM_PROMO_TEXT_ID].SourceColumn = dataDef.FLD_PROMO_TEXT_ID;
            param[PARAM_PROMO_LOGO_ID].SourceColumn = dataDef.FLD_PROMO_LOGO_ID;
            param[PARAM_VENDOR_ID].SourceColumn = dataDef.FLD_VENDOR_ID;
            param[PARAM_LABELING_START_DATE].SourceColumn = dataDef.FLD_LABELING_START_DATE;
            param[PARAM_LABELING_END_DATE].SourceColumn = dataDef.FLD_LABELING_END_DATE;
            //param[PARAM_FIELD_SALES_MANAGER_ID].SourceColumn = dataDef.FLD_FIELD_SALES_MANAGER_ID;
            param[PARAM_FM_ID].SourceColumn = dataDef.FLD_FM_ID;
            param[PARAM_EXPIRATION_DATE].SourceColumn = dataDef.FLD_EXPIRATION_DATE;
            //param[PARAM_DELETED].SourceColumn = dataDef.FLD_PKID;
            //param[PARAM_CREATE_DATE].SourceColumn = dataDef.FLD_PKID;
            //param[PARAM_CREATE_USER_ID].SourceColumn = dataDef.FLD_PKID;
            param[PARAM_UPDATE_DATE].SourceColumn = dataDef.FLD_UPDATE_DATE;
            param[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;
		}

		protected override string TableName
		{
			get{return dataDef.TBL_PROMO_COUPON;}
		}

		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand(SQL_PROC_INSERT);
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
            
				SqlParameterCollection sqlParams = insertCommand.Parameters;
            
				//Fill the SqlParameterCollection
				FillParams(sqlParams);				
								
				//Adjust paramters direction
				sqlParams[PARAM_PKID].Direction = ParameterDirection.Output;				
				
				//Map the source column
				MapColumn(sqlParams);	


				//Adjust for insert context
				sqlParams.Add(new SqlParameter(PARAM_CREATE_USER_ID, SqlDbType.Int));
				sqlParams[PARAM_CREATE_USER_ID].SourceColumn = dataDef.FLD_CREATE_USER_ID;

			}
            
			return insertCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				
				updateCommand = new SqlCommand(SQL_PROC_UPDATE);
				updateCommand.CommandType = CommandType.StoredProcedure;
				
            
				SqlParameterCollection sqlParams = updateCommand.Parameters;
            
				//Fill the SqlParameterCollection
				FillParams(sqlParams);

				//Map the source column
				MapColumn(sqlParams);

				//Adjust for update context
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;

				sqlParams.Add(new SqlParameter(PARAM_DELETED, SqlDbType.Bit));
				sqlParams[PARAM_DELETED].SourceColumn = dataDef.FLD_DELETED;

			}
            
			return updateCommand;
		}
		

		
		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand(SQL_PROC_DELETE);
				deleteCommand.CommandType = CommandType.StoredProcedure;
				
				SqlParameterCollection sqlParams = deleteCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));
				//
				// Define the parameter mappings from the data tabl
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;	
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;
				//Only Mapped DataColumn are imply...
			}
            
			return deleteCommand;
		}

		public dataDef SelectAll_Search(int SearchType, string Criteria, DateTime ExpirationDateMin, DateTime ExpirationDateMax,int isReceived, string subdivision_code, bool IncludeFMReportedTo, int IsNational)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_QSPForm_Promo_Coupon_SelectAll_Search2";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_TYPE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchType));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_CRITERIA, SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Criteria));
			cmdToExecute.Parameters.Add(new SqlParameter("@daexpiration_date_min", SqlDbType.DateTime, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ExpirationDateMin));
			cmdToExecute.Parameters.Add(new SqlParameter("@daexpiration_date_max", SqlDbType.DateTime, 10, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ExpirationDateMax));
			if(isReceived != -1)
				cmdToExecute.Parameters.Add(new SqlParameter("@bIsDocumentReceived", SqlDbType.Bit, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, isReceived));
			if(subdivision_code != String.Empty)
				cmdToExecute.Parameters.Add(new SqlParameter("@zsubdivision", SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, subdivision_code));
			if(IncludeFMReportedTo)
				cmdToExecute.Parameters.Add(new SqlParameter("@ball_fm_report_to", SqlDbType.Bit, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, IncludeFMReportedTo));
			if(IsNational > -1)
				cmdToExecute.Parameters.Add(new SqlParameter("@bIsNational", SqlDbType.Bit, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, IsNational));
			
			Select(cmdToExecute,Table);
			return Table;
		}
		
		public new dataDef SelectAll()
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			
			cmdToExecute.CommandText = SQL_PROC_SELECT_ALL;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			Select(cmdToExecute,Table);
			
			return Table;
		}
		
		
		public new dataDef SelectOne(int PromoCouponID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			
			cmdToExecute.CommandText = SQL_PROC_SELECT_ONE;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, PromoCouponID));
			
			Select(cmdToExecute,Table);
			
			return Table;
		}

		public dataDef SelectAllWpromo_idLogic(int PromoID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			
			cmdToExecute.CommandText = "dbo.pr_QSPForm_promo_coupon_SelectAllWpromo_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter("@ipromo_id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, PromoID));
			
			Select(cmdToExecute,Table);
			
			return Table;
		}
		
		public int Insert(string Description,int promo_text_id, int promo_logo_id,
                            int vendor_id, string fm_id, DateTime lbls, DateTime lble,
                            DateTime exp, int create_user_id)
        {
            int couponID = 0;
			SqlCommand	cmdToExecute = new SqlCommand();
			
			cmdToExecute.CommandText = "dbo.pr_QSPForm_promo_coupon_insert";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

            cmdToExecute.Parameters.Add(new SqlParameter("@ipromotion_id", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, couponID));
            cmdToExecute.Parameters.Add(new SqlParameter(PARAM_DESCRIPTION, SqlDbType.VarChar, 500, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Description));
            cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PROMO_TEXT_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, promo_text_id));
            cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PROMO_LOGO_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, promo_logo_id));
            cmdToExecute.Parameters.Add(new SqlParameter(PARAM_VENDOR_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, vendor_id));
            cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FM_ID, SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, fm_id));
            cmdToExecute.Parameters.Add(new SqlParameter(PARAM_LABELING_START_DATE, SqlDbType.DateTime,15, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, lbls));
            cmdToExecute.Parameters.Add(new SqlParameter(PARAM_LABELING_END_DATE, SqlDbType.DateTime,15, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, lble));
            cmdToExecute.Parameters.Add(new SqlParameter(PARAM_EXPIRATION_DATE, SqlDbType.DateTime,15, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, exp));
            cmdToExecute.Parameters.Add(new SqlParameter(PARAM_CREATE_USER_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, create_user_id));

            ExecuteCmd(cmdToExecute);
			//Select(cmdToExecute);
			
			return couponID;
           
        }

	}
}
