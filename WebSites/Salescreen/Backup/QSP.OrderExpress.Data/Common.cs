///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'group'
// Generated by Jas on: Monday, November 03, 2003, 4:18:10 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using QSPForm.Common.DataDef;

namespace QSPForm.Data
{
	/// <summary>
	/// Purpose: Data Access class for All Reference table.
	/// </summary>
	public class Common : DBInteractionBase
	{

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public Common()
		{
			// Nothing for now.
		}	

		public DataTable SelectAllUSState()
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_subdivision_SelectAllUSState]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			DataTable toReturn = new DataTable();
			
			Select(cmdToExecute,toReturn);

			return toReturn;
		}
		

		


		public decimal GetTaxRate(int Zip, String CityName, String StateCode)
		{			
			decimal toReturn;
			SqlCommand	cmdToExecute = new SqlCommand();

			try
			{				
				cmdToExecute.CommandText = "dbo.[pr_get_tax_rate]";
				cmdToExecute.CommandType = CommandType.StoredProcedure;
				cmdToExecute.Parameters.Add(new SqlParameter("@tax_rate", System.Data.SqlDbType.Float, 4, System.Data.ParameterDirection.Output, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));
				cmdToExecute.Parameters.Add("@zip", SqlDbType.Int);
				cmdToExecute.Parameters[1].Value = Zip;
				cmdToExecute.Parameters.Add("@city_name", SqlDbType.VarChar,50,null);
				cmdToExecute.Parameters[2].Value = CityName;
				cmdToExecute.Parameters.Add("@state", SqlDbType.VarChar,2,null);
				cmdToExecute.Parameters[3].Value = StateCode;

				AssignConnection(cmdToExecute);
				cmdToExecute.ExecuteNonQuery();

				toReturn = Convert.ToDecimal(cmdToExecute.Parameters[0].Value);
			}
			catch(Exception ex)
			{
				throw ex;
			}
			finally
			{
				UnassignConnection(cmdToExecute);
			}
			
			return toReturn;
		}

		public TaxInfoTable GetTaxInfoTable(int ProductTypeID, int OrganizationTypeID, String SubdivisionCode, String CityName, String CountyName, String ZipCode)
		{			
			TaxInfoTable toReturn = new TaxInfoTable();
			SqlCommand	cmdToExecute = new SqlCommand();

			try
			{				
				cmdToExecute.CommandText = "dbo.[GetTaxRateInfo]";
				cmdToExecute.CommandType = CommandType.StoredProcedure;
				cmdToExecute.Parameters.Add("@product_type_id", SqlDbType.Int);
				cmdToExecute.Parameters.Add("@organization_type_id", SqlDbType.Int);
				cmdToExecute.Parameters.Add("@subdivision_code", SqlDbType.NVarChar,7,null);
				cmdToExecute.Parameters.Add("@cityname", SqlDbType.VarChar,25,null);
				cmdToExecute.Parameters.Add("@countyname", SqlDbType.VarChar,20,null);
				cmdToExecute.Parameters.Add("@zipcode", SqlDbType.VarChar,5,null);
				
				cmdToExecute.Parameters["@product_type_id"].Value = ProductTypeID;
				cmdToExecute.Parameters["@organization_type_id"].Value = OrganizationTypeID;
				cmdToExecute.Parameters["@subdivision_code"].Value = SubdivisionCode;
				cmdToExecute.Parameters["@cityname"].Value = CityName;
				cmdToExecute.Parameters["@countyname"].Value = CountyName;
				cmdToExecute.Parameters["@zipcode"].Value = ZipCode;

				Select(cmdToExecute,toReturn);
			}
			catch(Exception ex)
			{
				throw ex;
			}			
			
			return toReturn;
		}

		

		public DataSet Select(SqlCommand Command)
		{
			DataSet dts = new DataSet();
			Select(Command, dts);
			return dts; 

		}

		public new bool ExecuteCmd(SqlCommand Command)
		{
			return base.ExecuteCmd(Command);
		}

		public DataTable SelectAllFMID()
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_FMID_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			

			DataTable toReturn = new DataTable();
			
			Select(cmdToExecute,toReturn);

			return toReturn;

		}

		public RoleTable SelectAllRole()
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Roles_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			

			RoleTable toReturn = new RoleTable();
			
			Select(cmdToExecute, toReturn);

			return toReturn;

		}
        public RoleTable SelectAllRoleByLoginName(string name)
		{			
			
			RoleTable toReturn = new RoleTable();
			
			SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[pr_Roles_SelectAllByLoginName]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            cmdToExecute.Parameters.Add(new SqlParameter("@sloginname", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, name));

            Select(cmdToExecute, toReturn);

            return toReturn;

		}

		public DataTable SelectAllOrganizationType()
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_organization_type_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			DataTable toReturn = new DataTable();
			
			Select(cmdToExecute, toReturn);

			return toReturn;

		}

		public DataTable SelectAllOrganizationLevel()
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_organization_level_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			DataTable toReturn = new DataTable();
			
			Select(cmdToExecute, toReturn);

			return toReturn;

		}

		public DataTable SelectAllTradeClass()
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_trade_class_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			DataTable toReturn = new DataTable();
			
			Select(cmdToExecute, toReturn);

			return toReturn;

		}

		public DataTable SelectAllAccountType()
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_account_type_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			DataTable toReturn = new DataTable();
			
			Select(cmdToExecute, toReturn);

			return toReturn;

		}

		public DataTable SelectAllCampaignType()
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_campaign_type_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			DataTable toReturn = new DataTable();
			
			Select(cmdToExecute, toReturn);

			return toReturn;

		}

		public DataTable SelectAllPostalAddressType()
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_postal_address_type_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			DataTable toReturn = new DataTable();
			
			Select(cmdToExecute, toReturn);

			return toReturn;

		}

		public DataTable SelectAllPhoneNumberType()
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_phone_number_type_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			DataTable toReturn = new DataTable();
			
			Select(cmdToExecute, toReturn);

			return toReturn;

		}

		public DataTable SelectAllEmailType()
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_email_type_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			DataTable toReturn = new DataTable();
			
			Select(cmdToExecute, toReturn);

			return toReturn;

		}

		public DataTable SelectAllProgramType()
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_program_type_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			DataTable toReturn = new DataTable();
			
			Select(cmdToExecute, toReturn);

			return toReturn;

		}

        public DataTable SelectAllProgramTypeByEntityTypeID(int EntityTypeID)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[pr_program_type_SelectAllWentity_type_idLogic]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            cmdToExecute.Parameters.Add(new SqlParameter("@ientity_type_id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, EntityTypeID));
			
            DataTable toReturn = new DataTable();

            Select(cmdToExecute, toReturn);

            return toReturn;

        }

        public DataTable SelectAllPaymentAssignmentType()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[pr_payment_assignment_type_SelectAll]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            DataTable toReturn = new DataTable();

            Select(cmdToExecute, toReturn);

            return toReturn;

        }

		public DataTable SelectAllSource()
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_source_SelectAll";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			DataTable toReturn = new DataTable();
			
			Select(cmdToExecute, toReturn);

			return toReturn;

		}

		public DataTable SelectAllOrderType()
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_order_type_SelectAll";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			DataTable toReturn = new DataTable();
			
			Select(cmdToExecute, toReturn);

			return toReturn;

		}

		public DataTable SelectAllStatusReason()
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_status_reason_SelectAll";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			DataTable toReturn = new DataTable();
			
			Select(cmdToExecute, toReturn);

			return toReturn;

		}

		public DataTable SelectAllStatusCategory()
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_status_category_SelectAll";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			DataTable toReturn = new DataTable();
			
			Select(cmdToExecute, toReturn);

			return toReturn;

		}

        public DataTable SelectAllProgramAgreementCatalogs(int formId, DateTime programAgreementDate)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.pr_program_agreement_catalog_SelectAll";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            cmdToExecute.Parameters.Add(new SqlParameter("@iform_id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, formId));
            cmdToExecute.Parameters.Add(new SqlParameter("@dprogram_agreement_date", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, programAgreementDate));
            DataTable toReturn = new DataTable();

            Select(cmdToExecute, toReturn);

            return toReturn;

        }

		public DataTable SelectAllStatusCategory(int EntityTypeID)
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_status_category_SelectAll";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@ientity_type_id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, EntityTypeID));

			DataTable toReturn = new DataTable();
			
			Select(cmdToExecute, toReturn);

			return toReturn;

		}

		public DataTable SelectAllAccountStatus()
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_account_status_SelectAll";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			DataTable toReturn = new DataTable();
			
			Select(cmdToExecute, toReturn);

			return toReturn;

		}


		public DataTable SelectAllOrderStatus()
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_order_status_SelectAll";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			DataTable toReturn = new DataTable();
			
			Select(cmdToExecute, toReturn);

			return toReturn;

		}

		public DataTable SelectOneOrderStatus(int OrderStatusID)
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_order_status_SelectOne";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add("@iorder_status_id", SqlDbType.Int);
			cmdToExecute.Parameters[0].Value = OrderStatusID;

			DataTable toReturn = new DataTable();
			
			Select(cmdToExecute, toReturn);

			return toReturn;

		}
		

		
		public DataTable SelectAllBusinessFieldType()
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_field_type_SelectAll";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			DataTable toReturn = new DataTable();
			
			Select(cmdToExecute, toReturn);

			return toReturn;

		}
		public DataTable SelectAllLogicalOperator()
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_logical_operator_SelectAll";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			DataTable toReturn = new DataTable();
			
			Select(cmdToExecute, toReturn);

			return toReturn;

		}

        public DataTable SelectAllFormSectionType()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.pr_form_section_type_SelectAll";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            DataTable toReturn = new DataTable();

            Select(cmdToExecute, toReturn);

            return toReturn;

        }

		public DataTable SelectAllExceptionType()
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_exception_type_SelectAll";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			DataTable toReturn = new DataTable();
			
			Select(cmdToExecute, toReturn);

			return toReturn;

		}
	
		public DataTable SelectAllProductType()
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_product_type_SelectAll";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			DataTable toReturn = new DataTable();
			
			Select(cmdToExecute, toReturn);

			return toReturn;

		}	

		public DataTable SelectAllProductTypeByProgramType(int ProgramTypeID)
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_product_type_SelectAllWprogram_type_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			cmdToExecute.Parameters.Add("@iprogram_type_id", SqlDbType.Int);
			cmdToExecute.Parameters["@iprogram_type_id"].Value = ProgramTypeID;

			DataTable toReturn = new DataTable();
			
			Select(cmdToExecute, toReturn);

			return toReturn;

		}

		public DataTable SelectAllEntityType()
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_entity_type_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			DataTable toReturn = new DataTable();
			
			Select(cmdToExecute, toReturn);

			return toReturn;

		}

		public DataTable SelectAllTaskType()
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_task_type_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			DataTable toReturn = new DataTable();
			
			Select(cmdToExecute, toReturn);

			return toReturn;

		}

		
		public DataTable SelectAllDocumentType()
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_document_type_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			DataTable toReturn = new DataTable();
			
			Select(cmdToExecute, toReturn);

			return toReturn;

		}

        public DataTable SelectAllDeliveryMethod()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[pr_delivery_method_SelectAll]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            DataTable toReturn = new DataTable();

            Select(cmdToExecute, toReturn);

            return toReturn;

        }

        public DataTable SelectAllProfitRate()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.pr_profit_rate_SelectAll";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            DataTable toReturn = new DataTable();

            Select(cmdToExecute, toReturn);

            return toReturn;

        }
		
		public DataTable SelectAllBusinessDivision()
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_BusinessDivision_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			DataTable toReturn = new DataTable();
			
			Select(cmdToExecute, toReturn);

			return toReturn;

		}

		public DataTable SelectAllBusinessNotificationType()
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_business_notification_type_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			DataTable toReturn = new DataTable();
			
			Select(cmdToExecute, toReturn);

			return toReturn;

		}

		public DataTable SelectAllTags(string procName, string paramName)
		{

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo."+procName;
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			cmdToExecute.Parameters.Add(paramName,SqlDbType.Int);
			cmdToExecute.Parameters[0].Value = 0;

			DataTable toReturn = new DataTable();
			
			Select(cmdToExecute, toReturn);

			return toReturn;
		}

		public DataTable SelectAllRegion()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_SSRegion_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable();
			Select(cmdToExecute, toReturn);
			return toReturn;
		}
		
		public DataTable SelectAllImageCategory()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Image_Category_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable();
			Select(cmdToExecute, toReturn);
			return toReturn;
		}
		public bool SendEmailNotification(string strFrom, string strTo, string strSujet, string strBody)
		{
			bool IsSuccess = false;

			int toReturn;
			SqlCommand	cmdToExecute = new SqlCommand();
			//Example
			/*
			exec MASTER..XP_SMTP_SENDMAIL 
					@FROM 	= 'syserror@qsp.com',
					@TO 	= 'qspdeveloper@qsp.com',
					@priority 	= 'NORMAL',
					@subject 	= @subject,
					@type 	= 'text/plain',
					@message  	= @error_msg,
					@server 	= 'outgoingsmtp'
			 * */

			try
			{				
				cmdToExecute.CommandText = "MASTER..XP_SMTP_SENDMAIL";
				cmdToExecute.CommandType = CommandType.StoredProcedure;
				cmdToExecute.Parameters.Add(new SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));
				cmdToExecute.Parameters.Add("@FROM", SqlDbType.VarChar);
				cmdToExecute.Parameters.Add("@TO", SqlDbType.VarChar);	
				cmdToExecute.Parameters.Add("@priority", SqlDbType.VarChar);	
				cmdToExecute.Parameters.Add("@subject", SqlDbType.VarChar);
				cmdToExecute.Parameters.Add("@type", SqlDbType.VarChar);
				cmdToExecute.Parameters.Add("@message", SqlDbType.VarChar);
				cmdToExecute.Parameters.Add("@server", SqlDbType.VarChar);

				cmdToExecute.Parameters[1].Value = strFrom;
				cmdToExecute.Parameters[2].Value = strTo;
				cmdToExecute.Parameters[3].Value = "NORMAL";
				cmdToExecute.Parameters[4].Value = strSujet;
				cmdToExecute.Parameters[5].Value = "text/html";
				cmdToExecute.Parameters[6].Value = strBody;
				cmdToExecute.Parameters[7].Value = SystemFramework.ApplicationConfiguration.MailSmtp;
				
				AssignConnection(cmdToExecute);
				cmdToExecute.ExecuteScalar();
				toReturn = Convert.ToInt32(cmdToExecute.Parameters[0].Value);
			}
			catch(Exception ex)
			{
				throw ex;
			}
			finally
			{
				UnassignConnection(cmdToExecute);
			}			

			return IsSuccess;

		}

        public bool InsertDuplicateAccountOverride(int newAccountId, int potentialDuplicateAccountId, int createUserId)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[pr_duplicate_account_override_Insert]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            cmdToExecute.Parameters.Add(new SqlParameter("@inew_account_id", newAccountId));
            cmdToExecute.Parameters.Add(new SqlParameter("@ipotential_duplicate_account_id", potentialDuplicateAccountId));
            cmdToExecute.Parameters.Add(new SqlParameter("@icreate_user_id", createUserId));

            return ExecuteCmd(cmdToExecute);
        }

        public DataTable SelectAllProfitRateByProgramType(int ProramTypeID)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "pr_ProfitRate_SelectAllByProgramType";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            cmdToExecute.Parameters.Add(new SqlParameter("@program_type_id", ProramTypeID));

            DataTable toReturn = new DataTable();

            Select(cmdToExecute, toReturn);

            return toReturn;

        }

        public DataTable SelectAllProfitRateByFormID(int FormID)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "pr_ProfitRate_SelectAllByForm";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            cmdToExecute.Parameters.Add(new SqlParameter("@form_id", FormID));

            DataTable toReturn = new DataTable();

            Select(cmdToExecute, toReturn);

            return toReturn;

        }


        public DataTable SelectOneOrder(int CampaignID)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "pr_campaign_SelectTopOneWorder_idLogic";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            cmdToExecute.Parameters.Add(new SqlParameter("@icampaign_id", CampaignID));

            DataTable toReturn = new DataTable();

            Select(cmdToExecute, toReturn);

            return toReturn;
        }

        public DataTable SelectOneOrder(int CampaignID, int FormID)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "pr_campaign_selectTopOneOrderW_form_id";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            cmdToExecute.Parameters.Add(new SqlParameter("@icampaign_id", CampaignID));
            cmdToExecute.Parameters.Add(new SqlParameter("@iform_id", FormID));

            DataTable toReturn = new DataTable();

            Select(cmdToExecute, toReturn);

            return toReturn;
        }

        public DataTable SelectOneProcessedOrder(int CampaignID,int FormID)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "pr_campaign_selectTopOneProcessedOrderW_form_id";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            cmdToExecute.Parameters.Add(new SqlParameter("@icampaign_id", CampaignID));
            cmdToExecute.Parameters.Add(new SqlParameter("@iform_id", FormID));

            DataTable toReturn = new DataTable();

            Select(cmdToExecute, toReturn);

            return toReturn;

        }

        

        public bool UpdateTerritoryBYFMID(string fromfmid, string tofmid, string salestofmid, DateTime effectiveDate, string reason, int icreateuserId)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[pr_Account_Transfers_Insert_ByTerritory]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            cmdToExecute.Parameters.Add(new SqlParameter("@sfrom_fmid", fromfmid));
            cmdToExecute.Parameters.Add(new SqlParameter("@sto_fmid", tofmid));
            cmdToExecute.Parameters.Add(new SqlParameter("@ssalesto_fmid", salestofmid));
            cmdToExecute.Parameters.Add(new SqlParameter("@seffective_date", effectiveDate));
            cmdToExecute.Parameters.Add(new SqlParameter("@sreason", reason));
            cmdToExecute.Parameters.Add(new SqlParameter("@icreate_user_id", icreateuserId));

            return ExecuteCmd(cmdToExecute);
        }

	}
}
