///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'account'
// Generated by Jas on: Monday, November 03, 2003, 4:18:07 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using QSPForm.Common.DataDef;
using QSPForm.Common;
using dataDef = QSPForm.Common.DataDef.AccountTable;

namespace QSPForm.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'account'.
	/// </summary>
	public class Account : DBTableOperation
	{

		#region Parameter
		//Stored procedure parameter names
		public const string PARAM_PKID = "@iaccount_id";
		public const string PARAM_ACCOUNT_TYPE_ID ="@iaccount_type_id";
		public const string PARAM_ACCOUNT_STATUS_ID ="@iaccount_status_id";
		public const string PARAM_NAME ="@saccount_name";
		public const string PARAM_CUSTOMER_ID ="@icustomer_id";	
		public const string PARAM_ORG_ID ="@iorganization_id";	
		public const string PARAM_FULF_ACCOUNT_ID ="@ifulf_account_id";
		public const string PARAM_FM_ID ="@sfm_id";		
		public const string PARAM_TAX_EXEMPTION_NO ="@stax_exemption_number";
		public const string PARAM_TAX_EXEMPTION_EXP_DATE ="@datax_exemption_expiration_date";
		public const string PARAM_CREDIT_LIMIT ="@dcredit_limit";	
		public const string PARAM_COMMENTS ="@scomments";	
		
		//
		// Stored procedure names for each operation
		private const string SQL_PROC_DELETE = "pr_account_Delete";
		private const string SQL_PROC_INSERT = "pr_account_Insert";
		private const string SQL_PROC_UPDATE = "pr_account_Update";	
		private const string SQL_PROC_SELECT_ONE = "pr_account_SelectOne";
		private const string SQL_PROC_SELECT_ALL = "pr_account_SelectAll";

		#endregion

		//
		// DataSetCommand object
		//
		
		private SqlCommand insertCommand;
		private SqlCommand updateCommand;
		private SqlCommand deleteCommand;

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public Account()
		{
			// Nothing for now.
		}

		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand(SQL_PROC_INSERT);
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
            
				SqlParameterCollection sqlParams = insertCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_ORG_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_NAME, SqlDbType.VarChar, 100));
				sqlParams.Add(new SqlParameter(PARAM_CUSTOMER_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_ACCOUNT_STATUS_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_ACCOUNT_TYPE_ID, SqlDbType.Int));				
				sqlParams.Add(new SqlParameter(PARAM_FULF_ACCOUNT_ID, SqlDbType.Int));				
				sqlParams.Add(new SqlParameter(PARAM_FM_ID, SqlDbType.VarChar, 4));	
				sqlParams.Add(new SqlParameter(PARAM_TAX_EXEMPTION_NO, SqlDbType.VarChar, 20));
				sqlParams.Add(new SqlParameter(PARAM_TAX_EXEMPTION_EXP_DATE, SqlDbType.DateTime));
				sqlParams.Add(new SqlParameter(PARAM_CREDIT_LIMIT, SqlDbType.Decimal));
				sqlParams.Add(new SqlParameter(PARAM_COMMENTS, SqlDbType.VarChar, 4000));
				sqlParams.Add(new SqlParameter(PARAM_CREATE_USER_ID, SqlDbType.Int));
							
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
								
				sqlParams[PARAM_PKID].Direction = ParameterDirection.Output;				
				//
				// Define the parameter mappings from the data table in the
				// dataset.
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_ORG_ID].SourceColumn = dataDef.FLD_ORG_ID;
				sqlParams[PARAM_NAME].SourceColumn = dataDef.FLD_NAME;
				sqlParams[PARAM_CUSTOMER_ID].SourceColumn = dataDef.FLD_CUSTOMER_ID;
				sqlParams[PARAM_ACCOUNT_STATUS_ID].SourceColumn = dataDef.FLD_ACCOUNT_STATUS_ID;
				sqlParams[PARAM_ACCOUNT_TYPE_ID].SourceColumn = dataDef.FLD_ACCOUNT_TYPE_ID;
				sqlParams[PARAM_FULF_ACCOUNT_ID].SourceColumn = dataDef.FLD_FULF_ACCOUNT_ID;
				sqlParams[PARAM_FM_ID].SourceColumn = dataDef.FLD_FM_ID;   
				sqlParams[PARAM_TAX_EXEMPTION_NO].SourceColumn = dataDef.FLD_TAX_EXEMPTION_NO;					
				sqlParams[PARAM_TAX_EXEMPTION_EXP_DATE].SourceColumn = dataDef.FLD_TAX_EXEMPTION_EXP_DATE;				
				sqlParams[PARAM_CREDIT_LIMIT].SourceColumn = dataDef.FLD_CREDIT_LIMIT;	
				sqlParams[PARAM_COMMENTS].SourceColumn = dataDef.FLD_COMMENTS;	
				sqlParams[PARAM_CREATE_USER_ID].SourceColumn = dataDef.FLD_CREATE_USER_ID;						
				
				//Don't need to map ErrorCode cause is not imply in the insert
				//Only Mapped DataColumn are imply...
			}
            
			return insertCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand(SQL_PROC_UPDATE);
				updateCommand.CommandType = CommandType.StoredProcedure;
				
            
				SqlParameterCollection sqlParams = updateCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_ORG_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_NAME, SqlDbType.VarChar, 100));
				sqlParams.Add(new SqlParameter(PARAM_CUSTOMER_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_ACCOUNT_STATUS_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_ACCOUNT_TYPE_ID, SqlDbType.Int));				
				sqlParams.Add(new SqlParameter(PARAM_FULF_ACCOUNT_ID, SqlDbType.Int));				
				sqlParams.Add(new SqlParameter(PARAM_FM_ID, SqlDbType.VarChar, 4));	
				sqlParams.Add(new SqlParameter(PARAM_TAX_EXEMPTION_NO, SqlDbType.VarChar, 20));
				sqlParams.Add(new SqlParameter(PARAM_TAX_EXEMPTION_EXP_DATE, SqlDbType.DateTime));
				sqlParams.Add(new SqlParameter(PARAM_CREDIT_LIMIT, SqlDbType.Decimal));
				sqlParams.Add(new SqlParameter(PARAM_COMMENTS, SqlDbType.VarChar, 4000));
				sqlParams.Add(new SqlParameter(PARAM_DELETED, SqlDbType.Bit));
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));	

				// Define the parameter mappings from the data tabl
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_ORG_ID].SourceColumn = dataDef.FLD_ORG_ID;
				sqlParams[PARAM_NAME].SourceColumn = dataDef.FLD_NAME;
				sqlParams[PARAM_CUSTOMER_ID].SourceColumn = dataDef.FLD_CUSTOMER_ID;
				sqlParams[PARAM_ACCOUNT_STATUS_ID].SourceColumn = dataDef.FLD_ACCOUNT_STATUS_ID;
				sqlParams[PARAM_ACCOUNT_TYPE_ID].SourceColumn = dataDef.FLD_ACCOUNT_TYPE_ID;
				sqlParams[PARAM_FULF_ACCOUNT_ID].SourceColumn = dataDef.FLD_FULF_ACCOUNT_ID;
				sqlParams[PARAM_FM_ID].SourceColumn = dataDef.FLD_FM_ID;   
				sqlParams[PARAM_TAX_EXEMPTION_NO].SourceColumn = dataDef.FLD_TAX_EXEMPTION_NO;					
				sqlParams[PARAM_TAX_EXEMPTION_EXP_DATE].SourceColumn = dataDef.FLD_TAX_EXEMPTION_EXP_DATE;				
				sqlParams[PARAM_CREDIT_LIMIT].SourceColumn = dataDef.FLD_CREDIT_LIMIT;	
				sqlParams[PARAM_COMMENTS].SourceColumn = dataDef.FLD_COMMENTS;						
				sqlParams[PARAM_DELETED].SourceColumn = dataDef.FLD_DELETED;				
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;				
				//Don't need to map ErrorCode cause is not imply in the insert
				//Only Mapped DataColumn are imply...
			}
            
			return updateCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand(SQL_PROC_DELETE);
				deleteCommand.CommandType = CommandType.StoredProcedure;
				
				SqlParameterCollection sqlParams = deleteCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));
				//
				// Define the parameter mappings from the data tabl
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;	
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;
				//Only Mapped DataColumn are imply...
			}
            
			return deleteCommand;
		}

		protected override string TableName
		{
			get{return dataDef.TBL_ACCOUNT;}
		}
		
		//We create a new method when we want to the return type variable
		public new dataDef SelectOne(int AccountID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ONE;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, AccountID));
			
			Select(cmdToExecute,Table);

			return Table;
				
		}

		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ALL;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
					
			Select(cmdToExecute,Table);
			return  Table;
			
		}

		public dataDef SelectAllWfm_idLogic(string FMID)
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_account_SelectAllWfm_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@sfm_id", SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FMID));
			
					
			Select(cmdToExecute,Table);
			
			return  Table;
			
		}

		
		public dataDef SelectAllWorganization_idLogic(int OrganizationID)
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_account_SelectAllWorganization_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ORG_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, OrganizationID));
				
			Select(cmdToExecute,Table);
		
			return  Table;
		
		}

		public dataDef SelectAllWorganization_idLogic(int OrganizationID, string FMID, int FSM_DisplayMode)
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_account_SelectAllWorganization_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ORG_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, OrganizationID));
			if (FMID.Length > 0)
			{
				cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FM_ID, SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FMID));
				cmdToExecute.Parameters.Add(new SqlParameter("@idisplay_fm_mode", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FSM_DisplayMode));
			}
			Select(cmdToExecute,Table);
		
			return  Table;
		
		}

		

		public dataDef SelectAllWcampaign_idLogic(int CampaignID)
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_account_SelectAllWcampaign_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@icampaign_id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CampaignID));
				
			Select(cmdToExecute,Table);
		
			return  Table;
		
		}

        public dataDef SelectAll_Search(int SearchType, String Criteria, int ProgramType, string SubdivisionCode, string FMID, int FSM_DisplayMode, int StatusCategoryID, string FMName)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_account_SelectAll_Search";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			if (ProgramType > 0)
				cmdToExecute.Parameters.Add(new SqlParameter("@iprogram_type_id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ProgramType));
			if (SubdivisionCode.Length > 0)
				cmdToExecute.Parameters.Add(new SqlParameter("@ssubdivision_code", SqlDbType.NVarChar, 7, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SubdivisionCode));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_TYPE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchType));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_CRITERIA, SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Criteria));
			
            if (FMID.Length > 0)
			    cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FM_ID, SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FMID));
			
            cmdToExecute.Parameters.Add(new SqlParameter("@idisplay_fm_mode", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FSM_DisplayMode));
            
            if (FMName.Length > 0)
                cmdToExecute.Parameters.Add(new SqlParameter("@sfm_name", SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FMName));
			
			if (StatusCategoryID > 0)
				cmdToExecute.Parameters.Add(new SqlParameter("@istatus_category_id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, StatusCategoryID));
			
			Select(cmdToExecute,Table);

			return Table;
		}

		private DateTime GetMaxOrderDate(int AccountID)
		{
			DateTime toReturn = DateTime.MinValue;
			SqlCommand	cmdToExecute = new SqlCommand();

			try
			{				
				cmdToExecute.CommandText = "dbo.[pr_account_GetMaxOrderDate]";
				cmdToExecute.CommandType = CommandType.StoredProcedure;
				cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, AccountID));
				cmdToExecute.Parameters.Add(new SqlParameter("@daMaxOrderDate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Output, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));
				
				AssignConnection(cmdToExecute);
				cmdToExecute.ExecuteNonQuery();
				if (cmdToExecute.Parameters["@daMaxOrderDate"].Value != DBNull.Value)
					toReturn = Convert.ToDateTime(cmdToExecute.Parameters["@daMaxOrderDate"].Value);
			}
			catch(Exception ex)
			{
				throw ex;
			}
			finally
			{
				UnassignConnection(cmdToExecute);
			}
			
			return toReturn;			
		
		}

		private DateTime GetAccountLastSales_History(int AccountID)
		{
			DateTime toReturn = DateTime.MinValue;
			SqlCommand	cmdToExecute = new SqlCommand();
			DataTable Table = new DataTable();
			try
			{				
				cmdToExecute.CommandText = "dbo.[pr_QSPForm_X_account_sales_history_SelectOne]";
				cmdToExecute.CommandType = CommandType.StoredProcedure;
				cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, AccountID));
				
				Select(cmdToExecute,Table);
				if (Table.Rows.Count > 0)
					toReturn = Convert.ToDateTime(Table.Rows[0][1]);
			}
			catch(Exception ex)
			{
				throw ex;
			}			
			
			return toReturn;			
		
		}


		public DateTime GetLastOrderDate(int AccountID)
		{
			DateTime maxOrderDate = DateTime.MinValue;			
			try
			{				
				
				maxOrderDate = GetMaxOrderDate(AccountID);
				if (maxOrderDate == DateTime.MinValue)
				{				
					//Try to read in QSPForm_X_Account_Sales_history Table
					maxOrderDate = GetAccountLastSales_History(AccountID);
				}
				
			}
			catch (Exception ex)
			{
				maxOrderDate = DateTime.MinValue;
			}			
			return maxOrderDate;
		}

		public AccountData SelectAllDetail(int ID)
		{	
			//This method fill the All Data needed for an account
			//into a predefined DataSet
			AccountData dts = new AccountData();
			try
			{				
				//Data Object Instanciation
				Data.Organization orgDataAccess = new Data.Organization();
				Data.AccountX accxDataAccess = new Data.AccountX();
				Data.Campaign campDataAccess = new Data.Campaign();
				Data.Customer custDataAccess = new Data.Customer();							
				Data.Postal_address_entity postDataAccess = new Data.Postal_address_entity();	
				Data.Phone_number_entity phoneDataAccess = new Data.Phone_number_entity();
				Data.Email_entity emailDataAccess = new Data.Email_entity();
				Data.Document_entity docDataAccess = new Data.Document_entity();
				Data.Credit_application crdAppDataAccess = new Data.Credit_application();
				Data.Entity_exception excDataAccess = new Data.Entity_exception();

				if (_mainConnectionProvider != null)
				{
					// Pass the created ConnectionProvider object to the data-access objects.
					orgDataAccess.MainConnectionProvider = _mainConnectionProvider;
					accxDataAccess.MainConnectionProvider = _mainConnectionProvider;
					campDataAccess.MainConnectionProvider = _mainConnectionProvider;
					custDataAccess.MainConnectionProvider = _mainConnectionProvider;
					postDataAccess.MainConnectionProvider = _mainConnectionProvider;
					phoneDataAccess.MainConnectionProvider = _mainConnectionProvider;
					emailDataAccess.MainConnectionProvider = _mainConnectionProvider;
					docDataAccess.MainConnectionProvider = _mainConnectionProvider;
					crdAppDataAccess.MainConnectionProvider = _mainConnectionProvider;
					excDataAccess.MainConnectionProvider = _mainConnectionProvider;

				}

				dts.Merge(SelectOne(ID));			
				//Organization
				dts.Merge(orgDataAccess.SelectAllWaccount_idLogic(ID));
				//AccountX
				dts.Merge(accxDataAccess.SelectOne(ID));
				//Campaign
				dts.Merge(campDataAccess.SelectAllWaccount_idLogic(ID));
				//Postal Address
				dts.Merge(postDataAccess.SelectWentity_idLogic(EntityType.TYPE_ACCOUNT, ID));	
				//Phone Number
				dts.Merge(phoneDataAccess.SelectWentity_idLogic(EntityType.TYPE_ACCOUNT, ID));	
				//Email Addess
				dts.Merge(emailDataAccess.SelectWentity_idLogic(EntityType.TYPE_ACCOUNT, ID));	
				//Document			
				dts.Merge(docDataAccess.SelectAllWentity_idLogic(ID, EntityType.TYPE_ACCOUNT));	
				//Credit Application
				dts.Merge(crdAppDataAccess.SelectAllWaccount_id(ID));
				//Account Exception	
				dts.Merge(excDataAccess.SelectAllWentity_idLogic(ID, EntityType.TYPE_ACCOUNT));	
			
				ResolveFormID(dts);

			}
			catch (Exception ex)
			{
				throw ex;
			}
			return dts;

			
		}


		public AccountData SelectAllDetailByCampaignID(int CampID)
		{	
			//This method fill the All Data needed for an account
			//into a predefined DataSet
			AccountData dts = new AccountData();
			try
			{				
				//Data Object Instanciation
				Data.Organization orgDataAccess = new Data.Organization();
				Data.AccountX accxDataAccess = new Data.AccountX();
				Data.Campaign campDataAccess = new Data.Campaign();
				Data.Customer custDataAccess = new Data.Customer();							
				Data.Postal_address_entity postDataAccess = new Data.Postal_address_entity();	
				Data.Phone_number_entity phoneDataAccess = new Data.Phone_number_entity();
				Data.Email_entity emailDataAccess = new Data.Email_entity();
				Data.Document_entity docDataAccess = new Data.Document_entity();
				Data.Credit_application crdAppDataAccess = new Data.Credit_application();
				Data.Entity_exception excDataAccess = new Data.Entity_exception();

				if (_mainConnectionProvider != null)
				{
					// Pass the created ConnectionProvider object to the data-access objects.
					orgDataAccess.MainConnectionProvider = _mainConnectionProvider;
					accxDataAccess.MainConnectionProvider = _mainConnectionProvider;
					campDataAccess.MainConnectionProvider = _mainConnectionProvider;
					custDataAccess.MainConnectionProvider = _mainConnectionProvider;
					postDataAccess.MainConnectionProvider = _mainConnectionProvider;
					phoneDataAccess.MainConnectionProvider = _mainConnectionProvider;
					emailDataAccess.MainConnectionProvider = _mainConnectionProvider;
					docDataAccess.MainConnectionProvider = _mainConnectionProvider;
					crdAppDataAccess.MainConnectionProvider = _mainConnectionProvider;
					excDataAccess.MainConnectionProvider = _mainConnectionProvider;

				}
				int ID = 0;
				
				//Campaign
				dts.Merge(campDataAccess.SelectOne(CampID));
				//Account
				ID = Convert.ToInt32(dts.Campaign.Rows[0][CampaignTable.FLD_ACCOUNT_ID]);
				dts.Merge(SelectOne(ID));	
				//Organization
				dts.Merge(orgDataAccess.SelectAllWaccount_idLogic(ID));
				//AccountX
				dts.Merge(accxDataAccess.SelectOne(ID));
				//Postal Address
				dts.Merge(postDataAccess.SelectWentity_idLogic(EntityType.TYPE_ACCOUNT, ID));	
				//Phone Number
				dts.Merge(phoneDataAccess.SelectWentity_idLogic(EntityType.TYPE_ACCOUNT, ID));	
				//Email Addess
				dts.Merge(emailDataAccess.SelectWentity_idLogic(EntityType.TYPE_ACCOUNT, ID));	
				//Document			
				dts.Merge(docDataAccess.SelectAllWentity_idLogic(ID, EntityType.TYPE_ACCOUNT));	
				//Credit Application
				dts.Merge(crdAppDataAccess.SelectAllWaccount_id(ID));
				//Account Exception	
				dts.Merge(excDataAccess.SelectAllWentity_idLogic(ID, EntityType.TYPE_ACCOUNT));	
				ResolveFormID(dts);

			}
			catch (Exception ex)
			{
				throw ex;
			}
			return dts;

			
		}

		public AccountData SelectAllDetailWithLastCampaign(int ID)
		{	
			//This method fill the All Data needed for an account
			//into a predefined DataSet
			AccountData dts = new AccountData();
			try
			{				
				//Data Object Instanciation
				Data.Organization orgDataAccess = new Data.Organization();
				Data.AccountX accxDataAccess = new Data.AccountX();
				Data.Campaign campDataAccess = new Data.Campaign();
				Data.Customer custDataAccess = new Data.Customer();							
				Data.Postal_address_entity postDataAccess = new Data.Postal_address_entity();	
				Data.Phone_number_entity phoneDataAccess = new Data.Phone_number_entity();
				Data.Email_entity emailDataAccess = new Data.Email_entity();
				Data.Document_entity docDataAccess = new Data.Document_entity();
				Data.Credit_application crdAppDataAccess = new Data.Credit_application();
				Data.Entity_exception excDataAccess = new Data.Entity_exception();

				if (_mainConnectionProvider != null)
				{
					// Pass the created ConnectionProvider object to the data-access objects.
					orgDataAccess.MainConnectionProvider = _mainConnectionProvider;
					accxDataAccess.MainConnectionProvider = _mainConnectionProvider;
					campDataAccess.MainConnectionProvider = _mainConnectionProvider;
					custDataAccess.MainConnectionProvider = _mainConnectionProvider;
					postDataAccess.MainConnectionProvider = _mainConnectionProvider;
					phoneDataAccess.MainConnectionProvider = _mainConnectionProvider;
					emailDataAccess.MainConnectionProvider = _mainConnectionProvider;
					docDataAccess.MainConnectionProvider = _mainConnectionProvider;
					crdAppDataAccess.MainConnectionProvider = _mainConnectionProvider;
					excDataAccess.MainConnectionProvider = _mainConnectionProvider;

				}

				dts.Merge(SelectOne(ID));			
				//Organization
				dts.Merge(orgDataAccess.SelectAllWaccount_idLogic(ID));
				//AccountX
				dts.Merge(accxDataAccess.SelectOne(ID));
				//Campaign
				dts.Merge(campDataAccess.SelectLastOneWaccount_idLogic(ID));
				//Postal Address
				dts.Merge(postDataAccess.SelectWentity_idLogic(EntityType.TYPE_ACCOUNT, ID));	
				//Phone Number
				dts.Merge(phoneDataAccess.SelectWentity_idLogic(EntityType.TYPE_ACCOUNT, ID));	
				//Email Addess
				dts.Merge(emailDataAccess.SelectWentity_idLogic(EntityType.TYPE_ACCOUNT, ID));	
				//Document			
				dts.Merge(docDataAccess.SelectAllWentity_idLogic(ID, EntityType.TYPE_ACCOUNT));	
				//Credit Application
				dts.Merge(crdAppDataAccess.SelectAllWaccount_id(ID));
				//Account Exception	
				dts.Merge(excDataAccess.SelectAllWentity_idLogic(ID, EntityType.TYPE_ACCOUNT));	
				ResolveFormID(dts);

			}
			catch (Exception ex)
			{
				throw ex;
			}
			return dts;

			
		}

		
		public void ResolveFormID(AccountData dtsAccount)
		{
			if (dtsAccount.IsFormIDNull)
			{
				//Form Info -- We have to determine it
				int ProgType = 0;
				if (dtsAccount.Campaign.Rows.Count > 0)
					ProgType = Convert.ToInt32(dtsAccount.Campaign.Rows[0][CampaignTable.FLD_PROG_TYPE_ID]);
				Form formDataAccess = new Form();
				FormTable dTblForm = formDataAccess.SelectAllWentity_type_idLogic(QSPForm.Common.EntityType.TYPE_ACCOUNT);
				DataView dvForm = new DataView(dTblForm);
				dvForm.RowFilter =  FormTable.FLD_PROGRAM_TYPE_ID + " = " + ProgType.ToString();
				if (dvForm.Count >0)
				{
					dtsAccount.Campaign.Rows[0][CampaignTable.FLD_FORM_ID] = dvForm[0][FormTable.FLD_PKID];
				}
			}
		}

		public DataTable SummarizeWaccount_idLogic_Winterval(int AccountID, int NbOfDay, int OrderID)
		{
			DataTable Table = new DataTable();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_order_SummarizeWaccount_idLogic_Winterval";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, AccountID));
			cmdToExecute.Parameters.Add(new SqlParameter("@iorder_id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, OrderID));
			cmdToExecute.Parameters.Add(new SqlParameter("@inb_of_day", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, NbOfDay));
				
			Select(cmdToExecute,Table);
		
			return  Table;
		
		}

        public void Delete(int QSPAccountID, int UserID)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.pr_account_Delete";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, QSPAccountID));
            cmdToExecute.Parameters.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, UserID));

            ExecuteCmd(cmdToExecute);
        }
	
	}
}
