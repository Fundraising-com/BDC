///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'CUserProfile'
// Generated by LLBLGen v1.2.1402.29234 Final on: Wednesday, November 12, 2003, 2:35:18 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using dataDef = QSPForm.Common.DataDef.CUserTable;

namespace QSPForm.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'CUserProfile'.
	/// </summary>
	public class CUserProfile : DBInteractionBase
	{
		#region Parameter
			//Stored procedure parameter names
			public const string PARAM_PKID = "@iInstance";
			public const string PARAM_USERNAME = "@sUserName";
			public const string PARAM_FM_ID		= "@sfm_id";		
		
			//
			// Stored procedure names for each operation
			private const string SQL_PROC_SELECT_ONE = "pr_CUserProfile_SelectOne";
			private const string SQL_PROC_SELECT_ALL = "pr_CUserProfile_SelectAll";		
			private const string SQL_PROC_SELECT_ALL_WUSERNAME = "pr_CUserProfile_SelectAllWUserNameLogic";
		
		#endregion	

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public CUserProfile()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iInstance</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		///		 <LI>sUserName</LI>
		///		 <LI>sPassword</LI>
		///		 <LI>sFirstName</LI>
		///		 <LI>sLastName</LI>		
		///		 <LI>sEmail</LI>		
		///		 <LI>sCorporateEmail</LI>		
		///		 <LI>sRegion</LI>
		///		 <LI>sFMNumber</LI>
		///		 <LI>sMailAddress1</LI>
		///		 <LI>sMailAddress2</LI>
		///		 <LI>sMailCity</LI>
		///		 <LI>sMailState</LI>
		///		 <LI>sMailPostalCode</LI>		
		///		 <LI>sVoiceMailExt</LI>
		///		 <LI>sHomePhone</LI>
		///		 <LI>sWorkPhone</LI>
		///		 <LI>sFaxPhone</LI>
		///		 <LI>sTollFreePhone</LI>
		///		 <LI>sMobilePhone</LI>
		///		 <LI>sPagerPhone</LI>
		///		 <LI>sAreaManager</LI>		
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public new dataDef SelectOne(int Instance)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ONE;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Instance));
			
			Select(cmdToExecute,Table);
			//AssignInnerProperty(Table);

			return Table;
				
		}

		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		/// </UL>
		/// </remarks>
		public new dataDef SelectAll()
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ALL;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
					
			Select(cmdToExecute,Table);
			//AssignInnerProperty(Table);
			return  Table;
			
		}

		public dataDef SelectAllWUserNameLogic(String UserName)
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ALL_WUSERNAME;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_USERNAME, SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, UserName));
			
					
			Select(cmdToExecute,Table);
			//AssignInnerProperty(Table);
			return  Table;
			
		}

		public dataDef SelectAllFM()
		{	
			dataDef toReturn = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_CUserProfile_SelectAllFM";
			cmdToExecute.CommandType = CommandType.StoredProcedure;			
			
			Select(cmdToExecute, toReturn);

			return toReturn;

		}

		public dataDef SelectAllFM_Search(int SearchType, String Criteria)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_CUserProfile_SelectAllFM_Search";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(DBTableOperation.PARAM_SEARCH_TYPE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchType));
			cmdToExecute.Parameters.Add(new SqlParameter(DBTableOperation.PARAM_SEARCH_CRITERIA, SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Criteria));
			
			Select(cmdToExecute,Table);

			return Table;
		}

		public dataDef SelectOneWfm_idLogic(string FMID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_CUserProfile_SelectOneWfm_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FM_ID, SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FMID));
			
			Select(cmdToExecute,Table);

			return Table;
		}

		public dataDef SelectByFMID(string FMID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_CUserProfile_SelectByFMID";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@sfm_id", SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FMID));
			
			Select(cmdToExecute,Table);

			return Table;
		}
	
	}
}
