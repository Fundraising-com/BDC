///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'product'
// Generated by Jas on: Monday, November 03, 2003, 4:18:07 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using QSPForm.Common.DataDef;
using dataDef = QSPForm.Common.DataDef.ProductTable;

namespace QSPForm.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'product'.
	/// </summary>
	public class Product : DBTableOperation
	{

		#region Parameter
		//Stored procedure parameter names
		public const string PARAM_PKID = "@iproduct_id";
		public const string PARAM_PRODUCT_TYPE_ID ="@iproduct_type_id";
		public const string PARAM_VENDOR_ID ="@ivendor_id";
		public const string PARAM_CODE ="@sproduct_code";
		public const string PARAM_NAME ="@sproduct_name";	
		public const string PARAM_DESCRIPTION ="@sdescription";	
		public const string PARAM_NB_UNITS ="@inb_units";
		public const string PARAM_PRICE ="@mprice";
		public const string PARAM_UNIT_COST ="@munit_cost";
		public const string PARAM_NB_DAY_LEAD_TIME ="@inb_day_lead_time";
		public const string PARAM_VENDOR_ITEM_CODE ="@svendor_item_code";
		public const string PARAM_ORACLE_CODE ="@soracle_code";
		public const string PARAM_COMMISSION ="@dcommission";
		public const string PARAM_IMAGE_URL ="@simage_url";
		
		public const string PARAM_PRODUCT_TYPE_NAME = "@sproduct_type_name";
		public const string PARAM_BUSINESS_DIVISION_ID = "@ibusiness_division_id";
		public const string PARAM_BUSINESS_DIVISION_NAME = "@sbusiness_division_name";
		public const string PARAM_COUPON_ID = "@icoupon_id";

		//
		// Stored procedure names for each operation
		private const string SQL_PROC_DELETE = "pr_product_Delete";
		private const string SQL_PROC_INSERT = "pr_product_Insert";
		private const string SQL_PROC_UPDATE = "pr_product_Update";	
		private const string SQL_PROC_SELECT_ONE = "pr_product_SelectOne";
		private const string SQL_PROC_SELECT_ALL = "pr_product_SelectAll";

		#endregion

		//
		// DataSetCommand object
		//
		
		private SqlCommand insertCommand;
		private SqlCommand updateCommand;
		private SqlCommand deleteCommand;

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public Product()
		{
			// Nothing for now.
		}

		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand(SQL_PROC_INSERT);
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
            
				SqlParameterCollection sqlParams = insertCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PRODUCT_TYPE_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_VENDOR_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_COUPON_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_CODE, SqlDbType.VarChar, 50));	
				sqlParams.Add(new SqlParameter(PARAM_NAME, SqlDbType.VarChar, 50));		
				sqlParams.Add(new SqlParameter(PARAM_DESCRIPTION, SqlDbType.VarChar, 2000));	
				sqlParams.Add(new SqlParameter(PARAM_NB_UNITS, SqlDbType.Int));	
				sqlParams.Add(new SqlParameter(PARAM_PRICE, SqlDbType.Money));	
				sqlParams.Add(new SqlParameter(PARAM_UNIT_COST, SqlDbType.Money));	
				sqlParams.Add(new SqlParameter(PARAM_NB_DAY_LEAD_TIME, SqlDbType.Int));	
				sqlParams.Add(new SqlParameter(PARAM_VENDOR_ITEM_CODE, SqlDbType.VarChar, 50));	
				sqlParams.Add(new SqlParameter(PARAM_ORACLE_CODE, SqlDbType.VarChar, 50));	
				sqlParams.Add(new SqlParameter(PARAM_COMMISSION, SqlDbType.Decimal));	
				sqlParams.Add(new SqlParameter(PARAM_IMAGE_URL, SqlDbType.VarChar, 255));
				sqlParams.Add(new SqlParameter(PARAM_BUSINESS_DIVISION_ID, SqlDbType.Int));	
				sqlParams.Add(new SqlParameter(PARAM_CREATE_USER_ID, SqlDbType.Int));
							
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
								
				sqlParams[PARAM_PKID].Direction = ParameterDirection.Output;				
				//
				// Define the parameter mappings from the data table in the
				// dataset.
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_PRODUCT_TYPE_ID].SourceColumn = dataDef.FLD_PRODUCT_TYPE_ID;
				sqlParams[PARAM_VENDOR_ID].SourceColumn = dataDef.FLD_VENDOR_ID;
				sqlParams[PARAM_COUPON_ID].SourceColumn = dataDef.FLD_COUPON_ID;
				sqlParams[PARAM_CODE].SourceColumn = dataDef.FLD_CODE;
				sqlParams[PARAM_NAME].SourceColumn = dataDef.FLD_NAME;
				sqlParams[PARAM_DESCRIPTION].SourceColumn = dataDef.FLD_DESCRIPTION;
				sqlParams[PARAM_NB_UNITS].SourceColumn = dataDef.FLD_NB_UNITS;
				sqlParams[PARAM_PRICE].SourceColumn = dataDef.FLD_PRICE;
				sqlParams[PARAM_UNIT_COST].SourceColumn = dataDef.FLD_UNIT_COST;
				sqlParams[PARAM_NB_DAY_LEAD_TIME].SourceColumn = dataDef.FLD_NB_DAY_LEAD_TIME;
				sqlParams[PARAM_VENDOR_ITEM_CODE].SourceColumn = dataDef.FLD_VENDOR_ITEM_CODE;
				sqlParams[PARAM_ORACLE_CODE].SourceColumn = dataDef.FLD_ORACLE_CODE;
				sqlParams[PARAM_COMMISSION].SourceColumn = dataDef.FLD_COMMISSION;
				sqlParams[PARAM_IMAGE_URL].SourceColumn = dataDef.FLD_IMAGE_URL;
				sqlParams[PARAM_BUSINESS_DIVISION_ID].SourceColumn = dataDef.FLD_BUSINESS_DIVISION_ID;
				sqlParams[PARAM_CREATE_USER_ID].SourceColumn = dataDef.FLD_CREATE_USER_ID;						
				
				//Don't need to map ErrorCode cause is not imply in the insert
				//Only Mapped DataColumn are imply...
			}
            
			return insertCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand(SQL_PROC_UPDATE);
				updateCommand.CommandType = CommandType.StoredProcedure;
				
            
				SqlParameterCollection sqlParams = updateCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_PRODUCT_TYPE_ID, SqlDbType.Int));	
				sqlParams.Add(new SqlParameter(PARAM_VENDOR_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_COUPON_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_CODE, SqlDbType.VarChar, 50));	
				sqlParams.Add(new SqlParameter(PARAM_NAME, SqlDbType.VarChar, 50));		
				sqlParams.Add(new SqlParameter(PARAM_DESCRIPTION, SqlDbType.VarChar, 2000));	
				sqlParams.Add(new SqlParameter(PARAM_NB_UNITS, SqlDbType.Int));	
				sqlParams.Add(new SqlParameter(PARAM_PRICE, SqlDbType.Money));	
				sqlParams.Add(new SqlParameter(PARAM_UNIT_COST, SqlDbType.Money));	
				sqlParams.Add(new SqlParameter(PARAM_NB_DAY_LEAD_TIME, SqlDbType.Int));	
				sqlParams.Add(new SqlParameter(PARAM_VENDOR_ITEM_CODE, SqlDbType.VarChar, 50));	
				sqlParams.Add(new SqlParameter(PARAM_ORACLE_CODE, SqlDbType.VarChar, 50));	
				sqlParams.Add(new SqlParameter(PARAM_COMMISSION, SqlDbType.Decimal));	
				sqlParams.Add(new SqlParameter(PARAM_IMAGE_URL, SqlDbType.VarChar, 255));
				sqlParams.Add(new SqlParameter(PARAM_BUSINESS_DIVISION_ID, SqlDbType.Int));	
				sqlParams.Add(new SqlParameter(PARAM_DELETED, SqlDbType.Bit));
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));	

				// Define the parameter mappings from the data tabl
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_PRODUCT_TYPE_ID].SourceColumn = dataDef.FLD_PRODUCT_TYPE_ID;
				sqlParams[PARAM_VENDOR_ID].SourceColumn = dataDef.FLD_VENDOR_ID;
				sqlParams[PARAM_COUPON_ID].SourceColumn = dataDef.FLD_COUPON_ID;
				sqlParams[PARAM_CODE].SourceColumn = dataDef.FLD_CODE;
				sqlParams[PARAM_NAME].SourceColumn = dataDef.FLD_NAME;
				sqlParams[PARAM_DESCRIPTION].SourceColumn = dataDef.FLD_DESCRIPTION;
				sqlParams[PARAM_NB_UNITS].SourceColumn = dataDef.FLD_NB_UNITS;
				sqlParams[PARAM_PRICE].SourceColumn = dataDef.FLD_PRICE;
				sqlParams[PARAM_UNIT_COST].SourceColumn = dataDef.FLD_UNIT_COST;
				sqlParams[PARAM_NB_DAY_LEAD_TIME].SourceColumn = dataDef.FLD_NB_DAY_LEAD_TIME;
				sqlParams[PARAM_VENDOR_ITEM_CODE].SourceColumn = dataDef.FLD_VENDOR_ITEM_CODE;
				sqlParams[PARAM_ORACLE_CODE].SourceColumn = dataDef.FLD_ORACLE_CODE;
				sqlParams[PARAM_COMMISSION].SourceColumn = dataDef.FLD_COMMISSION;
				sqlParams[PARAM_IMAGE_URL].SourceColumn = dataDef.FLD_IMAGE_URL;
				sqlParams[PARAM_BUSINESS_DIVISION_ID].SourceColumn = dataDef.FLD_BUSINESS_DIVISION_ID;
				sqlParams[PARAM_DELETED].SourceColumn = dataDef.FLD_DELETED;				
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;				
				//Don't need to map ErrorCode cause is not imply in the insert
				//Only Mapped DataColumn are imply...
			}
            
			return updateCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand(SQL_PROC_DELETE);
				deleteCommand.CommandType = CommandType.StoredProcedure;
				
				SqlParameterCollection sqlParams = deleteCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));
				//
				// Define the parameter mappings from the data tabl
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;	
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;
				//Only Mapped DataColumn are imply...
			}
            
			return deleteCommand;
		}

		protected override string TableName
		{
			get{return dataDef.TBL_PRODUCT;}
		}
		
		//We create a new method when we want to the return type variable
		public new dataDef SelectOne(int ProductID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ONE;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ProductID));
			
			Select(cmdToExecute,Table);

			return Table;
				
		}

		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public new dataDef SelectAll()
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ALL;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
					
			Select(cmdToExecute,Table);
			return  Table;
			
		}

		public dataDef SelectAllWproduct_type_idLogic(int ProductType)
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_product_SelectAllWproduct_type_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PRODUCT_TYPE_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ProductType));
			
					
			Select(cmdToExecute,Table);
			
			return  Table;
			
		}

		public dataDef SelectAll_Search(int SearchType, String Criteria, int ProductType, int VendorID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_product_SelectAll_Search";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			if (ProductType > 0)
				cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PRODUCT_TYPE_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ProductType));
			if (VendorID > 0)
				cmdToExecute.Parameters.Add(new SqlParameter(PARAM_VENDOR_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, VendorID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_TYPE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchType));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_CRITERIA, SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Criteria));
			
			
			
			Select(cmdToExecute,Table);

			return Table;
		}

	
	}
}
