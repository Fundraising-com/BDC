///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'CCA'
// Generated by LLBLGen v1.2.1402.29234 Final on: Wednesday, November 12, 2003, 2:35:14 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using dataDef = QSPForm.Common.DataDef.BusinessRuleTable;

namespace QSPForm.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'BusinessRule'.
	/// </summary>
	public class Business_rule : DBTableOperation
	{

		#region Parameter
		//Stored procedure parameter names
		public const string TABLE_NAME = "business_rule";
		public const string PARAM_PKID = "@ibusiness_rule_id";
		public const string PARAM_FORM_ID = "@iform_id";
		public const string PARAM_FIELD_ID = "@ifield_id";
		public const string PARAM_LOGICAL_OPERATOR_ID = "@ilogical_operator_id";
		public const string PARAM_NAME = "@sbusiness_rule_name";
		public const string PARAM_MESSAGE = "@smessage";
		public const string PARAM_VALUE_TO_COMPARE = "@svalue_to_compare";
		public const string PARAM_DESCRIPTION = "@sdescription";
        public const string PARAM_FORM_SECTION_NUMBER = "@iform_section_number";
        public const string PARAM_FORM_SECTION_TYPE_ID = "@iform_section_type_id";
			
		//
		// Stored procedure names for each operation
		private const string SQL_PROC_DELETE = "pr_business_rule_Delete";
		private const string SQL_PROC_INSERT = "pr_business_rule_Insert";
		private const string SQL_PROC_UPDATE = "pr_business_rule_Update";
		private const string SQL_PROC_SELECT_ONE = "pr_business_rule_SelectOne";
		private const string SQL_PROC_SELECT_ALL = "pr_business_rule_SelectAll";		
		
		#endregion	
		

		//
		// DataSetCommand object
		//
		
		private SqlCommand insertCommand;
		private SqlCommand updateCommand;
		private SqlCommand deleteCommand;

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public Business_rule()
		{
			// Nothing for now.
		}

		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand(SQL_PROC_INSERT);
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
            
				SqlParameterCollection sqlParams = insertCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_FORM_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_FIELD_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_LOGICAL_OPERATOR_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_NAME, SqlDbType.VarChar, 50));	
				sqlParams.Add(new SqlParameter(PARAM_MESSAGE, SqlDbType.VarChar, 200));	
				sqlParams.Add(new SqlParameter(PARAM_VALUE_TO_COMPARE, SqlDbType.VarChar, 50));			
				sqlParams.Add(new SqlParameter(PARAM_DESCRIPTION, SqlDbType.VarChar, 200));
                sqlParams.Add(new SqlParameter(PARAM_FORM_SECTION_NUMBER, SqlDbType.Int));
                sqlParams.Add(new SqlParameter(PARAM_FORM_SECTION_TYPE_ID, SqlDbType.Int));
                sqlParams.Add(new SqlParameter(PARAM_CREATE_USER_ID, SqlDbType.Int));
							
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
								
				sqlParams[PARAM_PKID].Direction = ParameterDirection.Output;				
				//
				// Define the parameter mappings from the data table in the
				// dataset.
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_FORM_ID].SourceColumn = dataDef.FLD_FORM_ID;
				sqlParams[PARAM_FIELD_ID].SourceColumn = dataDef.FLD_FIELD_ID;
				sqlParams[PARAM_LOGICAL_OPERATOR_ID].SourceColumn = dataDef.FLD_LOGICAL_OPERATOR_ID;
				sqlParams[PARAM_NAME].SourceColumn = dataDef.FLD_NAME;
				sqlParams[PARAM_MESSAGE].SourceColumn = dataDef.FLD_MESSAGE;
				sqlParams[PARAM_VALUE_TO_COMPARE].SourceColumn = dataDef.FLD_VALUE_TO_COMPARE;
				sqlParams[PARAM_DESCRIPTION].SourceColumn = dataDef.FLD_DESCRIPTION;
				sqlParams[PARAM_FORM_SECTION_NUMBER].SourceColumn = dataDef.FLD_FORM_SECTION_NUMBER;
				sqlParams[PARAM_FORM_SECTION_TYPE_ID].SourceColumn = dataDef.FLD_FORM_SECTION_TYPE_ID;
                sqlParams[PARAM_CREATE_USER_ID].SourceColumn = dataDef.FLD_CREATE_USER_ID;						
				
				//Don't need to map ErrorCode cause is not imply in the insert
				//Only Mapped DataColumn are imply...
			}
            
			return insertCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand(SQL_PROC_UPDATE);
				updateCommand.CommandType = CommandType.StoredProcedure;
				
            
				SqlParameterCollection sqlParams = updateCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_FORM_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_FIELD_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_LOGICAL_OPERATOR_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_NAME, SqlDbType.VarChar, 50));	
				sqlParams.Add(new SqlParameter(PARAM_MESSAGE, SqlDbType.VarChar, 200));	
				sqlParams.Add(new SqlParameter(PARAM_VALUE_TO_COMPARE, SqlDbType.VarChar, 50));			
				sqlParams.Add(new SqlParameter(PARAM_DESCRIPTION, SqlDbType.VarChar, 200));
                sqlParams.Add(new SqlParameter(PARAM_FORM_SECTION_NUMBER, SqlDbType.Int));
                sqlParams.Add(new SqlParameter(PARAM_FORM_SECTION_TYPE_ID, SqlDbType.Int));
                sqlParams.Add(new SqlParameter(PARAM_DELETED, SqlDbType.Bit));
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));	

				// Define the parameter mappings from the data tabl
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_FORM_ID].SourceColumn = dataDef.FLD_FORM_ID;
				sqlParams[PARAM_FIELD_ID].SourceColumn = dataDef.FLD_FIELD_ID;
				sqlParams[PARAM_LOGICAL_OPERATOR_ID].SourceColumn = dataDef.FLD_LOGICAL_OPERATOR_ID;
				sqlParams[PARAM_NAME].SourceColumn = dataDef.FLD_NAME;
				sqlParams[PARAM_MESSAGE].SourceColumn = dataDef.FLD_MESSAGE;
				sqlParams[PARAM_VALUE_TO_COMPARE].SourceColumn = dataDef.FLD_VALUE_TO_COMPARE;
				sqlParams[PARAM_DESCRIPTION].SourceColumn = dataDef.FLD_DESCRIPTION;
                sqlParams[PARAM_FORM_SECTION_NUMBER].SourceColumn = dataDef.FLD_FORM_SECTION_NUMBER;
                sqlParams[PARAM_FORM_SECTION_TYPE_ID].SourceColumn = dataDef.FLD_FORM_SECTION_TYPE_ID;
                sqlParams[PARAM_DELETED].SourceColumn = dataDef.FLD_DELETED;				
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;				
				//Don't need to map ErrorCode cause is not imply in the insert
				//Only Mapped DataColumn are imply...
			}
            
			return updateCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand(SQL_PROC_DELETE);
				deleteCommand.CommandType = CommandType.StoredProcedure;
				
				SqlParameterCollection sqlParams = deleteCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));
				//
				// Define the parameter mappings from the data tabl
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;	
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;
				//Only Mapped DataColumn are imply...
			}
            
			return deleteCommand;
		}

		protected override string TableName
		{
			get{return dataDef.TBL_BUSINESS_RULE;}
		}

		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iInstance</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		///		 <LI>iInstance</LI>
		///		 <LI>daStartDate</LI>
		///		 <LI>daEndDate</LI>
		///		 <LI>iAccountInstance</LI>
		///		 <LI>iNumberInGroup</LI>
		///		 <LI>iNumberOfRooms</LI>
		///		 <LI>iNumberOfStudents</LI>		
		///		 <LI>sFMID</LI>		
		///		 <LI>iCAFiscal</LI>
		///		 <LI>bCampaignComplete</LI>
		
		/// </UL>
		/// Will fill all properties corresponding with a rule in the table with the value of the row selected.
		/// </remarks>
		
		public new dataDef SelectOne(int ID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ONE;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ID));
			
			Select(cmdToExecute,Table);
			//AssignInnerProperty(Table);

			return Table;
				
		}

		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		/// </UL>
		/// </remarks>
		public new dataDef SelectAll()
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ALL;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
					
			Select(cmdToExecute,Table);
			//AssignInnerProperty(Table);
			return  Table;
			
		}

		public dataDef SelectAllWform_idLogic(int FormID)
		{
			return  SelectAllWform_idLogic(FormID, false);			
		}

		public dataDef SelectAllWform_idLogic(int FormID, bool IncludeAllDerivedElements)
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_business_rule_SelectAllWform_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FORM_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FormID));
			cmdToExecute.Parameters.Add(new SqlParameter("@binclude_derived_elements", SqlDbType.Bit, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, IncludeAllDerivedElements));			
					
			Select(cmdToExecute,Table);
			//AssignInnerProperty(Table);
			return  Table;
			
		}

        public dataDef SelectAllWfield_idLogic(int BizFieldID)
        {
            return SelectAllWfield_idLogic(BizFieldID, 0);
        }
        
        public dataDef SelectAllWfield_idLogic(int BizFieldID, int FormID)
        {
            return SelectAllWfield_idLogic(BizFieldID, FormID, 0);
        }

        public dataDef SelectAllWfield_idLogic(int BizFieldID, int FormID, int FormSectionTypeID)
        {
            return SelectAllWfield_idLogic(BizFieldID, FormID, FormSectionTypeID, 0);
        }

        public dataDef SelectAllWfield_idLogic(int BizFieldID, int FormID, int FormSectionTypeID, int FormSectionNumber)
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_business_rule_SelectAllWfield_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FIELD_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, BizFieldID));
            cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FORM_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FormID));
            if (FormSectionTypeID > 0)
            {
                cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FORM_SECTION_TYPE_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FormSectionTypeID));
                if (FormSectionNumber > 0)
                {
                    cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FORM_SECTION_NUMBER, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FormSectionNumber));

                }
            }

					
			Select(cmdToExecute,Table);
			//AssignInnerProperty(Table);
			return  Table;
			
		}

		public dataDef SelectAllWfield_nameLogic(string BizFieldName, int FormID)
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_business_rule_SelectAllWfield_nameLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@sfield_name", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, BizFieldName));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FORM_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FormID));
			
					
			Select(cmdToExecute,Table);
			//AssignInnerProperty(Table);
			return  Table;
			
		}

		public dataDef SelectAllWbusiness_rule_nameLogic(string BizRuleName, int FormID)
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_business_rule_SelectAllWbusiness_rule_nameLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_NAME, SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, BizRuleName));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FORM_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FormID));
			
					
			Select(cmdToExecute,Table);
			//AssignInnerProperty(Table);
			return  Table;
			
		}


	}
}
