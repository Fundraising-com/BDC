///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'order'
// Generated by Jas on: Monday, November 03, 2003, 4:18:07 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using QSPForm.Common.DataDef;
using QSPForm.Common;
using dataDef = QSPForm.Common.DataDef.OrderHeaderTable;

namespace QSPForm.Data
{
	/// <summary>
	/// Purpose: Data Access class for the table 'order'.
	/// </summary>
	public class Order : DBTableOperation
	{

		#region Parameter
		//Stored procedure parameter names
		public const string PARAM_PKID = "@iorder_id";
		public const string PARAM_CAMPAIGN_ID ="@icampaign_id";
		public const string PARAM_ORDER_GROUP_ID ="@iorder_group_id";
		public const string PARAM_SOURCE_ID ="@isource_id";
		public const string PARAM_ORDER_STATUS_ID ="@iorder_status_id";	
		public const string PARAM_STATUS_REASON_ID ="@istatus_reason_id";	
		public const string PARAM_BILLING_POSTAL_ADDRESS_ID ="@ibilling_postal_address_id";
		public const string PARAM_BILLING_PHONE_NUMBER_ID ="@ibilling_phone_number_id";
		public const string PARAM_BILLING_FAX_NUMBER_ID ="@ibilling_fax_number_id";
		public const string PARAM_BILLING_EMAIL_ADDRESS_ID ="@ibilling_email_id";
		public const string PARAM_CUSTOMER_ID ="@icustomer_id";
        public const string PARAM_CUSTOMER_PO_NUMBER = "@scustomer_po_number";	
		public const string PARAM_INSTALLMENT_PLAN_ID ="@iinstallment_plan_id";	
		public const string PARAM_FORM_ID ="@iform_id";	
		public const string PARAM_ORDER_TYPE_ID ="@iorder_type_id";	
		public const string PARAM_FM_ID ="@sfm_id";	
		public const string PARAM_ORDER_DATE ="@daorder_date";
		public const string PARAM_ADJ_AMOUNT ="@dadjustment_amount";
        public const string PARAM_PROFIT_RATE = "@fprofit_rate";	
		public const string PARAM_COMMENTS ="@scomments";
		public const string PARAM_FULF_ORDER_ID ="@sfulf_order_id";
        public const string PARAM_IS_DSD = "@bis_dsd";
        public const string PARAM_IS_CONTINUATION = "@bis_continuation";


		//For SearchAll
		private const String PARAM_START_DATE		= "@dastart_date";
		private const String PARAM_END_DATE			= "@daend_date";
		
		//
		// Stored procedure names for each operation
		private const string SQL_PROC_DELETE = "pr_order_Delete";
		private const string SQL_PROC_INSERT = "pr_order_Insert";
		private const string SQL_PROC_UPDATE = "pr_order_Update";	
		private const string SQL_PROC_SELECT_ONE = "pr_order_SelectOne";
		private const string SQL_PROC_SELECT_ALL = "pr_order_SelectAll";

		#endregion

		//
		// DataSetCommand object
		//
		
		private SqlCommand insertCommand;
		private SqlCommand updateCommand;
		private SqlCommand deleteCommand;

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public Order()
		{
			// Nothing for now.
		}

		//----------------------------------------------------------------
		// Sub GetInsertCommand:
		//   Initialize the parameterized Insert command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetInsertCommand()
		{
			if ( insertCommand == null )
			{
				//
				// Construct the command since we don't have it already
				// 
				insertCommand = new SqlCommand(SQL_PROC_INSERT);
				insertCommand.CommandType = CommandType.StoredProcedure;
				insertCommand.UpdatedRowSource = UpdateRowSource.OutputParameters; 
            
				SqlParameterCollection sqlParams = insertCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_CAMPAIGN_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_ORDER_GROUP_ID, SqlDbType.Int));	
				sqlParams.Add(new SqlParameter(PARAM_SOURCE_ID, SqlDbType.Int));	
				sqlParams.Add(new SqlParameter(PARAM_ORDER_STATUS_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_STATUS_REASON_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_BILLING_POSTAL_ADDRESS_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_BILLING_PHONE_NUMBER_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_BILLING_FAX_NUMBER_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_BILLING_EMAIL_ADDRESS_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_CUSTOMER_ID, SqlDbType.Int));
                sqlParams.Add(new SqlParameter(PARAM_CUSTOMER_PO_NUMBER, SqlDbType.VarChar, 10));
				sqlParams.Add(new SqlParameter(PARAM_INSTALLMENT_PLAN_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_FORM_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_ORDER_TYPE_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_FM_ID, SqlDbType.VarChar, 4));
				sqlParams.Add(new SqlParameter(PARAM_ORDER_DATE, SqlDbType.DateTime));	
				sqlParams.Add(new SqlParameter(PARAM_ADJ_AMOUNT, SqlDbType.Money));
                sqlParams.Add(new SqlParameter(PARAM_PROFIT_RATE, SqlDbType.Float));	
				sqlParams.Add(new SqlParameter(PARAM_COMMENTS, SqlDbType.VarChar, 4000));
				sqlParams.Add(new SqlParameter(PARAM_CREATE_USER_ID, SqlDbType.Int));
                sqlParams.Add(new SqlParameter(PARAM_IS_DSD, SqlDbType.Bit));
                sqlParams.Add(new SqlParameter(PARAM_IS_CONTINUATION, SqlDbType.Bit));
							
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
								
				sqlParams[PARAM_PKID].Direction = ParameterDirection.Output;				
				//
				// Define the parameter mappings from the data table in the
				// dataset.
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_CAMPAIGN_ID].SourceColumn = dataDef.FLD_CAMPAIGN_ID;
				sqlParams[PARAM_ORDER_GROUP_ID].SourceColumn = dataDef.FLD_ORDER_GROUP_ID;
				sqlParams[PARAM_SOURCE_ID].SourceColumn = dataDef.FLD_SOURCE_ID;
				sqlParams[PARAM_ORDER_STATUS_ID].SourceColumn = dataDef.FLD_ORDER_STATUS_ID;
				sqlParams[PARAM_STATUS_REASON_ID].SourceColumn = dataDef.FLD_STATUS_REASON_ID;
				sqlParams[PARAM_BILLING_POSTAL_ADDRESS_ID].SourceColumn = dataDef.FLD_BILLING_POSTAL_ADDRESS_ID;
				sqlParams[PARAM_BILLING_PHONE_NUMBER_ID].SourceColumn = dataDef.FLD_BILLING_PHONE_NUMBER_ID;
				sqlParams[PARAM_BILLING_FAX_NUMBER_ID].SourceColumn = dataDef.FLD_BILLING_FAX_NUMBER_ID;
				sqlParams[PARAM_BILLING_EMAIL_ADDRESS_ID].SourceColumn = dataDef.FLD_BILLING_EMAIL_ADDRESS_ID;
				sqlParams[PARAM_CUSTOMER_ID].SourceColumn = dataDef.FLD_CUSTOMER_ID;
                sqlParams[PARAM_CUSTOMER_PO_NUMBER].SourceColumn = dataDef.FLD_CUSTOMER_PO_NUMBER;
				sqlParams[PARAM_INSTALLMENT_PLAN_ID].SourceColumn = dataDef.FLD_INSTALLMENT_PLAN_ID;
				sqlParams[PARAM_FORM_ID].SourceColumn = dataDef.FLD_FORM_ID;
				sqlParams[PARAM_ORDER_TYPE_ID].SourceColumn = dataDef.FLD_ORDER_TYPE_ID;
				sqlParams[PARAM_FM_ID].SourceColumn = dataDef.FLD_FM_ID;
				sqlParams[PARAM_ORDER_DATE].SourceColumn = dataDef.FLD_ORDER_DATE;
				sqlParams[PARAM_ADJ_AMOUNT].SourceColumn = dataDef.FLD_ADJ_AMOUNT;
                sqlParams[PARAM_PROFIT_RATE].SourceColumn = dataDef.FLD_PROFIT_RATE;
				sqlParams[PARAM_COMMENTS].SourceColumn = dataDef.FLD_COMMENTS;	
				sqlParams[PARAM_CREATE_USER_ID].SourceColumn = dataDef.FLD_CREATE_USER_ID;
                sqlParams[PARAM_IS_DSD].SourceColumn = dataDef.FLD_IS_DSD;
                sqlParams[PARAM_IS_CONTINUATION].SourceColumn = dataDef.FLD_IS_CONTINUATION;						
				
				//Don't need to map ErrorCode cause is not imply in the insert
				//Only Mapped DataColumn are imply...
			}
            
			return insertCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetUpdateCommand()
		{
			if ( updateCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				updateCommand = new SqlCommand(SQL_PROC_UPDATE);
				updateCommand.CommandType = CommandType.StoredProcedure;
				
            
				SqlParameterCollection sqlParams = updateCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_CAMPAIGN_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_ORDER_GROUP_ID, SqlDbType.Int));	
				sqlParams.Add(new SqlParameter(PARAM_SOURCE_ID, SqlDbType.Int));	
				sqlParams.Add(new SqlParameter(PARAM_ORDER_STATUS_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_STATUS_REASON_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_BILLING_POSTAL_ADDRESS_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_BILLING_PHONE_NUMBER_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_BILLING_FAX_NUMBER_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_BILLING_EMAIL_ADDRESS_ID, SqlDbType.Int));
                sqlParams.Add(new SqlParameter(PARAM_CUSTOMER_ID, SqlDbType.Int));
                sqlParams.Add(new SqlParameter(PARAM_CUSTOMER_PO_NUMBER, SqlDbType.VarChar, 10));
				sqlParams.Add(new SqlParameter(PARAM_INSTALLMENT_PLAN_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_FORM_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_ORDER_TYPE_ID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_FM_ID, SqlDbType.VarChar, 4));
				sqlParams.Add(new SqlParameter(PARAM_ORDER_DATE, SqlDbType.DateTime));
                sqlParams.Add(new SqlParameter(PARAM_ADJ_AMOUNT, SqlDbType.Money));
                sqlParams.Add(new SqlParameter(PARAM_PROFIT_RATE, SqlDbType.Float));
				sqlParams.Add(new SqlParameter(PARAM_COMMENTS, SqlDbType.VarChar, 4000));
				sqlParams.Add(new SqlParameter(PARAM_DELETED, SqlDbType.Bit));
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));
                sqlParams.Add(new SqlParameter(PARAM_IS_DSD, SqlDbType.Bit));
                sqlParams.Add(new SqlParameter(PARAM_IS_CONTINUATION, SqlDbType.Bit));

				// Define the parameter mappings from the data tabl
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;
				sqlParams[PARAM_CAMPAIGN_ID].SourceColumn = dataDef.FLD_CAMPAIGN_ID;
				sqlParams[PARAM_ORDER_GROUP_ID].SourceColumn = dataDef.FLD_ORDER_GROUP_ID;
				sqlParams[PARAM_SOURCE_ID].SourceColumn = dataDef.FLD_SOURCE_ID;
				sqlParams[PARAM_ORDER_STATUS_ID].SourceColumn = dataDef.FLD_ORDER_STATUS_ID;
				sqlParams[PARAM_STATUS_REASON_ID].SourceColumn = dataDef.FLD_STATUS_REASON_ID;
				sqlParams[PARAM_BILLING_POSTAL_ADDRESS_ID].SourceColumn = dataDef.FLD_BILLING_POSTAL_ADDRESS_ID;
				sqlParams[PARAM_BILLING_PHONE_NUMBER_ID].SourceColumn = dataDef.FLD_BILLING_PHONE_NUMBER_ID;
				sqlParams[PARAM_BILLING_FAX_NUMBER_ID].SourceColumn = dataDef.FLD_BILLING_FAX_NUMBER_ID;
				sqlParams[PARAM_BILLING_EMAIL_ADDRESS_ID].SourceColumn = dataDef.FLD_BILLING_EMAIL_ADDRESS_ID;
                sqlParams[PARAM_CUSTOMER_ID].SourceColumn = dataDef.FLD_CUSTOMER_ID;
                sqlParams[PARAM_CUSTOMER_PO_NUMBER].SourceColumn = dataDef.FLD_CUSTOMER_PO_NUMBER;
				sqlParams[PARAM_INSTALLMENT_PLAN_ID].SourceColumn = dataDef.FLD_INSTALLMENT_PLAN_ID;
				sqlParams[PARAM_FORM_ID].SourceColumn = dataDef.FLD_FORM_ID;
				sqlParams[PARAM_ORDER_TYPE_ID].SourceColumn = dataDef.FLD_ORDER_TYPE_ID;
				sqlParams[PARAM_FM_ID].SourceColumn = dataDef.FLD_FM_ID;
				sqlParams[PARAM_ORDER_DATE].SourceColumn = dataDef.FLD_ORDER_DATE;
                sqlParams[PARAM_ADJ_AMOUNT].SourceColumn = dataDef.FLD_ADJ_AMOUNT;
                sqlParams[PARAM_PROFIT_RATE].SourceColumn = dataDef.FLD_PROFIT_RATE;
				sqlParams[PARAM_COMMENTS].SourceColumn = dataDef.FLD_COMMENTS;	
				sqlParams[PARAM_DELETED].SourceColumn = dataDef.FLD_DELETED;				
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;
                sqlParams[PARAM_IS_DSD].SourceColumn = dataDef.FLD_IS_DSD;
                sqlParams[PARAM_IS_CONTINUATION].SourceColumn = dataDef.FLD_IS_CONTINUATION;						

				//Don't need to map ErrorCode cause is not imply in the insert
				//Only Mapped DataColumn are imply...
			}
            
			return updateCommand;
		}

		//----------------------------------------------------------------
		// Sub BuildUpdateCommand:
		//   Initialize the parameterized Update command for the DataAdapter
		//----------------------------------------------------------------
		protected override SqlCommand GetDeleteCommand()
		{
			if ( deleteCommand == null )
			{
				//
				// Construct the command since we don't have it already
				//
				deleteCommand = new SqlCommand(SQL_PROC_DELETE);
				deleteCommand.CommandType = CommandType.StoredProcedure;
				
				SqlParameterCollection sqlParams = deleteCommand.Parameters;
            
				sqlParams.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int));
				sqlParams.Add(new SqlParameter(PARAM_UPDATE_USER_ID, SqlDbType.Int));
				//
				// Define the parameter mappings from the data tabl
				//
				sqlParams[PARAM_PKID].SourceColumn = dataDef.FLD_PKID;	
				sqlParams[PARAM_UPDATE_USER_ID].SourceColumn = dataDef.FLD_UPDATE_USER_ID;
				//Only Mapped DataColumn are imply...
			}
            
			return deleteCommand;
		}

		protected override string TableName
		{
			get{return dataDef.TBL_ORDERS;}
		}
		
		//We create a new method when we want to the return type variable
		public new dataDef SelectOne(int OrderID)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ONE;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, OrderID));
			
			Select(cmdToExecute,Table);

			return Table;
				
		}

		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ALL;
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			
					
			Select(cmdToExecute,Table);
			return  Table;
			
		}

		public dataDef SelectAllWfm_idLogic(string FMID)
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_order_SelectAllWfm_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FM_ID, SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FMID));
			
					
			Select(cmdToExecute,Table);
			
			return  Table;
			
		}

		public dataDef SelectAllWcampaign_idLogic(int CampaignID)
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_order_SelectAllWcampaign_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_CAMPAIGN_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CampaignID));
					
			Select(cmdToExecute,Table);
			
			return  Table;
			
		}

		public dataDef SelectAllWcampaign_idLogic(int CampaignID, string FMID, int FSM_DisplayMode)
		{
			dataDef Table = new dataDef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_order_SelectAllWcampaign_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_CAMPAIGN_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CampaignID));
			if (FMID.Length > 0)
			{
				cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FM_ID, SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FMID));
				cmdToExecute.Parameters.Add(new SqlParameter("@idisplay_fm_mode", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FSM_DisplayMode));
			}		
			Select(cmdToExecute,Table);
			
			return  Table;
			
		}

		public dataDef SelectAll_Search(int SearchType, String Criteria, string FM_ID, int StatusCategoryID, int ProgramType, string SubdivisionCode, DateTime StartDate, DateTime EndDate, string FMName)
		{
			dataDef Table = new dataDef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_order_SelectAll_Search";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_TYPE, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SearchType));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_SEARCH_CRITERIA, SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Criteria));
			
			if (FM_ID.Length > 0)
				cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FM_ID, SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FM_ID));
            if (FMName.Length > 0)
                cmdToExecute.Parameters.Add(new SqlParameter("@sfm_name", SqlDbType.VarChar, 100, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FMName));
            if (StatusCategoryID > 0)
				cmdToExecute.Parameters.Add(new SqlParameter("@istatus_category_id", SqlDbType.Int,4,ParameterDirection.Input,false,10,0,"",DataRowVersion.Proposed, StatusCategoryID));
			if(ProgramType > 0)
				cmdToExecute.Parameters.Add(new SqlParameter("@iprogram_type_id", SqlDbType.Int,4,ParameterDirection.Input,false,10,0,"",DataRowVersion.Proposed, ProgramType));
			if (SubdivisionCode.Length > 0)
				cmdToExecute.Parameters.Add(new SqlParameter("@ssubdivision_code", SqlDbType.NVarChar, 7, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, SubdivisionCode));
			
			//Mandatory
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_START_DATE, SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, StartDate));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_END_DATE, SqlDbType.DateTime, 8, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, EndDate));
			
			
			
			Select(cmdToExecute,Table);

			return Table;
		}

		public AV_OrderDetailTable SelectAllDetailByOrder(int OrderID)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.AV_SelectAllDetailByOrder";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, OrderID));
			//DataTable toReturn = new DataTable();
			AV_OrderDetailTable toReturn = new AV_OrderDetailTable();
			
			Select(cmdToExecute, toReturn);
			 
			return toReturn;

		}
		public AV_OrderDetailTable SelectAllDetailByAS400Number(string AS400Number)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.AV_SelectAllDetailByAS400Number";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FULF_ORDER_ID, SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, AS400Number));
			//DataTable toReturn = new DataTable();
			AV_OrderDetailTable toReturn = new AV_OrderDetailTable();
			
			Select(cmdToExecute, toReturn);
			
			return toReturn;

		}

		public DataTable SelectAllOrderGroup()
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_order_group_SelectAllWcampaign_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable();
			
			Select(cmdToExecute, toReturn);
			
			return toReturn;

		}

		public DataTable SelectAllOrderGroupWcampaign_idLogic(int CampaignID)
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_order_group_SelectAllWcampaign_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_CAMPAIGN_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CampaignID));
			DataTable toReturn = new DataTable();
			
			Select(cmdToExecute, toReturn);

			return toReturn;

		}

		public DataTable SelectAllOrderGroupWfm_idLogic(string FMID)
		{			
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_order_group_SelectAllWfm_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FM_ID, SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FMID));
			DataTable toReturn = new DataTable();
			
			Select(cmdToExecute, toReturn);

			return toReturn;

		}

		public int CountAllWfm_idLogic(string FMID, int FulfillmentStatusID)
		{
			int toReturn = 0;
			DataTable Table = new DataTable();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_order_CountAllWfm_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FM_ID, SqlDbType.VarChar, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FMID));
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_ORDER_STATUS_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FulfillmentStatusID));
					
			Select(cmdToExecute,Table);

			if (Table.Rows.Count > 0)
				toReturn = Convert.ToInt32(Table.Rows[0][0]);
			
			return  toReturn;
			
		}

		public DateTime SelectLastOrderDateByAccountID(int AccountID)
		{			
			DateTime toReturn = DateTime.MinValue;
			DataTable Table = new DataTable();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_account_get_last_sales_date";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@account_id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, AccountID));
			cmdToExecute.Parameters.Add(new SqlParameter("@lastsalesdate", SqlDbType.DateTime));
					
			ExecuteCmd(cmdToExecute);

			if (cmdToExecute.Parameters["@lastsalesdate"].Value != DBNull.Value)
				toReturn = Convert.ToDateTime(cmdToExecute.Parameters["@lastsalesdate"]);
			
			return  toReturn;			
		}

		public OrderData SelectAllDetail(int ID, bool IncludeAllFormProduct)
		{			
			//This method fill the All Data needed for an organization
			//into a predefined DataSet
			OrderData dts = new OrderData();
			try
			{				
				//Data Object Instanciation
				Data.OrderDetail ordDetailDataAccess = new Data.OrderDetail();
				Data.OrderDetailTax ordTaxDataAccess = new Data.OrderDetailTax();
				Data.Shipment_group shipDataAccess = new Data.Shipment_group();							
				Data.Postal_address_entity postDataAccess = new Data.Postal_address_entity();	
				Data.Phone_number_entity phoneDataAccess = new Data.Phone_number_entity();
				Data.Email_entity emailDataAccess = new Data.Email_entity();

				Data.Document_entity docDataAccess = new Data.Document_entity();
				Data.Entity_exception excDataAccess = new Data.Entity_exception();

				if (_mainConnectionProvider != null)
				{
					// Pass the created ConnectionProvider object to the data-access objects.
					ordDetailDataAccess.MainConnectionProvider = _mainConnectionProvider;
					ordTaxDataAccess.MainConnectionProvider = _mainConnectionProvider;
					shipDataAccess.MainConnectionProvider = _mainConnectionProvider;
					postDataAccess.MainConnectionProvider = _mainConnectionProvider;
					phoneDataAccess.MainConnectionProvider = _mainConnectionProvider;
					emailDataAccess.MainConnectionProvider = _mainConnectionProvider;
					docDataAccess.MainConnectionProvider = _mainConnectionProvider;
					excDataAccess.MainConnectionProvider = _mainConnectionProvider;

				}
			
				dts.Merge(SelectOne(ID));
				if (dts.OrderHeader.Rows.Count > 0)
				{
					DataRow ord = dts.OrderHeader.Rows[0];
					int SupplyOrderID = 0;
					if (!ord.IsNull(OrderHeaderTable.FLD_SUPPLY_ORDER_ID))
					{
						SupplyOrderID = Convert.ToInt32(ord[OrderHeaderTable.FLD_SUPPLY_ORDER_ID]);
					}


					//OrderDetail Items and OrderSupply Items
					int FormID = 0;
					if (dts.OrderHeader.Rows.Count > 0)
					{
						DataRow row = dts.OrderHeader.Rows[0];
						if (!row.IsNull(OrderHeaderTable.FLD_FORM_ID))
							FormID = Convert.ToInt32(row[OrderHeaderTable.FLD_FORM_ID]);
						else
							row[OrderHeaderTable.FLD_FORM_ID] = FormID;
					}

					if ((FormID > 0) && (IncludeAllFormProduct))
					{
						ordDetailDataAccess.SelectAllByOrderID_IncludeAll(dts, ID, FormID);
						//Even there is no Supply Order yet, we go into this method
						//to fill out with all product
						ordDetailDataAccess.SelectAllSupplyByOrderID_IncludeAll(dts, SupplyOrderID, FormID);
					}
					else
					{				
						dts.Merge(ordDetailDataAccess.SelectAllWorder_idLogic(ID));
						OrderDetailTable tblSupply = ordDetailDataAccess.SelectAllSupplyWorder_idLogic(SupplyOrderID);
						if (tblSupply.Rows.Count >0)
						{
							tblSupply.TableName = OrderData.TBL_SUPPLY;
							dts.Merge(tblSupply);
						}
					}

					//OrderDetailTax Items
					dts.Merge(ordTaxDataAccess.SelectAllWorder_idLogic(ID));
	
					//**** BILLING ****
					//Postal Address
					dts.Merge(postDataAccess.SelectWentity_idLogic(EntityType.TYPE_ORDER_BILLING, ID));
			
					//Phone Number
					dts.Merge(phoneDataAccess.SelectWentity_idLogic(EntityType.TYPE_ORDER_BILLING, ID));
			
					//Email Addess
					dts.Merge(emailDataAccess.SelectWentity_idLogic(EntityType.TYPE_ORDER_BILLING, ID));	
			
					int ShipGrpID = 0;
	
					if (dts.OrderDetail.Rows.Count >0)
					{
						DataView dv = new DataView(dts.OrderDetail);
						dv.RowFilter = OrderDetailTable.FLD_PKID + " > 0";
						if (dv.Count >0)
						{
							DataRow firstRow = dv[0].Row;
							if (!firstRow.IsNull(OrderDetailTable.FLD_SHIPMENT_GROUP_ID))
							{
                                ShipGrpID = Convert.ToInt32(firstRow[OrderDetailTable.FLD_SHIPMENT_GROUP_ID].ToString());
								//ShipGrpID  = Convert.ToInt32(dts.OrderDetail.Rows[0][OrderDetailTable.FLD_SHIPMENT_GROUP_ID]);
								//**** SHIPPING ****
								//ShipmentGroup
								//Postal Address
								dts.Merge(postDataAccess.SelectWentity_idLogic(EntityType.TYPE_ORDER_SHIPPING, ShipGrpID));
								//Phone Number
								dts.Merge(phoneDataAccess.SelectWentity_idLogic(EntityType.TYPE_ORDER_SHIPPING, ShipGrpID));
								//Email Addess
								dts.Merge(emailDataAccess.SelectWentity_idLogic(EntityType.TYPE_ORDER_SHIPPING, ShipGrpID));

								dts.Merge(shipDataAccess.SelectOne(ShipGrpID));	
					
							}
						}
				
					}

					//Order Document
					dts.Merge(docDataAccess.SelectAllWentity_idLogic(ID, EntityType.TYPE_ORDER_BILLING));	

					//Order Exception	
					dts.Merge(excDataAccess.SelectAllWentity_idLogic(ID, EntityType.TYPE_ORDER_BILLING));	

					//Treatment for the Supply Shipping Information
					ShipmentGroupTable dTblSuppShipGrp = new ShipmentGroupTable();					
					if (dts.ShipmentGroup.Rows.Count >0)
					{
						DataRow shipRow = dts.ShipmentGroup.Rows[0];
						//Initialize to Null if no supply have been entered
						//We set to all default in case...
						shipRow[ShipmentGroupTable.FLD_SHIP_SUPPLY_TO] = DBNull.Value;
						shipRow[ShipmentGroupTable.FLD_SHIP_SUPPLY_ID] = -1;

						if (!shipRow.IsNull(ShipmentGroupTable.FLD_REQUESTED_DELIVERY_DATE))
							shipRow[ShipmentGroupTable.FLD_SUPPLY_REQUESTED_DELIVERY_DATE] = shipRow[ShipmentGroupTable.FLD_REQUESTED_DELIVERY_DATE];
						else
							shipRow[ShipmentGroupTable.FLD_SUPPLY_REQUESTED_DELIVERY_DATE] = shipRow[ShipmentGroupTable.FLD_SHIPMENT_DATE];

						shipRow[ShipmentGroupTable.FLD_SUPPLY_DELIVERY_NLT] = shipRow[ShipmentGroupTable.FLD_DELIVERY_NLT];
						shipRow.AcceptChanges();
			
						if (dts.OrderSupply.Rows.Count >0)
						{
							DataView dv = new DataView(dts.OrderSupply);
							dv.RowFilter = OrderDetailTable.FLD_PKID + " > 0";
							if (dv.Count >0)
							{
								DataRow firstRow = dv[0].Row;
								if (!firstRow.IsNull(OrderDetailTable.FLD_SHIPMENT_GROUP_ID))
								{
									int suppShipGrpID  = Convert.ToInt32(firstRow[OrderDetailTable.FLD_SHIPMENT_GROUP_ID]);
									//Get the info on the Supply ShipmentGroup
									dTblSuppShipGrp = shipDataAccess.SelectOne(suppShipGrpID);
							
									if (dTblSuppShipGrp.Rows.Count>0)
									{
										DataRow suppShipRow = dTblSuppShipGrp.Rows[0];
										//Supply Delivery Date NLT
										shipRow[ShipmentGroupTable.FLD_SHIP_SUPPLY_ID] = suppShipGrpID;
										
										if (!suppShipRow.IsNull(ShipmentGroupTable.FLD_REQUESTED_DELIVERY_DATE))
											shipRow[ShipmentGroupTable.FLD_SUPPLY_REQUESTED_DELIVERY_DATE] = suppShipRow[ShipmentGroupTable.FLD_REQUESTED_DELIVERY_DATE];
										else
											shipRow[ShipmentGroupTable.FLD_SUPPLY_REQUESTED_DELIVERY_DATE] = suppShipRow[ShipmentGroupTable.FLD_SHIPMENT_DATE];

										shipRow[ShipmentGroupTable.FLD_SUPPLY_DELIVERY_NLT] = suppShipRow[ShipmentGroupTable.FLD_DELIVERY_NLT];
										shipRow[ShipmentGroupTable.FLD_SHIP_SUPPLY_TO] = suppShipRow[ShipmentGroupTable.FLD_SHIP_SUPPLY_TO];
										shipRow.AcceptChanges();

										if (ShipGrpID != suppShipGrpID)
										{
											//********* SUPPLY INFO OF THE SUPPLY ORDER **********//
											//Postal Address
											dts.Merge(postDataAccess.SelectWentity_idLogic(EntityType.TYPE_ORDER_SHIPPING, suppShipGrpID),true, MissingSchemaAction.Add);
											//Phone Number
											dts.Merge(phoneDataAccess.SelectWentity_idLogic(EntityType.TYPE_ORDER_SHIPPING, suppShipGrpID));
											//Email Addess
											dts.Merge(emailDataAccess.SelectWentity_idLogic(EntityType.TYPE_ORDER_SHIPPING, suppShipGrpID));
										}
									}
								}
							}
						}
					}
					
				}			
				//dts.AcceptChanges();			
				//For test
				//			string sExpression = dts.OrderHeader.Columns[OrderHeaderTable.FLD_TOTAL_QTY].Expression;
				//			dts.OrderHeader.Columns[OrderHeaderTable.FLD_TOTAL_QTY].Expression = sExpression;
			}
			catch (Exception ex)
			{
				throw ex;
			}

			return dts;			
		}


		public int GetOrderStatusID(string FulfOrderStatus, int ShipMonth, int ShipDay, int ShipYear)
		{			
			int toReturn = 0;
			SqlCommand	cmdToExecute = new SqlCommand();

			try
			{				
				cmdToExecute.CommandText = "dbo.[GetOrderStatusID]";
				cmdToExecute.CommandType = CommandType.StoredProcedure;
				cmdToExecute.Parameters.Add(new SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, false, ((System.Byte)(10)), ((System.Byte)(0)), "", System.Data.DataRowVersion.Current, null));
				cmdToExecute.Parameters.Add("@OESTAT", SqlDbType.VarChar, 2);
				cmdToExecute.Parameters[1].Value = FulfOrderStatus;
				cmdToExecute.Parameters.Add("@OEMOSH", SqlDbType.Int);
				cmdToExecute.Parameters[2].Value = ShipMonth;
				cmdToExecute.Parameters.Add("@OEDYSH", SqlDbType.Int);
				cmdToExecute.Parameters[3].Value = ShipDay;
				cmdToExecute.Parameters.Add("@OEYRSH", SqlDbType.Int);
				cmdToExecute.Parameters[4].Value = ShipYear;
                cmdToExecute.Parameters.Add("@isNewOrder", SqlDbType.Bit);
                cmdToExecute.Parameters[5].Value = false;
                cmdToExecute.Parameters.Add("@hasSameProfitRate", SqlDbType.Bit);
                cmdToExecute.Parameters[6].Value = true;
				AssignConnection(cmdToExecute);
				cmdToExecute.ExecuteScalar();
				toReturn = Convert.ToInt32(cmdToExecute.Parameters[0].Value);
			}
			catch(Exception ex)
			{
				throw ex;
			}
			finally
			{
				UnassignConnection(cmdToExecute);
			}
			return toReturn;
		}

		public int CountAllWform_idLogic(int form_id)
		{			
			int toReturn = 0;
			DataTable Table = new DataTable();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.pr_order_CountAllWform_idLogic";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FORM_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, form_id));
					
			Select(cmdToExecute,Table);

			if (Table.Rows.Count > 0)
				toReturn = Convert.ToInt32(Table.Rows[0][0]);
			
			return  toReturn;
		}

        public dataDef SelectAllByCampaignAndForm(int CampaignID, int FormID)
        {
            dataDef Table = new dataDef();

            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.pr_order_SelectAllByCampaignAndForm";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            cmdToExecute.Parameters.Add(new SqlParameter(PARAM_CAMPAIGN_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, CampaignID));
            cmdToExecute.Parameters.Add(new SqlParameter(PARAM_FORM_ID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FormID));

            Select(cmdToExecute, Table);

            return Table;
        }

	}
}
