////////////////////////////////////////////////////////////////////////////////////////////
// Class generated by SqlCodeGen 1.1.0.0.
// Do not edit this file directly. Changes will be lost when this file is regenerated.
// Extensions should be added in a separate file using partial classes.
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using NHibernate;
using NHibernate.Criterion;
using NHibernate.Mapping.Attributes;

namespace QSP.Business.Fulfillment
{
    [Serializable]
    [Class(Schema = "`dbo`", Table = "`zip_prefix`")]
    public partial class ZipPrefix
    {
        #region Constants
        public const string ZipPrefixEntity = "ZipPrefix";
        public const string ZipPrefixIDProperty = "ZipPrefixID";
        public const string ZipPrefixTextProperty = "ZipPrefixText";
        public const string SubdivisionCodeProperty = "SubdivisionCode";
        public const string CreateDateProperty = "CreateDate";
        public const string CreateUserIDProperty = "CreateUserID";
        public const string UpdateDateProperty = "UpdateDate";
        public const string UpdateuserIDProperty = "UpdateuserID";
        #endregion

        #region Fields
        protected int zipPrefixID = 0;
        protected string zipPrefixText = "";
        protected string subdivisionCode = "";
        protected DateTime createDate = DateTime.Now;
        protected int createUserID = 0;
        protected DateTime updateDate = DateTime.Now;
        protected int updateuserID = 0;
        #endregion

        #region Constructors
        public ZipPrefix()
        {
        }
        #endregion

        #region Properties
        [RawXml(Content = @"
		<id name=""ZipPrefixID"" column=""`zip_prefix_ID`"">
			<generator class=""native"">
			</generator>
		</id>")]

        public virtual int ZipPrefixID
        {
            get { return this.zipPrefixID; }
            set { this.zipPrefixID = value; }
        }

        [Property(Column = "`zip_prefix`")]
        public virtual string ZipPrefixText
        {
            get { return this.zipPrefixText; }
            set { this.zipPrefixText = value; }
        }

        [Property(Column = "`subdivision_code`")]
        public virtual string SubdivisionCode
        {
            get { return this.subdivisionCode; }
            set { this.subdivisionCode = value; }
        }

        [Property(Column = "`CreateDate`")]
        public virtual DateTime CreateDate
        {
            get { return this.createDate; }
            set { this.createDate = value; }
        }

        [Property(Column = "`CreateUserID`")]
        public virtual int CreateUserID
        {
            get { return this.createUserID; }
            set { this.createUserID = value; }
        }

        [Property(Column = "`UpdateDate`")]
        public virtual DateTime UpdateDate
        {
            get { return this.updateDate; }
            set { this.updateDate = value; }
        }

        [Property(Column = "`UpdateuserID`")]
        public virtual int UpdateuserID
        {
            get { return this.updateuserID; }
            set { this.updateuserID = value; }
        }
        #endregion

        #region Methods

        public static ICriteria CreateCriteria()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(ZipPrefix));
                return c;
            }
        }


        public static ZipPrefix GetZipPrefix(int zipPrefixID)
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                return session.Get<ZipPrefix>(zipPrefixID);
            }
        }

        public static List<ZipPrefix> GetZipPrefixList()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(ZipPrefix));
                return (List<ZipPrefix>)c.List<ZipPrefix>();
            }
        }

        public static List<ZipPrefix> GetZipPrefixList(string sortExpression, int maximumRows, int startRowIndex)
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(ZipPrefix));
                if (sortExpression != null && sortExpression != "")
                {
                    // Get ascending or descending order
                    bool descending = sortExpression.Contains(" DESC");

                    // Strip off ASC or DESC ordering
                    sortExpression = sortExpression.Replace(" ASC", "");
                    sortExpression = sortExpression.Replace(" DESC", "");
                    sortExpression = sortExpression.Trim();

                    // Get multi column sort from the comma delimited string
                    List<String> expressions = new List<String>();
                    if (sortExpression.Contains(","))
                    {
                        string[] tokens = sortExpression.Split(",".ToCharArray());
                        for (int i = 0; i < tokens.Length; i++)
                        {
                            tokens[i] = tokens[i].Trim();
                            if (tokens[i] != "")
                                expressions.Add(tokens[i]);
                        }
                    }
                    else if (sortExpression != "")
                    {
                        expressions.Add(sortExpression);
                    }

                    // Create the order
                    for (int i = 0; i < expressions.Count; i++)
                    {
                        if (descending)
                            c.AddOrder(NHibernate.Criterion.Order.Desc(expressions[i]));
                        else
                            c.AddOrder(NHibernate.Criterion.Order.Asc(expressions[i]));
                    }
                }

                // Set offset and limit
                if (startRowIndex >= 0)
                    c.SetFirstResult(startRowIndex);

                if (maximumRows >= 0)
                    c.SetMaxResults(maximumRows);

                return (List<ZipPrefix>)c.List<ZipPrefix>();
            }
        }

        public static List<ZipPrefix> GetZipPrefixList(string sortExpression)
        {
            return GetZipPrefixList(sortExpression, -1, -1);
        }

        public static List<ZipPrefix> GetZipPrefixList(ICriteria criteria)
        {
            return (List<ZipPrefix>)criteria.List<ZipPrefix>();
        }

        public static void InsertZipPrefix(ZipPrefix obj)
        {
            if (obj != null)
                obj.Insert();
        }

        public static void UpdateZipPrefix(ZipPrefix obj)
        {
            if (obj != null)
                obj.Update();
        }

        public static void DeleteZipPrefix(ZipPrefix obj)
        {
            if (obj != null)
                obj.Delete();
        }

        protected static ZipPrefix PopulateZipPrefix(IDataReader r)
        {
            ZipPrefix obj = new ZipPrefix();
            obj.ZipPrefixID = (int)r["zip_prefix_ID"];
            obj.ZipPrefixText = (string)r["zip_prefix"];
            obj.SubdivisionCode = (string)r["subdivision_code"];
            obj.CreateDate = (DateTime)r["CreateDate"];
            obj.CreateUserID = (int)r["CreateUserID"];
            obj.UpdateDate = (DateTime)r["UpdateDate"];
            obj.UpdateuserID = (int)r["UpdateuserID"];

            return obj;
        }

        public static int GetCount()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(ZipPrefix));
                c.SetProjection(Projections.RowCount());
                return (int)c.UniqueResult();
            }
        }

        /// <summary>
        /// Insert the entity to database.
        /// </summary>
        public virtual void Insert()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ITransaction trans = session.BeginTransaction();
                try
                {
                    session.Save(this);
                    trans.Commit();
                }
                catch
                {
                    trans.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// Update the entity to database.
        /// </summary>
        public virtual void Update()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ITransaction trans = session.BeginTransaction();
                try
                {
                    session.Update(this);
                    trans.Commit();
                }
                catch
                {
                    trans.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// Persist the entity back to database.
        /// </summary>
        public virtual void Save()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ITransaction trans = session.BeginTransaction();
                try
                {
                    session.SaveOrUpdate(this);
                    trans.Commit();
                }
                catch
                {
                    trans.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// Delete entity in database.
        /// </summary>
        public virtual void Delete()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ITransaction trans = session.BeginTransaction();
                try
                {
                    session.Delete(this);
                    trans.Commit();
                }
                catch
                {
                    trans.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// Local implementation of Equals based on unique value members
        /// </summary>
        public override bool Equals(object obj)
        {
            if (this == obj)
                return true;

            if ((obj == null) || (obj.GetType() != this.GetType()))
                return false;

            ZipPrefix castObj = (ZipPrefix)obj;
            return (castObj != null && this.zipPrefixID == castObj.ZipPrefixID);
        }

        /// <summary>
        /// Local implementation of GetHashCode based on unique value members
        /// </summary>
        public override int GetHashCode()
        {
            return 29 * (1 + this.zipPrefixID.GetHashCode());
        }





        #endregion
    }
}
