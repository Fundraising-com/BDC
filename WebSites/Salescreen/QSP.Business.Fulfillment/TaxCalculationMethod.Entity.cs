////////////////////////////////////////////////////////////////////////////////////////////
// Class generated by SqlCodeGen 1.1.0.0.
// Do not edit this file directly. Changes will be lost when this file is regenerated.
// Extensions should be added in a separate file using partial classes.
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using NHibernate;
using NHibernate.Criterion;
using NHibernate.Mapping.Attributes;

namespace QSP.Business.Fulfillment
{
	[Serializable]
	[Class(Schema="`dbo`", Table="`tax_calculation_method`")]
	public partial class TaxCalculationMethod
	{
		#region Constants
        public const string TaxCalculationMethodEntity = "TaxCalculationMethod";
		public const string TaxCalculationMethodIdProperty = "TaxCalculationMethodId";
		public const string SubdivisionCodeProperty = "SubdivisionCode";
		public const string TaxLevelIdProperty = "TaxLevelId";
		public const string ProductTypeIdProperty = "ProductTypeId";
		public const string OrganizationTypeIdProperty = "OrganizationTypeId";
		public const string TaxExemptableProperty = "TaxExemptable";
		public const string MinSalesThresholdProperty = "MinSalesThreshold";
		public const string MinItemThresholdProperty = "MinItemThreshold";
		#endregion

		#region Fields
		protected int taxCalculationMethodId = 0;
		protected string subdivisionCode = "";
		protected int taxLevelId = 0;
		protected int productTypeId = 0;
		protected int organizationTypeId = 0;
		protected bool taxExemptable = false;
		protected decimal? minSalesThreshold = null;
		protected decimal? minItemThreshold = null;
		#endregion

		#region Constructors
		public TaxCalculationMethod() 
		{
		}
		#endregion

		#region Properties
		[RawXml(Content=@"
		<id name=""TaxCalculationMethodId"" column=""`tax_calculation_method_id`"">
			<generator class=""assigned"">
			</generator>
		</id>")]

		public virtual int TaxCalculationMethodId
		{
			get { return this.taxCalculationMethodId; }
			set { this.taxCalculationMethodId = value; }
		}

		[Property(Column="`subdivision_code`")]
		public virtual string SubdivisionCode
		{
			get { return this.subdivisionCode; }
			set { this.subdivisionCode = value; }
		}

		[Property(Column="`tax_level_id`")]
		public virtual int TaxLevelId
		{
			get { return this.taxLevelId; }
			set { this.taxLevelId = value; }
		}

		[Property(Column="`product_type_id`")]
		public virtual int ProductTypeId
		{
			get { return this.productTypeId; }
			set { this.productTypeId = value; }
		}

		[Property(Column="`organization_type_id`")]
		public virtual int OrganizationTypeId
		{
			get { return this.organizationTypeId; }
			set { this.organizationTypeId = value; }
		}

		[Property(Column="`tax_exemptable`")]
		public virtual bool TaxExemptable
		{
			get { return this.taxExemptable; }
			set { this.taxExemptable = value; }
		}

		[Property(Column="`min_sales_threshold`")]
		public virtual decimal? MinSalesThreshold
		{
			get { return this.minSalesThreshold; }
			set { this.minSalesThreshold = value; }
		}

		[Property(Column="`min_item_threshold`")]
		public virtual decimal? MinItemThreshold
		{
			get { return this.minItemThreshold; }
			set { this.minItemThreshold = value; }
		}
		#endregion

		#region Methods

        public static ICriteria CreateCriteria()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(TaxCalculationMethod));
                return c;
            }
        }

        public static List<TaxCalculationMethod> GetTaxCalculationMethodList(ICriteria criteria)
        {
            return (List<TaxCalculationMethod>)criteria.List<TaxCalculationMethod>();
        }

		public static TaxCalculationMethod GetTaxCalculationMethod(int taxCalculationMethodId)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				return session.Get<TaxCalculationMethod>(taxCalculationMethodId);
			}
		}

		public static List<TaxCalculationMethod> GetTaxCalculationMethodList()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(TaxCalculationMethod));
				return (List<TaxCalculationMethod>)c.List<TaxCalculationMethod>();
			}
		}

		public static List<TaxCalculationMethod> GetTaxCalculationMethodList(string sortExpression, int maximumRows, int startRowIndex)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(TaxCalculationMethod));
				if (sortExpression != null && sortExpression != "")
				{
					// Get ascending or descending order
					bool descending = sortExpression.Contains(" DESC");

					// Strip off ASC or DESC ordering
					sortExpression = sortExpression.Replace(" ASC", "");
					sortExpression = sortExpression.Replace(" DESC", "");
					sortExpression = sortExpression.Trim();

					// Get multi column sort from the comma delimited string
					List<String> expressions = new List<String>();
					if (sortExpression.Contains(","))
					{
						string[] tokens = sortExpression.Split(",".ToCharArray());
						for (int i = 0; i < tokens.Length; i++)
						{
							tokens[i] = tokens[i].Trim();
							if (tokens[i] != "")
								expressions.Add(tokens[i]);
						}
					}
					else if (sortExpression != "")
					{
						expressions.Add(sortExpression);
					}

					// Create the order
					for (int i = 0; i < expressions.Count; i++)
					{
						if (descending)
							c.AddOrder(NHibernate.Criterion.Order.Desc(expressions[i]));
						else
							c.AddOrder(NHibernate.Criterion.Order.Asc(expressions[i]));
					}
				}

				// Set offset and limit
				if (startRowIndex >= 0)
					c.SetFirstResult(startRowIndex);

				if (maximumRows >= 0)
					c.SetMaxResults(maximumRows);

				return (List<TaxCalculationMethod>)c.List<TaxCalculationMethod>();
			}
		}

		public static List<TaxCalculationMethod> GetTaxCalculationMethodList(string sortExpression)
		{
			return GetTaxCalculationMethodList(sortExpression, -1, -1);
		}

		public static void InsertTaxCalculationMethod(TaxCalculationMethod obj)
		{
			if (obj != null)
				obj.Insert();
		}

		public static void UpdateTaxCalculationMethod(TaxCalculationMethod obj)
		{
			if (obj != null)
				obj.Update();
		}

		public static void DeleteTaxCalculationMethod(TaxCalculationMethod obj)
		{
			if (obj != null)
				obj.Delete();
		}

        protected static TaxCalculationMethod PopulateTaxCalculationMethod(IDataReader r)
		{
			TaxCalculationMethod obj = new TaxCalculationMethod();
			obj.TaxCalculationMethodId = (int)r["tax_calculation_method_id"];
			obj.SubdivisionCode = (string)r["subdivision_code"];
			obj.TaxLevelId = (int)r["tax_level_id"];
			obj.ProductTypeId = (int)r["product_type_id"];
			obj.OrganizationTypeId = (int)r["organization_type_id"];
			obj.TaxExemptable = (bool)r["tax_exemptable"];
			obj.MinSalesThreshold = (r["min_sales_threshold"] == DBNull.Value) ? null : (decimal?)r["min_sales_threshold"];
			obj.MinItemThreshold = (r["min_item_threshold"] == DBNull.Value) ? null : (decimal?)r["min_item_threshold"];

			return obj;
		}

		public static int GetCount()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(TaxCalculationMethod));
				c.SetProjection(Projections.RowCount());
				return (int) c.UniqueResult();
			}
		}

		/// <summary>
		/// Insert the entity to database.
		/// </summary>
		public virtual void Insert()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Save(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Update the entity to database.
		/// </summary>
		public virtual void Update()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Update(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Delete entity in database.
		/// </summary>
		public virtual void Delete()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Delete(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals(object obj)
		{
			if (this == obj)
				return true;

			if ((obj == null) || (obj.GetType() != this.GetType())) 
				return false;

			TaxCalculationMethod castObj = (TaxCalculationMethod)obj;
			return (castObj != null && this.taxCalculationMethodId == castObj.TaxCalculationMethodId);
		}

		/// <summary>
		/// Local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return 29 * (1 + this.taxCalculationMethodId.GetHashCode());
		}
		#endregion
	}
}
