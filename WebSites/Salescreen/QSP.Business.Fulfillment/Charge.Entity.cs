////////////////////////////////////////////////////////////////////////////////////////////
// Class generated by SqlCodeGen 1.1.0.0.
// Do not edit this file directly. Changes will be lost when this file is regenerated.
// Extensions should be added in a separate file using partial classes.
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using NHibernate;
using NHibernate.Criterion;
using NHibernate.Mapping.Attributes;

namespace QSP.Business.Fulfillment
{
    [Serializable]
    [Class(Schema = "`dbo`", Table = "`charge`")]
    public partial class Charge
    {
        #region Constants
        public const string ChargeEntity = "Charge";
        public const string ChargeIdProperty = "ChargeId";
        public const string NameProperty = "Name";
        public const string DefaultAmountProperty = "DefaultAmount";
        public const string IsCreditProperty = "IsCredit";
        public const string IsDisabledProperty = "IsDisabled";
        public const string CreateDateProperty = "CreateDate";
        public const string CreateUserIdProperty = "CreateUserId";
        public const string UpdateDateProperty = "UpdateDate";
        public const string UpdateUserIdProperty = "UpdateUserId";
        #endregion

        #region Fields
        protected int chargeId = 0;
        protected string name = "";
        protected decimal? defaultAmount = null;
        protected bool isCredit = false;
        protected bool isDisabled = false;
        protected DateTime createDate = DateTime.Now;
        protected int createUserId = 0;
        protected DateTime? updateDate = null;
        protected int? updateUserId = null;
        #endregion

        #region Constructors
        public Charge()
        {
        }
        #endregion

        #region Properties
        [RawXml(Content = @"
		<id name=""ChargeId"" column=""`charge_id`"">
			<generator class=""assigned"">
			</generator>
		</id>")]

        public virtual int ChargeId
        {
            get { return this.chargeId; }
            set { this.chargeId = value; }
        }

        [Property(Column = "`name`")]
        public virtual string Name
        {
            get { return this.name; }
            set { this.name = value; }
        }

        [Property(Column = "`default_amount`")]
        public virtual decimal? DefaultAmount
        {
            get { return this.defaultAmount; }
            set { this.defaultAmount = value; }
        }

        [Property(Column = "`is_credit`")]
        public virtual bool IsCredit
        {
            get { return this.isCredit; }
            set { this.isCredit = value; }
        }

        [Property(Column = "`is_disabled`")]
        public virtual bool IsDisabled
        {
            get { return this.isDisabled; }
            set { this.isDisabled = value; }
        }

        [Property(Column = "`create_date`")]
        public virtual DateTime CreateDate
        {
            get { return this.createDate; }
            set { this.createDate = value; }
        }

        [Property(Column = "`create_user_id`")]
        public virtual int CreateUserId
        {
            get { return this.createUserId; }
            set { this.createUserId = value; }
        }

        [Property(Column = "`update_date`")]
        public virtual DateTime? UpdateDate
        {
            get { return this.updateDate; }
            set { this.updateDate = value; }
        }

        [Property(Column = "`update_user_id`")]
        public virtual int? UpdateUserId
        {
            get { return this.updateUserId; }
            set { this.updateUserId = value; }
        }
        #endregion

        #region Methods
        public static Charge GetCharge(int chargeId)
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                return session.Get<Charge>(chargeId);
            }
        }

        public static List<Charge> GetChargeList(ICriteria criteria)
        {
            return (List<Charge>)criteria.List<Charge>();
        }

        public static List<Charge> GetChargeList()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(Charge));
                return (List<Charge>)c.List<Charge>();
            }
        }

        public static List<Charge> GetChargeList(string sortExpression, int maximumRows, int startRowIndex)
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(Charge));
                if (sortExpression != null && sortExpression != "")
                {
                    // Get ascending or descending order
                    bool descending = sortExpression.Contains(" DESC");

                    // Strip off ASC or DESC ordering
                    sortExpression = sortExpression.Replace(" ASC", "");
                    sortExpression = sortExpression.Replace(" DESC", "");
                    sortExpression = sortExpression.Trim();

                    // Get multi column sort from the comma delimited string
                    List<String> expressions = new List<String>();
                    if (sortExpression.Contains(","))
                    {
                        string[] tokens = sortExpression.Split(",".ToCharArray());
                        for (int i = 0; i < tokens.Length; i++)
                        {
                            tokens[i] = tokens[i].Trim();
                            if (tokens[i] != "")
                                expressions.Add(tokens[i]);
                        }
                    }
                    else if (sortExpression != "")
                    {
                        expressions.Add(sortExpression);
                    }

                    // Create the order
                    for (int i = 0; i < expressions.Count; i++)
                    {
                        if (descending)
                            c.AddOrder(NHibernate.Criterion.Order.Desc(expressions[i]));
                        else
                            c.AddOrder(NHibernate.Criterion.Order.Asc(expressions[i]));
                    }
                }

                // Set offset and limit
                if (startRowIndex >= 0)
                    c.SetFirstResult(startRowIndex);

                if (maximumRows >= 0)
                    c.SetMaxResults(maximumRows);

                return (List<Charge>)c.List<Charge>();
            }
        }

        public static List<Charge> GetChargeList(string sortExpression)
        {
            return GetChargeList(sortExpression, -1, -1);
        }

        protected static Charge PopulateCharge(IDataReader r)
        {
            Charge obj = new Charge();
            obj.ChargeId = (int)r["charge_id"];
            obj.Name = (string)r["name"];
            obj.DefaultAmount = (r["default_amount"] == DBNull.Value) ? null : (decimal?)r["default_amount"];
            obj.IsCredit = (bool)r["is_credit"];
            obj.IsDisabled = (bool)r["is_disabled"];
            obj.CreateDate = (DateTime)r["create_date"];
            obj.CreateUserId = (int)r["create_user_id"];
            obj.UpdateDate = (r["update_date"] == DBNull.Value) ? null : (DateTime?)r["update_date"];
            obj.UpdateUserId = (r["update_user_id"] == DBNull.Value) ? null : (int?)r["update_user_id"];

            return obj;
        }

        public static int GetCount()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(Charge));
                c.SetProjection(Projections.RowCount());
                return (int)c.UniqueResult();
            }
        }

        /// <summary>
        /// Local implementation of Equals based on unique value members
        /// </summary>
        public override bool Equals(object obj)
        {
            if (this == obj)
                return true;

            if ((obj == null) || (obj.GetType() != this.GetType()))
                return false;

            Charge castObj = (Charge)obj;
            return (castObj != null && this.chargeId == castObj.ChargeId);
        }

        /// <summary>
        /// Local implementation of GetHashCode based on unique value members
        /// </summary>
        public override int GetHashCode()
        {
            return 29 * (1 + this.chargeId.GetHashCode());
        }
        #endregion
    }
}