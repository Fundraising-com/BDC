////////////////////////////////////////////////////////////////////////////////////////////
// Class generated by SqlCodeGen 1.1.0.0.
// Do not edit this file directly. Changes will be lost when this file is regenerated.
// Extensions should be added in a separate file using partial classes.
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using NHibernate;
using NHibernate.Criterion;
using NHibernate.Mapping.Attributes;

namespace QSP.Business.Fulfillment
{
	[Serializable]
	[Class(Schema="`dbo`", Table="`catalog_item_category`")]
	public partial class CatalogItemCategory
	{
		#region Constants
        public const string CatalogItemCategoryEntity = "CatalogItemCategory";
		public const string CatalogItemCategoryIdProperty = "CatalogItemCategoryId";
		public const string CatalogIdProperty = "CatalogId";
		public const string ParentCatalogItemCategoryIdProperty = "ParentCatalogItemCategoryId";
		public const string CatalogItemCategoryNameProperty = "CatalogItemCategoryName";
		public const string DeletedProperty = "Deleted";
		public const string CreateDateProperty = "CreateDate";
		public const string CreateUserIdProperty = "CreateUserId";
		public const string UpdateDateProperty = "UpdateDate";
		public const string UpdateUserIdProperty = "UpdateUserId";
		#endregion

		#region Fields
		protected int catalogItemCategoryId = 0;
		protected int catalogId = 0;
		protected int? parentCatalogItemCategoryId = null;
		protected string catalogItemCategoryName = "";
		protected bool deleted = false;
		protected DateTime createDate = DateTime.Now;
		protected int createUserId = 0;
		protected DateTime? updateDate = DateTime.Now;
		protected int? updateUserId = null;
		#endregion

		#region Constructors
		public CatalogItemCategory() 
		{
		}
		#endregion

		#region Properties
		[RawXml(Content=@"
		<id name=""CatalogItemCategoryId"" column=""`catalog_item_category_id`"">
			<generator class=""native"">
			</generator>
		</id>")]

		public virtual int CatalogItemCategoryId
		{
			get { return this.catalogItemCategoryId; }
			set { this.catalogItemCategoryId = value; }
		}

		[Property(Column="`catalog_id`")]
		public virtual int CatalogId
		{
			get { return this.catalogId; }
			set { this.catalogId = value; }
		}

		[Property(Column="`parent_catalog_item_category_id`")]
		public virtual int? ParentCatalogItemCategoryId
		{
			get { return this.parentCatalogItemCategoryId; }
			set { this.parentCatalogItemCategoryId = value; }
		}

		[Property(Column="`catalog_item_category_name`")]
		public virtual string CatalogItemCategoryName
		{
			get { return this.catalogItemCategoryName; }
			set { this.catalogItemCategoryName = value; }
		}

		[Property(Column="`deleted`")]
		public virtual bool Deleted
		{
			get { return this.deleted; }
			set { this.deleted = value; }
		}

		[Property(Column="`create_date`")]
		public virtual DateTime CreateDate
		{
			get { return this.createDate; }
			set { this.createDate = value; }
		}

		[Property(Column="`create_user_id`")]
		public virtual int CreateUserId
		{
			get { return this.createUserId; }
			set { this.createUserId = value; }
		}

		[Property(Column="`update_date`")]
		public virtual DateTime? UpdateDate
		{
			get { return this.updateDate; }
			set { this.updateDate = value; }
		}

		[Property(Column="`update_user_id`")]
		public virtual int? UpdateUserId
		{
			get { return this.updateUserId; }
			set { this.updateUserId = value; }
		}
		#endregion

		#region Methods

        public static ICriteria CreateCriteria()
        {
            ISession session = SqlSessionManager.OpenSession();
            ICriteria c = session.CreateCriteria(typeof(CatalogItemCategory));
            return c;
        }

        public static List<CatalogItemCategory> GetCatalogItemCategoryList(ICriteria criteria)
        {
            return (List<CatalogItemCategory>)criteria.List<CatalogItemCategory>();
        }

		public static CatalogItemCategory GetCatalogItemCategory(int catalogItemCategoryId)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				return session.Get<CatalogItemCategory>(catalogItemCategoryId);
			}
		}

		public static List<CatalogItemCategory> GetCatalogItemCategoryList()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(CatalogItemCategory));
				return (List<CatalogItemCategory>)c.List<CatalogItemCategory>();
			}
		}

		public static List<CatalogItemCategory> GetCatalogItemCategoryList(string sortExpression, int maximumRows, int startRowIndex)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(CatalogItemCategory));
				if (sortExpression != null && sortExpression != "")
				{
					// Get ascending or descending order
					bool descending = sortExpression.Contains(" DESC");

					// Strip off ASC or DESC ordering
					sortExpression = sortExpression.Replace(" ASC", "");
					sortExpression = sortExpression.Replace(" DESC", "");
					sortExpression = sortExpression.Trim();

					// Get multi column sort from the comma delimited string
					List<String> expressions = new List<String>();
					if (sortExpression.Contains(","))
					{
						string[] tokens = sortExpression.Split(",".ToCharArray());
						for (int i = 0; i < tokens.Length; i++)
						{
							tokens[i] = tokens[i].Trim();
							if (tokens[i] != "")
								expressions.Add(tokens[i]);
						}
					}
					else if (sortExpression != "")
					{
						expressions.Add(sortExpression);
					}

					// Create the order
					for (int i = 0; i < expressions.Count; i++)
					{
						if (descending)
							c.AddOrder(NHibernate.Criterion.Order.Desc(expressions[i]));
						else
							c.AddOrder(NHibernate.Criterion.Order.Asc(expressions[i]));
					}
				}

				// Set offset and limit
				if (startRowIndex >= 0)
					c.SetFirstResult(startRowIndex);

				if (maximumRows >= 0)
					c.SetMaxResults(maximumRows);

				return (List<CatalogItemCategory>)c.List<CatalogItemCategory>();
			}
		}

		public static List<CatalogItemCategory> GetCatalogItemCategoryList(string sortExpression)
		{
			return GetCatalogItemCategoryList(sortExpression, -1, -1);
		}

		public static void InsertCatalogItemCategory(CatalogItemCategory obj)
		{
			if (obj != null)
				obj.Insert();
		}

		public static void UpdateCatalogItemCategory(CatalogItemCategory obj)
		{
			if (obj != null)
				obj.Update();
		}

		public static void DeleteCatalogItemCategory(CatalogItemCategory obj)
		{
			if (obj != null)
				obj.Delete();
		}

        protected static CatalogItemCategory PopulateCatalogItemCategory(IDataReader r)
		{
			CatalogItemCategory obj = new CatalogItemCategory();
			obj.CatalogItemCategoryId = (int)r["catalog_item_category_id"];
			obj.CatalogId = (int)r["catalog_id"];
			obj.ParentCatalogItemCategoryId = (r["parent_catalog_item_category_id"] == DBNull.Value) ? null : (int?)r["parent_catalog_item_category_id"];
			obj.CatalogItemCategoryName = (string)r["catalog_item_category_name"];
			obj.Deleted = (bool)r["deleted"];
			obj.CreateDate = (DateTime)r["create_date"];
			obj.CreateUserId = (int)r["create_user_id"];
			obj.UpdateDate = (r["update_date"] == DBNull.Value) ? null : (DateTime?)r["update_date"];
			obj.UpdateUserId = (r["update_user_id"] == DBNull.Value) ? null : (int?)r["update_user_id"];

			return obj;
		}

		public static int GetCount()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(CatalogItemCategory));
				c.SetProjection(Projections.RowCount());
				return (int) c.UniqueResult();
			}
		}

		/// <summary>
		/// Insert the entity to database.
		/// </summary>
		public virtual void Insert()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Save(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Update the entity to database.
		/// </summary>
		public virtual void Update()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Update(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Persist the entity back to database.
		/// </summary>
		public virtual void Save()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.SaveOrUpdate(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Delete entity in database.
		/// </summary>
		public virtual void Delete()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Delete(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals(object obj)
		{
			if (this == obj)
				return true;

			if ((obj == null) || (obj.GetType() != this.GetType())) 
				return false;

			CatalogItemCategory castObj = (CatalogItemCategory)obj;
			return (castObj != null && this.catalogItemCategoryId == castObj.CatalogItemCategoryId);
		}

		/// <summary>
		/// Local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return 29 * (1 + this.catalogItemCategoryId.GetHashCode());
		}
		#endregion
	}
}
