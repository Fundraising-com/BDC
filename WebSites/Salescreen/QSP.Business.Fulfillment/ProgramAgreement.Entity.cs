////////////////////////////////////////////////////////////////////////////////////////////
// Class generated by SqlCodeGen 1.1.0.0.
// Do not edit this file directly. Changes will be lost when this file is regenerated.
// Extensions should be added in a separate file using partial classes.
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using NHibernate;
using NHibernate.Criterion;
using NHibernate.Mapping.Attributes;

namespace QSP.Business.Fulfillment
{
    [Serializable]
    [Class(Schema = "`dbo`", Table = "`program_agreement`")]
    public partial class ProgramAgreement
    {
        #region Constants
        public const string ProgramAgreementEntity = "ProgramAgreement";
        public const string ProgramAgreementIdProperty = "ProgramAgreementId";
        public const string FulfProgramAgreementIdProperty = "FulfProgramAgreementId";
        public const string FormIdProperty = "FormId";
        public const string ProgramAgreementStatusIdProperty = "ProgramAgreementStatusId";
        public const string TaxExemptionNumberProperty = "TaxExemptionNumber";
        public const string TaxExemptionExpirationDateProperty = "TaxExemptionExpirationDate";
        public const string StartDateProperty = "StartDate";
        public const string EndDaateProperty = "EndDate";
        public const string HolidayStartDateProperty = "HolidayStartDate";
        public const string HolidayEndDateProperty = "HolidayEndDate";
        public const string EnrollmentProperty = "Enrollment";
        public const string GoalEstimatedGrossProperty = "GoalEstimatedGross";
        public const string RenewalSignUpTermProperty = "RenewalSignUpTerm";
        public const string ProfitRateProperty = "ProfitRate";
        public const string PricedProperty = "Priced";
        public const string CommentsProperty = "Comments";
        public const string DeletedProperty = "Deleted";
        public const string CreateDateProperty = "CreateDate";
        public const string CreateUserIdProperty = "CreateUserId";
        public const string UpdateUserIdProperty = "UpdateUserId";
        public const string UpdateDateProperty = "UpdateDate";
        #endregion

        #region Fields
        protected int programAgreementId = 0;
        protected string fulfProgramAgreementId = null;
        protected int? formId = null;
        protected int programAgreementStatusId = 0;
        protected string taxExemptionNumber = null;
        protected DateTime? taxExemptionExpirationDate = null;
        protected DateTime startDate = DateTime.Now;
        protected DateTime endDate = DateTime.Now;
        protected DateTime? holidayStartDate = null;
        protected DateTime? holidayEndDate = null;
        protected int enrollment = 0;
        protected decimal goalEstimatedGross = 0;
        protected int renewalSignUpTerm = 0;
        protected decimal profitRate = 0;
        protected bool priced = false;
        protected string comments = null;
        protected bool deleted = false;
        protected DateTime createDate = DateTime.Now;
        protected int createUserId = 0;
        protected int? updateUserId = null;
        protected DateTime? updateDate = DateTime.Now;
        #endregion

        #region Constructors
        public ProgramAgreement()
        {
        }
        #endregion

        #region Properties
        [RawXml(Content = @"
		<id name=""ProgramAgreementId"" column=""`program_agreement_id`"">
			<generator class=""native"">
			</generator>
		</id>")]

        public virtual int ProgramAgreementId
        {
            get { return this.programAgreementId; }
            set { this.programAgreementId = value; }
        }

        [Property(Column = "`fulf_program_agreement_id`")]
        public virtual string FulfProgramAgreementId
        {
            get { return this.fulfProgramAgreementId; }
            set { this.fulfProgramAgreementId = value; }
        }

        [Property(Column = "`form_id`")]
        public virtual int? FormId
        {
            get { return this.formId; }
            set { this.formId = value; }
        }

        [Property(Column = "`program_agreement_status_id`")]
        public virtual int ProgramAgreementStatusId
        {
            get { return this.programAgreementStatusId; }
            set { this.programAgreementStatusId = value; }
        }

        [Property(Column = "`tax_exemption_number`")]
        public virtual string TaxExemptionNumber
        {
            get { return this.taxExemptionNumber; }
            set { this.taxExemptionNumber = value; }
        }

        [Property(Column = "`tax_exemption_expiration_date`")]
        public virtual DateTime? TaxExemptionExpirationDate
        {
            get { return this.taxExemptionExpirationDate; }
            set { this.taxExemptionExpirationDate = value; }
        }

        [Property(Column = "`start_date`")]
        public virtual DateTime StartDate
        {
            get { return this.startDate; }
            set { this.startDate = value; }
        }

        [Property(Column = "`end_date`")]
        public virtual DateTime EndDate
        {
            get { return this.endDate; }
            set { this.endDate = value; }
        }

        [Property(Column = "`holiday_start_date`")]
        public virtual DateTime? HolidayStartDate
        {
            get { return this.holidayStartDate; }
            set { this.holidayStartDate = value; }
        }

        [Property(Column = "`holiday_end_date`")]
        public virtual DateTime? HolidayEndDate
        {
            get { return this.holidayEndDate; }
            set { this.holidayEndDate = value; }
        }

        [Property(Column = "`enrollment`")]
        public virtual int Enrollment
        {
            get { return this.enrollment; }
            set { this.enrollment = value; }
        }

        [Property(Column = "`goal_estimated_gross`")]
        public virtual decimal GoalEstimatedGross
        {
            get { return this.goalEstimatedGross; }
            set { this.goalEstimatedGross = value; }
        }

        [Property(Column = "`renewal_sign_up_term`")]
        public virtual int RenewalSignUpTerm
        {
            get { return this.renewalSignUpTerm; }
            set { this.renewalSignUpTerm = value; }
        }

        [Property(Column = "`profit_rate`")]
        public virtual decimal ProfitRate
        {
            get { return this.profitRate; }
            set { this.profitRate = value; }
        }

        [Property(Column = "`priced`")]
        public virtual bool Priced
        {
            get { return this.priced; }
            set { this.priced = value; }
        }

        [Property(Column = "`comments`")]
        public virtual string Comments
        {
            get { return this.comments; }
            set { this.comments = value; }
        }

        [Property(Column = "`deleted`")]
        public virtual bool Deleted
        {
            get { return this.deleted; }
            set { this.deleted = value; }
        }

        [Property(Column = "`create_date`")]
        public virtual DateTime CreateDate
        {
            get { return this.createDate; }
            set { this.createDate = value; }
        }

        [Property(Column = "`create_user_id`")]
        public virtual int CreateUserId
        {
            get { return this.createUserId; }
            set { this.createUserId = value; }
        }

        [Property(Column = "`update_user_id`")]
        public virtual int? UpdateUserId
        {
            get { return this.updateUserId; }
            set { this.updateUserId = value; }
        }

        [Property(Column = "`update_date`")]
        public virtual DateTime? UpdateDate
        {
            get { return this.updateDate; }
            set { this.updateDate = value; }
        }
        #endregion

        #region Methods
        public static ProgramAgreement GetProgramAgreement(int programAgreementId)
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                return session.Get<ProgramAgreement>(programAgreementId);
            }
        }

        public static List<ProgramAgreement> GetProgramAgreementList(ICriteria criteria)
        {
            return (List<ProgramAgreement>)criteria.List<ProgramAgreement>();
        }

        public static List<ProgramAgreement> GetProgramAgreementList()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(ProgramAgreement));
                return (List<ProgramAgreement>)c.List<ProgramAgreement>();
            }
        }

        public static List<ProgramAgreement> GetProgramAgreementList(string sortExpression, int maximumRows, int startRowIndex)
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(ProgramAgreement));
                if (sortExpression != null && sortExpression != "")
                {
                    // Get ascending or descending order
                    bool descending = sortExpression.Contains(" DESC");

                    // Strip off ASC or DESC ordering
                    sortExpression = sortExpression.Replace(" ASC", "");
                    sortExpression = sortExpression.Replace(" DESC", "");
                    sortExpression = sortExpression.Trim();

                    // Get multi column sort from the comma delimited string
                    List<String> expressions = new List<String>();
                    if (sortExpression.Contains(","))
                    {
                        string[] tokens = sortExpression.Split(",".ToCharArray());
                        for (int i = 0; i < tokens.Length; i++)
                        {
                            tokens[i] = tokens[i].Trim();
                            if (tokens[i] != "")
                                expressions.Add(tokens[i]);
                        }
                    }
                    else if (sortExpression != "")
                    {
                        expressions.Add(sortExpression);
                    }

                    // Create the order
                    for (int i = 0; i < expressions.Count; i++)
                    {
                        if (descending)
                            c.AddOrder(NHibernate.Criterion.Order.Desc(expressions[i]));
                        else
                            c.AddOrder(NHibernate.Criterion.Order.Asc(expressions[i]));
                    }
                }

                // Set offset and limit
                if (startRowIndex >= 0)
                    c.SetFirstResult(startRowIndex);

                if (maximumRows >= 0)
                    c.SetMaxResults(maximumRows);

                return (List<ProgramAgreement>)c.List<ProgramAgreement>();
            }
        }

        public static List<ProgramAgreement> GetProgramAgreementList(string sortExpression)
        {
            return GetProgramAgreementList(sortExpression, -1, -1);
        }

        public static void InsertProgramAgreement(ProgramAgreement obj)
        {
            if (obj != null)
                obj.Insert();
        }

        public static void UpdateProgramAgreement(ProgramAgreement obj)
        {
            if (obj != null)
                obj.Update();
        }

        public static void DeleteProgramAgreement(ProgramAgreement obj)
        {
            if (obj != null)
                obj.Delete();
        }

        protected static ProgramAgreement PopulateProgramAgreement(IDataReader r)
        {
            ProgramAgreement obj = new ProgramAgreement();
            obj.ProgramAgreementId = (int)r["program_agreement_id"];
            obj.FulfProgramAgreementId = (r["fulf_program_agreement_id"] == DBNull.Value) ? null : (string)r["fulf_program_agreement_id"];
            obj.FormId = (r["form_id"] == DBNull.Value) ? null : (int?)r["form_id"];
            obj.ProgramAgreementStatusId = (int)r["program_agreement_status_id"];
            obj.TaxExemptionNumber = (r["tax_exemption_number"] == DBNull.Value) ? null : (string)r["tax_exemption_number"];
            obj.TaxExemptionExpirationDate = (r["tax_exemption_expiration_date"] == DBNull.Value) ? null : (DateTime?)r["tax_exemption_expiration_date"];
            obj.StartDate = (DateTime)r["start_date"];
            obj.EndDate = (DateTime)r["end_date"];
            obj.HolidayStartDate = (r["holiday_start_date"] == DBNull.Value) ? null : (DateTime?)r["holiday_start_date"];
            obj.HolidayEndDate = (r["holiday_end_date"] == DBNull.Value) ? null : (DateTime?)r["holiday_end_date"];
            obj.Enrollment = (int)r["enrollment"];
            obj.GoalEstimatedGross = (decimal)r["goal_estimated_gross"];
            obj.RenewalSignUpTerm = (int)r["renewal_sign_up_term"];
            obj.ProfitRate = (decimal)r["profit_rate"];
            obj.Priced = (bool)r["priced"];
            obj.Comments = (r["comments"] == DBNull.Value) ? null : (string)r["comments"];
            obj.Deleted = (bool)r["deleted"];
            obj.CreateDate = (DateTime)r["create_date"];
            obj.CreateUserId = (int)r["create_user_id"];
            obj.UpdateUserId = (r["update_user_id"] == DBNull.Value) ? null : (int?)r["update_user_id"];
            obj.UpdateDate = (r["update_date"] == DBNull.Value) ? null : (DateTime?)r["update_date"];

            return obj;
        }

        public static int GetCount()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(ProgramAgreement));
                c.SetProjection(Projections.RowCount());
                return (int)c.UniqueResult();
            }
        }

        /// <summary>
        /// Insert the entity to database.
        /// </summary>
        public virtual void Insert()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ITransaction trans = session.BeginTransaction();
                try
                {
                    session.Save(this);
                    trans.Commit();
                }
                catch
                {
                    trans.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// Update the entity to database.
        /// </summary>
        public virtual void Update()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ITransaction trans = session.BeginTransaction();
                try
                {
                    session.Update(this);
                    trans.Commit();
                }
                catch
                {
                    trans.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// Persist the entity back to database.
        /// </summary>
        public virtual void Save()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ITransaction trans = session.BeginTransaction();
                try
                {
                    session.SaveOrUpdate(this);
                    trans.Commit();
                }
                catch
                {
                    trans.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// Delete entity in database.
        /// </summary>
        public virtual void Delete()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ITransaction trans = session.BeginTransaction();
                try
                {
                    session.Delete(this);
                    trans.Commit();
                }
                catch
                {
                    trans.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// Local implementation of Equals based on unique value members
        /// </summary>
        public override bool Equals(object obj)
        {
            if (this == obj)
                return true;

            if ((obj == null) || (obj.GetType() != this.GetType()))
                return false;

            ProgramAgreement castObj = (ProgramAgreement)obj;
            return (castObj != null && this.programAgreementId == castObj.ProgramAgreementId);
        }

        /// <summary>
        /// Local implementation of GetHashCode based on unique value members
        /// </summary>
        public override int GetHashCode()
        {
            return 29 * (1 + this.programAgreementId.GetHashCode());
        }
        #endregion
    }
}