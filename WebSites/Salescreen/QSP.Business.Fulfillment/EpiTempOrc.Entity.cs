////////////////////////////////////////////////////////////////////////////////////////////
// Class generated by SqlCodeGen 1.1.0.0.
// Do not edit this file directly. Changes will be lost when this file is regenerated.
// Extensions should be added in a separate file using partial classes.
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using NHibernate;
using NHibernate.Criterion;
using NHibernate.Mapping.Attributes;

namespace QSP.Business.Fulfillment
{
	[Serializable]
	[Class(Schema="`dbo`", Table="`epi_temp_orc`")]
	public partial class EpiTempOrc
	{
		#region Constants
        public const string EpiTempOrcEntity = "EpiTempOrc";
		public const string EpiTempOrcIdProperty = "EpiTempOrcId";
		public const string SfAccountNumberProperty = "SfAccountNumber";
		public const string QspAccountNumberProperty = "QspAccountNumber";
		public const string AccountNameProperty = "AccountName";
		public const string CityProperty = "City";
		public const string StateProperty = "State";
		public const string ZipProperty = "Zip";
		public const string FmFirstNameProperty = "FmFirstName";
		public const string FmLastNameProperty = "FmLastName";
		public const string FmIdProperty = "FmId";
		public const string DateRecievedProperty = "DateRecieved";
		public const string EdsBatchNumberProperty = "EdsBatchNumber";
		public const string NumberOfFormsProperty = "NumberOfForms";
		public const string NumberOfOrdersProperty = "NumberOfOrders";
		public const string EpiConfirmationNumberProperty = "EpiConfirmationNumber";
		#endregion

		#region Fields
		protected int epiTempOrcId = 0;
		protected string sfAccountNumber = null;
		protected string qspAccountNumber = null;
		protected string accountName = null;
		protected string city = null;
		protected string state = null;
		protected string zip = null;
		protected string fmFirstName = null;
		protected string fmLastName = null;
		protected string fmId = null;
		protected string dateRecieved = null;
		protected string edsBatchNumber = null;
		protected int? numberOfForms = null;
		protected int? numberOfOrders = null;
		protected string epiConfirmationNumber = null;
		#endregion

		#region Constructors
		public EpiTempOrc() 
		{
		}
		#endregion

		#region Properties
		[RawXml(Content=@"
		<id name=""EpiTempOrcId"" column=""`epi_temp_orc_id`"">
			<generator class=""native"">
			</generator>
		</id>")]

		public virtual int EpiTempOrcId
		{
			get { return this.epiTempOrcId; }
			set { this.epiTempOrcId = value; }
		}

		[Property(Column="`sf_account_number`")]
		public virtual string SfAccountNumber
		{
			get { return this.sfAccountNumber; }
			set { this.sfAccountNumber = value; }
		}

		[Property(Column="`qsp_account_number`")]
		public virtual string QspAccountNumber
		{
			get { return this.qspAccountNumber; }
			set { this.qspAccountNumber = value; }
		}

		[Property(Column="`account_name`")]
		public virtual string AccountName
		{
			get { return this.accountName; }
			set { this.accountName = value; }
		}

		[Property(Column="`city`")]
		public virtual string City
		{
			get { return this.city; }
			set { this.city = value; }
		}

		[Property(Column="`state`")]
		public virtual string State
		{
			get { return this.state; }
			set { this.state = value; }
		}

		[Property(Column="`zip`")]
		public virtual string Zip
		{
			get { return this.zip; }
			set { this.zip = value; }
		}

		[Property(Column="`fm_first_name`")]
		public virtual string FmFirstName
		{
			get { return this.fmFirstName; }
			set { this.fmFirstName = value; }
		}

		[Property(Column="`fm_last_name`")]
		public virtual string FmLastName
		{
			get { return this.fmLastName; }
			set { this.fmLastName = value; }
		}

		[Property(Column="`fm_id`")]
		public virtual string FmId
		{
			get { return this.fmId; }
			set { this.fmId = value; }
		}

		[Property(Column="`date_recieved`")]
		public virtual string DateRecieved
		{
			get { return this.dateRecieved; }
			set { this.dateRecieved = value; }
		}

		[Property(Column="`eds_batch_number`")]
		public virtual string EdsBatchNumber
		{
			get { return this.edsBatchNumber; }
			set { this.edsBatchNumber = value; }
		}

		[Property(Column="`number_of_forms`")]
		public virtual int? NumberOfForms
		{
			get { return this.numberOfForms; }
			set { this.numberOfForms = value; }
		}

		[Property(Column="`number_of_orders`")]
		public virtual int? NumberOfOrders
		{
			get { return this.numberOfOrders; }
			set { this.numberOfOrders = value; }
		}

		[Property(Column="`epi_confirmation_number`")]
		public virtual string EpiConfirmationNumber
		{
			get { return this.epiConfirmationNumber; }
			set { this.epiConfirmationNumber = value; }
		}
		#endregion

		#region Methods

        public static ICriteria CreateCriteria()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(EpiTempOrc));
                return c;
            }
        }

        public static List<EpiTempOrc> GetEpiTempOrcList(ICriteria criteria)
        {
            return (List<EpiTempOrc>)criteria.List<EpiTempOrc>();
        }

		public static EpiTempOrc GetEpiTempOrc(int epiTempOrcId)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				return session.Get<EpiTempOrc>(epiTempOrcId);
			}
		}

		public static List<EpiTempOrc> GetEpiTempOrcList()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(EpiTempOrc));
				return (List<EpiTempOrc>)c.List<EpiTempOrc>();
			}
		}

		public static List<EpiTempOrc> GetEpiTempOrcList(string sortExpression, int maximumRows, int startRowIndex)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(EpiTempOrc));
				if (sortExpression != null && sortExpression != "")
				{
					// Get ascending or descending order
					bool descending = sortExpression.Contains(" DESC");

					// Strip off ASC or DESC ordering
					sortExpression = sortExpression.Replace(" ASC", "");
					sortExpression = sortExpression.Replace(" DESC", "");
					sortExpression = sortExpression.Trim();

					// Get multi column sort from the comma delimited string
					List<String> expressions = new List<String>();
					if (sortExpression.Contains(","))
					{
						string[] tokens = sortExpression.Split(",".ToCharArray());
						for (int i = 0; i < tokens.Length; i++)
						{
							tokens[i] = tokens[i].Trim();
							if (tokens[i] != "")
								expressions.Add(tokens[i]);
						}
					}
					else if (sortExpression != "")
					{
						expressions.Add(sortExpression);
					}

					// Create the order
					for (int i = 0; i < expressions.Count; i++)
					{
						if (descending)
							c.AddOrder(NHibernate.Criterion.Order.Desc(expressions[i]));
						else
							c.AddOrder(NHibernate.Criterion.Order.Asc(expressions[i]));
					}
				}

				// Set offset and limit
				if (startRowIndex >= 0)
					c.SetFirstResult(startRowIndex);

				if (maximumRows >= 0)
					c.SetMaxResults(maximumRows);

				return (List<EpiTempOrc>)c.List<EpiTempOrc>();
			}
		}

		public static List<EpiTempOrc> GetEpiTempOrcList(string sortExpression)
		{
			return GetEpiTempOrcList(sortExpression, -1, -1);
		}

		public static void InsertEpiTempOrc(EpiTempOrc obj)
		{
			if (obj != null)
				obj.Insert();
		}

		public static void UpdateEpiTempOrc(EpiTempOrc obj)
		{
			if (obj != null)
				obj.Update();
		}

		public static void DeleteEpiTempOrc(EpiTempOrc obj)
		{
			if (obj != null)
				obj.Delete();
		}

        protected static EpiTempOrc PopulateEpiTempOrc(IDataReader r)
		{
			EpiTempOrc obj = new EpiTempOrc();
			obj.EpiTempOrcId = (int)r["epi_temp_orc_id"];
			obj.SfAccountNumber = (r["sf_account_number"] == DBNull.Value) ? null : (string)r["sf_account_number"];
			obj.QspAccountNumber = (r["qsp_account_number"] == DBNull.Value) ? null : (string)r["qsp_account_number"];
			obj.AccountName = (r["account_name"] == DBNull.Value) ? null : (string)r["account_name"];
			obj.City = (r["city"] == DBNull.Value) ? null : (string)r["city"];
			obj.State = (r["state"] == DBNull.Value) ? null : (string)r["state"];
			obj.Zip = (r["zip"] == DBNull.Value) ? null : (string)r["zip"];
			obj.FmFirstName = (r["fm_first_name"] == DBNull.Value) ? null : (string)r["fm_first_name"];
			obj.FmLastName = (r["fm_last_name"] == DBNull.Value) ? null : (string)r["fm_last_name"];
			obj.FmId = (r["fm_id"] == DBNull.Value) ? null : (string)r["fm_id"];
			obj.DateRecieved = (r["date_recieved"] == DBNull.Value) ? null : (string)r["date_recieved"];
			obj.EdsBatchNumber = (r["eds_batch_number"] == DBNull.Value) ? null : (string)r["eds_batch_number"];
			obj.NumberOfForms = (r["number_of_forms"] == DBNull.Value) ? null : (int?)r["number_of_forms"];
			obj.NumberOfOrders = (r["number_of_orders"] == DBNull.Value) ? null : (int?)r["number_of_orders"];
			obj.EpiConfirmationNumber = (r["epi_confirmation_number"] == DBNull.Value) ? null : (string)r["epi_confirmation_number"];

			return obj;
		}

		public static int GetCount()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(EpiTempOrc));
				c.SetProjection(Projections.RowCount());
				return (int) c.UniqueResult();
			}
		}

		/// <summary>
		/// Insert the entity to database.
		/// </summary>
		public virtual void Insert()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Save(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Update the entity to database.
		/// </summary>
		public virtual void Update()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Update(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Persist the entity back to database.
		/// </summary>
		public virtual void Save()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.SaveOrUpdate(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Delete entity in database.
		/// </summary>
		public virtual void Delete()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Delete(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals(object obj)
		{
			if (this == obj)
				return true;

			if ((obj == null) || (obj.GetType() != this.GetType())) 
				return false;

			EpiTempOrc castObj = (EpiTempOrc)obj;
			return (castObj != null && this.epiTempOrcId == castObj.EpiTempOrcId);
		}

		/// <summary>
		/// Local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return 29 * (1 + this.epiTempOrcId.GetHashCode());
		}
		#endregion
	}
}
