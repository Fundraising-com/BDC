////////////////////////////////////////////////////////////////////////////////////////////
// Class generated by SqlCodeGen 1.1.0.0.
// Do not edit this file directly. Changes will be lost when this file is regenerated.
// Extensions should be added in a separate file using partial classes.
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using NHibernate;
using NHibernate.Criterion;
using NHibernate.Mapping.Attributes;

namespace QSP.Business.Fulfillment.View
{
    [Serializable]
    [Class(Schema = "`dbo`", Table = "`order_charge_list`")]
    public partial class OrderChargeList
    {
        #region Constants
        public const string OrderChargeListEntity = "OrderChargeList";
        public const string OrderChargeIdProperty = "OrderChargeId";
        public const string OrderIdProperty = "OrderId";
        public const string ChargeIdProperty = "ChargeId";
        public const string ChargeNameProperty = "ChargeName";
        public const string ChargeIsCreditProperty = "ChargeIsCredit";
        public const string ChargeIsDisabledProperty = "ChargeIsDisabled";
        public const string ChargeToIdProperty = "ChargeToId";
        public const string ChargeToNameProperty = "ChargeToName";
        public const string AccountIdProperty = "AccountId";
        public const string EstimatedAmountProperty = "EstimatedAmount";
        public const string AmountProperty = "Amount";
        public const string CommentProperty = "Comment";
        public const string CreateDateProperty = "CreateDate";
        public const string CreateUserIdProperty = "CreateUserId";
        public const string CreateUserFirstNameProperty = "CreateUserFirstName";
        public const string CreateUserLastNameProperty = "CreateUserLastName";
        public const string UpdateDateProperty = "UpdateDate";
        public const string UpdateUserIdProperty = "UpdateUserId";
        public const string UpdateUserFirstNameProperty = "UpdateUserFirstName";
        public const string UpdateUserLastNameProperty = "UpdateUserLastName";
        #endregion

        #region Fields
        protected int orderChargeId = 0;
        protected int orderId = 0;
        protected int chargeId = 0;
        protected string chargeName = "";
        protected bool chargeIsCredit = false;
        protected bool chargeIsDisabled = false;
        protected string chargeToId = "";
        protected string chargeToName = "";
        protected int? accountId = null;
        protected decimal? estimatedAmount = null;
        protected decimal? amount = null;
        protected string comment = null;
        protected DateTime createDate = DateTime.Now;
        protected int createUserId = 0;
        protected string createUserFirstName = null;
        protected string createUserLastName = null;
        protected DateTime? updateDate = null;
        protected int? updateUserId = null;
        protected string updateUserFirstName = null;
        protected string updateUserLastName = null;
        #endregion

        #region Constructors
        public OrderChargeList()
        {
        }
        #endregion

        #region Properties
        [RawXml(Content = @"
		<id name=""OrderChargeId"" column=""`order_charge_id`"">
			<generator class=""assigned"">
			</generator>
		</id>")]

        public virtual int OrderChargeId
        {
            get { return this.orderChargeId; }
            set { this.orderChargeId = value; }
        }

        [Property(Column = "`order_id`")]
        public virtual int OrderId
        {
            get { return this.orderId; }
            set { this.orderId = value; }
        }

        [Property(Column = "`charge_id`")]
        public virtual int ChargeId
        {
            get { return this.chargeId; }
            set { this.chargeId = value; }
        }

        [Property(Column = "`charge_name`")]
        public virtual string ChargeName
        {
            get { return this.chargeName; }
            set { this.chargeName = value; }
        }

        [Property(Column = "`charge_is_credit`")]
        public virtual bool ChargeIsCredit
        {
            get { return this.chargeIsCredit; }
            set { this.chargeIsCredit = value; }
        }

        [Property(Column = "`charge_is_disabled`")]
        public virtual bool ChargeIsDisabled
        {
            get { return this.chargeIsDisabled; }
            set { this.chargeIsDisabled = value; }
        }

        [Property(Column = "`charge_to_id`")]
        public virtual string ChargeToId
        {
            get { return this.chargeToId; }
            set { this.chargeToId = value; }
        }

        [Property(Column = "`charge_to_name`")]
        public virtual string ChargeToName
        {
            get { return this.chargeToName; }
            set { this.chargeToName = value; }
        }

        [Property(Column = "`account_id`")]
        public virtual int? AccountId
        {
            get { return this.accountId; }
            set { this.accountId = value; }
        }

        [Property(Column = "`estimated_amount`")]
        public virtual decimal? EstimatedAmount
        {
            get { return this.estimatedAmount; }
            set { this.estimatedAmount = value; }
        }

        [Property(Column = "`amount`")]
        public virtual decimal? Amount
        {
            get { return this.amount; }
            set { this.amount = value; }
        }

        [Property(Column = "`comment`")]
        public virtual string Comment
        {
            get { return this.comment; }
            set { this.comment = value; }
        }

        [Property(Column = "`create_date`")]
        public virtual DateTime CreateDate
        {
            get { return this.createDate; }
            set { this.createDate = value; }
        }

        [Property(Column = "`create_user_id`")]
        public virtual int CreateUserId
        {
            get { return this.createUserId; }
            set { this.createUserId = value; }
        }

        [Property(Column = "`create_user_first_name`")]
        public virtual string CreateUserFirstName
        {
            get { return this.createUserFirstName; }
            set { this.createUserFirstName = value; }
        }

        [Property(Column = "`create_user_last_name`")]
        public virtual string CreateUserLastName
        {
            get { return this.createUserLastName; }
            set { this.createUserLastName = value; }
        }

        [Property(Column = "`update_date`")]
        public virtual DateTime? UpdateDate
        {
            get { return this.updateDate; }
            set { this.updateDate = value; }
        }

        [Property(Column = "`update_user_id`")]
        public virtual int? UpdateUserId
        {
            get { return this.updateUserId; }
            set { this.updateUserId = value; }
        }

        [Property(Column = "`update_user_first_name`")]
        public virtual string UpdateUserFirstName
        {
            get { return this.updateUserFirstName; }
            set { this.updateUserFirstName = value; }
        }

        [Property(Column = "`update_user_last_name`")]
        public virtual string UpdateUserLastName
        {
            get { return this.updateUserLastName; }
            set { this.updateUserLastName = value; }
        }
        #endregion

        #region Methods
        public static OrderChargeList GetOrderChargeList(int orderChargeId)
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                return session.Get<OrderChargeList>(orderChargeId);
            }
        }

        public static List<OrderChargeList> GetOrderChargeListList(ICriteria criteria)
        {
            return (List<OrderChargeList>)criteria.List<OrderChargeList>();
        }

        public static List<OrderChargeList> GetOrderChargeListList()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(OrderChargeList));
                return (List<OrderChargeList>)c.List<OrderChargeList>();
            }
        }

        public static List<OrderChargeList> GetOrderChargeListList(string sortExpression, int maximumRows, int startRowIndex)
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(OrderChargeList));
                if (sortExpression != null && sortExpression != "")
                {
                    // Get ascending or descending order
                    bool descending = sortExpression.Contains(" DESC");

                    // Strip off ASC or DESC ordering
                    sortExpression = sortExpression.Replace(" ASC", "");
                    sortExpression = sortExpression.Replace(" DESC", "");
                    sortExpression = sortExpression.Trim();

                    // Get multi column sort from the comma delimited string
                    List<String> expressions = new List<String>();
                    if (sortExpression.Contains(","))
                    {
                        string[] tokens = sortExpression.Split(",".ToCharArray());
                        for (int i = 0; i < tokens.Length; i++)
                        {
                            tokens[i] = tokens[i].Trim();
                            if (tokens[i] != "")
                                expressions.Add(tokens[i]);
                        }
                    }
                    else if (sortExpression != "")
                    {
                        expressions.Add(sortExpression);
                    }

                    // Create the order
                    for (int i = 0; i < expressions.Count; i++)
                    {
                        if (descending)
                            c.AddOrder(NHibernate.Criterion.Order.Desc(expressions[i]));
                        else
                            c.AddOrder(NHibernate.Criterion.Order.Asc(expressions[i]));
                    }
                }

                // Set offset and limit
                if (startRowIndex >= 0)
                    c.SetFirstResult(startRowIndex);

                if (maximumRows >= 0)
                    c.SetMaxResults(maximumRows);

                return (List<OrderChargeList>)c.List<OrderChargeList>();
            }
        }

        public static List<OrderChargeList> GetOrderChargeListList(string sortExpression)
        {
            return GetOrderChargeListList(sortExpression, -1, -1);
        }

        protected static OrderChargeList PopulateOrderChargeList(IDataReader r)
        {
            OrderChargeList obj = new OrderChargeList();
            obj.OrderChargeId = (int)r["order_charge_id"];
            obj.OrderId = (int)r["order_id"];
            obj.ChargeId = (int)r["charge_id"];
            obj.ChargeName = (string)r["charge_name"];
            obj.ChargeIsCredit = (bool)r["charge_is_credit"];
            obj.ChargeIsDisabled = (bool)r["charge_is_disabled"];
            obj.ChargeToId = (string)r["charge_to_id"];
            obj.ChargeToName = (string)r["charge_to_name"];
            obj.AccountId = (r["account_id"] == DBNull.Value) ? null : (int?)r["account_id"];
            obj.EstimatedAmount = (r["estimated_amount"] == DBNull.Value) ? null : (decimal?)r["estimated_amount"];
            obj.Amount = (r["amount"] == DBNull.Value) ? null : (decimal?)r["amount"];
            obj.Comment = (r["comment"] == DBNull.Value) ? null : (string)r["comment"];
            obj.CreateDate = (DateTime)r["create_date"];
            obj.CreateUserId = (int)r["create_user_id"];
            obj.CreateUserFirstName = (r["create_user_first_name"] == DBNull.Value) ? null : (string)r["create_user_first_name"];
            obj.CreateUserLastName = (r["create_user_last_name"] == DBNull.Value) ? null : (string)r["create_user_last_name"];
            obj.UpdateDate = (r["update_date"] == DBNull.Value) ? null : (DateTime?)r["update_date"];
            obj.UpdateUserId = (r["update_user_id"] == DBNull.Value) ? null : (int?)r["update_user_id"];
            obj.UpdateUserFirstName = (r["update_user_first_name"] == DBNull.Value) ? null : (string)r["update_user_first_name"];
            obj.UpdateUserLastName = (r["update_user_last_name"] == DBNull.Value) ? null : (string)r["update_user_last_name"];

            return obj;
        }

        public static int GetCount()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(OrderChargeList));
                c.SetProjection(Projections.RowCount());
                return (int)c.UniqueResult();
            }
        }

        /// <summary>
        /// Local implementation of Equals based on unique value members
        /// </summary>
        public override bool Equals(object obj)
        {
            if (this == obj)
                return true;

            if ((obj == null) || (obj.GetType() != this.GetType()))
                return false;

            OrderChargeList castObj = (OrderChargeList)obj;
            return (castObj != null && this.orderChargeId == castObj.OrderChargeId);
        }

        /// <summary>
        /// Local implementation of GetHashCode based on unique value members
        /// </summary>
        public override int GetHashCode()
        {
            return 29 * (1 + this.orderChargeId.GetHashCode());
        }
        #endregion
    }
}