////////////////////////////////////////////////////////////////////////////////////////////
// Class generated by SqlCodeGen 1.1.0.0.
// Do not edit this file directly. Changes will be lost when this file is regenerated.
// Extensions should be added in a separate file using partial classes.
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using NHibernate;
using NHibernate.Criterion;
using NHibernate.Mapping.Attributes;

namespace QSP.Business.Fulfillment
{
	[Serializable]
	[Class(Schema="`dbo`", Table="`postal_address`")]
	public partial class PostalAddress
	{
		#region Constants
        public const string PostalAddressEntity = "PostalAddress";
		public const string PostalAddressIdProperty = "PostalAddressId";
		public const string NameProperty = "Name";
		public const string FirstNameProperty = "FirstName";
		public const string LastNameProperty = "LastName";
		public const string Address1Property = "Address1";
		public const string Address2Property = "Address2";
		public const string CityProperty = "City";
		public const string ZipProperty = "Zip";
		public const string Zip4Property = "Zip4";
		public const string CountyProperty = "County";
		public const string SubdivisionCodeProperty = "SubdivisionCode";
		public const string ResidentialAreaProperty = "ResidentialArea";
		public const string DeletedProperty = "Deleted";
		public const string CreateDateProperty = "CreateDate";
		public const string CreateUserIdProperty = "CreateUserId";
		public const string UpdateDateProperty = "UpdateDate";
		public const string UpdateUserIdProperty = "UpdateUserId";
		public const string DtsFlagpoleInstanceProperty = "DtsFlagpoleInstance";
		public const string DtsCAccountIdProperty = "DtsCAccountId";
		public const string DtsCCAInstanceProperty = "DtsCCAInstance";
		public const string SyncBatchIdProperty = "SyncBatchId";
		public const string SyncOeOrdProperty = "SyncOeOrd";
		#endregion

		#region Fields
		protected int postalAddressId = 0;
		protected string name = null;
		protected string firstName = null;
		protected string lastName = null;
		protected string address1 = null;
		protected string address2 = null;
		protected string city = null;
		protected string zip = null;
		protected string zip4 = null;
		protected string county = null;
		protected string subdivisionCode = null;
		protected bool? residentialArea = false;
		protected int deleted = 0;
		protected DateTime createDate = DateTime.Now;
		protected int createUserId = 0;
		protected DateTime? updateDate = DateTime.Now;
		protected int? updateUserId = null;
		protected int? dtsFlagpoleInstance = null;
		protected int? dtsCAccountId = null;
		protected int? dtsCCAInstance = null;
		protected int? syncBatchId = null;
		protected int? syncOeOrd = null;
		#endregion

		#region Constructors
		public PostalAddress() 
		{
		}
		#endregion

		#region Properties
		[RawXml(Content=@"
		<id name=""PostalAddressId"" column=""`postal_address_id`"">
			<generator class=""native"">
			</generator>
		</id>")]

		public virtual int PostalAddressId
		{
			get { return this.postalAddressId; }
			set { this.postalAddressId = value; }
		}

		[Property(Column="`name`")]
		public virtual string Name
		{
			get { return this.name; }
			set { this.name = value; }
		}

		[Property(Column="`first_name`")]
		public virtual string FirstName
		{
			get { return this.firstName; }
			set { this.firstName = value; }
		}

		[Property(Column="`last_name`")]
		public virtual string LastName
		{
			get { return this.lastName; }
			set { this.lastName = value; }
		}

		[Property(Column="`address1`")]
		public virtual string Address1
		{
			get { return this.address1; }
			set { this.address1 = value; }
		}

		[Property(Column="`address2`")]
		public virtual string Address2
		{
			get { return this.address2; }
			set { this.address2 = value; }
		}

		[Property(Column="`city`")]
		public virtual string City
		{
			get { return this.city; }
			set { this.city = value; }
		}

		[Property(Column="`zip`")]
		public virtual string Zip
		{
			get { return this.zip; }
			set { this.zip = value; }
		}

		[Property(Column="`zip4`")]
		public virtual string Zip4
		{
			get { return this.zip4; }
			set { this.zip4 = value; }
		}

		[Property(Column="`county`")]
		public virtual string County
		{
			get { return this.county; }
			set { this.county = value; }
		}

		[Property(Column="`subdivision_code`")]
		public virtual string SubdivisionCode
		{
			get { return this.subdivisionCode; }
			set { this.subdivisionCode = value; }
		}

		[Property(Column="`residential_area`")]
		public virtual bool? ResidentialArea
		{
			get { return this.residentialArea; }
			set { this.residentialArea = value; }
		}

		[Property(Column="`deleted`")]
		public virtual int Deleted
		{
			get { return this.deleted; }
			set { this.deleted = value; }
		}

		[Property(Column="`create_date`")]
		public virtual DateTime CreateDate
		{
			get { return this.createDate; }
			set { this.createDate = value; }
		}

		[Property(Column="`create_user_id`")]
		public virtual int CreateUserId
		{
			get { return this.createUserId; }
			set { this.createUserId = value; }
		}

		[Property(Column="`update_date`")]
		public virtual DateTime? UpdateDate
		{
			get { return this.updateDate; }
			set { this.updateDate = value; }
		}

		[Property(Column="`update_user_id`")]
		public virtual int? UpdateUserId
		{
			get { return this.updateUserId; }
			set { this.updateUserId = value; }
		}

		[Property(Column="`dts_FlagpoleInstance`")]
		public virtual int? DtsFlagpoleInstance
		{
			get { return this.dtsFlagpoleInstance; }
			set { this.dtsFlagpoleInstance = value; }
		}

		[Property(Column="`dts_CAccountId`")]
		public virtual int? DtsCAccountId
		{
			get { return this.dtsCAccountId; }
			set { this.dtsCAccountId = value; }
		}

		[Property(Column="`dts_CCAInstance`")]
		public virtual int? DtsCCAInstance
		{
			get { return this.dtsCCAInstance; }
			set { this.dtsCCAInstance = value; }
		}

		[Property(Column="`sync_batch_id`")]
		public virtual int? SyncBatchId
		{
			get { return this.syncBatchId; }
			set { this.syncBatchId = value; }
		}

		[Property(Column="`sync_oe#ord`")]
		public virtual int? SyncOeOrd
		{
			get { return this.syncOeOrd; }
			set { this.syncOeOrd = value; }
		}
		#endregion

		#region Methods

        public static ICriteria CreateCriteria()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(PostalAddress));
                return c;
            }
        }

        public static List<PostalAddress> GetPostalAddressList(ICriteria criteria)
        {
            return (List<PostalAddress>)criteria.List<PostalAddress>();
        }

		public static PostalAddress GetPostalAddress(int postalAddressId)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				return session.Get<PostalAddress>(postalAddressId);
			}
		}

		public static List<PostalAddress> GetPostalAddressList()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(PostalAddress));
				return (List<PostalAddress>)c.List<PostalAddress>();
			}
		}

		public static List<PostalAddress> GetPostalAddressList(string sortExpression, int maximumRows, int startRowIndex)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(PostalAddress));
				if (sortExpression != null && sortExpression != "")
				{
					// Get ascending or descending order
					bool descending = sortExpression.Contains(" DESC");

					// Strip off ASC or DESC ordering
					sortExpression = sortExpression.Replace(" ASC", "");
					sortExpression = sortExpression.Replace(" DESC", "");
					sortExpression = sortExpression.Trim();

					// Get multi column sort from the comma delimited string
					List<String> expressions = new List<String>();
					if (sortExpression.Contains(","))
					{
						string[] tokens = sortExpression.Split(",".ToCharArray());
						for (int i = 0; i < tokens.Length; i++)
						{
							tokens[i] = tokens[i].Trim();
							if (tokens[i] != "")
								expressions.Add(tokens[i]);
						}
					}
					else if (sortExpression != "")
					{
						expressions.Add(sortExpression);
					}

					// Create the order
					for (int i = 0; i < expressions.Count; i++)
					{
						if (descending)
							c.AddOrder(NHibernate.Criterion.Order.Desc(expressions[i]));
						else
							c.AddOrder(NHibernate.Criterion.Order.Asc(expressions[i]));
					}
				}

				// Set offset and limit
				if (startRowIndex >= 0)
					c.SetFirstResult(startRowIndex);

				if (maximumRows >= 0)
					c.SetMaxResults(maximumRows);

				return (List<PostalAddress>)c.List<PostalAddress>();
			}
		}

		public static List<PostalAddress> GetPostalAddressList(string sortExpression)
		{
			return GetPostalAddressList(sortExpression, -1, -1);
		}

		public static void InsertPostalAddress(PostalAddress obj)
		{
			if (obj != null)
				obj.Insert();
		}

		public static void UpdatePostalAddress(PostalAddress obj)
		{
			if (obj != null)
				obj.Update();
		}

		public static void DeletePostalAddress(PostalAddress obj)
		{
			if (obj != null)
				obj.Delete();
		}

        protected static PostalAddress PopulatePostalAddress(IDataReader r)
		{
			PostalAddress obj = new PostalAddress();
			obj.PostalAddressId = (int)r["postal_address_id"];
			obj.Name = (r["name"] == DBNull.Value) ? null : (string)r["name"];
			obj.FirstName = (r["first_name"] == DBNull.Value) ? null : (string)r["first_name"];
			obj.LastName = (r["last_name"] == DBNull.Value) ? null : (string)r["last_name"];
			obj.Address1 = (r["address1"] == DBNull.Value) ? null : (string)r["address1"];
			obj.Address2 = (r["address2"] == DBNull.Value) ? null : (string)r["address2"];
			obj.City = (r["city"] == DBNull.Value) ? null : (string)r["city"];
			obj.Zip = (r["zip"] == DBNull.Value) ? null : (string)r["zip"];
			obj.Zip4 = (r["zip4"] == DBNull.Value) ? null : (string)r["zip4"];
			obj.County = (r["county"] == DBNull.Value) ? null : (string)r["county"];
			obj.SubdivisionCode = (r["subdivision_code"] == DBNull.Value) ? null : (string)r["subdivision_code"];
			obj.ResidentialArea = (r["residential_area"] == DBNull.Value) ? null : (bool?)r["residential_area"];
			obj.Deleted = (int)r["deleted"];
			obj.CreateDate = (DateTime)r["create_date"];
			obj.CreateUserId = (int)r["create_user_id"];
			obj.UpdateDate = (r["update_date"] == DBNull.Value) ? null : (DateTime?)r["update_date"];
			obj.UpdateUserId = (r["update_user_id"] == DBNull.Value) ? null : (int?)r["update_user_id"];
			obj.DtsFlagpoleInstance = (r["dts_FlagpoleInstance"] == DBNull.Value) ? null : (int?)r["dts_FlagpoleInstance"];
			obj.DtsCAccountId = (r["dts_CAccountId"] == DBNull.Value) ? null : (int?)r["dts_CAccountId"];
			obj.DtsCCAInstance = (r["dts_CCAInstance"] == DBNull.Value) ? null : (int?)r["dts_CCAInstance"];
			obj.SyncBatchId = (r["sync_batch_id"] == DBNull.Value) ? null : (int?)r["sync_batch_id"];
			obj.SyncOeOrd = (r["sync_oe#ord"] == DBNull.Value) ? null : (int?)r["sync_oe#ord"];

			return obj;
		}

		public static int GetCount()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(PostalAddress));
				c.SetProjection(Projections.RowCount());
				return (int) c.UniqueResult();
			}
		}

		/// <summary>
		/// Insert the entity to database.
		/// </summary>
		public virtual void Insert()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Save(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Update the entity to database.
		/// </summary>
		public virtual void Update()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Update(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Persist the entity back to database.
		/// </summary>
		public virtual void Save()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.SaveOrUpdate(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Delete entity in database.
		/// </summary>
		public virtual void Delete()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Delete(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals(object obj)
		{
			if (this == obj)
				return true;

			if ((obj == null) || (obj.GetType() != this.GetType())) 
				return false;

			PostalAddress castObj = (PostalAddress)obj;
			return (castObj != null && this.postalAddressId == castObj.PostalAddressId);
		}

		/// <summary>
		/// Local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return 29 * (1 + this.postalAddressId.GetHashCode());
		}
		#endregion
	}
}
