////////////////////////////////////////////////////////////////////////////////////////////
// Class generated by SqlCodeGen 1.1.0.0.
// Do not edit this file directly. Changes will be lost when this file is regenerated.
// Extensions should be added in a separate file using partial classes.
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using NHibernate;
using NHibernate.Criterion;
using NHibernate.Mapping.Attributes;

namespace QSP.Business.Fulfillment
{
	[Serializable]
	[Class(Schema="`dbo`", Table="`as400giftmaster_incoming`")]
	public partial class As400giftmasterIncoming
	{
		#region Constants
        public const string As400giftmasterIncomingEntity = "As400giftmasterIncoming";
		public const string AcctidProperty = "Acctid";
		public const string FmidProperty = "Fmid";
		#endregion

		#region Fields
		protected int acctid = 0;
		protected string fmid = "";
		#endregion

		#region Constructors
		public As400giftmasterIncoming() 
		{
		}
		#endregion

		#region Properties
		[RawXml(Content=@"
		<composite-id>
			<key-property name=""Acctid"" column=""`acctid`"" />
			<key-property name=""Fmid"" column=""`fmid`"" />
		</composite-id>")]

		public virtual int Acctid
		{
			get { return this.acctid; }
			set { this.acctid = value; }
		}

		public virtual string Fmid
		{
			get { return this.fmid; }
			set { this.fmid = value; }
		}
		#endregion

		#region Methods

        public static ICriteria CreateCriteria()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(As400giftmasterIncoming));
                return c;
            }
        }

        public static List<As400giftmasterIncoming> GetAs400giftmasterIncomingList(ICriteria criteria)
        {
            return (List<As400giftmasterIncoming>)criteria.List<As400giftmasterIncoming>();
        }

		public static As400giftmasterIncoming GetAs400giftmasterIncoming(int acctid, string fmid)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(As400giftmasterIncoming));
				c.Add(Expression.Eq(AcctidProperty, acctid));
				c.Add(Expression.Eq(FmidProperty, fmid));
				return c.UniqueResult<As400giftmasterIncoming>();
			}
		}

		public static List<As400giftmasterIncoming> GetAs400giftmasterIncomingList()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(As400giftmasterIncoming));
				return (List<As400giftmasterIncoming>)c.List<As400giftmasterIncoming>();
			}
		}

		public static List<As400giftmasterIncoming> GetAs400giftmasterIncomingList(string sortExpression, int maximumRows, int startRowIndex)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(As400giftmasterIncoming));
				if (sortExpression != null && sortExpression != "")
				{
					// Get ascending or descending order
					bool descending = sortExpression.Contains(" DESC");

					// Strip off ASC or DESC ordering
					sortExpression = sortExpression.Replace(" ASC", "");
					sortExpression = sortExpression.Replace(" DESC", "");
					sortExpression = sortExpression.Trim();

					// Get multi column sort from the comma delimited string
					List<String> expressions = new List<String>();
					if (sortExpression.Contains(","))
					{
						string[] tokens = sortExpression.Split(",".ToCharArray());
						for (int i = 0; i < tokens.Length; i++)
						{
							tokens[i] = tokens[i].Trim();
							if (tokens[i] != "")
								expressions.Add(tokens[i]);
						}
					}
					else if (sortExpression != "")
					{
						expressions.Add(sortExpression);
					}

					// Create the order
					for (int i = 0; i < expressions.Count; i++)
					{
						if (descending)
							c.AddOrder(NHibernate.Criterion.Order.Desc(expressions[i]));
						else
							c.AddOrder(NHibernate.Criterion.Order.Asc(expressions[i]));
					}
				}

				// Set offset and limit
				if (startRowIndex >= 0)
					c.SetFirstResult(startRowIndex);

				if (maximumRows >= 0)
					c.SetMaxResults(maximumRows);

				return (List<As400giftmasterIncoming>)c.List<As400giftmasterIncoming>();
			}
		}

		public static List<As400giftmasterIncoming> GetAs400giftmasterIncomingList(string sortExpression)
		{
			return GetAs400giftmasterIncomingList(sortExpression, -1, -1);
		}

		public static void InsertAs400giftmasterIncoming(As400giftmasterIncoming obj)
		{
			if (obj != null)
				obj.Insert();
		}

		public static void UpdateAs400giftmasterIncoming(As400giftmasterIncoming obj)
		{
			if (obj != null)
				obj.Update();
		}

		public static void DeleteAs400giftmasterIncoming(As400giftmasterIncoming obj)
		{
			if (obj != null)
				obj.Delete();
		}

        protected static As400giftmasterIncoming PopulateAs400giftmasterIncoming(IDataReader r)
		{
			As400giftmasterIncoming obj = new As400giftmasterIncoming();
			obj.Acctid = (int)r["acctid"];
			obj.Fmid = (string)r["fmid"];

			return obj;
		}

		public static int GetCount()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(As400giftmasterIncoming));
				c.SetProjection(Projections.RowCount());
				return (int) c.UniqueResult();
			}
		}

		/// <summary>
		/// Insert the entity to database.
		/// </summary>
		public virtual void Insert()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Save(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Update the entity to database.
		/// </summary>
		public virtual void Update()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Update(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Delete entity in database.
		/// </summary>
		public virtual void Delete()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Delete(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals(object obj)
		{
			if (this == obj)
				return true;

			if ((obj == null) || (obj.GetType() != this.GetType())) 
				return false;

			As400giftmasterIncoming castObj = (As400giftmasterIncoming)obj;
			return (castObj != null && this.acctid == castObj.Acctid && this.fmid == castObj.Fmid);
		}

		/// <summary>
		/// Local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return 29 * (1 + this.acctid.GetHashCode() + this.fmid.GetHashCode());
		}
		#endregion
	}
}
