////////////////////////////////////////////////////////////////////////////////////////////
// Class generated by SqlCodeGen 1.1.0.0.
// Do not edit this file directly. Changes will be lost when this file is regenerated.
// Extensions should be added in a separate file using partial classes.
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using NHibernate;
using NHibernate.Criterion;
using NHibernate.Mapping.Attributes;

namespace QSP.Business.Fulfillment
{
	[Serializable]
	[Class(Schema="`dbo`", Table="`business_rule`")]
	public partial class BusinessRule
	{
		#region Constants
        public const string BusinessRuleEntity = "BusinessRule";
		public const string BusinessRuleIdProperty = "BusinessRuleId";
		public const string LogicalOperatorIdProperty = "LogicalOperatorId";
		public const string FormIdProperty = "FormId";
		public const string FieldIdProperty = "FieldId";
		public const string BusinessRuleNameProperty = "BusinessRuleName";
		public const string MessageProperty = "Message";
		public const string ValueToCompareProperty = "ValueToCompare";
		public const string DescriptionProperty = "Description";
		public const string DeletedProperty = "Deleted";
		public const string CreateDateProperty = "CreateDate";
		public const string CreateUserIdProperty = "CreateUserId";
		public const string UpdateDateProperty = "UpdateDate";
		public const string UpdateUserIdProperty = "UpdateUserId";
		public const string FormSectionTypeIdProperty = "FormSectionTypeId";
		public const string FormSectionNumberProperty = "FormSectionNumber";
		#endregion

		#region Fields
		protected int businessRuleId = 0;
		protected int? logicalOperatorId = null;
		protected int? formId = null;
		protected int? fieldId = null;
		protected string businessRuleName = "";
		protected string message = null;
		protected string valueToCompare = null;
		protected string description = null;
		protected bool deleted = false;
		protected DateTime createDate = DateTime.Now;
		protected int createUserId = 0;
		protected DateTime? updateDate = DateTime.Now;
		protected int? updateUserId = null;
		protected int? formSectionTypeId = null;
		protected int? formSectionNumber = null;
		#endregion

		#region Constructors
		public BusinessRule() 
		{
		}
		#endregion

		#region Properties
		[RawXml(Content=@"
		<id name=""BusinessRuleId"" column=""`business_rule_id`"">
			<generator class=""native"">
			</generator>
		</id>")]

		public virtual int BusinessRuleId
		{
			get { return this.businessRuleId; }
			set { this.businessRuleId = value; }
		}

		[Property(Column="`logical_operator_id`")]
		public virtual int? LogicalOperatorId
		{
			get { return this.logicalOperatorId; }
			set { this.logicalOperatorId = value; }
		}

		[Property(Column="`form_id`")]
		public virtual int? FormId
		{
			get { return this.formId; }
			set { this.formId = value; }
		}

		[Property(Column="`field_id`")]
		public virtual int? FieldId
		{
			get { return this.fieldId; }
			set { this.fieldId = value; }
		}

		[Property(Column="`business_rule_name`")]
		public virtual string BusinessRuleName
		{
			get { return this.businessRuleName; }
			set { this.businessRuleName = value; }
		}

		[Property(Column="`message`")]
		public virtual string Message
		{
			get { return this.message; }
			set { this.message = value; }
		}

		[Property(Column="`value_to_compare`")]
		public virtual string ValueToCompare
		{
			get { return this.valueToCompare; }
			set { this.valueToCompare = value; }
		}

		[Property(Column="`description`")]
		public virtual string Description
		{
			get { return this.description; }
			set { this.description = value; }
		}

		[Property(Column="`deleted`")]
		public virtual bool Deleted
		{
			get { return this.deleted; }
			set { this.deleted = value; }
		}

		[Property(Column="`create_date`")]
		public virtual DateTime CreateDate
		{
			get { return this.createDate; }
			set { this.createDate = value; }
		}

		[Property(Column="`create_user_id`")]
		public virtual int CreateUserId
		{
			get { return this.createUserId; }
			set { this.createUserId = value; }
		}

		[Property(Column="`update_date`")]
		public virtual DateTime? UpdateDate
		{
			get { return this.updateDate; }
			set { this.updateDate = value; }
		}

		[Property(Column="`update_user_id`")]
		public virtual int? UpdateUserId
		{
			get { return this.updateUserId; }
			set { this.updateUserId = value; }
		}

		[Property(Column="`form_section_type_id`")]
		public virtual int? FormSectionTypeId
		{
			get { return this.formSectionTypeId; }
			set { this.formSectionTypeId = value; }
		}

		[Property(Column="`form_section_number`")]
		public virtual int? FormSectionNumber
		{
			get { return this.formSectionNumber; }
			set { this.formSectionNumber = value; }
		}
		#endregion

		#region Methods

        public static ICriteria CreateCriteria()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(BusinessRule));
                return c;
            }
        }

        public static List<BusinessRule> GetBusinessRuleList(ICriteria criteria)
        {
            return (List<BusinessRule>)criteria.List<BusinessRule>();
        }

		public static BusinessRule GetBusinessRule(int businessRuleId)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				return session.Get<BusinessRule>(businessRuleId);
			}
		}

		public static List<BusinessRule> GetBusinessRuleList()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(BusinessRule));
				return (List<BusinessRule>)c.List<BusinessRule>();
			}
		}

		public static List<BusinessRule> GetBusinessRuleList(string sortExpression, int maximumRows, int startRowIndex)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(BusinessRule));
				if (sortExpression != null && sortExpression != "")
				{
					// Get ascending or descending order
					bool descending = sortExpression.Contains(" DESC");

					// Strip off ASC or DESC ordering
					sortExpression = sortExpression.Replace(" ASC", "");
					sortExpression = sortExpression.Replace(" DESC", "");
					sortExpression = sortExpression.Trim();

					// Get multi column sort from the comma delimited string
					List<String> expressions = new List<String>();
					if (sortExpression.Contains(","))
					{
						string[] tokens = sortExpression.Split(",".ToCharArray());
						for (int i = 0; i < tokens.Length; i++)
						{
							tokens[i] = tokens[i].Trim();
							if (tokens[i] != "")
								expressions.Add(tokens[i]);
						}
					}
					else if (sortExpression != "")
					{
						expressions.Add(sortExpression);
					}

					// Create the order
					for (int i = 0; i < expressions.Count; i++)
					{
						if (descending)
							c.AddOrder(NHibernate.Criterion.Order.Desc(expressions[i]));
						else
							c.AddOrder(NHibernate.Criterion.Order.Asc(expressions[i]));
					}
				}

				// Set offset and limit
				if (startRowIndex >= 0)
					c.SetFirstResult(startRowIndex);

				if (maximumRows >= 0)
					c.SetMaxResults(maximumRows);

				return (List<BusinessRule>)c.List<BusinessRule>();
			}
		}

		public static List<BusinessRule> GetBusinessRuleList(string sortExpression)
		{
			return GetBusinessRuleList(sortExpression, -1, -1);
		}

		public static void InsertBusinessRule(BusinessRule obj)
		{
			if (obj != null)
				obj.Insert();
		}

		public static void UpdateBusinessRule(BusinessRule obj)
		{
			if (obj != null)
				obj.Update();
		}

		public static void DeleteBusinessRule(BusinessRule obj)
		{
			if (obj != null)
				obj.Delete();
		}

        protected static BusinessRule PopulateBusinessRule(IDataReader r)
		{
			BusinessRule obj = new BusinessRule();
			obj.BusinessRuleId = (int)r["business_rule_id"];
			obj.LogicalOperatorId = (r["logical_operator_id"] == DBNull.Value) ? null : (int?)r["logical_operator_id"];
			obj.FormId = (r["form_id"] == DBNull.Value) ? null : (int?)r["form_id"];
			obj.FieldId = (r["field_id"] == DBNull.Value) ? null : (int?)r["field_id"];
			obj.BusinessRuleName = (string)r["business_rule_name"];
			obj.Message = (r["message"] == DBNull.Value) ? null : (string)r["message"];
			obj.ValueToCompare = (r["value_to_compare"] == DBNull.Value) ? null : (string)r["value_to_compare"];
			obj.Description = (r["description"] == DBNull.Value) ? null : (string)r["description"];
			obj.Deleted = (bool)r["deleted"];
			obj.CreateDate = (DateTime)r["create_date"];
			obj.CreateUserId = (int)r["create_user_id"];
			obj.UpdateDate = (r["update_date"] == DBNull.Value) ? null : (DateTime?)r["update_date"];
			obj.UpdateUserId = (r["update_user_id"] == DBNull.Value) ? null : (int?)r["update_user_id"];
			obj.FormSectionTypeId = (r["form_section_type_id"] == DBNull.Value) ? null : (int?)r["form_section_type_id"];
			obj.FormSectionNumber = (r["form_section_number"] == DBNull.Value) ? null : (int?)r["form_section_number"];

			return obj;
		}

		public static int GetCount()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(BusinessRule));
				c.SetProjection(Projections.RowCount());
				return (int) c.UniqueResult();
			}
		}

		/// <summary>
		/// Insert the entity to database.
		/// </summary>
		public virtual void Insert()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Save(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Update the entity to database.
		/// </summary>
		public virtual void Update()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Update(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Persist the entity back to database.
		/// </summary>
		public virtual void Save()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.SaveOrUpdate(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Delete entity in database.
		/// </summary>
		public virtual void Delete()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Delete(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals(object obj)
		{
			if (this == obj)
				return true;

			if ((obj == null) || (obj.GetType() != this.GetType())) 
				return false;

			BusinessRule castObj = (BusinessRule)obj;
			return (castObj != null && this.businessRuleId == castObj.BusinessRuleId);
		}

		/// <summary>
		/// Local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return 29 * (1 + this.businessRuleId.GetHashCode());
		}
		#endregion
	}
}
