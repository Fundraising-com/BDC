////////////////////////////////////////////////////////////////////////////////////////////
// Class generated by SqlCodeGen 1.1.0.0.
// Do not edit this file directly. Changes will be lost when this file is regenerated.
// Extensions should be added in a separate file using partial classes.
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using NHibernate;
using NHibernate.Criterion;
using NHibernate.Mapping.Attributes;

namespace QSP.Business.Fulfillment
{
	[Serializable]
	[Class(Schema="`dbo`", Table="`CM_AppItems_FAQ`")]
	public partial class CMAppItemsFAQ
	{
		#region Constants
        public const string CMAppItemsFAQEntity = "CMAppItemsFAQ";
		public const string AppItemIDProperty = "AppItemID";
		public const string FAQIDProperty = "FAQID";
		public const string DisplayOrderProperty = "DisplayOrder";
		#endregion

		#region Fields
		protected int appItemID = 0;
		protected int fAQID = 0;
		protected int displayOrder = 0;
		#endregion

		#region Constructors
		public CMAppItemsFAQ() 
		{
		}
		#endregion

		#region Properties
		[RawXml(Content=@"
		<composite-id>
			<key-property name=""AppItemID"" column=""`AppItem_ID`"" />
			<key-property name=""FAQID"" column=""`FAQ_ID`"" />
		</composite-id>")]

		public virtual int AppItemID
		{
			get { return this.appItemID; }
			set { this.appItemID = value; }
		}

		public virtual int FAQID
		{
			get { return this.fAQID; }
			set { this.fAQID = value; }
		}

		[Property(Column="`DisplayOrder`")]
		public virtual int DisplayOrder
		{
			get { return this.displayOrder; }
			set { this.displayOrder = value; }
		}
		#endregion

		#region Methods

        public static ICriteria CreateCriteria()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(CMAppItemsFAQ));
                return c;
            }
        }

        public static List<CMAppItemsFAQ> GetCMAppItemsFAQList(ICriteria criteria)
        {
            return (List<CMAppItemsFAQ>)criteria.List<CMAppItemsFAQ>();
        }

		public static CMAppItemsFAQ GetCMAppItemsFAQ(int appItemID, int fAQID)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(CMAppItemsFAQ));
				c.Add(Expression.Eq(AppItemIDProperty, appItemID));
				c.Add(Expression.Eq(FAQIDProperty, fAQID));
				return c.UniqueResult<CMAppItemsFAQ>();
			}
		}

		public static List<CMAppItemsFAQ> GetCMAppItemsFAQList()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(CMAppItemsFAQ));
				return (List<CMAppItemsFAQ>)c.List<CMAppItemsFAQ>();
			}
		}

		public static List<CMAppItemsFAQ> GetCMAppItemsFAQList(string sortExpression, int maximumRows, int startRowIndex)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(CMAppItemsFAQ));
				if (sortExpression != null && sortExpression != "")
				{
					// Get ascending or descending order
					bool descending = sortExpression.Contains(" DESC");

					// Strip off ASC or DESC ordering
					sortExpression = sortExpression.Replace(" ASC", "");
					sortExpression = sortExpression.Replace(" DESC", "");
					sortExpression = sortExpression.Trim();

					// Get multi column sort from the comma delimited string
					List<String> expressions = new List<String>();
					if (sortExpression.Contains(","))
					{
						string[] tokens = sortExpression.Split(",".ToCharArray());
						for (int i = 0; i < tokens.Length; i++)
						{
							tokens[i] = tokens[i].Trim();
							if (tokens[i] != "")
								expressions.Add(tokens[i]);
						}
					}
					else if (sortExpression != "")
					{
						expressions.Add(sortExpression);
					}

					// Create the order
					for (int i = 0; i < expressions.Count; i++)
					{
						if (descending)
							c.AddOrder(NHibernate.Criterion.Order.Desc(expressions[i]));
						else
							c.AddOrder(NHibernate.Criterion.Order.Asc(expressions[i]));
					}
				}

				// Set offset and limit
				if (startRowIndex >= 0)
					c.SetFirstResult(startRowIndex);

				if (maximumRows >= 0)
					c.SetMaxResults(maximumRows);

				return (List<CMAppItemsFAQ>)c.List<CMAppItemsFAQ>();
			}
		}

		public static List<CMAppItemsFAQ> GetCMAppItemsFAQList(string sortExpression)
		{
			return GetCMAppItemsFAQList(sortExpression, -1, -1);
		}

		public static void InsertCMAppItemsFAQ(CMAppItemsFAQ obj)
		{
			if (obj != null)
				obj.Insert();
		}

		public static void UpdateCMAppItemsFAQ(CMAppItemsFAQ obj)
		{
			if (obj != null)
				obj.Update();
		}

		public static void DeleteCMAppItemsFAQ(CMAppItemsFAQ obj)
		{
			if (obj != null)
				obj.Delete();
		}

        protected static CMAppItemsFAQ PopulateCMAppItemsFAQ(IDataReader r)
		{
			CMAppItemsFAQ obj = new CMAppItemsFAQ();
			obj.AppItemID = (int)r["AppItem_ID"];
			obj.FAQID = (int)r["FAQ_ID"];
			obj.DisplayOrder = (int)r["DisplayOrder"];

			return obj;
		}

		public static int GetCount()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(CMAppItemsFAQ));
				c.SetProjection(Projections.RowCount());
				return (int) c.UniqueResult();
			}
		}

		/// <summary>
		/// Insert the entity to database.
		/// </summary>
		public virtual void Insert()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Save(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Update the entity to database.
		/// </summary>
		public virtual void Update()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Update(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Delete entity in database.
		/// </summary>
		public virtual void Delete()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Delete(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals(object obj)
		{
			if (this == obj)
				return true;

			if ((obj == null) || (obj.GetType() != this.GetType())) 
				return false;

			CMAppItemsFAQ castObj = (CMAppItemsFAQ)obj;
			return (castObj != null && this.appItemID == castObj.AppItemID && this.fAQID == castObj.FAQID);
		}

		/// <summary>
		/// Local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return 29 * (1 + this.appItemID.GetHashCode() + this.fAQID.GetHashCode());
		}
		#endregion
	}
}
