////////////////////////////////////////////////////////////////////////////////////////////
// Class generated by SqlCodeGen 1.1.0.0.
// Do not edit this file directly. Changes will be lost when this file is regenerated.
// Extensions should be added in a separate file using partial classes.
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using NHibernate;
using NHibernate.Criterion;
using NHibernate.Mapping.Attributes;

namespace QSP.Business.Fulfillment
{
	[Serializable]
	[Class(Schema = "`dbo`", Table = "`user_role`")]
	public partial class UserRole
	{
		#region Constants
		public const string UserRoleEntity = "UserRole";
		public const string UserRoleIdProperty = "UserRoleId";
		public const string UserIdProperty = "UserId";
		public const string RoleIdProperty = "RoleId";
		public const string CreateDateProperty = "CreateDate";
		public const string CreateUserIdProperty = "CreateUserId";
		public const string UpdateDateProperty = "UpdateDate";
		public const string UpdateUserIdProperty = "UpdateUserId";
		#endregion

		#region Fields
		protected int userRoleId = 0;
		protected int userId = 0;
		protected int roleId = 0;
		protected DateTime createDate = DateTime.Now;
		protected int createUserId = 0;
		protected DateTime updateDate = DateTime.Now;
		protected int updateUserId = 0;
		#endregion

		#region Constructors
		public UserRole()
		{
		}
		#endregion

		#region Properties
		[RawXml(Content = @"
		<id name=""UserRoleId"" column=""`user_role_id`"">
			<generator class=""native"">
			</generator>
		</id>")]

		public virtual int UserRoleId
		{
			get { return this.userRoleId; }
			set { this.userRoleId = value; }
		}

		[Property(Column = "`user_id`")]
		public virtual int UserId
		{
			get { return this.userId; }
			set { this.userId = value; }
		}

		[Property(Column = "`role_id`")]
		public virtual int RoleId
		{
			get { return this.roleId; }
			set { this.roleId = value; }
		}

		[Property(Column = "`create_date`")]
		public virtual DateTime CreateDate
		{
			get { return this.createDate; }
			set { this.createDate = value; }
		}

		[Property(Column = "`create_user_id`")]
		public virtual int CreateUserId
		{
			get { return this.createUserId; }
			set { this.createUserId = value; }
		}

		[Property(Column = "`update_date`")]
		public virtual DateTime UpdateDate
		{
			get { return this.updateDate; }
			set { this.updateDate = value; }
		}

		[Property(Column = "`update_user_id`")]
		public virtual int UpdateUserId
		{
			get { return this.updateUserId; }
			set { this.updateUserId = value; }
		}
		#endregion

		#region Methods
		public static UserRole GetUserRole(int userRoleId)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				return session.Get<UserRole>(userRoleId);
			}
		}

		public static List<UserRole> GetUserRoleList(ICriteria criteria)
		{
			return (List<UserRole>)criteria.List<UserRole>();
		}

		public static List<UserRole> GetUserRoleList()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(UserRole));
				return (List<UserRole>)c.List<UserRole>();
			}
		}

		public static List<UserRole> GetUserRoleList(string sortExpression, int maximumRows, int startRowIndex)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(UserRole));
				if (sortExpression != null && sortExpression != "")
				{
					// Get ascending or descending order
					bool descending = sortExpression.Contains(" DESC");

					// Strip off ASC or DESC ordering
					sortExpression = sortExpression.Replace(" ASC", "");
					sortExpression = sortExpression.Replace(" DESC", "");
					sortExpression = sortExpression.Trim();

					// Get multi column sort from the comma delimited string
					List<String> expressions = new List<String>();
					if (sortExpression.Contains(","))
					{
						string[] tokens = sortExpression.Split(",".ToCharArray());
						for (int i = 0; i < tokens.Length; i++)
						{
							tokens[i] = tokens[i].Trim();
							if (tokens[i] != "")
								expressions.Add(tokens[i]);
						}
					}
					else if (sortExpression != "")
					{
						expressions.Add(sortExpression);
					}

					// Create the order
					for (int i = 0; i < expressions.Count; i++)
					{
						if (descending)
							c.AddOrder(NHibernate.Criterion.Order.Desc(expressions[i]));
						else
							c.AddOrder(NHibernate.Criterion.Order.Asc(expressions[i]));
					}
				}

				// Set offset and limit
				if (startRowIndex >= 0)
					c.SetFirstResult(startRowIndex);

				if (maximumRows >= 0)
					c.SetMaxResults(maximumRows);

				return (List<UserRole>)c.List<UserRole>();
			}
		}

		public static List<UserRole> GetUserRoleList(string sortExpression)
		{
			return GetUserRoleList(sortExpression, -1, -1);
		}

		public static void InsertUserRole(UserRole obj)
		{
			if (obj != null)
				obj.Insert();
		}

		public static void UpdateUserRole(UserRole obj)
		{
			if (obj != null)
				obj.Update();
		}

		public static void DeleteUserRole(UserRole obj)
		{
			if (obj != null)
				obj.Delete();
		}

		protected static UserRole PopulateUserRole(IDataReader r)
		{
			UserRole obj = new UserRole();
			obj.UserRoleId = (int)r["user_role_id"];
			obj.UserId = (int)r["user_id"];
			obj.RoleId = (int)r["role_id"];
			obj.CreateDate = (DateTime)r["create_date"];
			obj.CreateUserId = (int)r["create_user_id"];
			obj.UpdateDate = (DateTime)r["update_date"];
			obj.UpdateUserId = (int)r["update_user_id"];

			return obj;
		}

		public static int GetCount()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(UserRole));
				c.SetProjection(Projections.RowCount());
				return (int)c.UniqueResult();
			}
		}

		/// <summary>
		/// Insert the entity to database.
		/// </summary>
		public virtual void Insert()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Save(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Update the entity to database.
		/// </summary>
		public virtual void Update()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Update(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Persist the entity back to database.
		/// </summary>
		public virtual void Save()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.SaveOrUpdate(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Delete entity in database.
		/// </summary>
		public virtual void Delete()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Delete(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals(object obj)
		{
			if (this == obj)
				return true;

			if ((obj == null) || (obj.GetType() != this.GetType()))
				return false;

			UserRole castObj = (UserRole)obj;
			return (castObj != null && this.userRoleId == castObj.UserRoleId);
		}

		/// <summary>
		/// Local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return 29 * (1 + this.userRoleId.GetHashCode());
		}
		#endregion
	}
}
