////////////////////////////////////////////////////////////////////////////////////////////
// Class generated by SqlCodeGen 1.1.0.0.
// Do not edit this file directly. Changes will be lost when this file is regenerated.
// Extensions should be added in a separate file using partial classes.
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using NHibernate;
using NHibernate.Criterion;
using NHibernate.Mapping.Attributes;

namespace QSP.Business.Fulfillment
{
    [Serializable]
    [Class(Schema = "`dbo`", Table = "`client_account`")]
    public partial class ClientAccount
    {
        #region Constants
        public const string ClientAccountEntity = "ClientAccount";
        public const string ClientAccountIdProperty = "ClientAccountId";
        public const string ClientIdProperty = "ClientId";
        public const string SequenceCodeProperty = "SequenceCode";
        public const string AccountIdProperty = "AccountId";
        public const string ProgramTypeIdProperty = "ProgramTypeId";
        #endregion

        #region Fields
        protected int clientAccountId = 0;
        protected int clientId = 0;
        protected string sequenceCode = "";
        protected int accountId = 0;
        protected int? programTypeId = 0;
        #endregion

        #region Constructors
        public ClientAccount()
        {
        }
        #endregion

        #region Properties
        [RawXml(Content = @"
		<id name=""ClientAccountId"" column=""`client_account_id`"">
			<generator class=""native"">
			</generator>
		</id>")]

        public virtual int ClientAccountId
        {
            get { return this.clientAccountId; }
            set { this.clientAccountId = value; }
        }

        [Property(Column = "`client_id`")]
        public virtual int ClientId
        {
            get { return this.clientId; }
            set { this.clientId = value; }
        }

        [Property(Column = "`sequence_code`")]
        public virtual string SequenceCode
        {
            get { return this.sequenceCode; }
            set { this.sequenceCode = value; }
        }

        [Property(Column = "`account_id`")]
        public virtual int AccountId
        {
            get { return this.accountId; }
            set { this.accountId = value; }
        }

        [Property(Column = "`program_type_id`")]
        public virtual int? ProgramTypeId
        {
            get { return this.programTypeId; }
            set { this.programTypeId = value; }
        }
        #endregion

        #region Methods

        public static ICriteria CreateCriteria()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(ClientAccount));
                return c;
            }
        }


        public static ClientAccount GetClientAccount(int clientAccountId)
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                return session.Get<ClientAccount>(clientAccountId);
            }
        }

        public static List<ClientAccount> GetClientAccountList()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(ClientAccount));
                return (List<ClientAccount>)c.List<ClientAccount>();
            }
        }

        public static List<ClientAccount> GetClientAccountList(string sortExpression, int maximumRows, int startRowIndex)
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(ClientAccount));
                if (sortExpression != null && sortExpression != "")
                {
                    // Get ascending or descending order
                    bool descending = sortExpression.Contains(" DESC");

                    // Strip off ASC or DESC ordering
                    sortExpression = sortExpression.Replace(" ASC", "");
                    sortExpression = sortExpression.Replace(" DESC", "");
                    sortExpression = sortExpression.Trim();

                    // Get multi column sort from the comma delimited string
                    List<String> expressions = new List<String>();
                    if (sortExpression.Contains(","))
                    {
                        string[] tokens = sortExpression.Split(",".ToCharArray());
                        for (int i = 0; i < tokens.Length; i++)
                        {
                            tokens[i] = tokens[i].Trim();
                            if (tokens[i] != "")
                                expressions.Add(tokens[i]);
                        }
                    }
                    else if (sortExpression != "")
                    {
                        expressions.Add(sortExpression);
                    }

                    // Create the order
                    for (int i = 0; i < expressions.Count; i++)
                    {
                        if (descending)
                            c.AddOrder(NHibernate.Criterion.Order.Desc(expressions[i]));
                        else
                            c.AddOrder(NHibernate.Criterion.Order.Asc(expressions[i]));
                    }
                }

                // Set offset and limit
                if (startRowIndex >= 0)
                    c.SetFirstResult(startRowIndex);

                if (maximumRows >= 0)
                    c.SetMaxResults(maximumRows);

                return (List<ClientAccount>)c.List<ClientAccount>();
            }
        }

        public static List<ClientAccount> GetClientAccountList(string sortExpression)
        {
            return GetClientAccountList(sortExpression, -1, -1);
        }

        public static List<ClientAccount> GetClientAccountList(ICriteria criteria)
        {
            return (List<ClientAccount>)criteria.List<ClientAccount>();
        }

        public static void InsertClientAccount(ClientAccount obj)
        {
            if (obj != null)
                obj.Insert();
        }

        public static void UpdateClientAccount(ClientAccount obj)
        {
            if (obj != null)
                obj.Update();
        }

        public static void DeleteClientAccount(ClientAccount obj)
        {
            if (obj != null)
                obj.Delete();
        }

        protected static ClientAccount PopulateClientAccount(IDataReader r)
        {
            ClientAccount obj = new ClientAccount();
            obj.ClientAccountId = (int)r["client_account_id"];
            obj.ClientId = (int)r["client_id"];
            obj.SequenceCode = (string)r["sequence_code"];
            obj.AccountId = (int)r["account_id"];
            obj.ProgramTypeId = (r["program_type_id"] == DBNull.Value) ? null : (int?)r["program_type_id"];

            return obj;
        }

        public static int GetCount()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(ClientAccount));
                c.SetProjection(Projections.RowCount());
                return (int)c.UniqueResult();
            }
        }

        /// <summary>
        /// Insert the entity to database.
        /// </summary>
        public virtual void Insert()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ITransaction trans = session.BeginTransaction();
                try
                {
                    session.Save(this);
                    trans.Commit();
                }
                catch
                {
                    trans.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// Update the entity to database.
        /// </summary>
        public virtual void Update()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ITransaction trans = session.BeginTransaction();
                try
                {
                    session.Update(this);
                    trans.Commit();
                }
                catch
                {
                    trans.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// Persist the entity back to database.
        /// </summary>
        public virtual void Save()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ITransaction trans = session.BeginTransaction();
                try
                {
                    session.SaveOrUpdate(this);
                    trans.Commit();
                }
                catch
                {
                    trans.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// Delete entity in database.
        /// </summary>
        public virtual void Delete()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ITransaction trans = session.BeginTransaction();
                try
                {
                    session.Delete(this);
                    trans.Commit();
                }
                catch
                {
                    trans.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// Local implementation of Equals based on unique value members
        /// </summary>
        public override bool Equals(object obj)
        {
            if (this == obj)
                return true;

            if ((obj == null) || (obj.GetType() != this.GetType()))
                return false;

            ClientAccount castObj = (ClientAccount)obj;
            return (castObj != null && this.clientAccountId == castObj.ClientAccountId);
        }

        /// <summary>
        /// Local implementation of GetHashCode based on unique value members
        /// </summary>
        public override int GetHashCode()
        {
            return 29 * (1 + this.clientAccountId.GetHashCode());
        }





        #endregion
    }
}