////////////////////////////////////////////////////////////////////////////////////////////
// Class generated by SqlCodeGen 1.1.0.0.
// Do not edit this file directly. Changes will be lost when this file is regenerated.
// Extensions should be added in a separate file using partial classes.
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using NHibernate;
using NHibernate.Criterion;
using NHibernate.Mapping.Attributes;

namespace QSP.Business.Fulfillment
{
    [Serializable]
    [Class(Schema = "`dbo`", Table = "`business_calendar`")]
    public partial class BusinessCalendar
    {
        #region Constants
        public const string BusinessCalendarEntity = "BusinessCalendar";
        public const string BusinessDateProperty = "BusinessDate";
        public const string WeekendProperty = "Weekend";
        public const string HolidayProperty = "Holiday";
        #endregion

        #region Fields
        protected DateTime businessDate = DateTime.Now;
        protected bool weekend = false;
        protected bool holiday = false;
        #endregion

        #region Constructors
        public BusinessCalendar()
        {
        }
        #endregion

        #region Properties
        [RawXml(Content = @"
		<id name=""BusinessDate"" column=""`business_date`"">
			<generator class=""assigned"">
			</generator>
		</id>")]

        public virtual DateTime BusinessDate
        {
            get { return this.businessDate; }
            set { this.businessDate = value; }
        }

        [Property(Column = "`weekend`")]
        public virtual bool Weekend
        {
            get { return this.weekend; }
            set { this.weekend = value; }
        }

        [Property(Column = "`holiday`")]
        public virtual bool Holiday
        {
            get { return this.holiday; }
            set { this.holiday = value; }
        }
        #endregion

        #region Methods

        public static ICriteria CreateCriteria()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(BusinessCalendar));
                return c;
            }
        }

        public static BusinessCalendar GetBusinessCalendar(DateTime businessDate)
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                return session.Get<BusinessCalendar>(businessDate);
            }
        }

        public static List<BusinessCalendar> GetBusinessCalendarList()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(BusinessCalendar));
                return (List<BusinessCalendar>)c.List<BusinessCalendar>();
            }
        }

        public static List<BusinessCalendar> GetBusinessCalendarList(string sortExpression, int maximumRows, int startRowIndex)
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(BusinessCalendar));
                if (sortExpression != null && sortExpression != "")
                {
                    // Get ascending or descending order
                    bool descending = sortExpression.Contains(" DESC");

                    // Strip off ASC or DESC ordering
                    sortExpression = sortExpression.Replace(" ASC", "");
                    sortExpression = sortExpression.Replace(" DESC", "");
                    sortExpression = sortExpression.Trim();

                    // Get multi column sort from the comma delimited string
                    List<String> expressions = new List<String>();
                    if (sortExpression.Contains(","))
                    {
                        string[] tokens = sortExpression.Split(",".ToCharArray());
                        for (int i = 0; i < tokens.Length; i++)
                        {
                            tokens[i] = tokens[i].Trim();
                            if (tokens[i] != "")
                                expressions.Add(tokens[i]);
                        }
                    }
                    else if (sortExpression != "")
                    {
                        expressions.Add(sortExpression);
                    }

                    // Create the order
                    for (int i = 0; i < expressions.Count; i++)
                    {
                        if (descending)
                            c.AddOrder(NHibernate.Criterion.Order.Desc(expressions[i]));
                        else
                            c.AddOrder(NHibernate.Criterion.Order.Asc(expressions[i]));
                    }
                }

                // Set offset and limit
                if (startRowIndex >= 0)
                    c.SetFirstResult(startRowIndex);

                if (maximumRows >= 0)
                    c.SetMaxResults(maximumRows);

                return (List<BusinessCalendar>)c.List<BusinessCalendar>();
            }
        }

        public static List<BusinessCalendar> GetBusinessCalendarList(string sortExpression)
        {
            return GetBusinessCalendarList(sortExpression, -1, -1);
        }

        public static List<BusinessCalendar> GetBusinessCalendarList(ICriteria criteria)
        {
            return (List<BusinessCalendar>)criteria.List<BusinessCalendar>();
        }

        protected static BusinessCalendar PopulateBusinessCalendar(IDataReader r)
        {
            BusinessCalendar obj = new BusinessCalendar();
            obj.BusinessDate = (DateTime)r["business_date"];
            obj.Weekend = (bool)r["weekend"];
            obj.Holiday = (bool)r["holiday"];

            return obj;
        }

        public static int GetCount()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(BusinessCalendar));
                c.SetProjection(Projections.RowCount());
                return (int)c.UniqueResult();
            }
        }

        /// <summary>
        /// Local implementation of Equals based on unique value members
        /// </summary>
        public override bool Equals(object obj)
        {
            if (this == obj)
                return true;

            if ((obj == null) || (obj.GetType() != this.GetType()))
                return false;

            BusinessCalendar castObj = (BusinessCalendar)obj;
            return (castObj != null && this.businessDate == castObj.BusinessDate);
        }

        /// <summary>
        /// Local implementation of GetHashCode based on unique value members
        /// </summary>
        public override int GetHashCode()
        {
            return 29 * (1 + this.businessDate.GetHashCode());
        }





        #endregion
    }
}