////////////////////////////////////////////////////////////////////////////////////////////
// Class generated by SqlCodeGen 1.1.0.0.
// Do not edit this file directly. Changes will be lost when this file is regenerated.
// Extensions should be added in a separate file using partial classes.
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using NHibernate;
using NHibernate.Criterion;
using NHibernate.Mapping.Attributes;

namespace QSP.Business.Fulfillment
{
	[Serializable]
	[Class(Schema="`dbo`", Table="`warehouse`")]
	public partial class Warehouse
	{
		#region Constants
        public const string WarehouseEntity = "Warehouse";
		public const string WarehouseIdProperty = "WarehouseId";
		public const string PostalAddressIdProperty = "PostalAddressId";
		public const string WarehouseNameProperty = "WarehouseName";
		public const string DeletedProperty = "Deleted";
		public const string CreateDateProperty = "CreateDate";
		public const string CreateUserIdProperty = "CreateUserId";
		public const string UpdateDateProperty = "UpdateDate";
		public const string UpdateUserIdProperty = "UpdateUserId";
		public const string FulfWarehouseIdProperty = "FulfWarehouseId";
		public const string VendorIdProperty = "VendorId";
		public const string WarehouseStatusIdProperty = "WarehouseStatusId";
		public const string PhoneNumberIdProperty = "PhoneNumberId";
		public const string FaxNumberIdProperty = "FaxNumberId";
		public const string ReceivingPhoneNumberIdProperty = "ReceivingPhoneNumberId";
		public const string EmailIdProperty = "EmailId";
		public const string CompanyNameProperty = "CompanyName";
		public const string ShortDescriptionProperty = "ShortDescription";
		public const string IsVendorWarehouseProperty = "IsVendorWarehouse";
		public const string PickUpProperty = "PickUp";
        public const string IsPickUpAvailableForOEProperty = "IsPickUpAvailableForOE";
        public const string IsPickUpAvailableForEFRProperty = "IsPickUpAvailableForEFR";
		#endregion

		#region Fields
		protected int warehouseId = 0;
		protected int postalAddressId = 0;
		protected string warehouseName = "";
		protected bool deleted = false;
		protected DateTime createDate = DateTime.Now;
		protected int createUserId = 0;
		protected DateTime updateDate = DateTime.Now;
		protected int updateUserId = 0;
		protected int fulfWarehouseId = 0;
		protected int? vendorId = null;
		protected int warehouseStatusId = 0;
		protected int? phoneNumberId = null;
		protected int? faxNumberId = null;
		protected int? receivingPhoneNumberId = null;
		protected int? emailId = null;
		protected string companyName = null;
		protected string shortDescription = null;
		protected bool isVendorWarehouse = false;
		protected bool pickUp = false;
        protected bool isPickUpAvailableForOE = false;
        protected bool isPickUpAvailableForEFR = false;
		#endregion

		#region Constructors
		public Warehouse() 
		{
		}
		#endregion

		#region Properties
		[RawXml(Content=@"
		<id name=""WarehouseId"" column=""`warehouse_id`"">
			<generator class=""native"">
			</generator>
		</id>")]

		public virtual int WarehouseId
		{
			get { return this.warehouseId; }
			set { this.warehouseId = value; }
		}

		[Property(Column="`postal_address_id`")]
		public virtual int PostalAddressId
		{
			get { return this.postalAddressId; }
			set { this.postalAddressId = value; }
		}

		[Property(Column="`warehouse_name`")]
		public virtual string WarehouseName
		{
			get { return this.warehouseName; }
			set { this.warehouseName = value; }
		}

		[Property(Column="`deleted`")]
		public virtual bool Deleted
		{
			get { return this.deleted; }
			set { this.deleted = value; }
		}

		[Property(Column="`create_date`")]
		public virtual DateTime CreateDate
		{
			get { return this.createDate; }
			set { this.createDate = value; }
		}

		[Property(Column="`create_user_id`")]
		public virtual int CreateUserId
		{
			get { return this.createUserId; }
			set { this.createUserId = value; }
		}

		[Property(Column="`update_date`")]
		public virtual DateTime UpdateDate
		{
			get { return this.updateDate; }
			set { this.updateDate = value; }
		}

		[Property(Column="`update_user_id`")]
		public virtual int UpdateUserId
		{
			get { return this.updateUserId; }
			set { this.updateUserId = value; }
		}

		[Property(Column="`fulf_warehouse_id`")]
		public virtual int FulfWarehouseId
		{
			get { return this.fulfWarehouseId; }
			set { this.fulfWarehouseId = value; }
		}

		[Property(Column="`vendor_id`")]
		public virtual int? VendorId
		{
			get { return this.vendorId; }
			set { this.vendorId = value; }
		}

		[Property(Column="`warehouse_status_id`")]
		public virtual int WarehouseStatusId
		{
			get { return this.warehouseStatusId; }
			set { this.warehouseStatusId = value; }
		}

		[Property(Column="`phone_number_id`")]
		public virtual int? PhoneNumberId
		{
			get { return this.phoneNumberId; }
			set { this.phoneNumberId = value; }
		}

		[Property(Column="`fax_number_id`")]
		public virtual int? FaxNumberId
		{
			get { return this.faxNumberId; }
			set { this.faxNumberId = value; }
		}

		[Property(Column="`receiving_phone_number_id`")]
		public virtual int? ReceivingPhoneNumberId
		{
			get { return this.receivingPhoneNumberId; }
			set { this.receivingPhoneNumberId = value; }
		}

		[Property(Column="`email_id`")]
		public virtual int? EmailId
		{
			get { return this.emailId; }
			set { this.emailId = value; }
		}

		[Property(Column="`company_name`")]
		public virtual string CompanyName
		{
			get { return this.companyName; }
			set { this.companyName = value; }
		}

		[Property(Column="`short_description`")]
		public virtual string ShortDescription
		{
			get { return this.shortDescription; }
			set { this.shortDescription = value; }
		}

		[Property(Column="`is_vendor_warehouse`")]
		public virtual bool IsVendorWarehouse
		{
			get { return this.isVendorWarehouse; }
			set { this.isVendorWarehouse = value; }
		}

		[Property(Column="`pick_up`")]
		public virtual bool PickUp
		{
			get { return this.pickUp; }
			set { this.pickUp = value; }
		}

        [Property(Column = "`is_pickup_available_for_oe`")]
        public virtual bool IsPickUpAvailableForOE
        {
            get { return this.isPickUpAvailableForOE; }
            set { this.isPickUpAvailableForOE = value; }
        }

        [Property(Column = "`is_pickup_available_for_efrss`")]
        public virtual bool IsPickUpAvailableForEFR
        {
            get { return this.isPickUpAvailableForEFR; }
            set { this.isPickUpAvailableForEFR = value; }
        }
        #endregion

		#region Methods

        public static ICriteria CreateCriteria()
        {
            using (ISession session = SqlSessionManager.OpenSession())
            {
                ICriteria c = session.CreateCriteria(typeof(Warehouse));
                return c;
            }
        }

        public static List<Warehouse> GetWarehouseList(ICriteria criteria)
        {
            return (List<Warehouse>)criteria.List<Warehouse>();
        }

		public static Warehouse GetWarehouse(int warehouseId)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				return session.Get<Warehouse>(warehouseId);
			}
		}

		public static List<Warehouse> GetWarehouseList()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(Warehouse));
				return (List<Warehouse>)c.List<Warehouse>();
			}
		}

		public static List<Warehouse> GetWarehouseList(string sortExpression, int maximumRows, int startRowIndex)
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(Warehouse));
				if (sortExpression != null && sortExpression != "")
				{
					// Get ascending or descending order
					bool descending = sortExpression.Contains(" DESC");

					// Strip off ASC or DESC ordering
					sortExpression = sortExpression.Replace(" ASC", "");
					sortExpression = sortExpression.Replace(" DESC", "");
					sortExpression = sortExpression.Trim();

					// Get multi column sort from the comma delimited string
					List<String> expressions = new List<String>();
					if (sortExpression.Contains(","))
					{
						string[] tokens = sortExpression.Split(",".ToCharArray());
						for (int i = 0; i < tokens.Length; i++)
						{
							tokens[i] = tokens[i].Trim();
							if (tokens[i] != "")
								expressions.Add(tokens[i]);
						}
					}
					else if (sortExpression != "")
					{
						expressions.Add(sortExpression);
					}

					// Create the order
					for (int i = 0; i < expressions.Count; i++)
					{
						if (descending)
							c.AddOrder(NHibernate.Criterion.Order.Desc(expressions[i]));
						else
							c.AddOrder(NHibernate.Criterion.Order.Asc(expressions[i]));
					}
				}

				// Set offset and limit
				if (startRowIndex >= 0)
					c.SetFirstResult(startRowIndex);

				if (maximumRows >= 0)
					c.SetMaxResults(maximumRows);

				return (List<Warehouse>)c.List<Warehouse>();
			}
		}

		public static List<Warehouse> GetWarehouseList(string sortExpression)
		{
			return GetWarehouseList(sortExpression, -1, -1);
		}

		public static void InsertWarehouse(Warehouse obj)
		{
			if (obj != null)
				obj.Insert();
		}

		public static void UpdateWarehouse(Warehouse obj)
		{
			if (obj != null)
				obj.Update();
		}

		public static void DeleteWarehouse(Warehouse obj)
		{
			if (obj != null)
				obj.Delete();
		}

        protected static Warehouse PopulateWarehouse(IDataReader r)
		{
			Warehouse obj = new Warehouse();
			obj.WarehouseId = (int)r["warehouse_id"];
			obj.PostalAddressId = (int)r["postal_address_id"];
			obj.WarehouseName = (string)r["warehouse_name"];
			obj.Deleted = (bool)r["deleted"];
			obj.CreateDate = (DateTime)r["create_date"];
			obj.CreateUserId = (int)r["create_user_id"];
			obj.UpdateDate = (DateTime)r["update_date"];
			obj.UpdateUserId = (int)r["update_user_id"];
			obj.FulfWarehouseId = (int)r["fulf_warehouse_id"];
			obj.VendorId = (r["vendor_id"] == DBNull.Value) ? null : (int?)r["vendor_id"];
			obj.WarehouseStatusId = (int)r["warehouse_status_id"];
			obj.PhoneNumberId = (r["phone_number_id"] == DBNull.Value) ? null : (int?)r["phone_number_id"];
			obj.FaxNumberId = (r["fax_number_id"] == DBNull.Value) ? null : (int?)r["fax_number_id"];
			obj.ReceivingPhoneNumberId = (r["receiving_phone_number_id"] == DBNull.Value) ? null : (int?)r["receiving_phone_number_id"];
			obj.EmailId = (r["email_id"] == DBNull.Value) ? null : (int?)r["email_id"];
			obj.CompanyName = (r["company_name"] == DBNull.Value) ? null : (string)r["company_name"];
			obj.ShortDescription = (r["short_description"] == DBNull.Value) ? null : (string)r["short_description"];
			obj.IsVendorWarehouse = (bool)r["is_vendor_warehouse"];
			obj.PickUp = (bool)r["pick_up"];
            obj.IsPickUpAvailableForOE = (bool)r["is_pickup_available_for_oe"];
            obj.IsPickUpAvailableForEFR = (bool)r["is_pickup_available_for_efrss"];

			return obj;
		}

		public static int GetCount()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ICriteria c = session.CreateCriteria(typeof(Warehouse));
				c.SetProjection(Projections.RowCount());
				return (int) c.UniqueResult();
			}
		}

		/// <summary>
		/// Insert the entity to database.
		/// </summary>
		public virtual void Insert()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Save(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Update the entity to database.
		/// </summary>
		public virtual void Update()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Update(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Persist the entity back to database.
		/// </summary>
		public virtual void Save()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.SaveOrUpdate(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Delete entity in database.
		/// </summary>
		public virtual void Delete()
		{
			using (ISession session = SqlSessionManager.OpenSession())
			{
				ITransaction trans = session.BeginTransaction();
				try
				{
					session.Delete(this);
					trans.Commit();
				}
				catch
				{
					trans.Rollback();
					throw;
				}
			}
		}

		/// <summary>
		/// Local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals(object obj)
		{
			if (this == obj)
				return true;

			if ((obj == null) || (obj.GetType() != this.GetType())) 
				return false;

			Warehouse castObj = (Warehouse)obj;
			return (castObj != null && this.warehouseId == castObj.WarehouseId);
		}

		/// <summary>
		/// Local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return 29 * (1 + this.warehouseId.GetHashCode());
		}
		#endregion
	}
}
