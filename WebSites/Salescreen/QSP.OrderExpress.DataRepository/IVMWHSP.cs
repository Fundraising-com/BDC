///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'IVMWHSP'
// Based on code originally generated by LLBLGen v1.2.1402.29234 Final .
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using tableRef = QSPForm.Common.DataDef.IVMWHSPTable;
using QSPForm.Common;
using System.Data.SqlClient;

namespace QSPForm.DataRepository
{
	///<summary>Data Access class for the table 'IVMWHSP'.</summary>
	public class IVMWHSP : DBInteractionBase
	{
		#region Parameters
		//Stored procedure parameter names
		public const string PARAM_PKID = "@IV#WHS";
		public const string PARAM_WAREHOUSE_NAME = "@IVNMWH";
		//
		// Stored procedure names for each operation
		private string SQL_PROC_SELECT_ONE = "QDSDATA.dbo.pr_IVMWHSP_SelectOne";
		private string SQL_PROC_SELECT_ALL = "QDSDATA.dbo.pr_IVMWHSP_SelectAll";
		
		#endregion Parameters


		///<summary>default constructor</summary>
		public IVMWHSP()
		{
			// Nothing for now.
		}

		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iInstance</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		///		 <LI>sUserName</LI>
		///		 <LI>sPassword</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public new tableRef SelectOne(int FulfWhseID)
		{
			tableRef Table = new tableRef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ONE;			
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FulfWhseID));

			Select(cmdToExecute,Table);

			return Table;
		}

		public tableRef SelectDefaultWarehouseByZipCode(string Zip)
		{
			tableRef Table = new tableRef();
			SqlCommand	cmdToExecute = new SqlCommand();
			//cmdToExecute.CommandText = "QDSDATA.dbo.pr_IVMWHSP_SelectByZipCode_1";
            //Commented for Cookie Dough
            cmdToExecute.CommandText = "QDSDATA.dbo.pr_IVMWHSP_SelectByZipCode";	
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			if (Zip.Length > 5)
				Zip = Zip.Substring(0,5);
			//cmdToExecute.Parameters.Add(new SqlParameter("@IV#ZIP", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Zip));
            cmdToExecute.Parameters.Add(new SqlParameter("@IV#ZIP", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Zip));
				
			Select(cmdToExecute,Table);

			return Table;
		}

        /// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		/// </UL>
		/// </remarks>
		public new tableRef SelectAll()
		{
			tableRef Table = new tableRef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ALL;
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			Select(cmdToExecute,Table);
			//AssignInnerProperty(Table);
			return  Table;

		}

		public Common.DataDef.FINGDSTable SelectWarehouseProductInventory(int FulfWhseID)
		{
			Common.DataDef.FINGDSTable Table = new Common.DataDef.FINGDSTable();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QDSDATA.dbo.pr_FINGDS_SelectByWarehouseID";			
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			cmdToExecute.Parameters.Add(new SqlParameter("@FGWHSE", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FulfWhseID));

			Select(cmdToExecute,Table);

			return Table;
		}

		

	}
}
