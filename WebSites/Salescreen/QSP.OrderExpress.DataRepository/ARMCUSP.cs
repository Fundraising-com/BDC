///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'ARMCUSP'
// Based on code originally generated by LLBLGen v1.2.1402.29234 Final .
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using tableRef = QSPForm.Common.DataDef.ARMCUSPTable;
using QSPForm.Common;
using QSPForm.Common.DataDef;
using System.Data.SqlClient;

namespace QSPForm.DataRepository
{
	///<summary>Data Access class for the table 'ARMCUSP'.</summary>
	public class ARMCUSP : DBInteractionBase
	{
		#region Parameters
		//Stored procedure parameter names
		public const string PARAM_PKID = "@ARCUST";
		public const string PARAM_ACCOUNT_NAME = "@ARNMBL";
		//
		// Stored procedure names for each operation
		private const string SQL_PROC_SELECT_ONE = "QDSDATA.dbo.pr_ARMCUSP_SelectOne";
		private const string SQL_PROC_SELECT_ALL = "QDSDATA.dbo.pr_ARMCUSP_SelectAll";
		#endregion Parameters

		#region Constructors
		///<summary>default constructor</summary>
		public ARMCUSP()
		{
			// Nothing for now.
		}
		#endregion Constructors

		#region Methods
		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iInstance</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		///		 <LI>sUserName</LI>
		///		 <LI>sPassword</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public new tableRef SelectOne(int FulfAccountID)
		{
			tableRef Table = new tableRef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ONE;
			
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FulfAccountID));
			
			Select(cmdToExecute,Table);

			return Table;
		}

		public tableRef SelectLastSaleDate(int FulfAccountID)
		{
			tableRef Table = new tableRef();
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "QDSDATA.dbo.pr_ARMCUSP_SelectLastSaleDate";
			
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			cmdToExecute.Parameters.Add(new SqlParameter(PARAM_PKID, SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, FulfAccountID));
			
			Select(cmdToExecute,Table);

			return Table;
		}

		public DateTime GetLastOrderDate(int FulfAccountID)
		{
			DateTime toReturn = DateTime.MinValue;
				
			try
			{
				ARMCUSPTable dTbl = SelectLastSaleDate(FulfAccountID);//SelectOne_FromSynch(fulf_account_id);
				if (dTbl.Rows.Count >0)
				{
					int LastOrderMonth = 0;
					int LastOrderDay = 0;
					int LastOrderYear = 0;
					DataRow ARCRow = dTbl.Rows[0];
					if (!ARCRow.IsNull(ARMCUSPTable.FLD_LAST_SALES_MONTH))
						LastOrderMonth = Convert.ToInt32(ARCRow[ARMCUSPTable.FLD_LAST_SALES_MONTH]);
					if (!ARCRow.IsNull(ARMCUSPTable.FLD_LAST_SALES_DAY))
						LastOrderDay = Convert.ToInt32(ARCRow[ARMCUSPTable.FLD_LAST_SALES_DAY]);
					if (!ARCRow.IsNull(ARMCUSPTable.FLD_LAST_SALES_YEAR))
					{
						LastOrderYear = Convert.ToInt32(ARCRow[ARMCUSPTable.FLD_LAST_SALES_YEAR]);
						LastOrderYear = LastOrderYear + 2000;
					}
					if (LastOrderMonth != 0 && LastOrderDay != 0 && LastOrderYear != 0)
					{
						toReturn = new DateTime(LastOrderYear,LastOrderMonth,LastOrderDay);						
					}
				}
				
				
			}
			catch (Exception ex)
			{
				//Don't do anything for now	
				throw ex;
			}
			return toReturn;
		}

		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		/// </UL>
		/// </remarks>
		public new tableRef SelectAll()
		{
			tableRef Table = new tableRef();

			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = SQL_PROC_SELECT_ALL;
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			Select(cmdToExecute,Table);
			return  Table;

		}

		
		#endregion Methods

	}
}
