USE [QSPFulfillment]
GO

/****** Object:  StoredProcedure [dbo].[pr_ar_sync_generate_payment_data]    Script Date: 06/16/2010 13:24:33 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		Juan Martinez
-- Create date: 2010-05-14
-- Description:	Start date is inclisive
--				End date is exclusive
-- =============================================
CREATE PROCEDURE [dbo].[pr_ar_sync_generate_payment_data]
	@pStartDate datetime, 
	@pEndDate datetime
AS
BEGIN

	SET NOCOUNT ON;



	-- Declare temp table for payments
	declare @TempPayments table
	(
		id int identity, 
		is_processed bit, 
		transaction_date datetime, 
		fulf_account_id int, 
		fulf_ar_sequence_line int, 
		fulf_ar_sequence_line_for_invoice int, 
		payment_id int,
		payment_date datetime, 
		payment_type_id int, 
		payment_code_id int, 
		amount decimal(18,2), 
		credit_card_id int, 
		bank_check_id int, 
		create_date datetime, 
		create_user_id int, 
		update_date datetime, 
		update_user_id int
	)



	-- Insert payment values from as400 data
	insert into @TempPayments
	select		0, 
				transaction_date, 
				ARCUST, 
				AR#SEQ, 
				AR#ISQ,
				null, 
				transaction_date, 
				(	case(ARCDTR)
						when 'CP' then 1 
					else 
						case(ar#chk)
							when null then 6
							when 0 then 6
						else
							2
						end
					end
				) 
					as payment_type_id, 
				(select top 1 payment_code_id from payment_code where fulf_payment_code = ARCDTR) 
					as payment_code_id, 
				ARAMTR, 
				null, 
				null, 
				getdate(), 
				100010, 
				null, 
				null
	from		as400_ardhisp 
	where		ARGORF = 'F' 
		and		ARCDTR in (select fulf_payment_code from payment_code)
		and		transaction_date >= @pStartDate 
		and		transaction_date < @pEndDate



	-- Iterate through temp values
	-- Create qspfulfillment payments
	-- Get the newly created payment id
	declare @current_temp_payment_id int
	declare @new_payment_id int

	while exists (select * from @TempPayments where is_processed = 0)
		begin
			select @current_temp_payment_id = MIN(id) from @TempPayments where is_processed = 0

			insert into payment
				select	payment_date, 
						payment_type_id, 
						payment_code_id, 
						amount, 
						credit_card_id, 
						bank_check_id, 
						create_date, 
						create_user_id, 
						update_date, 
						update_user_id, 
						transaction_date, 
						1, 
						fulf_ar_sequence_line, 
						fulf_account_id
				from	@TempPayments
				where	id = @current_temp_payment_id

			set @new_payment_id = SCOPE_IDENTITY()

			update	@TempPayments
			set		payment_id = @new_payment_id, 
					is_processed = 1
			where	id = @current_temp_payment_id
		end



	-- Declare temp table for payment invoice records
	DECLARE @TempPaymentInvoices TABLE
	(
		payment_id int, 
		invoice_id int, 
		fulf_ar_sequence_line_for_invoice int, 
		fulf_account_id int, 
		amount decimal(18,2), 
		create_date datetime, 
		create_user_id int, 
		update_date datetime, 
		update_user_id int, 
		transaction_date datetime
	)



	-- Insert temp payment invoice records
	insert into @TempPaymentInvoices
		select	tp.payment_id, 
				(
					select		top 1 
								i.invoice_id 
					from		[invoice] i
					where	
							i.fulf_account_id = tp.fulf_account_id
						and i.fulf_ar_sequence_line = tp.fulf_ar_sequence_line_for_invoice
				)	as invoice_id, 
				tp.fulf_ar_sequence_line_for_invoice, 
				tp.fulf_account_id, 
				tp.amount, 
				tp.create_date, 
				tp.create_user_id, 
				tp.update_date, 
				tp.update_user_id, 
				tp.transaction_date
		from	@TempPayments tp



	-- Insert payment invoice records
	insert into payment_invoice
		select	payment_id, 
				invoice_id, 
				amount, 
				create_date, 
				create_user_id, 
				update_date, 
				update_user_id, 
				transaction_date, 
				1
		from	@TempPaymentInvoices
		where	invoice_id is not null	



END



GO


